{"pr_number": 390, "pr_title": "Aggrandize Moderation - (Freeze command & other improvements)", "pr_author": "applenick", "pr_createdAt": "2020-03-31T07:00:11Z", "pr_url": "https://github.com/PGMDev/PGM/pull/390", "timeline": [{"oid": "618c4c876251673fe63705854e82dc5be1c33738", "url": "https://github.com/PGMDev/PGM/commit/618c4c876251673fe63705854e82dc5be1c33738", "message": "Reintroduce freeze command\n* Along with several other moderation improvements\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-31T06:30:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0MDY5NQ==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400740695", "body": "```suggestion\r\n        ChatColor.AQUA\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ChatColor.DARK_AQUA\n          \n          \n            \n                    ChatColor.AQUA", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">ChatColor</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">DARK_AQUA</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">ChatColor</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">AQUA</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Pablete1234", "createdAt": "2020-03-31T08:42:08Z", "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA", "originalCommit": "618c4c876251673fe63705854e82dc5be1c33738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NDcwMw==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401074703", "bodyText": "Hey @Pablete1234,\nI want to keep all the tool names as separate colors, the observer tool is already Aqua. Do you have any recommendations? Perhaps bolded white or would you rather I swap the colors between the observer tools and this?", "author": "applenick", "createdAt": "2020-03-31T17:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0MDY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwMTMzNg==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401301336", "bodyText": "I\u2019m marking this as resolved, please check my most recent comment below for the new format. I think it looks better than dark aqua. Let me know if you agree.", "author": "applenick", "createdAt": "2020-04-01T01:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0MDY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1MjAyMw==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400852023", "body": "This should probably be in `ObserverToolFactory` / `Observing`", "bodyText": "This should probably be in ObserverToolFactory / Observing", "bodyHTML": "<p dir=\"auto\">This should probably be in <code>ObserverToolFactory</code> / <code>Observing</code></p>", "author": "KingOfSquares", "createdAt": "2020-03-31T11:54:09Z", "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {", "originalCommit": "618c4c876251673fe63705854e82dc5be1c33738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3ODM0Nw==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401078347", "bodyText": "@KingOfSquares I understand your idea, however that would break convention. Any tool that has built in functionality (picker, observer tools) is created in the match module where the related functionality is located. Were this featured handled outside of PGM then yeah it would be located there. Thanks for the suggestion though \ud83d\ude04", "author": "applenick", "createdAt": "2020-03-31T17:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1MjAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NDk2Ng==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400854966", "body": "You should also add `/tell` and `/reply`", "bodyText": "You should also add /tell and /reply", "bodyHTML": "<p dir=\"auto\">You should also add <code>/tell</code> and <code>/reply</code></p>", "author": "KingOfSquares", "createdAt": "2020-03-31T11:59:17Z", "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {\n+    Player player = event.getPlayer().getBukkit();\n+    if (player.hasPermission(Permissions.STAFF)) {\n+      player.getInventory().setItem(TOOL_SLOT_NUM, getFreezeTool(player));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerInteractEntity(final ObserverInteractEvent event) {\n+    if (event.getPlayer().isDead()) return;\n+\n+    if (freeze.isFrozen(event.getPlayer().getBukkit())) {\n+      event.setCancelled(true);\n+    } else {\n+      if (event.getClickedItem() != null\n+          && event.getClickedItem().getType() == TOOL_MATERIAL\n+          && event.getPlayer().getBukkit().hasPermission(Permissions.STAFF)\n+          && event.getClickedPlayer() != null) {\n+\n+        event.setCancelled(true);\n+\n+        freeze.setFrozen(\n+            event.getPlayer().getBukkit(),\n+            event.getClickedPlayer(),\n+            !freeze.isFrozen(event.getClickedEntity()));\n+      }\n+    }\n+  }\n+\n+  private static final List<String> ALLOWED_CMDS = Lists.newArrayList(\"/msg\", \"/r\");", "originalCommit": "618c4c876251673fe63705854e82dc5be1c33738", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MDkxMg==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400860912", "body": "I believe you can just cancel PlayerBucketEvent instead of both fill and empty?", "bodyText": "I believe you can just cancel PlayerBucketEvent instead of both fill and empty?", "bodyHTML": "<p dir=\"auto\">I believe you can just cancel PlayerBucketEvent instead of both fill and empty?</p>", "author": "KingOfSquares", "createdAt": "2020-03-31T12:09:55Z", "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {\n+    Player player = event.getPlayer().getBukkit();\n+    if (player.hasPermission(Permissions.STAFF)) {\n+      player.getInventory().setItem(TOOL_SLOT_NUM, getFreezeTool(player));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerInteractEntity(final ObserverInteractEvent event) {\n+    if (event.getPlayer().isDead()) return;\n+\n+    if (freeze.isFrozen(event.getPlayer().getBukkit())) {\n+      event.setCancelled(true);\n+    } else {\n+      if (event.getClickedItem() != null\n+          && event.getClickedItem().getType() == TOOL_MATERIAL\n+          && event.getPlayer().getBukkit().hasPermission(Permissions.STAFF)\n+          && event.getClickedPlayer() != null) {\n+\n+        event.setCancelled(true);\n+\n+        freeze.setFrozen(\n+            event.getPlayer().getBukkit(),\n+            event.getClickedPlayer(),\n+            !freeze.isFrozen(event.getClickedEntity()));\n+      }\n+    }\n+  }\n+\n+  private static final List<String> ALLOWED_CMDS = Lists.newArrayList(\"/msg\", \"/r\");\n+\n+  @EventHandler(priority = EventPriority.HIGH)\n+  public void onPlayerCommand(final PlayerCommandPreprocessEvent event) {\n+    if (freeze.isFrozen(event.getPlayer()) && !event.getPlayer().hasPermission(Permissions.STAFF)) {\n+      boolean allow =\n+          ALLOWED_CMDS.stream()\n+              .filter(cmd -> event.getMessage().startsWith(cmd))\n+              .findAny()\n+              .isPresent();\n+\n+      if (!allow) {\n+        // Don't allow commands except for those related to chat.\n+        event.setCancelled(true);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerMove(final PlayerMoveEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      Location old = event.getFrom();\n+      old.setPitch(event.getTo().getPitch());\n+      old.setYaw(event.getTo().getYaw());\n+      event.setTo(old);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)\n+  public void onVehicleMove(final VehicleMoveEvent event) {\n+    if (!event.getVehicle().isEmpty() && freeze.isFrozen(event.getVehicle().getPassenger())) {\n+      event.getVehicle().setVelocity(new Vector(0, 0, 0));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleEnter(final VehicleEnterEvent event) {\n+    if (freeze.isFrozen(event.getEntered())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleExit(final VehicleExitEvent event) {\n+    if (freeze.isFrozen(event.getExited())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockBreak(final BlockBreakEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockPlace(final BlockPlaceEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketFill(final PlayerBucketFillEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketEmpty(final PlayerBucketEmptyEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }", "originalCommit": "618c4c876251673fe63705854e82dc5be1c33738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMTU4MQ==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401121581", "bodyText": "Good idea! I\u2019ll test that out and let you know.", "author": "applenick", "createdAt": "2020-03-31T18:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MDkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MzI4MQ==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401163281", "bodyText": "Ok it\u2019s really weird but the PlayerBucketEvent caused a lot of headaches for an hour. For some reason it caused an issue where players were unable to join the server at all. So I\u2019m just going to keep the separate events.", "author": "applenick", "createdAt": "2020-03-31T19:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MDkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMzU2NQ==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401413565", "bodyText": "Well, thanks for trying \ud83d\udc4d", "author": "KingOfSquares", "createdAt": "2020-04-01T07:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MDkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjI0Mg==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400862242", "body": "Same for this, why not just cancel all `InventoryEvent`s, that way to can also cancel events like `InventoryOpenEvent` and opening other interfaces like Anvils, Crafting tables..\r\n\r\nEDIT: My bad, `InventoryEvent`s dont directly relate to a player it seems. But you can maybe stop `InventoryOpenEvent` at least?", "bodyText": "Same for this, why not just cancel all InventoryEvents, that way to can also cancel events like InventoryOpenEvent and opening other interfaces like Anvils, Crafting tables..\nEDIT: My bad, InventoryEvents dont directly relate to a player it seems. But you can maybe stop InventoryOpenEvent at least?", "bodyHTML": "<p dir=\"auto\">Same for this, why not just cancel all <code>InventoryEvent</code>s, that way to can also cancel events like <code>InventoryOpenEvent</code> and opening other interfaces like Anvils, Crafting tables..</p>\n<p dir=\"auto\">EDIT: My bad, <code>InventoryEvent</code>s dont directly relate to a player it seems. But you can maybe stop <code>InventoryOpenEvent</code> at least?</p>", "author": "KingOfSquares", "createdAt": "2020-03-31T12:12:13Z", "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {\n+    Player player = event.getPlayer().getBukkit();\n+    if (player.hasPermission(Permissions.STAFF)) {\n+      player.getInventory().setItem(TOOL_SLOT_NUM, getFreezeTool(player));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerInteractEntity(final ObserverInteractEvent event) {\n+    if (event.getPlayer().isDead()) return;\n+\n+    if (freeze.isFrozen(event.getPlayer().getBukkit())) {\n+      event.setCancelled(true);\n+    } else {\n+      if (event.getClickedItem() != null\n+          && event.getClickedItem().getType() == TOOL_MATERIAL\n+          && event.getPlayer().getBukkit().hasPermission(Permissions.STAFF)\n+          && event.getClickedPlayer() != null) {\n+\n+        event.setCancelled(true);\n+\n+        freeze.setFrozen(\n+            event.getPlayer().getBukkit(),\n+            event.getClickedPlayer(),\n+            !freeze.isFrozen(event.getClickedEntity()));\n+      }\n+    }\n+  }\n+\n+  private static final List<String> ALLOWED_CMDS = Lists.newArrayList(\"/msg\", \"/r\");\n+\n+  @EventHandler(priority = EventPriority.HIGH)\n+  public void onPlayerCommand(final PlayerCommandPreprocessEvent event) {\n+    if (freeze.isFrozen(event.getPlayer()) && !event.getPlayer().hasPermission(Permissions.STAFF)) {\n+      boolean allow =\n+          ALLOWED_CMDS.stream()\n+              .filter(cmd -> event.getMessage().startsWith(cmd))\n+              .findAny()\n+              .isPresent();\n+\n+      if (!allow) {\n+        // Don't allow commands except for those related to chat.\n+        event.setCancelled(true);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerMove(final PlayerMoveEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      Location old = event.getFrom();\n+      old.setPitch(event.getTo().getPitch());\n+      old.setYaw(event.getTo().getYaw());\n+      event.setTo(old);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)\n+  public void onVehicleMove(final VehicleMoveEvent event) {\n+    if (!event.getVehicle().isEmpty() && freeze.isFrozen(event.getVehicle().getPassenger())) {\n+      event.getVehicle().setVelocity(new Vector(0, 0, 0));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleEnter(final VehicleEnterEvent event) {\n+    if (freeze.isFrozen(event.getEntered())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleExit(final VehicleExitEvent event) {\n+    if (freeze.isFrozen(event.getExited())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockBreak(final BlockBreakEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockPlace(final BlockPlaceEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketFill(final PlayerBucketFillEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketEmpty(final PlayerBucketEmptyEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW) // ignoreCancelled doesn't seem to work well here\n+  public void onPlayerInteract(final PlayerInteractEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onInventoryClick(final InventoryClickEvent event) {\n+    if (event.getWhoClicked() instanceof Player) {\n+      if (freeze.isFrozen(event.getWhoClicked())) {\n+        event.setCancelled(true);\n+      }\n+    }\n+  }", "originalCommit": "618c4c876251673fe63705854e82dc5be1c33738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MDEwMA==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401080100", "bodyText": "@KingOfSquares Good thinking, however I think it\u2019s fine to allow the inventory open event. Let\u2019s say a moderator is questioning the contents of the frozen player\u2019s inventory, it may be useful to allow the user to open up their inventory and see. Plus with the inventory click blocking it, they can\u2019t edit it anyway.", "author": "applenick", "createdAt": "2020-03-31T17:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MzQ2NA==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401083464", "bodyText": "@KingOfSquares Also just checked, InventoryEvent is not cancellable either.", "author": "applenick", "createdAt": "2020-03-31T17:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MzA1MQ==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400863051", "body": "This should maybe be placed together with the other VeichleEvents? And why not just cancel all `VehicleEvent`s? :p", "bodyText": "This should maybe be placed together with the other VeichleEvents? And why not just cancel all VehicleEvents? :p", "bodyHTML": "<p dir=\"auto\">This should maybe be placed together with the other VeichleEvents? And why not just cancel all <code>VehicleEvent</code>s? :p</p>", "author": "KingOfSquares", "createdAt": "2020-03-31T12:13:37Z", "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {\n+    Player player = event.getPlayer().getBukkit();\n+    if (player.hasPermission(Permissions.STAFF)) {\n+      player.getInventory().setItem(TOOL_SLOT_NUM, getFreezeTool(player));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerInteractEntity(final ObserverInteractEvent event) {\n+    if (event.getPlayer().isDead()) return;\n+\n+    if (freeze.isFrozen(event.getPlayer().getBukkit())) {\n+      event.setCancelled(true);\n+    } else {\n+      if (event.getClickedItem() != null\n+          && event.getClickedItem().getType() == TOOL_MATERIAL\n+          && event.getPlayer().getBukkit().hasPermission(Permissions.STAFF)\n+          && event.getClickedPlayer() != null) {\n+\n+        event.setCancelled(true);\n+\n+        freeze.setFrozen(\n+            event.getPlayer().getBukkit(),\n+            event.getClickedPlayer(),\n+            !freeze.isFrozen(event.getClickedEntity()));\n+      }\n+    }\n+  }\n+\n+  private static final List<String> ALLOWED_CMDS = Lists.newArrayList(\"/msg\", \"/r\");\n+\n+  @EventHandler(priority = EventPriority.HIGH)\n+  public void onPlayerCommand(final PlayerCommandPreprocessEvent event) {\n+    if (freeze.isFrozen(event.getPlayer()) && !event.getPlayer().hasPermission(Permissions.STAFF)) {\n+      boolean allow =\n+          ALLOWED_CMDS.stream()\n+              .filter(cmd -> event.getMessage().startsWith(cmd))\n+              .findAny()\n+              .isPresent();\n+\n+      if (!allow) {\n+        // Don't allow commands except for those related to chat.\n+        event.setCancelled(true);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerMove(final PlayerMoveEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      Location old = event.getFrom();\n+      old.setPitch(event.getTo().getPitch());\n+      old.setYaw(event.getTo().getYaw());\n+      event.setTo(old);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)\n+  public void onVehicleMove(final VehicleMoveEvent event) {\n+    if (!event.getVehicle().isEmpty() && freeze.isFrozen(event.getVehicle().getPassenger())) {\n+      event.getVehicle().setVelocity(new Vector(0, 0, 0));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleEnter(final VehicleEnterEvent event) {\n+    if (freeze.isFrozen(event.getEntered())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleExit(final VehicleExitEvent event) {\n+    if (freeze.isFrozen(event.getExited())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockBreak(final BlockBreakEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockPlace(final BlockPlaceEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketFill(final PlayerBucketFillEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketEmpty(final PlayerBucketEmptyEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW) // ignoreCancelled doesn't seem to work well here\n+  public void onPlayerInteract(final PlayerInteractEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onInventoryClick(final InventoryClickEvent event) {\n+    if (event.getWhoClicked() instanceof Player) {\n+      if (freeze.isFrozen(event.getWhoClicked())) {\n+        event.setCancelled(true);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerDropItem(final PlayerDropItemEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onEntityDamge(final EntityDamageByEntityEvent event) {\n+    if (freeze.isFrozen(event.getDamager())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleDamage(final VehicleDamageEvent event) {", "originalCommit": "618c4c876251673fe63705854e82dc5be1c33738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MjE4Ng==", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r401082186", "bodyText": "@KingOfSquares You can\u2019t cancel VehicleEvent xD", "author": "applenick", "createdAt": "2020-03-31T17:18:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MzA1MQ=="}], "type": "inlineReview"}, {"oid": "3ca7474ec7fc5110108e7600e92f6c6a9ae771a7", "url": "https://github.com/PGMDev/PGM/commit/3ca7474ec7fc5110108e7600e92f6c6a9ae771a7", "message": "Adjust offline freeze cache\n* Update player freezer color to white\n* Add list of offline names to /freezelist\n* Add /tell to list for allowed commands\n* Feedback when performing freeze commands on already frozen/thawed players\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-04-01T01:02:48Z", "type": "commit"}, {"oid": "83b83e08a2dafdd5824b65717c09841d1d437155", "url": "https://github.com/PGMDev/PGM/commit/83b83e08a2dafdd5824b65717c09841d1d437155", "message": "Merge branch 'master' into its-about-to-get-cold", "committedDate": "2020-04-10T14:26:33Z", "type": "commit"}]}