{"pr_number": 519, "pr_title": "Custom map gamemode & text refactor", "pr_author": "applenick", "pr_createdAt": "2020-06-01T06:57:08Z", "pr_url": "https://github.com/PGMDev/PGM/pull/519", "merge_commit": "59235666b58a835bb3234d5ddc253550b092b563", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2OTAwOQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433269009", "body": "`getGamemode`", "bodyText": "getGamemode", "bodyHTML": "<p dir=\"auto\"><code>getGamemode</code></p>", "author": "Electroid", "createdAt": "2020-06-01T14:31:02Z", "path": "core/src/main/java/tc/oc/pgm/api/map/MapInfo.java", "diffHunk": "@@ -100,6 +100,13 @@ default String getStyledNameLegacy(MapNameStyle style, @Nullable CommandSender s\n    */\n   Collection<MapTag> getTags();\n \n+  /**\n+   * Get a {@link Component} that represents this map's gamemode name.\n+   *\n+   * @return A component of the gamemode name if defined or null.\n+   */\n+  Component getGamemodeName();", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java b/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\nindex 872bd077..c4e62613 100644\n--- a/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\n+++ b/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\n", "chunk": "@@ -105,7 +105,7 @@ public interface MapInfo extends Comparable<MapInfo>, Cloneable {\n    *\n    * @return A component of the gamemode name if defined or null.\n    */\n-  Component getGamemodeName();\n+  Component getGamemode();\n \n   /**\n    * Get the maximum number of players that can participate on each team.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2OTQ1NA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433269454", "body": "It makes sense for `Party` to extend `Named`.\r\n\r\nMaybe `Named` needs a simple `getName()` method.", "bodyText": "It makes sense for Party to extend Named.\nMaybe Named needs a simple getName() method.", "bodyHTML": "<p dir=\"auto\">It makes sense for <code>Party</code> to extend <code>Named</code>.</p>\n<p dir=\"auto\">Maybe <code>Named</code> needs a simple <code>getName()</code> method.</p>", "author": "Electroid", "createdAt": "2020-06-01T14:31:52Z", "path": "core/src/main/java/tc/oc/pgm/api/party/Party.java", "diffHunk": "@@ -14,16 +15,14 @@\n import tc.oc.pgm.filters.query.Query;\n import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n-import tc.oc.pgm.util.component.Component;\n-import tc.oc.pgm.util.named.Named;\n \n /**\n  * A group of related {@link MatchPlayer}s in a {@link Match}.\n  *\n  * @see Competitor for participating {@link MatchPlayer}s.\n  * @see ObservingParty for observing {@link MatchPlayer}s.\n  */\n-public interface Party extends Audience, Named {\n+public interface Party extends Audience {", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -15,6 +15,8 @@ import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.filters.query.Query;\n import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n+import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.named.Named;\n \n /**\n  * A group of related {@link MatchPlayer}s in a {@link Match}.\n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -6,16 +6,13 @@ import javax.annotation.Nullable;\n import net.kyori.text.Component;\n import org.bukkit.ChatColor;\n import org.bukkit.Color;\n-import org.bukkit.command.CommandSender;\n import tc.oc.pgm.api.filter.query.PartyQuery;\n import tc.oc.pgm.api.match.Match;\n import tc.oc.pgm.api.match.MatchModule;\n-import tc.oc.pgm.api.party.event.PartyRenameEvent;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.filters.query.Query;\n import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n-import tc.oc.pgm.util.named.NameStyle;\n import tc.oc.pgm.util.named.Named;\n \n /**\n", "next_change": null}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -22,7 +24,7 @@ import tc.oc.pgm.util.chat.Audience;\n  * @see Competitor for participating {@link MatchPlayer}s.\n  * @see ObservingParty for observing {@link MatchPlayer}s.\n  */\n-public interface Party extends Audience {\n+public interface Party extends Audience, Named {\n \n   /**\n    * Get the {@link Match} that the {@link Party} is in.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2OTk4OA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433269988", "body": "Any `args` calls are unnescary, you can inline them all inside the `of(...)`", "bodyText": "Any args calls are unnescary, you can inline them all inside the of(...)", "bodyHTML": "<p dir=\"auto\">Any <code>args</code> calls are unnescary, you can inline them all inside the <code>of(...)</code></p>", "author": "Electroid", "createdAt": "2020-06-01T14:32:41Z", "path": "core/src/main/java/tc/oc/pgm/command/ListCommand.java", "diffHunk": "@@ -5,96 +5,106 @@\n import java.util.List;\n import java.util.UUID;\n import java.util.stream.Collectors;\n-import net.md_5.bungee.api.ChatColor;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n import org.bukkit.command.CommandSender;\n import tc.oc.pgm.api.PGM;\n import tc.oc.pgm.api.Permissions;\n import tc.oc.pgm.api.match.Match;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.teams.TeamMatchModule;\n-import tc.oc.pgm.util.component.Component;\n-import tc.oc.pgm.util.component.Components;\n-import tc.oc.pgm.util.component.types.PersonalizedText;\n-import tc.oc.pgm.util.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.util.chat.Audience;\n import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.text.TextFormatter;\n \n // TODO: clean up format and use new components\n public final class ListCommand {\n \n   @Command(\n       aliases = {\"list\", \"who\", \"online\", \"ls\"},\n       desc = \"View a list of online players\")\n-  public void list(CommandSender sender, Match match) {\n+  public void list(CommandSender sender, Audience viewer, Match match) {\n     TeamMatchModule tmm = match.getModule(TeamMatchModule.class);\n     if (tmm != null) {\n-      sender.sendMessage(\n-          new PersonalizedTranslatable(\"command.list.teams\")\n-              .getPersonalizedText()\n-              .color(ChatColor.GRAY));\n+      viewer.sendMessage(TranslatableComponent.of(\"command.list.teams\", TextColor.GRAY));\n       tmm.getTeams()\n           .forEach(\n               team ->\n                   sendTeamInfo(\n-                      sender, team.getComponentName(), team.getPlayers(), team.getMaxPlayers()));\n+                      viewer,\n+                      sender,\n+                      team.getComponentName(),\n+                      team.getPlayers(),\n+                      team.getMaxPlayers()));\n     } else {\n       sendTeamInfo(\n+          viewer,\n           sender,\n-          new PersonalizedTranslatable(\"command.list.participants\"),\n+          TranslatableComponent.of(\"command.list.participants\"),\n           match.getParticipants(),\n           match.getMaxPlayers());\n     }\n     // Observers\n     sendTeamInfo(\n+        viewer,\n         sender,\n         match.getDefaultParty().getComponentName(),\n         match.getDefaultParty().getPlayers(),\n         -1);\n \n     // Total count\n-    sender.sendMessage(\n-        new PersonalizedTranslatable(\n-                \"command.list.online\",\n-                new PersonalizedText(\n-                    Integer.toString(getSize(match.getPlayers(), false)), ChatColor.GREEN))\n-            .getPersonalizedText()\n-            .color(ChatColor.GRAY));\n+    viewer.sendMessage(\n+        TranslatableComponent.of(\"command.list.online\", TextColor.GRAY)\n+            .args(", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMzQxOA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433403418", "bodyText": "Oh good to know. I\u2019ll convert the args to inline, thanks!", "author": "applenick", "createdAt": "2020-06-01T18:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2OTk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/ListCommand.java b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\nindex 810d3a37..ce834556 100644\n--- a/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n", "chunk": "@@ -50,7 +46,7 @@ public final class ListCommand {\n     sendTeamInfo(\n         viewer,\n         sender,\n-        match.getDefaultParty().getComponentName(),\n+        match.getDefaultParty().getName(),\n         match.getDefaultParty().getPlayers(),\n         -1);\n \n", "next_change": {"commit": "88d2f371fc0779378e5ffd8e8743368502af4e5f", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/ListCommand.java b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\nindex ce834556..e45f2fb1 100644\n--- a/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n", "chunk": "@@ -52,10 +52,11 @@ public final class ListCommand {\n \n     // Total count\n     viewer.sendMessage(\n-        TranslatableComponent.of(\"command.list.online\", TextColor.GRAY)\n-            .args(\n-                TextComponent.of(\n-                    Integer.toString(getSize(match.getPlayers(), false)), TextColor.GREEN)));\n+        TranslatableComponent.of(\n+            \"command.list.online\",\n+            TextColor.GRAY,\n+            TextComponent.of(\n+                Integer.toString(getSize(match.getPlayers(), false)), TextColor.GREEN)));\n   }\n \n   private void sendTeamInfo(\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MDQ4NQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433270485", "body": "Not sure where we define `Party#getComponentName`, but it should just be `Party#getName`", "bodyText": "Not sure where we define Party#getComponentName, but it should just be Party#getName", "bodyHTML": "<p dir=\"auto\">Not sure where we define <code>Party#getComponentName</code>, but it should just be <code>Party#getName</code></p>", "author": "Electroid", "createdAt": "2020-06-01T14:33:32Z", "path": "core/src/main/java/tc/oc/pgm/command/TeamCommand.java", "diffHunk": "@@ -48,8 +48,8 @@ public void force(\n             \"join.ok.force\",\n             TextColor.GRAY,\n             joiner.getName(NameStyle.FANCY),\n-            joiner.getParty().getName(NameStyle.FANCY),\n-            oldParty.getName(NameStyle.FANCY)));\n+            joiner.getParty().getComponentName(),\n+            oldParty.getComponentName()));", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\nindex 038e5c57..579ca35b 100644\n--- a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n", "chunk": "@@ -48,8 +48,8 @@ public final class TeamCommand {\n             \"join.ok.force\",\n             TextColor.GRAY,\n             joiner.getName(NameStyle.FANCY),\n-            joiner.getParty().getComponentName(),\n-            oldParty.getComponentName()));\n+            joiner.getParty().getName(),\n+            oldParty.getName()));\n   }\n \n   @Command(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjQ4NQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433272485", "body": "I think we should define a `PlayerComponent` interface, which contains static methods for building a player `TextComponent`.\r\n\r\nSo something like this:\r\n```java\r\ninterface PlayerComponent {\r\n  static TextComponent of(Player player);\r\n  static TextComponent of(UUID playerId); // could show \"Unknown\"\r\n  static TextComponent of(CommandSender sender);  // could show \"Console\" when null or console sender\r\n}", "bodyText": "I think we should define a PlayerComponent interface, which contains static methods for building a player TextComponent.\nSo something like this:\ninterface PlayerComponent {\n  static TextComponent of(Player player);\n  static TextComponent of(UUID playerId); // could show \"Unknown\"\n  static TextComponent of(CommandSender sender);  // could show \"Console\" when null or console sender\n}", "bodyHTML": "<p dir=\"auto\">I think we should define a <code>PlayerComponent</code> interface, which contains static methods for building a player <code>TextComponent</code>.</p>\n<p dir=\"auto\">So something like this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"interface PlayerComponent {\n  static TextComponent of(Player player);\n  static TextComponent of(UUID playerId); // could show &quot;Unknown&quot;\n  static TextComponent of(CommandSender sender);  // could show &quot;Console&quot; when null or console sender\n}\"><pre><span class=\"pl-k\">interface</span> <span class=\"pl-en\">PlayerComponent</span> {\n  <span class=\"pl-k\">static</span> <span class=\"pl-smi\">TextComponent</span> <span class=\"pl-en\">of</span>(<span class=\"pl-smi\">Player</span> <span class=\"pl-v\">player</span>);\n  <span class=\"pl-k\">static</span> <span class=\"pl-smi\">TextComponent</span> <span class=\"pl-en\">of</span>(<span class=\"pl-smi\">UUID</span> <span class=\"pl-v\">playerId</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> could show \"Unknown\"</span>\n  <span class=\"pl-k\">static</span> <span class=\"pl-smi\">TextComponent</span> <span class=\"pl-en\">of</span>(<span class=\"pl-smi\">CommandSender</span> <span class=\"pl-v\">sender</span>);  <span class=\"pl-c\"><span class=\"pl-c\">//</span> could show \"Console\" when null or console sender</span>\n}</pre></div>", "author": "Electroid", "createdAt": "2020-06-01T14:36:49Z", "path": "core/src/main/java/tc/oc/pgm/db/UsernameImpl.java", "diffHunk": "@@ -36,11 +36,10 @@ public String getName() {\n   }\n \n   @Override\n-  public Component getStyledName(NameStyle style) {\n+  public Component getName(NameStyle style) {\n     return name == null\n-        ? new PersonalizedText(\n-            new PersonalizedTranslatable(\"misc.unknown\"), ChatColor.DARK_AQUA, ChatColor.ITALIC)\n-        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style);\n+        ? TranslatableComponent.of(\"misc.unknown\", TextColor.DARK_AQUA, TextDecoration.ITALIC)\n+        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3Mjk5MA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433572990", "bodyText": "I created a PlayerComponent interface with the static methods you requested. Though I included NameStyle as a parameter, let me know if that\u2019s how you envisioned it. If not any additional guidance would be great \ud83d\udc4d", "author": "applenick", "createdAt": "2020-06-02T01:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex ddaf2a7a..bb128c7d 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -31,7 +31,7 @@ class UsernameImpl implements Username {\n \n   @Nullable\n   @Override\n-  public String getName() {\n+  public String getUsername() {\n     return name;\n   }\n \n", "next_change": {"commit": "efda1e4e3657e6bef9a38ad948c2903576f27920", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex bb128c7d..cf4c982e 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -38,8 +35,8 @@ class UsernameImpl implements Username {\n   @Override\n   public Component getName(NameStyle style) {\n     return name == null\n-        ? TranslatableComponent.of(\"misc.unknown\", TextColor.DARK_AQUA, TextDecoration.ITALIC)\n-        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();\n+        ? PlayerComponent.UNKNOWN\n+        : PlayerComponent.of(Bukkit.getPlayer(id), name, style);\n   }\n \n   @Override\n", "next_change": {"commit": "85851f35cf681c196e0ee164fb0d5bd87064f6bd", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex cf4c982e..2b2a77e6 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -39,11 +39,6 @@ class UsernameImpl implements Username {\n         : PlayerComponent.of(Bukkit.getPlayer(id), name, style);\n   }\n \n-  @Override\n-  public Component getName() {\n-    return getName(NameStyle.FANCY);\n-  }\n-\n   @Override\n   public void setName(@Nullable String name) {\n     if (name == null) {\n", "next_change": null}]}}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex ddaf2a7a..bb128c7d 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -42,6 +42,11 @@ class UsernameImpl implements Username {\n         : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();\n   }\n \n+  @Override\n+  public Component getName() {\n+    return getName(NameStyle.FANCY);\n+  }\n+\n   @Override\n   public void setName(@Nullable String name) {\n     if (name == null) {\n", "next_change": {"commit": "85851f35cf681c196e0ee164fb0d5bd87064f6bd", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex bb128c7d..2b2a77e6 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -38,13 +35,8 @@ class UsernameImpl implements Username {\n   @Override\n   public Component getName(NameStyle style) {\n     return name == null\n-        ? TranslatableComponent.of(\"misc.unknown\", TextColor.DARK_AQUA, TextDecoration.ITALIC)\n-        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();\n-  }\n-\n-  @Override\n-  public Component getName() {\n-    return getName(NameStyle.FANCY);\n+        ? PlayerComponent.UNKNOWN\n+        : PlayerComponent.of(Bukkit.getPlayer(id), name, style);\n   }\n \n   @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjgyOQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433272829", "body": "`gamemode`", "bodyText": "gamemode", "bodyHTML": "<p dir=\"auto\"><code>gamemode</code></p>", "author": "Electroid", "createdAt": "2020-06-01T14:37:24Z", "path": "core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java", "diffHunk": "@@ -70,6 +72,7 @@ public MapInfoImpl(\n     this.tags = tags == null ? new TreeSet<>() : tags;\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n+    this.gamemodeName = gamemodeName == null ? TextComponent.empty() : gamemodeName;", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex 3db5ad18..3c6e1a9c 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -72,7 +72,7 @@ public class MapInfoImpl implements MapInfo {\n     this.tags = tags == null ? new TreeSet<>() : tags;\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n-    this.gamemodeName = gamemodeName == null ? TextComponent.empty() : gamemodeName;\n+    this.gamemode = gamemode == null ? TextComponent.empty() : gamemode;\n   }\n \n   public MapInfoImpl(MapInfo info) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzQ1Mw==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433273453", "body": "Do we need to use `TextTranslations` here? This won't translate the gamemodes, as-is.", "bodyText": "Do we need to use TextTranslations here? This won't translate the gamemodes, as-is.", "bodyHTML": "<p dir=\"auto\">Do we need to use <code>TextTranslations</code> here? This won't translate the gamemodes, as-is.</p>", "author": "Electroid", "createdAt": "2020-06-01T14:38:24Z", "path": "core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java", "diffHunk": "@@ -90,9 +90,15 @@ public SidebarMatchModule createMatchModule(Match match) throws ModuleLoadExcept\n \n   protected @Nullable Future<?> renderTask;\n \n-  private static String renderSidebarTitle(Collection<MapTag> tags) {\n+  private static String renderSidebarTitle(\n+      Collection<MapTag> tags, @Nullable Component gamemodeName) {\n     final Component configTitle = PGM.get().getConfiguration().getMatchHeader();\n-    if (configTitle != null) return LegacyComponentSerializer.legacy().serialize(configTitle);\n+    if (configTitle != null)\n+      return LegacyComponentSerializer.legacy().serialize(configTitle.color(TextColor.AQUA));", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3MTE4OQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433571189", "bodyText": "I believe that\u2019s for the config scoreboard sidebar header. Also since scoreboards are for all, we can\u2019t translate them yet correct?", "author": "applenick", "createdAt": "2020-06-02T01:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\nindex 1f216a49..98d3d767 100644\n--- a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n", "chunk": "@@ -93,11 +92,10 @@ public class SidebarMatchModule implements MatchModule, Listener {\n   private static String renderSidebarTitle(\n       Collection<MapTag> tags, @Nullable Component gamemodeName) {\n     final Component configTitle = PGM.get().getConfiguration().getMatchHeader();\n-    if (configTitle != null)\n-      return LegacyComponentSerializer.legacy().serialize(configTitle.color(TextColor.AQUA));\n+    if (configTitle != null) return LegacyComponentSerializer.legacy().serialize(configTitle);\n     if (gamemodeName != null) {\n       String customGamemode = LegacyComponentSerializer.legacy().serialize(gamemodeName);\n-      if (!customGamemode.isEmpty()) return customGamemode;\n+      if (!customGamemode.isEmpty()) return ChatColor.AQUA + customGamemode;\n     }\n \n     final List<String> gamemode =\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzkxMA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434253910", "body": "Do we need these methods? Can we just use `getName` ?", "bodyText": "Do we need these methods? Can we just use getName ?", "bodyHTML": "<p dir=\"auto\">Do we need these methods? Can we just use <code>getName</code> ?</p>", "author": "Electroid", "createdAt": "2020-06-03T01:02:19Z", "path": "core/src/main/java/tc/oc/pgm/api/party/Party.java", "diffHunk": "@@ -68,20 +69,20 @@\n    * @see PartyRenameEvent\n    * @return The current name of the {@link Party}.\n    */\n-  String getName();\n+  String getDisplayName();\n \n   /**\n    * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n    *\n    * @param viewer The viewer.\n    * @return The name of the {@link Party}, relative to the viewer.\n    */\n-  String getName(@Nullable CommandSender viewer);\n+  String getDisplayName(@Nullable CommandSender viewer);", "originalCommit": "383d385a991d0f87375c0284415c31fe13d9a645", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..5a2da74f 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -69,7 +67,7 @@ public interface Party extends Audience, Named {\n    * @see PartyRenameEvent\n    * @return The current name of the {@link Party}.\n    */\n-  String getDisplayName();\n+  String getName();\n \n   /**\n    * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -67,7 +69,7 @@ public interface Party extends Audience {\n    * @see PartyRenameEvent\n    * @return The current name of the {@link Party}.\n    */\n-  String getName();\n+  String getDisplayName();\n \n   /**\n    * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -63,22 +60,6 @@ public interface Party extends Audience, Named {\n    */\n   String getDefaultName();\n \n-  /**\n-   * Get the current name of the {@link Party}, which might change at anytime.\n-   *\n-   * @see PartyRenameEvent\n-   * @return The current name of the {@link Party}.\n-   */\n-  String getDisplayName();\n-\n-  /**\n-   * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The name of the {@link Party}, relative to the viewer.\n-   */\n-  String getDisplayName(@Nullable CommandSender viewer);\n-\n   /**\n    * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n", "next_change": null}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -75,12 +77,12 @@ public interface Party extends Audience {\n    * @param viewer The viewer.\n    * @return The name of the {@link Party}, relative to the viewer.\n    */\n-  String getName(@Nullable CommandSender viewer);\n+  String getDisplayName(@Nullable CommandSender viewer);\n \n   /**\n-   * Get whether {@link #getName()} is grammatically a plural word.\n+   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n-   * @return Whether {@link #getName()} is plural.\n+   * @return Whether {@link #getDisplayName()} is plural.\n    */\n   boolean isNamePlural();\n \n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -63,22 +60,6 @@ public interface Party extends Audience, Named {\n    */\n   String getDefaultName();\n \n-  /**\n-   * Get the current name of the {@link Party}, which might change at anytime.\n-   *\n-   * @see PartyRenameEvent\n-   * @return The current name of the {@link Party}.\n-   */\n-  String getDisplayName();\n-\n-  /**\n-   * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The name of the {@link Party}, relative to the viewer.\n-   */\n-  String getDisplayName(@Nullable CommandSender viewer);\n-\n   /**\n    * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n", "next_change": null}]}}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..5a2da74f 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -77,12 +75,12 @@ public interface Party extends Audience, Named {\n    * @param viewer The viewer.\n    * @return The name of the {@link Party}, relative to the viewer.\n    */\n-  String getDisplayName(@Nullable CommandSender viewer);\n+  String getName(@Nullable CommandSender viewer);\n \n   /**\n-   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n+   * Get whether {@link #getName()} is grammatically a plural word.\n    *\n-   * @return Whether {@link #getDisplayName()} is plural.\n+   * @return Whether {@link #getName()} is plural.\n    */\n   boolean isNamePlural();\n \n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -75,12 +77,12 @@ public interface Party extends Audience {\n    * @param viewer The viewer.\n    * @return The name of the {@link Party}, relative to the viewer.\n    */\n-  String getName(@Nullable CommandSender viewer);\n+  String getDisplayName(@Nullable CommandSender viewer);\n \n   /**\n-   * Get whether {@link #getName()} is grammatically a plural word.\n+   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n-   * @return Whether {@link #getName()} is plural.\n+   * @return Whether {@link #getDisplayName()} is plural.\n    */\n   boolean isNamePlural();\n \n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -63,22 +60,6 @@ public interface Party extends Audience, Named {\n    */\n   String getDefaultName();\n \n-  /**\n-   * Get the current name of the {@link Party}, which might change at anytime.\n-   *\n-   * @see PartyRenameEvent\n-   * @return The current name of the {@link Party}.\n-   */\n-  String getDisplayName();\n-\n-  /**\n-   * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The name of the {@link Party}, relative to the viewer.\n-   */\n-  String getDisplayName(@Nullable CommandSender viewer);\n-\n   /**\n    * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDA3Ng==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434254076", "body": "Don't need to refine these, maybe the default should be in `Named`?", "bodyText": "Don't need to refine these, maybe the default should be in Named?", "bodyHTML": "<p dir=\"auto\">Don't need to refine these, maybe the default should be in <code>Named</code>?</p>", "author": "Electroid", "createdAt": "2020-06-03T01:03:02Z", "path": "core/src/main/java/tc/oc/pgm/api/party/Party.java", "diffHunk": "@@ -116,15 +117,21 @@ default String getColoredName() {\n    * @return The colored {@link Party} name.\n    */\n   default String getColoredName(@Nullable CommandSender viewer) {\n-    return getColor() + getName(viewer);\n+    return getColor() + getDisplayName(viewer);\n   }\n \n   /**\n    * Get the current name of the {@link Party} as a {@link Component} with colors.\n    *\n    * @return The current {@link Party} name.\n    */\n-  Component getComponentName();\n+  @Override\n+  Component getName();\n+\n+  @Override\n+  default Component getName(NameStyle style) {\n+    return getName();\n+  }", "originalCommit": "383d385a991d0f87375c0284415c31fe13d9a645", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..5a2da74f 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -125,13 +123,7 @@ public interface Party extends Audience, Named {\n    *\n    * @return The current {@link Party} name.\n    */\n-  @Override\n-  Component getName();\n-\n-  @Override\n-  default Component getName(NameStyle style) {\n-    return getName();\n-  }\n+  Component getComponentName();\n \n   /**\n    * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -123,7 +125,13 @@ public interface Party extends Audience {\n    *\n    * @return The current {@link Party} name.\n    */\n-  Component getComponentName();\n+  @Override\n+  Component getName();\n+\n+  @Override\n+  default Component getName(NameStyle style) {\n+    return getName();\n+  }\n \n   /**\n    * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -100,39 +81,6 @@ public interface Party extends Audience, Named {\n    */\n   Color getFullColor();\n \n-  /**\n-   * Get the current name of the {@link Party}, with its {@link #getColor()} formatting.\n-   *\n-   * @return The colored {@link Party} name.\n-   */\n-  default String getColoredName() {\n-    return getColor() + getDisplayName();\n-  }\n-\n-  /**\n-   * Get the current name of the {@link Party}, with colors and from the perspective of a {@link\n-   * CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The colored {@link Party} name.\n-   */\n-  default String getColoredName(@Nullable CommandSender viewer) {\n-    return getColor() + getDisplayName(viewer);\n-  }\n-\n-  /**\n-   * Get the current name of the {@link Party} as a {@link Component} with colors.\n-   *\n-   * @return The current {@link Party} name.\n-   */\n-  @Override\n-  Component getName();\n-\n-  @Override\n-  default Component getName(NameStyle style) {\n-    return getName();\n-  }\n-\n   /**\n    * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n    *\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDE1Nw==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434254157", "body": "Why change this and `Contributor`?", "bodyText": "Why change this and Contributor?", "bodyHTML": "<p dir=\"auto\">Why change this and <code>Contributor</code>?</p>", "author": "Electroid", "createdAt": "2020-06-03T01:03:21Z", "path": "core/src/main/java/tc/oc/pgm/api/player/Username.java", "diffHunk": "@@ -20,7 +20,7 @@\n    * @return The username.\n    */\n   @Nullable\n-  String getName();\n+  String getUsername();", "originalCommit": "383d385a991d0f87375c0284415c31fe13d9a645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5ODY0Mg==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434398642", "bodyText": "Edit: to answer your original question. It was changed to getUsername() to avoid overriding the Named#getName, so we could support strings rather than components (see below for why).\nIn my latest commit I resolved the issue related to Contributor. Though I left Username alone and would like some guidance on it.\nFor Contributor I made use of the getName() method and included a toLegacy() that covers a few places that using a component would prove challenging (e.g. /maps -a flag to match author names), however I was unsure if this was the correct way to go for Username. As there are a few places in the code where it\u2019s acceptable for the username to be null, and currently the Username#getName() will always return a component. So perhaps it makes sense to keep Username#getUsername for when it\u2019s necessary to check if the name is null or not.\nLet me know how you\u2019d like this to be handled. Thanks!", "author": "applenick", "createdAt": "2020-06-03T08:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/player/Username.java b/core/src/main/java/tc/oc/pgm/api/player/Username.java\nindex 80637fc2..2317640d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/player/Username.java\n+++ b/core/src/main/java/tc/oc/pgm/api/player/Username.java\n", "chunk": "@@ -20,7 +20,7 @@ public interface Username extends Named {\n    * @return The username.\n    */\n   @Nullable\n-  String getUsername();\n+  String getName();\n \n   /**\n    * Change the username of the player.\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/player/Username.java b/core/src/main/java/tc/oc/pgm/api/player/Username.java\nindex 2317640d..80637fc2 100644\n--- a/core/src/main/java/tc/oc/pgm/api/player/Username.java\n+++ b/core/src/main/java/tc/oc/pgm/api/player/Username.java\n", "chunk": "@@ -20,7 +20,7 @@ public interface Username extends Named {\n    * @return The username.\n    */\n   @Nullable\n-  String getName();\n+  String getUsername();\n \n   /**\n    * Change the username of the player.\n", "next_change": {"commit": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/player/Username.java b/core/src/main/java/tc/oc/pgm/api/player/Username.java\nindex 80637fc2..3ba88282 100644\n--- a/core/src/main/java/tc/oc/pgm/api/player/Username.java\n+++ b/core/src/main/java/tc/oc/pgm/api/player/Username.java\n", "chunk": "@@ -19,8 +19,9 @@ public interface Username extends Named {\n    *\n    * @return The username.\n    */\n+  @Override\n   @Nullable\n-  String getUsername();\n+  String getNameLegacy();\n \n   /**\n    * Change the username of the player.\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MDA3OQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434850079", "body": "This method doesn't belong here.", "bodyText": "This method doesn't belong here.", "bodyHTML": "<p dir=\"auto\">This method doesn't belong here.</p>", "author": "Electroid", "createdAt": "2020-06-03T20:59:12Z", "path": "util/src/main/java/tc/oc/pgm/util/text/TextParser.java", "diffHunk": "@@ -476,4 +477,8 @@ public static Connection parseSqlConnection(String text) throws TextException {\n       throw unknown(e); // TODO: wrap common database errors with more friendly messages\n     }\n   }\n+\n+  public static TextColor parseTextColor(Enum<?> color) {", "originalCommit": "7519c73e0b61bacf442f4014421b24356a1ecc76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bab0442f49afd509cba1f9b15d7a883a69d8348d", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextParser.java b/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\nindex cf7083c9..8aa99f30 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\n", "chunk": "@@ -477,8 +476,4 @@ public final class TextParser {\n       throw unknown(e); // TODO: wrap common database errors with more friendly messages\n     }\n   }\n-\n-  public static TextColor parseTextColor(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n-  }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MTQ2MA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434851460", "body": "If this is the only reason we keep `getDisplayName`, then just remove it from `toString`.", "bodyText": "If this is the only reason we keep getDisplayName, then just remove it from toString.", "bodyHTML": "<p dir=\"auto\">If this is the only reason we keep <code>getDisplayName</code>, then just remove it from <code>toString</code>.</p>", "author": "Electroid", "createdAt": "2020-06-03T21:00:53Z", "path": "core/src/main/java/tc/oc/pgm/wool/MonumentWool.java", "diffHunk": "@@ -50,7 +50,7 @@ public MonumentWool(MonumentWoolFactory definition, Match match) {\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getName());\n+    sb.append(\",owner=\").append(this.owner.getDisplayName());", "originalCommit": "7519c73e0b61bacf442f4014421b24356a1ecc76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex cf8ea28f..7297ed93 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -50,7 +50,7 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getDisplayName());\n+    sb.append(\",owner=\").append(this.owner.getName());\n     sb.append(\",definition=\").append(this.definition);\n     sb.append('}');\n     return sb.toString();\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex 7297ed93..461d9291 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -50,7 +50,7 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getName());\n+    sb.append(\",owner=\").append(this.owner.getDisplayName());\n     sb.append(\",definition=\").append(this.definition);\n     sb.append('}');\n     return sb.toString();\n", "next_change": {"commit": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex 461d9291..ea5113c9 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -50,7 +50,7 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getDisplayName());\n+    sb.append(\",owner=\").append(this.owner.getNameLegacy());\n     sb.append(\",definition=\").append(this.definition);\n     sb.append('}');\n     return sb.toString();\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MjQ4MA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434852480", "body": "If this is the only reason we have `getDisplayName`, just remove the logging statements. TBH, we don't need them here.", "bodyText": "If this is the only reason we have getDisplayName, just remove the logging statements. TBH, we don't need them here.", "bodyHTML": "<p dir=\"auto\">If this is the only reason we have <code>getDisplayName</code>, just remove the logging statements. TBH, we don't need them here.</p>", "author": "Electroid", "createdAt": "2020-06-03T21:02:11Z", "path": "core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java", "diffHunk": "@@ -538,7 +533,7 @@ public void balanceTeams() {\n           .getLogger()\n           .info(\n               \"Bumping a player from stacked team \"\n-                  + team.getColoredName()\n+                  + team.getDisplayName()", "originalCommit": "7519c73e0b61bacf442f4014421b24356a1ecc76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex 53739e83..1f805584 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -533,7 +535,7 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n           .getLogger()\n           .info(\n               \"Bumping a player from stacked team \"\n-                  + team.getDisplayName()\n+                  + team.getColoredName()\n                   + \" size=\"\n                   + team.getSize(false)\n                   + \" fullness=\"\n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex 1f805584..53739e83 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -535,7 +533,7 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n           .getLogger()\n           .info(\n               \"Bumping a player from stacked team \"\n-                  + team.getColoredName()\n+                  + team.getDisplayName()\n                   + \" size=\"\n                   + team.getSize(false)\n                   + \" fullness=\"\n", "next_change": {"commit": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex 53739e83..cbf579da 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -529,15 +522,6 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n       Team team = this.getFullestTeam();\n       if (team == null) break;\n       if (!team.isStacked()) break;\n-      match\n-          .getLogger()\n-          .info(\n-              \"Bumping a player from stacked team \"\n-                  + team.getDisplayName()\n-                  + \" size=\"\n-                  + team.getSize(false)\n-                  + \" fullness=\"\n-                  + team.getFullness(false));\n       if (!this.kickPlayerOffTeam(team, true)) break;\n     }\n   }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MzY0OA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434853648", "body": "I have an idea to solve the `getDisplayName` shenanigans. Add `getId(): String` to `Named`", "bodyText": "I have an idea to solve the getDisplayName shenanigans. Add getId(): String to Named", "bodyHTML": "<p dir=\"auto\">I have an idea to solve the <code>getDisplayName</code> shenanigans. Add <code>getId(): String</code> to <code>Named</code></p>", "author": "Electroid", "createdAt": "2020-06-03T21:03:34Z", "path": "core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java", "diffHunk": "@@ -33,6 +33,6 @@ public int compare(Team a, Team b) {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getName().compareTo(b.getName());\n+    return a.getDisplayName().compareTo(b.getDisplayName());", "originalCommit": "7519c73e0b61bacf442f4014421b24356a1ecc76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\nindex f574e389..6344242b 100644\n--- a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n+++ b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n", "chunk": "@@ -33,6 +33,6 @@ public class TeamOrder implements Comparator<Team> {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getDisplayName().compareTo(b.getDisplayName());\n+    return a.getName().compareTo(b.getName());\n   }\n }\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\nindex 6344242b..f574e389 100644\n--- a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n+++ b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n", "chunk": "@@ -33,6 +33,6 @@ public class TeamOrder implements Comparator<Team> {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getName().compareTo(b.getName());\n+    return a.getDisplayName().compareTo(b.getDisplayName());\n   }\n }\n", "next_change": {"commit": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\nindex f574e389..e1fefc84 100644\n--- a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n+++ b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n", "chunk": "@@ -33,6 +33,6 @@ public class TeamOrder implements Comparator<Team> {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getDisplayName().compareTo(b.getDisplayName());\n+    return a.getNameLegacy().compareTo(b.getNameLegacy());\n   }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDAyNA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r435970024", "body": "Use `SpigotTextAdapter` to convert to a `BaseComponent`. This should fix the empty translations.", "bodyText": "Use SpigotTextAdapter to convert to a BaseComponent. This should fix the empty translations.", "bodyHTML": "<p dir=\"auto\">Use <code>SpigotTextAdapter</code> to convert to a <code>BaseComponent</code>. This should fix the empty translations.</p>", "author": "Electroid", "createdAt": "2020-06-05T14:44:39Z", "path": "util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java", "diffHunk": "@@ -120,6 +121,22 @@ public static Component horizontalLineHeading(\n \n   public static Component horizontalLineHeading(\n       CommandSender sender, Component text, TextColor lineColor) {\n-    return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n+    return horizontalLineHeading(sender, text, lineColor, LegacyFormatUtils.MAX_CHAT_WIDTH);\n+  }\n+\n+  /*\n+   * Convert ChatColor -> TextColor\n+   */\n+  public static TextColor convert(Enum<?> color) {\n+    return TextColor.valueOf(color.name());\n+  }\n+\n+  /**\n+   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n+   * upgrade/remove this)\n+   */\n+  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n+    return new net.md_5.bungee.api.chat.TextComponent(\n+        TextTranslations.translateLegacy(component, viewer));", "originalCommit": "49c36779d11b7124955fb1edee0ef79f174a4493", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..dd3b5ce6 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -121,22 +120,6 @@ public final class TextFormatter {\n \n   public static Component horizontalLineHeading(\n       CommandSender sender, Component text, TextColor lineColor) {\n-    return horizontalLineHeading(sender, text, lineColor, LegacyFormatUtils.MAX_CHAT_WIDTH);\n-  }\n-\n-  /*\n-   * Convert ChatColor -> TextColor\n-   */\n-  public static TextColor convert(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n-  }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n+    return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n   }\n }\n", "next_change": {"commit": "bab0442f49afd509cba1f9b15d7a883a69d8348d", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex dd3b5ce6..f4451dd7 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -122,4 +122,11 @@ public final class TextFormatter {\n       CommandSender sender, Component text, TextColor lineColor) {\n     return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n   }\n+\n+  /*\n+   * Convert ChatColor -> TextColor\n+   */\n+  public static TextColor convert(Enum<?> color) {\n+    return TextColor.valueOf(color.name());\n+  }\n }\n", "next_change": {"commit": "f8f3c9782b6310d4966aefe798f51afaba87403a", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex f4451dd7..b66c1d60 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -129,4 +130,13 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n+\n+  /**\n+   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n+   * upgrade/remove this)\n+   */\n+  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n+    return new net.md_5.bungee.api.chat.TextComponent(\n+        TextTranslations.translateLegacy(component, viewer));\n+  }\n }\n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..edc882dd 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -130,13 +129,4 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n-  }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDk4MA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r435970980", "body": "Also, I think this can be in `TextTranslations`.", "bodyText": "Also, I think this can be in TextTranslations.", "bodyHTML": "<p dir=\"auto\">Also, I think this can be in <code>TextTranslations</code>.</p>", "author": "Electroid", "createdAt": "2020-06-05T14:46:06Z", "path": "util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java", "diffHunk": "@@ -120,6 +121,22 @@ public static Component horizontalLineHeading(\n \n   public static Component horizontalLineHeading(\n       CommandSender sender, Component text, TextColor lineColor) {\n-    return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n+    return horizontalLineHeading(sender, text, lineColor, LegacyFormatUtils.MAX_CHAT_WIDTH);\n+  }\n+\n+  /*\n+   * Convert ChatColor -> TextColor\n+   */\n+  public static TextColor convert(Enum<?> color) {\n+    return TextColor.valueOf(color.name());\n+  }\n+\n+  /**\n+   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n+   * upgrade/remove this)\n+   */\n+  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {", "originalCommit": "49c36779d11b7124955fb1edee0ef79f174a4493", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..dd3b5ce6 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -121,22 +120,6 @@ public final class TextFormatter {\n \n   public static Component horizontalLineHeading(\n       CommandSender sender, Component text, TextColor lineColor) {\n-    return horizontalLineHeading(sender, text, lineColor, LegacyFormatUtils.MAX_CHAT_WIDTH);\n-  }\n-\n-  /*\n-   * Convert ChatColor -> TextColor\n-   */\n-  public static TextColor convert(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n-  }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n+    return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n   }\n }\n", "next_change": {"commit": "bab0442f49afd509cba1f9b15d7a883a69d8348d", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex dd3b5ce6..f4451dd7 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -122,4 +122,11 @@ public final class TextFormatter {\n       CommandSender sender, Component text, TextColor lineColor) {\n     return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n   }\n+\n+  /*\n+   * Convert ChatColor -> TextColor\n+   */\n+  public static TextColor convert(Enum<?> color) {\n+    return TextColor.valueOf(color.name());\n+  }\n }\n", "next_change": {"commit": "f8f3c9782b6310d4966aefe798f51afaba87403a", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex f4451dd7..b66c1d60 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -129,4 +130,13 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n+\n+  /**\n+   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n+   * upgrade/remove this)\n+   */\n+  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n+    return new net.md_5.bungee.api.chat.TextComponent(\n+        TextTranslations.translateLegacy(component, viewer));\n+  }\n }\n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..edc882dd 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -130,13 +129,4 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n-  }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MjM3OQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r435972379", "body": "These text boxes can probably be removed.", "bodyText": "These text boxes can probably be removed.", "bodyHTML": "<p dir=\"auto\">These text boxes can probably be removed.</p>", "author": "Electroid", "createdAt": "2020-06-05T14:48:23Z", "path": "util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java", "diffHunk": "@@ -41,47 +40,14 @@ default void playSound(Sound sound) {\n \n   @Override\n   default void showTitle(\n-      @Nullable net.kyori.text.Component title,\n-      @Nullable net.kyori.text.Component subTitle,\n-      int inTicks,\n-      int stayTicks,\n-      int outTicks) {\n+      Component title, Component subTitle, int inTicks, int stayTicks, int outTicks) {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n   ///////////////////////////////////////////////////////////////", "originalCommit": "49c36779d11b7124955fb1edee0ef79f174a4493", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..35bdc80c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -40,7 +41,11 @@ public interface MultiAudience extends Audience {\n \n   @Override\n   default void showTitle(\n-      Component title, Component subTitle, int inTicks, int stayTicks, int outTicks) {\n+      @Nullable net.kyori.text.Component title,\n+      @Nullable net.kyori.text.Component subTitle,\n+      int inTicks,\n+      int stayTicks,\n+      int outTicks) {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n", "next_change": {"commit": "f8f3c9782b6310d4966aefe798f51afaba87403a", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex 35bdc80c..ae3196f0 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -41,11 +40,7 @@ public interface MultiAudience extends Audience {\n \n   @Override\n   default void showTitle(\n-      @Nullable net.kyori.text.Component title,\n-      @Nullable net.kyori.text.Component subTitle,\n-      int inTicks,\n-      int stayTicks,\n-      int outTicks) {\n+      Component title, Component subTitle, int inTicks, int stayTicks, int outTicks) {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..659d056c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -44,10 +44,6 @@ public interface MultiAudience extends Audience {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n-  ///////////////////////////////////////////////////////////////\n-  // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n-  ///////////////////////////////////////////////////////////////\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": null}]}}, {"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex 35bdc80c..ae3196f0 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -53,35 +48,6 @@ public interface MultiAudience extends Audience {\n   // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n   ///////////////////////////////////////////////////////////////\n \n-  @Deprecated\n-  @Override\n-  default void sendMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendWarning(Component message, boolean audible) {\n-    for (Audience a : getAudiences()) a.sendWarning(message, audible);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendHotbarMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendHotbarMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void showTitle(\n-      @Nullable Component title,\n-      @Nullable Component subtitle,\n-      int inTicks,\n-      int stayTicks,\n-      int outTicks) {\n-    for (Audience a : getAudiences()) a.showTitle(title, subtitle, inTicks, stayTicks, outTicks);\n-  }\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..659d056c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -44,10 +44,6 @@ public interface MultiAudience extends Audience {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n-  ///////////////////////////////////////////////////////////////\n-  // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n-  ///////////////////////////////////////////////////////////////\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": null}]}}]}}, {"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..35bdc80c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -48,6 +53,35 @@ public interface MultiAudience extends Audience {\n   // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n   ///////////////////////////////////////////////////////////////\n \n+  @Deprecated\n+  @Override\n+  default void sendMessage(Component message) {\n+    for (Audience a : getAudiences()) a.sendMessage(message);\n+  }\n+\n+  @Deprecated\n+  @Override\n+  default void sendWarning(Component message, boolean audible) {\n+    for (Audience a : getAudiences()) a.sendWarning(message, audible);\n+  }\n+\n+  @Deprecated\n+  @Override\n+  default void sendHotbarMessage(Component message) {\n+    for (Audience a : getAudiences()) a.sendHotbarMessage(message);\n+  }\n+\n+  @Deprecated\n+  @Override\n+  default void showTitle(\n+      @Nullable Component title,\n+      @Nullable Component subtitle,\n+      int inTicks,\n+      int stayTicks,\n+      int outTicks) {\n+    for (Audience a : getAudiences()) a.showTitle(title, subtitle, inTicks, stayTicks, outTicks);\n+  }\n+\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": {"commit": "f8f3c9782b6310d4966aefe798f51afaba87403a", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex 35bdc80c..ae3196f0 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -53,35 +48,6 @@ public interface MultiAudience extends Audience {\n   // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n   ///////////////////////////////////////////////////////////////\n \n-  @Deprecated\n-  @Override\n-  default void sendMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendWarning(Component message, boolean audible) {\n-    for (Audience a : getAudiences()) a.sendWarning(message, audible);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendHotbarMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendHotbarMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void showTitle(\n-      @Nullable Component title,\n-      @Nullable Component subtitle,\n-      int inTicks,\n-      int stayTicks,\n-      int outTicks) {\n-    for (Audience a : getAudiences()) a.showTitle(title, subtitle, inTicks, stayTicks, outTicks);\n-  }\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..659d056c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -44,10 +44,6 @@ public interface MultiAudience extends Audience {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n-  ///////////////////////////////////////////////////////////////\n-  // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n-  ///////////////////////////////////////////////////////////////\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": null}]}}]}}]}}, {"oid": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "url": "https://github.com/PGMDev/PGM/commit/62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "message": "Reintroduce support for map gamemode name\n* XML can now define <map game = \"name\"> for custom gamemode names to be displayed in the sidebar.\n* Also migrated a large majority of PGM to new text library\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:26Z", "type": "commit"}, {"oid": "7022d4e113b14577f99796a8faa47a01042fd307", "url": "https://github.com/PGMDev/PGM/commit/7022d4e113b14577f99796a8faa47a01042fd307", "message": "Make Party extend Named again\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:27Z", "type": "commit"}, {"oid": "efda1e4e3657e6bef9a38ad948c2903576f27920", "url": "https://github.com/PGMDev/PGM/commit/efda1e4e3657e6bef9a38ad948c2903576f27920", "message": "Replace PersonalizedPlayer with PlayerComponent\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:28Z", "type": "commit"}, {"oid": "88d2f371fc0779378e5ffd8e8743368502af4e5f", "url": "https://github.com/PGMDev/PGM/commit/88d2f371fc0779378e5ffd8e8743368502af4e5f", "message": "Switch TranslatableComponent to inline instead of args()\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:28Z", "type": "commit"}, {"oid": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "url": "https://github.com/PGMDev/PGM/commit/f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "message": "Clean up Party name methods\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:28Z", "type": "commit"}, {"oid": "85851f35cf681c196e0ee164fb0d5bd87064f6bd", "url": "https://github.com/PGMDev/PGM/commit/85851f35cf681c196e0ee164fb0d5bd87064f6bd", "message": "Utilize Named properly for Contributor\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:29Z", "type": "commit"}, {"oid": "bab0442f49afd509cba1f9b15d7a883a69d8348d", "url": "https://github.com/PGMDev/PGM/commit/bab0442f49afd509cba1f9b15d7a883a69d8348d", "message": "Move TextColor conversion method to TextFormatter\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:30Z", "type": "commit"}, {"oid": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "url": "https://github.com/PGMDev/PGM/commit/14c9304a3be49fbb14873d6144cc89dfab6a532b", "message": "Resolve getDisplayName() issue\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:30Z", "type": "commit"}, {"oid": "f8f3c9782b6310d4966aefe798f51afaba87403a", "url": "https://github.com/PGMDev/PGM/commit/f8f3c9782b6310d4966aefe798f51afaba87403a", "message": "Complete migration to new text library\nA few bugs remain including:\n* Vote book clicking issue\n* Minecraft key translation bug\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:10:43Z", "type": "commit"}, {"oid": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "url": "https://github.com/PGMDev/PGM/commit/b5bd16bb4a10bb157adba7198ff8672c32460fae", "message": "Fix translation issues for non-legacy messages\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:10:43Z", "type": "commit"}, {"oid": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "url": "https://github.com/PGMDev/PGM/commit/b5bd16bb4a10bb157adba7198ff8672c32460fae", "message": "Fix translation issues for non-legacy messages\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:10:43Z", "type": "forcePushed"}, {"oid": "03ee4b8fe89ecb3564e35a8206eddae794ff820f", "url": "https://github.com/PGMDev/PGM/commit/03ee4b8fe89ecb3564e35a8206eddae794ff820f", "message": "Bump text-adapter to 3.0.5\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T18:44:42Z", "type": "commit"}]}