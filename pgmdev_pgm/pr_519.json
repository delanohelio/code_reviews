{"pr_number": 519, "pr_title": "Custom map gamemode & text refactor", "pr_author": "applenick", "pr_createdAt": "2020-06-01T06:57:08Z", "pr_url": "https://github.com/PGMDev/PGM/pull/519", "merge_commit": "59235666b58a835bb3234d5ddc253550b092b563", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2OTAwOQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433269009", "body": "`getGamemode`", "bodyText": "getGamemode", "bodyHTML": "<p dir=\"auto\"><code>getGamemode</code></p>", "author": "Electroid", "createdAt": "2020-06-01T14:31:02Z", "path": "core/src/main/java/tc/oc/pgm/api/map/MapInfo.java", "diffHunk": "@@ -100,6 +100,13 @@ default String getStyledNameLegacy(MapNameStyle style, @Nullable CommandSender s\n    */\n   Collection<MapTag> getTags();\n \n+  /**\n+   * Get a {@link Component} that represents this map's gamemode name.\n+   *\n+   * @return A component of the gamemode name if defined or null.\n+   */\n+  Component getGamemodeName();", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java b/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\nindex 872bd077..c4e62613 100644\n--- a/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\n+++ b/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\n", "chunk": "@@ -105,7 +105,7 @@ public interface MapInfo extends Comparable<MapInfo>, Cloneable {\n    *\n    * @return A component of the gamemode name if defined or null.\n    */\n-  Component getGamemodeName();\n+  Component getGamemode();\n \n   /**\n    * Get the maximum number of players that can participate on each team.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java b/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\nindex 872bd077..c4e62613 100644\n--- a/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\n+++ b/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\n", "chunk": "@@ -105,7 +105,7 @@ public interface MapInfo extends Comparable<MapInfo>, Cloneable {\n    *\n    * @return A component of the gamemode name if defined or null.\n    */\n-  Component getGamemodeName();\n+  Component getGamemode();\n \n   /**\n    * Get the maximum number of players that can participate on each team.\n", "next_change": {"commit": "73946ca6584387b8782e356673e3adf2f2eb1fb6", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java b/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\nindex c4e62613..3af82a14 100644\n--- a/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\n+++ b/core/src/main/java/tc/oc/pgm/api/map/MapInfo.java\n", "chunk": "@@ -101,12 +109,19 @@ public interface MapInfo extends Comparable<MapInfo>, Cloneable {\n   Collection<MapTag> getTags();\n \n   /**\n-   * Get a {@link Component} that represents this map's gamemode name.\n+   * Get a {@link Component} that represents this map's custom game title.\n    *\n-   * @return A component of the gamemode name if defined or null.\n+   * @return Returns the defined gamemode title, empty if not defined.\n    */\n   Component getGamemode();\n \n+  /**\n+   * Get a {@link Collection<Gamemode>} that represents this map's gamemodes.\n+   *\n+   * @return A Collection of gamemodes if defined or null.\n+   */\n+  Collection<Gamemode> getGamemodes();\n+\n   /**\n    * Get the maximum number of players that can participate on each team.\n    *\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "3b5c402c56003ffe689b29d7c7d5130512bc404b", "committedDate": "2020-08-19 08:33:56 -0700", "message": "Add map created date"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "0a0ca91ae089fff0a221632a6640f517856f455c", "committedDate": "2021-06-20 15:30:11 -0700", "message": "Reintroduce map phases"}, {"oid": "73946ca6584387b8782e356673e3adf2f2eb1fb6", "committedDate": "2021-07-17 09:09:23 -0700", "message": "Add a <gamemode> tag"}, {"oid": "c2e23882291d66315ff99f35d0df6f50d8d61159", "committedDate": "2022-04-01 23:24:22 -0700", "message": "Implement friendly fire (#981)"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "db10316d1a341018caf597f4c0bb15ea23c6d545", "committedDate": "2022-11-04 13:22:52 -0700", "message": "Migrate to cloud framework (#1080)"}, {"oid": "394ce9ba5f9f6e4046cfb26d8ea01f4243634917", "committedDate": "2023-05-11 11:24:19 -0700", "message": "Support map variants (#1179)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2OTQ1NA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433269454", "body": "It makes sense for `Party` to extend `Named`.\r\n\r\nMaybe `Named` needs a simple `getName()` method.", "bodyText": "It makes sense for Party to extend Named.\nMaybe Named needs a simple getName() method.", "bodyHTML": "<p dir=\"auto\">It makes sense for <code>Party</code> to extend <code>Named</code>.</p>\n<p dir=\"auto\">Maybe <code>Named</code> needs a simple <code>getName()</code> method.</p>", "author": "Electroid", "createdAt": "2020-06-01T14:31:52Z", "path": "core/src/main/java/tc/oc/pgm/api/party/Party.java", "diffHunk": "@@ -14,16 +15,14 @@\n import tc.oc.pgm.filters.query.Query;\n import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n-import tc.oc.pgm.util.component.Component;\n-import tc.oc.pgm.util.named.Named;\n \n /**\n  * A group of related {@link MatchPlayer}s in a {@link Match}.\n  *\n  * @see Competitor for participating {@link MatchPlayer}s.\n  * @see ObservingParty for observing {@link MatchPlayer}s.\n  */\n-public interface Party extends Audience, Named {\n+public interface Party extends Audience {", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -15,6 +15,8 @@ import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.filters.query.Query;\n import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n+import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.named.Named;\n \n /**\n  * A group of related {@link MatchPlayer}s in a {@link Match}.\n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -6,16 +6,13 @@ import javax.annotation.Nullable;\n import net.kyori.text.Component;\n import org.bukkit.ChatColor;\n import org.bukkit.Color;\n-import org.bukkit.command.CommandSender;\n import tc.oc.pgm.api.filter.query.PartyQuery;\n import tc.oc.pgm.api.match.Match;\n import tc.oc.pgm.api.match.MatchModule;\n-import tc.oc.pgm.api.party.event.PartyRenameEvent;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.filters.query.Query;\n import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n-import tc.oc.pgm.util.named.NameStyle;\n import tc.oc.pgm.util.named.Named;\n \n /**\n", "next_change": null}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -22,7 +24,7 @@ import tc.oc.pgm.util.chat.Audience;\n  * @see Competitor for participating {@link MatchPlayer}s.\n  * @see ObservingParty for observing {@link MatchPlayer}s.\n  */\n-public interface Party extends Audience {\n+public interface Party extends Audience, Named {\n \n   /**\n    * Get the {@link Match} that the {@link Party} is in.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -6,15 +6,14 @@ import javax.annotation.Nullable;\n import net.kyori.text.Component;\n import org.bukkit.ChatColor;\n import org.bukkit.Color;\n-import org.bukkit.command.CommandSender;\n import tc.oc.pgm.api.filter.query.PartyQuery;\n import tc.oc.pgm.api.match.Match;\n import tc.oc.pgm.api.match.MatchModule;\n-import tc.oc.pgm.api.party.event.PartyRenameEvent;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.filters.query.Query;\n import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n+import tc.oc.pgm.util.named.Named;\n \n /**\n  * A group of related {@link MatchPlayer}s in a {@link Match}.\n", "next_change": {"commit": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 587d35c8..ac4adeda 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -8,128 +8,128 @@ import org.bukkit.ChatColor;\n import org.bukkit.Color;\n import tc.oc.pgm.api.filter.query.PartyQuery;\n import tc.oc.pgm.api.match.Match;\n-import tc.oc.pgm.api.match.MatchModule;\n import tc.oc.pgm.api.player.MatchPlayer;\n-import tc.oc.pgm.filters.query.Query;\n-import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n import tc.oc.pgm.util.named.Named;\n \n /**\n- * A group of related {@link MatchPlayer}s in a {@link Match}.\n+ * A group of {@link MatchPlayer}s.\n  *\n- * @see Competitor for participating {@link MatchPlayer}s.\n- * @see ObservingParty for observing {@link MatchPlayer}s.\n+ * @see Competitor\n  */\n public interface Party extends Audience, Named {\n-\n   /**\n-   * Get the {@link Match} that the {@link Party} is in.\n+   * Gets the match.\n    *\n-   * @return The {@link Match}.\n+   * @return a match\n    */\n   Match getMatch();\n \n   /**\n-   * Get all {@link MatchPlayer}s that are in the {@link Party}.\n+   * Gets the collection of party members.\n    *\n-   * @return All the {@link MatchPlayer}s in the {@link Party}.\n+   * @return a collection of players\n    */\n-  Collection<MatchPlayer> getPlayers();\n+  Collection<MatchPlayer> getMembers();\n \n   /**\n-   * Get a {@link MatchPlayer} member, based on its unique identifier.\n+   * Gets the {@link MatchPlayer} of a member.\n    *\n-   * @param playerId The unique identifier of the {@link MatchPlayer}.\n-   * @return The {@link MatchPlayer} or {@code null} if not in the {@link Party}.\n+   * @param playerId a player id\n+   * @return a player or {@code null} if not a member\n    */\n   @Nullable\n-  MatchPlayer getPlayer(UUID playerId);\n+  MatchPlayer getMember(final UUID playerId);\n+\n+  /**\n+   * Adds a {@link MatchPlayer} to the party.\n+   *\n+   * @param player a player\n+   */\n+  void addMember(final MatchPlayer player);\n \n   /**\n-   * Get a filter {@link Query} that only matches this {@link Party}.\n+   * Removes a {@link MatchPlayer} from the party.\n    *\n-   * @return The exclusive {@link Query}.\n+   * @param playerId a player id\n+   */\n+  void removeMember(final UUID playerId);\n+\n+  /**\n+   * Gets a query that matches the party.\n+   *\n+   * @return a party query\n    */\n   PartyQuery getQuery();\n \n   /**\n-   * Get the name of the {@link Party}, which cannot change during {@link Match} time.\n+   * Sets the party name.\n+   *\n+   * @param name a name\n+   */\n+  void setName(final String name);\n+\n+  /**\n+   * Gets the initial party name, which cannot change.\n    *\n-   * @return The constant name of the {@link Party}.\n+   * @return a name\n    */\n   String getDefaultName();\n \n   /**\n-   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n+   * Checks if {@link #getName()} is grammatically plural.\n    *\n-   * @return Whether {@link #getDisplayName()} is plural.\n+   * @return if the party name is plural\n    */\n   boolean isNamePlural();\n \n   /**\n-   * Get the Minecraft {@link ChatColor} of the {@link Party}.\n+   * Gets the {@link ChatColor} of the party.\n    *\n-   * @return The {@link ChatColor}.\n+   * @return a chat color\n    */\n   ChatColor getColor();\n \n   /**\n-   * Get the RGB {@link Color} of the {@link Party}.\n+   * Gets the {@link Color} of the party.\n    *\n-   * @return The {@link Color}.\n+   * @return a color\n    */\n   Color getFullColor();\n \n   /**\n-   * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n+   * Gets a chat prefix for the party.\n    *\n-   * @return The chat prefix.\n+   * @return a component\n    */\n   Component getChatPrefix();\n \n   /**\n-   * Get whether {@link Match} should automatically add or remove {@link MatchPlayer}s from the\n-   * {@link Party}.\n-   *\n-   * <p>Otherwise, the {@link MatchModule} that registers the {@link Party} must handle that logic.\n+   * Checks if players should automatically be added to the party.\n    *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @return Whether the {@link Party} is automatically managed.\n+   * @return if the party is default\n    */\n   boolean isAutomatic();\n \n   /**\n-   * Get whether this {@link Party} is a {@link Competitor}.\n+   * Tests if the party is a {@link Competitor}.\n    *\n-   * @return Whether the {@link Party} is participating.\n+   * @return if the party is a competitor\n+   * @deprecated {@code x instanceof Competitor}\n    */\n+  @Deprecated\n   default boolean isParticipating() {\n     return this instanceof Competitor;\n   }\n \n   /**\n-   * Get whether this {@link Party} is not a {@link Competitor}.\n+   * Tests if the party is not a {@link Competitor}.\n    *\n-   * @return Whether the {@link Party} is observing.\n+   * @return if the party is not a competitor\n+   * @deprecated {@code !(x instanceof Competitor)}\n    */\n+  @Deprecated\n   default boolean isObserving() {\n-    return !isParticipating();\n+    return !this.isParticipating();\n   }\n-\n-  /**\n-   * Adds a {@link MatchPlayer} to the {@link Party}'s internal state.\n-   *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @param player The {@link MatchPlayer} to add.\n-   */\n-  void internalAddPlayer(MatchPlayer player);\n-\n-  /**\n-   * Removes a {@link MatchPlayer} from the {@link Party}'s internal state.\n-   *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @param player The {@link MatchPlayer} to remove.\n-   */\n-  void internalRemovePlayer(MatchPlayer player);\n }\n", "next_change": {"commit": "e9e5d425f17b810e50e8b2830d7ad263d2942342", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex ac4adeda..1d6cb734 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -132,4 +135,20 @@ public interface Party extends Audience, Named {\n   default boolean isObserving() {\n     return !this.isParticipating();\n   }\n+\n+  @Override\n+  @Nullable\n+  default Match getFilterableParent() {\n+    return this.getMatch();\n+  }\n+\n+  @Override\n+  default Collection<? extends Filterable<? extends PlayerQuery>> getFilterableChildren() {\n+    return this.getPlayers();\n+  }\n+\n+  @Override\n+  default Party getParty() {\n+    return this;\n+  }\n }\n", "next_change": null}]}}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -22,7 +21,7 @@ import tc.oc.pgm.util.chat.Audience;\n  * @see Competitor for participating {@link MatchPlayer}s.\n  * @see ObservingParty for observing {@link MatchPlayer}s.\n  */\n-public interface Party extends Audience {\n+public interface Party extends Audience, Named {\n \n   /**\n    * Get the {@link Match} that the {@link Party} is in.\n", "next_change": {"commit": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 587d35c8..ac4adeda 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -8,128 +8,128 @@ import org.bukkit.ChatColor;\n import org.bukkit.Color;\n import tc.oc.pgm.api.filter.query.PartyQuery;\n import tc.oc.pgm.api.match.Match;\n-import tc.oc.pgm.api.match.MatchModule;\n import tc.oc.pgm.api.player.MatchPlayer;\n-import tc.oc.pgm.filters.query.Query;\n-import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n import tc.oc.pgm.util.named.Named;\n \n /**\n- * A group of related {@link MatchPlayer}s in a {@link Match}.\n+ * A group of {@link MatchPlayer}s.\n  *\n- * @see Competitor for participating {@link MatchPlayer}s.\n- * @see ObservingParty for observing {@link MatchPlayer}s.\n+ * @see Competitor\n  */\n public interface Party extends Audience, Named {\n-\n   /**\n-   * Get the {@link Match} that the {@link Party} is in.\n+   * Gets the match.\n    *\n-   * @return The {@link Match}.\n+   * @return a match\n    */\n   Match getMatch();\n \n   /**\n-   * Get all {@link MatchPlayer}s that are in the {@link Party}.\n+   * Gets the collection of party members.\n    *\n-   * @return All the {@link MatchPlayer}s in the {@link Party}.\n+   * @return a collection of players\n    */\n-  Collection<MatchPlayer> getPlayers();\n+  Collection<MatchPlayer> getMembers();\n \n   /**\n-   * Get a {@link MatchPlayer} member, based on its unique identifier.\n+   * Gets the {@link MatchPlayer} of a member.\n    *\n-   * @param playerId The unique identifier of the {@link MatchPlayer}.\n-   * @return The {@link MatchPlayer} or {@code null} if not in the {@link Party}.\n+   * @param playerId a player id\n+   * @return a player or {@code null} if not a member\n    */\n   @Nullable\n-  MatchPlayer getPlayer(UUID playerId);\n+  MatchPlayer getMember(final UUID playerId);\n+\n+  /**\n+   * Adds a {@link MatchPlayer} to the party.\n+   *\n+   * @param player a player\n+   */\n+  void addMember(final MatchPlayer player);\n \n   /**\n-   * Get a filter {@link Query} that only matches this {@link Party}.\n+   * Removes a {@link MatchPlayer} from the party.\n    *\n-   * @return The exclusive {@link Query}.\n+   * @param playerId a player id\n+   */\n+  void removeMember(final UUID playerId);\n+\n+  /**\n+   * Gets a query that matches the party.\n+   *\n+   * @return a party query\n    */\n   PartyQuery getQuery();\n \n   /**\n-   * Get the name of the {@link Party}, which cannot change during {@link Match} time.\n+   * Sets the party name.\n+   *\n+   * @param name a name\n+   */\n+  void setName(final String name);\n+\n+  /**\n+   * Gets the initial party name, which cannot change.\n    *\n-   * @return The constant name of the {@link Party}.\n+   * @return a name\n    */\n   String getDefaultName();\n \n   /**\n-   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n+   * Checks if {@link #getName()} is grammatically plural.\n    *\n-   * @return Whether {@link #getDisplayName()} is plural.\n+   * @return if the party name is plural\n    */\n   boolean isNamePlural();\n \n   /**\n-   * Get the Minecraft {@link ChatColor} of the {@link Party}.\n+   * Gets the {@link ChatColor} of the party.\n    *\n-   * @return The {@link ChatColor}.\n+   * @return a chat color\n    */\n   ChatColor getColor();\n \n   /**\n-   * Get the RGB {@link Color} of the {@link Party}.\n+   * Gets the {@link Color} of the party.\n    *\n-   * @return The {@link Color}.\n+   * @return a color\n    */\n   Color getFullColor();\n \n   /**\n-   * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n+   * Gets a chat prefix for the party.\n    *\n-   * @return The chat prefix.\n+   * @return a component\n    */\n   Component getChatPrefix();\n \n   /**\n-   * Get whether {@link Match} should automatically add or remove {@link MatchPlayer}s from the\n-   * {@link Party}.\n-   *\n-   * <p>Otherwise, the {@link MatchModule} that registers the {@link Party} must handle that logic.\n+   * Checks if players should automatically be added to the party.\n    *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @return Whether the {@link Party} is automatically managed.\n+   * @return if the party is default\n    */\n   boolean isAutomatic();\n \n   /**\n-   * Get whether this {@link Party} is a {@link Competitor}.\n+   * Tests if the party is a {@link Competitor}.\n    *\n-   * @return Whether the {@link Party} is participating.\n+   * @return if the party is a competitor\n+   * @deprecated {@code x instanceof Competitor}\n    */\n+  @Deprecated\n   default boolean isParticipating() {\n     return this instanceof Competitor;\n   }\n \n   /**\n-   * Get whether this {@link Party} is not a {@link Competitor}.\n+   * Tests if the party is not a {@link Competitor}.\n    *\n-   * @return Whether the {@link Party} is observing.\n+   * @return if the party is not a competitor\n+   * @deprecated {@code !(x instanceof Competitor)}\n    */\n+  @Deprecated\n   default boolean isObserving() {\n-    return !isParticipating();\n+    return !this.isParticipating();\n   }\n-\n-  /**\n-   * Adds a {@link MatchPlayer} to the {@link Party}'s internal state.\n-   *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @param player The {@link MatchPlayer} to add.\n-   */\n-  void internalAddPlayer(MatchPlayer player);\n-\n-  /**\n-   * Removes a {@link MatchPlayer} from the {@link Party}'s internal state.\n-   *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @param player The {@link MatchPlayer} to remove.\n-   */\n-  void internalRemovePlayer(MatchPlayer player);\n }\n", "next_change": {"commit": "e9e5d425f17b810e50e8b2830d7ad263d2942342", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex ac4adeda..1d6cb734 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -132,4 +135,20 @@ public interface Party extends Audience, Named {\n   default boolean isObserving() {\n     return !this.isParticipating();\n   }\n+\n+  @Override\n+  @Nullable\n+  default Match getFilterableParent() {\n+    return this.getMatch();\n+  }\n+\n+  @Override\n+  default Collection<? extends Filterable<? extends PlayerQuery>> getFilterableChildren() {\n+    return this.getPlayers();\n+  }\n+\n+  @Override\n+  default Party getParty() {\n+    return this;\n+  }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "committedDate": "2020-12-11 04:39:26 -0800", "message": "Improve performance of Party implementations"}, {"oid": "18c0b112ba4ccde5e3be027aa4207347bcf96fd3", "committedDate": "2020-12-11 10:18:20 -0800", "message": "Preserve Party#getPlayers and related methods"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "e9e5d425f17b810e50e8b2830d7ad263d2942342", "committedDate": "2021-10-02 09:38:48 -0700", "message": "Dynamic filters (#914)"}, {"oid": "42c827946112a9f37312f36e92671aa3a54c8e50", "committedDate": "2022-07-28 22:25:23 +0800", "message": "Cleanup filters & implement players, rank & countdown filters (#1005)"}, {"oid": "99127f9a441f4c93ed8891ea112629c0e4a34acb", "committedDate": "2022-10-07 16:42:10 -0400", "message": "Implement dye color option for teams (#1066)"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2OTk4OA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433269988", "body": "Any `args` calls are unnescary, you can inline them all inside the `of(...)`", "bodyText": "Any args calls are unnescary, you can inline them all inside the of(...)", "bodyHTML": "<p dir=\"auto\">Any <code>args</code> calls are unnescary, you can inline them all inside the <code>of(...)</code></p>", "author": "Electroid", "createdAt": "2020-06-01T14:32:41Z", "path": "core/src/main/java/tc/oc/pgm/command/ListCommand.java", "diffHunk": "@@ -5,96 +5,106 @@\n import java.util.List;\n import java.util.UUID;\n import java.util.stream.Collectors;\n-import net.md_5.bungee.api.ChatColor;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n import org.bukkit.command.CommandSender;\n import tc.oc.pgm.api.PGM;\n import tc.oc.pgm.api.Permissions;\n import tc.oc.pgm.api.match.Match;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.teams.TeamMatchModule;\n-import tc.oc.pgm.util.component.Component;\n-import tc.oc.pgm.util.component.Components;\n-import tc.oc.pgm.util.component.types.PersonalizedText;\n-import tc.oc.pgm.util.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.util.chat.Audience;\n import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.text.TextFormatter;\n \n // TODO: clean up format and use new components\n public final class ListCommand {\n \n   @Command(\n       aliases = {\"list\", \"who\", \"online\", \"ls\"},\n       desc = \"View a list of online players\")\n-  public void list(CommandSender sender, Match match) {\n+  public void list(CommandSender sender, Audience viewer, Match match) {\n     TeamMatchModule tmm = match.getModule(TeamMatchModule.class);\n     if (tmm != null) {\n-      sender.sendMessage(\n-          new PersonalizedTranslatable(\"command.list.teams\")\n-              .getPersonalizedText()\n-              .color(ChatColor.GRAY));\n+      viewer.sendMessage(TranslatableComponent.of(\"command.list.teams\", TextColor.GRAY));\n       tmm.getTeams()\n           .forEach(\n               team ->\n                   sendTeamInfo(\n-                      sender, team.getComponentName(), team.getPlayers(), team.getMaxPlayers()));\n+                      viewer,\n+                      sender,\n+                      team.getComponentName(),\n+                      team.getPlayers(),\n+                      team.getMaxPlayers()));\n     } else {\n       sendTeamInfo(\n+          viewer,\n           sender,\n-          new PersonalizedTranslatable(\"command.list.participants\"),\n+          TranslatableComponent.of(\"command.list.participants\"),\n           match.getParticipants(),\n           match.getMaxPlayers());\n     }\n     // Observers\n     sendTeamInfo(\n+        viewer,\n         sender,\n         match.getDefaultParty().getComponentName(),\n         match.getDefaultParty().getPlayers(),\n         -1);\n \n     // Total count\n-    sender.sendMessage(\n-        new PersonalizedTranslatable(\n-                \"command.list.online\",\n-                new PersonalizedText(\n-                    Integer.toString(getSize(match.getPlayers(), false)), ChatColor.GREEN))\n-            .getPersonalizedText()\n-            .color(ChatColor.GRAY));\n+    viewer.sendMessage(\n+        TranslatableComponent.of(\"command.list.online\", TextColor.GRAY)\n+            .args(", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMzQxOA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433403418", "bodyText": "Oh good to know. I\u2019ll convert the args to inline, thanks!", "author": "applenick", "createdAt": "2020-06-01T18:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2OTk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/ListCommand.java b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\nindex 810d3a37..ce834556 100644\n--- a/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n", "chunk": "@@ -50,7 +46,7 @@ public final class ListCommand {\n     sendTeamInfo(\n         viewer,\n         sender,\n-        match.getDefaultParty().getComponentName(),\n+        match.getDefaultParty().getName(),\n         match.getDefaultParty().getPlayers(),\n         -1);\n \n", "next_change": {"commit": "88d2f371fc0779378e5ffd8e8743368502af4e5f", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/ListCommand.java b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\nindex ce834556..e45f2fb1 100644\n--- a/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n", "chunk": "@@ -52,10 +52,11 @@ public final class ListCommand {\n \n     // Total count\n     viewer.sendMessage(\n-        TranslatableComponent.of(\"command.list.online\", TextColor.GRAY)\n-            .args(\n-                TextComponent.of(\n-                    Integer.toString(getSize(match.getPlayers(), false)), TextColor.GREEN)));\n+        TranslatableComponent.of(\n+            \"command.list.online\",\n+            TextColor.GRAY,\n+            TextComponent.of(\n+                Integer.toString(getSize(match.getPlayers(), false)), TextColor.GREEN)));\n   }\n \n   private void sendTeamInfo(\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/ListCommand.java b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\nindex 810d3a37..e45f2fb1 100644\n--- a/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n", "chunk": "@@ -50,16 +46,17 @@ public final class ListCommand {\n     sendTeamInfo(\n         viewer,\n         sender,\n-        match.getDefaultParty().getComponentName(),\n+        match.getDefaultParty().getName(),\n         match.getDefaultParty().getPlayers(),\n         -1);\n \n     // Total count\n     viewer.sendMessage(\n-        TranslatableComponent.of(\"command.list.online\", TextColor.GRAY)\n-            .args(\n-                TextComponent.of(\n-                    Integer.toString(getSize(match.getPlayers(), false)), TextColor.GREEN)));\n+        TranslatableComponent.of(\n+            \"command.list.online\",\n+            TextColor.GRAY,\n+            TextComponent.of(\n+                Integer.toString(getSize(match.getPlayers(), false)), TextColor.GREEN)));\n   }\n \n   private void sendTeamInfo(\n", "next_change": {"commit": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/ListCommand.java b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\nindex e45f2fb1..f23f0aa0 100644\n--- a/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/ListCommand.java\n", "chunk": "@@ -52,11 +54,10 @@ public final class ListCommand {\n \n     // Total count\n     viewer.sendMessage(\n-        TranslatableComponent.of(\n+        translatable(\n             \"command.list.online\",\n-            TextColor.GRAY,\n-            TextComponent.of(\n-                Integer.toString(getSize(match.getPlayers(), false)), TextColor.GREEN)));\n+            NamedTextColor.GRAY,\n+            text(getSize(match.getPlayers(), false), NamedTextColor.GREEN)));\n   }\n \n   private void sendTeamInfo(\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "committedDate": "2020-12-11 04:39:26 -0800", "message": "Improve performance of Party implementations"}, {"oid": "18c0b112ba4ccde5e3be027aa4207347bcf96fd3", "committedDate": "2020-12-11 10:18:20 -0800", "message": "Preserve Party#getPlayers and related methods"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "db10316d1a341018caf597f4c0bb15ea23c6d545", "committedDate": "2022-11-04 13:22:52 -0700", "message": "Migrate to cloud framework (#1080)"}, {"oid": "601a4928383ff77080df443a63e5b1cdda63db5a", "committedDate": "2023-01-25 19:43:28 +0100", "message": "Support for Community (take 2\ufe0f\u20e3)  (#1111)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MDQ4NQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433270485", "body": "Not sure where we define `Party#getComponentName`, but it should just be `Party#getName`", "bodyText": "Not sure where we define Party#getComponentName, but it should just be Party#getName", "bodyHTML": "<p dir=\"auto\">Not sure where we define <code>Party#getComponentName</code>, but it should just be <code>Party#getName</code></p>", "author": "Electroid", "createdAt": "2020-06-01T14:33:32Z", "path": "core/src/main/java/tc/oc/pgm/command/TeamCommand.java", "diffHunk": "@@ -48,8 +48,8 @@ public void force(\n             \"join.ok.force\",\n             TextColor.GRAY,\n             joiner.getName(NameStyle.FANCY),\n-            joiner.getParty().getName(NameStyle.FANCY),\n-            oldParty.getName(NameStyle.FANCY)));\n+            joiner.getParty().getComponentName(),\n+            oldParty.getComponentName()));", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\nindex 038e5c57..579ca35b 100644\n--- a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n", "chunk": "@@ -48,8 +48,8 @@ public final class TeamCommand {\n             \"join.ok.force\",\n             TextColor.GRAY,\n             joiner.getName(NameStyle.FANCY),\n-            joiner.getParty().getComponentName(),\n-            oldParty.getComponentName()));\n+            joiner.getParty().getName(),\n+            oldParty.getName()));\n   }\n \n   @Command(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\nindex 038e5c57..8994cc0b 100644\n--- a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n", "chunk": "@@ -48,8 +48,8 @@ public final class TeamCommand {\n             \"join.ok.force\",\n             TextColor.GRAY,\n             joiner.getName(NameStyle.FANCY),\n-            joiner.getParty().getComponentName(),\n-            oldParty.getComponentName()));\n+            joiner.getParty().getName(),\n+            oldParty.getName()));\n   }\n \n   @Command(\n", "next_change": {"commit": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\nindex 8994cc0b..5a7feeb7 100644\n--- a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n", "chunk": "@@ -44,9 +45,9 @@ public final class TeamCommand {\n     }\n \n     sender.sendMessage(\n-        TranslatableComponent.of(\n+        translatable(\n             \"join.ok.force\",\n-            TextColor.GRAY,\n+            NamedTextColor.GRAY,\n             joiner.getName(NameStyle.FANCY),\n             joiner.getParty().getName(),\n             oldParty.getName()));\n", "next_change": {"commit": "db10316d1a341018caf597f4c0bb15ea23c6d545", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\nindex 5a7feeb7..61e3ef6a 100644\n--- a/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n+++ b/core/src/main/java/tc/oc/pgm/command/TeamCommand.java\n", "chunk": "@@ -53,15 +60,13 @@ public final class TeamCommand {\n             oldParty.getName()));\n   }\n \n-  @Command(\n-      aliases = {\"shuffle\"},\n-      desc = \"Shuffle players among the teams\",\n-      flags = \"af\",\n-      perms = Permissions.JOIN_FORCE)\n+  @CommandMethod(\"shuffle\")\n+  @CommandDescription(\"Shuffle players among the teams\")\n+  @CommandPermission(Permissions.JOIN_FORCE)\n   public void shuffle(\n-      Match match, TeamMatchModule teams, @Switch('a') boolean all, @Switch('f') boolean force) {\n+      Match match, TeamMatchModule teams, @Flag(\"a\") boolean all, @Flag(\"f\") boolean force) {\n     if (match.isRunning() && !force) {\n-      throw TextException.of(\"match.shuffle.err\");\n+      throw exception(\"match.shuffle.err\");\n     }\n \n     List<MatchPlayer> players = new ArrayList<>(all ? match.getPlayers() : match.getParticipants());\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "c595a2be596df15d04956d546be2ad504454691f", "committedDate": "2020-12-20 00:55:57 -0800", "message": "Tweak various Components and fix some sidebar issues"}, {"oid": "5cd0197c816a6638615a68c37a70d4ad9fd6d9a4", "committedDate": "2021-02-14 09:06:41 -0800", "message": "Reintroduce the team switch kit"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "f1e72245d89ba7b7aba62d209814a58c217f09ad", "committedDate": "2022-10-11 18:38:19 -0400", "message": "Switch from @Nullable to @Maybe for command framework When switching from javax.annotation.Nullable to org.jetbrains.annotations.Nullable, the annotation retention policy changed from runtime to compile time. This caused command arguments to be mistakenly required since the annotation was dropped at runtime. Instead, we can use the new @Maybe annotation, which is kept at runtime."}, {"oid": "eab5b40af8627821ea723a4042ea1a8ef92976ec", "committedDate": "2022-10-12 09:59:40 -0400", "message": "Fix crash during CommandGraph initialization"}, {"oid": "db10316d1a341018caf597f4c0bb15ea23c6d545", "committedDate": "2022-11-04 13:22:52 -0700", "message": "Migrate to cloud framework (#1080)"}, {"oid": "14b64ccd64eb4648f75e44a68969cb21a772f2a3", "committedDate": "2022-11-20 10:34:33 -0800", "message": "Fix issues introduced by command refactor (#1100)"}, {"oid": "749c9c4e210db47a320a53e3ec64bcf81a21d200", "committedDate": "2023-02-20 13:53:56 -0800", "message": "Introduce squads (#1136)"}, {"oid": "979d99a62737bf9fd9f4738cda549fc9524f5c1e", "committedDate": "2023-03-15 10:37:57 -0700", "message": "Fix team alias command description (#1158)"}, {"oid": "fd06354631876ed30ac9db00815337c361504e26", "committedDate": "2023-05-23 11:34:34 -0700", "message": "Fix obs always being forced (#1184)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjQ4NQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433272485", "body": "I think we should define a `PlayerComponent` interface, which contains static methods for building a player `TextComponent`.\r\n\r\nSo something like this:\r\n```java\r\ninterface PlayerComponent {\r\n  static TextComponent of(Player player);\r\n  static TextComponent of(UUID playerId); // could show \"Unknown\"\r\n  static TextComponent of(CommandSender sender);  // could show \"Console\" when null or console sender\r\n}", "bodyText": "I think we should define a PlayerComponent interface, which contains static methods for building a player TextComponent.\nSo something like this:\ninterface PlayerComponent {\n  static TextComponent of(Player player);\n  static TextComponent of(UUID playerId); // could show \"Unknown\"\n  static TextComponent of(CommandSender sender);  // could show \"Console\" when null or console sender\n}", "bodyHTML": "<p dir=\"auto\">I think we should define a <code>PlayerComponent</code> interface, which contains static methods for building a player <code>TextComponent</code>.</p>\n<p dir=\"auto\">So something like this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"interface PlayerComponent {\n  static TextComponent of(Player player);\n  static TextComponent of(UUID playerId); // could show &quot;Unknown&quot;\n  static TextComponent of(CommandSender sender);  // could show &quot;Console&quot; when null or console sender\n}\"><pre><span class=\"pl-k\">interface</span> <span class=\"pl-en\">PlayerComponent</span> {\n  <span class=\"pl-k\">static</span> <span class=\"pl-smi\">TextComponent</span> <span class=\"pl-en\">of</span>(<span class=\"pl-smi\">Player</span> <span class=\"pl-v\">player</span>);\n  <span class=\"pl-k\">static</span> <span class=\"pl-smi\">TextComponent</span> <span class=\"pl-en\">of</span>(<span class=\"pl-smi\">UUID</span> <span class=\"pl-v\">playerId</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> could show \"Unknown\"</span>\n  <span class=\"pl-k\">static</span> <span class=\"pl-smi\">TextComponent</span> <span class=\"pl-en\">of</span>(<span class=\"pl-smi\">CommandSender</span> <span class=\"pl-v\">sender</span>);  <span class=\"pl-c\"><span class=\"pl-c\">//</span> could show \"Console\" when null or console sender</span>\n}</pre></div>", "author": "Electroid", "createdAt": "2020-06-01T14:36:49Z", "path": "core/src/main/java/tc/oc/pgm/db/UsernameImpl.java", "diffHunk": "@@ -36,11 +36,10 @@ public String getName() {\n   }\n \n   @Override\n-  public Component getStyledName(NameStyle style) {\n+  public Component getName(NameStyle style) {\n     return name == null\n-        ? new PersonalizedText(\n-            new PersonalizedTranslatable(\"misc.unknown\"), ChatColor.DARK_AQUA, ChatColor.ITALIC)\n-        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style);\n+        ? TranslatableComponent.of(\"misc.unknown\", TextColor.DARK_AQUA, TextDecoration.ITALIC)\n+        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3Mjk5MA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433572990", "bodyText": "I created a PlayerComponent interface with the static methods you requested. Though I included NameStyle as a parameter, let me know if that\u2019s how you envisioned it. If not any additional guidance would be great \ud83d\udc4d", "author": "applenick", "createdAt": "2020-06-02T01:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex ddaf2a7a..bb128c7d 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -31,7 +31,7 @@ class UsernameImpl implements Username {\n \n   @Nullable\n   @Override\n-  public String getName() {\n+  public String getUsername() {\n     return name;\n   }\n \n", "next_change": {"commit": "efda1e4e3657e6bef9a38ad948c2903576f27920", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex bb128c7d..cf4c982e 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -38,8 +35,8 @@ class UsernameImpl implements Username {\n   @Override\n   public Component getName(NameStyle style) {\n     return name == null\n-        ? TranslatableComponent.of(\"misc.unknown\", TextColor.DARK_AQUA, TextDecoration.ITALIC)\n-        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();\n+        ? PlayerComponent.UNKNOWN\n+        : PlayerComponent.of(Bukkit.getPlayer(id), name, style);\n   }\n \n   @Override\n", "next_change": {"commit": "85851f35cf681c196e0ee164fb0d5bd87064f6bd", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex cf4c982e..2b2a77e6 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -39,11 +39,6 @@ class UsernameImpl implements Username {\n         : PlayerComponent.of(Bukkit.getPlayer(id), name, style);\n   }\n \n-  @Override\n-  public Component getName() {\n-    return getName(NameStyle.FANCY);\n-  }\n-\n   @Override\n   public void setName(@Nullable String name) {\n     if (name == null) {\n", "next_change": null}]}}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex ddaf2a7a..bb128c7d 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -42,6 +42,11 @@ class UsernameImpl implements Username {\n         : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();\n   }\n \n+  @Override\n+  public Component getName() {\n+    return getName(NameStyle.FANCY);\n+  }\n+\n   @Override\n   public void setName(@Nullable String name) {\n     if (name == null) {\n", "next_change": {"commit": "85851f35cf681c196e0ee164fb0d5bd87064f6bd", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex bb128c7d..2b2a77e6 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -38,13 +35,8 @@ class UsernameImpl implements Username {\n   @Override\n   public Component getName(NameStyle style) {\n     return name == null\n-        ? TranslatableComponent.of(\"misc.unknown\", TextColor.DARK_AQUA, TextDecoration.ITALIC)\n-        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();\n-  }\n-\n-  @Override\n-  public Component getName() {\n-    return getName(NameStyle.FANCY);\n+        ? PlayerComponent.UNKNOWN\n+        : PlayerComponent.of(Bukkit.getPlayer(id), name, style);\n   }\n \n   @Override\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex ddaf2a7a..3579a52c 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -31,15 +28,15 @@ class UsernameImpl implements Username {\n \n   @Nullable\n   @Override\n-  public String getName() {\n+  public String getNameLegacy() {\n     return name;\n   }\n \n   @Override\n   public Component getName(NameStyle style) {\n     return name == null\n-        ? TranslatableComponent.of(\"misc.unknown\", TextColor.DARK_AQUA, TextDecoration.ITALIC)\n-        : new PersonalizedPlayer(Bukkit.getPlayer(id), name, style).render();\n+        ? PlayerComponent.UNKNOWN\n+        : PlayerComponent.of(Bukkit.getPlayer(id), name, style);\n   }\n \n   @Override\n", "next_change": {"commit": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex 3579a52c..12a37260 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -34,9 +35,7 @@ class UsernameImpl implements Username {\n \n   @Override\n   public Component getName(NameStyle style) {\n-    return name == null\n-        ? PlayerComponent.UNKNOWN\n-        : PlayerComponent.of(Bukkit.getPlayer(id), name, style);\n+    return name == null ? PlayerComponent.UNKNOWN : player(Bukkit.getPlayer(id), name, style);\n   }\n \n   @Override\n", "next_change": {"commit": "8b4f94b6a30108079b803dff73f959f5a2950a31", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\nindex 12a37260..189ddc51 100644\n--- a/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/db/UsernameImpl.java\n", "chunk": "@@ -35,7 +34,7 @@ class UsernameImpl implements Username {\n \n   @Override\n   public Component getName(NameStyle style) {\n-    return name == null ? PlayerComponent.UNKNOWN : player(Bukkit.getPlayer(id), name, style);\n+    return player(Bukkit.getPlayer(id), name, style);\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "c595a2be596df15d04956d546be2ad504454691f", "committedDate": "2020-12-20 00:55:57 -0800", "message": "Tweak various Components and fix some sidebar issues"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "8b4f94b6a30108079b803dff73f959f5a2950a31", "committedDate": "2022-11-25 14:57:47 -0700", "message": "Implement renderable components (#1105)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjgyOQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433272829", "body": "`gamemode`", "bodyText": "gamemode", "bodyHTML": "<p dir=\"auto\"><code>gamemode</code></p>", "author": "Electroid", "createdAt": "2020-06-01T14:37:24Z", "path": "core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java", "diffHunk": "@@ -70,6 +72,7 @@ public MapInfoImpl(\n     this.tags = tags == null ? new TreeSet<>() : tags;\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n+    this.gamemodeName = gamemodeName == null ? TextComponent.empty() : gamemodeName;", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex 3db5ad18..3c6e1a9c 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -72,7 +72,7 @@ public class MapInfoImpl implements MapInfo {\n     this.tags = tags == null ? new TreeSet<>() : tags;\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n-    this.gamemodeName = gamemodeName == null ? TextComponent.empty() : gamemodeName;\n+    this.gamemode = gamemode == null ? TextComponent.empty() : gamemode;\n   }\n \n   public MapInfoImpl(MapInfo info) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex 3db5ad18..fa12ed56 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -72,7 +73,7 @@ public class MapInfoImpl implements MapInfo {\n     this.tags = tags == null ? new TreeSet<>() : tags;\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n-    this.gamemodeName = gamemodeName == null ? TextComponent.empty() : gamemodeName;\n+    this.gamemode = gamemode == null ? TextComponent.empty() : gamemode;\n   }\n \n   public MapInfoImpl(MapInfo info) {\n", "next_change": {"commit": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex fa12ed56..4f1ea287 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -73,7 +75,7 @@ public class MapInfoImpl implements MapInfo {\n     this.tags = tags == null ? new TreeSet<>() : tags;\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n-    this.gamemode = gamemode == null ? TextComponent.empty() : gamemode;\n+    this.gamemode = gamemode == null ? empty() : gamemode;\n   }\n \n   public MapInfoImpl(MapInfo info) {\n", "next_change": {"commit": "8c5c4df696fa7e1e8618b569abcdd96fa46a4feb", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex 4f1ea287..3ea5d09a 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -75,7 +74,7 @@ public class MapInfoImpl implements MapInfo {\n     this.tags = tags == null ? new TreeSet<>() : tags;\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n-    this.gamemode = gamemode == null ? empty() : gamemode;\n+    this.gamemode = gamemode;\n   }\n \n   public MapInfoImpl(MapInfo info) {\n", "next_change": {"commit": "0a0ca91ae089fff0a221632a6640f517856f455c", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex 3ea5d09a..70e6b5af 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -75,6 +78,7 @@ public class MapInfoImpl implements MapInfo {\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n     this.gamemode = gamemode;\n+    this.phase = phase;\n   }\n \n   public MapInfoImpl(MapInfo info) {\n", "next_change": {"commit": "73946ca6584387b8782e356673e3adf2f2eb1fb6", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex 70e6b5af..f88fe9a7 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -78,6 +81,7 @@ public class MapInfoImpl implements MapInfo {\n     this.players = players == null ? new LinkedList<>() : players;\n     this.world = world == null ? new WorldInfoImpl() : world;\n     this.gamemode = gamemode;\n+    this.gamemodes = gamemodes;\n     this.phase = phase;\n   }\n \n", "next_change": {"commit": "c2e23882291d66315ff99f35d0df6f50d8d61159", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex f88fe9a7..62d12b72 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -83,6 +85,7 @@ public class MapInfoImpl implements MapInfo {\n     this.gamemode = gamemode;\n     this.gamemodes = gamemodes;\n     this.phase = phase;\n+    this.friendlyFire = friendlyFire;\n   }\n \n   public MapInfoImpl(MapInfo info) {\n", "next_change": {"commit": "96bed42423d7802e74c0b608e8ab1f496885058d", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex 62d12b72..cdbb2b00 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -90,7 +89,7 @@ public class MapInfoImpl implements MapInfo {\n \n   public MapInfoImpl(MapInfo info) {\n     this(\n-        checkNotNull(info).getId(),\n+        assertNotNull(info).getId(),\n         info.getProto(),\n         info.getVersion(),\n         info.getName(),\n", "next_change": {"commit": "394ce9ba5f9f6e4046cfb26d8ea01f4243634917", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\nindex cdbb2b00..8ffb4da8 100644\n--- a/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n+++ b/core/src/main/java/tc/oc/pgm/map/MapInfoImpl.java\n", "chunk": "@@ -50,90 +59,61 @@ public class MapInfoImpl implements MapInfo {\n   protected final Collection<Integer> players;\n   protected final Collection<Gamemode> gamemodes;\n \n-  public MapInfoImpl(\n-      @Nullable String id,\n-      Version proto,\n-      Version version,\n-      String name,\n-      String description,\n-      @Nullable LocalDate created,\n-      @Nullable Collection<Contributor> authors,\n-      @Nullable Collection<Contributor> contributors,\n-      @Nullable Collection<String> rules,\n-      @Nullable Integer difficulty,\n-      @Nullable Collection<MapTag> tags,\n-      @Nullable Collection<Integer> players,\n-      @Nullable WorldInfo world,\n-      @Nullable Component gamemode,\n-      @Nullable Collection<Gamemode> gamemodes,\n-      Phase phase,\n-      @Nullable boolean friendlyFire) {\n-    this.name = assertNotNull(name);\n-    this.id = assertNotNull(MapInfo.normalizeName(id == null ? name : id));\n-    this.proto = assertNotNull(proto);\n-    this.version = assertNotNull(version);\n-    this.description = assertNotNull(description);\n-    this.created = created;\n-    this.authors = authors == null ? new LinkedList<>() : authors;\n-    this.contributors = contributors == null ? new LinkedList<>() : contributors;\n-    this.rules = rules == null ? new LinkedList<>() : rules;\n-    this.difficulty = difficulty == null ? Difficulty.NORMAL.ordinal() : difficulty;\n-    this.tags = tags == null ? new TreeSet<>() : tags;\n-    this.players = players == null ? new LinkedList<>() : players;\n-    this.world = world == null ? new WorldInfoImpl() : world;\n-    this.gamemode = gamemode;\n-    this.gamemodes = gamemodes;\n-    this.phase = phase;\n-    this.friendlyFire = friendlyFire;\n-  }\n+  protected SoftReference<MapContext> context;\n \n-  public MapInfoImpl(MapInfo info) {\n-    this(\n-        assertNotNull(info).getId(),\n-        info.getProto(),\n-        info.getVersion(),\n-        info.getName(),\n-        info.getDescription(),\n-        info.getCreated(),\n-        info.getAuthors(),\n-        info.getContributors(),\n-        info.getRules(),\n-        info.getDifficulty(),\n-        info.getTags(),\n-        info.getMaxPlayers(),\n-        info.getWorld(),\n-        info.getGamemode(),\n-        info.getGamemodes(),\n-        info.getPhase(),\n-        info.getFriendlyFire());\n-  }\n+  public MapInfoImpl(MapSource source, Element root) throws InvalidXMLException {\n+    this.source = source;\n+    this.variant = source.getVariant();\n \n-  public MapInfoImpl(Element root) throws InvalidXMLException {\n-    this(\n-        assertNotNull(root).getChildTextNormalize(\"slug\"),\n-        XMLUtils.parseSemanticVersion(Node.fromRequiredAttr(root, \"proto\")),\n-        XMLUtils.parseSemanticVersion(Node.fromRequiredChildOrAttr(root, \"version\")),\n-        Node.fromRequiredChildOrAttr(root, \"name\").getValueNormalize(),\n-        Node.fromRequiredChildOrAttr(root, \"objective\", \"description\").getValueNormalize(),\n-        XMLUtils.parseDate(Node.fromChildOrAttr(root, \"created\")),\n-        parseContributors(root, \"author\"),\n-        parseContributors(root, \"contributor\"),\n-        parseRules(root),\n+    String tmpName = assertNotNull(Node.fromRequiredChildOrAttr(root, \"name\").getValueNormalize());\n+    if (variant != null) {\n+      Element variantEl =\n+          root.getChildren(\"variant\").stream()\n+              .filter(el -> Objects.equals(variant, el.getAttributeValue(\"id\")))\n+              .findFirst()\n+              .orElseThrow(\n+                  () -> new InvalidXMLException(\"Could not find variant definition\", root));\n+\n+      boolean override = XMLUtils.parseBoolean(Node.fromAttr(variantEl, \"override\"), false);\n+      tmpName = (override ? \"\" : tmpName + \": \") + variantEl.getTextNormalize();\n+    }\n+\n+    this.name = tmpName;\n+    this.normalizedName = StringUtils.normalize(name);\n+\n+    String slug = assertNotNull(root).getChildTextNormalize(\"slug\");\n+    if (slug != null && variant != null) slug += \"_\" + variant;\n+\n+    this.id = assertNotNull(StringUtils.slugify(slug != null ? slug : name));\n+\n+    this.proto = assertNotNull(XMLUtils.parseSemanticVersion(Node.fromRequiredAttr(root, \"proto\")));\n+    this.version =\n+        assertNotNull(XMLUtils.parseSemanticVersion(Node.fromRequiredChildOrAttr(root, \"version\")));\n+    this.description =\n+        assertNotNull(\n+            Node.fromRequiredChildOrAttr(root, \"objective\", \"description\").getValueNormalize());\n+    this.created = XMLUtils.parseDate(Node.fromChildOrAttr(root, \"created\"));\n+    this.authors = parseContributors(root, \"author\");\n+    this.contributors = parseContributors(root, \"contributor\");\n+    this.rules = parseRules(root);\n+    this.difficulty =\n         XMLUtils.parseEnum(\n                 Node.fromLastChildOrAttr(root, \"difficulty\"),\n                 Difficulty.class,\n                 \"difficulty\",\n                 Difficulty.NORMAL)\n-            .ordinal(),\n-        null,\n-        null,\n-        parseWorld(root),\n-        XMLUtils.parseFormattedText(root, \"game\"),\n-        parseGamemodes(root),\n+            .ordinal();\n+    this.tags = new TreeSet<>();\n+    this.players = new ArrayList<>();\n+    this.world = parseWorld(root);\n+    this.gamemode = XMLUtils.parseFormattedText(root, \"game\");\n+    this.gamemodes = parseGamemodes(root);\n+    this.phase =\n         XMLUtils.parseEnum(\n-            Node.fromLastChildOrAttr(root, \"phase\"), Phase.class, \"phase\", Phase.PRODUCTION),\n+            Node.fromLastChildOrAttr(root, \"phase\"), Phase.class, \"phase\", Phase.PRODUCTION);\n+    this.friendlyFire =\n         XMLUtils.parseBoolean(\n-            Node.fromLastChildOrAttr(root, \"friendlyfire\", \"friendly-fire\"), false));\n+            Node.fromLastChildOrAttr(root, \"friendlyfire\", \"friendly-fire\"), false);\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "3b5c402c56003ffe689b29d7c7d5130512bc404b", "committedDate": "2020-08-19 08:33:56 -0700", "message": "Add map created date"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "8c5c4df696fa7e1e8618b569abcdd96fa46a4feb", "committedDate": "2020-12-19 17:19:06 -0800", "message": "Add initial support for per-player sidebars"}, {"oid": "0a0ca91ae089fff0a221632a6640f517856f455c", "committedDate": "2021-06-20 15:30:11 -0700", "message": "Reintroduce map phases"}, {"oid": "73946ca6584387b8782e356673e3adf2f2eb1fb6", "committedDate": "2021-07-17 09:09:23 -0700", "message": "Add a <gamemode> tag"}, {"oid": "c2e23882291d66315ff99f35d0df6f50d8d61159", "committedDate": "2022-04-01 23:24:22 -0700", "message": "Implement friendly fire (#981)"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "db10316d1a341018caf597f4c0bb15ea23c6d545", "committedDate": "2022-11-04 13:22:52 -0700", "message": "Migrate to cloud framework (#1080)"}, {"oid": "394ce9ba5f9f6e4046cfb26d8ea01f4243634917", "committedDate": "2023-05-11 11:24:19 -0700", "message": "Support map variants (#1179)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzQ1Mw==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433273453", "body": "Do we need to use `TextTranslations` here? This won't translate the gamemodes, as-is.", "bodyText": "Do we need to use TextTranslations here? This won't translate the gamemodes, as-is.", "bodyHTML": "<p dir=\"auto\">Do we need to use <code>TextTranslations</code> here? This won't translate the gamemodes, as-is.</p>", "author": "Electroid", "createdAt": "2020-06-01T14:38:24Z", "path": "core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java", "diffHunk": "@@ -90,9 +90,15 @@ public SidebarMatchModule createMatchModule(Match match) throws ModuleLoadExcept\n \n   protected @Nullable Future<?> renderTask;\n \n-  private static String renderSidebarTitle(Collection<MapTag> tags) {\n+  private static String renderSidebarTitle(\n+      Collection<MapTag> tags, @Nullable Component gamemodeName) {\n     final Component configTitle = PGM.get().getConfiguration().getMatchHeader();\n-    if (configTitle != null) return LegacyComponentSerializer.legacy().serialize(configTitle);\n+    if (configTitle != null)\n+      return LegacyComponentSerializer.legacy().serialize(configTitle.color(TextColor.AQUA));", "originalCommit": "c583211427b5b2473d55b79bcdd1f47e0c45fa0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3MTE4OQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r433571189", "bodyText": "I believe that\u2019s for the config scoreboard sidebar header. Also since scoreboards are for all, we can\u2019t translate them yet correct?", "author": "applenick", "createdAt": "2020-06-02T01:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\nindex 1f216a49..98d3d767 100644\n--- a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n", "chunk": "@@ -93,11 +92,10 @@ public class SidebarMatchModule implements MatchModule, Listener {\n   private static String renderSidebarTitle(\n       Collection<MapTag> tags, @Nullable Component gamemodeName) {\n     final Component configTitle = PGM.get().getConfiguration().getMatchHeader();\n-    if (configTitle != null)\n-      return LegacyComponentSerializer.legacy().serialize(configTitle.color(TextColor.AQUA));\n+    if (configTitle != null) return LegacyComponentSerializer.legacy().serialize(configTitle);\n     if (gamemodeName != null) {\n       String customGamemode = LegacyComponentSerializer.legacy().serialize(gamemodeName);\n-      if (!customGamemode.isEmpty()) return customGamemode;\n+      if (!customGamemode.isEmpty()) return ChatColor.AQUA + customGamemode;\n     }\n \n     final List<String> gamemode =\n", "next_change": null}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\nindex 1f216a49..551c2495 100644\n--- a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n", "chunk": "@@ -93,11 +93,10 @@ public class SidebarMatchModule implements MatchModule, Listener {\n   private static String renderSidebarTitle(\n       Collection<MapTag> tags, @Nullable Component gamemodeName) {\n     final Component configTitle = PGM.get().getConfiguration().getMatchHeader();\n-    if (configTitle != null)\n-      return LegacyComponentSerializer.legacy().serialize(configTitle.color(TextColor.AQUA));\n+    if (configTitle != null) return LegacyComponentSerializer.legacy().serialize(configTitle);\n     if (gamemodeName != null) {\n       String customGamemode = LegacyComponentSerializer.legacy().serialize(gamemodeName);\n-      if (!customGamemode.isEmpty()) return customGamemode;\n+      if (!customGamemode.isEmpty()) return ChatColor.AQUA + customGamemode;\n     }\n \n     final List<String> gamemode =\n", "next_change": {"commit": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\nindex 551c2495..f7ae0d97 100644\n--- a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n", "chunk": "@@ -93,9 +94,10 @@ public class SidebarMatchModule implements MatchModule, Listener {\n   private static String renderSidebarTitle(\n       Collection<MapTag> tags, @Nullable Component gamemodeName) {\n     final Component configTitle = PGM.get().getConfiguration().getMatchHeader();\n-    if (configTitle != null) return LegacyComponentSerializer.legacy().serialize(configTitle);\n+    if (configTitle != null)\n+      return LegacyComponentSerializer.legacyAmpersand().serialize(configTitle);\n     if (gamemodeName != null) {\n-      String customGamemode = LegacyComponentSerializer.legacy().serialize(gamemodeName);\n+      String customGamemode = LegacyComponentSerializer.legacySection().serialize(gamemodeName);\n       if (!customGamemode.isEmpty()) return ChatColor.AQUA + customGamemode;\n     }\n \n", "next_change": {"commit": "8c5c4df696fa7e1e8618b569abcdd96fa46a4feb", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\nindex f7ae0d97..b2c20f44 100644\n--- a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n", "chunk": "@@ -86,123 +89,17 @@ public class SidebarMatchModule implements MatchModule, Listener {\n   public static final int MAX_PREFIX = 16; // Max chars in a team prefix\n   public static final int MAX_SUFFIX = 16; // Max chars in a team suffix\n \n-  protected final Map<Party, Sidebar> sidebars = new HashMap<>();\n+  protected final Map<UUID, FastBoard> sidebars = new HashMap<>();\n   protected final Map<Goal, BlinkTask> blinkingGoals = new HashMap<>();\n \n   protected @Nullable Future<?> renderTask;\n \n-  private static String renderSidebarTitle(\n-      Collection<MapTag> tags, @Nullable Component gamemodeName) {\n-    final Component configTitle = PGM.get().getConfiguration().getMatchHeader();\n-    if (configTitle != null)\n-      return LegacyComponentSerializer.legacyAmpersand().serialize(configTitle);\n-    if (gamemodeName != null) {\n-      String customGamemode = LegacyComponentSerializer.legacySection().serialize(gamemodeName);\n-      if (!customGamemode.isEmpty()) return ChatColor.AQUA + customGamemode;\n-    }\n-\n-    final List<String> gamemode =\n-        tags.stream()\n-            .filter(MapTag::isGamemode)\n-            .filter(tag -> !tag.isAuxiliary())\n-            .map(MapTag::getName)\n-            .collect(Collectors.toList());\n-    final List<String> auxiliary =\n-        tags.stream()\n-            .filter(MapTag::isGamemode)\n-            .filter(MapTag::isAuxiliary)\n-            .map(MapTag::getName)\n-            .collect(Collectors.toList());\n-\n-    String title = \"\";\n-\n-    if (gamemode.size() == 1) {\n-      title = gamemode.get(0);\n-    } else if (gamemode.size() >= 2) {\n-      title = \"Objectives\";\n-    }\n-\n-    if (auxiliary.size() == 1) {\n-      title += (title.isEmpty() ? \"\" : \" & \") + auxiliary.get(0);\n-    } else if (gamemode.isEmpty() && auxiliary.size() == 2) {\n-      title = auxiliary.get(0) + \" & \" + auxiliary.get(1);\n-    }\n-\n-    return ChatColor.AQUA + (title.isEmpty() ? \"Match\" : title);\n-  }\n-\n-  private class Sidebar {\n-\n-    private static final String IDENTIFIER = \"pgm\";\n-\n-    private final Scoreboard scoreboard;\n-    private final Objective objective;\n-\n-    // Each row has its own scoreboard team\n-    protected final String[] rows = new String[MAX_ROWS];\n-    protected final int[] scores = new int[MAX_ROWS];\n-    protected final Team[] teams = new Team[MAX_ROWS];\n-    protected final String[] players = new String[MAX_ROWS];\n-\n-    private Sidebar(Party party) {\n-      this.scoreboard = match.needModule(ScoreboardMatchModule.class).getScoreboard(party);\n-      this.objective = this.scoreboard.registerNewObjective(IDENTIFIER, \"dummy\");\n-      this.objective.setDisplayName(\n-          StringUtils.left(\n-              renderSidebarTitle(match.getMap().getTags(), match.getMap().getGamemode()), 32));\n-      this.objective.setDisplaySlot(DisplaySlot.SIDEBAR);\n-\n-      for (int i = 0; i < MAX_ROWS; ++i) {\n-        this.rows[i] = null;\n-        this.scores[i] = -1;\n-\n-        this.players[i] = String.valueOf(ChatColor.COLOR_CHAR) + (char) i;\n-\n-        this.teams[i] = this.scoreboard.registerNewTeam(IDENTIFIER + \"-row-\" + i);\n-        this.teams[i].setPrefix(\"\");\n-        this.teams[i].setSuffix(\"\");\n-        this.teams[i].addEntry(this.players[i]);\n-      }\n-    }\n-\n-    public Scoreboard getScoreboard() {\n-      return this.scoreboard;\n-    }\n-\n-    public Objective getObjective() {\n-      return this.objective;\n-    }\n-\n-    private void setRow(int maxScore, int row, @Nullable String text) {\n-      if (row < 0 || row >= MAX_ROWS) return;\n-\n-      int score = text == null ? -1 : maxScore - row - 1;\n-      if (this.scores[row] != score) {\n-        this.scores[row] = score;\n-\n-        if (score == -1) {\n-          this.scoreboard.resetScores(this.players[row]);\n-        } else {\n-          this.objective.getScore(this.players[row]).setScore(score);\n-        }\n-      }\n-\n-      if (!Objects.equals(this.rows[row], text)) {\n-        this.rows[row] = text;\n-\n-        if (text != null) {\n-          String[] split = tc.oc.pgm.util.StringUtils.splitIntoTeamPrefixAndSuffix(text);\n-          this.teams[row].setPrefix(split[0]);\n-          this.teams[row].setSuffix(split[1]);\n-        }\n-      }\n-    }\n-  }\n-\n   private final Match match;\n+  private final Component title;\n \n   public SidebarMatchModule(Match match) {\n     this.match = match;\n+    this.title = renderTitle(PGM.get().getConfiguration(), match.getMap());\n   }\n \n   private boolean hasScores() {\n", "next_change": {"commit": "5c294a6d8b68719eaa44d45f70fc18506af24c53", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\nindex b2c20f44..dd52b8e0 100644\n--- a/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/scoreboard/SidebarMatchModule.java\n", "chunk": "@@ -85,55 +72,28 @@ public class SidebarMatchModule implements MatchModule, Listener {\n     }\n   }\n \n-  public static final int MAX_ROWS = 16; // Max rows on the scoreboard\n-  public static final int MAX_PREFIX = 16; // Max chars in a team prefix\n-  public static final int MAX_SUFFIX = 16; // Max chars in a team suffix\n-\n   protected final Map<UUID, FastBoard> sidebars = new HashMap<>();\n-  protected final Map<Goal, BlinkTask> blinkingGoals = new HashMap<>();\n+  protected final Map<Goal<?>, BlinkTask> blinkingGoals = new HashMap<>();\n \n   protected @Nullable Future<?> renderTask;\n+  private final RateLimiter rateLimit = new RateLimiter(50, 1000, 40, 1000);\n \n   private final Match match;\n+  private final SidebarRenderer renderer;\n   private final Component title;\n \n   public SidebarMatchModule(Match match) {\n     this.match = match;\n-    this.title = renderTitle(PGM.get().getConfiguration(), match.getMap());\n-  }\n-\n-  private boolean hasScores() {\n-    return match.getModule(ScoreMatchModule.class) != null;\n-  }\n-\n-  private boolean isBlitz() {\n-    return match.getModule(BlitzMatchModule.class) != null;\n-  }\n-\n-  // Determines if wool objectives should be given their own rows, or all shown on 1 row.\n-  private boolean isCompactWool() {\n-    WoolMatchModule wmm = match.getModule(WoolMatchModule.class);\n-    return wmm != null\n-        && !(wmm.getWools().keySet().size() * 2 - 1 + wmm.getWools().values().size() < MAX_ROWS);\n-  }\n-\n-  // Determines if all the map objectives can fit onto the scoreboard with empty rows in between.\n-  private boolean isSuperCompact(Set<Competitor> competitorsWithGoals) {\n-    int rowsUsed = competitorsWithGoals.size() * 2 - 1;\n-\n-    if (isCompactWool()) {\n-      WoolMatchModule wmm = match.getModule(WoolMatchModule.class);\n-      rowsUsed += wmm.getWools().keySet().size();\n-    } else {\n-      GoalMatchModule gmm = match.needModule(GoalMatchModule.class);\n-      rowsUsed += gmm.getGoals().size();\n-    }\n-\n-    return !(rowsUsed < MAX_ROWS);\n+    this.renderer = new SidebarRenderer(match, this);\n+    this.title = renderer.renderTitle();\n   }\n \n   private void addSidebar(MatchPlayer player) {\n-    sidebars.put(player.getId(), new FastBoard(player.getBukkit()));\n+    FastBoard sidebar = new FastBoard(player.getBukkit());\n+    // Only render the title once, since it does not change during the match.\n+    sidebar.updateTitle(renderer.renderTitle(title, player));\n+\n+    sidebars.put(player.getId(), sidebar);\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "29485659fee5e778575744a0d2f757425784cc6c", "committedDate": "2020-07-26 08:46:57 -0700", "message": "Implement legacy tab for players on 1.7 or earlier"}, {"oid": "65bba2d84caae0322c3c7f1c4cfc6dd0e20f0dc5", "committedDate": "2020-08-03 07:42:43 -0700", "message": "Sort teams in sidebar for obs"}, {"oid": "2588ce7cf9641ac992a309debe6f2b00071b36d1", "committedDate": "2020-08-05 07:19:30 -0700", "message": "Prevent proximity metric none showing on scoreboard"}, {"oid": "4b4b63b1be1c1add10a312716f33387dd462dde0", "committedDate": "2020-08-29 08:02:14 -0700", "message": "Fix sidebar not rendering with too many rows"}, {"oid": "12dbdd7da36fd5dd1d36c6d37c74025e3ca2ba8a", "committedDate": "2020-09-11 21:37:18 -0700", "message": "Disabled arbitrary sorting of sidebar competitors"}, {"oid": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "committedDate": "2020-12-11 04:39:26 -0800", "message": "Improve performance of Party implementations"}, {"oid": "18c0b112ba4ccde5e3be027aa4207347bcf96fd3", "committedDate": "2020-12-11 10:18:20 -0800", "message": "Preserve Party#getPlayers and related methods"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "8c5c4df696fa7e1e8618b569abcdd96fa46a4feb", "committedDate": "2020-12-19 17:19:06 -0800", "message": "Add initial support for per-player sidebars"}, {"oid": "c595a2be596df15d04956d546be2ad504454691f", "committedDate": "2020-12-20 00:55:57 -0800", "message": "Tweak various Components and fix some sidebar issues"}, {"oid": "265a1f6c64c324b9f61b6cc833c6ec6f25086cbf", "committedDate": "2020-12-27 08:26:15 -0800", "message": "Fix scoreboards breaking on long lines"}, {"oid": "adc077c38c47204c6ff02527e0255baf7d9b5485", "committedDate": "2020-12-30 09:38:18 -0800", "message": "Prevent scoreboard rendering bugs on ffa"}, {"oid": "479e36b5bd7b17c9ba3f248745efa20e00e67b71", "committedDate": "2021-01-07 09:02:45 -0800", "message": "Add a length check to sidebar title"}, {"oid": "08be6017395aab55b4d49544b1d33cb36b61d2c3", "committedDate": "2021-01-07 09:03:13 -0800", "message": "Wait for module unload to clear sidebar list"}, {"oid": "44984f83964fa8fd6aa60412402415f51bf0d9cd", "committedDate": "2021-03-10 16:02:25 -0800", "message": "Make victory conditions respect completion rules"}, {"oid": "89332cf88db6d4adc0fa685779029bd47a565b03", "committedDate": "2021-04-17 11:06:02 -0700", "message": "Support Spigot 1.8"}, {"oid": "73946ca6584387b8782e356673e3adf2f2eb1fb6", "committedDate": "2021-07-17 09:09:23 -0700", "message": "Add a <gamemode> tag"}, {"oid": "a200242911d7afe74a682b0a0cb3a3fe669b54cb", "committedDate": "2022-04-21 23:39:02 -0700", "message": "Expand visibility controls for objectives (#986)"}, {"oid": "f1a3cac8d5c13b74498cc9c178439cee379ecf0b", "committedDate": "2022-09-24 13:13:49 -0400", "message": "Add rate-limiting to scoreboard and tab list (#1060)"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "b6c7cd0a5f13d12fbb4eb1a3edf3c648e8111673", "committedDate": "2022-10-09 23:40:05 -0400", "message": "Refactor SidebarMatchModule to use Component"}, {"oid": "aa4cd1d674b8f37c74916bed64c01593499683c4", "committedDate": "2022-10-21 10:04:22 -0700", "message": "Reduce compact wool scoreboard component length (#1084)"}, {"oid": "36495ad9790ad4f960f20550f012298456265e5d", "committedDate": "2022-11-08 07:53:28 -0800", "message": "Change title from \"Rage and Blitz\" to \"Blitz: Rage\" (#1082)"}, {"oid": "5c294a6d8b68719eaa44d45f70fc18506af24c53", "committedDate": "2023-02-04 08:40:41 -0800", "message": "Implement scoreboard filters (#1118)"}, {"oid": "a73954fdf28802227044e12f3aa51e124798662a", "committedDate": "2023-02-26 10:58:17 -0800", "message": "Improve tablist performance & responsiveness (#1145)"}, {"oid": "1799bc2364e6f20f30a7e1abf13cfb770981068c", "committedDate": "2023-03-01 02:03:44 +0100", "message": "Tweak tablist rate limit on cycle (#1147)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzkxMA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434253910", "body": "Do we need these methods? Can we just use `getName` ?", "bodyText": "Do we need these methods? Can we just use getName ?", "bodyHTML": "<p dir=\"auto\">Do we need these methods? Can we just use <code>getName</code> ?</p>", "author": "Electroid", "createdAt": "2020-06-03T01:02:19Z", "path": "core/src/main/java/tc/oc/pgm/api/party/Party.java", "diffHunk": "@@ -68,20 +69,20 @@\n    * @see PartyRenameEvent\n    * @return The current name of the {@link Party}.\n    */\n-  String getName();\n+  String getDisplayName();\n \n   /**\n    * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n    *\n    * @param viewer The viewer.\n    * @return The name of the {@link Party}, relative to the viewer.\n    */\n-  String getName(@Nullable CommandSender viewer);\n+  String getDisplayName(@Nullable CommandSender viewer);", "originalCommit": "383d385a991d0f87375c0284415c31fe13d9a645", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..5a2da74f 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -69,7 +67,7 @@ public interface Party extends Audience, Named {\n    * @see PartyRenameEvent\n    * @return The current name of the {@link Party}.\n    */\n-  String getDisplayName();\n+  String getName();\n \n   /**\n    * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -67,7 +69,7 @@ public interface Party extends Audience {\n    * @see PartyRenameEvent\n    * @return The current name of the {@link Party}.\n    */\n-  String getName();\n+  String getDisplayName();\n \n   /**\n    * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -63,22 +60,6 @@ public interface Party extends Audience, Named {\n    */\n   String getDefaultName();\n \n-  /**\n-   * Get the current name of the {@link Party}, which might change at anytime.\n-   *\n-   * @see PartyRenameEvent\n-   * @return The current name of the {@link Party}.\n-   */\n-  String getDisplayName();\n-\n-  /**\n-   * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The name of the {@link Party}, relative to the viewer.\n-   */\n-  String getDisplayName(@Nullable CommandSender viewer);\n-\n   /**\n    * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n", "next_change": null}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -75,12 +77,12 @@ public interface Party extends Audience {\n    * @param viewer The viewer.\n    * @return The name of the {@link Party}, relative to the viewer.\n    */\n-  String getName(@Nullable CommandSender viewer);\n+  String getDisplayName(@Nullable CommandSender viewer);\n \n   /**\n-   * Get whether {@link #getName()} is grammatically a plural word.\n+   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n-   * @return Whether {@link #getName()} is plural.\n+   * @return Whether {@link #getDisplayName()} is plural.\n    */\n   boolean isNamePlural();\n \n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -63,22 +60,6 @@ public interface Party extends Audience, Named {\n    */\n   String getDefaultName();\n \n-  /**\n-   * Get the current name of the {@link Party}, which might change at anytime.\n-   *\n-   * @see PartyRenameEvent\n-   * @return The current name of the {@link Party}.\n-   */\n-  String getDisplayName();\n-\n-  /**\n-   * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The name of the {@link Party}, relative to the viewer.\n-   */\n-  String getDisplayName(@Nullable CommandSender viewer);\n-\n   /**\n    * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n", "next_change": null}]}}]}}, {"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..5a2da74f 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -77,12 +75,12 @@ public interface Party extends Audience, Named {\n    * @param viewer The viewer.\n    * @return The name of the {@link Party}, relative to the viewer.\n    */\n-  String getDisplayName(@Nullable CommandSender viewer);\n+  String getName(@Nullable CommandSender viewer);\n \n   /**\n-   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n+   * Get whether {@link #getName()} is grammatically a plural word.\n    *\n-   * @return Whether {@link #getDisplayName()} is plural.\n+   * @return Whether {@link #getName()} is plural.\n    */\n   boolean isNamePlural();\n \n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -75,12 +77,12 @@ public interface Party extends Audience {\n    * @param viewer The viewer.\n    * @return The name of the {@link Party}, relative to the viewer.\n    */\n-  String getName(@Nullable CommandSender viewer);\n+  String getDisplayName(@Nullable CommandSender viewer);\n \n   /**\n-   * Get whether {@link #getName()} is grammatically a plural word.\n+   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n-   * @return Whether {@link #getName()} is plural.\n+   * @return Whether {@link #getDisplayName()} is plural.\n    */\n   boolean isNamePlural();\n \n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -63,22 +60,6 @@ public interface Party extends Audience, Named {\n    */\n   String getDefaultName();\n \n-  /**\n-   * Get the current name of the {@link Party}, which might change at anytime.\n-   *\n-   * @see PartyRenameEvent\n-   * @return The current name of the {@link Party}.\n-   */\n-  String getDisplayName();\n-\n-  /**\n-   * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The name of the {@link Party}, relative to the viewer.\n-   */\n-  String getDisplayName(@Nullable CommandSender viewer);\n-\n   /**\n    * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -63,22 +60,6 @@ public interface Party extends Audience, Named {\n    */\n   String getDefaultName();\n \n-  /**\n-   * Get the current name of the {@link Party}, which might change at anytime.\n-   *\n-   * @see PartyRenameEvent\n-   * @return The current name of the {@link Party}.\n-   */\n-  String getDisplayName();\n-\n-  /**\n-   * Get the current name of the {@link Party} from the perspective of a {@link CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The name of the {@link Party}, relative to the viewer.\n-   */\n-  String getDisplayName(@Nullable CommandSender viewer);\n-\n   /**\n    * Get whether {@link #getDisplayName()} is grammatically a plural word.\n    *\n", "next_change": {"commit": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 587d35c8..ac4adeda 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -8,128 +8,128 @@ import org.bukkit.ChatColor;\n import org.bukkit.Color;\n import tc.oc.pgm.api.filter.query.PartyQuery;\n import tc.oc.pgm.api.match.Match;\n-import tc.oc.pgm.api.match.MatchModule;\n import tc.oc.pgm.api.player.MatchPlayer;\n-import tc.oc.pgm.filters.query.Query;\n-import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n import tc.oc.pgm.util.named.Named;\n \n /**\n- * A group of related {@link MatchPlayer}s in a {@link Match}.\n+ * A group of {@link MatchPlayer}s.\n  *\n- * @see Competitor for participating {@link MatchPlayer}s.\n- * @see ObservingParty for observing {@link MatchPlayer}s.\n+ * @see Competitor\n  */\n public interface Party extends Audience, Named {\n-\n   /**\n-   * Get the {@link Match} that the {@link Party} is in.\n+   * Gets the match.\n    *\n-   * @return The {@link Match}.\n+   * @return a match\n    */\n   Match getMatch();\n \n   /**\n-   * Get all {@link MatchPlayer}s that are in the {@link Party}.\n+   * Gets the collection of party members.\n    *\n-   * @return All the {@link MatchPlayer}s in the {@link Party}.\n+   * @return a collection of players\n    */\n-  Collection<MatchPlayer> getPlayers();\n+  Collection<MatchPlayer> getMembers();\n \n   /**\n-   * Get a {@link MatchPlayer} member, based on its unique identifier.\n+   * Gets the {@link MatchPlayer} of a member.\n    *\n-   * @param playerId The unique identifier of the {@link MatchPlayer}.\n-   * @return The {@link MatchPlayer} or {@code null} if not in the {@link Party}.\n+   * @param playerId a player id\n+   * @return a player or {@code null} if not a member\n    */\n   @Nullable\n-  MatchPlayer getPlayer(UUID playerId);\n+  MatchPlayer getMember(final UUID playerId);\n+\n+  /**\n+   * Adds a {@link MatchPlayer} to the party.\n+   *\n+   * @param player a player\n+   */\n+  void addMember(final MatchPlayer player);\n \n   /**\n-   * Get a filter {@link Query} that only matches this {@link Party}.\n+   * Removes a {@link MatchPlayer} from the party.\n    *\n-   * @return The exclusive {@link Query}.\n+   * @param playerId a player id\n+   */\n+  void removeMember(final UUID playerId);\n+\n+  /**\n+   * Gets a query that matches the party.\n+   *\n+   * @return a party query\n    */\n   PartyQuery getQuery();\n \n   /**\n-   * Get the name of the {@link Party}, which cannot change during {@link Match} time.\n+   * Sets the party name.\n+   *\n+   * @param name a name\n+   */\n+  void setName(final String name);\n+\n+  /**\n+   * Gets the initial party name, which cannot change.\n    *\n-   * @return The constant name of the {@link Party}.\n+   * @return a name\n    */\n   String getDefaultName();\n \n   /**\n-   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n+   * Checks if {@link #getName()} is grammatically plural.\n    *\n-   * @return Whether {@link #getDisplayName()} is plural.\n+   * @return if the party name is plural\n    */\n   boolean isNamePlural();\n \n   /**\n-   * Get the Minecraft {@link ChatColor} of the {@link Party}.\n+   * Gets the {@link ChatColor} of the party.\n    *\n-   * @return The {@link ChatColor}.\n+   * @return a chat color\n    */\n   ChatColor getColor();\n \n   /**\n-   * Get the RGB {@link Color} of the {@link Party}.\n+   * Gets the {@link Color} of the party.\n    *\n-   * @return The {@link Color}.\n+   * @return a color\n    */\n   Color getFullColor();\n \n   /**\n-   * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n+   * Gets a chat prefix for the party.\n    *\n-   * @return The chat prefix.\n+   * @return a component\n    */\n   Component getChatPrefix();\n \n   /**\n-   * Get whether {@link Match} should automatically add or remove {@link MatchPlayer}s from the\n-   * {@link Party}.\n-   *\n-   * <p>Otherwise, the {@link MatchModule} that registers the {@link Party} must handle that logic.\n+   * Checks if players should automatically be added to the party.\n    *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @return Whether the {@link Party} is automatically managed.\n+   * @return if the party is default\n    */\n   boolean isAutomatic();\n \n   /**\n-   * Get whether this {@link Party} is a {@link Competitor}.\n+   * Tests if the party is a {@link Competitor}.\n    *\n-   * @return Whether the {@link Party} is participating.\n+   * @return if the party is a competitor\n+   * @deprecated {@code x instanceof Competitor}\n    */\n+  @Deprecated\n   default boolean isParticipating() {\n     return this instanceof Competitor;\n   }\n \n   /**\n-   * Get whether this {@link Party} is not a {@link Competitor}.\n+   * Tests if the party is not a {@link Competitor}.\n    *\n-   * @return Whether the {@link Party} is observing.\n+   * @return if the party is not a competitor\n+   * @deprecated {@code !(x instanceof Competitor)}\n    */\n+  @Deprecated\n   default boolean isObserving() {\n-    return !isParticipating();\n+    return !this.isParticipating();\n   }\n-\n-  /**\n-   * Adds a {@link MatchPlayer} to the {@link Party}'s internal state.\n-   *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @param player The {@link MatchPlayer} to add.\n-   */\n-  void internalAddPlayer(MatchPlayer player);\n-\n-  /**\n-   * Removes a {@link MatchPlayer} from the {@link Party}'s internal state.\n-   *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @param player The {@link MatchPlayer} to remove.\n-   */\n-  void internalRemovePlayer(MatchPlayer player);\n }\n", "next_change": {"commit": "e9e5d425f17b810e50e8b2830d7ad263d2942342", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex ac4adeda..1d6cb734 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -132,4 +135,20 @@ public interface Party extends Audience, Named {\n   default boolean isObserving() {\n     return !this.isParticipating();\n   }\n+\n+  @Override\n+  @Nullable\n+  default Match getFilterableParent() {\n+    return this.getMatch();\n+  }\n+\n+  @Override\n+  default Collection<? extends Filterable<? extends PlayerQuery>> getFilterableChildren() {\n+    return this.getPlayers();\n+  }\n+\n+  @Override\n+  default Party getParty() {\n+    return this;\n+  }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "committedDate": "2020-12-11 04:39:26 -0800", "message": "Improve performance of Party implementations"}, {"oid": "18c0b112ba4ccde5e3be027aa4207347bcf96fd3", "committedDate": "2020-12-11 10:18:20 -0800", "message": "Preserve Party#getPlayers and related methods"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "e9e5d425f17b810e50e8b2830d7ad263d2942342", "committedDate": "2021-10-02 09:38:48 -0700", "message": "Dynamic filters (#914)"}, {"oid": "42c827946112a9f37312f36e92671aa3a54c8e50", "committedDate": "2022-07-28 22:25:23 +0800", "message": "Cleanup filters & implement players, rank & countdown filters (#1005)"}, {"oid": "99127f9a441f4c93ed8891ea112629c0e4a34acb", "committedDate": "2022-10-07 16:42:10 -0400", "message": "Implement dye color option for teams (#1066)"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDA3Ng==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434254076", "body": "Don't need to refine these, maybe the default should be in `Named`?", "bodyText": "Don't need to refine these, maybe the default should be in Named?", "bodyHTML": "<p dir=\"auto\">Don't need to refine these, maybe the default should be in <code>Named</code>?</p>", "author": "Electroid", "createdAt": "2020-06-03T01:03:02Z", "path": "core/src/main/java/tc/oc/pgm/api/party/Party.java", "diffHunk": "@@ -116,15 +117,21 @@ default String getColoredName() {\n    * @return The colored {@link Party} name.\n    */\n   default String getColoredName(@Nullable CommandSender viewer) {\n-    return getColor() + getName(viewer);\n+    return getColor() + getDisplayName(viewer);\n   }\n \n   /**\n    * Get the current name of the {@link Party} as a {@link Component} with colors.\n    *\n    * @return The current {@link Party} name.\n    */\n-  Component getComponentName();\n+  @Override\n+  Component getName();\n+\n+  @Override\n+  default Component getName(NameStyle style) {\n+    return getName();\n+  }", "originalCommit": "383d385a991d0f87375c0284415c31fe13d9a645", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..5a2da74f 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -125,13 +123,7 @@ public interface Party extends Audience, Named {\n    *\n    * @return The current {@link Party} name.\n    */\n-  @Override\n-  Component getName();\n-\n-  @Override\n-  default Component getName(NameStyle style) {\n-    return getName();\n-  }\n+  Component getComponentName();\n \n   /**\n    * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 5a2da74f..2a82f92d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -123,7 +125,13 @@ public interface Party extends Audience {\n    *\n    * @return The current {@link Party} name.\n    */\n-  Component getComponentName();\n+  @Override\n+  Component getName();\n+\n+  @Override\n+  default Component getName(NameStyle style) {\n+    return getName();\n+  }\n \n   /**\n    * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -100,39 +81,6 @@ public interface Party extends Audience, Named {\n    */\n   Color getFullColor();\n \n-  /**\n-   * Get the current name of the {@link Party}, with its {@link #getColor()} formatting.\n-   *\n-   * @return The colored {@link Party} name.\n-   */\n-  default String getColoredName() {\n-    return getColor() + getDisplayName();\n-  }\n-\n-  /**\n-   * Get the current name of the {@link Party}, with colors and from the perspective of a {@link\n-   * CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The colored {@link Party} name.\n-   */\n-  default String getColoredName(@Nullable CommandSender viewer) {\n-    return getColor() + getDisplayName(viewer);\n-  }\n-\n-  /**\n-   * Get the current name of the {@link Party} as a {@link Component} with colors.\n-   *\n-   * @return The current {@link Party} name.\n-   */\n-  @Override\n-  Component getName();\n-\n-  @Override\n-  default Component getName(NameStyle style) {\n-    return getName();\n-  }\n-\n   /**\n    * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n    *\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 2a82f92d..587d35c8 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -100,39 +81,6 @@ public interface Party extends Audience, Named {\n    */\n   Color getFullColor();\n \n-  /**\n-   * Get the current name of the {@link Party}, with its {@link #getColor()} formatting.\n-   *\n-   * @return The colored {@link Party} name.\n-   */\n-  default String getColoredName() {\n-    return getColor() + getDisplayName();\n-  }\n-\n-  /**\n-   * Get the current name of the {@link Party}, with colors and from the perspective of a {@link\n-   * CommandSender}.\n-   *\n-   * @param viewer The viewer.\n-   * @return The colored {@link Party} name.\n-   */\n-  default String getColoredName(@Nullable CommandSender viewer) {\n-    return getColor() + getDisplayName(viewer);\n-  }\n-\n-  /**\n-   * Get the current name of the {@link Party} as a {@link Component} with colors.\n-   *\n-   * @return The current {@link Party} name.\n-   */\n-  @Override\n-  Component getName();\n-\n-  @Override\n-  default Component getName(NameStyle style) {\n-    return getName();\n-  }\n-\n   /**\n    * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n    *\n", "next_change": {"commit": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex 587d35c8..ac4adeda 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -8,128 +8,128 @@ import org.bukkit.ChatColor;\n import org.bukkit.Color;\n import tc.oc.pgm.api.filter.query.PartyQuery;\n import tc.oc.pgm.api.match.Match;\n-import tc.oc.pgm.api.match.MatchModule;\n import tc.oc.pgm.api.player.MatchPlayer;\n-import tc.oc.pgm.filters.query.Query;\n-import tc.oc.pgm.match.ObservingParty;\n import tc.oc.pgm.util.chat.Audience;\n import tc.oc.pgm.util.named.Named;\n \n /**\n- * A group of related {@link MatchPlayer}s in a {@link Match}.\n+ * A group of {@link MatchPlayer}s.\n  *\n- * @see Competitor for participating {@link MatchPlayer}s.\n- * @see ObservingParty for observing {@link MatchPlayer}s.\n+ * @see Competitor\n  */\n public interface Party extends Audience, Named {\n-\n   /**\n-   * Get the {@link Match} that the {@link Party} is in.\n+   * Gets the match.\n    *\n-   * @return The {@link Match}.\n+   * @return a match\n    */\n   Match getMatch();\n \n   /**\n-   * Get all {@link MatchPlayer}s that are in the {@link Party}.\n+   * Gets the collection of party members.\n    *\n-   * @return All the {@link MatchPlayer}s in the {@link Party}.\n+   * @return a collection of players\n    */\n-  Collection<MatchPlayer> getPlayers();\n+  Collection<MatchPlayer> getMembers();\n \n   /**\n-   * Get a {@link MatchPlayer} member, based on its unique identifier.\n+   * Gets the {@link MatchPlayer} of a member.\n    *\n-   * @param playerId The unique identifier of the {@link MatchPlayer}.\n-   * @return The {@link MatchPlayer} or {@code null} if not in the {@link Party}.\n+   * @param playerId a player id\n+   * @return a player or {@code null} if not a member\n    */\n   @Nullable\n-  MatchPlayer getPlayer(UUID playerId);\n+  MatchPlayer getMember(final UUID playerId);\n+\n+  /**\n+   * Adds a {@link MatchPlayer} to the party.\n+   *\n+   * @param player a player\n+   */\n+  void addMember(final MatchPlayer player);\n \n   /**\n-   * Get a filter {@link Query} that only matches this {@link Party}.\n+   * Removes a {@link MatchPlayer} from the party.\n    *\n-   * @return The exclusive {@link Query}.\n+   * @param playerId a player id\n+   */\n+  void removeMember(final UUID playerId);\n+\n+  /**\n+   * Gets a query that matches the party.\n+   *\n+   * @return a party query\n    */\n   PartyQuery getQuery();\n \n   /**\n-   * Get the name of the {@link Party}, which cannot change during {@link Match} time.\n+   * Sets the party name.\n+   *\n+   * @param name a name\n+   */\n+  void setName(final String name);\n+\n+  /**\n+   * Gets the initial party name, which cannot change.\n    *\n-   * @return The constant name of the {@link Party}.\n+   * @return a name\n    */\n   String getDefaultName();\n \n   /**\n-   * Get whether {@link #getDisplayName()} is grammatically a plural word.\n+   * Checks if {@link #getName()} is grammatically plural.\n    *\n-   * @return Whether {@link #getDisplayName()} is plural.\n+   * @return if the party name is plural\n    */\n   boolean isNamePlural();\n \n   /**\n-   * Get the Minecraft {@link ChatColor} of the {@link Party}.\n+   * Gets the {@link ChatColor} of the party.\n    *\n-   * @return The {@link ChatColor}.\n+   * @return a chat color\n    */\n   ChatColor getColor();\n \n   /**\n-   * Get the RGB {@link Color} of the {@link Party}.\n+   * Gets the {@link Color} of the party.\n    *\n-   * @return The {@link Color}.\n+   * @return a color\n    */\n   Color getFullColor();\n \n   /**\n-   * Get the prefix in chat for all {@link MatchPlayer}s in the {@link Party}.\n+   * Gets a chat prefix for the party.\n    *\n-   * @return The chat prefix.\n+   * @return a component\n    */\n   Component getChatPrefix();\n \n   /**\n-   * Get whether {@link Match} should automatically add or remove {@link MatchPlayer}s from the\n-   * {@link Party}.\n-   *\n-   * <p>Otherwise, the {@link MatchModule} that registers the {@link Party} must handle that logic.\n+   * Checks if players should automatically be added to the party.\n    *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @return Whether the {@link Party} is automatically managed.\n+   * @return if the party is default\n    */\n   boolean isAutomatic();\n \n   /**\n-   * Get whether this {@link Party} is a {@link Competitor}.\n+   * Tests if the party is a {@link Competitor}.\n    *\n-   * @return Whether the {@link Party} is participating.\n+   * @return if the party is a competitor\n+   * @deprecated {@code x instanceof Competitor}\n    */\n+  @Deprecated\n   default boolean isParticipating() {\n     return this instanceof Competitor;\n   }\n \n   /**\n-   * Get whether this {@link Party} is not a {@link Competitor}.\n+   * Tests if the party is not a {@link Competitor}.\n    *\n-   * @return Whether the {@link Party} is observing.\n+   * @return if the party is not a competitor\n+   * @deprecated {@code !(x instanceof Competitor)}\n    */\n+  @Deprecated\n   default boolean isObserving() {\n-    return !isParticipating();\n+    return !this.isParticipating();\n   }\n-\n-  /**\n-   * Adds a {@link MatchPlayer} to the {@link Party}'s internal state.\n-   *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @param player The {@link MatchPlayer} to add.\n-   */\n-  void internalAddPlayer(MatchPlayer player);\n-\n-  /**\n-   * Removes a {@link MatchPlayer} from the {@link Party}'s internal state.\n-   *\n-   * @see Match#setParty(MatchPlayer, Party)\n-   * @param player The {@link MatchPlayer} to remove.\n-   */\n-  void internalRemovePlayer(MatchPlayer player);\n }\n", "next_change": {"commit": "e9e5d425f17b810e50e8b2830d7ad263d2942342", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/party/Party.java b/core/src/main/java/tc/oc/pgm/api/party/Party.java\nindex ac4adeda..1d6cb734 100644\n--- a/core/src/main/java/tc/oc/pgm/api/party/Party.java\n+++ b/core/src/main/java/tc/oc/pgm/api/party/Party.java\n", "chunk": "@@ -132,4 +135,20 @@ public interface Party extends Audience, Named {\n   default boolean isObserving() {\n     return !this.isParticipating();\n   }\n+\n+  @Override\n+  @Nullable\n+  default Match getFilterableParent() {\n+    return this.getMatch();\n+  }\n+\n+  @Override\n+  default Collection<? extends Filterable<? extends PlayerQuery>> getFilterableChildren() {\n+    return this.getPlayers();\n+  }\n+\n+  @Override\n+  default Party getParty() {\n+    return this;\n+  }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "committedDate": "2020-12-11 04:39:26 -0800", "message": "Improve performance of Party implementations"}, {"oid": "18c0b112ba4ccde5e3be027aa4207347bcf96fd3", "committedDate": "2020-12-11 10:18:20 -0800", "message": "Preserve Party#getPlayers and related methods"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "e9e5d425f17b810e50e8b2830d7ad263d2942342", "committedDate": "2021-10-02 09:38:48 -0700", "message": "Dynamic filters (#914)"}, {"oid": "42c827946112a9f37312f36e92671aa3a54c8e50", "committedDate": "2022-07-28 22:25:23 +0800", "message": "Cleanup filters & implement players, rank & countdown filters (#1005)"}, {"oid": "99127f9a441f4c93ed8891ea112629c0e4a34acb", "committedDate": "2022-10-07 16:42:10 -0400", "message": "Implement dye color option for teams (#1066)"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDE1Nw==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434254157", "body": "Why change this and `Contributor`?", "bodyText": "Why change this and Contributor?", "bodyHTML": "<p dir=\"auto\">Why change this and <code>Contributor</code>?</p>", "author": "Electroid", "createdAt": "2020-06-03T01:03:21Z", "path": "core/src/main/java/tc/oc/pgm/api/player/Username.java", "diffHunk": "@@ -20,7 +20,7 @@\n    * @return The username.\n    */\n   @Nullable\n-  String getName();\n+  String getUsername();", "originalCommit": "383d385a991d0f87375c0284415c31fe13d9a645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5ODY0Mg==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434398642", "bodyText": "Edit: to answer your original question. It was changed to getUsername() to avoid overriding the Named#getName, so we could support strings rather than components (see below for why).\nIn my latest commit I resolved the issue related to Contributor. Though I left Username alone and would like some guidance on it.\nFor Contributor I made use of the getName() method and included a toLegacy() that covers a few places that using a component would prove challenging (e.g. /maps -a flag to match author names), however I was unsure if this was the correct way to go for Username. As there are a few places in the code where it\u2019s acceptable for the username to be null, and currently the Username#getName() will always return a component. So perhaps it makes sense to keep Username#getUsername for when it\u2019s necessary to check if the name is null or not.\nLet me know how you\u2019d like this to be handled. Thanks!", "author": "applenick", "createdAt": "2020-06-03T08:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/player/Username.java b/core/src/main/java/tc/oc/pgm/api/player/Username.java\nindex 80637fc2..2317640d 100644\n--- a/core/src/main/java/tc/oc/pgm/api/player/Username.java\n+++ b/core/src/main/java/tc/oc/pgm/api/player/Username.java\n", "chunk": "@@ -20,7 +20,7 @@ public interface Username extends Named {\n    * @return The username.\n    */\n   @Nullable\n-  String getUsername();\n+  String getName();\n \n   /**\n    * Change the username of the player.\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/player/Username.java b/core/src/main/java/tc/oc/pgm/api/player/Username.java\nindex 2317640d..80637fc2 100644\n--- a/core/src/main/java/tc/oc/pgm/api/player/Username.java\n+++ b/core/src/main/java/tc/oc/pgm/api/player/Username.java\n", "chunk": "@@ -20,7 +20,7 @@ public interface Username extends Named {\n    * @return The username.\n    */\n   @Nullable\n-  String getName();\n+  String getUsername();\n \n   /**\n    * Change the username of the player.\n", "next_change": {"commit": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/player/Username.java b/core/src/main/java/tc/oc/pgm/api/player/Username.java\nindex 80637fc2..3ba88282 100644\n--- a/core/src/main/java/tc/oc/pgm/api/player/Username.java\n+++ b/core/src/main/java/tc/oc/pgm/api/player/Username.java\n", "chunk": "@@ -19,8 +19,9 @@ public interface Username extends Named {\n    *\n    * @return The username.\n    */\n+  @Override\n   @Nullable\n-  String getUsername();\n+  String getNameLegacy();\n \n   /**\n    * Change the username of the player.\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/api/player/Username.java b/core/src/main/java/tc/oc/pgm/api/player/Username.java\nindex 80637fc2..3ba88282 100644\n--- a/core/src/main/java/tc/oc/pgm/api/player/Username.java\n+++ b/core/src/main/java/tc/oc/pgm/api/player/Username.java\n", "chunk": "@@ -19,8 +19,9 @@ public interface Username extends Named {\n    *\n    * @return The username.\n    */\n+  @Override\n   @Nullable\n-  String getUsername();\n+  String getNameLegacy();\n \n   /**\n    * Change the username of the player.\n", "next_change": null}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MDA3OQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434850079", "body": "This method doesn't belong here.", "bodyText": "This method doesn't belong here.", "bodyHTML": "<p dir=\"auto\">This method doesn't belong here.</p>", "author": "Electroid", "createdAt": "2020-06-03T20:59:12Z", "path": "util/src/main/java/tc/oc/pgm/util/text/TextParser.java", "diffHunk": "@@ -476,4 +477,8 @@ public static Connection parseSqlConnection(String text) throws TextException {\n       throw unknown(e); // TODO: wrap common database errors with more friendly messages\n     }\n   }\n+\n+  public static TextColor parseTextColor(Enum<?> color) {", "originalCommit": "7519c73e0b61bacf442f4014421b24356a1ecc76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bab0442f49afd509cba1f9b15d7a883a69d8348d", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextParser.java b/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\nindex cf7083c9..8aa99f30 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\n", "chunk": "@@ -477,8 +476,4 @@ public final class TextParser {\n       throw unknown(e); // TODO: wrap common database errors with more friendly messages\n     }\n   }\n-\n-  public static TextColor parseTextColor(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n-  }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextParser.java b/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\nindex cf7083c9..8aa99f30 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\n", "chunk": "@@ -477,8 +476,4 @@ public final class TextParser {\n       throw unknown(e); // TODO: wrap common database errors with more friendly messages\n     }\n   }\n-\n-  public static TextColor parseTextColor(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n-  }\n }\n", "next_change": {"commit": "19f0f30bca255f4bb90e23a4be3b3c4a11d29789", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextParser.java b/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\nindex 8aa99f30..0d7fed50 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextParser.java\n", "chunk": "@@ -471,8 +474,9 @@ public final class TextParser {\n \n     // Driver uris will always start with \"jdbc:\"\n     try {\n-      return DriverManager.getConnection(\"jdbc:\" + uri.toString());\n-    } catch (SQLException e) {\n+      return DriverManager.getConnection(\n+          URLDecoder.decode(\"jdbc:\" + uri.toString(), StandardCharsets.UTF_8.name()));\n+    } catch (UnsupportedEncodingException | SQLException e) {\n       throw unknown(e); // TODO: wrap common database errors with more friendly messages\n     }\n   }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "19f0f30bca255f4bb90e23a4be3b3c4a11d29789", "committedDate": "2020-08-31 10:29:40 -0700", "message": "Fix database-uri not working with spaces"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "c595a2be596df15d04956d546be2ad504454691f", "committedDate": "2020-12-20 00:55:57 -0800", "message": "Tweak various Components and fix some sidebar issues"}, {"oid": "c7409fcdd060c367848c4d20160633f259f86374", "committedDate": "2021-05-01 09:02:45 -0700", "message": "Fix JSON check in parseComponent"}, {"oid": "959d473d340af725f70221488eb08dae1fe14a20", "committedDate": "2021-05-01 10:24:43 -0700", "message": "Better line numbers for TextException"}, {"oid": "34882554ab308f083dcb587e102194b9ca9f23c1", "committedDate": "2022-01-08 10:28:38 -0800", "message": "Properly parse legacy formatting in XMLUtils (#947)"}, {"oid": "59c9e400b2a5e784d00ed7092f83f63e9b31d0ce", "committedDate": "2022-01-15 08:05:18 -0800", "message": "Properly handle JSON in TextParser (#955)"}, {"oid": "078588fc85f74cb1e3eb6ff6740424de0492a41b", "committedDate": "2022-09-25 10:17:21 -0400", "message": "Introduce interactive shops (#1038)"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "db10316d1a341018caf597f4c0bb15ea23c6d545", "committedDate": "2022-11-04 13:22:52 -0700", "message": "Migrate to cloud framework (#1080)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MTQ2MA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434851460", "body": "If this is the only reason we keep `getDisplayName`, then just remove it from `toString`.", "bodyText": "If this is the only reason we keep getDisplayName, then just remove it from toString.", "bodyHTML": "<p dir=\"auto\">If this is the only reason we keep <code>getDisplayName</code>, then just remove it from <code>toString</code>.</p>", "author": "Electroid", "createdAt": "2020-06-03T21:00:53Z", "path": "core/src/main/java/tc/oc/pgm/wool/MonumentWool.java", "diffHunk": "@@ -50,7 +50,7 @@ public MonumentWool(MonumentWoolFactory definition, Match match) {\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getName());\n+    sb.append(\",owner=\").append(this.owner.getDisplayName());", "originalCommit": "7519c73e0b61bacf442f4014421b24356a1ecc76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex cf8ea28f..7297ed93 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -50,7 +50,7 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getDisplayName());\n+    sb.append(\",owner=\").append(this.owner.getName());\n     sb.append(\",definition=\").append(this.definition);\n     sb.append('}');\n     return sb.toString();\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex 7297ed93..461d9291 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -50,7 +50,7 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getName());\n+    sb.append(\",owner=\").append(this.owner.getDisplayName());\n     sb.append(\",definition=\").append(this.definition);\n     sb.append('}');\n     return sb.toString();\n", "next_change": {"commit": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex 461d9291..ea5113c9 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -50,7 +50,7 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getDisplayName());\n+    sb.append(\",owner=\").append(this.owner.getNameLegacy());\n     sb.append(\",definition=\").append(this.definition);\n     sb.append('}');\n     return sb.toString();\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex cf8ea28f..ea5113c9 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -50,7 +50,7 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"MonumentWool{\");\n     sb.append(\"id=\").append(this.getId());\n-    sb.append(\",owner=\").append(this.owner.getDisplayName());\n+    sb.append(\",owner=\").append(this.owner.getNameLegacy());\n     sb.append(\",definition=\").append(this.definition);\n     sb.append('}');\n     return sb.toString();\n", "next_change": {"commit": "a05a026384d8c6001a88e06a3789a81f75885a11", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex ea5113c9..839a159b 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -59,7 +59,11 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n   // Remove @Nullable\n   @Override\n   public Team getOwner() {\n-    return super.getOwner();\n+    Team owner = super.getOwner();\n+    if (owner == null) {\n+      throw new IllegalStateException(\"wool \" + getId() + \" has no owner\");\n+    }\n+    return owner;\n   }\n \n   @Override\n", "next_change": {"commit": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\nindex 839a159b..156da14d 100644\n--- a/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n+++ b/core/src/main/java/tc/oc/pgm/wool/MonumentWool.java\n", "chunk": "@@ -68,7 +69,7 @@ public class MonumentWool extends TouchableGoal<MonumentWoolFactory>\n \n   @Override\n   public Component getTouchMessage(ParticipantState toucher, boolean self) {\n-    return TranslatableComponent.of(\n+    return translatable(\n         self ? \"wool.touch.owned.you\" : \"wool.touch.owned.player\",\n         toucher.getName(NameStyle.COLOR),\n         getComponentName(),\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "f75db472acdfb88e25d7c9c1cef594128f9ac6ec", "committedDate": "2020-12-10 10:22:23 -0800", "message": "Move helper events to util"}, {"oid": "a05a026384d8c6001a88e06a3789a81f75885a11", "committedDate": "2020-12-18 04:43:37 -0800", "message": "Allow flag goals in FFA"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "5b327bc53146243d89fc4997fa875ab1d903477d", "committedDate": "2021-03-10 16:01:18 -0800", "message": "Avoid faulty initialization of wool proximity"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "b6c7cd0a5f13d12fbb4eb1a3edf3c648e8111673", "committedDate": "2022-10-09 23:40:05 -0400", "message": "Refactor SidebarMatchModule to use Component"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MjQ4MA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434852480", "body": "If this is the only reason we have `getDisplayName`, just remove the logging statements. TBH, we don't need them here.", "bodyText": "If this is the only reason we have getDisplayName, just remove the logging statements. TBH, we don't need them here.", "bodyHTML": "<p dir=\"auto\">If this is the only reason we have <code>getDisplayName</code>, just remove the logging statements. TBH, we don't need them here.</p>", "author": "Electroid", "createdAt": "2020-06-03T21:02:11Z", "path": "core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java", "diffHunk": "@@ -538,7 +533,7 @@ public void balanceTeams() {\n           .getLogger()\n           .info(\n               \"Bumping a player from stacked team \"\n-                  + team.getColoredName()\n+                  + team.getDisplayName()", "originalCommit": "7519c73e0b61bacf442f4014421b24356a1ecc76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex 53739e83..1f805584 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -533,7 +535,7 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n           .getLogger()\n           .info(\n               \"Bumping a player from stacked team \"\n-                  + team.getDisplayName()\n+                  + team.getColoredName()\n                   + \" size=\"\n                   + team.getSize(false)\n                   + \" fullness=\"\n", "next_change": {"commit": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex 1f805584..53739e83 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -535,7 +533,7 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n           .getLogger()\n           .info(\n               \"Bumping a player from stacked team \"\n-                  + team.getColoredName()\n+                  + team.getDisplayName()\n                   + \" size=\"\n                   + team.getSize(false)\n                   + \" fullness=\"\n", "next_change": {"commit": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex 53739e83..cbf579da 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -529,15 +522,6 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n       Team team = this.getFullestTeam();\n       if (team == null) break;\n       if (!team.isStacked()) break;\n-      match\n-          .getLogger()\n-          .info(\n-              \"Bumping a player from stacked team \"\n-                  + team.getDisplayName()\n-                  + \" size=\"\n-                  + team.getSize(false)\n-                  + \" fullness=\"\n-                  + team.getFullness(false));\n       if (!this.kickPlayerOffTeam(team, true)) break;\n     }\n   }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex 53739e83..cbf579da 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -529,15 +522,6 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n       Team team = this.getFullestTeam();\n       if (team == null) break;\n       if (!team.isStacked()) break;\n-      match\n-          .getLogger()\n-          .info(\n-              \"Bumping a player from stacked team \"\n-                  + team.getDisplayName()\n-                  + \" size=\"\n-                  + team.getSize(false)\n-                  + \" fullness=\"\n-                  + team.getFullness(false));\n       if (!this.kickPlayerOffTeam(team, true)) break;\n     }\n   }\n", "next_change": {"commit": "96bed42423d7802e74c0b608e8ab1f496885058d", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex cbf579da..f45ff135 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -527,7 +559,7 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n   }\n \n   public boolean kickPlayerOffTeam(Team kickFrom, boolean forBalance) {\n-    checkArgument(kickFrom.getMatch() == match);\n+    assertTrue(kickFrom.getMatch() == match);\n \n     // Find all players who can be bumped\n     List<MatchPlayer> kickable = new ArrayList<>();\n", "next_change": {"commit": "749c9c4e210db47a320a53e3ec64bcf81a21d200", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\nindex f45ff135..d35d62d3 100644\n--- a/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n+++ b/core/src/main/java/tc/oc/pgm/teams/TeamMatchModule.java\n", "chunk": "@@ -564,7 +495,7 @@ public class TeamMatchModule implements MatchModule, Listener, JoinHandler {\n     // Find all players who can be bumped\n     List<MatchPlayer> kickable = new ArrayList<>();\n     for (MatchPlayer player : kickFrom.getPlayers()) {\n-      if (!jmm.canPriorityKick(player) || (forBalance && isAutoJoin(player))) {\n+      if (jmm.canBePriorityKicked(player) || (forBalance && jmm.isAutoJoin(player))) {\n         // Premium players can be auto-balanced if they auto-joined\n         kickable.add(player);\n       }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "434b9ae77325fe93a201dd4c087fb64e80e3a1df", "committedDate": "2020-12-11 04:39:26 -0800", "message": "Improve performance of Party implementations"}, {"oid": "18c0b112ba4ccde5e3be027aa4207347bcf96fd3", "committedDate": "2020-12-11 10:18:20 -0800", "message": "Preserve Party#getPlayers and related methods"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "5cd0197c816a6638615a68c37a70d4ad9fd6d9a4", "committedDate": "2021-02-14 09:06:41 -0800", "message": "Reintroduce the team switch kit"}, {"oid": "2774c753fc56138d505476454e258b9991fb69cd", "committedDate": "2022-06-09 11:56:42 -0700", "message": "Update various dependencies (#1008)"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "db10316d1a341018caf597f4c0bb15ea23c6d545", "committedDate": "2022-11-04 13:22:52 -0700", "message": "Migrate to cloud framework (#1080)"}, {"oid": "e895379b591d17209ec992907f2e205b08f14b43", "committedDate": "2023-02-12 10:26:00 -0800", "message": "Fix vanish state and tablist (#1126)"}, {"oid": "749c9c4e210db47a320a53e3ec64bcf81a21d200", "committedDate": "2023-02-20 13:53:56 -0800", "message": "Introduce squads (#1136)"}, {"oid": "5dbb8d4a4e65c163200cd3970e52c4f3afb77403", "committedDate": "2023-03-12 09:57:23 -0700", "message": "Fix blitz allowing join & wrongly dropping items (#1152)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MzY0OA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r434853648", "body": "I have an idea to solve the `getDisplayName` shenanigans. Add `getId(): String` to `Named`", "bodyText": "I have an idea to solve the getDisplayName shenanigans. Add getId(): String to Named", "bodyHTML": "<p dir=\"auto\">I have an idea to solve the <code>getDisplayName</code> shenanigans. Add <code>getId(): String</code> to <code>Named</code></p>", "author": "Electroid", "createdAt": "2020-06-03T21:03:34Z", "path": "core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java", "diffHunk": "@@ -33,6 +33,6 @@ public int compare(Team a, Team b) {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getName().compareTo(b.getName());\n+    return a.getDisplayName().compareTo(b.getDisplayName());", "originalCommit": "7519c73e0b61bacf442f4014421b24356a1ecc76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\nindex f574e389..6344242b 100644\n--- a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n+++ b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n", "chunk": "@@ -33,6 +33,6 @@ public class TeamOrder implements Comparator<Team> {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getDisplayName().compareTo(b.getDisplayName());\n+    return a.getName().compareTo(b.getName());\n   }\n }\n", "next_change": {"commit": "7022d4e113b14577f99796a8faa47a01042fd307", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\nindex 6344242b..f574e389 100644\n--- a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n+++ b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n", "chunk": "@@ -33,6 +33,6 @@ public class TeamOrder implements Comparator<Team> {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getName().compareTo(b.getName());\n+    return a.getDisplayName().compareTo(b.getDisplayName());\n   }\n }\n", "next_change": {"commit": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\nindex f574e389..e1fefc84 100644\n--- a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n+++ b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n", "chunk": "@@ -33,6 +33,6 @@ public class TeamOrder implements Comparator<Team> {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getDisplayName().compareTo(b.getDisplayName());\n+    return a.getNameLegacy().compareTo(b.getNameLegacy());\n   }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\nindex f574e389..e1fefc84 100644\n--- a/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n+++ b/core/src/main/java/tc/oc/pgm/tablist/TeamOrder.java\n", "chunk": "@@ -33,6 +33,6 @@ public class TeamOrder implements Comparator<Team> {\n     if (team == b) return 1;\n \n     // Rest of the teams are ordered by name\n-    return a.getDisplayName().compareTo(b.getDisplayName());\n+    return a.getNameLegacy().compareTo(b.getNameLegacy());\n   }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDAyNA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r435970024", "body": "Use `SpigotTextAdapter` to convert to a `BaseComponent`. This should fix the empty translations.", "bodyText": "Use SpigotTextAdapter to convert to a BaseComponent. This should fix the empty translations.", "bodyHTML": "<p dir=\"auto\">Use <code>SpigotTextAdapter</code> to convert to a <code>BaseComponent</code>. This should fix the empty translations.</p>", "author": "Electroid", "createdAt": "2020-06-05T14:44:39Z", "path": "util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java", "diffHunk": "@@ -120,6 +121,22 @@ public static Component horizontalLineHeading(\n \n   public static Component horizontalLineHeading(\n       CommandSender sender, Component text, TextColor lineColor) {\n-    return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n+    return horizontalLineHeading(sender, text, lineColor, LegacyFormatUtils.MAX_CHAT_WIDTH);\n+  }\n+\n+  /*\n+   * Convert ChatColor -> TextColor\n+   */\n+  public static TextColor convert(Enum<?> color) {\n+    return TextColor.valueOf(color.name());\n+  }\n+\n+  /**\n+   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n+   * upgrade/remove this)\n+   */\n+  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n+    return new net.md_5.bungee.api.chat.TextComponent(\n+        TextTranslations.translateLegacy(component, viewer));", "originalCommit": "49c36779d11b7124955fb1edee0ef79f174a4493", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..dd3b5ce6 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -121,22 +120,6 @@ public final class TextFormatter {\n \n   public static Component horizontalLineHeading(\n       CommandSender sender, Component text, TextColor lineColor) {\n-    return horizontalLineHeading(sender, text, lineColor, LegacyFormatUtils.MAX_CHAT_WIDTH);\n-  }\n-\n-  /*\n-   * Convert ChatColor -> TextColor\n-   */\n-  public static TextColor convert(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n-  }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n+    return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n   }\n }\n", "next_change": {"commit": "bab0442f49afd509cba1f9b15d7a883a69d8348d", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex dd3b5ce6..f4451dd7 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -122,4 +122,11 @@ public final class TextFormatter {\n       CommandSender sender, Component text, TextColor lineColor) {\n     return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n   }\n+\n+  /*\n+   * Convert ChatColor -> TextColor\n+   */\n+  public static TextColor convert(Enum<?> color) {\n+    return TextColor.valueOf(color.name());\n+  }\n }\n", "next_change": {"commit": "f8f3c9782b6310d4966aefe798f51afaba87403a", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex f4451dd7..b66c1d60 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -129,4 +130,13 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n+\n+  /**\n+   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n+   * upgrade/remove this)\n+   */\n+  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n+    return new net.md_5.bungee.api.chat.TextComponent(\n+        TextTranslations.translateLegacy(component, viewer));\n+  }\n }\n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..edc882dd 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -130,13 +129,4 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n-  }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..edc882dd 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -130,13 +129,4 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n-  }\n }\n", "next_change": {"commit": "6fe5878d53a56150dea3885b16b029413a6363dc", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex edc882dd..2de07012 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -127,6 +127,12 @@ public final class TextFormatter {\n    * Convert ChatColor -> TextColor\n    */\n   public static TextColor convert(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n+    TextColor textColor = TextColor.WHITE;\n+    try {\n+      textColor = TextColor.valueOf(color.name());\n+    } catch (IllegalArgumentException e) {\n+      // If not found use default\n+    }\n+    return textColor;\n   }\n }\n", "next_change": {"commit": "f24f40f0b3b3d21bc6d5375fe340d4121b44e87b", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex 2de07012..9801a33c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -135,4 +147,35 @@ public final class TextFormatter {\n     }\n     return textColor;\n   }\n+\n+  public static TextFormat convertFormat(Enum<?> color) {\n+    TextFormat textColor = TextColor.WHITE;\n+    try {\n+      textColor = TextColor.valueOf(color.name());\n+    } catch (IllegalArgumentException e) {\n+      // If not found use default\n+      if ((color instanceof ChatColor) && convertDecoration((ChatColor) color) != null) {\n+        textColor = convertDecoration((ChatColor) color);\n+      }\n+    }\n+    return textColor;\n+  }\n+\n+  @Nullable\n+  public static TextDecoration convertDecoration(ChatColor color) {\n+    switch (color) {\n+      case BOLD:\n+        return TextDecoration.BOLD;\n+      case ITALIC:\n+        return TextDecoration.ITALIC;\n+      case MAGIC:\n+        return TextDecoration.OBFUSCATED;\n+      case STRIKETHROUGH:\n+        return TextDecoration.STRIKETHROUGH;\n+      case UNDERLINE:\n+        return TextDecoration.UNDERLINED;\n+      default:\n+        return null;\n+    }\n+  }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "6fe5878d53a56150dea3885b16b029413a6363dc", "committedDate": "2020-06-16 08:02:04 -0700", "message": "Fix a few text-related bugs"}, {"oid": "9221b801c1791dedf67efad3dbe6091b7823b70c", "committedDate": "2020-08-17 08:33:44 -0700", "message": "Add legacy support for warnings"}, {"oid": "f24f40f0b3b3d21bc6d5375fe340d4121b44e87b", "committedDate": "2020-08-19 08:33:08 -0700", "message": "More customizable flair formatting"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "8c5c4df696fa7e1e8618b569abcdd96fa46a4feb", "committedDate": "2020-12-19 17:19:06 -0800", "message": "Add initial support for per-player sidebars"}, {"oid": "57bd23136e4e3f9fbf5d3fab416bf504e61f5828", "committedDate": "2021-07-28 18:05:05 -0700", "message": "Fix TextFormatter with singletons"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "749c9c4e210db47a320a53e3ec64bcf81a21d200", "committedDate": "2023-02-20 13:53:56 -0800", "message": "Introduce squads (#1136)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MDk4MA==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r435970980", "body": "Also, I think this can be in `TextTranslations`.", "bodyText": "Also, I think this can be in TextTranslations.", "bodyHTML": "<p dir=\"auto\">Also, I think this can be in <code>TextTranslations</code>.</p>", "author": "Electroid", "createdAt": "2020-06-05T14:46:06Z", "path": "util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java", "diffHunk": "@@ -120,6 +121,22 @@ public static Component horizontalLineHeading(\n \n   public static Component horizontalLineHeading(\n       CommandSender sender, Component text, TextColor lineColor) {\n-    return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n+    return horizontalLineHeading(sender, text, lineColor, LegacyFormatUtils.MAX_CHAT_WIDTH);\n+  }\n+\n+  /*\n+   * Convert ChatColor -> TextColor\n+   */\n+  public static TextColor convert(Enum<?> color) {\n+    return TextColor.valueOf(color.name());\n+  }\n+\n+  /**\n+   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n+   * upgrade/remove this)\n+   */\n+  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {", "originalCommit": "49c36779d11b7124955fb1edee0ef79f174a4493", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..dd3b5ce6 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -121,22 +120,6 @@ public final class TextFormatter {\n \n   public static Component horizontalLineHeading(\n       CommandSender sender, Component text, TextColor lineColor) {\n-    return horizontalLineHeading(sender, text, lineColor, LegacyFormatUtils.MAX_CHAT_WIDTH);\n-  }\n-\n-  /*\n-   * Convert ChatColor -> TextColor\n-   */\n-  public static TextColor convert(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n-  }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n+    return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n   }\n }\n", "next_change": {"commit": "bab0442f49afd509cba1f9b15d7a883a69d8348d", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex dd3b5ce6..f4451dd7 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -122,4 +122,11 @@ public final class TextFormatter {\n       CommandSender sender, Component text, TextColor lineColor) {\n     return horizontalLineHeading(sender, text, lineColor, ComponentUtils.MAX_CHAT_WIDTH);\n   }\n+\n+  /*\n+   * Convert ChatColor -> TextColor\n+   */\n+  public static TextColor convert(Enum<?> color) {\n+    return TextColor.valueOf(color.name());\n+  }\n }\n", "next_change": {"commit": "f8f3c9782b6310d4966aefe798f51afaba87403a", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex f4451dd7..b66c1d60 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -129,4 +130,13 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n+\n+  /**\n+   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n+   * upgrade/remove this)\n+   */\n+  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n+    return new net.md_5.bungee.api.chat.TextComponent(\n+        TextTranslations.translateLegacy(component, viewer));\n+  }\n }\n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..edc882dd 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -130,13 +129,4 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n-  }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex b66c1d60..edc882dd 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -130,13 +129,4 @@ public final class TextFormatter {\n   public static TextColor convert(Enum<?> color) {\n     return TextColor.valueOf(color.name());\n   }\n-\n-  /**\n-   * Support kept for custom tab-list/nms usage (TODO: if tab-list system ever changes,\n-   * upgrade/remove this)\n-   */\n-  public static BaseComponent renderBaseComponent(CommandSender viewer, Component component) {\n-    return new net.md_5.bungee.api.chat.TextComponent(\n-        TextTranslations.translateLegacy(component, viewer));\n-  }\n }\n", "next_change": {"commit": "6fe5878d53a56150dea3885b16b029413a6363dc", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex edc882dd..2de07012 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -127,6 +127,12 @@ public final class TextFormatter {\n    * Convert ChatColor -> TextColor\n    */\n   public static TextColor convert(Enum<?> color) {\n-    return TextColor.valueOf(color.name());\n+    TextColor textColor = TextColor.WHITE;\n+    try {\n+      textColor = TextColor.valueOf(color.name());\n+    } catch (IllegalArgumentException e) {\n+      // If not found use default\n+    }\n+    return textColor;\n   }\n }\n", "next_change": {"commit": "f24f40f0b3b3d21bc6d5375fe340d4121b44e87b", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\nindex 2de07012..9801a33c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n+++ b/util/src/main/java/tc/oc/pgm/util/text/TextFormatter.java\n", "chunk": "@@ -135,4 +147,35 @@ public final class TextFormatter {\n     }\n     return textColor;\n   }\n+\n+  public static TextFormat convertFormat(Enum<?> color) {\n+    TextFormat textColor = TextColor.WHITE;\n+    try {\n+      textColor = TextColor.valueOf(color.name());\n+    } catch (IllegalArgumentException e) {\n+      // If not found use default\n+      if ((color instanceof ChatColor) && convertDecoration((ChatColor) color) != null) {\n+        textColor = convertDecoration((ChatColor) color);\n+      }\n+    }\n+    return textColor;\n+  }\n+\n+  @Nullable\n+  public static TextDecoration convertDecoration(ChatColor color) {\n+    switch (color) {\n+      case BOLD:\n+        return TextDecoration.BOLD;\n+      case ITALIC:\n+        return TextDecoration.ITALIC;\n+      case MAGIC:\n+        return TextDecoration.OBFUSCATED;\n+      case STRIKETHROUGH:\n+        return TextDecoration.STRIKETHROUGH;\n+      case UNDERLINE:\n+        return TextDecoration.UNDERLINED;\n+      default:\n+        return null;\n+    }\n+  }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "6fe5878d53a56150dea3885b16b029413a6363dc", "committedDate": "2020-06-16 08:02:04 -0700", "message": "Fix a few text-related bugs"}, {"oid": "9221b801c1791dedf67efad3dbe6091b7823b70c", "committedDate": "2020-08-17 08:33:44 -0700", "message": "Add legacy support for warnings"}, {"oid": "f24f40f0b3b3d21bc6d5375fe340d4121b44e87b", "committedDate": "2020-08-19 08:33:08 -0700", "message": "More customizable flair formatting"}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}, {"oid": "8c5c4df696fa7e1e8618b569abcdd96fa46a4feb", "committedDate": "2020-12-19 17:19:06 -0800", "message": "Add initial support for per-player sidebars"}, {"oid": "57bd23136e4e3f9fbf5d3fab416bf504e61f5828", "committedDate": "2021-07-28 18:05:05 -0700", "message": "Fix TextFormatter with singletons"}, {"oid": "96bed42423d7802e74c0b608e8ab1f496885058d", "committedDate": "2022-10-09 15:02:59 -0400", "message": "Replace usage of javax, Preconditions, and ChatColor (#1072)"}, {"oid": "749c9c4e210db47a320a53e3ec64bcf81a21d200", "committedDate": "2023-02-20 13:53:56 -0800", "message": "Introduce squads (#1136)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3MjM3OQ==", "url": "https://github.com/PGMDev/PGM/pull/519#discussion_r435972379", "body": "These text boxes can probably be removed.", "bodyText": "These text boxes can probably be removed.", "bodyHTML": "<p dir=\"auto\">These text boxes can probably be removed.</p>", "author": "Electroid", "createdAt": "2020-06-05T14:48:23Z", "path": "util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java", "diffHunk": "@@ -41,47 +40,14 @@ default void playSound(Sound sound) {\n \n   @Override\n   default void showTitle(\n-      @Nullable net.kyori.text.Component title,\n-      @Nullable net.kyori.text.Component subTitle,\n-      int inTicks,\n-      int stayTicks,\n-      int outTicks) {\n+      Component title, Component subTitle, int inTicks, int stayTicks, int outTicks) {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n   ///////////////////////////////////////////////////////////////", "originalCommit": "49c36779d11b7124955fb1edee0ef79f174a4493", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..35bdc80c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -40,7 +41,11 @@ public interface MultiAudience extends Audience {\n \n   @Override\n   default void showTitle(\n-      Component title, Component subTitle, int inTicks, int stayTicks, int outTicks) {\n+      @Nullable net.kyori.text.Component title,\n+      @Nullable net.kyori.text.Component subTitle,\n+      int inTicks,\n+      int stayTicks,\n+      int outTicks) {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n", "next_change": {"commit": "f8f3c9782b6310d4966aefe798f51afaba87403a", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex 35bdc80c..ae3196f0 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -41,11 +40,7 @@ public interface MultiAudience extends Audience {\n \n   @Override\n   default void showTitle(\n-      @Nullable net.kyori.text.Component title,\n-      @Nullable net.kyori.text.Component subTitle,\n-      int inTicks,\n-      int stayTicks,\n-      int outTicks) {\n+      Component title, Component subTitle, int inTicks, int stayTicks, int outTicks) {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..659d056c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -44,10 +44,6 @@ public interface MultiAudience extends Audience {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n-  ///////////////////////////////////////////////////////////////\n-  // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n-  ///////////////////////////////////////////////////////////////\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": null}]}}, {"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex 35bdc80c..ae3196f0 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -53,35 +48,6 @@ public interface MultiAudience extends Audience {\n   // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n   ///////////////////////////////////////////////////////////////\n \n-  @Deprecated\n-  @Override\n-  default void sendMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendWarning(Component message, boolean audible) {\n-    for (Audience a : getAudiences()) a.sendWarning(message, audible);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendHotbarMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendHotbarMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void showTitle(\n-      @Nullable Component title,\n-      @Nullable Component subtitle,\n-      int inTicks,\n-      int stayTicks,\n-      int outTicks) {\n-    for (Audience a : getAudiences()) a.showTitle(title, subtitle, inTicks, stayTicks, outTicks);\n-  }\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..659d056c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -44,10 +44,6 @@ public interface MultiAudience extends Audience {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n-  ///////////////////////////////////////////////////////////////\n-  // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n-  ///////////////////////////////////////////////////////////////\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": null}]}}]}}, {"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..35bdc80c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -48,6 +53,35 @@ public interface MultiAudience extends Audience {\n   // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n   ///////////////////////////////////////////////////////////////\n \n+  @Deprecated\n+  @Override\n+  default void sendMessage(Component message) {\n+    for (Audience a : getAudiences()) a.sendMessage(message);\n+  }\n+\n+  @Deprecated\n+  @Override\n+  default void sendWarning(Component message, boolean audible) {\n+    for (Audience a : getAudiences()) a.sendWarning(message, audible);\n+  }\n+\n+  @Deprecated\n+  @Override\n+  default void sendHotbarMessage(Component message) {\n+    for (Audience a : getAudiences()) a.sendHotbarMessage(message);\n+  }\n+\n+  @Deprecated\n+  @Override\n+  default void showTitle(\n+      @Nullable Component title,\n+      @Nullable Component subtitle,\n+      int inTicks,\n+      int stayTicks,\n+      int outTicks) {\n+    for (Audience a : getAudiences()) a.showTitle(title, subtitle, inTicks, stayTicks, outTicks);\n+  }\n+\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": {"commit": "f8f3c9782b6310d4966aefe798f51afaba87403a", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex 35bdc80c..ae3196f0 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -53,35 +48,6 @@ public interface MultiAudience extends Audience {\n   // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n   ///////////////////////////////////////////////////////////////\n \n-  @Deprecated\n-  @Override\n-  default void sendMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendWarning(Component message, boolean audible) {\n-    for (Audience a : getAudiences()) a.sendWarning(message, audible);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendHotbarMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendHotbarMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void showTitle(\n-      @Nullable Component title,\n-      @Nullable Component subtitle,\n-      int inTicks,\n-      int stayTicks,\n-      int outTicks) {\n-    for (Audience a : getAudiences()) a.showTitle(title, subtitle, inTicks, stayTicks, outTicks);\n-  }\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": {"commit": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..659d056c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -44,10 +44,6 @@ public interface MultiAudience extends Audience {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n-  ///////////////////////////////////////////////////////////////\n-  // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n-  ///////////////////////////////////////////////////////////////\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "59235666b58a835bb3234d5ddc253550b092b563", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\nindex ae3196f0..659d056c 100644\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n", "chunk": "@@ -44,10 +44,6 @@ public interface MultiAudience extends Audience {\n     for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n   }\n \n-  ///////////////////////////////////////////////////////////////\n-  // METHODS BELOW ARE ALL DEPRECATED AND WILL BE REMOVED SOON //\n-  ///////////////////////////////////////////////////////////////\n-\n   @Deprecated\n   @Override\n   default void sendMessage(String message) {\n", "next_change": {"commit": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "changed_code": [{"header": "diff --git a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java b/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\ndeleted file mode 100644\nindex 659d056c..00000000\n--- a/util/src/main/java/tc/oc/pgm/util/chat/MultiAudience.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package tc.oc.pgm.util.chat;\n-\n-import net.kyori.text.Component;\n-\n-/** An {@link Audience} with multiple members. */\n-@FunctionalInterface\n-public interface MultiAudience extends Audience {\n-\n-  /**\n-   * Get all the {@link Audience} members.\n-   *\n-   * @return A collection of audiences.\n-   */\n-  Iterable<? extends Audience> getAudiences();\n-\n-  @Override\n-  default void sendMessage(Component message) {\n-    for (Audience a : getAudiences()) a.sendMessage(message);\n-  }\n-\n-  @Override\n-  default void sendWarning(Component message) {\n-    for (Audience a : getAudiences()) a.sendWarning(message);\n-  }\n-\n-  @Override\n-  default void showHotbar(Component message) {\n-    for (Audience a : getAudiences()) a.showHotbar(message);\n-  }\n-\n-  @Override\n-  default void showBossbar(Component message, float progress) {\n-    for (Audience a : getAudiences()) a.showBossbar(message, progress);\n-  }\n-\n-  @Override\n-  default void playSound(Sound sound) {\n-    for (Audience a : getAudiences()) a.playSound(sound);\n-  }\n-\n-  @Override\n-  default void showTitle(\n-      Component title, Component subTitle, int inTicks, int stayTicks, int outTicks) {\n-    for (Audience a : getAudiences()) a.showTitle(title, subTitle, inTicks, stayTicks, outTicks);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendMessage(String message) {\n-    for (Audience a : getAudiences()) a.sendMessage(message);\n-  }\n-\n-  @Deprecated\n-  @Override\n-  default void sendWarning(String message, boolean audible) {\n-    for (Audience a : getAudiences()) a.sendWarning(message, audible);\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "59235666b58a835bb3234d5ddc253550b092b563", "message": "Merge commit", "committedDate": null}, {"oid": "c42de5bbb018549167a277d67d7dd4a7ed091f63", "committedDate": "2020-12-18 05:50:41 -0800", "message": "The adventure begins!"}]}, {"oid": "62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "url": "https://github.com/PGMDev/PGM/commit/62e0b1cbc3ce35f27d4ee628d3f93efc9eb48ccc", "message": "Reintroduce support for map gamemode name\n* XML can now define <map game = \"name\"> for custom gamemode names to be displayed in the sidebar.\n* Also migrated a large majority of PGM to new text library\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:26Z", "type": "commit"}, {"oid": "7022d4e113b14577f99796a8faa47a01042fd307", "url": "https://github.com/PGMDev/PGM/commit/7022d4e113b14577f99796a8faa47a01042fd307", "message": "Make Party extend Named again\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:27Z", "type": "commit"}, {"oid": "efda1e4e3657e6bef9a38ad948c2903576f27920", "url": "https://github.com/PGMDev/PGM/commit/efda1e4e3657e6bef9a38ad948c2903576f27920", "message": "Replace PersonalizedPlayer with PlayerComponent\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:28Z", "type": "commit"}, {"oid": "88d2f371fc0779378e5ffd8e8743368502af4e5f", "url": "https://github.com/PGMDev/PGM/commit/88d2f371fc0779378e5ffd8e8743368502af4e5f", "message": "Switch TranslatableComponent to inline instead of args()\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:28Z", "type": "commit"}, {"oid": "f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "url": "https://github.com/PGMDev/PGM/commit/f0d9ece1f0b4171ee3e58b330d99a51bc8991c45", "message": "Clean up Party name methods\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:28Z", "type": "commit"}, {"oid": "85851f35cf681c196e0ee164fb0d5bd87064f6bd", "url": "https://github.com/PGMDev/PGM/commit/85851f35cf681c196e0ee164fb0d5bd87064f6bd", "message": "Utilize Named properly for Contributor\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:29Z", "type": "commit"}, {"oid": "bab0442f49afd509cba1f9b15d7a883a69d8348d", "url": "https://github.com/PGMDev/PGM/commit/bab0442f49afd509cba1f9b15d7a883a69d8348d", "message": "Move TextColor conversion method to TextFormatter\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:30Z", "type": "commit"}, {"oid": "14c9304a3be49fbb14873d6144cc89dfab6a532b", "url": "https://github.com/PGMDev/PGM/commit/14c9304a3be49fbb14873d6144cc89dfab6a532b", "message": "Resolve getDisplayName() issue\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:04:30Z", "type": "commit"}, {"oid": "f8f3c9782b6310d4966aefe798f51afaba87403a", "url": "https://github.com/PGMDev/PGM/commit/f8f3c9782b6310d4966aefe798f51afaba87403a", "message": "Complete migration to new text library\nA few bugs remain including:\n* Vote book clicking issue\n* Minecraft key translation bug\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:10:43Z", "type": "commit"}, {"oid": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "url": "https://github.com/PGMDev/PGM/commit/b5bd16bb4a10bb157adba7198ff8672c32460fae", "message": "Fix translation issues for non-legacy messages\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:10:43Z", "type": "commit"}, {"oid": "b5bd16bb4a10bb157adba7198ff8672c32460fae", "url": "https://github.com/PGMDev/PGM/commit/b5bd16bb4a10bb157adba7198ff8672c32460fae", "message": "Fix translation issues for non-legacy messages\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T07:10:43Z", "type": "forcePushed"}, {"oid": "03ee4b8fe89ecb3564e35a8206eddae794ff820f", "url": "https://github.com/PGMDev/PGM/commit/03ee4b8fe89ecb3564e35a8206eddae794ff820f", "message": "Bump text-adapter to 3.0.5\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-06-06T18:44:42Z", "type": "commit"}]}