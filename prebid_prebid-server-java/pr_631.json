{"pr_number": 631, "pr_title": "Store win url in cache", "pr_author": "AndriyPavlyuk", "pr_createdAt": "2020-02-26T23:12:23Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/631", "timeline": [{"oid": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "url": "https://github.com/prebid/prebid-server-java/commit/37556fcd56be4641f594cdd5b0a6658ee3bf0005", "message": "Store win url in cache", "committedDate": "2020-02-26T22:56:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1NDY2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385154664", "body": "change to bidObjectNode", "bodyText": "change to bidObjectNode", "bodyHTML": "<p dir=\"auto\">change to bidObjectNode</p>", "author": "DGarbar", "createdAt": "2020-02-27T14:19:13Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -381,10 +382,14 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n     /**\n      * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n      */\n-    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid) {\n+    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId) {\n+        final ObjectNode value = mapper.mapper().valueToTree(cacheBid.getBid());", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1NDkxNA==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385154914", "body": "And add wurl", "bodyText": "And add wurl", "bodyHTML": "<p dir=\"auto\">And add wurl</p>", "author": "DGarbar", "createdAt": "2020-02-27T14:19:36Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -381,10 +382,14 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n     /**\n      * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1OTEyOA==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385159128", "body": "   ``` final ObjectNode value = mapper.valueToTree(bid);\r\n    value.put(\"wurl\",\"http://win-url\" );```\r\nAre they really required?", "bodyText": "value.put(\"wurl\",\"http://win-url\" );```\nAre they really required?", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" value.put(&quot;wurl&quot;,&quot;http://win-url&quot; );```\nAre they really required?\"><pre lang=\"final\"><code> value.put(\"wurl\",\"http://win-url\" );```\nAre they really required?\n</code></pre></div>", "author": "DGarbar", "createdAt": "2020-02-27T14:26:01Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -458,11 +468,13 @@ public void cacheBidsOpenrtbShouldTolerateCacheEntriesNumberDoesNotMatchBidsNumb\n     public void cacheBidsOpenrtbShouldReturnExpectedDebugInfo() throws JsonProcessingException {\n         // given\n         final com.iab.openrtb.response.Bid bid = givenBidOpenrtb(builder -> builder.id(\"bidId1\").impid(\"impId1\"));\n-\n+        given(eventsService.winUrlTargeting(anyString())).willReturn(\"http://win-url\");\n+        final ObjectNode value = mapper.valueToTree(bid);\n+        value.put(\"wurl\",\"http://win-url\" );", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2MDU1NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385160555", "body": "       ``` final ObjectNode value = mapper.valueToTree(bid);\r\n        value.put(\"wurl\",\"http://win-url\" );```\r\nAre they really required? ", "bodyText": "``` final ObjectNode value = mapper.valueToTree(bid);\n    value.put(\"wurl\",\"http://win-url\" );```\n\nAre they really required?", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"   ``` final ObjectNode value = mapper.valueToTree(bid);\n    value.put(&quot;wurl&quot;,&quot;http://win-url&quot; );```\"><pre><code>   ``` final ObjectNode value = mapper.valueToTree(bid);\n    value.put(\"wurl\",\"http://win-url\" );```\n</code></pre></div>\n<p dir=\"auto\">Are they really required?</p>", "author": "DGarbar", "createdAt": "2020-02-27T14:28:05Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -438,11 +446,13 @@ public void cacheBidsOpenrtbShouldTolerateCacheEntriesNumberDoesNotMatchBidsNumb\n         givenHttpClientReturnsResponse(200, \"{}\");\n \n         final com.iab.openrtb.response.Bid bid = givenBidOpenrtb(builder -> builder.id(\"bidId1\").impid(\"impId1\"));\n-\n+        given(eventsService.winUrlTargeting(anyString())).willReturn(\"http://win-url\");\n+        final ObjectNode value = mapper.valueToTree(bid);\n+        value.put(\"wurl\",\"http://win-url\" );", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2Mjc0OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385162749", "body": "replace naming of value1 and value2", "bodyText": "replace naming of value1 and value2", "bodyHTML": "<p dir=\"auto\">replace naming of value1 and value2</p>", "author": "DGarbar", "createdAt": "2020-02-27T14:31:25Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -494,18 +506,23 @@ public void cacheBidsOpenrtbShouldPerformHttpRequestWithExpectedBody() throws IO\n         final com.iab.openrtb.response.Bid bid2 = givenBidOpenrtb(builder -> builder.impid(\"impId2\").adm(\"adm2\"));\n         final Imp imp1 = givenImp(identity());\n         final Imp imp2 = givenImp(builder -> builder.id(\"impId2\").video(Video.builder().build()));\n+        when(eventsService.winUrlTargeting(anyString())).thenReturn(\"http://win-url\");\n \n         // when\n         cacheService.cacheBidsOpenrtb(\n                 asList(bid1, bid2), asList(imp1, imp2),\n-                CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).build(), account, timeout);\n+                CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).build(), Account.builder().id(\"accountId\").build(), timeout);\n \n         // then\n+        final ObjectNode value1 = mapper.valueToTree(bid1);\n+        value1.put(\"wurl\", \"http://win-url\");\n+        final ObjectNode value2 = mapper.valueToTree(bid2);\n+        value2.put(\"wurl\", \"http://win-url\");", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2MzA4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385163084", "body": "Replace with `given` and `willReturn`", "bodyText": "Replace with given and willReturn", "bodyHTML": "<p dir=\"auto\">Replace with <code>given</code> and <code>willReturn</code></p>", "author": "DGarbar", "createdAt": "2020-02-27T14:31:53Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -494,18 +506,23 @@ public void cacheBidsOpenrtbShouldPerformHttpRequestWithExpectedBody() throws IO\n         final com.iab.openrtb.response.Bid bid2 = givenBidOpenrtb(builder -> builder.impid(\"impId2\").adm(\"adm2\"));\n         final Imp imp1 = givenImp(identity());\n         final Imp imp2 = givenImp(builder -> builder.id(\"impId2\").video(Video.builder().build()));\n+        when(eventsService.winUrlTargeting(anyString())).thenReturn(\"http://win-url\");", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2MzcxNQ==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385163715", "body": "naming and inline ", "bodyText": "naming and inline", "bodyHTML": "<p dir=\"auto\">naming and inline</p>", "author": "DGarbar", "createdAt": "2020-02-27T14:32:48Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -721,18 +738,23 @@ public void cacheBidsOpenrtbShouldWrapEmptyAdMFieldUsingNurlFieldValue() throws\n         final com.iab.openrtb.response.Bid bid1 = givenBidOpenrtb(builder -> builder.impid(\"impId1\").adm(\"adm1\"));\n         final com.iab.openrtb.response.Bid bid2 = givenBidOpenrtb(builder -> builder.impid(\"impId1\").nurl(\"adm2\"));\n         final Imp imp1 = givenImp(builder -> builder.id(\"impId1\").video(Video.builder().build()));\n+        when(eventsService.winUrlTargeting(anyString())).thenReturn(\"http://win-url\");\n \n         // when\n         cacheService.cacheBidsOpenrtb(\n                 asList(bid1, bid2), singletonList(imp1),\n-                CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).build(), account, timeout);\n+                CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).build(), Account.builder().id(\"accountId\").build(), timeout);\n \n         // then\n+        final ObjectNode value1 = mapper.valueToTree(bid1);\n+        value1.put(\"wurl\", \"http://win-url\");\n+        final ObjectNode value2 = mapper.valueToTree(bid2);\n+        value2.put(\"wurl\", \"http://win-url\");", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NDU3Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385164572", "body": "/n", "bodyText": "/n", "bodyHTML": "<p dir=\"auto\">/n</p>", "author": "DGarbar", "createdAt": "2020-02-27T14:34:03Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -748,16 +770,19 @@ public void cacheBidsOpenrtbShouldNotModifyVastXmlWhenBidIdIsNotInToModifyList()\n                 .adm(\"adm\"));\n         final Imp imp1 = givenImp(builder -> builder.id(\"impId1\").video(Video.builder().build()));\n \n+        given(eventsService.winUrlTargeting(anyString())).willReturn(\"http://win-url\");", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NDg1Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385164856", "body": "/n", "bodyText": "/n", "bodyHTML": "<p dir=\"auto\">/n</p>", "author": "DGarbar", "createdAt": "2020-02-27T14:34:27Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -767,17 +792,18 @@ public void cacheBidsOpenrtbShouldNotAddTrackingImpToBidAdmWhenXmlDoesNotContain\n         final com.iab.openrtb.response.Bid bid = givenBidOpenrtb(builder -> builder.id(\"bid1\").impid(\"impId1\")\n                 .adm(\"no impression tag\"));\n         final Imp imp1 = givenImp(builder -> builder.id(\"impId1\").video(Video.builder().build()));\n-\n+        given(eventsService.winUrlTargeting(anyString())).willReturn(\"http://win-url\");", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NTMyNg==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r385165326", "body": "Extract variables to clean code", "bodyText": "Extract variables to clean code", "bodyHTML": "<p dir=\"auto\">Extract variables to clean code</p>", "author": "DGarbar", "createdAt": "2020-02-27T14:35:07Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -767,17 +792,18 @@ public void cacheBidsOpenrtbShouldNotAddTrackingImpToBidAdmWhenXmlDoesNotContain\n         final com.iab.openrtb.response.Bid bid = givenBidOpenrtb(builder -> builder.id(\"bid1\").impid(\"impId1\")\n                 .adm(\"no impression tag\"));\n         final Imp imp1 = givenImp(builder -> builder.id(\"impId1\").video(Video.builder().build()));\n-\n+        given(eventsService.winUrlTargeting(anyString())).willReturn(\"http://win-url\");\n         // when\n         cacheService.cacheBidsOpenrtb(singletonList(bid), singletonList(imp1), CacheContext.builder()\n                 .shouldCacheBids(true).shouldCacheVideoBids(true).videoBidIdsToModify(singletonList(\"bid1\"))\n-                .build(), account, timeout);\n-\n+                .build(), Account.builder().id(\"accountId\").build(), timeout);", "originalCommit": "37556fcd56be4641f594cdd5b0a6658ee3bf0005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8bad88f2200acac7941dac64ad679ffa5ebea1c0", "url": "https://github.com/prebid/prebid-server-java/commit/8bad88f2200acac7941dac64ad679ffa5ebea1c0", "message": "Add method to define win url for caching and fixing tests", "committedDate": "2020-02-28T11:52:48Z", "type": "commit"}, {"oid": "0fe99d6034431ae5acd4ce0c84f79e2d8e174dbf", "url": "https://github.com/prebid/prebid-server-java/commit/0fe99d6034431ae5acd4ce0c84f79e2d8e174dbf", "message": "Merge branch 'master' into store-wurl-in-cache", "committedDate": "2020-03-16T13:49:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NDcxNQ==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393154715", "body": "Please, add new test that verifies calling arguments for `eventsService`, like:\r\n```\r\nverify(eventsService).winUrlCaching(eq(\"bidId1\"), eq(\"accountId\"));\r\n```\r\n\r\nThen `account` declaration is not needed in all remaining tests.\r\nJust change matching args there:\r\n```\r\ngiven(eventsService.winUrlCaching(anyString(), any())).willReturn(\"http://win-url\");\r\n```\r\n\r\n`any()` will match `null` account ID.\r\n\r\nThis will keep tests more clean.", "bodyText": "Please, add new test that verifies calling arguments for eventsService, like:\nverify(eventsService).winUrlCaching(eq(\"bidId1\"), eq(\"accountId\"));\n\nThen account declaration is not needed in all remaining tests.\nJust change matching args there:\ngiven(eventsService.winUrlCaching(anyString(), any())).willReturn(\"http://win-url\");\n\nany() will match null account ID.\nThis will keep tests more clean.", "bodyHTML": "<p dir=\"auto\">Please, add new test that verifies calling arguments for <code>eventsService</code>, like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"verify(eventsService).winUrlCaching(eq(&quot;bidId1&quot;), eq(&quot;accountId&quot;));\"><pre><code>verify(eventsService).winUrlCaching(eq(\"bidId1\"), eq(\"accountId\"));\n</code></pre></div>\n<p dir=\"auto\">Then <code>account</code> declaration is not needed in all remaining tests.<br>\nJust change matching args there:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"given(eventsService.winUrlCaching(anyString(), any())).willReturn(&quot;http://win-url&quot;);\"><pre><code>given(eventsService.winUrlCaching(anyString(), any())).willReturn(\"http://win-url\");\n</code></pre></div>\n<p dir=\"auto\"><code>any()</code> will match <code>null</code> account ID.</p>\n<p dir=\"auto\">This will keep tests more clean.</p>", "author": "rpanchyk", "createdAt": "2020-03-16T16:33:11Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -376,8 +382,10 @@ public void cacheBidsOpenrtbShouldTolerateReadingHttpResponseFails() throws Json\n         givenHttpClientProducesException(new RuntimeException(\"Response exception\"));\n \n         final com.iab.openrtb.response.Bid bid = givenBidOpenrtb(builder -> builder.id(\"bidId1\").impid(\"impId1\"));\n+        given(eventsService.winUrlCaching(anyString(), anyString())).willReturn(\"http://win-url\");\n \n         // when\n+        account = Account.builder().id(\"accountId\").build();", "originalCommit": "0fe99d6034431ae5acd4ce0c84f79e2d8e174dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3MDYzMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393170631", "body": "No reason for adding all possible values, just use `anyString()`.\r\nPls check all similar tests.", "bodyText": "No reason for adding all possible values, just use anyString().\nPls check all similar tests.", "bodyHTML": "<p dir=\"auto\">No reason for adding all possible values, just use <code>anyString()</code>.<br>\nPls check all similar tests.</p>", "author": "rpanchyk", "createdAt": "2020-03-16T16:55:58Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -494,18 +509,25 @@ public void cacheBidsOpenrtbShouldPerformHttpRequestWithExpectedBody() throws IO\n         final com.iab.openrtb.response.Bid bid2 = givenBidOpenrtb(builder -> builder.impid(\"impId2\").adm(\"adm2\"));\n         final Imp imp1 = givenImp(identity());\n         final Imp imp2 = givenImp(builder -> builder.id(\"impId2\").video(Video.builder().build()));\n+        given(eventsService.winUrlCaching(bid1.getId(), \"accountId\")).willReturn(\"http://win-url\");\n+        given(eventsService.winUrlCaching(bid2.getId(), \"accountId\")).willReturn(\"http://win-url\");", "originalCommit": "0fe99d6034431ae5acd4ce0c84f79e2d8e174dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3NzgxNA==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393177814", "body": "Pls extract `cacheBid.getBid()` to separate variable.\r\nThen `bidId` declaration can be omitted.", "bodyText": "Pls extract cacheBid.getBid() to separate variable.\nThen bidId declaration can be omitted.", "bodyHTML": "<p dir=\"auto\">Pls extract <code>cacheBid.getBid()</code> to separate variable.<br>\nThen <code>bidId</code> declaration can be omitted.</p>", "author": "rpanchyk", "createdAt": "2020-03-16T17:03:51Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -379,12 +380,18 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n     }\n \n     /**\n-     * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n+     * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request and\n+     * add winn url.\n      */\n-    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid) {\n+    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId) {\n+        final String bidId = cacheBid.getBid().getId();", "originalCommit": "0fe99d6034431ae5acd4ce0c84f79e2d8e174dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTE5Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393181192", "body": "Minor. Pls add new line.", "bodyText": "Minor. Pls add new line.", "bodyHTML": "<p dir=\"auto\">Minor. Pls add new line.</p>", "author": "rpanchyk", "createdAt": "2020-03-16T17:07:40Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -396,8 +404,9 @@ public void cacheBidsOpenrtbShouldTolerateResponseCodeIsNot200() throws JsonProc\n         givenHttpClientReturnsResponse(503, \"response\");\n \n         final com.iab.openrtb.response.Bid bid = givenBidOpenrtb(builder -> builder.id(\"bidId1\").impid(\"impId1\"));\n-\n+        given(eventsService.winUrlCaching(anyString(), anyString())).willReturn(\"http://win-url\");\n         // when", "originalCommit": "0fe99d6034431ae5acd4ce0c84f79e2d8e174dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b70c731aad7473f683750994ee7cdf069d9e7498", "url": "https://github.com/prebid/prebid-server-java/commit/b70c731aad7473f683750994ee7cdf069d9e7498", "message": "Minor changes to CacheService and tests", "committedDate": "2020-03-17T10:22:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NDAyNA==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393594024", "body": "Pls use `bid` var instead.", "bodyText": "Pls use bid var instead.", "bodyHTML": "<p dir=\"auto\">Pls use <code>bid</code> var instead.</p>", "author": "rpanchyk", "createdAt": "2020-03-17T10:55:15Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -379,12 +380,18 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n     }\n \n     /**\n-     * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n+     * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request and\n+     * add winn url.\n      */\n-    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid) {\n+    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId) {\n+        final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n+        final ObjectNode bidObjectNode = mapper.mapper().valueToTree(cacheBid.getBid());", "originalCommit": "b70c731aad7473f683750994ee7cdf069d9e7498", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NzczOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393597739", "body": "Pls change to `Returns value for win URL tracking.`", "bodyText": "Pls change to Returns value for win URL tracking.", "bodyHTML": "<p dir=\"auto\">Pls change to <code>Returns value for win URL tracking.</code></p>", "author": "rpanchyk", "createdAt": "2020-03-17T11:02:24Z", "path": "src/main/java/org/prebid/server/events/EventsService.java", "diffHunk": "@@ -31,6 +31,13 @@ public String winUrlTargeting(String accountId) {\n         return eventUrl(EventRequest.Type.win, BIDID_PLACEHOLDER, accountId, EventRequest.Format.image);\n     }\n \n+    /**\n+     * Returns value for caching winurl keyword in request.", "originalCommit": "b70c731aad7473f683750994ee7cdf069d9e7498", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5Nzk0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393597942", "body": "Rename to `winUrl(...)`.", "bodyText": "Rename to winUrl(...).", "bodyHTML": "<p dir=\"auto\">Rename to <code>winUrl(...)</code>.</p>", "author": "rpanchyk", "createdAt": "2020-03-17T11:02:47Z", "path": "src/main/java/org/prebid/server/events/EventsService.java", "diffHunk": "@@ -31,6 +31,13 @@ public String winUrlTargeting(String accountId) {\n         return eventUrl(EventRequest.Type.win, BIDID_PLACEHOLDER, accountId, EventRequest.Format.image);\n     }\n \n+    /**\n+     * Returns value for caching winurl keyword in request.\n+     */\n+    public String winUrlCaching(String bidId, String accountId) {", "originalCommit": "b70c731aad7473f683750994ee7cdf069d9e7498", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMjMwNA==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393602304", "body": "This declaration should be a part of `given` section.\r\nPls check all remaining tests.", "bodyText": "This declaration should be a part of given section.\nPls check all remaining tests.", "bodyHTML": "<p dir=\"auto\">This declaration should be a part of <code>given</code> section.<br>\nPls check all remaining tests.</p>", "author": "rpanchyk", "createdAt": "2020-03-17T11:11:14Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -370,12 +370,28 @@ public void cacheBidsOpenrtbShouldTolerateGlobalTimeoutAlreadyExpired() {\n         assertThat(result.getHttpCall()).isNull();\n     }\n \n+    @Test\n+    public void cacheBidsOpenrtbShouldStoreWinUrl() throws JsonProcessingException {\n+        // given\n+        final com.iab.openrtb.response.Bid bid = givenBidOpenrtb(builder -> builder.id(\"bidId1\").impid(\"impId1\"));\n+\n+        // when\n+        account = Account.builder().id(\"accountId\").build();", "originalCommit": "b70c731aad7473f683750994ee7cdf069d9e7498", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMjk4MA==", "url": "https://github.com/prebid/prebid-server-java/pull/631#discussion_r393602980", "body": "No reason for duplicate.", "bodyText": "No reason for duplicate.", "bodyHTML": "<p dir=\"auto\">No reason for duplicate.</p>", "author": "rpanchyk", "createdAt": "2020-03-17T11:12:32Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -721,18 +746,24 @@ public void cacheBidsOpenrtbShouldWrapEmptyAdMFieldUsingNurlFieldValue() throws\n         final com.iab.openrtb.response.Bid bid1 = givenBidOpenrtb(builder -> builder.impid(\"impId1\").adm(\"adm1\"));\n         final com.iab.openrtb.response.Bid bid2 = givenBidOpenrtb(builder -> builder.impid(\"impId1\").nurl(\"adm2\"));\n         final Imp imp1 = givenImp(builder -> builder.id(\"impId1\").video(Video.builder().build()));\n+        given(eventsService.winUrlCaching(any(), any())).willReturn(\"http://win-url\");\n+        given(eventsService.winUrlCaching(any(), any())).willReturn(\"http://win-url\");", "originalCommit": "b70c731aad7473f683750994ee7cdf069d9e7498", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c64d7249b801a7228ebc87c0862b73dbd4368dc", "url": "https://github.com/prebid/prebid-server-java/commit/2c64d7249b801a7228ebc87c0862b73dbd4368dc", "message": "Small changes to EventService", "committedDate": "2020-03-17T11:37:27Z", "type": "commit"}, {"oid": "e69837068f78d3ed01f8acdeed7fb9894a72804c", "url": "https://github.com/prebid/prebid-server-java/commit/e69837068f78d3ed01f8acdeed7fb9894a72804c", "message": "Minor fixes for Java8", "committedDate": "2020-03-17T13:23:17Z", "type": "commit"}]}