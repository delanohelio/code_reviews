{"pr_number": 635, "pr_title": "Add timestamp and biddercode to event URL", "pr_author": "AndriyPavlyuk", "pr_createdAt": "2020-03-11T16:24:55Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/635", "timeline": [{"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "url": "https://github.com/prebid/prebid-server-java/commit/4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "message": "Add timestamp and biddercode to event URL", "committedDate": "2020-03-11T16:21:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MDEyMw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393580123", "body": "Check your code style settings. \r\nThis do not need to change.", "bodyText": "Check your code style settings.\nThis do not need to change.", "bodyHTML": "<p dir=\"auto\">Check your code style settings.<br>\nThis do not need to change.</p>", "author": "DGarbar", "createdAt": "2020-03-17T10:30:05Z", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -1,5 +1,9 @@\n package org.prebid.server.auction;\n \n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.lang3.BooleanUtils;", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/BidResponseCreator.java b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\nindex 3a711690..c1391457 100644\n--- a/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n+++ b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n", "chunk": "@@ -1,9 +1,5 @@\n package org.prebid.server.auction;\n \n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.MapUtils;\n-import org.apache.commons.lang3.BooleanUtils;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NTQ3MA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393595470", "body": "Change to Long and auctiontimestamp", "bodyText": "Change to Long and auctiontimestamp", "bodyHTML": "<p dir=\"auto\">Change to Long and auctiontimestamp</p>", "author": "DGarbar", "createdAt": "2020-03-17T10:58:03Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebid.java", "diffHunk": "@@ -55,6 +55,11 @@\n      */\n     List<ExtRequestPrebidSchain> schains;\n \n+    /**\n+     * Defines the contract for bidrequest.ext.prebid.timestamp\n+     */\n+    long timestamp;", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebid.java b/src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebid.java\nindex 5f8698ed..6bf72465 100644\n--- a/src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebid.java\n+++ b/src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebid.java\n", "chunk": "@@ -56,9 +56,9 @@ public class ExtRequestPrebid {\n     List<ExtRequestPrebidSchain> schains;\n \n     /**\n-     * Defines the contract for bidrequest.ext.prebid.timestamp\n+     * Defines the contract for bidrequest.ext.prebid.auctiontimestamp\n      */\n-    long timestamp;\n+    Long auctiontimestamp;\n \n     /**\n      * Defines the contract for bidrequest.ext.prebid.bidders\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NjY4MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393596681", "body": "`prebid.getTimestamp()`can be missing also. \r\nSo you need to create timestamp if timestamp value is null.", "bodyText": "prebid.getTimestamp()can be missing also.\nSo you need to create timestamp if timestamp value is null.", "bodyHTML": "<p dir=\"auto\"><code>prebid.getTimestamp()</code>can be missing also.<br>\nSo you need to create timestamp if timestamp value is null.</p>", "author": "DGarbar", "createdAt": "2020-03-17T11:00:18Z", "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "diffHunk": "@@ -705,6 +707,15 @@ private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n         return prebid != null ? prebid.getTargeting() : null;\n     }\n \n+    /**\n+     * Extracts {@link ExtRequestPrebid} from {@link ExtBidRequest} model.\n+     */\n+    private static long auctionTimestamp(ExtBidRequest requestExt) {\n+        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n+        final long auctionTimestamp = prebid != null ? prebid.getTimestamp() : Instant.now().toEpochMilli();\n+        return auctionTimestamp;", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/ExchangeService.java b/src/main/java/org/prebid/server/auction/ExchangeService.java\nindex 536a7353..577b7fb3 100644\n--- a/src/main/java/org/prebid/server/auction/ExchangeService.java\n+++ b/src/main/java/org/prebid/server/auction/ExchangeService.java\n", "chunk": "@@ -708,7 +708,7 @@ public class ExchangeService {\n     }\n \n     /**\n-     * Extracts {@link ExtRequestPrebid} from {@link ExtBidRequest} model.\n+     * Extracts auctiontimestamp from {@link ExtBidRequest} model.\n      */\n     private static long auctionTimestamp(ExtBidRequest requestExt) {\n         final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/ExchangeService.java b/src/main/java/org/prebid/server/auction/ExchangeService.java\nindex 577b7fb3..91980406 100644\n--- a/src/main/java/org/prebid/server/auction/ExchangeService.java\n+++ b/src/main/java/org/prebid/server/auction/ExchangeService.java\n", "chunk": "@@ -710,10 +710,10 @@ public class ExchangeService {\n     /**\n      * Extracts auctiontimestamp from {@link ExtBidRequest} model.\n      */\n-    private static long auctionTimestamp(ExtBidRequest requestExt) {\n+    private static Long auctionTimestamp(ExtBidRequest requestExt) {\n         final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final long auctionTimestamp = prebid != null ? prebid.getTimestamp() : Instant.now().toEpochMilli();\n-        return auctionTimestamp;\n+        final Long auctionTmestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n+        return auctionTmestamp != null ? auctionTmestamp : Instant.now().toEpochMilli();\n     }\n \n     /**\n", "next_change": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/ExchangeService.java b/src/main/java/org/prebid/server/auction/ExchangeService.java\nindex 91980406..038123db 100644\n--- a/src/main/java/org/prebid/server/auction/ExchangeService.java\n+++ b/src/main/java/org/prebid/server/auction/ExchangeService.java\n", "chunk": "@@ -708,12 +708,12 @@ public class ExchangeService {\n     }\n \n     /**\n-     * Extracts auctiontimestamp from {@link ExtBidRequest} model.\n+     * Extracts auctiontimestamp or creates if it is null from {@link ExtBidRequest} model.\n      */\n     private static Long auctionTimestamp(ExtBidRequest requestExt) {\n         final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final Long auctionTmestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n-        return auctionTmestamp != null ? auctionTmestamp : Instant.now().toEpochMilli();\n+        final Long auctionTimestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n+        return auctionTimestamp != null ? auctionTimestamp : Instant.now().toEpochMilli();\n     }\n \n     /**\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/ExchangeService.java b/src/main/java/org/prebid/server/auction/ExchangeService.java\nindex 038123db..08008947 100644\n--- a/src/main/java/org/prebid/server/auction/ExchangeService.java\n+++ b/src/main/java/org/prebid/server/auction/ExchangeService.java\n", "chunk": "@@ -700,61 +742,19 @@ public class ExchangeService {\n     }\n \n     /**\n-     * Extracts {@link ExtRequestTargeting} from {@link ExtBidRequest} model.\n-     */\n-    private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n-        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        return prebid != null ? prebid.getTargeting() : null;\n-    }\n-\n-    /**\n-     * Extracts auctiontimestamp or creates if it is null from {@link ExtBidRequest} model.\n+     * Extracts currency rates from {@link ExtRequestTargeting}.\n      */\n-    private static Long auctionTimestamp(ExtBidRequest requestExt) {\n-        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final Long auctionTimestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n-        return auctionTimestamp != null ? auctionTimestamp : Instant.now().toEpochMilli();\n+    private static Map<String, Map<String, BigDecimal>> currencyRates(ExtRequestTargeting targeting) {\n+        return targeting != null && targeting.getCurrency() != null ? targeting.getCurrency().getRates() : null;\n     }\n \n     /**\n-     * Creates {@link BidRequestCacheInfo} based on {@link ExtBidRequest} model.\n+     * Extracts bidAdjustments from {@link ExtBidRequest}.\n      */\n-    private BidRequestCacheInfo bidRequestCacheInfo(ExtRequestTargeting targeting, ExtBidRequest requestExt) {\n+    private static Map<String, BigDecimal> bidAdjustments(ExtBidRequest requestExt) {\n         final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final ExtRequestPrebidCache cache = prebid != null ? prebid.getCache() : null;\n-\n-        if (targeting != null && cache != null) {\n-            final boolean shouldCacheBids = cache.getBids() != null;\n-            final boolean shouldCacheVideoBids = cache.getVastxml() != null;\n-            final boolean shouldCacheWinningBidsOnly = targeting.getIncludebidderkeys()\n-                    ? false // ext.prebid.targeting.includebidderkeys takes precedence\n-                    : ObjectUtils.defaultIfNull(cache.getWinningonly(), false);\n-\n-            if (shouldCacheBids || shouldCacheVideoBids || shouldCacheWinningBidsOnly) {\n-                final Integer cacheBidsTtl = shouldCacheBids ? cache.getBids().getTtlseconds() : null;\n-                final Integer cacheVideoBidsTtl = shouldCacheVideoBids ? cache.getVastxml().getTtlseconds() : null;\n-\n-                final boolean returnCreativeBid = shouldCacheBids\n-                        ? ObjectUtils.defaultIfNull(cache.getBids().getReturnCreative(), true)\n-                        : false;\n-                final boolean returnCreativeVideoBid = shouldCacheVideoBids\n-                        ? ObjectUtils.defaultIfNull(cache.getVastxml().getReturnCreative(), true)\n-                        : false;\n-\n-                return BidRequestCacheInfo.builder()\n-                        .doCaching(true)\n-                        .shouldCacheBids(shouldCacheBids)\n-                        .cacheBidsTtl(cacheBidsTtl)\n-                        .shouldCacheVideoBids(shouldCacheVideoBids)\n-                        .cacheVideoBidsTtl(cacheVideoBidsTtl)\n-                        .returnCreativeBids(returnCreativeBid)\n-                        .returnCreativeVideoBids(returnCreativeVideoBid)\n-                        .shouldCacheWinningBidsOnly(shouldCacheWinningBidsOnly)\n-                        .build();\n-            }\n-        }\n-\n-        return BidRequestCacheInfo.noCache();\n+        final Map<String, BigDecimal> bidAdjustmentFactors = prebid != null ? prebid.getBidadjustmentfactors() : null;\n+        return bidAdjustmentFactors != null ? bidAdjustmentFactors : Collections.emptyMap();\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NzQzMw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393597433", "body": "rename to `auctionTimestamp`", "bodyText": "rename to auctionTimestamp", "bodyHTML": "<p dir=\"auto\">rename to <code>auctionTimestamp</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T11:01:44Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -167,16 +167,17 @@ public String getCachedAssetURLTemplate() {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout) {\n-        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate, accountId);\n+                                                    String accountId, Timeout timeout, long timestamp) {", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66786a6cd808ee7be85f1cbf4de74ddce0f2f656", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 28831f61..5b7260a0 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -167,9 +167,9 @@ public class CacheService {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout, long timestamp) {\n+                                                    String accountId, Timeout timeout, Long auctionTimestamp) {\n         final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate,\n-                accountId, timestamp);\n+                accountId, auctionTimestamp);\n         return makeRequest(BidCacheRequest.of(updatedPutObjects), updatedPutObjects.size(), timeout);\n     }\n \n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 5b7260a0..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -167,9 +168,8 @@ public class CacheService {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout, Long auctionTimestamp) {\n-        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate,\n-                accountId, auctionTimestamp);\n+                                                    String accountId, Timeout timeout) {\n+        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate, accountId);\n         return makeRequest(BidCacheRequest.of(updatedPutObjects), updatedPutObjects.size(), timeout);\n     }\n \n", "next_change": null}, {"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 5b7260a0..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -177,22 +177,27 @@ public class CacheService {\n      * Modify VAST value in putObjects.\n      */\n     private List<PutObject> updatePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                             String accountId, Long auctionTimestamp) {\n+                                             String accountId) {\n         if (CollectionUtils.isEmpty(biddersAllowingVastUpdate)) {\n             return putObjects;\n         }\n \n         final List<PutObject> updatedPutObjects = new ArrayList<>();\n         for (PutObject putObject : putObjects) {\n+            final PutObject.PutObjectBuilder builder = putObject.toBuilder()\n+                    // remove \"/vtrack\" specific fields\n+                    .bidid(null)\n+                    .bidder(null)\n+                    .timestamp(null);\n+\n             final JsonNode value = putObject.getValue();\n             if (biddersAllowingVastUpdate.contains(putObject.getBidder()) && value != null) {\n-                final String updatedVastValue = modifyVastXml(value.asText(), putObject.getBidid(),\n-                        putObject.getBidder(), accountId, auctionTimestamp);\n-                final PutObject updatedPutObject = putObject.toBuilder().value(new TextNode(updatedVastValue)).build();\n-                updatedPutObjects.add(updatedPutObject);\n-            } else {\n-                updatedPutObjects.add(putObject);\n+                final String updatedVastXml = modifyVastXml(value.asText(), putObject.getBidid(),\n+                        putObject.getBidder(), accountId, putObject.getTimestamp());\n+                builder.value(new TextNode(updatedVastXml)).build();\n             }\n+\n+            updatedPutObjects.add(builder.build());\n         }\n         return updatedPutObjects;\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NzUwMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393597501", "body": "rename to `auctionTimestamp`", "bodyText": "rename to auctionTimestamp", "bodyHTML": "<p dir=\"auto\">rename to <code>auctionTimestamp</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T11:01:54Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -167,16 +167,17 @@ public String getCachedAssetURLTemplate() {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout) {\n-        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate, accountId);\n+                                                    String accountId, Timeout timeout, long timestamp) {\n+        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate,\n+                accountId, timestamp);\n         return makeRequest(BidCacheRequest.of(updatedPutObjects), updatedPutObjects.size(), timeout);\n     }\n \n     /**\n      * Modify VAST value in putObjects.\n      */\n     private List<PutObject> updatePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                             String accountId) {\n+                                             String accountId, long timestamp) {", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66786a6cd808ee7be85f1cbf4de74ddce0f2f656", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 28831f61..5b7260a0 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -167,9 +167,9 @@ public class CacheService {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout, long timestamp) {\n+                                                    String accountId, Timeout timeout, Long auctionTimestamp) {\n         final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate,\n-                accountId, timestamp);\n+                accountId, auctionTimestamp);\n         return makeRequest(BidCacheRequest.of(updatedPutObjects), updatedPutObjects.size(), timeout);\n     }\n \n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 5b7260a0..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -167,9 +168,8 @@ public class CacheService {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout, Long auctionTimestamp) {\n-        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate,\n-                accountId, auctionTimestamp);\n+                                                    String accountId, Timeout timeout) {\n+        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate, accountId);\n         return makeRequest(BidCacheRequest.of(updatedPutObjects), updatedPutObjects.size(), timeout);\n     }\n \n", "next_change": null}, {"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 5b7260a0..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -177,22 +177,27 @@ public class CacheService {\n      * Modify VAST value in putObjects.\n      */\n     private List<PutObject> updatePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                             String accountId, Long auctionTimestamp) {\n+                                             String accountId) {\n         if (CollectionUtils.isEmpty(biddersAllowingVastUpdate)) {\n             return putObjects;\n         }\n \n         final List<PutObject> updatedPutObjects = new ArrayList<>();\n         for (PutObject putObject : putObjects) {\n+            final PutObject.PutObjectBuilder builder = putObject.toBuilder()\n+                    // remove \"/vtrack\" specific fields\n+                    .bidid(null)\n+                    .bidder(null)\n+                    .timestamp(null);\n+\n             final JsonNode value = putObject.getValue();\n             if (biddersAllowingVastUpdate.contains(putObject.getBidder()) && value != null) {\n-                final String updatedVastValue = modifyVastXml(value.asText(), putObject.getBidid(),\n-                        putObject.getBidder(), accountId, auctionTimestamp);\n-                final PutObject updatedPutObject = putObject.toBuilder().value(new TextNode(updatedVastValue)).build();\n-                updatedPutObjects.add(updatedPutObject);\n-            } else {\n-                updatedPutObjects.add(putObject);\n+                final String updatedVastXml = modifyVastXml(value.asText(), putObject.getBidid(),\n+                        putObject.getBidder(), accountId, putObject.getTimestamp());\n+                builder.value(new TextNode(updatedVastXml)).build();\n             }\n+\n+            updatedPutObjects.add(builder.build());\n         }\n         return updatedPutObjects;\n     }\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 28831f61..5b7260a0 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -177,7 +177,7 @@ public class CacheService {\n      * Modify VAST value in putObjects.\n      */\n     private List<PutObject> updatePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                             String accountId, long timestamp) {\n+                                             String accountId, Long auctionTimestamp) {\n         if (CollectionUtils.isEmpty(biddersAllowingVastUpdate)) {\n             return putObjects;\n         }\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 5b7260a0..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -177,22 +177,27 @@ public class CacheService {\n      * Modify VAST value in putObjects.\n      */\n     private List<PutObject> updatePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                             String accountId, Long auctionTimestamp) {\n+                                             String accountId) {\n         if (CollectionUtils.isEmpty(biddersAllowingVastUpdate)) {\n             return putObjects;\n         }\n \n         final List<PutObject> updatedPutObjects = new ArrayList<>();\n         for (PutObject putObject : putObjects) {\n+            final PutObject.PutObjectBuilder builder = putObject.toBuilder()\n+                    // remove \"/vtrack\" specific fields\n+                    .bidid(null)\n+                    .bidder(null)\n+                    .timestamp(null);\n+\n             final JsonNode value = putObject.getValue();\n             if (biddersAllowingVastUpdate.contains(putObject.getBidder()) && value != null) {\n-                final String updatedVastValue = modifyVastXml(value.asText(), putObject.getBidid(),\n-                        putObject.getBidder(), accountId, auctionTimestamp);\n-                final PutObject updatedPutObject = putObject.toBuilder().value(new TextNode(updatedVastValue)).build();\n-                updatedPutObjects.add(updatedPutObject);\n-            } else {\n-                updatedPutObjects.add(putObject);\n+                final String updatedVastXml = modifyVastXml(value.asText(), putObject.getBidid(),\n+                        putObject.getBidder(), accountId, putObject.getTimestamp());\n+                builder.value(new TextNode(updatedVastXml)).build();\n             }\n+\n+            updatedPutObjects.add(builder.build());\n         }\n         return updatedPutObjects;\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NzU3OA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393597578", "body": "rename to `auctionTimestamp`", "bodyText": "rename to auctionTimestamp", "bodyHTML": "<p dir=\"auto\">rename to <code>auctionTimestamp</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T11:02:04Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -199,7 +201,8 @@ public String getCachedAssetURLTemplate() {\n      * Makes cache for OpenRTB {@link com.iab.openrtb.response.Bid}s.\n      */\n     public Future<CacheServiceResult> cacheBidsOpenrtb(List<com.iab.openrtb.response.Bid> bids, List<Imp> imps,\n-                                                       CacheContext cacheContext, Account account, Timeout timeout) {\n+                                                       CacheContext cacheContext, Account account, Timeout timeout,\n+                                                       long timestamp) {", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 28831f61..142ead26 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -202,7 +203,7 @@ public class CacheService {\n      */\n     public Future<CacheServiceResult> cacheBidsOpenrtb(List<com.iab.openrtb.response.Bid> bids, List<Imp> imps,\n                                                        CacheContext cacheContext, Account account, Timeout timeout,\n-                                                       long timestamp) {\n+                                                       Long timestamp) {\n         final Future<CacheServiceResult> result;\n \n         if (CollectionUtils.isEmpty(bids)) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5ODE2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393598164", "body": "do not change style.\r\n```\r\nprivate Future<CacheServiceResult> doCacheOpenrtb(List<CacheBid> bids, List<CacheBid> videoBids,\r\n                                                      Map<String, List<String>> bidderToVideoBidIdsToModify,\r\n                                                      String accountId, Timeout timeout, long auctionTimestamp) \r\n```", "bodyText": "do not change style.\nprivate Future<CacheServiceResult> doCacheOpenrtb(List<CacheBid> bids, List<CacheBid> videoBids,\n                                                      Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                      String accountId, Timeout timeout, long auctionTimestamp)", "bodyHTML": "<p dir=\"auto\">do not change style.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private Future&lt;CacheServiceResult&gt; doCacheOpenrtb(List&lt;CacheBid&gt; bids, List&lt;CacheBid&gt; videoBids,\n                                                      Map&lt;String, List&lt;String&gt;&gt; bidderToVideoBidIdsToModify,\n                                                      String accountId, Timeout timeout, long auctionTimestamp) \"><pre><code>private Future&lt;CacheServiceResult&gt; doCacheOpenrtb(List&lt;CacheBid&gt; bids, List&lt;CacheBid&gt; videoBids,\n                                                      Map&lt;String, List&lt;String&gt;&gt; bidderToVideoBidIdsToModify,\n                                                      String accountId, Timeout timeout, long auctionTimestamp) \n</code></pre></div>", "author": "DGarbar", "createdAt": "2020-03-17T11:03:12Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -298,11 +301,13 @@ private CacheBid toCacheBid(com.iab.openrtb.response.Bid bid, Map<String, Intege\n      * The returned result will always have the number of elements equals to sum of sizes of bids and video bids.\n      */\n     private Future<CacheServiceResult> doCacheOpenrtb(\n-            List<CacheBid> bids, List<CacheBid> videoBids, List<String> videoBidIdsToModify, String accountId,\n-            Timeout timeout) {\n+            List<CacheBid> bids, List<CacheBid> videoBids,", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66786a6cd808ee7be85f1cbf4de74ddce0f2f656", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 28831f61..5b7260a0 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -300,10 +300,9 @@ public class CacheService {\n      * <p>\n      * The returned result will always have the number of elements equals to sum of sizes of bids and video bids.\n      */\n-    private Future<CacheServiceResult> doCacheOpenrtb(\n-            List<CacheBid> bids, List<CacheBid> videoBids,\n-            Map<String, List<String>> bidderToVideoBidIdsToModify,\n-            String accountId, Timeout timeout, long timestamp) {\n+    private Future<CacheServiceResult> doCacheOpenrtb(List<CacheBid> bids, List<CacheBid> videoBids,\n+                                                        Map<String, List<String>> bidderToVideoBidIdsToModify,\n+                                                        String accountId, Timeout timeout, long timestamp) {\n         final List<PutObject> putObjects = Stream.concat(\n                 bids.stream().map(this::createJsonPutObjectOpenrtb),\n                 videoBids.stream().map(cacheBid -> createXmlPutObjectOpenrtb(cacheBid, bidderToVideoBidIdsToModify,\n", "next_change": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 5b7260a0..142ead26 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -301,10 +302,12 @@ public class CacheService {\n      * The returned result will always have the number of elements equals to sum of sizes of bids and video bids.\n      */\n     private Future<CacheServiceResult> doCacheOpenrtb(List<CacheBid> bids, List<CacheBid> videoBids,\n-                                                        Map<String, List<String>> bidderToVideoBidIdsToModify,\n-                                                        String accountId, Timeout timeout, long timestamp) {\n+                                                      Map<String, List<String>> bidderToVideoBidIdsToModify,\n+                                                      Map<String, List<String>> biddersToCacheBidIds,\n+                                                      String accountId, Timeout timeout, Long timestamp) {\n         final List<PutObject> putObjects = Stream.concat(\n-                bids.stream().map(this::createJsonPutObjectOpenrtb),\n+                bids.stream().map(cacheBid -> createJsonPutObjectOpenrtb(cacheBid, biddersToCacheBidIds, accountId,\n+                        timestamp)),\n                 videoBids.stream().map(cacheBid -> createXmlPutObjectOpenrtb(cacheBid, bidderToVideoBidIdsToModify,\n                         accountId, timestamp)))\n                 .collect(Collectors.toList());\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5ODY2OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393598669", "body": "rename to `auctionTimestamp`", "bodyText": "rename to auctionTimestamp", "bodyHTML": "<p dir=\"auto\">rename to <code>auctionTimestamp</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T11:04:10Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -392,8 +397,9 @@ private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid) {\n     /**\n      * Makes XML type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n      */\n-    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> videoBidIdsToModify,\n-                                                String accountId) {\n+    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid,\n+                                                Map<String, List<String>> bidderToVideoBidIdsToModify,\n+                                                String accountId, long timestamp) {", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 28831f61..142ead26 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -399,7 +414,7 @@ public class CacheService {\n      */\n     private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid,\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n-                                                String accountId, long timestamp) {\n+                                                String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n         String vastXml;\n         if (bid.getAdm() == null) {\n", "next_change": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 142ead26..61b4ce94 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -416,28 +415,28 @@ public class CacheService {\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        String vastXml;\n+        final String[] vastXml = new String[1];\n         if (bid.getAdm() == null) {\n-            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml = bid.getAdm();\n+            vastXml[0] = bid.getAdm();\n         }\n-\n         final String bidId = bid.getId();\n-        for (Map.Entry<String, List<String>> biddersAndBidIds : bidderToVideoBidIdsToModify.entrySet()) {\n-            if (biddersAndBidIds.getValue().contains(bidId)) {\n-                vastXml = modifyVastXml(vastXml, bidId, biddersAndBidIds.getKey(), accountId, timestamp);\n-                break;\n-            }\n-        }\n+        bidderToVideoBidIdsToModify.entrySet().stream()\n+                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n+                .findFirst()\n+                .map(Map.Entry::getKey)\n+                .ifPresent(bidder -> {\n+                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n+                });\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml))\n+                .value(new TextNode(vastXml[0]))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 61b4ce94..2975117e 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -415,28 +415,28 @@ public class CacheService {\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        final String[] vastXml = new String[1];\n+        String vastXml;\n         if (bid.getAdm() == null) {\n-            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml[0] = bid.getAdm();\n+            vastXml = bid.getAdm();\n         }\n+\n         final String bidId = bid.getId();\n-        bidderToVideoBidIdsToModify.entrySet().stream()\n+        final String modifiedVastXml = bidderToVideoBidIdsToModify.entrySet().stream()\n                 .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                 .findFirst()\n                 .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> {\n-                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n-                });\n+                .map(bidder -> modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n+                .orElse(vastXml);\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml[0]))\n+                .value(new TextNode(modifiedVastXml))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 2975117e..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -441,8 +445,7 @@ public class CacheService {\n                 .build();\n     }\n \n-    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId,\n-                                 Long timestamp) {\n+    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId, Long timestamp) {\n         final String closeTag = \"</Impression>\";\n         final int closeTagIndex = stringValue.indexOf(closeTag);\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5OTgwMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393599801", "body": "I like usage of `And` word when we are working with Entry. nice ", "bodyText": "I like usage of And word when we are working with Entry. nice", "bodyHTML": "<p dir=\"auto\">I like usage of <code>And</code> word when we are working with Entry. nice</p>", "author": "DGarbar", "createdAt": "2020-03-17T11:06:27Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -407,8 +413,11 @@ private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> vide\n         }\n \n         final String bidId = bid.getId();\n-        if (CollectionUtils.isNotEmpty(videoBidIdsToModify) && videoBidIdsToModify.contains(bidId)) {\n-            vastXml = modifyVastXml(vastXml, bidId, accountId);\n+        for (Map.Entry<String, List<String>> biddersAndBidIds : bidderToVideoBidIdsToModify.entrySet()) {", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 28831f61..61b4ce94 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -399,35 +413,36 @@ public class CacheService {\n      */\n     private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid,\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n-                                                String accountId, long timestamp) {\n+                                                String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        String vastXml;\n+        final String[] vastXml = new String[1];\n         if (bid.getAdm() == null) {\n-            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml = bid.getAdm();\n+            vastXml[0] = bid.getAdm();\n         }\n-\n         final String bidId = bid.getId();\n-        for (Map.Entry<String, List<String>> biddersAndBidIds : bidderToVideoBidIdsToModify.entrySet()) {\n-            if (biddersAndBidIds.getValue().contains(bidId)) {\n-                vastXml = modifyVastXml(vastXml, bidId, biddersAndBidIds.getKey(), accountId, timestamp);\n-                break;\n-            }\n-        }\n+        bidderToVideoBidIdsToModify.entrySet().stream()\n+                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n+                .findFirst()\n+                .map(Map.Entry::getKey)\n+                .ifPresent(bidder -> {\n+                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n+                });\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml))\n+                .value(new TextNode(vastXml[0]))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }\n \n-    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId, long timestamp) {\n+    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId,\n+                                 Long timestamp) {\n         final String closeTag = \"</Impression>\";\n         final int closeTagIndex = stringValue.indexOf(closeTag);\n \n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 61b4ce94..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -415,34 +419,33 @@ public class CacheService {\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        final String[] vastXml = new String[1];\n+        String vastXml;\n         if (bid.getAdm() == null) {\n-            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml[0] = bid.getAdm();\n+            vastXml = bid.getAdm();\n         }\n+\n         final String bidId = bid.getId();\n-        bidderToVideoBidIdsToModify.entrySet().stream()\n+        final String modifiedVastXml = bidderToVideoBidIdsToModify.entrySet().stream()\n                 .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                 .findFirst()\n                 .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> {\n-                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n-                });\n+                .map(bidder -> modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n+                .orElse(vastXml);\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml[0]))\n+                .value(new TextNode(modifiedVastXml))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }\n \n-    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId,\n-                                 Long timestamp) {\n+    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId, Long timestamp) {\n         final String closeTag = \"</Impression>\";\n         final int closeTagIndex = stringValue.indexOf(closeTag);\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMjc4Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393602786", "body": "        final String vastUrlTracking = eventsService.vastUrlTracking(bidId, bidder, accountId, timestamp);\r\n        final String impressionUrl = \"<![CDATA[\" + vastUrlTracking + \"]]>\";", "bodyText": "final String vastUrlTracking = eventsService.vastUrlTracking(bidId, bidder, accountId, timestamp);\n    final String impressionUrl = \"<![CDATA[\" + vastUrlTracking + \"]]>\";", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    final String vastUrlTracking = eventsService.vastUrlTracking(bidId, bidder, accountId, timestamp);\n    final String impressionUrl = &quot;&lt;![CDATA[&quot; + vastUrlTracking + &quot;]]&gt;&quot;;\"><pre><code>    final String vastUrlTracking = eventsService.vastUrlTracking(bidId, bidder, accountId, timestamp);\n    final String impressionUrl = \"&lt;![CDATA[\" + vastUrlTracking + \"]]&gt;\";\n</code></pre></div>", "author": "DGarbar", "createdAt": "2020-03-17T11:12:12Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -427,7 +436,8 @@ private String modifyVastXml(String stringValue, String bidId, String accountId)\n             return stringValue;\n         }\n \n-        final String impressionUrl = \"<![CDATA[\" + eventsService.vastUrlTracking(bidId, accountId) + \"]]>\";\n+        final String impressionUrl = \"<![CDATA[\" + eventsService.vastUrlTracking(bidId, bidder,", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66786a6cd808ee7be85f1cbf4de74ddce0f2f656", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 28831f61..5b7260a0 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -436,10 +436,9 @@ public class CacheService {\n             return stringValue;\n         }\n \n-        final String impressionUrl = \"<![CDATA[\" + eventsService.vastUrlTracking(bidId, bidder,\n-                accountId, timestamp) + \"]]>\";\n+        final String vastUrlTracking = eventsService.vastUrlTracking(bidId, bidder, accountId, auctionTimestamp);\n+        final String impressionUrl = \"<![CDATA[\" + vastUrlTracking + \"]]>\";\n         final String openTag = \"<Impression>\";\n-\n         // empty impression tag - just insert the link\n         if (closeTagIndex - stringValue.indexOf(openTag) == openTag.length()) {\n             return stringValue.replaceFirst(openTag, openTag + impressionUrl);\n", "next_change": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 5b7260a0..142ead26 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -436,9 +452,10 @@ public class CacheService {\n             return stringValue;\n         }\n \n-        final String vastUrlTracking = eventsService.vastUrlTracking(bidId, bidder, accountId, auctionTimestamp);\n+        final String vastUrlTracking = eventsService.vastUrlTracking(bidId, bidder, accountId, timestamp);\n         final String impressionUrl = \"<![CDATA[\" + vastUrlTracking + \"]]>\";\n         final String openTag = \"<Impression>\";\n+\n         // empty impression tag - just insert the link\n         if (closeTagIndex - stringValue.indexOf(openTag) == openTag.length()) {\n             return stringValue.replaceFirst(openTag, openTag + impressionUrl);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNDIwMg==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393604202", "body": "I am not sure if it good idea to use primitives.", "bodyText": "I am not sure if it good idea to use primitives.", "bodyHTML": "<p dir=\"auto\">I am not sure if it good idea to use primitives.</p>", "author": "DGarbar", "createdAt": "2020-03-17T11:15:03Z", "path": "src/main/java/org/prebid/server/events/EventRequest.java", "diffHunk": "@@ -14,12 +14,17 @@\n \n     String bidId;\n \n+    String bidder;\n+\n     String accountId;\n \n     Format format;\n \n     Analytics analytics;\n \n+    // According to requirements can not be null\n+    long timestamp;", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventRequest.java b/src/main/java/org/prebid/server/events/EventRequest.java\nindex 097b3efd..7c7e1c69 100644\n--- a/src/main/java/org/prebid/server/events/EventRequest.java\n+++ b/src/main/java/org/prebid/server/events/EventRequest.java\n", "chunk": "@@ -22,8 +22,7 @@ public class EventRequest {\n \n     Analytics analytics;\n \n-    // According to requirements can not be null\n-    long timestamp;\n+    Long timestamp;\n \n     public enum Type {\n \n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventRequest.java b/src/main/java/org/prebid/server/events/EventRequest.java\nindex 7c7e1c69..cf631b33 100644\n--- a/src/main/java/org/prebid/server/events/EventRequest.java\n+++ b/src/main/java/org/prebid/server/events/EventRequest.java\n", "chunk": "@@ -14,16 +14,16 @@ public class EventRequest {\n \n     String bidId;\n \n+    String accountId;\n+\n     String bidder;\n \n-    String accountId;\n+    Long timestamp;\n \n     Format format;\n \n     Analytics analytics;\n \n-    Long timestamp;\n-\n     public enum Type {\n \n         win, imp\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzA5OA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393687098", "body": "Why this method is never used ? ", "bodyText": "Why this method is never used ?", "bodyHTML": "<p dir=\"auto\">Why this method is never used ?</p>", "author": "DGarbar", "createdAt": "2020-03-17T13:41:49Z", "path": "src/main/java/org/prebid/server/events/EventUtil.java", "diffHunk": "@@ -50,6 +52,14 @@ public static void validateBidId(RoutingContext context) {\n         }\n     }\n \n+    public static void validateBiddder(RoutingContext context) {", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventUtil.java b/src/main/java/org/prebid/server/events/EventUtil.java\nindex 4608c174..8fb4f683 100644\n--- a/src/main/java/org/prebid/server/events/EventUtil.java\n+++ b/src/main/java/org/prebid/server/events/EventUtil.java\n", "chunk": "@@ -44,22 +45,6 @@ public class EventUtil {\n         }\n     }\n \n-    public static void validateBidId(RoutingContext context) {\n-        final String bidId = context.request().params().get(BID_ID_PARAMETER);\n-        if (StringUtils.isBlank(bidId)) {\n-            throw new IllegalArgumentException(String.format(\n-                    \"BidId '%s' is required query parameter and can't be empty\", BID_ID_PARAMETER));\n-        }\n-    }\n-\n-    public static void validateBiddder(RoutingContext context) {\n-        final String bidder = context.request().params().get(BIDDER_PARAMETER);\n-        if (StringUtils.isBlank(bidder)) {\n-            throw new IllegalArgumentException(String.format(\n-                    \"Bidder '%s' is required query parameter and can't be empty\", BIDDER_PARAMETER));\n-        }\n-    }\n-\n     public static void validateAccountId(RoutingContext context) {\n         final String accountId = context.request().params().get(ACCOUNT_ID_PARAMETER);\n         if (StringUtils.isBlank(accountId)) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwMjE4OA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393702188", "body": "Dot you need to update TEMPLATE_URL to use ts and bidder parameters?\r\n\r\nAnd `toUrl` method", "bodyText": "Dot you need to update TEMPLATE_URL to use ts and bidder parameters?\nAnd toUrl method", "bodyHTML": "<p dir=\"auto\">Dot you need to update TEMPLATE_URL to use ts and bidder parameters?</p>\n<p dir=\"auto\">And <code>toUrl</code> method</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:03:47Z", "path": "src/main/java/org/prebid/server/events/EventUtil.java", "diffHunk": "@@ -18,6 +19,7 @@\n     private static final String IMP_TYPE = \"imp\";\n \n     private static final String BID_ID_PARAMETER = \"b\";\n+    private static final String BIDDER_PARAMETER = \"bidder\";", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventUtil.java b/src/main/java/org/prebid/server/events/EventUtil.java\nindex 4608c174..6988e563 100644\n--- a/src/main/java/org/prebid/server/events/EventUtil.java\n+++ b/src/main/java/org/prebid/server/events/EventUtil.java\n", "chunk": "@@ -21,6 +20,7 @@ public class EventUtil {\n     private static final String BID_ID_PARAMETER = \"b\";\n     private static final String BIDDER_PARAMETER = \"bidder\";\n     private static final String ACCOUNT_ID_PARAMETER = \"a\";\n+    private static final String TIMESTAMP_PARAMETER = \"ts\";\n \n     // Optional query string parameters\n \n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventUtil.java b/src/main/java/org/prebid/server/events/EventUtil.java\nindex 6988e563..8fb4f683 100644\n--- a/src/main/java/org/prebid/server/events/EventUtil.java\n+++ b/src/main/java/org/prebid/server/events/EventUtil.java\n", "chunk": "@@ -18,12 +18,13 @@ public class EventUtil {\n     private static final String IMP_TYPE = \"imp\";\n \n     private static final String BID_ID_PARAMETER = \"b\";\n-    private static final String BIDDER_PARAMETER = \"bidder\";\n     private static final String ACCOUNT_ID_PARAMETER = \"a\";\n-    private static final String TIMESTAMP_PARAMETER = \"ts\";\n \n     // Optional query string parameters\n \n+    private static final String BIDDER_PARAMETER = \"bidder\";\n+    private static final String TIMESTAMP_PARAMETER = \"ts\";\n+\n     private static final String FORMAT_PARAMETER = \"f\";\n     private static final String BLANK_FORMAT = \"b\"; // default\n     private static final String IMAGE_FORMAT = \"i\";\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNjY3MA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393706670", "body": "Are you sure, you do not get it from url as `eventTimeMillis` ?", "bodyText": "Are you sure, you do not get it from url as eventTimeMillis ?", "bodyHTML": "<p dir=\"auto\">Are you sure, you do not get it from url as <code>eventTimeMillis</code> ?</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:10:08Z", "path": "src/main/java/org/prebid/server/events/EventUtil.java", "diffHunk": "@@ -93,9 +103,11 @@ public static EventRequest from(RoutingContext context) {\n         return EventRequest.builder()\n                 .type(type)\n                 .bidId(queryParams.get(BID_ID_PARAMETER))\n+                .bidder(queryParams.get(BIDDER_PARAMETER))\n                 .accountId(queryParams.get(ACCOUNT_ID_PARAMETER))\n                 .format(format)\n                 .analytics(analytics)\n+                .timestamp(Instant.now().toEpochMilli())", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventUtil.java b/src/main/java/org/prebid/server/events/EventUtil.java\nindex 4608c174..6988e563 100644\n--- a/src/main/java/org/prebid/server/events/EventUtil.java\n+++ b/src/main/java/org/prebid/server/events/EventUtil.java\n", "chunk": "@@ -103,11 +111,9 @@ public class EventUtil {\n         return EventRequest.builder()\n                 .type(type)\n                 .bidId(queryParams.get(BID_ID_PARAMETER))\n-                .bidder(queryParams.get(BIDDER_PARAMETER))\n                 .accountId(queryParams.get(ACCOUNT_ID_PARAMETER))\n                 .format(format)\n                 .analytics(analytics)\n-                .timestamp(Instant.now().toEpochMilli())\n                 .build();\n     }\n \n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventUtil.java b/src/main/java/org/prebid/server/events/EventUtil.java\nindex 6988e563..8fb4f683 100644\n--- a/src/main/java/org/prebid/server/events/EventUtil.java\n+++ b/src/main/java/org/prebid/server/events/EventUtil.java\n", "chunk": "@@ -108,10 +105,15 @@ public class EventUtil {\n                 queryParams.get(ANALYTICS_PARAMETER))\n                 ? EventRequest.Analytics.disabled : EventRequest.Analytics.enabled;\n \n+        final String timestampAsString = StringUtils.stripToNull(queryParams.get(TIMESTAMP_PARAMETER));\n+        final Long timestamp = timestampAsString != null ? Long.valueOf(timestampAsString) : null;\n+\n         return EventRequest.builder()\n                 .type(type)\n                 .bidId(queryParams.get(BID_ID_PARAMETER))\n                 .accountId(queryParams.get(ACCOUNT_ID_PARAMETER))\n+                .bidder(queryParams.get(BIDDER_PARAMETER))\n+                .timestamp(timestamp)\n                 .format(format)\n                 .analytics(analytics)\n                 .build();\n", "next_change": null}, {"header": "diff --git a/src/main/java/org/prebid/server/events/EventUtil.java b/src/main/java/org/prebid/server/events/EventUtil.java\nindex 6988e563..8fb4f683 100644\n--- a/src/main/java/org/prebid/server/events/EventUtil.java\n+++ b/src/main/java/org/prebid/server/events/EventUtil.java\n", "chunk": "@@ -121,29 +123,39 @@ public class EventUtil {\n         final String urlWithRequiredParameters = String.format(TEMPLATE_URL, externalUrl,\n                 eventRequest.getType(),\n                 eventRequest.getBidId(),\n-                eventRequest.getAccountId(),\n-                eventRequest.getTimestamp(),\n-                eventRequest.getBidder());\n+                eventRequest.getAccountId());\n+\n+        return urlWithRequiredParameters + optionalParameters(eventRequest);\n+    }\n+\n+    private static String optionalParameters(EventRequest eventRequest) {\n+        final StringBuilder result = new StringBuilder();\n+\n+        // timestamp\n+        if (eventRequest.getTimestamp() != null) {\n+            result.append(nameValueAsQueryString(TIMESTAMP_PARAMETER, eventRequest.getTimestamp().toString()));\n+        }\n+\n+        // bidder\n+        if (eventRequest.getBidder() != null) {\n+            result.append(nameValueAsQueryString(BIDDER_PARAMETER, eventRequest.getBidder()));\n+        }\n \n-        final String formatQueryString;\n+        // format\n         if (eventRequest.getFormat() == EventRequest.Format.blank) {\n-            formatQueryString = nameValueAsQueryString(FORMAT_PARAMETER, BLANK_FORMAT);\n+            result.append(nameValueAsQueryString(FORMAT_PARAMETER, BLANK_FORMAT));\n         } else if (eventRequest.getFormat() == EventRequest.Format.image) {\n-            formatQueryString = nameValueAsQueryString(FORMAT_PARAMETER, IMAGE_FORMAT);\n-        } else {\n-            formatQueryString = StringUtils.EMPTY; // skip parameter\n+            result.append(nameValueAsQueryString(FORMAT_PARAMETER, IMAGE_FORMAT));\n         }\n \n-        final String analyticsQueryString;\n+        // analytics\n         if (eventRequest.getAnalytics() == EventRequest.Analytics.enabled) {\n-            analyticsQueryString = nameValueAsQueryString(ANALYTICS_PARAMETER, ENABLED_ANALYTICS);\n+            result.append(nameValueAsQueryString(ANALYTICS_PARAMETER, ENABLED_ANALYTICS));\n         } else if (eventRequest.getAnalytics() == EventRequest.Analytics.disabled) {\n-            analyticsQueryString = nameValueAsQueryString(ANALYTICS_PARAMETER, DISABLED_ANALYTICS);\n-        } else {\n-            analyticsQueryString = StringUtils.EMPTY; // skip parameter\n+            result.append(nameValueAsQueryString(ANALYTICS_PARAMETER, DISABLED_ANALYTICS));\n         }\n \n-        return urlWithRequiredParameters + formatQueryString + analyticsQueryString;\n+        return result.toString();\n     }\n \n     private static String nameValueAsQueryString(String name, String value) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwODE0Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393708146", "body": "Do you really need to call EventUtill to get hardcoded value ?", "bodyText": "Do you really need to call EventUtill to get hardcoded value ?", "bodyHTML": "<p dir=\"auto\">Do you really need to call EventUtill to get hardcoded value ?</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:12:12Z", "path": "src/main/java/org/prebid/server/handler/VtrackHandler.java", "diffHunk": "@@ -132,8 +134,9 @@ private void handleAccountResult(AsyncResult<Account> asyncAccount, RoutingConte\n             final Set<String> biddersAllowingVastUpdate = Objects.equals(asyncAccount.result().getEventsEnabled(), true)\n                     ? biddersAllowingVastUpdate(vtrackPuts)\n                     : Collections.emptySet();\n-\n-            cacheService.cachePutObjects(vtrackPuts, biddersAllowingVastUpdate, accountId, timeout)\n+            final EventRequest eventRequest = EventUtil.from(context);\n+            final long timestamp = eventRequest.getTimestamp();", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/handler/VtrackHandler.java b/src/main/java/org/prebid/server/handler/VtrackHandler.java\nindex fb20e77d..64cc1f08 100644\n--- a/src/main/java/org/prebid/server/handler/VtrackHandler.java\n+++ b/src/main/java/org/prebid/server/handler/VtrackHandler.java\n", "chunk": "@@ -134,8 +144,6 @@ public class VtrackHandler implements Handler<RoutingContext> {\n             final Set<String> biddersAllowingVastUpdate = Objects.equals(asyncAccount.result().getEventsEnabled(), true)\n                     ? biddersAllowingVastUpdate(vtrackPuts)\n                     : Collections.emptySet();\n-            final EventRequest eventRequest = EventUtil.from(context);\n-            final long timestamp = eventRequest.getTimestamp();\n             cacheService.cachePutObjects(vtrackPuts, biddersAllowingVastUpdate, accountId, timeout, timestamp)\n                     .setHandler(asyncCache -> handleCacheResult(asyncCache, context));\n         }\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/handler/VtrackHandler.java b/src/main/java/org/prebid/server/handler/VtrackHandler.java\nindex 64cc1f08..4ea4bb10 100644\n--- a/src/main/java/org/prebid/server/handler/VtrackHandler.java\n+++ b/src/main/java/org/prebid/server/handler/VtrackHandler.java\n", "chunk": "@@ -144,7 +132,7 @@ public class VtrackHandler implements Handler<RoutingContext> {\n             final Set<String> biddersAllowingVastUpdate = Objects.equals(asyncAccount.result().getEventsEnabled(), true)\n                     ? biddersAllowingVastUpdate(vtrackPuts)\n                     : Collections.emptySet();\n-            cacheService.cachePutObjects(vtrackPuts, biddersAllowingVastUpdate, accountId, timeout, timestamp)\n+            cacheService.cachePutObjects(vtrackPuts, biddersAllowingVastUpdate, accountId, timeout)\n                     .setHandler(asyncCache -> handleCacheResult(asyncCache, context));\n         }\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMTE0NA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393711144", "body": "final", "bodyText": "final", "bodyHTML": "<p dir=\"auto\">final</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:16:20Z", "path": "src/test/java/org/prebid/server/it/ApplicationTest.java", "diffHunk": "@@ -445,11 +445,13 @@ public void vtrackShouldReturnJsonWithUids() throws JSONException, IOException {\n                 .when()\n                 .body(jsonFrom(\"vtrack/test-vtrack-request.json\"))\n                 .queryParam(\"a\", \"14062\")\n+                .queryParam(\"t\", \"win\")\n                 .post(\"/vtrack\");\n \n         // then\n+        String actualStr = response.asString();", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/it/ApplicationTest.java b/src/test/java/org/prebid/server/it/ApplicationTest.java\nindex e4249e92..6990bac1 100644\n--- a/src/test/java/org/prebid/server/it/ApplicationTest.java\n+++ b/src/test/java/org/prebid/server/it/ApplicationTest.java\n", "chunk": "@@ -445,13 +445,12 @@ public class ApplicationTest extends IntegrationTest {\n                 .when()\n                 .body(jsonFrom(\"vtrack/test-vtrack-request.json\"))\n                 .queryParam(\"a\", \"14062\")\n-                .queryParam(\"t\", \"win\")\n+                .queryParam(\"ts\", \"1000\")\n                 .post(\"/vtrack\");\n \n         // then\n-        String actualStr = response.asString();\n         JSONAssert.assertEquals(\"{\\\"responses\\\":[{\\\"uuid\\\":\\\"94531ab8-c662-4fc7-904e-6b5d3be43b1a\\\"}]}\",\n-                actualStr, JSONCompareMode.NON_EXTENSIBLE);\n+                response.asString(), JSONCompareMode.NON_EXTENSIBLE);\n     }\n \n     @Test\n", "next_change": {"commit": "bf3464c43ef00000f6aaab79942df98c69e17f58", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/it/ApplicationTest.java b/src/test/java/org/prebid/server/it/ApplicationTest.java\nindex 6990bac1..740b5d4a 100644\n--- a/src/test/java/org/prebid/server/it/ApplicationTest.java\n+++ b/src/test/java/org/prebid/server/it/ApplicationTest.java\n", "chunk": "@@ -456,7 +458,7 @@ public class ApplicationTest extends IntegrationTest {\n     @Test\n     public void optionsRequestShouldRespondWithOriginalPolicyHeaders() {\n         // when\n-        final Response response = given(spec)\n+        final Response response = given(SPEC)\n                 .header(\"Origin\", \"origin.com\")\n                 .header(\"Access-Control-Request-Method\", \"GET\")\n                 .when()\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMjY0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393712642", "body": "why do you need this value ?", "bodyText": "why do you need this value ?", "bodyHTML": "<p dir=\"auto\">why do you need this value ?</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:18:19Z", "path": "src/test/java/org/prebid/server/it/ApplicationTest.java", "diffHunk": "@@ -445,11 +445,13 @@ public void vtrackShouldReturnJsonWithUids() throws JSONException, IOException {\n                 .when()\n                 .body(jsonFrom(\"vtrack/test-vtrack-request.json\"))\n                 .queryParam(\"a\", \"14062\")\n+                .queryParam(\"t\", \"win\")", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/it/ApplicationTest.java b/src/test/java/org/prebid/server/it/ApplicationTest.java\nindex e4249e92..6990bac1 100644\n--- a/src/test/java/org/prebid/server/it/ApplicationTest.java\n+++ b/src/test/java/org/prebid/server/it/ApplicationTest.java\n", "chunk": "@@ -445,13 +445,12 @@ public class ApplicationTest extends IntegrationTest {\n                 .when()\n                 .body(jsonFrom(\"vtrack/test-vtrack-request.json\"))\n                 .queryParam(\"a\", \"14062\")\n-                .queryParam(\"t\", \"win\")\n+                .queryParam(\"ts\", \"1000\")\n                 .post(\"/vtrack\");\n \n         // then\n-        String actualStr = response.asString();\n         JSONAssert.assertEquals(\"{\\\"responses\\\":[{\\\"uuid\\\":\\\"94531ab8-c662-4fc7-904e-6b5d3be43b1a\\\"}]}\",\n-                actualStr, JSONCompareMode.NON_EXTENSIBLE);\n+                response.asString(), JSONCompareMode.NON_EXTENSIBLE);\n     }\n \n     @Test\n", "next_change": {"commit": "bf3464c43ef00000f6aaab79942df98c69e17f58", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/it/ApplicationTest.java b/src/test/java/org/prebid/server/it/ApplicationTest.java\nindex 6990bac1..740b5d4a 100644\n--- a/src/test/java/org/prebid/server/it/ApplicationTest.java\n+++ b/src/test/java/org/prebid/server/it/ApplicationTest.java\n", "chunk": "@@ -456,7 +458,7 @@ public class ApplicationTest extends IntegrationTest {\n     @Test\n     public void optionsRequestShouldRespondWithOriginalPolicyHeaders() {\n         // when\n-        final Response response = given(spec)\n+        final Response response = given(SPEC)\n                 .header(\"Origin\", \"origin.com\")\n                 .header(\"Access-Control-Request-Method\", \"GET\")\n                 .when()\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMzA3MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393713071", "body": "you can just add `L` at the end", "bodyText": "you can just add L at the end", "bodyHTML": "<p dir=\"auto\">you can just add <code>L</code> at the end</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:18:52Z", "path": "src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java", "diffHunk": "@@ -440,15 +440,15 @@ public void shouldRespondWithDebugInfoIncludedIfExtPrebidDebugIsOn() {\n         given(exchangeService.holdAuction(any()))\n                 .willReturn(givenBidResponseWithExt(mapper.valueToTree(\n                         ExtBidResponse.of(ExtResponseDebug.of(null, auctionContext.getBidRequest()), null, null, null,\n-                                null))));\n+                                null, (long )1000))));", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\nindex 2a169eb3..4f518460 100644\n--- a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n+++ b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n", "chunk": "@@ -440,7 +440,7 @@ public class AmpHandlerTest extends VertxTest {\n         given(exchangeService.holdAuction(any()))\n                 .willReturn(givenBidResponseWithExt(mapper.valueToTree(\n                         ExtBidResponse.of(ExtResponseDebug.of(null, auctionContext.getBidRequest()), null, null, null,\n-                                null, (long )1000))));\n+                                null, 1000L))));\n \n         // when\n         ampHandler.handle(routingContext);\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\nindex 4f518460..a4731aa4 100644\n--- a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n+++ b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n", "chunk": "@@ -440,7 +440,7 @@ public class AmpHandlerTest extends VertxTest {\n         given(exchangeService.holdAuction(any()))\n                 .willReturn(givenBidResponseWithExt(mapper.valueToTree(\n                         ExtBidResponse.of(ExtResponseDebug.of(null, auctionContext.getBidRequest()), null, null, null,\n-                                null, 1000L))));\n+                                null, (long )1000))));\n \n         // when\n         ampHandler.handle(routingContext);\n", "next_change": {"commit": "bf3464c43ef00000f6aaab79942df98c69e17f58", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\nindex a4731aa4..9b7a1863 100644\n--- a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n+++ b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n", "chunk": "@@ -440,14 +440,14 @@ public class AmpHandlerTest extends VertxTest {\n         given(exchangeService.holdAuction(any()))\n                 .willReturn(givenBidResponseWithExt(mapper.valueToTree(\n                         ExtBidResponse.of(ExtResponseDebug.of(null, auctionContext.getBidRequest()), null, null, null,\n-                                null, (long )1000))));\n+                                null, 1000L))));\n \n         // when\n         ampHandler.handle(routingContext);\n \n         // then\n         verify(httpResponse).end(\n-                eq(\"{\\\"targeting\\\":{},\\\"debug\\\":{\\\"resolvedrequest\\\":{\\\"id\\\":\\\"reqId1\\\",\\\"imp\\\":[],\\\"tmax\\\":1000,\"\n+                eq(\"{\\\"targeting\\\":{},\\\"debug\\\":{\\\"resolvedrequest\\\":{\\\"id\\\":\\\"reqId1\\\",\\\"imp\\\":[],\\\"tmax\\\":5000,\"\n                         + \"\\\"ext\\\":{\\\"prebid\\\":{\\\"debug\\\":1}}}}}\"));\n     }\n \n", "next_change": null}]}}, {"header": "diff --git a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\nindex 4f518460..a4731aa4 100644\n--- a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n+++ b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n", "chunk": "@@ -448,7 +448,7 @@ public class AmpHandlerTest extends VertxTest {\n         // then\n         verify(httpResponse).end(\n                 eq(\"{\\\"targeting\\\":{},\\\"debug\\\":{\\\"resolvedrequest\\\":{\\\"id\\\":\\\"reqId1\\\",\\\"imp\\\":[],\\\"tmax\\\":1000,\"\n-                        + \"\\\"ext\\\":{\\\"prebid\\\":{\\\"debug\\\":1,\\\"timestamp\\\":0}}}}}\"));\n+                        + \"\\\"ext\\\":{\\\"prebid\\\":{\\\"debug\\\":1}}}}}\"));\n     }\n \n     @Test\n", "next_change": {"commit": "bf3464c43ef00000f6aaab79942df98c69e17f58", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\nindex a4731aa4..9b7a1863 100644\n--- a/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n+++ b/src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java\n", "chunk": "@@ -440,14 +440,14 @@ public class AmpHandlerTest extends VertxTest {\n         given(exchangeService.holdAuction(any()))\n                 .willReturn(givenBidResponseWithExt(mapper.valueToTree(\n                         ExtBidResponse.of(ExtResponseDebug.of(null, auctionContext.getBidRequest()), null, null, null,\n-                                null, (long )1000))));\n+                                null, 1000L))));\n \n         // when\n         ampHandler.handle(routingContext);\n \n         // then\n         verify(httpResponse).end(\n-                eq(\"{\\\"targeting\\\":{},\\\"debug\\\":{\\\"resolvedrequest\\\":{\\\"id\\\":\\\"reqId1\\\",\\\"imp\\\":[],\\\"tmax\\\":1000,\"\n+                eq(\"{\\\"targeting\\\":{},\\\"debug\\\":{\\\"resolvedrequest\\\":{\\\"id\\\":\\\"reqId1\\\",\\\"imp\\\":[],\\\"tmax\\\":5000,\"\n                         + \"\\\"ext\\\":{\\\"prebid\\\":{\\\"debug\\\":1}}}}}\"));\n     }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNDM5MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393714391", "body": "this also should include `ts` and `bidder` parameters", "bodyText": "this also should include ts and bidder parameters", "bodyHTML": "<p dir=\"auto\">this also should include <code>ts</code> and <code>bidder</code> parameters</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:20:40Z", "path": "src/test/java/org/prebid/server/handler/VtrackHandlerTest.java", "diffHunk": "@@ -312,16 +338,20 @@ public void shouldSendToCacheExpectedPutsAndUpdatableUnknownBiddersWhenUnknownBi\n \n         given(applicationSettings.getAccountById(any(), any()))\n                 .willReturn(Future.succeededFuture(Account.builder().eventsEnabled(true).build()));\n-        given(cacheService.cachePutObjects(any(), any(), any(), any()))\n+        given(cacheService.cachePutObjects(any(), any(), any(), any(), anyLong()))\n                 .willReturn(Future.succeededFuture(BidCacheResponse.of(\n                         asList(CacheObject.of(\"uuid1\"), CacheObject.of(\"uuid2\")))));\n+        given(httpRequest.params()).willReturn(MultiMap.caseInsensitiveMultiMap()\n+                .add(\"t\", \"win\")\n+                .add(\"b\", \"bidId\")\n+                .add(\"a\", \"accountId\"));", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java b/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\nindex 26b1b36b..86836e9e 100644\n--- a/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\n+++ b/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\n", "chunk": "@@ -344,7 +346,9 @@ public class VtrackHandlerTest extends VertxTest {\n         given(httpRequest.params()).willReturn(MultiMap.caseInsensitiveMultiMap()\n                 .add(\"t\", \"win\")\n                 .add(\"b\", \"bidId\")\n-                .add(\"a\", \"accountId\"));\n+                .add(\"a\", \"accountId\")\n+                .add(\"ts\", \"1000\")\n+                .add(\"bidder\",\"bidder\"));\n \n         // when\n         handler.handle(routingContext);\n", "next_change": {"commit": "bf3464c43ef00000f6aaab79942df98c69e17f58", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java b/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\nindex 86836e9e..ca828554 100644\n--- a/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\n+++ b/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\n", "chunk": "@@ -348,7 +369,7 @@ public class VtrackHandlerTest extends VertxTest {\n                 .add(\"b\", \"bidId\")\n                 .add(\"a\", \"accountId\")\n                 .add(\"ts\", \"1000\")\n-                .add(\"bidder\",\"bidder\"));\n+                .add(\"bidder\", \"bidder\"));\n \n         // when\n         handler.handle(routingContext);\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java b/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\nindex ca828554..38a3605e 100644\n--- a/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\n+++ b/src/test/java/org/prebid/server/handler/VtrackHandlerTest.java\n", "chunk": "@@ -357,26 +319,19 @@ public class VtrackHandlerTest extends VertxTest {\n                 .willReturn(givenVtrackRequest(putObjects));\n \n         given(bidderCatalog.isValidName(any())).willReturn(false);\n-        given(bidderCatalog.isModifyingVastXmlAllowed(any())).willReturn(false);\n \n         given(applicationSettings.getAccountById(any(), any()))\n                 .willReturn(Future.succeededFuture(Account.builder().eventsEnabled(true).build()));\n-        given(cacheService.cachePutObjects(any(), any(), any(), any(), anyLong()))\n+        given(cacheService.cachePutObjects(any(), any(), any(), any()))\n                 .willReturn(Future.succeededFuture(BidCacheResponse.of(\n                         asList(CacheObject.of(\"uuid1\"), CacheObject.of(\"uuid2\")))));\n-        given(httpRequest.params()).willReturn(MultiMap.caseInsensitiveMultiMap()\n-                .add(\"t\", \"win\")\n-                .add(\"b\", \"bidId\")\n-                .add(\"a\", \"accountId\")\n-                .add(\"ts\", \"1000\")\n-                .add(\"bidder\", \"bidder\"));\n \n         // when\n         handler.handle(routingContext);\n \n         // then\n         final HashSet<String> expectedBidders = new HashSet<>(asList(\"bidder\", \"updatable_bidder\"));\n-        verify(cacheService).cachePutObjects(eq(putObjects), eq(expectedBidders), eq(\"accountId\"), any(), anyLong());\n+        verify(cacheService).cachePutObjects(eq(putObjects), eq(expectedBidders), eq(\"accountId\"), any());\n \n         verify(httpResponse).end(eq(\"{\\\"responses\\\":[{\\\"uuid\\\":\\\"uuid1\\\"},{\\\"uuid\\\":\\\"uuid2\\\"}]}\"));\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNTc1Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393715756", "body": "where `ts` and `bidder` parameter", "bodyText": "where ts and bidder parameter", "bodyHTML": "<p dir=\"auto\">where <code>ts</code> and <code>bidder</code> parameter</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:22:30Z", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -35,7 +35,7 @@ public void createEventsShouldReturnExpectedEvent() {\n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000);\n \n         // then\n         assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex dc822b66..dd06920d 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -24,29 +25,29 @@ public class EventsServiceTest {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000);\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000);\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n     public void vastUrlTrackingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"bidder\",\"accountId\", 1000);\n+        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&f=b\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n     }\n }\n", "next_change": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex dd06920d..e0b475c4 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -43,11 +43,11 @@ public class EventsServiceTest {\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlTrackingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrlTargeting = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n }\n", "next_change": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex e0b475c4..06000b4e 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -43,11 +43,11 @@ public class EventsServiceTest {\n     }\n \n     @Test\n-    public void winUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n }\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 06000b4e..7359e43e 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -45,7 +44,16 @@ public class EventsServiceTest {\n     @Test\n     public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+\n+        // then\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+    }\n+\n+    @Test\n+    public void vastUrlShouldReturnExpectedUrl() {\n+        // when\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n         assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n", "next_change": {"commit": "c5656d5a4b2feddcd01fc8657c201b3ddeb711f4", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 7359e43e..2ee78221 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -53,9 +53,9 @@ public class EventsServiceTest {\n     @Test\n     public void vastUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+        final String vastUrl = eventsService.vastUrlTracking(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(vastUrl).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNTc5Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393715792", "body": "where `ts` and `bidder` parameter", "bodyText": "where ts and bidder parameter", "bodyHTML": "<p dir=\"auto\">where <code>ts</code> and <code>bidder</code> parameter</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:22:34Z", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -44,7 +44,7 @@ public void winUrlTargetingShouldReturnExpectedUrl() {\n     @Test\n     public void vastUrlTrackingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"accountId\");\n+        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"bidder\",\"accountId\", 1000);\n \n         // then\n         assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&f=b\");", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex dc822b66..dd06920d 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -24,29 +25,29 @@ public class EventsServiceTest {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000);\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000);\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n     public void vastUrlTrackingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"bidder\",\"accountId\", 1000);\n+        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&f=b\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n     }\n }\n", "next_change": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex dd06920d..e0b475c4 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -43,11 +43,11 @@ public class EventsServiceTest {\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlTrackingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrlTargeting = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n }\n", "next_change": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex e0b475c4..06000b4e 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -43,11 +43,11 @@ public class EventsServiceTest {\n     }\n \n     @Test\n-    public void winUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n }\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 06000b4e..7359e43e 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -45,7 +44,16 @@ public class EventsServiceTest {\n     @Test\n     public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+\n+        // then\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+    }\n+\n+    @Test\n+    public void vastUrlShouldReturnExpectedUrl() {\n+        // when\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n         assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n", "next_change": {"commit": "c5656d5a4b2feddcd01fc8657c201b3ddeb711f4", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 7359e43e..2ee78221 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -53,9 +53,9 @@ public class EventsServiceTest {\n     @Test\n     public void vastUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+        final String vastUrl = eventsService.vastUrlTracking(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(vastUrl).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNjQ1NA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393716454", "body": "Flaky test.", "bodyText": "Flaky test.", "bodyHTML": "<p dir=\"auto\">Flaky test.</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:23:21Z", "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "diffHunk": "@@ -175,14 +176,14 @@ public void fromShouldReturnExpectedEventRequest() {\n \n         // when\n         final EventRequest result = EventUtil.from(routingContext);\n-\n         // then\n         assertThat(result).isEqualTo(EventRequest.builder()\n                 .type(EventRequest.Type.win)\n                 .bidId(\"bidId\")\n                 .accountId(\"accountId\")\n                 .format(EventRequest.Format.image)\n                 .analytics(EventRequest.Analytics.disabled)\n+                .timestamp(Instant.now().toEpochMilli())", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventUtilTest.java b/src/test/java/org/prebid/server/events/EventUtilTest.java\nindex b5ea8809..d9be9135 100644\n--- a/src/test/java/org/prebid/server/events/EventUtilTest.java\n+++ b/src/test/java/org/prebid/server/events/EventUtilTest.java\n", "chunk": "@@ -183,7 +210,6 @@ public class EventUtilTest {\n                 .accountId(\"accountId\")\n                 .format(EventRequest.Format.image)\n                 .analytics(EventRequest.Analytics.disabled)\n-                .timestamp(Instant.now().toEpochMilli())\n                 .build());\n     }\n \n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventUtilTest.java b/src/test/java/org/prebid/server/events/EventUtilTest.java\nindex d9be9135..34e077d5 100644\n--- a/src/test/java/org/prebid/server/events/EventUtilTest.java\n+++ b/src/test/java/org/prebid/server/events/EventUtilTest.java\n", "chunk": "@@ -195,19 +169,23 @@ public class EventUtilTest {\n         // given\n         given(httpRequest.params()).willReturn(MultiMap.caseInsensitiveMultiMap()\n                 .add(\"t\", \"win\")\n-                .add(\"b\", \"bidId\")\n                 .add(\"a\", \"accountId\")\n+                .add(\"bidder\", \"bidder\")\n+                .add(\"b\", \"bidId\")\n+                .add(\"ts\", \"1000\")\n                 .add(\"f\", \"i\")\n-                .add(\"x\", \"0\")\n-        );\n+                .add(\"x\", \"0\"));\n \n         // when\n         final EventRequest result = EventUtil.from(routingContext);\n+\n         // then\n         assertThat(result).isEqualTo(EventRequest.builder()\n                 .type(EventRequest.Type.win)\n-                .bidId(\"bidId\")\n                 .accountId(\"accountId\")\n+                .bidder(\"bidder\")\n+                .bidId(\"bidId\")\n+                .timestamp(1000L)\n                 .format(EventRequest.Format.image)\n                 .analytics(EventRequest.Analytics.disabled)\n                 .build());\n", "next_change": null}, {"header": "diff --git a/src/test/java/org/prebid/server/events/EventUtilTest.java b/src/test/java/org/prebid/server/events/EventUtilTest.java\nindex d9be9135..34e077d5 100644\n--- a/src/test/java/org/prebid/server/events/EventUtilTest.java\n+++ b/src/test/java/org/prebid/server/events/EventUtilTest.java\n", "chunk": "@@ -218,8 +196,9 @@ public class EventUtilTest {\n         // given\n         given(httpRequest.params()).willReturn(MultiMap.caseInsensitiveMultiMap()\n                 .add(\"t\", \"win\")\n-                .add(\"b\", \"bidId\")\n                 .add(\"a\", \"accountId\")\n+                .add(\"bidder\", \"bidder\")\n+                .add(\"b\", \"bidId\")\n                 .add(\"ts\", \"1000\"));\n \n         // when\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNjUwOA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393716508", "body": "Flaky test.", "bodyText": "Flaky test.", "bodyHTML": "<p dir=\"auto\">Flaky test.</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:23:24Z", "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "diffHunk": "@@ -204,6 +205,7 @@ public void fromShouldReturnExpectedEventRequestWithDefaultFormatAndAnalytics()\n                 .accountId(\"accountId\")\n                 .format(EventRequest.Format.blank)\n                 .analytics(EventRequest.Analytics.enabled)\n+                .timestamp(Instant.now().toEpochMilli())", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventUtilTest.java b/src/test/java/org/prebid/server/events/EventUtilTest.java\nindex b5ea8809..d9be9135 100644\n--- a/src/test/java/org/prebid/server/events/EventUtilTest.java\n+++ b/src/test/java/org/prebid/server/events/EventUtilTest.java\n", "chunk": "@@ -205,7 +232,6 @@ public class EventUtilTest {\n                 .accountId(\"accountId\")\n                 .format(EventRequest.Format.blank)\n                 .analytics(EventRequest.Analytics.enabled)\n-                .timestamp(Instant.now().toEpochMilli())\n                 .build());\n     }\n \n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventUtilTest.java b/src/test/java/org/prebid/server/events/EventUtilTest.java\nindex d9be9135..34e077d5 100644\n--- a/src/test/java/org/prebid/server/events/EventUtilTest.java\n+++ b/src/test/java/org/prebid/server/events/EventUtilTest.java\n", "chunk": "@@ -228,10 +207,12 @@ public class EventUtilTest {\n         // then\n         assertThat(result).isEqualTo(EventRequest.builder()\n                 .type(EventRequest.Type.win)\n-                .bidId(\"bidId\")\n                 .accountId(\"accountId\")\n+                .bidder(\"bidder\")\n+                .bidId(\"bidId\")\n                 .format(EventRequest.Format.blank)\n                 .analytics(EventRequest.Analytics.enabled)\n+                .timestamp(1000L)\n                 .build());\n     }\n \n", "next_change": null}, {"header": "diff --git a/src/test/java/org/prebid/server/events/EventUtilTest.java b/src/test/java/org/prebid/server/events/EventUtilTest.java\nindex d9be9135..34e077d5 100644\n--- a/src/test/java/org/prebid/server/events/EventUtilTest.java\n+++ b/src/test/java/org/prebid/server/events/EventUtilTest.java\n", "chunk": "@@ -240,9 +221,9 @@ public class EventUtilTest {\n         // given\n         final EventRequest eventRequest = EventRequest.builder()\n                 .type(EventRequest.Type.win)\n-                .bidId(\"bidId\")\n-                .bidder(\"bidder\")\n                 .accountId(\"accountId\")\n+                .bidder(\"bidder\")\n+                .bidId(\"bidId\")\n                 .format(EventRequest.Format.blank)\n                 .analytics(EventRequest.Analytics.enabled)\n                 .timestamp(1000L)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDU3MA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393720570", "body": "not any long but `eq(0)`", "bodyText": "not any long but eq(0)", "bodyHTML": "<p dir=\"auto\">not any long but <code>eq(0)</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T14:28:48Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -173,14 +174,14 @@ public void shouldRequestCacheServiceWithExpectedArguments() {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 1000, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid4, bid3, bid2))), eq(emptyList()),\n                 eq(CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).cacheBidsTtl(99)\n-                        .cacheVideoBidsTtl(101).videoBidIdsToModify(emptyList()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout));\n+                        .cacheVideoBidsTtl(101).bidderToVideoBidIdsToModify(emptyMap()).build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..bd9dd57a 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -174,14 +174,14 @@ public class BidResponseCreatorTest extends VertxTest {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 1000, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 1000L, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid4, bid3, bid2))), eq(emptyList()),\n                 eq(CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).cacheBidsTtl(99)\n                         .cacheVideoBidsTtl(101).bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(1000L));\n     }\n \n     @Test\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex bd9dd57a..6460a8b9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -174,14 +174,14 @@ public class BidResponseCreatorTest extends VertxTest {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 1000L, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 1000, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid4, bid3, bid2))), eq(emptyList()),\n                 eq(CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).cacheBidsTtl(99)\n                         .cacheVideoBidsTtl(101).bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(1000L));\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n     }\n \n     @Test\n", "next_change": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..06064a6b 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -177,11 +179,20 @@ public class BidResponseCreatorTest extends VertxTest {\n         bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 1000, false);\n \n         // then\n+        Map<String, List<String>> biddersToCacheBidIds = new HashMap();\n+        biddersToCacheBidIds.put(\"bidder1\", Arrays.asList(\"bidId1\", \"bidId2\"));\n+        biddersToCacheBidIds.put(\"bidder2\", Arrays.asList(\"bidId3\", \"bidId4\"));\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid4, bid3, bid2))), eq(emptyList()),\n-                eq(CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).cacheBidsTtl(99)\n-                        .cacheVideoBidsTtl(101).bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n+                eq(CacheContext.builder()\n+                        .shouldCacheBids(true)\n+                        .shouldCacheVideoBids(true)\n+                        .cacheBidsTtl(99)\n+                        .cacheVideoBidsTtl(101)\n+                        .bidderToVideoBidIdsToModify(emptyMap())\n+                        .biddersToCacheBidIds(biddersToCacheBidIds)\n+                        .build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(1000L));\n     }\n \n     @Test\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 06064a6b..1e8f1fd3 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -190,7 +190,7 @@ public class BidResponseCreatorTest extends VertxTest {\n                         .cacheBidsTtl(99)\n                         .cacheVideoBidsTtl(101)\n                         .bidderToVideoBidIdsToModify(emptyMap())\n-                        .biddersToCacheBidIds(biddersToCacheBidIds)\n+                        .bidderToBidIds(biddersToCacheBidIds)\n                         .build()),\n                 eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(1000L));\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDc5Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393720793", "body": "not any long but `eq()`", "bodyText": "not any long but eq()", "bodyHTML": "<p dir=\"auto\">not any long but <code>eq()</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T14:29:02Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -206,13 +207,13 @@ public void shouldRequestCacheServiceWithWinningBidsOnlyWhenWinningonlyIsTrue()\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, 1000, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid2)) && t.size() == 2), eq(emptyList()),\n-                eq(CacheContext.builder().videoBidIdsToModify(emptyList()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout));\n+                eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..bd9dd57a 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -207,13 +207,13 @@ public class BidResponseCreatorTest extends VertxTest {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, 1000, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, 1000L, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid2)) && t.size() == 2), eq(emptyList()),\n                 eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(1000L));\n     }\n \n     @Test\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex bd9dd57a..6460a8b9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -207,13 +207,13 @@ public class BidResponseCreatorTest extends VertxTest {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, 1000L, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, 1000, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid2)) && t.size() == 2), eq(emptyList()),\n                 eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(1000L));\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n     }\n \n     @Test\n", "next_change": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..06064a6b 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -210,10 +221,16 @@ public class BidResponseCreatorTest extends VertxTest {\n         bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, 1000, false);\n \n         // then\n+        Map<String, List<String>> biddersToCacheBidIds = new HashMap();\n+        biddersToCacheBidIds.put(\"bidder1\", Arrays.asList(\"bidId1\", \"bidId2\"));\n+        biddersToCacheBidIds.put(\"bidder2\", Arrays.asList(\"bidId3\", \"bidId4\"));\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid2)) && t.size() == 2), eq(emptyList()),\n-                eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n+                eq(CacheContext.builder()\n+                        .bidderToVideoBidIdsToModify(emptyMap())\n+                        .biddersToCacheBidIds(biddersToCacheBidIds)\n+                        .build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(1000L));\n     }\n \n     @Test\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 06064a6b..1e8f1fd3 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -228,7 +228,7 @@ public class BidResponseCreatorTest extends VertxTest {\n                 argThat(t -> t.containsAll(asList(bid1, bid2)) && t.size() == 2), eq(emptyList()),\n                 eq(CacheContext.builder()\n                         .bidderToVideoBidIdsToModify(emptyMap())\n-                        .biddersToCacheBidIds(biddersToCacheBidIds)\n+                        .bidderToBidIds(biddersToCacheBidIds)\n                         .build()),\n                 eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(1000L));\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDk4OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393720989", "body": "not any long but `eq()`", "bodyText": "not any long but eq()", "bodyHTML": "<p dir=\"auto\">not any long but <code>eq()</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T14:29:20Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -240,14 +241,14 @@ public void shouldRequestCacheServiceWithVideoBidsToModifyWhenEventsEnabledAndFo\n         given(bidderCatalog.isModifyingVastXmlAllowed(eq(\"bidder1\"))).willReturn(true);\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, account, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, account, timeout, 0, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid2))), eq(asList(imp1, imp2)),\n-                eq(CacheContext.builder().shouldCacheVideoBids(true).videoBidIdsToModify(singletonList(\"bidId1\"))\n+                eq(CacheContext.builder().shouldCacheVideoBids(true).bidderToVideoBidIdsToModify(singletonMap(\"bidder1\", singletonList(\"bidId1\")))\n                         .build()),\n-                same(account), eq(timeout));\n+                same(account), eq(timeout), anyLong());", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..bd9dd57a 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -248,7 +248,7 @@ public class BidResponseCreatorTest extends VertxTest {\n                 argThat(t -> t.containsAll(asList(bid1, bid2))), eq(asList(imp1, imp2)),\n                 eq(CacheContext.builder().shouldCacheVideoBids(true).bidderToVideoBidIdsToModify(singletonMap(\"bidder1\", singletonList(\"bidId1\")))\n                         .build()),\n-                same(account), eq(timeout), anyLong());\n+                same(account), eq(timeout), eq(0L));\n     }\n \n     @Test\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex bd9dd57a..6460a8b9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -248,7 +248,7 @@ public class BidResponseCreatorTest extends VertxTest {\n                 argThat(t -> t.containsAll(asList(bid1, bid2))), eq(asList(imp1, imp2)),\n                 eq(CacheContext.builder().shouldCacheVideoBids(true).bidderToVideoBidIdsToModify(singletonMap(\"bidder1\", singletonList(\"bidId1\")))\n                         .build()),\n-                same(account), eq(timeout), eq(0L));\n+                same(account), eq(timeout), anyLong());\n     }\n \n     @Test\n", "next_change": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..06064a6b 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -244,11 +261,17 @@ public class BidResponseCreatorTest extends VertxTest {\n         bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, account, timeout, 0, false);\n \n         // then\n+        Map<String, List<String>> biddersToCacheBidIds = new HashMap();\n+        biddersToCacheBidIds.put(\"bidder1\", Collections.singletonList(\"bidId1\"));\n+        biddersToCacheBidIds.put(\"bidder2\", Collections.singletonList(\"bidId2\"));\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid2))), eq(asList(imp1, imp2)),\n-                eq(CacheContext.builder().shouldCacheVideoBids(true).bidderToVideoBidIdsToModify(singletonMap(\"bidder1\", singletonList(\"bidId1\")))\n+                eq(CacheContext.builder()\n+                        .shouldCacheVideoBids(true)\n+                        .bidderToVideoBidIdsToModify(singletonMap(\"bidder1\", singletonList(\"bidId1\")))\n+                        .biddersToCacheBidIds(biddersToCacheBidIds)\n                         .build()),\n-                same(account), eq(timeout), anyLong());\n+                same(account), eq(timeout), eq(0L));\n     }\n \n     @Test\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 06064a6b..1e8f1fd3 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -269,7 +269,7 @@ public class BidResponseCreatorTest extends VertxTest {\n                 eq(CacheContext.builder()\n                         .shouldCacheVideoBids(true)\n                         .bidderToVideoBidIdsToModify(singletonMap(\"bidder1\", singletonList(\"bidId1\")))\n-                        .biddersToCacheBidIds(biddersToCacheBidIds)\n+                        .bidderToBidIds(biddersToCacheBidIds)\n                         .build()),\n                 same(account), eq(timeout), eq(0L));\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTAzNw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393721037", "body": "not any long but `eq()`", "bodyText": "not any long but eq()", "bodyHTML": "<p dir=\"auto\">not any long but <code>eq()</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T14:29:24Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -264,13 +265,13 @@ public void shouldCallCacheServiceEvenRoundedCpmIsZero() {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(bids -> bids.contains(bid1)), eq(emptyList()),\n-                eq(CacheContext.builder().videoBidIdsToModify(emptyList()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout));\n+                eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..bd9dd57a 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -271,7 +271,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(bids -> bids.contains(bid1)), eq(emptyList()),\n                 eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(0L));\n     }\n \n     @Test\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex bd9dd57a..6460a8b9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -271,7 +271,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(bids -> bids.contains(bid1)), eq(emptyList()),\n                 eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(0L));\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n     }\n \n     @Test\n", "next_change": {"commit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..06064a6b 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -270,8 +293,11 @@ public class BidResponseCreatorTest extends VertxTest {\n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(bids -> bids.contains(bid1)), eq(emptyList()),\n-                eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());\n+                eq(CacheContext.builder()\n+                        .bidderToVideoBidIdsToModify(emptyMap())\n+                        .biddersToCacheBidIds(singletonMap(\"bidder1\", Collections.singletonList(\"bidId1\")))\n+                        .build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(0L));\n     }\n \n     @Test\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 06064a6b..1e8f1fd3 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -288,14 +288,14 @@ public class BidResponseCreatorTest extends VertxTest {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0L, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(bids -> bids.contains(bid1)), eq(emptyList()),\n                 eq(CacheContext.builder()\n                         .bidderToVideoBidIdsToModify(emptyMap())\n-                        .biddersToCacheBidIds(singletonMap(\"bidder1\", Collections.singletonList(\"bidId1\")))\n+                        .bidderToBidIds(singletonMap(\"bidder1\", Collections.singletonList(\"bidId1\")))\n                         .build()),\n                 eq(Account.builder().id(\"accountId\").build()), eq(timeout), eq(0L));\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTM2OA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393721368", "body": "Replace anyLong() to any() if you want to test method invocation", "bodyText": "Replace anyLong() to any() if you want to test method invocation", "bodyHTML": "<p dir=\"auto\">Replace anyLong() to any() if you want to test method invocation</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:29:53Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +283,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();\n \n         // then\n         final BidResponse responseWithExpectedFields = BidResponse.builder()\n                 .id(\"123\")\n                 .cur(\"USD\")\n                 .ext(mapper.valueToTree(\n-                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null)))\n+                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, (long)1000 )))\n                 .build();\n \n         assertThat(bidResponse)\n                 .isEqualToIgnoringGivenFields(responseWithExpectedFields, \"nbr\", \"seatbid\");\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjUxNw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399262517", "bodyText": "?", "author": "DGarbar", "createdAt": "2020-03-27T13:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..bd9dd57a 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -296,7 +296,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         assertThat(bidResponse)\n                 .isEqualToIgnoringGivenFields(responseWithExpectedFields, \"nbr\", \"seatbid\");\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), eq(0L));\n     }\n \n     @Test\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex bd9dd57a..6460a8b9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -296,7 +296,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         assertThat(bidResponse)\n                 .isEqualToIgnoringGivenFields(responseWithExpectedFields, \"nbr\", \"seatbid\");\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), eq(0L));\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());\n     }\n \n     @Test\n", "next_change": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..6998e0cb 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -296,7 +322,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         assertThat(bidResponse)\n                 .isEqualToIgnoringGivenFields(responseWithExpectedFields, \"nbr\", \"seatbid\");\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), any());\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMjgwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393722803", "body": "It should be passed in ` response ext.prebid.auctiontimestamp`", "bodyText": "It should be passed in  response ext.prebid.auctiontimestamp", "bodyHTML": "<p dir=\"auto\">It should be passed in <code> response ext.prebid.auctiontimestamp</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T14:31:47Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/response/ExtBidResponse.java", "diffHunk": "@@ -37,4 +37,8 @@\n      */\n     Map<String, ExtResponseSyncData> usersync;\n \n+    /**\n+     * Defines the contract for bidresponse.ext.auctiontimestamp\n+     */\n+    Long timestamp;", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/proto/openrtb/ext/response/ExtBidResponse.java b/src/main/java/org/prebid/server/proto/openrtb/ext/response/ExtBidResponse.java\nindex 40d0e01e..a15e8476 100644\n--- a/src/main/java/org/prebid/server/proto/openrtb/ext/response/ExtBidResponse.java\n+++ b/src/main/java/org/prebid/server/proto/openrtb/ext/response/ExtBidResponse.java\n", "chunk": "@@ -40,5 +40,5 @@ public class ExtBidResponse {\n     /**\n      * Defines the contract for bidresponse.ext.auctiontimestamp\n      */\n-    Long timestamp;\n+    Long auctiontimestamp;\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMjkwOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393722909", "body": "not `anyLong` but `eq(0)`. ", "bodyText": "not anyLong but eq(0).", "bodyHTML": "<p dir=\"auto\">not <code>anyLong</code> but <code>eq(0)</code>.</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:31:56Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -140,10 +141,10 @@ public void shouldPassOriginalTimeoutToCacheServiceIfCachingIsRequested() {\n         givenCacheServiceResult(singletonMap(bid, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n \n         // then\n-        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout));\n+        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), anyLong());", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MTQ5Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399261497", "bodyText": "?", "author": "DGarbar", "createdAt": "2020-03-27T13:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMjkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..bd9dd57a 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -144,7 +144,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n \n         // then\n-        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), anyLong());\n+        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), eq(0L));\n     }\n \n     @Test\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex bd9dd57a..6460a8b9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -144,7 +144,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n \n         // then\n-        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), eq(0L));\n+        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), anyLong());\n     }\n \n     @Test\n", "next_change": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..6998e0cb 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -144,7 +146,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n \n         // then\n-        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), anyLong());\n+        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), any());\n     }\n \n     @Test\n", "next_change": {"commit": "bf3464c43ef00000f6aaab79942df98c69e17f58", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6998e0cb..2378e310 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -143,7 +143,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         givenCacheServiceResult(singletonMap(bid, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0L, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), any());\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNjkwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393726903", "body": "L", "bodyText": "L", "bodyHTML": "<p dir=\"auto\">L</p>", "author": "DGarbar", "createdAt": "2020-03-17T14:37:16Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -1049,15 +1050,15 @@ public void impToStoredVideoJsonShouldAddErrorsWithPrebidBidderWhenStoredVideoRe\n \n         // when\n         final Future<BidResponse> result =\n-                bidResponseCreator.create(bidderResponses, bidRequest, null, CACHE_INFO, ACCOUNT, timeout, false);\n+                bidResponseCreator.create(bidderResponses, bidRequest, null, CACHE_INFO, ACCOUNT, timeout, 0, false);\n \n         // then\n         verify(storedRequestProcessor).videoStoredDataResult(eq(singletonList(imp1)), any(), eq(timeout));\n \n         assertThat(result.result().getExt()).isEqualTo(\n                 mapper.valueToTree(ExtBidResponse.of(null, singletonMap(\n                         \"prebid\", singletonList(ExtBidderError.of(BidderError.Type.generic.getCode(),\n-                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null)));\n+                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null, (long)0)));", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..bd9dd57a 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -1058,7 +1058,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         assertThat(result.result().getExt()).isEqualTo(\n                 mapper.valueToTree(ExtBidResponse.of(null, singletonMap(\n                         \"prebid\", singletonList(ExtBidderError.of(BidderError.Type.generic.getCode(),\n-                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null, (long)0)));\n+                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null, 0L)));\n     }\n \n     @Test\n", "next_change": {"commit": "deaedcd778ac352dcc743b6e31908a715e71fe17", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex bd9dd57a..6460a8b9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -1058,7 +1058,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         assertThat(result.result().getExt()).isEqualTo(\n                 mapper.valueToTree(ExtBidResponse.of(null, singletonMap(\n                         \"prebid\", singletonList(ExtBidderError.of(BidderError.Type.generic.getCode(),\n-                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null, 0L)));\n+                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null, (long)0)));\n     }\n \n     @Test\n", "next_change": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6460a8b9..6998e0cb 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -1058,7 +1084,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         assertThat(result.result().getExt()).isEqualTo(\n                 mapper.valueToTree(ExtBidResponse.of(null, singletonMap(\n                         \"prebid\", singletonList(ExtBidderError.of(BidderError.Type.generic.getCode(),\n-                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null, (long)0)));\n+                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null, 0L)));\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMjE1OA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393732158", "body": "Real logic implemented in `EventUtil.toUrl(externalUrl, eventRequest);`", "bodyText": "Real logic implemented in EventUtil.toUrl(externalUrl, eventRequest);", "bodyHTML": "<p dir=\"auto\">Real logic implemented in <code>EventUtil.toUrl(externalUrl, eventRequest);</code></p>", "author": "DGarbar", "createdAt": "2020-03-17T14:44:40Z", "path": "src/main/java/org/prebid/server/events/EventsService.java", "diffHunk": "@@ -18,32 +18,36 @@ public EventsService(String externalUrl) {\n     /**\n      * Returns {@link Events} object based on given params.\n      */\n-    public Events createEvent(String bidId, String accountId) {\n+    public Events createEvent(String bidId, String bidder, String accountId, long timestamp) {\n         return Events.of(\n-                eventUrl(EventRequest.Type.win, bidId, accountId, EventRequest.Format.image),\n-                eventUrl(EventRequest.Type.imp, bidId, accountId, EventRequest.Format.image));\n+                eventUrl(EventRequest.Type.win, bidId, bidder, accountId, EventRequest.Format.image, timestamp),\n+                eventUrl(EventRequest.Type.imp, bidId, bidder, accountId, EventRequest.Format.image, timestamp));\n     }\n \n     /**\n      * Returns value for \"hb_winurl\" targeting keyword.\n      */\n-    public String winUrlTargeting(String accountId) {\n-        return eventUrl(EventRequest.Type.win, BIDID_PLACEHOLDER, accountId, EventRequest.Format.image);\n+    public String winUrlTargeting(String bidder, String accountId, long timestamp) {\n+        return eventUrl(EventRequest.Type.win, BIDID_PLACEHOLDER, bidder, accountId,\n+                EventRequest.Format.image, timestamp);\n     }\n \n     /**\n      * Returns url for VAST tracking.\n      */\n-    public String vastUrlTracking(String bidId, String accountId) {\n-        return eventUrl(EventRequest.Type.imp, bidId, accountId, EventRequest.Format.blank);\n+    public String vastUrlTracking(String bidId, String bidder, String accountId, long timestamp) {\n+        return eventUrl(EventRequest.Type.imp, bidId, bidder, accountId, EventRequest.Format.blank, timestamp);\n     }\n \n-    private String eventUrl(EventRequest.Type type, String bidId, String accountId, EventRequest.Format format) {\n+    private String eventUrl(EventRequest.Type type, String bidId, String bidder, String accountId,\n+                            EventRequest.Format format, long timestamp) {\n         final EventRequest eventRequest = EventRequest.builder()\n                 .type(type)\n                 .bidId(bidId)\n+                .bidder(bidder)", "originalCommit": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "733dcfb22d5e65dc440047867247a8b2af883210", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventsService.java b/src/main/java/org/prebid/server/events/EventsService.java\nindex fa8b0af4..d6d75c46 100644\n--- a/src/main/java/org/prebid/server/events/EventsService.java\n+++ b/src/main/java/org/prebid/server/events/EventsService.java\n", "chunk": "@@ -44,10 +44,10 @@ public class EventsService {\n         final EventRequest eventRequest = EventRequest.builder()\n                 .type(type)\n                 .bidId(bidId)\n-                .bidder(bidder)\n                 .accountId(accountId)\n                 .format(format)\n                 .timestamp(timestamp)\n+                .bidder(bidder)\n                 .build();\n \n         return EventUtil.toUrl(externalUrl, eventRequest);\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/events/EventsService.java b/src/main/java/org/prebid/server/events/EventsService.java\nindex d6d75c46..1f6fbefe 100644\n--- a/src/main/java/org/prebid/server/events/EventsService.java\n+++ b/src/main/java/org/prebid/server/events/EventsService.java\n", "chunk": "@@ -18,36 +18,43 @@ public class EventsService {\n     /**\n      * Returns {@link Events} object based on given params.\n      */\n-    public Events createEvent(String bidId, String bidder, String accountId, long timestamp) {\n+    public Events createEvent(String bidId, String bidder, String accountId, Long timestamp) {\n         return Events.of(\n-                eventUrl(EventRequest.Type.win, bidId, bidder, accountId, EventRequest.Format.image, timestamp),\n-                eventUrl(EventRequest.Type.imp, bidId, bidder, accountId, EventRequest.Format.image, timestamp));\n+                eventUrl(EventRequest.Type.win, bidId, bidder, accountId, timestamp, EventRequest.Format.image),\n+                eventUrl(EventRequest.Type.imp, bidId, bidder, accountId, timestamp, EventRequest.Format.image));\n     }\n \n     /**\n      * Returns value for \"hb_winurl\" targeting keyword.\n      */\n-    public String winUrlTargeting(String bidder, String accountId, long timestamp) {\n-        return eventUrl(EventRequest.Type.win, BIDID_PLACEHOLDER, bidder, accountId,\n-                EventRequest.Format.image, timestamp);\n+    public String winUrlTargeting(String bidder, String accountId, Long timestamp) {\n+        return eventUrl(EventRequest.Type.win, BIDID_PLACEHOLDER, bidder, accountId, timestamp,\n+                EventRequest.Format.image);\n+    }\n+\n+    /**\n+     * Returns url for win tracking.\n+     */\n+    public String winUrl(String bidId, String bidder, String accountId, Long timestamp) {\n+        return eventUrl(EventRequest.Type.win, bidId, bidder, accountId, timestamp, EventRequest.Format.image);\n     }\n \n     /**\n      * Returns url for VAST tracking.\n      */\n-    public String vastUrlTracking(String bidId, String bidder, String accountId, long timestamp) {\n-        return eventUrl(EventRequest.Type.imp, bidId, bidder, accountId, EventRequest.Format.blank, timestamp);\n+    public String vastUrlTracking(String bidId, String bidder, String accountId, Long timestamp) {\n+        return eventUrl(EventRequest.Type.imp, bidId, bidder, accountId, timestamp, EventRequest.Format.blank);\n     }\n \n-    private String eventUrl(EventRequest.Type type, String bidId, String bidder, String accountId,\n-                            EventRequest.Format format, long timestamp) {\n+    private String eventUrl(EventRequest.Type type, String bidId, String bidder, String accountId, Long timestamp,\n+                            EventRequest.Format format) {\n         final EventRequest eventRequest = EventRequest.builder()\n                 .type(type)\n                 .bidId(bidId)\n                 .accountId(accountId)\n-                .format(format)\n-                .timestamp(timestamp)\n                 .bidder(bidder)\n+                .timestamp(timestamp)\n+                .format(format)\n                 .build();\n \n         return EventUtil.toUrl(externalUrl, eventRequest);\n", "next_change": null}]}}]}}, {"oid": "733dcfb22d5e65dc440047867247a8b2af883210", "url": "https://github.com/prebid/prebid-server-java/commit/733dcfb22d5e65dc440047867247a8b2af883210", "message": "Change to ExchangeService and tests", "committedDate": "2020-03-25T13:33:10Z", "type": "commit"}, {"oid": "deaedcd778ac352dcc743b6e31908a715e71fe17", "url": "https://github.com/prebid/prebid-server-java/commit/deaedcd778ac352dcc743b6e31908a715e71fe17", "message": "Prepare to merge", "committedDate": "2020-03-26T05:58:35Z", "type": "commit"}, {"oid": "66786a6cd808ee7be85f1cbf4de74ddce0f2f656", "url": "https://github.com/prebid/prebid-server-java/commit/66786a6cd808ee7be85f1cbf4de74ddce0f2f656", "message": "Timestamp and bidder code implement", "committedDate": "2020-03-26T11:04:24Z", "type": "commit"}, {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "url": "https://github.com/prebid/prebid-server-java/commit/76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "message": "Resolving conflicts and merge master to current branch", "committedDate": "2020-03-26T21:05:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0ODA2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399248064", "body": "can be inlined", "bodyText": "can be inlined", "bodyHTML": "<p dir=\"auto\">can be inlined</p>", "author": "DGarbar", "createdAt": "2020-03-27T13:03:45Z", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -259,7 +263,8 @@ private static void tryAddWinningBidByBidder(Bid bid, String bidder,\n      */\n     private Future<CacheServiceResult> toBidsWithCacheIds(List<BidderResponse> bidderResponses, Set<Bid> bidsToCache,\n                                                           List<Imp> imps, BidRequestCacheInfo cacheInfo,\n-                                                          Account account, Timeout timeout) {\n+                                                          Account account, Timeout timeout,\n+                                                          Long auctionTimestamp) {", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/BidResponseCreator.java b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\nindex fcf9a5d8..7dfdcb50 100644\n--- a/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n+++ b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n", "chunk": "@@ -263,8 +263,7 @@ public class BidResponseCreator {\n      */\n     private Future<CacheServiceResult> toBidsWithCacheIds(List<BidderResponse> bidderResponses, Set<Bid> bidsToCache,\n                                                           List<Imp> imps, BidRequestCacheInfo cacheInfo,\n-                                                          Account account, Timeout timeout,\n-                                                          Long auctionTimestamp) {\n+                                                          Account account, Timeout timeout, Long auctionTimestamp) {\n         final Future<CacheServiceResult> result;\n \n         if (!cacheInfo.isDoCaching()) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MTMyOA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399251328", "body": "```\r\n        final Events events = eventsEnabled \r\n                ? eventsService.createEvent(bid.getId(), bidder, account.getId(), auctionTimestamp) \r\n                : null;\r\n```", "bodyText": "final Events events = eventsEnabled \n                ? eventsService.createEvent(bid.getId(), bidder, account.getId(), auctionTimestamp) \n                : null;", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        final Events events = eventsEnabled \n                ? eventsService.createEvent(bid.getId(), bidder, account.getId(), auctionTimestamp) \n                : null;\"><pre><code>        final Events events = eventsEnabled \n                ? eventsService.createEvent(bid.getId(), bidder, account.getId(), auctionTimestamp) \n                : null;\n</code></pre></div>", "author": "DGarbar", "createdAt": "2020-03-27T13:09:18Z", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -639,7 +652,8 @@ private Bid toBid(BidderBid bidderBid, String bidder, ExtRequestTargeting target\n         }\n \n         final Video storedVideo = impIdToStoredVideo.get(bid.getImpid());\n-        final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), account.getId()) : null;\n+        final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), bidder, account.getId(),", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/BidResponseCreator.java b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\nindex fcf9a5d8..7dfdcb50 100644\n--- a/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n+++ b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n", "chunk": "@@ -652,8 +651,9 @@ public class BidResponseCreator {\n         }\n \n         final Video storedVideo = impIdToStoredVideo.get(bid.getImpid());\n-        final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), bidder, account.getId(),\n-                auctionTimestamp) : null;\n+        final Events events = eventsEnabled\n+                ? eventsService.createEvent(bid.getId(), bidder, account.getId(), auctionTimestamp)\n+                : null;\n \n         final ExtBidPrebid prebidExt = ExtBidPrebid.of(bidType, targetingKeywords, cache, storedVideo, events, null);\n         final ExtPrebid<ExtBidPrebid, ObjectNode> bidExt = ExtPrebid.of(prebidExt, bid.getExt());\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjEzMw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399252133", "body": "type `Timestamp`", "bodyText": "type Timestamp", "bodyHTML": "<p dir=\"auto\">type <code>Timestamp</code></p>", "author": "DGarbar", "createdAt": "2020-03-27T13:10:46Z", "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "diffHunk": "@@ -705,6 +707,15 @@ private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n         return prebid != null ? prebid.getTargeting() : null;\n     }\n \n+    /**\n+     * Extracts auctiontimestamp from {@link ExtBidRequest} model.\n+     */\n+    private static Long auctionTimestamp(ExtBidRequest requestExt) {\n+        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n+        final Long auctionTmestamp = prebid != null ? prebid.getAuctiontimestamp() : null;", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/ExchangeService.java b/src/main/java/org/prebid/server/auction/ExchangeService.java\nindex 91980406..038123db 100644\n--- a/src/main/java/org/prebid/server/auction/ExchangeService.java\n+++ b/src/main/java/org/prebid/server/auction/ExchangeService.java\n", "chunk": "@@ -708,12 +708,12 @@ public class ExchangeService {\n     }\n \n     /**\n-     * Extracts auctiontimestamp from {@link ExtBidRequest} model.\n+     * Extracts auctiontimestamp or creates if it is null from {@link ExtBidRequest} model.\n      */\n     private static Long auctionTimestamp(ExtBidRequest requestExt) {\n         final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final Long auctionTmestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n-        return auctionTmestamp != null ? auctionTmestamp : Instant.now().toEpochMilli();\n+        final Long auctionTimestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n+        return auctionTimestamp != null ? auctionTimestamp : Instant.now().toEpochMilli();\n     }\n \n     /**\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/ExchangeService.java b/src/main/java/org/prebid/server/auction/ExchangeService.java\nindex 038123db..08008947 100644\n--- a/src/main/java/org/prebid/server/auction/ExchangeService.java\n+++ b/src/main/java/org/prebid/server/auction/ExchangeService.java\n", "chunk": "@@ -700,61 +742,19 @@ public class ExchangeService {\n     }\n \n     /**\n-     * Extracts {@link ExtRequestTargeting} from {@link ExtBidRequest} model.\n-     */\n-    private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n-        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        return prebid != null ? prebid.getTargeting() : null;\n-    }\n-\n-    /**\n-     * Extracts auctiontimestamp or creates if it is null from {@link ExtBidRequest} model.\n+     * Extracts currency rates from {@link ExtRequestTargeting}.\n      */\n-    private static Long auctionTimestamp(ExtBidRequest requestExt) {\n-        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final Long auctionTimestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n-        return auctionTimestamp != null ? auctionTimestamp : Instant.now().toEpochMilli();\n+    private static Map<String, Map<String, BigDecimal>> currencyRates(ExtRequestTargeting targeting) {\n+        return targeting != null && targeting.getCurrency() != null ? targeting.getCurrency().getRates() : null;\n     }\n \n     /**\n-     * Creates {@link BidRequestCacheInfo} based on {@link ExtBidRequest} model.\n+     * Extracts bidAdjustments from {@link ExtBidRequest}.\n      */\n-    private BidRequestCacheInfo bidRequestCacheInfo(ExtRequestTargeting targeting, ExtBidRequest requestExt) {\n+    private static Map<String, BigDecimal> bidAdjustments(ExtBidRequest requestExt) {\n         final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final ExtRequestPrebidCache cache = prebid != null ? prebid.getCache() : null;\n-\n-        if (targeting != null && cache != null) {\n-            final boolean shouldCacheBids = cache.getBids() != null;\n-            final boolean shouldCacheVideoBids = cache.getVastxml() != null;\n-            final boolean shouldCacheWinningBidsOnly = targeting.getIncludebidderkeys()\n-                    ? false // ext.prebid.targeting.includebidderkeys takes precedence\n-                    : ObjectUtils.defaultIfNull(cache.getWinningonly(), false);\n-\n-            if (shouldCacheBids || shouldCacheVideoBids || shouldCacheWinningBidsOnly) {\n-                final Integer cacheBidsTtl = shouldCacheBids ? cache.getBids().getTtlseconds() : null;\n-                final Integer cacheVideoBidsTtl = shouldCacheVideoBids ? cache.getVastxml().getTtlseconds() : null;\n-\n-                final boolean returnCreativeBid = shouldCacheBids\n-                        ? ObjectUtils.defaultIfNull(cache.getBids().getReturnCreative(), true)\n-                        : false;\n-                final boolean returnCreativeVideoBid = shouldCacheVideoBids\n-                        ? ObjectUtils.defaultIfNull(cache.getVastxml().getReturnCreative(), true)\n-                        : false;\n-\n-                return BidRequestCacheInfo.builder()\n-                        .doCaching(true)\n-                        .shouldCacheBids(shouldCacheBids)\n-                        .cacheBidsTtl(cacheBidsTtl)\n-                        .shouldCacheVideoBids(shouldCacheVideoBids)\n-                        .cacheVideoBidsTtl(cacheVideoBidsTtl)\n-                        .returnCreativeBids(returnCreativeBid)\n-                        .returnCreativeVideoBids(returnCreativeVideoBid)\n-                        .shouldCacheWinningBidsOnly(shouldCacheWinningBidsOnly)\n-                        .build();\n-            }\n-        }\n-\n-        return BidRequestCacheInfo.noCache();\n+        final Map<String, BigDecimal> bidAdjustmentFactors = prebid != null ? prebid.getBidadjustmentfactors() : null;\n+        return bidAdjustmentFactors != null ? bidAdjustmentFactors : Collections.emptyMap();\n     }\n \n     /**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjQ3NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399252475", "body": "... or creates if is is null", "bodyText": "... or creates if is is null", "bodyHTML": "<p dir=\"auto\">... or creates if is is null</p>", "author": "DGarbar", "createdAt": "2020-03-27T13:11:25Z", "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "diffHunk": "@@ -705,6 +707,15 @@ private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n         return prebid != null ? prebid.getTargeting() : null;\n     }\n \n+    /**\n+     * Extracts auctiontimestamp from {@link ExtBidRequest} model.", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/ExchangeService.java b/src/main/java/org/prebid/server/auction/ExchangeService.java\nindex 91980406..038123db 100644\n--- a/src/main/java/org/prebid/server/auction/ExchangeService.java\n+++ b/src/main/java/org/prebid/server/auction/ExchangeService.java\n", "chunk": "@@ -708,12 +708,12 @@ public class ExchangeService {\n     }\n \n     /**\n-     * Extracts auctiontimestamp from {@link ExtBidRequest} model.\n+     * Extracts auctiontimestamp or creates if it is null from {@link ExtBidRequest} model.\n      */\n     private static Long auctionTimestamp(ExtBidRequest requestExt) {\n         final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final Long auctionTmestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n-        return auctionTmestamp != null ? auctionTmestamp : Instant.now().toEpochMilli();\n+        final Long auctionTimestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n+        return auctionTimestamp != null ? auctionTimestamp : Instant.now().toEpochMilli();\n     }\n \n     /**\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/auction/ExchangeService.java b/src/main/java/org/prebid/server/auction/ExchangeService.java\nindex 038123db..08008947 100644\n--- a/src/main/java/org/prebid/server/auction/ExchangeService.java\n+++ b/src/main/java/org/prebid/server/auction/ExchangeService.java\n", "chunk": "@@ -700,61 +742,19 @@ public class ExchangeService {\n     }\n \n     /**\n-     * Extracts {@link ExtRequestTargeting} from {@link ExtBidRequest} model.\n-     */\n-    private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n-        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        return prebid != null ? prebid.getTargeting() : null;\n-    }\n-\n-    /**\n-     * Extracts auctiontimestamp or creates if it is null from {@link ExtBidRequest} model.\n+     * Extracts currency rates from {@link ExtRequestTargeting}.\n      */\n-    private static Long auctionTimestamp(ExtBidRequest requestExt) {\n-        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final Long auctionTimestamp = prebid != null ? prebid.getAuctiontimestamp() : null;\n-        return auctionTimestamp != null ? auctionTimestamp : Instant.now().toEpochMilli();\n+    private static Map<String, Map<String, BigDecimal>> currencyRates(ExtRequestTargeting targeting) {\n+        return targeting != null && targeting.getCurrency() != null ? targeting.getCurrency().getRates() : null;\n     }\n \n     /**\n-     * Creates {@link BidRequestCacheInfo} based on {@link ExtBidRequest} model.\n+     * Extracts bidAdjustments from {@link ExtBidRequest}.\n      */\n-    private BidRequestCacheInfo bidRequestCacheInfo(ExtRequestTargeting targeting, ExtBidRequest requestExt) {\n+    private static Map<String, BigDecimal> bidAdjustments(ExtBidRequest requestExt) {\n         final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n-        final ExtRequestPrebidCache cache = prebid != null ? prebid.getCache() : null;\n-\n-        if (targeting != null && cache != null) {\n-            final boolean shouldCacheBids = cache.getBids() != null;\n-            final boolean shouldCacheVideoBids = cache.getVastxml() != null;\n-            final boolean shouldCacheWinningBidsOnly = targeting.getIncludebidderkeys()\n-                    ? false // ext.prebid.targeting.includebidderkeys takes precedence\n-                    : ObjectUtils.defaultIfNull(cache.getWinningonly(), false);\n-\n-            if (shouldCacheBids || shouldCacheVideoBids || shouldCacheWinningBidsOnly) {\n-                final Integer cacheBidsTtl = shouldCacheBids ? cache.getBids().getTtlseconds() : null;\n-                final Integer cacheVideoBidsTtl = shouldCacheVideoBids ? cache.getVastxml().getTtlseconds() : null;\n-\n-                final boolean returnCreativeBid = shouldCacheBids\n-                        ? ObjectUtils.defaultIfNull(cache.getBids().getReturnCreative(), true)\n-                        : false;\n-                final boolean returnCreativeVideoBid = shouldCacheVideoBids\n-                        ? ObjectUtils.defaultIfNull(cache.getVastxml().getReturnCreative(), true)\n-                        : false;\n-\n-                return BidRequestCacheInfo.builder()\n-                        .doCaching(true)\n-                        .shouldCacheBids(shouldCacheBids)\n-                        .cacheBidsTtl(cacheBidsTtl)\n-                        .shouldCacheVideoBids(shouldCacheVideoBids)\n-                        .cacheVideoBidsTtl(cacheVideoBidsTtl)\n-                        .returnCreativeBids(returnCreativeBid)\n-                        .returnCreativeVideoBids(returnCreativeVideoBid)\n-                        .shouldCacheWinningBidsOnly(shouldCacheWinningBidsOnly)\n-                        .build();\n-            }\n-        }\n-\n-        return BidRequestCacheInfo.noCache();\n+        final Map<String, BigDecimal> bidAdjustmentFactors = prebid != null ? prebid.getBidadjustmentfactors() : null;\n+        return bidAdjustmentFactors != null ? bidAdjustmentFactors : Collections.emptyMap();\n     }\n \n     /**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1Nzc1Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399257756", "body": "```       \r\n biddersToCacheBidIds.entrySet().stream()\r\n                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\r\n                .findFirst()\r\n                .map(Map.Entry::getKey)\r\n                .ifPresent(bidder -> bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), bidder, accountId,\r\n                        timestamp)));\r\n```", "bodyText": "biddersToCacheBidIds.entrySet().stream()\n                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                .findFirst()\n                .map(Map.Entry::getKey)\n                .ifPresent(bidder -> bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), bidder, accountId,\n                        timestamp)));", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" biddersToCacheBidIds.entrySet().stream()\n                .filter(biddersAndBidIds -&gt; biddersAndBidIds.getValue().contains(bidId))\n                .findFirst()\n                .map(Map.Entry::getKey)\n                .ifPresent(bidder -&gt; bidObjectNode.put(&quot;wurl&quot;, eventsService.winUrl(bid.getId(), bidder, accountId,\n                        timestamp)));\"><pre><code> biddersToCacheBidIds.entrySet().stream()\n                .filter(biddersAndBidIds -&gt; biddersAndBidIds.getValue().contains(bidId))\n                .findFirst()\n                .map(Map.Entry::getKey)\n                .ifPresent(bidder -&gt; bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), bidder, accountId,\n                        timestamp)));\n</code></pre></div>", "author": "DGarbar", "createdAt": "2020-03-27T13:19:52Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -383,10 +389,18 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n      * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}.\n      * Used for OpenRTB auction request. Also, adds win url to result object.\n      */\n-    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId) {\n+    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, Map<String, List<String>> biddersToCacheBidIds,\n+                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n+        final String bidId = bid.getId();\n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), accountId));\n+        for (Map.Entry<String, List<String>> biddersAndBidIds : biddersToCacheBidIds.entrySet()) {\n+            if (biddersAndBidIds.getValue().contains(bidId)) {\n+                bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), biddersAndBidIds.getKey(), accountId,\n+                        timestamp));\n+                break;\n+            }\n+        }", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 142ead26..61b4ce94 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -394,13 +394,12 @@ public class CacheService {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n         final String bidId = bid.getId();\n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        for (Map.Entry<String, List<String>> biddersAndBidIds : biddersToCacheBidIds.entrySet()) {\n-            if (biddersAndBidIds.getValue().contains(bidId)) {\n-                bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), biddersAndBidIds.getKey(), accountId,\n-                        timestamp));\n-                break;\n-            }\n-        }\n+        biddersToCacheBidIds.entrySet().stream()\n+                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n+                .findFirst()\n+                .map(Map.Entry::getKey)\n+                .ifPresent(bidder -> bidObjectNode.put(\"wurl\", eventsService.winUrl(bidId, bidder, accountId,\n+                        timestamp)));\n \n         return PutObject.builder()\n                 .type(\"json\")\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1OTAwMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399259001", "body": "Above example with stream", "bodyText": "Above example with stream", "bodyHTML": "<p dir=\"auto\">Above example with stream</p>", "author": "DGarbar", "createdAt": "2020-03-27T13:22:01Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -413,8 +428,11 @@ private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> vide\n         }\n \n         final String bidId = bid.getId();\n-        if (CollectionUtils.isNotEmpty(videoBidIdsToModify) && videoBidIdsToModify.contains(bidId)) {\n-            vastXml = modifyVastXml(vastXml, bidId, accountId);\n+        for (Map.Entry<String, List<String>> biddersAndBidIds : bidderToVideoBidIdsToModify.entrySet()) {\n+            if (biddersAndBidIds.getValue().contains(bidId)) {\n+                vastXml = modifyVastXml(vastXml, bidId, biddersAndBidIds.getKey(), accountId, timestamp);\n+                break;\n+            }", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 142ead26..61b4ce94 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -416,28 +415,28 @@ public class CacheService {\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        String vastXml;\n+        final String[] vastXml = new String[1];\n         if (bid.getAdm() == null) {\n-            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml = bid.getAdm();\n+            vastXml[0] = bid.getAdm();\n         }\n-\n         final String bidId = bid.getId();\n-        for (Map.Entry<String, List<String>> biddersAndBidIds : bidderToVideoBidIdsToModify.entrySet()) {\n-            if (biddersAndBidIds.getValue().contains(bidId)) {\n-                vastXml = modifyVastXml(vastXml, bidId, biddersAndBidIds.getKey(), accountId, timestamp);\n-                break;\n-            }\n-        }\n+        bidderToVideoBidIdsToModify.entrySet().stream()\n+                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n+                .findFirst()\n+                .map(Map.Entry::getKey)\n+                .ifPresent(bidder -> {\n+                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n+                });\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml))\n+                .value(new TextNode(vastXml[0]))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 61b4ce94..2975117e 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -415,28 +415,28 @@ public class CacheService {\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        final String[] vastXml = new String[1];\n+        String vastXml;\n         if (bid.getAdm() == null) {\n-            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml[0] = bid.getAdm();\n+            vastXml = bid.getAdm();\n         }\n+\n         final String bidId = bid.getId();\n-        bidderToVideoBidIdsToModify.entrySet().stream()\n+        final String modifiedVastXml = bidderToVideoBidIdsToModify.entrySet().stream()\n                 .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                 .findFirst()\n                 .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> {\n-                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n-                });\n+                .map(bidder -> modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n+                .orElse(vastXml);\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml[0]))\n+                .value(new TextNode(modifiedVastXml))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 2975117e..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -441,8 +445,7 @@ public class CacheService {\n                 .build();\n     }\n \n-    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId,\n-                                 Long timestamp) {\n+    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId, Long timestamp) {\n         final String closeTag = \"</Impression>\";\n         final int closeTagIndex = stringValue.indexOf(closeTag);\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MTEyMA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399261120", "body": "The /vasttrack endpoint should support a **'timestamp'** parameter, adding it to the video imp url as the 'ts' parameter", "bodyText": "The /vasttrack endpoint should support a 'timestamp' parameter, adding it to the video imp url as the 'ts' parameter", "bodyHTML": "<p dir=\"auto\">The /vasttrack endpoint should support a <strong>'timestamp'</strong> parameter, adding it to the video imp url as the 'ts' parameter</p>", "author": "DGarbar", "createdAt": "2020-03-27T13:25:21Z", "path": "src/main/java/org/prebid/server/handler/VtrackHandler.java", "diffHunk": "@@ -35,6 +35,7 @@\n     private static final Logger logger = LoggerFactory.getLogger(VtrackHandler.class);\n \n     private static final String ACCOUNT_PARAMETER = \"a\";\n+    private static final String TIMESTAMP_PARAMETER = \"ts\";", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/handler/VtrackHandler.java b/src/main/java/org/prebid/server/handler/VtrackHandler.java\nindex 64cc1f08..0b98337d 100644\n--- a/src/main/java/org/prebid/server/handler/VtrackHandler.java\n+++ b/src/main/java/org/prebid/server/handler/VtrackHandler.java\n", "chunk": "@@ -35,7 +35,7 @@ public class VtrackHandler implements Handler<RoutingContext> {\n     private static final Logger logger = LoggerFactory.getLogger(VtrackHandler.class);\n \n     private static final String ACCOUNT_PARAMETER = \"a\";\n-    private static final String TIMESTAMP_PARAMETER = \"ts\";\n+    private static final String TIMESTAMP_PARAMETER = \"timestamp\";\n \n     private final long defaultTimeout;\n     private final boolean allowUnknownBidder;\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/handler/VtrackHandler.java b/src/main/java/org/prebid/server/handler/VtrackHandler.java\nindex 0b98337d..4ea4bb10 100644\n--- a/src/main/java/org/prebid/server/handler/VtrackHandler.java\n+++ b/src/main/java/org/prebid/server/handler/VtrackHandler.java\n", "chunk": "@@ -35,7 +35,6 @@ public class VtrackHandler implements Handler<RoutingContext> {\n     private static final Logger logger = LoggerFactory.getLogger(VtrackHandler.class);\n \n     private static final String ACCOUNT_PARAMETER = \"a\";\n-    private static final String TIMESTAMP_PARAMETER = \"timestamp\";\n \n     private final long defaultTimeout;\n     private final boolean allowUnknownBidder;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjU5Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399262597", "body": "L", "bodyText": "L", "bodyHTML": "<p dir=\"auto\">L</p>", "author": "DGarbar", "createdAt": "2020-03-27T13:27:41Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +309,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();\n \n         // then\n         final BidResponse responseWithExpectedFields = BidResponse.builder()\n                 .id(\"123\")\n                 .cur(\"USD\")\n                 .ext(mapper.valueToTree(\n-                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null)))\n+                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, (long)1000 )))", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjgyOA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401576828", "bodyText": "? 1000L", "author": "DGarbar", "createdAt": "2020-04-01T12:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 06064a6b..0bddae96 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -309,20 +308,20 @@ public class BidResponseCreatorTest extends VertxTest {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, 1000,false).result();\n+                null, null, ACCOUNT, timeout, 1000, false).result();\n \n         // then\n         final BidResponse responseWithExpectedFields = BidResponse.builder()\n                 .id(\"123\")\n                 .cur(\"USD\")\n                 .ext(mapper.valueToTree(\n-                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, (long)1000 )))\n+                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, 1000L)))\n                 .build();\n \n         assertThat(bidResponse)\n                 .isEqualToIgnoringGivenFields(responseWithExpectedFields, \"nbr\", \"seatbid\");\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), any());\n     }\n \n     @Test\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjY3NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399262675", "body": "Check style", "bodyText": "Check style", "bodyHTML": "<p dir=\"auto\">Check style</p>", "author": "DGarbar", "createdAt": "2020-03-27T13:27:47Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +309,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjcwOA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401576708", "bodyText": "?\n(don't you see that there are space missing ?)", "author": "DGarbar", "createdAt": "2020-04-01T12:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 06064a6b..0bddae96 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -309,20 +308,20 @@ public class BidResponseCreatorTest extends VertxTest {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, 1000,false).result();\n+                null, null, ACCOUNT, timeout, 1000, false).result();\n \n         // then\n         final BidResponse responseWithExpectedFields = BidResponse.builder()\n                 .id(\"123\")\n                 .cur(\"USD\")\n                 .ext(mapper.valueToTree(\n-                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, (long)1000 )))\n+                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, 1000L)))\n                 .build();\n \n         assertThat(bidResponse)\n                 .isEqualToIgnoringGivenFields(responseWithExpectedFields, \"nbr\", \"seatbid\");\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), any());\n     }\n \n     @Test\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NTIzMA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399265230", "body": "Replace anyLong() to any() if you want to test method invocation. And please, fix it in others tests", "bodyText": "Replace anyLong() to any() if you want to test method invocation. And please, fix it in others tests", "bodyHTML": "<p dir=\"auto\">Replace anyLong() to any() if you want to test method invocation. And please, fix it in others tests</p>", "author": "DGarbar", "createdAt": "2020-03-27T13:31:24Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -305,13 +332,13 @@ public void shouldSetNbrValueTwoAndEmptySeatbidWhenIncomingBidResponsesAreEmpty(\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(emptyList(), bidRequest, null,\n-                null, ACCOUNT, timeout, false).result();\n+                null, ACCOUNT, timeout,0, false).result();\n \n         // then\n         assertThat(bidResponse).returns(0, BidResponse::getNbr);\n         assertThat(bidResponse).returns(emptyList(), BidResponse::getSeatbid);\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 06064a6b..6998e0cb 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -338,7 +338,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         assertThat(bidResponse).returns(0, BidResponse::getNbr);\n         assertThat(bidResponse).returns(emptyList(), BidResponse::getSeatbid);\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), any());\n     }\n \n     @Test\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5MjY1MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399292651", "body": "please check ALL (long)0 occurrences and change it to 0L ", "bodyText": "please check ALL (long)0 occurrences and change it to 0L", "bodyHTML": "<p dir=\"auto\">please check ALL (long)0 occurrences and change it to 0L</p>", "author": "DGarbar", "createdAt": "2020-03-27T14:11:57Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -693,14 +720,14 @@ public void shouldPopulateTargetingKeywordsWithEventsUrl() {\n \n         final Account account = Account.builder().id(\"accountId\").eventsEnabled(true).build();\n \n-        given(eventsService.winUrlTargeting(anyString())).willReturn(\"http://win-url\");\n+        given(eventsService.winUrlTargeting(anyString(), anyString(), anyLong())).willReturn(\"http://win-url\");\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                targeting, CACHE_INFO, account, timeout, false).result();\n+                targeting, CACHE_INFO, account, timeout, 0,false).result();\n \n         // then\n-        verify(eventsService).winUrlTargeting(eq(\"accountId\"));\n+        verify(eventsService).winUrlTargeting(eq(\"bidder1\"), eq(\"accountId\"), eq((long)0));", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 06064a6b..6998e0cb 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -727,7 +727,7 @@ public class BidResponseCreatorTest extends VertxTest {\n                 targeting, CACHE_INFO, account, timeout, 0,false).result();\n \n         // then\n-        verify(eventsService).winUrlTargeting(eq(\"bidder1\"), eq(\"accountId\"), eq((long)0));\n+        verify(eventsService).winUrlTargeting(eq(\"bidder1\"), eq(\"accountId\"), eq(0L));\n         assertThat(bidResponse.getSeatbid())\n                 .flatExtracting(SeatBid::getBid).hasSize(1)\n                 .extracting(responseBid -> toExtPrebid(responseBid.getExt()).getPrebid().getTargeting())\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6998e0cb..0bddae96 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -724,7 +723,7 @@ public class BidResponseCreatorTest extends VertxTest {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                targeting, CACHE_INFO, account, timeout, 0,false).result();\n+                targeting, CACHE_INFO, account, timeout, 0, false).result();\n \n         // then\n         verify(eventsService).winUrlTargeting(eq(\"bidder1\"), eq(\"accountId\"), eq(0L));\n", "next_change": {"commit": "bf3464c43ef00000f6aaab79942df98c69e17f58", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 0bddae96..2378e310 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -723,7 +724,7 @@ public class BidResponseCreatorTest extends VertxTest {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                targeting, CACHE_INFO, account, timeout, 0, false).result();\n+                targeting, CACHE_INFO, account, timeout, 0L, false).result();\n \n         // then\n         verify(eventsService).winUrlTargeting(eq(\"bidder1\"), eq(\"accountId\"), eq(0L));\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NDI1Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399294257", "body": "If you are using '/n' for first parameter, keep this style for the next. \r\n\r\n**FIX for others**", "bodyText": "If you are using '/n' for first parameter, keep this style for the next.\nFIX for others", "bodyHTML": "<p dir=\"auto\">If you are using '/n' for first parameter, keep this style for the next.</p>\n<p dir=\"auto\"><strong>FIX for others</strong></p>", "author": "DGarbar", "createdAt": "2020-03-27T14:14:08Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -351,7 +352,10 @@ public void cacheBidsOpenrtbShouldNeverCallCacheServiceIfNoBidsPassed() {\n     public void cacheBidsOpenrtbShouldPerformHttpRequestWithExpectedTimeout() {\n         // when\n         cacheService.cacheBidsOpenrtb(singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n-                CacheContext.builder().shouldCacheBids(true).build(), account, timeout);\n+                CacheContext.builder()\n+                        .shouldCacheBids(true)", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/cache/CacheServiceTest.java b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\nindex 02b6dfa2..0b7ad687 100644\n--- a/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n+++ b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n", "chunk": "@@ -352,9 +352,11 @@ public class CacheServiceTest extends VertxTest {\n     public void cacheBidsOpenrtbShouldPerformHttpRequestWithExpectedTimeout() {\n         // when\n         cacheService.cacheBidsOpenrtb(singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n-                CacheContext.builder()\n+                CacheContext\n+                        .builder()\n                         .shouldCacheBids(true)\n-                        .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\"))).build(),\n+                        .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n+                        .build(),\n                 account, timeout, 0L);\n \n         // then\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/cache/CacheServiceTest.java b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\nindex 0b7ad687..198c35e5 100644\n--- a/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n+++ b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n", "chunk": "@@ -352,8 +351,7 @@ public class CacheServiceTest extends VertxTest {\n     public void cacheBidsOpenrtbShouldPerformHttpRequestWithExpectedTimeout() {\n         // when\n         cacheService.cacheBidsOpenrtb(singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n-                CacheContext\n-                        .builder()\n+                CacheContext.builder()\n                         .shouldCacheBids(true)\n                         .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n                         .build(),\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/cache/CacheServiceTest.java b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\nindex 198c35e5..c34ae6b9 100644\n--- a/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n+++ b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n", "chunk": "@@ -353,7 +387,7 @@ public class CacheServiceTest extends VertxTest {\n         cacheService.cacheBidsOpenrtb(singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n                 CacheContext.builder()\n                         .shouldCacheBids(true)\n-                        .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n+                        .bidderToBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n                         .build(),\n                 account, timeout, 0L);\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NDQyNw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399294427", "body": "duplication ", "bodyText": "duplication", "bodyHTML": "<p dir=\"auto\">duplication</p>", "author": "DGarbar", "createdAt": "2020-03-27T14:14:23Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -362,7 +366,10 @@ public void cacheBidsOpenrtbShouldTolerateGlobalTimeoutAlreadyExpired() {\n         // when\n         final Future<CacheServiceResult> future = cacheService.cacheBidsOpenrtb(\n                 singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n-                CacheContext.builder().shouldCacheBids(true).build(), account, expiredTimeout);\n+                CacheContext.builder()\n+                        .shouldCacheBids(true)\n+                        .shouldCacheBids(true).biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\"))).build(),", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/cache/CacheServiceTest.java b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\nindex 02b6dfa2..0b7ad687 100644\n--- a/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n+++ b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n", "chunk": "@@ -366,9 +368,11 @@ public class CacheServiceTest extends VertxTest {\n         // when\n         final Future<CacheServiceResult> future = cacheService.cacheBidsOpenrtb(\n                 singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n-                CacheContext.builder()\n+                CacheContext\n+                        .builder()\n                         .shouldCacheBids(true)\n-                        .shouldCacheBids(true).biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\"))).build(),\n+                        .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n+                        .build(),\n                 account, expiredTimeout, 0L);\n \n         // then\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/cache/CacheServiceTest.java b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\nindex 0b7ad687..198c35e5 100644\n--- a/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n+++ b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n", "chunk": "@@ -368,8 +366,7 @@ public class CacheServiceTest extends VertxTest {\n         // when\n         final Future<CacheServiceResult> future = cacheService.cacheBidsOpenrtb(\n                 singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n-                CacheContext\n-                        .builder()\n+                CacheContext.builder()\n                         .shouldCacheBids(true)\n                         .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n                         .build(),\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/cache/CacheServiceTest.java b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\nindex 198c35e5..c34ae6b9 100644\n--- a/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n+++ b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n", "chunk": "@@ -368,7 +402,7 @@ public class CacheServiceTest extends VertxTest {\n                 singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n                 CacheContext.builder()\n                         .shouldCacheBids(true)\n-                        .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n+                        .bidderToBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n                         .build(),\n                 account, expiredTimeout, 0L);\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NTcxNQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399295715", "body": "inline", "bodyText": "inline", "bodyHTML": "<p dir=\"auto\">inline</p>", "author": "DGarbar", "createdAt": "2020-03-27T14:16:14Z", "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "diffHunk": "@@ -171,11 +198,11 @@ public void fromShouldReturnExpectedEventRequest() {\n                 .add(\"b\", \"bidId\")\n                 .add(\"a\", \"accountId\")\n                 .add(\"f\", \"i\")\n-                .add(\"x\", \"0\"));\n+                .add(\"x\", \"0\")\n+        );", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventUtilTest.java b/src/test/java/org/prebid/server/events/EventUtilTest.java\nindex d9be9135..8e882a54 100644\n--- a/src/test/java/org/prebid/server/events/EventUtilTest.java\n+++ b/src/test/java/org/prebid/server/events/EventUtilTest.java\n", "chunk": "@@ -198,8 +198,7 @@ public class EventUtilTest {\n                 .add(\"b\", \"bidId\")\n                 .add(\"a\", \"accountId\")\n                 .add(\"f\", \"i\")\n-                .add(\"x\", \"0\")\n-        );\n+                .add(\"x\", \"0\"));\n \n         // when\n         final EventRequest result = EventUtil.from(routingContext);\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventUtilTest.java b/src/test/java/org/prebid/server/events/EventUtilTest.java\nindex 8e882a54..34e077d5 100644\n--- a/src/test/java/org/prebid/server/events/EventUtilTest.java\n+++ b/src/test/java/org/prebid/server/events/EventUtilTest.java\n", "chunk": "@@ -195,18 +169,23 @@ public class EventUtilTest {\n         // given\n         given(httpRequest.params()).willReturn(MultiMap.caseInsensitiveMultiMap()\n                 .add(\"t\", \"win\")\n-                .add(\"b\", \"bidId\")\n                 .add(\"a\", \"accountId\")\n+                .add(\"bidder\", \"bidder\")\n+                .add(\"b\", \"bidId\")\n+                .add(\"ts\", \"1000\")\n                 .add(\"f\", \"i\")\n                 .add(\"x\", \"0\"));\n \n         // when\n         final EventRequest result = EventUtil.from(routingContext);\n+\n         // then\n         assertThat(result).isEqualTo(EventRequest.builder()\n                 .type(EventRequest.Type.win)\n-                .bidId(\"bidId\")\n                 .accountId(\"accountId\")\n+                .bidder(\"bidder\")\n+                .bidId(\"bidId\")\n+                .timestamp(1000L)\n                 .format(EventRequest.Format.image)\n                 .analytics(EventRequest.Analytics.disabled)\n                 .build());\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5ODIxOA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399298218", "body": "where this test? ", "bodyText": "where this test?", "bodyHTML": "<p dir=\"auto\">where this test?</p>", "author": "DGarbar", "createdAt": "2020-03-27T14:19:58Z", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -24,29 +25,29 @@ public void setUp() {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"accountId\");\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NTUzNg==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401585536", "bodyText": "Where test that calls eventsService.vastUrlTracking()?", "author": "DGarbar", "createdAt": "2020-04-01T12:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5ODIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex e0b475c4..06000b4e 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -43,11 +43,11 @@ public class EventsServiceTest {\n     }\n \n     @Test\n-    public void winUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n }\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 06000b4e..7359e43e 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -45,7 +44,16 @@ public class EventsServiceTest {\n     @Test\n     public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+\n+        // then\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+    }\n+\n+    @Test\n+    public void vastUrlShouldReturnExpectedUrl() {\n+        // when\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n         assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n", "next_change": {"commit": "c5656d5a4b2feddcd01fc8657c201b3ddeb711f4", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 7359e43e..2ee78221 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -53,9 +53,9 @@ public class EventsServiceTest {\n     @Test\n     public void vastUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+        final String vastUrl = eventsService.vastUrlTracking(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(vastUrl).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5ODQyNw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399298427", "body": "duplication ", "bodyText": "duplication", "bodyHTML": "<p dir=\"auto\">duplication</p>", "author": "DGarbar", "createdAt": "2020-03-27T14:20:17Z", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -24,29 +25,29 @@ public void setUp() {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"accountId\");\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlTrackingShouldReturnExpectedUrl() {", "originalCommit": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex e0b475c4..06000b4e 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -43,11 +43,11 @@ public class EventsServiceTest {\n     }\n \n     @Test\n-    public void winUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n }\n", "next_change": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 06000b4e..7359e43e 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -45,7 +44,16 @@ public class EventsServiceTest {\n     @Test\n     public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\",\"accountId\", 1000L);\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+\n+        // then\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+    }\n+\n+    @Test\n+    public void vastUrlShouldReturnExpectedUrl() {\n+        // when\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n         assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n", "next_change": {"commit": "c5656d5a4b2feddcd01fc8657c201b3ddeb711f4", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 7359e43e..2ee78221 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -53,9 +53,9 @@ public class EventsServiceTest {\n     @Test\n     public void vastUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+        final String vastUrl = eventsService.vastUrlTracking(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(vastUrl).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n     }\n }\n", "next_change": null}]}}]}}]}}, {"oid": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "url": "https://github.com/prebid/prebid-server-java/commit/adb6cfb2df8ccdc2ef844a5442af306704241a4e", "message": "Small refactoring after review", "committedDate": "2020-03-30T14:11:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MjIwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401572203", "body": "Array is redundant. \r\nAnd final is not needed (my mistake)", "bodyText": "Array is redundant.\nAnd final is not needed (my mistake)", "bodyHTML": "<p dir=\"auto\">Array is redundant.<br>\nAnd final is not needed (my mistake)</p>", "author": "DGarbar", "createdAt": "2020-04-01T12:21:31Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -398,33 +411,38 @@ private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId\n     /**\n      * Makes XML type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n      */\n-    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> videoBidIdsToModify,\n-                                                String accountId) {\n+    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid,\n+                                                Map<String, List<String>> bidderToVideoBidIdsToModify,\n+                                                String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        String vastXml;\n+        final String[] vastXml = new String[1];", "originalCommit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 61b4ce94..2975117e 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -415,28 +415,28 @@ public class CacheService {\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        final String[] vastXml = new String[1];\n+        String vastXml;\n         if (bid.getAdm() == null) {\n-            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml[0] = bid.getAdm();\n+            vastXml = bid.getAdm();\n         }\n+\n         final String bidId = bid.getId();\n-        bidderToVideoBidIdsToModify.entrySet().stream()\n+        final String modifiedVastXml = bidderToVideoBidIdsToModify.entrySet().stream()\n                 .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                 .findFirst()\n                 .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> {\n-                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n-                });\n+                .map(bidder -> modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n+                .orElse(vastXml);\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml[0]))\n+                .value(new TextNode(modifiedVastXml))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 2975117e..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -441,8 +445,7 @@ public class CacheService {\n                 .build();\n     }\n \n-    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId,\n-                                 Long timestamp) {\n+    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId, Long timestamp) {\n         final String closeTag = \"</Impression>\";\n         final int closeTagIndex = stringValue.indexOf(closeTag);\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDk3Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401574973", "body": "```\r\n final String bidId = bid.getId();\r\n        final String modifiedVastXml =  bidderToVideoBidIdsToModify.entrySet().stream()\r\n                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\r\n                .findFirst()\r\n                .map(Map.Entry::getKey)\r\n                .map(bidder -> modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\r\n                .orElse(vastXml);\r\n\r\n        return PutObject.builder()\r\n                .type(\"xml\")\r\n                .value(new TextNode(modifiedVastXml))\r\n                .expiry(cacheBid.getTtl())\r\n                .build();\r\n```", "bodyText": "final String bidId = bid.getId();\n        final String modifiedVastXml =  bidderToVideoBidIdsToModify.entrySet().stream()\n                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                .findFirst()\n                .map(Map.Entry::getKey)\n                .map(bidder -> modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n                .orElse(vastXml);\n\n        return PutObject.builder()\n                .type(\"xml\")\n                .value(new TextNode(modifiedVastXml))\n                .expiry(cacheBid.getTtl())\n                .build();", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" final String bidId = bid.getId();\n        final String modifiedVastXml =  bidderToVideoBidIdsToModify.entrySet().stream()\n                .filter(biddersAndBidIds -&gt; biddersAndBidIds.getValue().contains(bidId))\n                .findFirst()\n                .map(Map.Entry::getKey)\n                .map(bidder -&gt; modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n                .orElse(vastXml);\n\n        return PutObject.builder()\n                .type(&quot;xml&quot;)\n                .value(new TextNode(modifiedVastXml))\n                .expiry(cacheBid.getTtl())\n                .build();\"><pre><code> final String bidId = bid.getId();\n        final String modifiedVastXml =  bidderToVideoBidIdsToModify.entrySet().stream()\n                .filter(biddersAndBidIds -&gt; biddersAndBidIds.getValue().contains(bidId))\n                .findFirst()\n                .map(Map.Entry::getKey)\n                .map(bidder -&gt; modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n                .orElse(vastXml);\n\n        return PutObject.builder()\n                .type(\"xml\")\n                .value(new TextNode(modifiedVastXml))\n                .expiry(cacheBid.getTtl())\n                .build();\n</code></pre></div>", "author": "DGarbar", "createdAt": "2020-04-01T12:26:29Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -398,33 +411,38 @@ private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId\n     /**\n      * Makes XML type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n      */\n-    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> videoBidIdsToModify,\n-                                                String accountId) {\n+    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid,\n+                                                Map<String, List<String>> bidderToVideoBidIdsToModify,\n+                                                String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        String vastXml;\n+        final String[] vastXml = new String[1];\n         if (bid.getAdm() == null) {\n-            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml = bid.getAdm();\n+            vastXml[0] = bid.getAdm();\n         }\n-\n         final String bidId = bid.getId();\n-        if (CollectionUtils.isNotEmpty(videoBidIdsToModify) && videoBidIdsToModify.contains(bidId)) {\n-            vastXml = modifyVastXml(vastXml, bidId, accountId);\n-        }\n+        bidderToVideoBidIdsToModify.entrySet().stream()\n+                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n+                .findFirst()\n+                .map(Map.Entry::getKey)\n+                .ifPresent(bidder -> {\n+                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n+                });\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml))\n+                .value(new TextNode(vastXml[0]))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }", "originalCommit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 61b4ce94..2975117e 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -415,28 +415,28 @@ public class CacheService {\n                                                 Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        final String[] vastXml = new String[1];\n+        String vastXml;\n         if (bid.getAdm() == null) {\n-            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml[0] = bid.getAdm();\n+            vastXml = bid.getAdm();\n         }\n+\n         final String bidId = bid.getId();\n-        bidderToVideoBidIdsToModify.entrySet().stream()\n+        final String modifiedVastXml = bidderToVideoBidIdsToModify.entrySet().stream()\n                 .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                 .findFirst()\n                 .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> {\n-                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n-                });\n+                .map(bidder -> modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n+                .orElse(vastXml);\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml[0]))\n+                .value(new TextNode(modifiedVastXml))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 2975117e..18c16acb 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n", "chunk": "@@ -441,8 +445,7 @@ public class CacheService {\n                 .build();\n     }\n \n-    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId,\n-                                 Long timestamp) {\n+    private String modifyVastXml(String stringValue, String bidId, String bidder, String accountId, Long timestamp) {\n         final String closeTag = \"</Impression>\";\n         final int closeTagIndex = stringValue.indexOf(closeTag);\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjkzOA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401576938", "body": "check style", "bodyText": "check style", "bodyHTML": "<p dir=\"auto\">check style</p>", "author": "DGarbar", "createdAt": "2020-04-01T12:29:52Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -305,13 +332,13 @@ public void shouldSetNbrValueTwoAndEmptySeatbidWhenIncomingBidResponsesAreEmpty(\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(emptyList(), bidRequest, null,\n-                null, ACCOUNT, timeout, false).result();\n+                null, ACCOUNT, timeout,0, false).result();", "originalCommit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 6998e0cb..0bddae96 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -332,7 +331,7 @@ public class BidResponseCreatorTest extends VertxTest {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(emptyList(), bidRequest, null,\n-                null, ACCOUNT, timeout,0, false).result();\n+                null, ACCOUNT, timeout, 0, false).result();\n \n         // then\n         assertThat(bidResponse).returns(0, BidResponse::getNbr);\n", "next_change": {"commit": "bf3464c43ef00000f6aaab79942df98c69e17f58", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 0bddae96..2378e310 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -331,7 +332,7 @@ public class BidResponseCreatorTest extends VertxTest {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(emptyList(), bidRequest, null,\n-                null, ACCOUNT, timeout, 0, false).result();\n+                null, ACCOUNT, timeout, 0L, false).result();\n \n         // then\n         assertThat(bidResponse).returns(0, BidResponse::getNbr);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzYxOA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401577618", "body": "/n", "bodyText": "/n", "bodyHTML": "<p dir=\"auto\">/n</p>", "author": "DGarbar", "createdAt": "2020-04-01T12:31:09Z", "path": "src/test/java/org/prebid/server/auction/ExchangeServiceTest.java", "diffHunk": "@@ -797,7 +812,7 @@ public void shouldTolerateResponseBidValidationErrors() throws JsonProcessingExc\n                 // imp ids are not really used for matching, included them here for clarity\n                 givenImp(singletonMap(\"bidder1\", 1), builder -> builder.id(\"impId1\"))),\n                 builder -> builder.ext(mapper.valueToTree(ExtBidRequest.of(ExtRequestPrebid.builder()\n-                        .build()))));\n+                        .auctiontimestamp(1000L).build()))));", "originalCommit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/ExchangeServiceTest.java b/src/test/java/org/prebid/server/auction/ExchangeServiceTest.java\nindex adabf9e1..8756fb0e 100644\n--- a/src/test/java/org/prebid/server/auction/ExchangeServiceTest.java\n+++ b/src/test/java/org/prebid/server/auction/ExchangeServiceTest.java\n", "chunk": "@@ -812,7 +812,8 @@ public class ExchangeServiceTest extends VertxTest {\n                 // imp ids are not really used for matching, included them here for clarity\n                 givenImp(singletonMap(\"bidder1\", 1), builder -> builder.id(\"impId1\"))),\n                 builder -> builder.ext(mapper.valueToTree(ExtBidRequest.of(ExtRequestPrebid.builder()\n-                        .auctiontimestamp(1000L).build()))));\n+                        .auctiontimestamp(1000L)\n+                        .build()))));\n \n         given(responseBidValidator.validate(any()))\n                 .willReturn(ValidationResult.error(\"bid validation error\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Nzk0Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401577946", "body": "check style", "bodyText": "check style", "bodyHTML": "<p dir=\"auto\">check style</p>", "author": "DGarbar", "createdAt": "2020-04-01T12:31:45Z", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -380,25 +391,34 @@ public void cacheBidsOpenrtbShouldStoreWinUrl() {\n         // when\n         cacheService.cacheBidsOpenrtb(\n                 singletonList(bid), singletonList(givenImp(builder -> builder.id(\"impId1\"))),\n-                CacheContext.builder().shouldCacheBids(true).build(), Account.builder().id(\"accountId\").build(),\n-                timeout);\n+                CacheContext\n+                        .builder()\n+                        .shouldCacheBids(true)\n+                        .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n+                        .build(),\n+                Account.builder().id(\"accountId\").build(), timeout, 0L);\n \n         // then\n-        verify(eventsService).winUrl(eq(\"bidId1\"), eq(\"accountId\"));\n+        verify(eventsService).winUrl(eq(\"bidId1\"), eq(\"bidder\"),eq(\"accountId\"), eq(0L));", "originalCommit": "adb6cfb2df8ccdc2ef844a5442af306704241a4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5701456bffb9836083acd577dd4b4640ad888961", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/cache/CacheServiceTest.java b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\nindex 0b7ad687..198c35e5 100644\n--- a/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n+++ b/src/test/java/org/prebid/server/cache/CacheServiceTest.java\n", "chunk": "@@ -391,15 +388,14 @@ public class CacheServiceTest extends VertxTest {\n         // when\n         cacheService.cacheBidsOpenrtb(\n                 singletonList(bid), singletonList(givenImp(builder -> builder.id(\"impId1\"))),\n-                CacheContext\n-                        .builder()\n+                CacheContext.builder()\n                         .shouldCacheBids(true)\n                         .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n                         .build(),\n                 Account.builder().id(\"accountId\").build(), timeout, 0L);\n \n         // then\n-        verify(eventsService).winUrl(eq(\"bidId1\"), eq(\"bidder\"),eq(\"accountId\"), eq(0L));\n+        verify(eventsService).winUrl(eq(\"bidId1\"), eq(\"bidder\"), eq(\"accountId\"), eq(0L));\n     }\n \n     @Test\n", "next_change": null}]}}, {"oid": "5701456bffb9836083acd577dd4b4640ad888961", "url": "https://github.com/prebid/prebid-server-java/commit/5701456bffb9836083acd577dd4b4640ad888961", "message": "Minor changes in tests", "committedDate": "2020-04-01T13:38:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTc4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r402165784", "body": "Intelij idea. Settings. Code Style -> Scheme = Project. If it doesn't help than \r\nClick to cogwheel -> import code scheme. From checkstyle file. \r\nPerform code style check formating for all files that you added", "bodyText": "Intelij idea. Settings. Code Style -> Scheme = Project. If it doesn't help than\nClick to cogwheel -> import code scheme. From checkstyle file.\nPerform code style check formating for all files that you added", "bodyHTML": "<p dir=\"auto\">Intelij idea. Settings. Code Style -&gt; Scheme = Project. If it doesn't help than<br>\nClick to cogwheel -&gt; import code scheme. From checkstyle file.<br>\nPerform code style check formating for all files that you added</p>", "author": "DGarbar", "createdAt": "2020-04-02T09:11:58Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -61,15 +69,6 @@\n import org.prebid.server.settings.model.Account;\n import org.prebid.server.settings.model.VideoStoredDataResult;\n \n-import java.io.IOException;\n-import java.math.BigDecimal;\n-import java.time.Clock;\n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-", "originalCommit": "5701456bffb9836083acd577dd4b4640ad888961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2Nzg0Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r402167846", "bodyText": "ALWAYS", "author": "DGarbar", "createdAt": "2020-04-02T09:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "f3c93625bfd6166905e6d3c1f66cb87246e645fc", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 0bddae96..84a21f30 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -69,6 +59,17 @@ import org.prebid.server.proto.openrtb.ext.response.ExtResponseCache;\n import org.prebid.server.settings.model.Account;\n import org.prebid.server.settings.model.VideoStoredDataResult;\n \n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n import static java.util.Collections.emptyMap;\n", "next_change": {"commit": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 84a21f30..1e8f1fd3 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n", "chunk": "@@ -65,10 +65,10 @@ import java.time.Clock;\n import java.time.Instant;\n import java.time.ZoneId;\n import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NzA2OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r402167069", "body": "vastUrl Should Return Expected Url. \r\nWhere is vastUrl method call ? ", "bodyText": "vastUrl Should Return Expected Url.\nWhere is vastUrl method call ?", "bodyHTML": "<p dir=\"auto\">vastUrl Should Return Expected Url.<br>\nWhere is vastUrl method call ?</p>", "author": "DGarbar", "createdAt": "2020-04-02T09:14:08Z", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -24,29 +24,38 @@ public void setUp() {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"accountId\");\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"accountId\");\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&f=b\");\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+    }\n+\n+    @Test\n+    public void vastUrlShouldReturnExpectedUrl() {\n+        // when\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);", "originalCommit": "5701456bffb9836083acd577dd4b4640ad888961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5656d5a4b2feddcd01fc8657c201b3ddeb711f4", "changed_code": [{"header": "diff --git a/src/test/java/org/prebid/server/events/EventsServiceTest.java b/src/test/java/org/prebid/server/events/EventsServiceTest.java\nindex 7359e43e..2ee78221 100644\n--- a/src/test/java/org/prebid/server/events/EventsServiceTest.java\n+++ b/src/test/java/org/prebid/server/events/EventsServiceTest.java\n", "chunk": "@@ -53,9 +53,9 @@ public class EventsServiceTest {\n     @Test\n     public void vastUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n+        final String vastUrl = eventsService.vastUrlTracking(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+        assertThat(vastUrl).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=b\");\n     }\n }\n", "next_change": null}]}}, {"oid": "c5656d5a4b2feddcd01fc8657c201b3ddeb711f4", "url": "https://github.com/prebid/prebid-server-java/commit/c5656d5a4b2feddcd01fc8657c201b3ddeb711f4", "message": "Fix vastUrlTracking test", "committedDate": "2020-04-02T09:46:47Z", "type": "commit"}, {"oid": "f3c93625bfd6166905e6d3c1f66cb87246e645fc", "url": "https://github.com/prebid/prebid-server-java/commit/f3c93625bfd6166905e6d3c1f66cb87246e645fc", "message": "Fix checkstyle of code", "committedDate": "2020-04-02T10:18:18Z", "type": "commit"}, {"oid": "4f5410e2512a96174fa216ba3d0d9fcfe6143c26", "url": "https://github.com/prebid/prebid-server-java/commit/4f5410e2512a96174fa216ba3d0d9fcfe6143c26", "message": "Checkstyle update", "committedDate": "2020-04-02T13:35:07Z", "type": "commit"}, {"oid": "bf3464c43ef00000f6aaab79942df98c69e17f58", "url": "https://github.com/prebid/prebid-server-java/commit/bf3464c43ef00000f6aaab79942df98c69e17f58", "message": "Resolving conflicts", "committedDate": "2020-04-02T16:29:08Z", "type": "commit"}, {"oid": "37f20c2716204d44b1b4320a9330d4cf7a850c9b", "url": "https://github.com/prebid/prebid-server-java/commit/37f20c2716204d44b1b4320a9330d4cf7a850c9b", "message": "Add timestamp and biddercode to event URL - refactored (#653)", "committedDate": "2020-04-06T11:34:06Z", "type": "commit"}]}