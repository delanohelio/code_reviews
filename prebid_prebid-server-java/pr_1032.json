{"pr_number": 1032, "pr_title": "Add video support to ttx bidder", "pr_author": "snahornyi", "pr_createdAt": "2020-11-26T10:03:36Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/1032", "timeline": [{"oid": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "url": "https://github.com/prebid/prebid-server-java/commit/fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "message": "Add video support to ttx bidder", "committedDate": "2020-11-26T10:02:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MDcxOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531580719", "body": "i'd suggest this method may return modified list of imps.", "bodyText": "i'd suggest this method may return modified list of imps.", "bodyHTML": "<p dir=\"auto\">i'd suggest this method may return modified list of imps.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T12:42:54Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MTgxNA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531581814", "body": "Pls inline the variable.", "bodyText": "Pls inline the variable.", "bodyHTML": "<p dir=\"auto\">Pls inline the variable.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T12:45:16Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               Imp firstImp,\n+                               Imp.ImpBuilder modifiedFirstImp) {\n+        final ExtImpTtx extImpTtx;\n+        extImpTtx = parseImpExt(firstImp);", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MjQ3NA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531582474", "body": "You can use `StringUtils.stripToNull(..)` to avoid the checking.", "bodyText": "You can use StringUtils.stripToNull(..) to avoid the checking.", "bodyHTML": "<p dir=\"auto\">You can use <code>StringUtils.stripToNull(..)</code> to avoid the checking.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T12:46:43Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               Imp firstImp,\n+                               Imp.ImpBuilder modifiedFirstImp) {\n+        final ExtImpTtx extImpTtx;\n+        extImpTtx = parseImpExt(firstImp);\n+        final String zoneId = extImpTtx.getZoneId();\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(\n+                TtxImpExtTtx.of(extImpTtx.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NTY4Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531585687", "body": "Pls extract `site` modification to separate method.", "bodyText": "Pls extract site modification to separate method.", "bodyHTML": "<p dir=\"auto\">Pls extract <code>site</code> modification to separate method.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T12:54:11Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               Imp firstImp,\n+                               Imp.ImpBuilder modifiedFirstImp) {\n+        final ExtImpTtx extImpTtx;\n+        extImpTtx = parseImpExt(firstImp);\n+        final String zoneId = extImpTtx.getZoneId();\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(\n+                TtxImpExtTtx.of(extImpTtx.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n+\n+        modifiedFirstImp.ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n+        final Site site = request.getSite();\n+        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n+        modifiedRequest.site(siteBuilder.id(extImpTtx.getSiteId()).build());", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NzQzMg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531587432", "body": "Can we rid off this method and use more specific but smaller ones?", "bodyText": "Can we rid off this method and use more specific but smaller ones?", "bodyHTML": "<p dir=\"auto\">Can we rid off this method and use more specific but smaller ones?</p>", "author": "rpanchyk", "createdAt": "2020-11-27T12:58:02Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5MDU4MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531590580", "body": "We have a lot of checks for null and zero.\r\nMay be it would be better to create separate method for such cases?", "bodyText": "We have a lot of checks for null and zero.\nMay be it would be better to create separate method for such cases?", "bodyHTML": "<p dir=\"auto\">We have a lot of checks for null and zero.<br>\nMay be it would be better to create separate method for such cases?</p>", "author": "rpanchyk", "createdAt": "2020-11-27T13:05:00Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               Imp firstImp,\n+                               Imp.ImpBuilder modifiedFirstImp) {\n+        final ExtImpTtx extImpTtx;\n+        extImpTtx = parseImpExt(firstImp);\n+        final String zoneId = extImpTtx.getZoneId();\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(\n+                TtxImpExtTtx.of(extImpTtx.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n+\n+        modifiedFirstImp.ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n+        final Site site = request.getSite();\n+        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n+        modifiedRequest.site(siteBuilder.id(extImpTtx.getSiteId()).build());\n+        final Video video = firstImp.getVideo();\n+        if (firstImp.getVideo() != null) {\n+            modifiedFirstImp.video(modifyVideo(video, extImpTtx.getProductId()));\n+        }\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Video modifyVideo(Video video, String prod) {\n+        if (video.getW() == null\n+                || video.getW() == 0\n+                || video.getH() == null\n+                || video.getH() == 0\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+        final Video.VideoBuilder modifiedVideo = video.toBuilder();\n+        if (video.getPlacement() == null || video.getPlacement() == 0) {", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5MTE2Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531591167", "body": "`prod` argument name is not informative.", "bodyText": "prod argument name is not informative.", "bodyHTML": "<p dir=\"auto\"><code>prod</code> argument name is not informative.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T13:06:17Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               Imp firstImp,\n+                               Imp.ImpBuilder modifiedFirstImp) {\n+        final ExtImpTtx extImpTtx;\n+        extImpTtx = parseImpExt(firstImp);\n+        final String zoneId = extImpTtx.getZoneId();\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(\n+                TtxImpExtTtx.of(extImpTtx.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n+\n+        modifiedFirstImp.ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n+        final Site site = request.getSite();\n+        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n+        modifiedRequest.site(siteBuilder.id(extImpTtx.getSiteId()).build());\n+        final Video video = firstImp.getVideo();\n+        if (firstImp.getVideo() != null) {\n+            modifiedFirstImp.video(modifyVideo(video, extImpTtx.getProductId()));\n+        }\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Video modifyVideo(Video video, String prod) {", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5ODI0MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531598240", "body": "Is there the case when we don't need to update the video, so creation of builder is redundant.\r\nIt is not so critical for bidders, but in core we use approach as in `org.prebid.server.auction.AuctionRequestFactory#fillImplicitParameters` method, like extracting all needed fields and then if at least one them is desired to be updated - create the builder and set fields.\r\n\r\nAgain, not critical, but just to think.", "bodyText": "Is there the case when we don't need to update the video, so creation of builder is redundant.\nIt is not so critical for bidders, but in core we use approach as in org.prebid.server.auction.AuctionRequestFactory#fillImplicitParameters method, like extracting all needed fields and then if at least one them is desired to be updated - create the builder and set fields.\nAgain, not critical, but just to think.", "bodyHTML": "<p dir=\"auto\">Is there the case when we don't need to update the video, so creation of builder is redundant.<br>\nIt is not so critical for bidders, but in core we use approach as in <code>org.prebid.server.auction.AuctionRequestFactory#fillImplicitParameters</code> method, like extracting all needed fields and then if at least one them is desired to be updated - create the builder and set fields.</p>\n<p dir=\"auto\">Again, not critical, but just to think.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T13:20:43Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               Imp firstImp,\n+                               Imp.ImpBuilder modifiedFirstImp) {\n+        final ExtImpTtx extImpTtx;\n+        extImpTtx = parseImpExt(firstImp);\n+        final String zoneId = extImpTtx.getZoneId();\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(\n+                TtxImpExtTtx.of(extImpTtx.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n+\n+        modifiedFirstImp.ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n+        final Site site = request.getSite();\n+        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n+        modifiedRequest.site(siteBuilder.id(extImpTtx.getSiteId()).build());\n+        final Video video = firstImp.getVideo();\n+        if (firstImp.getVideo() != null) {\n+            modifiedFirstImp.video(modifyVideo(video, extImpTtx.getProductId()));\n+        }\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Video modifyVideo(Video video, String prod) {\n+        if (video.getW() == null\n+                || video.getW() == 0\n+                || video.getH() == null\n+                || video.getH() == 0\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+        final Video.VideoBuilder modifiedVideo = video.toBuilder();", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTEyNg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531599126", "body": "Can be final.", "bodyText": "Can be final.", "bodyHTML": "<p dir=\"auto\">Can be final.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T13:22:28Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               Imp firstImp,\n+                               Imp.ImpBuilder modifiedFirstImp) {\n+        final ExtImpTtx extImpTtx;\n+        extImpTtx = parseImpExt(firstImp);\n+        final String zoneId = extImpTtx.getZoneId();\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(\n+                TtxImpExtTtx.of(extImpTtx.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n+\n+        modifiedFirstImp.ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n+        final Site site = request.getSite();\n+        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n+        modifiedRequest.site(siteBuilder.id(extImpTtx.getSiteId()).build());\n+        final Video video = firstImp.getVideo();\n+        if (firstImp.getVideo() != null) {\n+            modifiedFirstImp.video(modifyVideo(video, extImpTtx.getProductId()));\n+        }\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Video modifyVideo(Video video, String prod) {\n+        if (video.getW() == null\n+                || video.getW() == 0\n+                || video.getH() == null\n+                || video.getH() == 0\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+        final Video.VideoBuilder modifiedVideo = video.toBuilder();\n+        if (video.getPlacement() == null || video.getPlacement() == 0) {\n+            modifiedVideo.placement(2);\n+        }\n+        if (Objects.equals(prod, \"instream\")) {\n+            modifiedVideo.placement(1);\n+            if (video.getStartdelay() == null) {\n+                modifiedVideo.startdelay(0);\n+            }\n+        }\n+        return modifiedVideo.build();\n+    }\n+\n     @Override\n-    protected BidType getBidType(String impId, List<Imp> imps) {\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.withError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidResponse bidResponse) {\n+        if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> createBidderBid(bid, bidResponse.getCur()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private BidderBid createBidderBid(Bid bid, String currency) {\n+        BidType bidType;\n+        try {\n+            TtxBidExt ttxBidExt = mapper.mapper().convertValue(bid.getExt(), TtxBidExt.class);", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTIyMg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531599222", "body": "Can be final.", "bodyText": "Can be final.", "bodyHTML": "<p dir=\"auto\">Can be final.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T13:22:39Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null\n+                && modifiedRequest.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return null;\n+        }\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private void modifyRequest(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        try {\n+            processModify(request, modifiedRequest, firstImp, modifiedFirstImp);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(request.getImp());\n+        imps.set(0, modifiedFirstImp.build());\n+        modifiedRequest.imp(imps);\n+    }\n+\n+    private void processModify(BidRequest request,\n+                               BidRequest.BidRequestBuilder modifiedRequest,\n+                               Imp firstImp,\n+                               Imp.ImpBuilder modifiedFirstImp) {\n+        final ExtImpTtx extImpTtx;\n+        extImpTtx = parseImpExt(firstImp);\n+        final String zoneId = extImpTtx.getZoneId();\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(\n+                TtxImpExtTtx.of(extImpTtx.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n+\n+        modifiedFirstImp.ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n+        final Site site = request.getSite();\n+        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n+        modifiedRequest.site(siteBuilder.id(extImpTtx.getSiteId()).build());\n+        final Video video = firstImp.getVideo();\n+        if (firstImp.getVideo() != null) {\n+            modifiedFirstImp.video(modifyVideo(video, extImpTtx.getProductId()));\n+        }\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Video modifyVideo(Video video, String prod) {\n+        if (video.getW() == null\n+                || video.getW() == 0\n+                || video.getH() == null\n+                || video.getH() == 0\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+        final Video.VideoBuilder modifiedVideo = video.toBuilder();\n+        if (video.getPlacement() == null || video.getPlacement() == 0) {\n+            modifiedVideo.placement(2);\n+        }\n+        if (Objects.equals(prod, \"instream\")) {\n+            modifiedVideo.placement(1);\n+            if (video.getStartdelay() == null) {\n+                modifiedVideo.startdelay(0);\n+            }\n+        }\n+        return modifiedVideo.build();\n+    }\n+\n     @Override\n-    protected BidType getBidType(String impId, List<Imp> imps) {\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.withError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidResponse bidResponse) {\n+        if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> createBidderBid(bid, bidResponse.getCur()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private BidderBid createBidderBid(Bid bid, String currency) {\n+        BidType bidType;", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2NDk0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r532264942", "bodyText": "can not because of catch block", "author": "snahornyi", "createdAt": "2020-11-29T20:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2ODk0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r533368942", "bodyText": "agreed", "author": "rpanchyk", "createdAt": "2020-12-01T12:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTk1NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531599955", "body": "No annotation required.", "bodyText": "No annotation required.", "bodyHTML": "<p dir=\"auto\">No annotation required.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T13:24:10Z", "path": "src/main/java/org/prebid/server/bidder/ttx/response/TtxBidExt.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.prebid.server.bidder.ttx.response;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class TtxBidExt {\n+\n+    @JsonProperty(\"ttx\")", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTExNw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531601117", "body": "It is better to check errors instead of request.", "bodyText": "It is better to check errors instead of request.", "bodyHTML": "<p dir=\"auto\">It is better to check errors instead of request.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T13:26:24Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMjQyNw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r531602427", "body": "Let's do the logic more straight-forward and perform imps validation before creating of request.", "bodyText": "Let's do the logic more straight-forward and perform imps validation before creating of request.", "bodyHTML": "<p dir=\"auto\">Let's do the logic more straight-forward and perform imps validation before creating of request.</p>", "author": "rpanchyk", "createdAt": "2020-11-27T13:29:05Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,199 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n \n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+        if (httpRequest == null) {\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        modifyRequest(request, requestToUpdate, errors);\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+        if (modifiedRequest.getImp().get(0).getBanner() == null", "originalCommit": "fa02cffefa97cd334bdf9d816d4f69361cf4bd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a238b619efa367bf5f2f6347b53fa973fd52472", "url": "https://github.com/prebid/prebid-server-java/commit/4a238b619efa367bf5f2f6347b53fa973fd52472", "message": "Fixes after review", "committedDate": "2020-11-29T22:33:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2MjM2OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r533362368", "body": "i'd suggest to divide this method in `updateFirstImp(..)` and `replaceFirstImp(imps, firstImp)`.", "bodyText": "i'd suggest to divide this method in updateFirstImp(..) and replaceFirstImp(imps, firstImp).", "bodyHTML": "<p dir=\"auto\">i'd suggest to divide this method in <code>updateFirstImp(..)</code> and <code>replaceFirstImp(imps, firstImp)</code>.</p>", "author": "rpanchyk", "createdAt": "2020-12-01T12:12:11Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,216 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        final Imp firstImp = request.getImp().get(0);\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            requestToUpdate.site(updateSite(request.getSite(), extImpTtx.getSiteId()));\n+            requestToUpdate.imp(updateImpList(request.getImp(), firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors));\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private List<Imp> updateImpList(List<Imp> requestImps, Imp firstImp, String productId,", "originalCommit": "4a238b619efa367bf5f2f6347b53fa973fd52472", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NDU4Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r533364587", "body": "have a couple ideas here:\r\n1. populate `updatedSite` and `updatedFirstImp` variables in try section.\r\n2. when creating `modifiedRequest` - set all determined variables.", "bodyText": "have a couple ideas here:\n\npopulate updatedSite and updatedFirstImp variables in try section.\nwhen creating modifiedRequest - set all determined variables.", "bodyHTML": "<p dir=\"auto\">have a couple ideas here:</p>\n<ol dir=\"auto\">\n<li>populate <code>updatedSite</code> and <code>updatedFirstImp</code> variables in try section.</li>\n<li>when creating <code>modifiedRequest</code> - set all determined variables.</li>\n</ol>", "author": "rpanchyk", "createdAt": "2020-12-01T12:16:08Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,216 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        final Imp firstImp = request.getImp().get(0);\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            requestToUpdate.site(updateSite(request.getSite(), extImpTtx.getSiteId()));", "originalCommit": "4a238b619efa367bf5f2f6347b53fa973fd52472", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NTE1MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r533365151", "body": "Minor. Method can be static.", "bodyText": "Minor. Method can be static.", "bodyHTML": "<p dir=\"auto\">Minor. Method can be static.</p>", "author": "rpanchyk", "createdAt": "2020-12-01T12:17:12Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,216 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        final Imp firstImp = request.getImp().get(0);\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            requestToUpdate.site(updateSite(request.getSite(), extImpTtx.getSiteId()));\n+            requestToUpdate.imp(updateImpList(request.getImp(), firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors));\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private List<Imp> updateImpList(List<Imp> requestImps, Imp firstImp, String productId,\n+                                    String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(requestImps);\n+        imps.set(0, modifiedFirstImp.build());\n+        return imps;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return (resolvedPlacement != null || resolvedStartDelay != null)\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;\n+    }\n+\n+    private Integer resolveStartDelay(String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 0 : null;\n+    }\n+\n+    private Site updateSite(Site site, String siteId) {\n+        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n+        return siteBuilder.id(siteId).build();\n+    }\n+\n+    private boolean isZeroOrNullInteger(Integer integer) {", "originalCommit": "4a238b619efa367bf5f2f6347b53fa973fd52472", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NjE1OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r533366158", "body": "No braces required here.", "bodyText": "No braces required here.", "bodyHTML": "<p dir=\"auto\">No braces required here.</p>", "author": "rpanchyk", "createdAt": "2020-12-01T12:19:07Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,216 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        final Imp firstImp = request.getImp().get(0);\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            requestToUpdate.site(updateSite(request.getSite(), extImpTtx.getSiteId()));\n+            requestToUpdate.imp(updateImpList(request.getImp(), firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors));\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private List<Imp> updateImpList(List<Imp> requestImps, Imp firstImp, String productId,\n+                                    String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(requestImps);\n+        imps.set(0, modifiedFirstImp.build());\n+        return imps;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return (resolvedPlacement != null || resolvedStartDelay != null)", "originalCommit": "4a238b619efa367bf5f2f6347b53fa973fd52472", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2ODMwMg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r533368302", "body": "Should the original `placement` be used if null resolved?", "bodyText": "Should the original placement be used if null resolved?", "bodyHTML": "<p dir=\"auto\">Should the original <code>placement</code> be used if null resolved?</p>", "author": "rpanchyk", "createdAt": "2020-12-01T12:22:39Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,216 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final BidRequest.BidRequestBuilder requestToUpdate = request.toBuilder();\n+        final Imp firstImp = request.getImp().get(0);\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            requestToUpdate.site(updateSite(request.getSite(), extImpTtx.getSiteId()));\n+            requestToUpdate.imp(updateImpList(request.getImp(), firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors));\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest modifiedRequest = requestToUpdate.build();\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n                 .build();\n     }\n \n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private List<Imp> updateImpList(List<Imp> requestImps, Imp firstImp, String productId,\n+                                    String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final List<Imp> imps = new ArrayList<>(requestImps);\n+        imps.set(0, modifiedFirstImp.build());\n+        return imps;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return (resolvedPlacement != null || resolvedStartDelay != null)\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement).build()", "originalCommit": "4a238b619efa367bf5f2f6347b53fa973fd52472", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4MjA3MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r533382070", "bodyText": "Idea is that this block will never be called if resolvedPlacement is null, but it's only for now. Thanks for catching this))", "author": "snahornyi", "createdAt": "2020-12-01T12:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2ODMwMg=="}], "type": "inlineReview"}, {"oid": "5732faddf5e80b4a6305ceb65e3389ebd2dcabdd", "url": "https://github.com/prebid/prebid-server-java/commit/5732faddf5e80b4a6305ceb65e3389ebd2dcabdd", "message": "Fixes after review", "committedDate": "2020-12-01T12:44:53Z", "type": "commit"}, {"oid": "2080730831a4f8f22106c80cc54919cfba273e50", "url": "https://github.com/prebid/prebid-server-java/commit/2080730831a4f8f22106c80cc54919cfba273e50", "message": "Fixes after review", "committedDate": "2020-12-01T13:31:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzOTA5NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534139095", "body": "extract `request.getImp().get(0)` \r\nAnd you can pass it to the next method", "bodyText": "extract request.getImp().get(0)\nAnd you can pass it to the next method", "bodyHTML": "<p dir=\"auto\">extract <code>request.getImp().get(0)</code><br>\nAnd you can pass it to the next method</p>", "author": "DGarbar", "createdAt": "2020-12-02T12:45:48Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0MTYxOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534141619", "body": "redundant /n", "bodyText": "redundant /n", "bodyHTML": "<p dir=\"auto\">redundant /n</p>", "author": "DGarbar", "createdAt": "2020-12-02T12:50:05Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0MTg5OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534141898", "body": "redundant /n", "bodyText": "redundant /n", "bodyHTML": "<p dir=\"auto\">redundant /n</p>", "author": "DGarbar", "createdAt": "2020-12-02T12:50:33Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0MjIxOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534142219", "body": "we can name this method `updateImp` and not specify that it is only for firstImp", "bodyText": "we can name this method updateImp and not specify that it is only for firstImp", "bodyHTML": "<p dir=\"auto\">we can name this method <code>updateImp</code> and not specify that it is only for firstImp</p>", "author": "DGarbar", "createdAt": "2020-12-02T12:51:07Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0MzA3Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534143076", "body": "Method is not on his method call ordering position", "bodyText": "Method is not on his method call ordering position", "bodyHTML": "<p dir=\"auto\">Method is not on his method call ordering position</p>", "author": "DGarbar", "createdAt": "2020-12-02T12:52:28Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;\n+    }\n+\n+    private Integer resolveStartDelay(String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 0 : null;\n+    }\n+\n+    private Site updateSite(Site site, String siteId) {\n         final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+        return siteBuilder.id(siteId).build();", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0NDYzMg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534144632", "body": "Method is not on his method call ordering position", "bodyText": "Method is not on his method call ordering position", "bodyHTML": "<p dir=\"auto\">Method is not on his method call ordering position</p>", "author": "DGarbar", "createdAt": "2020-12-02T12:54:51Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0NjE1MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534146150", "body": "In go, they check if Site is null and don't create any new Site", "bodyText": "In go, they check if Site is null and don't create any new Site", "bodyHTML": "<p dir=\"auto\">In go, they check if Site is null and don't create any new Site</p>", "author": "DGarbar", "createdAt": "2020-12-02T12:57:14Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;\n+    }\n+\n+    private Integer resolveStartDelay(String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 0 : null;\n+    }\n+\n+    private Site updateSite(Site site, String siteId) {\n         final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+        return siteBuilder.id(siteId).build();", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0ODM3Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534148373", "body": "Just return singleError", "bodyText": "Just return singleError", "bodyHTML": "<p dir=\"auto\">Just return singleError</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:00:45Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE1MDg0MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534150841", "body": "I really don't like try catch block in java and especially if it is in the middle of the method. \r\nPlease, try to make it in the start of the method or even whole method. \r\nYou can parseImpExt in makeHttpRequests and then call updateImp.  and after that, pass ExtImpTtx to  createBidRequest method which will create Site and etc.\r\n\r\nI think it will be much more clear", "bodyText": "I really don't like try catch block in java and especially if it is in the middle of the method.\nPlease, try to make it in the start of the method or even whole method.\nYou can parseImpExt in makeHttpRequests and then call updateImp.  and after that, pass ExtImpTtx to  createBidRequest method which will create Site and etc.\nI think it will be much more clear", "bodyHTML": "<p dir=\"auto\">I really don't like try catch block in java and especially if it is in the middle of the method.<br>\nPlease, try to make it in the start of the method or even whole method.<br>\nYou can parseImpExt in makeHttpRequests and then call updateImp.  and after that, pass ExtImpTtx to  createBidRequest method which will create Site and etc.</p>\n<p dir=\"auto\">I think it will be much more clear</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:04:48Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE1Mzk3OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534153978", "body": "redundant  `modifiedFirstImp.`", "bodyText": "redundant  modifiedFirstImp.", "bodyHTML": "<p dir=\"auto\">redundant  <code>modifiedFirstImp.</code></p>", "author": "DGarbar", "createdAt": "2020-12-02T13:09:57Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE1Njk3Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534156977", "body": "Notice, that you can write just \r\n```\r\n        return imp.toBuilder()\r\n                .video(updateVideo(imp.getVideo(), productId)) !!!!! ADD NULL CHECK in updateVideo\r\n                .ext(createImpExt(productId, zoneId))\r\n                .build();\r\n```\r\nException is already will be handled above.", "bodyText": "Notice, that you can write just\n        return imp.toBuilder()\n                .video(updateVideo(imp.getVideo(), productId)) !!!!! ADD NULL CHECK in updateVideo\n                .ext(createImpExt(productId, zoneId))\n                .build();\n\nException is already will be handled above.", "bodyHTML": "<p dir=\"auto\">Notice, that you can write just</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        return imp.toBuilder()\n                .video(updateVideo(imp.getVideo(), productId)) !!!!! ADD NULL CHECK in updateVideo\n                .ext(createImpExt(productId, zoneId))\n                .build();\"><pre><code>        return imp.toBuilder()\n                .video(updateVideo(imp.getVideo(), productId)) !!!!! ADD NULL CHECK in updateVideo\n                .ext(createImpExt(productId, zoneId))\n                .build();\n</code></pre></div>\n<p dir=\"auto\">Exception is already will be handled above.</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:14:41Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2ODM5MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534168390", "body": "extract video.getPlacement()", "bodyText": "extract video.getPlacement()", "bodyHTML": "<p dir=\"auto\">extract video.getPlacement()</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:32:26Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2OTAxMw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534169013", "body": "ObjectUtils.firstNonNull(resolvedStartDelay, video.getStartdelay())", "bodyText": "ObjectUtils.firstNonNull(resolvedStartDelay, video.getStartdelay())", "bodyHTML": "<p dir=\"auto\">ObjectUtils.firstNonNull(resolvedStartDelay, video.getStartdelay())</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:33:27Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2OTQ0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534169442", "body": "Please, move builder to the end (move it after `:`) it more cleaner that way", "bodyText": "Please, move builder to the end (move it after :) it more cleaner that way", "bodyHTML": "<p dir=\"auto\">Please, move builder to the end (move it after <code>:</code>) it more cleaner that way</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:34:04Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3MzY1MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534173650", "body": "I really prefer to use just this in method\r\n```\r\nvideo.toBuilder()\r\n                .startdelay(resolveStartDelay(video.startdelay, productId))  !!! returning videoStartdelay (not null)\r\n                .placement(resolvePlacement(video.getPlacement(), productId)) !!! returning Placement (not null)\r\n                .build()\r\n```\r\nAt first, I thought that we optimize by not creating new instances, but I think that it is not critical bc there are too many variants that parameters will be updated\r\n\r\n", "bodyText": "I really prefer to use just this in method\nvideo.toBuilder()\n                .startdelay(resolveStartDelay(video.startdelay, productId))  !!! returning videoStartdelay (not null)\n                .placement(resolvePlacement(video.getPlacement(), productId)) !!! returning Placement (not null)\n                .build()\n\nAt first, I thought that we optimize by not creating new instances, but I think that it is not critical bc there are too many variants that parameters will be updated", "bodyHTML": "<p dir=\"auto\">I really prefer to use just this in method</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"video.toBuilder()\n                .startdelay(resolveStartDelay(video.startdelay, productId))  !!! returning videoStartdelay (not null)\n                .placement(resolvePlacement(video.getPlacement(), productId)) !!! returning Placement (not null)\n                .build()\"><pre><code>video.toBuilder()\n                .startdelay(resolveStartDelay(video.startdelay, productId))  !!! returning videoStartdelay (not null)\n                .placement(resolvePlacement(video.getPlacement(), productId)) !!! returning Placement (not null)\n                .build()\n</code></pre></div>\n<p dir=\"auto\">At first, I thought that we optimize by not creating new instances, but I think that it is not critical bc there are too many variants that parameters will be updated</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:40:28Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NDA1OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534174058", "body": "```\r\nfalse\r\n? 1\r\n: false ? 2 : null\r\n``` \r\nNPE\r\n\r\nAnd also checkStyle\r\n```\r\n        return Objects.equals(productId, \"instream\")\r\n                ? 1\r\n                : isZeroOrNullInteger(videoPlacement) ? 2 : null;\r\n```\r\n", "bodyText": "false\n? 1\n: false ? 2 : null\n\nNPE\nAnd also checkStyle\n        return Objects.equals(productId, \"instream\")\n                ? 1\n                : isZeroOrNullInteger(videoPlacement) ? 2 : null;", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"false\n? 1\n: false ? 2 : null\"><pre><code>false\n? 1\n: false ? 2 : null\n</code></pre></div>\n<p dir=\"auto\">NPE</p>\n<p dir=\"auto\">And also checkStyle</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        return Objects.equals(productId, &quot;instream&quot;)\n                ? 1\n                : isZeroOrNullInteger(videoPlacement) ? 2 : null;\"><pre><code>        return Objects.equals(productId, \"instream\")\n                ? 1\n                : isZeroOrNullInteger(videoPlacement) ? 2 : null;\n</code></pre></div>", "author": "DGarbar", "createdAt": "2020-12-02T13:41:06Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NDE1Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534174157", "body": "redundant /n", "bodyText": "redundant /n", "bodyHTML": "<p dir=\"auto\">redundant /n</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:41:16Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;\n+    }\n+\n+    private Integer resolveStartDelay(String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 0 : null;", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NDI2MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534174260", "body": "static", "bodyText": "static", "bodyHTML": "<p dir=\"auto\">static</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:41:25Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;\n+    }\n+\n+    private Integer resolveStartDelay(String productId) {", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NDMxNg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534174316", "body": "static", "bodyText": "static", "bodyHTML": "<p dir=\"auto\">static</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:41:29Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3Nzc3NA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534177774", "body": "`Site site` is not clear name, better to use `updatedSite`.", "bodyText": "Site site is not clear name, better to use updatedSite.", "bodyHTML": "<p dir=\"auto\"><code>Site site</code> is not clear name, better to use <code>updatedSite</code>.</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:46:30Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;\n+    }\n+\n+    private Integer resolveStartDelay(String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 0 : null;\n+    }\n+\n+    private Site updateSite(Site site, String siteId) {\n         final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+        return siteBuilder.id(siteId).build();\n+    }\n+\n+    private static boolean isZeroOrNullInteger(Integer integer) {\n+        return integer == null || integer == 0;\n+    }\n+\n+    private BidRequest updateRequest(BidRequest request, Site site, Imp firstImp) {", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4MDAwMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534180001", "body": "They also updated (today) logic that if req.site != null we can change smth. I'd like to see this logic here that pass value from above", "bodyText": "They also updated (today) logic that if req.site != null we can change smth. I'd like to see this logic here that pass value from above", "bodyHTML": "<p dir=\"auto\">They also updated (today) logic that if req.site != null we can change smth. I'd like to see this logic here that pass value from above</p>", "author": "DGarbar", "createdAt": "2020-12-02T13:49:39Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;\n+    }\n+\n+    private Integer resolveStartDelay(String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 0 : null;\n+    }\n+\n+    private Site updateSite(Site site, String siteId) {\n         final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+        return siteBuilder.id(siteId).build();\n+    }\n+\n+    private static boolean isZeroOrNullInteger(Integer integer) {\n+        return integer == null || integer == 0;\n+    }\n+\n+    private BidRequest updateRequest(BidRequest request, Site site, Imp firstImp) {\n+        if (site == null && firstImp == null) {\n+            return request;\n+        }\n+        final List<Imp> requestImps = request.getImp();\n+        return request.toBuilder()\n+                .site(site != null ? site : request.getSite())", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4NjAxMg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534186012", "body": "Can be a bit more like regular code, but it is depends on code style\r\n\r\n```\r\n                .map(bid -> BidderBid.of(bid, getBidType(bid), bidResponse.getCur()))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    private BidType getBidType(Bid bid) {\r\n        try {\r\n            final TtxBidExt ttxBidExt = mapper.mapper().convertValue(bid.getExt(), TtxBidExt.class);\r\n            return ttxBidExt != null ? getBidTypeByTtx(ttxBidExt.getTtx()) : BidType.banner;\r\n        } catch (IllegalArgumentException e) {\r\n            return BidType.banner;\r\n        }\r\n    }\r\n\r\n    private static BidType getBidTypeByTtx(TtxBidExtTtx bidExt) {\r\n        return bidExt != null && Objects.equals(bidExt.getMediaType(), \"video\")\r\n                ? BidType.video\r\n                : BidType.banner;\r\n    }\r\n```", "bodyText": "Can be a bit more like regular code, but it is depends on code style\n                .map(bid -> BidderBid.of(bid, getBidType(bid), bidResponse.getCur()))\n                .collect(Collectors.toList());\n    }\n\n    private BidType getBidType(Bid bid) {\n        try {\n            final TtxBidExt ttxBidExt = mapper.mapper().convertValue(bid.getExt(), TtxBidExt.class);\n            return ttxBidExt != null ? getBidTypeByTtx(ttxBidExt.getTtx()) : BidType.banner;\n        } catch (IllegalArgumentException e) {\n            return BidType.banner;\n        }\n    }\n\n    private static BidType getBidTypeByTtx(TtxBidExtTtx bidExt) {\n        return bidExt != null && Objects.equals(bidExt.getMediaType(), \"video\")\n                ? BidType.video\n                : BidType.banner;\n    }", "bodyHTML": "<p dir=\"auto\">Can be a bit more like regular code, but it is depends on code style</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"                .map(bid -&gt; BidderBid.of(bid, getBidType(bid), bidResponse.getCur()))\n                .collect(Collectors.toList());\n    }\n\n    private BidType getBidType(Bid bid) {\n        try {\n            final TtxBidExt ttxBidExt = mapper.mapper().convertValue(bid.getExt(), TtxBidExt.class);\n            return ttxBidExt != null ? getBidTypeByTtx(ttxBidExt.getTtx()) : BidType.banner;\n        } catch (IllegalArgumentException e) {\n            return BidType.banner;\n        }\n    }\n\n    private static BidType getBidTypeByTtx(TtxBidExtTtx bidExt) {\n        return bidExt != null &amp;&amp; Objects.equals(bidExt.getMediaType(), &quot;video&quot;)\n                ? BidType.video\n                : BidType.banner;\n    }\"><pre><code>                .map(bid -&gt; BidderBid.of(bid, getBidType(bid), bidResponse.getCur()))\n                .collect(Collectors.toList());\n    }\n\n    private BidType getBidType(Bid bid) {\n        try {\n            final TtxBidExt ttxBidExt = mapper.mapper().convertValue(bid.getExt(), TtxBidExt.class);\n            return ttxBidExt != null ? getBidTypeByTtx(ttxBidExt.getTtx()) : BidType.banner;\n        } catch (IllegalArgumentException e) {\n            return BidType.banner;\n        }\n    }\n\n    private static BidType getBidTypeByTtx(TtxBidExtTtx bidExt) {\n        return bidExt != null &amp;&amp; Objects.equals(bidExt.getMediaType(), \"video\")\n                ? BidType.video\n                : BidType.banner;\n    }\n</code></pre></div>", "author": "DGarbar", "createdAt": "2020-12-02T13:58:09Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -1,64 +1,231 @@\n package org.prebid.server.bidder.ttx;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.prebid.server.bidder.OpenrtbBidder;\n-import org.prebid.server.bidder.model.ImpWithExt;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n import org.prebid.server.bidder.ttx.proto.TtxImpExt;\n import org.prebid.server.bidder.ttx.proto.TtxImpExtTtx;\n+import org.prebid.server.bidder.ttx.response.TtxBidExt;\n+import org.prebid.server.bidder.ttx.response.TtxBidExtTtx;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.ttx.ExtImpTtx;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class TtxBidder extends OpenrtbBidder<ExtImpTtx> {\n+/**\n+ * 33across {@link Bidder} implementation.\n+ */\n+public class TtxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpTtx>> TTX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTtx>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n \n     public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n-        super(endpointUrl, RequestCreationStrategy.SINGLE_REQUEST, ExtImpTtx.class, mapper);\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n     }\n \n     @Override\n-    protected void modifyRequest(BidRequest bidRequest, BidRequest.BidRequestBuilder requestBuilder,\n-                                 List<ImpWithExt<ExtImpTtx>> impsWithExts) {\n-        final List<Imp> modifiedImps = impsWithExts.stream()\n-                .map(ImpWithExt::getImp)\n-                .collect(Collectors.toList());\n-        final Imp firstImp = modifiedImps.get(0);\n-        final ExtImpTtx firstImpExt = impsWithExts.get(0).getImpExt();\n-\n-        final String zoneId = firstImpExt.getZoneId();\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(\n-                TtxImpExtTtx.of(firstImpExt.getProductId(), StringUtils.isNotBlank(zoneId) ? zoneId : null));\n-\n-        final Imp modifiedFirstImp = firstImp.toBuilder().ext(mapper.mapper().valueToTree(ttxImpExt)).build();\n-\n-        if (modifiedImps.size() == 1) {\n-            requestBuilder.imp(Collections.singletonList(modifiedFirstImp));\n-        } else {\n-            final List<Imp> subList = modifiedImps.subList(1, modifiedImps.size());\n-            final List<Imp> finalizedImps = new ArrayList<>(subList.size() + 1);\n-            finalizedImps.add(modifiedFirstImp);\n-            finalizedImps.addAll(subList);\n-            requestBuilder.imp(finalizedImps);\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (request.getImp().get(0).getBanner() == null\n+                && request.getImp().get(0).getVideo() == null) {\n+            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+                    + \"formats must be defined in Imp. None found\"));\n+            return Result.withErrors(errors);\n+        }\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n+        final Imp firstImp = request.getImp().get(0);\n+        Site updatedSite = null;\n+        Imp updatedFirstImp = null;\n+        try {\n+            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n+            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n+            updatedFirstImp = updateFirstImp(firstImp,\n+                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .payload(modifiedRequest)\n+                .body(mapper.encode(modifiedRequest))\n+                .build();\n+    }\n+\n+    private ExtImpTtx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TTX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }\n+\n+    private Imp updateFirstImp(Imp firstImp, String productId,\n+                               String zoneId, List<BidderError> errors) {\n+        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n+        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n+\n+        final Video video = firstImp.getVideo();\n+        try {\n+            if (video != null) {\n+                modifiedFirstImp.video(updateVideo(video, productId));\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n         }\n-        requestBuilder.site(modifySite(bidRequest.getSite(), firstImpExt.getSiteId()));\n+\n+        return modifiedFirstImp.build();\n     }\n \n-    private static Site modifySite(Site site, String siteId) {\n+    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n+        final List<Imp> updatedImpList = new ArrayList<>(imps);\n+        updatedImpList.set(0, firstImp);\n+        return updatedImpList;\n+    }\n+\n+    private ObjectNode createImpExt(String productId, String zoneId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+        return mapper.mapper().valueToTree(ttxImpExt);\n+    }\n+\n+    private Video updateVideo(Video video, String productId) {\n+        if (isZeroOrNullInteger(video.getW())\n+                || isZeroOrNullInteger(video.getH())\n+                || CollectionUtils.isEmpty(video.getProtocols())\n+                || CollectionUtils.isEmpty(video.getMimes())\n+                || CollectionUtils.isEmpty(video.getPlaybackmethod())\n+        ) {\n+            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\");\n+        }\n+\n+        return modifyVideo(video, productId);\n+    }\n+\n+    private Video modifyVideo(Video video, String productId) {\n+        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n+        final Integer resolvedStartDelay = resolveStartDelay(productId);\n+\n+        return resolvedPlacement != null || resolvedStartDelay != null\n+                ? video.toBuilder()\n+                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n+                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n+                : video;\n+    }\n+\n+    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 1 : isZeroOrNullInteger(videoPlacement)\n+                ? 2 : null;\n+    }\n+\n+    private Integer resolveStartDelay(String productId) {\n+        return Objects.equals(productId, \"instream\")\n+                ? 0 : null;\n+    }\n+\n+    private Site updateSite(Site site, String siteId) {\n         final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder\n-                .id(siteId)\n+        return siteBuilder.id(siteId).build();\n+    }\n+\n+    private static boolean isZeroOrNullInteger(Integer integer) {\n+        return integer == null || integer == 0;\n+    }\n+\n+    private BidRequest updateRequest(BidRequest request, Site site, Imp firstImp) {\n+        if (site == null && firstImp == null) {\n+            return request;\n+        }\n+        final List<Imp> requestImps = request.getImp();\n+        return request.toBuilder()\n+                .site(site != null ? site : request.getSite())\n+                .imp(firstImp != null ? replaceFirstImp(requestImps, firstImp) : requestImps)\n                 .build();\n     }\n \n     @Override\n-    protected BidType getBidType(String impId, List<Imp> imps) {\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.withError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidResponse bidResponse) {\n+        if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> createBidderBid(bid, bidResponse.getCur()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private BidderBid createBidderBid(Bid bid, String currency) {\n+        BidType bidType;\n+        try {\n+            final TtxBidExt ttxBidExt = mapper.mapper().convertValue(bid.getExt(), TtxBidExt.class);\n+            bidType = ttxBidExt != null ? getBidType(ttxBidExt.getTtx()) : BidType.banner;\n+        } catch (IllegalArgumentException e) {\n+            bidType = BidType.banner;\n+        }\n+        return BidderBid.of(bid, bidType, currency);\n+    }\n+\n+    private static BidType getBidType(TtxBidExtTtx bidExt) {\n+        if (bidExt != null && Objects.equals(bidExt.getMediaType(), \"video\")) {\n+            return BidType.video;\n+        }\n+\n         return BidType.banner;", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5MjI1NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534192255", "body": "don't use && in asserts. \r\nBetter to create separate one for this test case or use `allSatisfy`", "bodyText": "don't use && in asserts.\nBetter to create separate one for this test case or use allSatisfy", "bodyHTML": "<p dir=\"auto\">don't use &amp;&amp; in asserts.<br>\nBetter to create separate one for this test case or use <code>allSatisfy</code></p>", "author": "DGarbar", "createdAt": "2020-12-02T14:06:55Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -60,8 +65,10 @@ public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n \n         // then\n         assertThat(result.getErrors()).hasSize(1);\n-        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n-        assertThat(result.getValue()).isEmpty();\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"Cannot deserialize instance\")\n+                && error.getType() == BidderError.Type.bad_input);", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5MzMzNg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534193336", "body": "makeHttpRequestsShouldSetSiteIdFromImpExt will be updated if you add null check for site", "bodyText": "makeHttpRequestsShouldSetSiteIdFromImpExt will be updated if you add null check for site", "bodyHTML": "<p dir=\"auto\">makeHttpRequestsShouldSetSiteIdFromImpExt will be updated if you add null check for site</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:08:28Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -60,8 +65,10 @@ public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n \n         // then\n         assertThat(result.getErrors()).hasSize(1);\n-        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n-        assertThat(result.getValue()).isEmpty();\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"Cannot deserialize instance\")\n+                && error.getType() == BidderError.Type.bad_input);\n+        assertThat(result.getValue()).hasSize(1);\n     }\n \n     @Test", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5MzY2MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534193660", "body": "asList redundant", "bodyText": "asList redundant", "bodyHTML": "<p dir=\"auto\">asList redundant</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:08:54Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5NDMwMg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534194302", "body": "If you want to test Any, you will have several tests for specific case, so remove `Any`", "bodyText": "If you want to test Any, you will have several tests for specific case, so remove Any", "bodyHTML": "<p dir=\"auto\">If you want to test Any, you will have several tests for specific case, so remove <code>Any</code></p>", "author": "DGarbar", "createdAt": "2020-12-02T14:09:47Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5NzA3MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534197071", "body": "redundant asList", "bodyText": "redundant asList", "bodyHTML": "<p dir=\"auto\">redundant asList</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:13:40Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdateNotPresentPlacement() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5NzE1Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534197153", "body": "redundant asList", "bodyText": "redundant asList", "bodyHTML": "<p dir=\"auto\">redundant asList</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:13:48Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdateNotPresentPlacement() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getVideo)\n+                .containsExactly(Video.builder()\n+                        .placement(2)\n+                        .w(23)\n+                        .h(23)\n+                        .mimes(singletonList(\"mime\"))\n+                        .protocols(singletonList(23))\n+                        .playbackmethod(singletonList(27))\n+                        .build());\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdatePlacementAndStartDelayIfProdIsInstream() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5NzkxMA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534197910", "body": "check only for placement", "bodyText": "check only for placement", "bodyHTML": "<p dir=\"auto\">check only for placement</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:14:53Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdateNotPresentPlacement() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getVideo)\n+                .containsExactly(Video.builder()\n+                        .placement(2)", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5ODg2MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534198860", "body": "Check only for this two values. (or extract Video builder and update it in 'then' section to create expected one)", "bodyText": "Check only for this two values. (or extract Video builder and update it in 'then' section to create expected one)", "bodyHTML": "<p dir=\"auto\">Check only for this two values. (or extract Video builder and update it in 'then' section to create expected one)</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:16:08Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdateNotPresentPlacement() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getVideo)\n+                .containsExactly(Video.builder()\n+                        .placement(2)\n+                        .w(23)\n+                        .h(23)\n+                        .mimes(singletonList(\"mime\"))\n+                        .protocols(singletonList(23))\n+                        .playbackmethod(singletonList(27))\n+                        .build());\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdatePlacementAndStartDelayIfProdIsInstream() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"instream\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getVideo)\n+                .containsExactly(Video.builder()\n+                        .placement(1)\n+                        .startdelay(0)", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5OTA3OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534199078", "body": "can be one line", "bodyText": "can be one line", "bodyHTML": "<p dir=\"auto\">can be one line</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:16:28Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdateNotPresentPlacement() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getVideo)\n+                .containsExactly(Video.builder()\n+                        .placement(2)\n+                        .w(23)\n+                        .h(23)\n+                        .mimes(singletonList(\"mime\"))\n+                        .protocols(singletonList(23))\n+                        .playbackmethod(singletonList(27))\n+                        .build());\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdatePlacementAndStartDelayIfProdIsInstream() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"instream\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getVideo)\n+                .containsExactly(Video.builder()\n+                        .placement(1)\n+                        .startdelay(0)\n+                        .w(23)\n+                        .h(23)\n+                        .mimes(singletonList(\"mime\"))\n+                        .protocols(singletonList(23))\n+                        .playbackmethod(singletonList(27))\n+                        .build());\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfNoBannerOrVideoPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(givenImp(impBuilder -> impBuilder\n+                        .banner(null))))", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5OTQ0Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534199443", "body": "remove && in assert. \r\nYou can use containsOnly for that. (Exception  has constant body)", "bodyText": "remove && in assert.\nYou can use containsOnly for that. (Exception  has constant body)", "bodyHTML": "<p dir=\"auto\">remove &amp;&amp; in assert.<br>\nYou can use containsOnly for that. (Exception  has constant body)</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:16:56Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdateNotPresentPlacement() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getVideo)\n+                .containsExactly(Video.builder()\n+                        .placement(2)\n+                        .w(23)\n+                        .h(23)\n+                        .mimes(singletonList(\"mime\"))\n+                        .protocols(singletonList(23))\n+                        .playbackmethod(singletonList(27))\n+                        .build());\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdatePlacementAndStartDelayIfProdIsInstream() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"instream\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .extracting(HttpRequest::getPayload)\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getVideo)\n+                .containsExactly(Video.builder()\n+                        .placement(1)\n+                        .startdelay(0)\n+                        .w(23)\n+                        .h(23)\n+                        .mimes(singletonList(\"mime\"))\n+                        .protocols(singletonList(23))\n+                        .playbackmethod(singletonList(27))\n+                        .build());\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfNoBannerOrVideoPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(givenImp(impBuilder -> impBuilder\n+                        .banner(null))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors())\n+                .allMatch(error -> error.getMessage()\n+                        .startsWith(\"At least one of [banner, video] formats must be defined in Imp. None found\")\n+                        && error.getType() == BidderError.Type.bad_input);", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwMDU4OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534200588", "body": "remove && in assert.", "bodyText": "remove && in assert.", "bodyHTML": "<p dir=\"auto\">remove &amp;&amp; in assert.</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:18:30Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -139,8 +260,9 @@ public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n \n         // then\n         assertThat(result.getErrors()).hasSize(1);\n-        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n-        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getErrors())\n+                .allMatch(error -> error.getMessage().startsWith(\"Failed to decode: Unrecognized token\")\n+                        && error.getType() == BidderError.Type.bad_server_response);", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwMjU2OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534202568", "body": "not `convertValue` but `valueToTree`", "bodyText": "not convertValue but valueToTree", "bodyHTML": "<p dir=\"auto\">not <code>convertValue</code> but <code>valueToTree</code></p>", "author": "DGarbar", "createdAt": "2020-12-02T14:20:53Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -191,6 +313,52 @@ public void makeBidsShouldReturnBannerBid() throws JsonProcessingException {\n                 .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n     }\n \n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoInBidExt() throws JsonProcessingException {\n+        // given\n+        final TtxBidExt ttxBidExt = TtxBidExt.of(TtxBidExtTtx.of(\"video\"));\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder\n+                                .ext(mapper.convertValue(ttxBidExt, ObjectNode.class)))));", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwMjYyNw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534202627", "body": "not `convertValue` but `valueToTree`", "bodyText": "not convertValue but valueToTree", "bodyHTML": "<p dir=\"auto\">not <code>convertValue</code> but <code>valueToTree</code></p>", "author": "DGarbar", "createdAt": "2020-12-02T14:20:58Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -191,6 +313,52 @@ public void makeBidsShouldReturnBannerBid() throws JsonProcessingException {\n                 .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n     }\n \n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoInBidExt() throws JsonProcessingException {\n+        // given\n+        final TtxBidExt ttxBidExt = TtxBidExt.of(TtxBidExtTtx.of(\"video\"));\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder\n+                                .ext(mapper.convertValue(ttxBidExt, ObjectNode.class)))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = ttxBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder()\n+                        .ext(mapper.convertValue(ttxBidExt, ObjectNode.class))", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwMzUwNg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534203506", "body": "make one line and extract expected Bid \r\nOR \r\nextract Type and check only that", "bodyText": "make one line and extract expected Bid\nOR\nextract Type and check only that", "bodyHTML": "<p dir=\"auto\">make one line and extract expected Bid<br>\nOR<br>\nextract Type and check only that</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:22:08Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -191,6 +313,52 @@ public void makeBidsShouldReturnBannerBid() throws JsonProcessingException {\n                 .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n     }\n \n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoInBidExt() throws JsonProcessingException {\n+        // given\n+        final TtxBidExt ttxBidExt = TtxBidExt.of(TtxBidExtTtx.of(\"video\"));\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder\n+                                .ext(mapper.convertValue(ttxBidExt, ObjectNode.class)))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = ttxBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder()\n+                        .ext(mapper.convertValue(ttxBidExt, ObjectNode.class))\n+                        .build(), video, \"USD\"));\n+    }", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwNDI5NA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534204294", "body": "make one line and extract expected Bid \r\nOR \r\nextract Type and check only that", "bodyText": "make one line and extract expected Bid\nOR\nextract Type and check only that", "bodyHTML": "<p dir=\"auto\">make one line and extract expected Bid<br>\nOR<br>\nextract Type and check only that</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:23:05Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -191,6 +313,52 @@ public void makeBidsShouldReturnBannerBid() throws JsonProcessingException {\n                 .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n     }\n \n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoInBidExt() throws JsonProcessingException {\n+        // given\n+        final TtxBidExt ttxBidExt = TtxBidExt.of(TtxBidExtTtx.of(\"video\"));\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder\n+                                .ext(mapper.convertValue(ttxBidExt, ObjectNode.class)))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = ttxBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder()\n+                        .ext(mapper.convertValue(ttxBidExt, ObjectNode.class))\n+                        .build(), video, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfExtNotContainVideoString() throws JsonProcessingException {\n+        // given\n+        final TtxBidExt ttxBidExt = TtxBidExt.of(TtxBidExtTtx.of(\"notVideo\"));\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder\n+                                .ext(mapper.convertValue(ttxBidExt, ObjectNode.class)))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = ttxBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder()\n+                        .ext(mapper.convertValue(ttxBidExt, ObjectNode.class))\n+                        .build(), banner, \"USD\"));\n+    }", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwNTgyOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534205829", "body": "add test \"When productId is not instream and Placment is Not Zero\"", "bodyText": "add test \"When productId is not instream and Placment is Not Zero\"", "bodyHTML": "<p dir=\"auto\">add test \"When productId is not instream and Placment is Not Zero\"</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:24:58Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);\n+    }\n+", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwNjQxNg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534206416", "body": "Redundant &&.\r\nError has static body", "bodyText": "Redundant &&.\nError has static body", "bodyHTML": "<p dir=\"auto\">Redundant &amp;&amp;.<br>\nError has static body</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:25:39Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwNzIyNg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r534207226", "body": "You can extract this into method 'validVideo' method", "bodyText": "You can extract this into method 'validVideo' method", "bodyHTML": "<p dir=\"auto\">You can extract this into method 'validVideo' method</p>", "author": "DGarbar", "createdAt": "2020-12-02T14:26:40Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -129,6 +136,120 @@ public void makeHttpRequestsShouldChangeOnlyFirstImpExt() {\n                         mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\"))));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfAnyOfVideoParamsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder().build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = ttxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors()).allMatch(error -> error.getMessage()\n+                .startsWith(\"One or more invalid or missing video field(s) w, h, protocols, mimes, playbackmethod\")\n+                && error.getType() == BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldUpdateNotPresentPlacement() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(Video.builder()\n+                                        .w(23)\n+                                        .h(23)\n+                                        .mimes(singletonList(\"mime\"))\n+                                        .protocols(singletonList(23))\n+                                        .playbackmethod(singletonList(27))\n+                                        .build())", "originalCommit": "2080730831a4f8f22106c80cc54919cfba273e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "62d14f40c1533cfb052247b3998d62a920d53864", "url": "https://github.com/prebid/prebid-server-java/commit/62d14f40c1533cfb052247b3998d62a920d53864", "message": "Fixes after review", "committedDate": "2020-12-02T23:44:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA4Njc4Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535086786", "body": "redundant /n", "bodyText": "redundant /n", "bodyHTML": "<p dir=\"auto\">redundant /n</p>", "author": "DGarbar", "createdAt": "2020-12-03T10:44:16Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -56,30 +56,30 @@ public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n-        final List<BidderError> errors = new ArrayList<>();\n-        if (request.getImp().get(0).getBanner() == null\n-                && request.getImp().get(0).getVideo() == null) {\n-            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+        final Imp firstImp = request.getImp().get(0);\n+        if (firstImp.getBanner() == null\n+                && firstImp.getVideo() == null) {", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5MTg5OA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535091898", "body": "final", "bodyText": "final", "bodyHTML": "<p dir=\"auto\">final</p>", "author": "DGarbar", "createdAt": "2020-12-03T10:49:31Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -56,30 +56,30 @@ public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n-        final List<BidderError> errors = new ArrayList<>();\n-        if (request.getImp().get(0).getBanner() == null\n-                && request.getImp().get(0).getVideo() == null) {\n-            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+        final Imp firstImp = request.getImp().get(0);\n+        if (firstImp.getBanner() == null\n+                && firstImp.getVideo() == null) {\n+            return Result.withError(BidderError.badInput(\"At least one of [banner, video] \"\n                     + \"formats must be defined in Imp. None found\"));\n-            return Result.withErrors(errors);\n         }\n-        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n-\n-        return Result.of(Collections.singletonList(httpRequest), errors);\n-    }\n-\n-    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n-        final Imp firstImp = request.getImp().get(0);\n-        Site updatedSite = null;\n+        final List<BidderError> errors = new ArrayList<>();\n         Imp updatedFirstImp = null;\n+        ExtImpTtx extImpTtx = null;\n         try {\n-            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n-            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n-            updatedFirstImp = updateFirstImp(firstImp,\n-                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+            extImpTtx = parseImpExt(firstImp);\n+            updatedFirstImp = updateImp(firstImp, extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n         } catch (PreBidException e) {\n             errors.add(BidderError.badInput(e.getMessage()));\n         }\n+\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, extImpTtx, updatedFirstImp);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, ExtImpTtx extImpTtx, Imp updatedFirstImp) {\n+        Site updatedSite = extImpTtx != null ? updateSite(request.getSite(), extImpTtx.getSiteId()) : null;", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5NDc2NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535094765", "body": "redundant /n", "bodyText": "redundant /n", "bodyHTML": "<p dir=\"auto\">redundant /n</p>", "author": "DGarbar", "createdAt": "2020-12-03T10:52:19Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -99,90 +99,88 @@ private ExtImpTtx parseImpExt(Imp imp) {\n         }\n     }\n \n-    private Imp updateFirstImp(Imp firstImp, String productId,\n-                               String zoneId, List<BidderError> errors) {\n-        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n-        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n-\n-        final Video video = firstImp.getVideo();\n-        try {\n-            if (video != null) {\n-                modifiedFirstImp.video(updateVideo(video, productId));\n-            }\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        return modifiedFirstImp.build();\n+    private static Site updateSite(Site site, String siteId) {\n+        return site == null ? null : site.toBuilder().id(siteId).build();\n     }\n \n-    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n-        final List<Imp> updatedImpList = new ArrayList<>(imps);\n-        updatedImpList.set(0, firstImp);\n-        return updatedImpList;\n+    private Imp updateImp(Imp imp, String productId, String zoneId, List<BidderError> errors) {\n+\n+        return imp.toBuilder()\n+                .video(updateVideo(imp.getVideo(), productId, errors))\n+                .ext(createImpExt(productId, zoneId))\n+                .build();\n     }\n \n     private ObjectNode createImpExt(String productId, String zoneId) {\n         final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n         return mapper.mapper().valueToTree(ttxImpExt);\n     }\n \n-    private Video updateVideo(Video video, String productId) {\n+    private static Video updateVideo(Video video, String productId, List<BidderError> errors) {\n+        if (video == null) {\n+            return null;\n+        }\n         if (isZeroOrNullInteger(video.getW())\n                 || isZeroOrNullInteger(video.getH())\n                 || CollectionUtils.isEmpty(video.getProtocols())\n                 || CollectionUtils.isEmpty(video.getMimes())\n                 || CollectionUtils.isEmpty(video.getPlaybackmethod())\n         ) {", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5NTI5NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535095295", "body": "separate method seems redundant now", "bodyText": "separate method seems redundant now", "bodyHTML": "<p dir=\"auto\">separate method seems redundant now</p>", "author": "DGarbar", "createdAt": "2020-12-03T10:52:50Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -99,90 +99,88 @@ private ExtImpTtx parseImpExt(Imp imp) {\n         }\n     }\n \n-    private Imp updateFirstImp(Imp firstImp, String productId,\n-                               String zoneId, List<BidderError> errors) {\n-        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n-        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n-\n-        final Video video = firstImp.getVideo();\n-        try {\n-            if (video != null) {\n-                modifiedFirstImp.video(updateVideo(video, productId));\n-            }\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        return modifiedFirstImp.build();\n+    private static Site updateSite(Site site, String siteId) {\n+        return site == null ? null : site.toBuilder().id(siteId).build();\n     }\n \n-    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n-        final List<Imp> updatedImpList = new ArrayList<>(imps);\n-        updatedImpList.set(0, firstImp);\n-        return updatedImpList;\n+    private Imp updateImp(Imp imp, String productId, String zoneId, List<BidderError> errors) {\n+\n+        return imp.toBuilder()\n+                .video(updateVideo(imp.getVideo(), productId, errors))\n+                .ext(createImpExt(productId, zoneId))\n+                .build();\n     }\n \n     private ObjectNode createImpExt(String productId, String zoneId) {\n         final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n         return mapper.mapper().valueToTree(ttxImpExt);\n     }\n \n-    private Video updateVideo(Video video, String productId) {\n+    private static Video updateVideo(Video video, String productId, List<BidderError> errors) {\n+        if (video == null) {\n+            return null;\n+        }\n         if (isZeroOrNullInteger(video.getW())\n                 || isZeroOrNullInteger(video.getH())\n                 || CollectionUtils.isEmpty(video.getProtocols())\n                 || CollectionUtils.isEmpty(video.getMimes())\n                 || CollectionUtils.isEmpty(video.getPlaybackmethod())\n         ) {\n-            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n-                    + \"w, h, protocols, mimes, playbackmethod\");\n+            errors.add(BidderError.badInput(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\"));\n+            return video;\n         }\n \n         return modifyVideo(video, productId);\n     }\n \n-    private Video modifyVideo(Video video, String productId) {\n-        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n-        final Integer resolvedStartDelay = resolveStartDelay(productId);\n-\n-        return resolvedPlacement != null || resolvedStartDelay != null\n-                ? video.toBuilder()\n-                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n-                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n-                : video;\n-    }\n+    private static Video modifyVideo(Video video, String productId) {\n+        final Integer videoPlacement = video.getPlacement();\n \n-    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n-        return Objects.equals(productId, \"instream\")\n-                ? 1 : isZeroOrNullInteger(videoPlacement)\n-                ? 2 : null;\n-    }\n-\n-    private Integer resolveStartDelay(String productId) {\n-        return Objects.equals(productId, \"instream\")\n-                ? 0 : null;\n+        return video.toBuilder()\n+                .startdelay(resolveStartDelay(video.getStartdelay(), productId))\n+                .placement(resolvePlacement(videoPlacement, productId))\n+                .build();", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5NjE0NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535096145", "body": "move before resolvePlacement", "bodyText": "move before resolvePlacement", "bodyHTML": "<p dir=\"auto\">move before resolvePlacement</p>", "author": "DGarbar", "createdAt": "2020-12-03T10:53:43Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -99,90 +99,88 @@ private ExtImpTtx parseImpExt(Imp imp) {\n         }\n     }\n \n-    private Imp updateFirstImp(Imp firstImp, String productId,\n-                               String zoneId, List<BidderError> errors) {\n-        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n-        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n-\n-        final Video video = firstImp.getVideo();\n-        try {\n-            if (video != null) {\n-                modifiedFirstImp.video(updateVideo(video, productId));\n-            }\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        return modifiedFirstImp.build();\n+    private static Site updateSite(Site site, String siteId) {\n+        return site == null ? null : site.toBuilder().id(siteId).build();\n     }\n \n-    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n-        final List<Imp> updatedImpList = new ArrayList<>(imps);\n-        updatedImpList.set(0, firstImp);\n-        return updatedImpList;\n+    private Imp updateImp(Imp imp, String productId, String zoneId, List<BidderError> errors) {\n+\n+        return imp.toBuilder()\n+                .video(updateVideo(imp.getVideo(), productId, errors))\n+                .ext(createImpExt(productId, zoneId))\n+                .build();\n     }\n \n     private ObjectNode createImpExt(String productId, String zoneId) {\n         final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n         return mapper.mapper().valueToTree(ttxImpExt);\n     }\n \n-    private Video updateVideo(Video video, String productId) {\n+    private static Video updateVideo(Video video, String productId, List<BidderError> errors) {\n+        if (video == null) {\n+            return null;\n+        }\n         if (isZeroOrNullInteger(video.getW())\n                 || isZeroOrNullInteger(video.getH())\n                 || CollectionUtils.isEmpty(video.getProtocols())\n                 || CollectionUtils.isEmpty(video.getMimes())\n                 || CollectionUtils.isEmpty(video.getPlaybackmethod())\n         ) {\n-            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n-                    + \"w, h, protocols, mimes, playbackmethod\");\n+            errors.add(BidderError.badInput(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\"));\n+            return video;\n         }\n \n         return modifyVideo(video, productId);\n     }\n \n-    private Video modifyVideo(Video video, String productId) {\n-        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n-        final Integer resolvedStartDelay = resolveStartDelay(productId);\n-\n-        return resolvedPlacement != null || resolvedStartDelay != null\n-                ? video.toBuilder()\n-                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n-                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n-                : video;\n-    }\n+    private static Video modifyVideo(Video video, String productId) {\n+        final Integer videoPlacement = video.getPlacement();\n \n-    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n-        return Objects.equals(productId, \"instream\")\n-                ? 1 : isZeroOrNullInteger(videoPlacement)\n-                ? 2 : null;\n-    }\n-\n-    private Integer resolveStartDelay(String productId) {\n-        return Objects.equals(productId, \"instream\")\n-                ? 0 : null;\n+        return video.toBuilder()\n+                .startdelay(resolveStartDelay(video.getStartdelay(), productId))\n+                .placement(resolvePlacement(videoPlacement, productId))\n+                .build();\n     }\n \n-    private Site updateSite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder.id(siteId).build();\n+    private static Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        if (Objects.equals(productId, \"instream\")) {\n+            return 1;\n+        }\n+        if (isZeroOrNullInteger(videoPlacement)) {\n+            return 2;\n+        }\n+        return videoPlacement;\n     }\n \n     private static boolean isZeroOrNullInteger(Integer integer) {\n         return integer == null || integer == 0;\n     }\n \n-    private BidRequest updateRequest(BidRequest request, Site site, Imp firstImp) {\n-        if (site == null && firstImp == null) {\n+    private static Integer resolveStartDelay(Integer startDelay, String productId) {", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5ODAyNA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535098024", "body": "Move all method regarding their workflow order", "bodyText": "Move all method regarding their workflow order", "bodyHTML": "<p dir=\"auto\">Move all method regarding their workflow order</p>", "author": "DGarbar", "createdAt": "2020-12-03T10:55:29Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -56,30 +56,30 @@ public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n-        final List<BidderError> errors = new ArrayList<>();\n-        if (request.getImp().get(0).getBanner() == null\n-                && request.getImp().get(0).getVideo() == null) {\n-            errors.add(BidderError.badInput(\"At least one of [banner, video] \"\n+        final Imp firstImp = request.getImp().get(0);\n+        if (firstImp.getBanner() == null\n+                && firstImp.getVideo() == null) {\n+            return Result.withError(BidderError.badInput(\"At least one of [banner, video] \"\n                     + \"formats must be defined in Imp. None found\"));\n-            return Result.withErrors(errors);\n         }\n-        final HttpRequest<BidRequest> httpRequest = createRequest(request, errors);\n-\n-        return Result.of(Collections.singletonList(httpRequest), errors);\n-    }\n-\n-    private HttpRequest<BidRequest> createRequest(BidRequest request, List<BidderError> errors) {\n-        final Imp firstImp = request.getImp().get(0);\n-        Site updatedSite = null;\n+        final List<BidderError> errors = new ArrayList<>();\n         Imp updatedFirstImp = null;\n+        ExtImpTtx extImpTtx = null;\n         try {\n-            final ExtImpTtx extImpTtx = parseImpExt(firstImp);\n-            updatedSite = updateSite(request.getSite(), extImpTtx.getSiteId());\n-            updatedFirstImp = updateFirstImp(firstImp,\n-                    extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n+            extImpTtx = parseImpExt(firstImp);\n+            updatedFirstImp = updateImp(firstImp, extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n         } catch (PreBidException e) {\n             errors.add(BidderError.badInput(e.getMessage()));\n         }\n+\n+        final HttpRequest<BidRequest> httpRequest = createRequest(request, extImpTtx, updatedFirstImp);\n+\n+        return Result.of(Collections.singletonList(httpRequest), errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, ExtImpTtx extImpTtx, Imp updatedFirstImp) {", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExNDc5Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535114793", "body": "I also notice that they set video to null if they have any validation errors.\r\nSo we actually need to perfom ImpValidation after update. (check for banner of video)", "bodyText": "I also notice that they set video to null if they have any validation errors.\nSo we actually need to perfom ImpValidation after update. (check for banner of video)", "bodyHTML": "<p dir=\"auto\">I also notice that they set video to null if they have any validation errors.<br>\nSo we actually need to perfom ImpValidation after update. (check for banner of video)</p>", "author": "DGarbar", "createdAt": "2020-12-03T11:11:00Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -99,90 +99,88 @@ private ExtImpTtx parseImpExt(Imp imp) {\n         }\n     }\n \n-    private Imp updateFirstImp(Imp firstImp, String productId,\n-                               String zoneId, List<BidderError> errors) {\n-        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n-        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n-\n-        final Video video = firstImp.getVideo();\n-        try {\n-            if (video != null) {\n-                modifiedFirstImp.video(updateVideo(video, productId));\n-            }\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        return modifiedFirstImp.build();\n+    private static Site updateSite(Site site, String siteId) {\n+        return site == null ? null : site.toBuilder().id(siteId).build();\n     }\n \n-    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n-        final List<Imp> updatedImpList = new ArrayList<>(imps);\n-        updatedImpList.set(0, firstImp);\n-        return updatedImpList;\n+    private Imp updateImp(Imp imp, String productId, String zoneId, List<BidderError> errors) {\n+\n+        return imp.toBuilder()\n+                .video(updateVideo(imp.getVideo(), productId, errors))\n+                .ext(createImpExt(productId, zoneId))\n+                .build();\n     }\n \n     private ObjectNode createImpExt(String productId, String zoneId) {\n         final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n         return mapper.mapper().valueToTree(ttxImpExt);\n     }\n \n-    private Video updateVideo(Video video, String productId) {\n+    private static Video updateVideo(Video video, String productId, List<BidderError> errors) {\n+        if (video == null) {\n+            return null;\n+        }\n         if (isZeroOrNullInteger(video.getW())\n                 || isZeroOrNullInteger(video.getH())\n                 || CollectionUtils.isEmpty(video.getProtocols())\n                 || CollectionUtils.isEmpty(video.getMimes())\n                 || CollectionUtils.isEmpty(video.getPlaybackmethod())\n         ) {\n-            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n-                    + \"w, h, protocols, mimes, playbackmethod\");\n+            errors.add(BidderError.badInput(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\"));\n+            return video;", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyMTcwNw==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535121707", "body": "just use ?: \r\nand rename startDelay to videoStartDelay", "bodyText": "just use ?:\nand rename startDelay to videoStartDelay", "bodyHTML": "<p dir=\"auto\">just use ?:<br>\nand rename startDelay to videoStartDelay</p>", "author": "DGarbar", "createdAt": "2020-12-03T11:17:41Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -99,90 +99,88 @@ private ExtImpTtx parseImpExt(Imp imp) {\n         }\n     }\n \n-    private Imp updateFirstImp(Imp firstImp, String productId,\n-                               String zoneId, List<BidderError> errors) {\n-        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n-        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n-\n-        final Video video = firstImp.getVideo();\n-        try {\n-            if (video != null) {\n-                modifiedFirstImp.video(updateVideo(video, productId));\n-            }\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        return modifiedFirstImp.build();\n+    private static Site updateSite(Site site, String siteId) {\n+        return site == null ? null : site.toBuilder().id(siteId).build();\n     }\n \n-    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n-        final List<Imp> updatedImpList = new ArrayList<>(imps);\n-        updatedImpList.set(0, firstImp);\n-        return updatedImpList;\n+    private Imp updateImp(Imp imp, String productId, String zoneId, List<BidderError> errors) {\n+\n+        return imp.toBuilder()\n+                .video(updateVideo(imp.getVideo(), productId, errors))\n+                .ext(createImpExt(productId, zoneId))\n+                .build();\n     }\n \n     private ObjectNode createImpExt(String productId, String zoneId) {\n         final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n         return mapper.mapper().valueToTree(ttxImpExt);\n     }\n \n-    private Video updateVideo(Video video, String productId) {\n+    private static Video updateVideo(Video video, String productId, List<BidderError> errors) {\n+        if (video == null) {\n+            return null;\n+        }\n         if (isZeroOrNullInteger(video.getW())\n                 || isZeroOrNullInteger(video.getH())\n                 || CollectionUtils.isEmpty(video.getProtocols())\n                 || CollectionUtils.isEmpty(video.getMimes())\n                 || CollectionUtils.isEmpty(video.getPlaybackmethod())\n         ) {\n-            throw new PreBidException(\"One or more invalid or missing video field(s) \"\n-                    + \"w, h, protocols, mimes, playbackmethod\");\n+            errors.add(BidderError.badInput(\"One or more invalid or missing video field(s) \"\n+                    + \"w, h, protocols, mimes, playbackmethod\"));\n+            return video;\n         }\n \n         return modifyVideo(video, productId);\n     }\n \n-    private Video modifyVideo(Video video, String productId) {\n-        final Integer resolvedPlacement = resolvePlacement(video.getPlacement(), productId);\n-        final Integer resolvedStartDelay = resolveStartDelay(productId);\n-\n-        return resolvedPlacement != null || resolvedStartDelay != null\n-                ? video.toBuilder()\n-                .startdelay(resolvedStartDelay != null ? resolvedStartDelay : video.getStartdelay())\n-                .placement(resolvedPlacement != null ? resolvedPlacement : video.getPlacement()).build()\n-                : video;\n-    }\n+    private static Video modifyVideo(Video video, String productId) {\n+        final Integer videoPlacement = video.getPlacement();\n \n-    private Integer resolvePlacement(Integer videoPlacement, String productId) {\n-        return Objects.equals(productId, \"instream\")\n-                ? 1 : isZeroOrNullInteger(videoPlacement)\n-                ? 2 : null;\n-    }\n-\n-    private Integer resolveStartDelay(String productId) {\n-        return Objects.equals(productId, \"instream\")\n-                ? 0 : null;\n+        return video.toBuilder()\n+                .startdelay(resolveStartDelay(video.getStartdelay(), productId))\n+                .placement(resolvePlacement(videoPlacement, productId))\n+                .build();\n     }\n \n-    private Site updateSite(Site site, String siteId) {\n-        final Site.SiteBuilder siteBuilder = site == null ? Site.builder() : site.toBuilder();\n-        return siteBuilder.id(siteId).build();\n+    private static Integer resolvePlacement(Integer videoPlacement, String productId) {\n+        if (Objects.equals(productId, \"instream\")) {\n+            return 1;\n+        }\n+        if (isZeroOrNullInteger(videoPlacement)) {\n+            return 2;\n+        }\n+        return videoPlacement;\n     }\n \n     private static boolean isZeroOrNullInteger(Integer integer) {\n         return integer == null || integer == 0;\n     }\n \n-    private BidRequest updateRequest(BidRequest request, Site site, Imp firstImp) {\n-        if (site == null && firstImp == null) {\n+    private static Integer resolveStartDelay(Integer startDelay, String productId) {\n+        if (Objects.equals(productId, \"instream\")) {\n+            return 0;\n+        }\n+        return startDelay;\n+    }", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyMzYxNg==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535123616", "body": "probably better name it updatedVideo (my mistake)\r\n\r\nJust don't really like when we use null to check later if we need to update logic, and try to be more clear with that.", "bodyText": "probably better name it updatedVideo (my mistake)\nJust don't really like when we use null to check later if we need to update logic, and try to be more clear with that.", "bodyHTML": "<p dir=\"auto\">probably better name it updatedVideo (my mistake)</p>\n<p dir=\"auto\">Just don't really like when we use null to check later if we need to update logic, and try to be more clear with that.</p>", "author": "DGarbar", "createdAt": "2020-12-03T11:19:31Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -99,90 +99,88 @@ private ExtImpTtx parseImpExt(Imp imp) {\n         }\n     }\n \n-    private Imp updateFirstImp(Imp firstImp, String productId,\n-                               String zoneId, List<BidderError> errors) {\n-        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n-        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n-\n-        final Video video = firstImp.getVideo();\n-        try {\n-            if (video != null) {\n-                modifiedFirstImp.video(updateVideo(video, productId));\n-            }\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        return modifiedFirstImp.build();\n+    private static Site updateSite(Site site, String siteId) {\n+        return site == null ? null : site.toBuilder().id(siteId).build();\n     }\n \n-    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n-        final List<Imp> updatedImpList = new ArrayList<>(imps);\n-        updatedImpList.set(0, firstImp);\n-        return updatedImpList;\n+    private Imp updateImp(Imp imp, String productId, String zoneId, List<BidderError> errors) {\n+\n+        return imp.toBuilder()\n+                .video(updateVideo(imp.getVideo(), productId, errors))\n+                .ext(createImpExt(productId, zoneId))\n+                .build();\n     }\n \n     private ObjectNode createImpExt(String productId, String zoneId) {\n         final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n         return mapper.mapper().valueToTree(ttxImpExt);\n     }\n \n-    private Video updateVideo(Video video, String productId) {\n+    private static Video updateVideo(Video video, String productId, List<BidderError> errors) {", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyNDA1MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535124050", "body": "updatedImp (my mistake)", "bodyText": "updatedImp (my mistake)", "bodyHTML": "<p dir=\"auto\">updatedImp (my mistake)</p>", "author": "DGarbar", "createdAt": "2020-12-03T11:20:00Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -99,90 +99,88 @@ private ExtImpTtx parseImpExt(Imp imp) {\n         }\n     }\n \n-    private Imp updateFirstImp(Imp firstImp, String productId,\n-                               String zoneId, List<BidderError> errors) {\n-        final Imp.ImpBuilder modifiedFirstImp = firstImp.toBuilder();\n-        modifiedFirstImp.ext(createImpExt(productId, zoneId)).build();\n-\n-        final Video video = firstImp.getVideo();\n-        try {\n-            if (video != null) {\n-                modifiedFirstImp.video(updateVideo(video, productId));\n-            }\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        return modifiedFirstImp.build();\n+    private static Site updateSite(Site site, String siteId) {\n+        return site == null ? null : site.toBuilder().id(siteId).build();\n     }\n \n-    private List<Imp> replaceFirstImp(List<Imp> imps, Imp firstImp) {\n-        final List<Imp> updatedImpList = new ArrayList<>(imps);\n-        updatedImpList.set(0, firstImp);\n-        return updatedImpList;\n+    private Imp updateImp(Imp imp, String productId, String zoneId, List<BidderError> errors) {", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODkzOA==", "url": "https://github.com/prebid/prebid-server-java/pull/1032#discussion_r535138938", "body": "we don't using this codeStyle. Please change it in this class.", "bodyText": "we don't using this codeStyle. Please change it in this class.", "bodyHTML": "<p dir=\"auto\">we don't using this codeStyle. Please change it in this class.</p>", "author": "DGarbar", "createdAt": "2020-12-03T11:34:10Z", "path": "src/test/java/org/prebid/server/bidder/ttx/TtxBidderTest.java", "diffHunk": "@@ -183,29 +197,41 @@ public void makeHttpRequestsShouldUpdateNotPresentPlacement() {\n                 .extracting(HttpRequest::getPayload)\n                 .flatExtracting(BidRequest::getImp)\n                 .extracting(Imp::getVideo)\n-                .containsExactly(Video.builder()\n-                        .placement(2)\n-                        .w(23)\n-                        .h(23)\n-                        .mimes(singletonList(\"mime\"))\n-                        .protocols(singletonList(23))\n-                        .playbackmethod(singletonList(27))\n-                        .build());\n+                .extracting(Video::getPlacement)\n+                .containsExactly(2);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotUpdatePlacementWhenProductIdIsNotInstreamAndPlacementIsNotZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(\n+                        givenImp(impBuilder -> impBuilder\n+                                .video(validVideo().toBuilder().placement(23).build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpTtx.of(\"11\", null, \"3\")))))\n+                ))", "originalCommit": "62d14f40c1533cfb052247b3998d62a920d53864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd23be3a374914bf30aa53eb204ddb1b794232b7", "url": "https://github.com/prebid/prebid-server-java/commit/cd23be3a374914bf30aa53eb204ddb1b794232b7", "message": "Fixes after review", "committedDate": "2020-12-03T12:22:09Z", "type": "commit"}]}