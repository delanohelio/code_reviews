{"pr_number": 2059, "pr_title": "Team Matchmaker Integration", "pr_author": "BlackYps", "pr_createdAt": "2020-12-04T14:08:37Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/2059", "merge_commit": "a4893b100c644ff3887cee20464bdcead44550c3", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536196045", "body": "just Map.of()", "bodyText": "just Map.of()", "bodyHTML": "<p dir=\"auto\">just Map.of()</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:50:38Z", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4MzczMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536383733", "bodyText": "All other functions in that class also use ImmutableMap, should those be changed too?", "author": "BlackYps", "createdAt": "2020-12-04T21:15:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDYwMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536410603", "bodyText": "Yes. Map.of is also immutable and is java standard, so we should use this.", "author": "Brutus5000", "createdAt": "2020-12-04T22:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTM0Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536411343", "bodyText": "It came after Java 8 into the JDK that's why you find guava ImmutableMap/List/... everywhere in old code.", "author": "Brutus5000", "createdAt": "2020-12-04T22:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 00bd8bb6..95131d2a 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -428,23 +428,23 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, ImmutableMap.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n   }\n \n   @Override\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(\n-        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersion,\" +\n-            \"mapPool.mapVersion.map,mapPool.mapVersion.map.latestVersion,\" +\n-            \"mapPool.mapVersion.map.author,mapPool.mapVersion.map.statistics,\" +\n-            \"mapPool.mapVersion.map.reviewsSummary,mapPool.mapVersion.map.versions.reviews,\" +\n-            \"mapPool.mapVersion.map.versions.reviews.player\",\n+    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n+        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n+            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n+            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n+            \"mapPool.mapVersions.map.versions.reviews.player\",\n         \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n   }\n \n   @Override\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n         \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 95131d2a..f9c51505 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -444,7 +444,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(\n         \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex f9c51505..95131d2a 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -444,7 +444,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n         \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": {"commit": "2824223ed76fb452d6886470f5380f599cec4b93", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 95131d2a..c7f6cc9f 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -443,6 +442,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n         \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n", "next_change": {"commit": "c37a25b4ff66049a8ee011ea417d18393171a886", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex c7f6cc9f..d608e9b8 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -427,25 +446,26 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n     return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n-        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n             \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n             \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n             \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n             \"mapPool.mapVersions.map.versions.reviews.player\",\n-        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n-        \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n     }\n", "next_change": {"commit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex d608e9b8..745564c6 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -465,6 +465,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        INCLUDE, \"leaderboard\",\n         FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 00bd8bb6..8ba35eb6 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -428,24 +447,27 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, ImmutableMap.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(\n-        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersion,\" +\n-            \"mapPool.mapVersion.map,mapPool.mapVersion.map.latestVersion,\" +\n-            \"mapPool.mapVersion.map.author,mapPool.mapVersion.map.statistics,\" +\n-            \"mapPool.mapVersion.map.reviewsSummary,mapPool.mapVersion.map.versions.reviews,\" +\n-            \"mapPool.mapVersion.map.versions.reviews.player\",\n-        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n+            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n+            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n+            \"mapPool.mapVersions.map.versions.reviews.player\",\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(\n-        \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        INCLUDE, \"leaderboard\",\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n     }\n", "next_change": {"commit": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 8ba35eb6..c9436e46 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -290,259 +312,270 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   }\n \n   @Override\n-  public void uploadMod(Path file, ByteCountListener listener) {\n+  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n     MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    post(\"/mods/upload\", multipartContent, false);\n+    return postMultipartForm(\"/mods/upload\", multipartContent);\n   }\n \n   @Override\n-  public void uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n+  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n     MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n     multipartContent.add(\"metadata\", java.util.Map.of(\"isRanked\", isRanked));\n-    post(\"/maps/upload\", multipartContent, false);\n+    return postMultipartForm(\"/maps/upload\", multipartContent);\n   }\n \n   @Override\n-  public void changePassword(String username, String currentPasswordHash, String newPasswordHash) {\n-    java.util.Map<String, String> body = java.util.Map.of(\n-        \"currentPassword\", currentPasswordHash,\n-        \"newPassword\", newPasswordHash\n-    );\n-\n-    post(\"/users/changePassword\", body, true);\n-  }\n-\n-  @Override\n-  public ModVersion getModVersion(String uid) {\n-    return (ModVersion) getMany(MOD_VERSION_ENDPOINT, 1,\n-        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, \"mod,mod.latestVersion,mod.versions,mod.uploader\")\n-    ).get(0);\n+  public Mono<ModVersion> getModVersion(String uid) {\n+    return getMany(ModVersion.class, MOD_VERSION_ENDPOINT, 1,\n+        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, MOD_VERSION_INCLUDES)\n+    )\n+        .cast(ModVersion.class)\n+        .next();\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.FEATURED_MOD_FILES, sync = true)\n-  public List<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    String endpoint = String.format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n+  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n+    String endpoint = format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n         Optional.ofNullable(version).map(String::valueOf).orElse(\"latest\"));\n-    return getMany(endpoint, 10_000, java.util.Map.of());\n+    return getMany(FeaturedModFile.class, endpoint, 10_000, java.util.Map.of());\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getNewestReplaysWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n+  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n         SORT, \"-endTime\",\n         INCLUDE, REPLAY_INCLUDES,\n         FILTER, \"endTime=isnull=false\"\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getHighestRatedReplaysWithMeta(int count, int page) {\n-    JSONAPIDocument<List<GameReviewsSummary>> pageWithPageCount = getPageWithMeta(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n+  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n         SORT, \"-lowerBound\",\n         // TODO this was done in a rush, check what is actually needed\n-        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.reviews,game.reviews.player,\" +\n+        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.playerStats.ratingChanges,game.reviews,game.reviews.player,\" +\n             \"game.mapVersion,game.mapVersion.map\",\n         FILTER, \"game.endTime=isnull=false\"\n-    ));\n-    return new Tuple<>(pageWithPageCount.get().stream()\n-        .map(GameReviewsSummary::getGame)\n-        .collect(Collectors.toList()),\n-        pageWithPageCount.getMeta());\n+    ))\n+        .map(tuple -> tuple.mapT1(gameReviews ->\n+            gameReviews.stream()\n+                .map(gameReviewSummary -> ((GameReviewsSummary) gameReviewSummary).getGame())\n+                .collect(Collectors.toList()))\n+        );\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> findReplaysByQueryWithMeta(String query, int maxResults, int page, SortConfig sortConfig) {\n-    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n-        FILTER, \"(\" + query + \");endTime=isnull=false\",\n+  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n+    return getPageWithTotalPages(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n+        FILTER, query + \";endTime=isnull=false\",\n         INCLUDE, REPLAY_INCLUDES,\n         SORT, sortConfig.toQuery()\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public Optional<MapVersion> findMapByFolderName(String folderName) {\n-    List<MapVersion> maps = getMany(MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, String.format(\"filename==\\\"*%s*\\\"\", folderName),\n-        INCLUDE, MAP_VERSION_INCLUDES));\n-    if (maps.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(maps.get(0));\n+  public Mono<MapVersion> findMapByFolderName(String folderName) {\n+    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n+        FILTER, rsql(qBuilder().string(\"filename\").eq(format(FILENAME_TEMPLATE, folderName))),\n+        INCLUDE, MAP_VERSION_INCLUDES))\n+        .cast(MapVersion.class)\n+        .next();\n   }\n \n   @Override\n-  public List<Player> getPlayersByIds(Collection<Integer> playerIds) {\n+  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n+    String queryFilter = rsql(qBuilder()\n+        .string(\"filename\").eq(format(FILENAME_TEMPLATE, mapFolderName))\n+        .and()\n+        .string(\"map.latestVersion.hidden\").eq(\"false\"));\n+    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n+        FILTER, queryFilter,\n+        INCLUDE, MAP_VERSION_INCLUDES\n+    ))\n+        .cast(MapVersion.class)\n+        .next();\n+  }\n+\n+  @Override\n+  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n     List<String> ids = playerIds.stream().map(String::valueOf).collect(Collectors.toList());\n \n-    return getMany(\"/data/player\", playerIds.size(), java.util.Map.of(\n+    return getMany(Player.class,\"/data/player\", playerIds.size(), java.util.Map.of(\n         INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"id\").in(ids))\n-    ));\n+        FILTER, rsql(qBuilder().string(\"id\").in(ids))));\n+  }\n+\n+  @Override\n+  public Mono<Player> queryPlayerByName(String playerName) {\n+    return getAll(Player.class, \"/data/player\", java.util.Map.of(\n+        INCLUDE, PLAYER_INCLUDES,\n+        FILTER, rsql(qBuilder().string(\"login\").eq(playerName))))\n+        .cast(Player.class)\n+        .next();\n+\n   }\n \n+  @SneakyThrows\n   @Override\n-  public MeResult getOwnPlayer() {\n-    return getOne(\"/me\", MeResult.class);\n+  public Mono<MeResult> getMe() {\n+    return getOne(MeResult.class, \"/me\");\n   }\n \n   @Override\n-  public GameReview createGameReview(GameReview review) {\n+  public Mono<GameReview> createGameReview(GameReview review) {\n     return post(REPLAY_ENDPOINT + \"/\" + review.getGame().getId() + \"/reviews\", review, GameReview.class);\n   }\n \n   @Override\n-  public void updateGameReview(GameReview review) {\n-    patch(\"/data/gameReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateGameReview(GameReview review) {\n+    return patch(\"/data/gameReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public ModVersionReview createModVersionReview(ModVersionReview review) {\n-    return post(\"/data/modVersion/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n+  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n+    return post(MOD_VERSION_ENDPOINT + \"/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n   }\n \n   @Override\n-  public void updateModVersionReview(ModVersionReview review) {\n-    patch(\"/data/modVersionReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n+    return patch(\"/data/modVersionReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public MapVersionReview createMapVersionReview(MapVersionReview review) {\n+  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n     return post(MAP_VERSION_ENDPOINT + \"/\" + review.getMapVersion().getId() + \"/reviews\", review, MapVersionReview.class);\n   }\n \n   @Override\n-  public void updateMapVersionReview(MapVersionReview review) {\n-    patch(\"/data/mapVersionReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n+    return patch(\"/data/mapVersionReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public void deleteGameReview(String id) {\n-    delete(\"/data/gameReview/\" + id);\n+  public Mono<Void> deleteGameReview(String id) {\n+    return delete(\"/data/gameReview/\" + id);\n   }\n \n   @Override\n-  public void deleteMapVersionReview(String id) {\n-    delete(\"/data/mapVersionReview/\" + id);\n+  public Mono<Void> deleteMapVersionReview(String id) {\n+    return delete(\"/data/mapVersionReview/\" + id);\n   }\n \n   @Override\n-  public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig searchConfig, int count, int page) {\n+  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n     MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n     if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + HIDDEN);\n+      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n     }\n     parameterMap.add(INCLUDE, MOD_INCLUDES);\n     parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    JSONAPIDocument<List<Mod>> jsonApiDoc = getPageWithMeta(MOD_ENDPOINT, count, page, parameterMap);\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+    return getPageWithTotalPages(MOD_ENDPOINT, count, page, parameterMap);\n   }\n \n   @Override\n-  public void deleteModVersionReview(String id) {\n-    delete(\"/data/modVersionReview/\" + id);\n+  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(MOD_ENDPOINT, count, page, java.util.Map.of(\n+        INCLUDE, MOD_INCLUDES,\n+        FILTER, rsql(qBuilder()\n+            .bool(\"recommended\").isTrue())\n+    ));\n   }\n \n   @Override\n-  public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n+  public Mono<Void> deleteModVersionReview(String id) {\n+    return delete(\"/data/modVersionReview/\" + id);\n   }\n \n+  @Override\n+  public Mono<Game> findReplayById(int id) {\n+    return getOne(Game.class, REPLAY_ENDPOINT + \"/\" + id, java.util.Map.of(INCLUDE, REPLAY_INCLUDES));\n+  }\n+\n+  @SneakyThrows\n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n-  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n-        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n-            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n-            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n-            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n-            \"mapPool.mapVersions.map.versions.reviews.player\",\n-        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n+    QBuilder qBuilder = new QBuilder<>();\n+    List<Condition<?>> conditions = new ArrayList<>();\n+    conditions.add(qBuilder().string(\"mapPool.matchmakerQueueMapPool.matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)));\n+    conditions.add(qBuilder().floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").lte(rating).or()\n+        .floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").ne(null));\n+    return getAll(MapPoolAssignment.class, \"/data/mapPoolAssignment\", java.util.Map.of(\n+        INCLUDE, MATCHMAKER_POOL_INCLUDES,\n+        FILTER, rsql(qBuilder.and(conditions)).replace(\"ex\", \"isnull\"),\n+        SORT, \"mapVersion.width,mapVersion.map.displayName\"));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n-  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    return getAll(MatchmakerQueue.class, \"/data/matchmakerQueue\", java.util.Map.of(\n         INCLUDE, \"leaderboard\",\n-        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n-    if (queue.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(queue.get(0));\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))))\n+        .cast(MatchmakerQueue.class)\n+        .next();\n   }\n \n   @Override\n-  public List<TutorialCategory> getTutorialCategories() {\n-    return getAll(\"/data/tutorialCategory\",\n+  public Flux<TutorialCategory> getTutorialCategories() {\n+    return getAll(TutorialCategory.class, \"/data/tutorialCategory\",\n         java.util.Map.of(INCLUDE, \"tutorials,tutorials.mapVersion.map,tutorials.mapVersion.map.latestVersion,\" +\n-            \"tutorials.mapVersion.map.author,tutorials.mapVersion.map.statistics\"));\n+            \"tutorials.mapVersion.map.author\"));\n   }\n \n   @Override\n-  public Tuple<List<MapVersion>, java.util.Map<String, ?>> getOwnedMapsWithMeta(int playerId, int loadMoreCount, int page) {\n-    JSONAPIDocument<List<MapVersion>> jsonApiDoc = getPageWithMeta(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n+  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n+    return getPageWithTotalPages(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n         INCLUDE, MAP_VERSION_INCLUDES,\n         FILTER, rsql(qBuilder().string(\"map.author.id\").eq(String.valueOf(playerId)))\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public void updateMapVersion(String id, MapVersion mapVersion) {\n-    patch(String.format(\"/data/mapVersion/%s\", id), mapVersion, Void.class);\n+  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n+    return patch(format(\"/data/mapVersion/%s\", id), mapVersion);\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.CLAN, sync = true)\n-  public Optional<Clan> getClanByTag(String tag) {\n-    List<Clan> clans = getMany(\"/data/clan\", 1, java.util.Map.of(\n-        INCLUDE, \"leader,founder,memberships,memberships.player\",\n+  public Mono<Clan> getClanByTag(String tag) {\n+    return getMany(Clan.class, \"/data/clan\", 1, java.util.Map.of(\n+        INCLUDE, CLAN_INCLUDES,\n         FILTER, rsql(qBuilder().string(\"tag\").eq(tag))\n-    ));\n-    if (clans.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(clans.get(0));\n+    ))\n+        .cast(Clan.class)\n+        .next();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> findMapsByQueryWithMeta(SearchConfig searchConfig, int count, int page) {\n+  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n     MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n     if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + HIDDEN);\n+      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n     }\n     parameterMap.add(INCLUDE, MAP_INCLUDES);\n     parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    JSONAPIDocument<List<Map>> jsonApiDoc = getPageWithMeta(MAP_ENDPOINT, count, page, parameterMap);\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n-  }\n-\n-  @Override\n-  public Optional<MapVersion> findMapVersionById(String id) {\n-    // FIXME: that is not gonna work this way\n-    //FIXME: filter hidden maps\n-    return Optional.ofNullable(getOne(MAP_ENDPOINT + \"/\" + id, MapVersion.class));\n+    return getPageWithTotalPages(MAP_ENDPOINT, count, page, parameterMap);\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.COOP_MAPS, sync = true)\n-  public List<CoopMission> getCoopMissions() {\n-    return getAll(\"/data/coopMission\");\n+  public Flux<CoopMission> getCoopMissions() {\n+    return getAll(CoopMission.class, \"/data/coopMission\");\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.COOP_LEADERBOARD, sync = true)\n-  public List<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n+  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n     Condition<?> filterCondition = qBuilder().string(\"mission\").eq(missionId);\n \n     if (numberOfPlayers > 0) {\n       filterCondition = filterCondition.and().intNum(\"playerCount\").eq(numberOfPlayers);\n     }\n \n-    return getMany(\"/data/coopResult\", 1000, java.util.Map.of(\n+    return getMany(CoopResult.class, \"/data/coopResult\", 1000, java.util.Map.of(\n         FILTER, rsql(filterCondition),\n         INCLUDE, COOP_RESULT_INCLUDES,\n         SORT, \"duration\"\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\ndeleted file mode 100644\nindex c9436e46..00000000\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,788 +0,0 @@\n-package com.faforever.client.api;\n-\n-import com.faforever.client.config.CacheNames;\n-import com.faforever.client.config.ClientProperties;\n-import com.faforever.client.config.ClientProperties.Api;\n-import com.faforever.client.io.CountingFileSystemResource;\n-import com.faforever.client.mod.FeaturedMod;\n-import com.faforever.client.user.event.LoggedOutEvent;\n-import com.faforever.client.vault.search.SearchController.SearchConfig;\n-import com.faforever.client.vault.search.SearchController.SortConfig;\n-import com.faforever.commons.api.dto.AchievementDefinition;\n-import com.faforever.commons.api.dto.ApiException;\n-import com.faforever.commons.api.dto.Clan;\n-import com.faforever.commons.api.dto.CoopMission;\n-import com.faforever.commons.api.dto.CoopResult;\n-import com.faforever.commons.api.dto.FeaturedModFile;\n-import com.faforever.commons.api.dto.Game;\n-import com.faforever.commons.api.dto.GameReview;\n-import com.faforever.commons.api.dto.GameReviewsSummary;\n-import com.faforever.commons.api.dto.Leaderboard;\n-import com.faforever.commons.api.dto.LeaderboardEntry;\n-import com.faforever.commons.api.dto.LeaderboardRatingJournal;\n-import com.faforever.commons.api.dto.Map;\n-import com.faforever.commons.api.dto.MapPoolAssignment;\n-import com.faforever.commons.api.dto.MapVersion;\n-import com.faforever.commons.api.dto.MapVersionReview;\n-import com.faforever.commons.api.dto.MatchmakerQueue;\n-import com.faforever.commons.api.dto.MeResult;\n-import com.faforever.commons.api.dto.Mod;\n-import com.faforever.commons.api.dto.ModVersion;\n-import com.faforever.commons.api.dto.ModVersionReview;\n-import com.faforever.commons.api.dto.ModerationReport;\n-import com.faforever.commons.api.dto.Player;\n-import com.faforever.commons.api.dto.PlayerAchievement;\n-import com.faforever.commons.api.dto.PlayerEvent;\n-import com.faforever.commons.api.dto.Tournament;\n-import com.faforever.commons.api.dto.TutorialCategory;\n-import com.faforever.commons.io.ByteCountListener;\n-import com.github.jasminb.jsonapi.JSONAPIDocument;\n-import com.github.jasminb.jsonapi.exceptions.ResourceParseException;\n-import com.github.rutledgepaulv.qbuilders.builders.QBuilder;\n-import com.github.rutledgepaulv.qbuilders.conditions.Condition;\n-import com.github.rutledgepaulv.qbuilders.visitors.RSQLVisitor;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.eventbus.EventBus;\n-import com.google.common.eventbus.Subscribe;\n-import lombok.RequiredArgsConstructor;\n-import lombok.SneakyThrows;\n-import lombok.extern.slf4j.Slf4j;\n-import org.jetbrains.annotations.NotNull;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.cache.annotation.Cacheable;\n-import org.springframework.context.annotation.Profile;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Component;\n-import org.springframework.util.CollectionUtils;\n-import org.springframework.util.LinkedMultiValueMap;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.web.reactive.function.client.WebClient;\n-import org.springframework.web.util.UriComponents;\n-import org.springframework.web.util.UriComponentsBuilder;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import reactor.util.function.Tuple2;\n-\n-import java.io.Serializable;\n-import java.nio.file.Path;\n-import java.time.LocalDateTime;\n-import java.time.ZoneOffset;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.stream.Collectors;\n-\n-import static java.lang.String.format;\n-\n-@SuppressWarnings(\"unchecked\")\n-@Slf4j\n-@Component\n-@Profile(\"!offline\")\n-@RequiredArgsConstructor\n-public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n-\n-  private static final String REPLAY_ENDPOINT = \"/data/game\";\n-  private static final String MAP_ENDPOINT = \"/data/map\";\n-  private static final String MAP_VERSION_ENDPOINT = \"/data/mapVersion\";\n-  private static final String MOD_ENDPOINT = \"/data/mod\";\n-  private static final String MOD_VERSION_ENDPOINT = \"/data/modVersion\";\n-  private static final String ACHIEVEMENT_ENDPOINT = \"/data/achievement\";\n-  private static final String LEADERBOARD_ENDPOINT = \"/data/leaderboard\";\n-  private static final String LEADERBOARD_ENTRY_ENDPOINT = \"/data/leaderboardRating\";\n-  private static final String REPORT_ENDPOINT = \"/data/moderationReport\";\n-  private static final String TOURNAMENT_LIST_ENDPOINT = \"/challonge/v1/tournaments.json\";\n-  private static final String REPLAY_INCLUDES = \"featuredMod,playerStats,playerStats.player,playerStats.ratingChanges,reviews,\" +\n-      \"reviews.player,mapVersion,mapVersion.map,reviewsSummary\";\n-  private static final String MAP_INCLUDES = \"latestVersion,author,reviewsSummary,\" +\n-      \"versions.reviews,versions.reviews.player\";\n-  private static final String MAP_VERSION_INCLUDES = \"map,map.latestVersion,map.author,\" +\n-      \"map.reviewsSummary,map.versions.reviews,map.versions.reviews.player\";\n-  private static final String MATCHMAKER_POOL_INCLUDES = \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,\" +\n-      \"mapVersion.map.author,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-      \"mapVersion.map.versions.reviews.player\";\n-  private static final String MOD_INCLUDES = \"latestVersion,reviewsSummary,versions,versions.reviews,\" +\n-      \"versions.reviews.player\";\n-  private static final String MOD_VERSION_INCLUDES = \"mod,mod.latestVersion,mod.versions,mod.versions.reviews,\" +\n-      \"mod.versions.reviews.player,mod.reviewsSummary,mod.uploader\";\n-  private static final String LEADERBOARD_ENTRY_INCLUDES = \"player,leaderboard\";\n-  private static final String COOP_RESULT_INCLUDES = \"game.playerStats.player\";\n-  private static final String PLAYER_INCLUDES = \"names\";\n-  private static final String REPORT_INCLUDES = \"reporter,lastModerator,reportedUsers,game\";\n-  private static final String FILTER = \"filter\";\n-  private static final String SORT = \"sort\";\n-  private static final String INCLUDE = \"include\";\n-  private static final String NOT_HIDDEN = \"latestVersion.hidden==\\\"false\\\"\";\n-  private static final String FILENAME_TEMPLATE = \"maps/%s.zip\";\n-  private static final String CLAN_INCLUDES = \"leader,founder,memberships,memberships.player\";\n-\n-  private final EventBus eventBus;\n-  private final ClientProperties clientProperties;\n-  private final JsonApiReader jsonApiReader;\n-  private final JsonApiWriter jsonApiWriter;\n-  private final OAuthTokenFilter oAuthTokenFilter;\n-\n-  private CountDownLatch authorizedLatch = new CountDownLatch(1);\n-  private WebClient webClient;\n-\n-  private static String rsql(Condition<?> eq) {\n-    return eq.query(new RSQLVisitor());\n-  }\n-\n-  private static <T extends QBuilder<T>> QBuilder<T> qBuilder() {\n-    return new QBuilder<>();\n-  }\n-\n-  @Override\n-  public void afterPropertiesSet() {\n-    eventBus.register(this);\n-  }\n-\n-  @Override\n-  public void authorize() {\n-    Api apiProperties = clientProperties.getApi();\n-\n-    webClient = WebClient.builder()\n-        .baseUrl(apiProperties.getBaseUrl())\n-        .filter(oAuthTokenFilter)\n-        .codecs(clientCodecConfigurer -> {\n-          clientCodecConfigurer.customCodecs().register(jsonApiReader);\n-          clientCodecConfigurer.customCodecs().register(jsonApiWriter);\n-        })\n-        .build();\n-\n-    authorizedLatch.countDown();\n-  }\n-\n-  @Subscribe\n-  public void onLoggedOutEvent(LoggedOutEvent event) {\n-    authorizedLatch = new CountDownLatch(1);\n-  }\n-\n-  @Subscribe\n-  public void onSessionExpiredEvent(SessionExpiredEvent event) {\n-    authorizedLatch = new CountDownLatch(1);\n-  }\n-\n-  @Override\n-  public Flux<PlayerAchievement> getPlayerAchievements(int playerId) {\n-    return getAll(PlayerAchievement.class, \"/data/playerAchievement\", java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId))\n-    ));\n-  }\n-\n-  @Override\n-  public Flux<PlayerEvent> getPlayerEvents(int playerId) {\n-    return getAll(PlayerEvent.class, \"/data/playerEvent\", java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId))\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.ACHIEVEMENTS, sync = true)\n-  public Flux<AchievementDefinition> getAchievementDefinitions() {\n-    return getAll(AchievementDefinition.class, ACHIEVEMENT_ENDPOINT, java.util.Map.of(\n-        SORT, \"order\"\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.ACHIEVEMENTS, sync = true)\n-  public Mono<AchievementDefinition> getAchievementDefinition(String achievementId) {\n-    return getOne(AchievementDefinition.class, ACHIEVEMENT_ENDPOINT + \"/\" + achievementId);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MODS, sync = true)\n-  public Flux<Mod> getMods() {\n-    return getAll(Mod.class, MOD_ENDPOINT, java.util.Map.of(\n-        INCLUDE, MOD_INCLUDES));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.FEATURED_MODS, sync = true)\n-  public Flux<com.faforever.commons.api.dto.FeaturedMod> getFeaturedMods() {\n-    return getMany(com.faforever.commons.api.dto.FeaturedMod.class, \"/data/featuredMod\", 1000, java.util.Map.of());\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Flux<Leaderboard> getLeaderboards() {\n-    return getAll(Leaderboard.class, LEADERBOARD_ENDPOINT);\n-  }\n-\n-  @Override\n-  public Flux<LeaderboardEntry> getLeaderboardEntriesForPlayer(int playerId) {\n-    return getAll(LeaderboardEntry.class, LEADERBOARD_ENTRY_ENDPOINT, java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId)),\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Flux<LeaderboardEntry> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n-    return getAll(LeaderboardEntry.class, LEADERBOARD_ENTRY_ENDPOINT, java.util.Map.of(\n-        FILTER, rsql(qBuilder().string(\"leaderboard.technicalName\").eq(leaderboardTechnicalName)\n-            .and().instant(\"updateTime\").after(LocalDateTime.now().minusMonths(1).toInstant(ZoneOffset.UTC), false)),\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Mono<Tuple2<List<LeaderboardEntry>, Integer>> getLeaderboardEntriesWithTotalPages(String leaderboardId, int count, int page) {\n-    return getPageWithTotalPages(LEADERBOARD_ENTRY_ENDPOINT, count, page, ImmutableMap.of(\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.RATING_HISTORY, sync = true)\n-  public Flux<LeaderboardRatingJournal> getRatingJournal(int playerId, int leaderboardId) {\n-    return getAll(LeaderboardRatingJournal.class, \"/data/leaderboardRatingJournal\", java.util.Map.of(\n-        FILTER, rsql(qBuilder()\n-            .intNum(\"gamePlayerStats.player.id\").eq(playerId)\n-            .and()\n-            .intNum(\"leaderboard.id\").eq(leaderboardId)),\n-        INCLUDE, \"gamePlayerStats\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getRecommendedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        FILTER, rsql(qBuilder()\n-            .bool(\"recommended\").isTrue())\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MAPS, sync = true)\n-  public Mono<Tuple2<List<Map>, Integer>> getMostPlayedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-gamesPlayed\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getHighestRatedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-reviewsSummary.lowerBound\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getNewestMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-updateTime\",\n-        FILTER, NOT_HIDDEN\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getMapsByIdWithTotalPages(List<Integer> mapIdList, int count, int page) {\n-    String filterCriteria = mapIdList.stream()\n-        .map(Object::toString)\n-        .collect(Collectors.joining(\",\", \"latestVersion.map.id=in=(\", \")\"));\n-\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-updateTime\",\n-        FILTER, filterCriteria\n-    ));\n-  }\n-\n-  @Override\n-  public Flux<Game> getLastGamesOnMap(int playerId, String mapVersionId, int count) {\n-    return getMany(Game.class, REPLAY_ENDPOINT, count, java.util.Map.of(\n-        FILTER, rsql(qBuilder()\n-            .string(\"mapVersion.id\").eq(mapVersionId)\n-            .and()\n-            .intNum(\"playerStats.player.id\").eq(playerId)),\n-        INCLUDE, REPLAY_INCLUDES,\n-        SORT, \"-endTime\"\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n-    MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    return postMultipartForm(\"/mods/upload\", multipartContent);\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n-    MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    multipartContent.add(\"metadata\", java.util.Map.of(\"isRanked\", isRanked));\n-    return postMultipartForm(\"/maps/upload\", multipartContent);\n-  }\n-\n-  @Override\n-  public Mono<ModVersion> getModVersion(String uid) {\n-    return getMany(ModVersion.class, MOD_VERSION_ENDPOINT, 1,\n-        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, MOD_VERSION_INCLUDES)\n-    )\n-        .cast(ModVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.FEATURED_MOD_FILES, sync = true)\n-  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    String endpoint = format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n-        Optional.ofNullable(version).map(String::valueOf).orElse(\"latest\"));\n-    return getMany(FeaturedModFile.class, endpoint, 10_000, java.util.Map.of());\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n-        SORT, \"-endTime\",\n-        INCLUDE, REPLAY_INCLUDES,\n-        FILTER, \"endTime=isnull=false\"\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n-        SORT, \"-lowerBound\",\n-        // TODO this was done in a rush, check what is actually needed\n-        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.playerStats.ratingChanges,game.reviews,game.reviews.player,\" +\n-            \"game.mapVersion,game.mapVersion.map\",\n-        FILTER, \"game.endTime=isnull=false\"\n-    ))\n-        .map(tuple -> tuple.mapT1(gameReviews ->\n-            gameReviews.stream()\n-                .map(gameReviewSummary -> ((GameReviewsSummary) gameReviewSummary).getGame())\n-                .collect(Collectors.toList()))\n-        );\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n-    return getPageWithTotalPages(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n-        FILTER, query + \";endTime=isnull=false\",\n-        INCLUDE, REPLAY_INCLUDES,\n-        SORT, sortConfig.toQuery()\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> findMapByFolderName(String folderName) {\n-    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, rsql(qBuilder().string(\"filename\").eq(format(FILENAME_TEMPLATE, folderName))),\n-        INCLUDE, MAP_VERSION_INCLUDES))\n-        .cast(MapVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n-    String queryFilter = rsql(qBuilder()\n-        .string(\"filename\").eq(format(FILENAME_TEMPLATE, mapFolderName))\n-        .and()\n-        .string(\"map.latestVersion.hidden\").eq(\"false\"));\n-    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, queryFilter,\n-        INCLUDE, MAP_VERSION_INCLUDES\n-    ))\n-        .cast(MapVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n-    List<String> ids = playerIds.stream().map(String::valueOf).collect(Collectors.toList());\n-\n-    return getMany(Player.class,\"/data/player\", playerIds.size(), java.util.Map.of(\n-        INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"id\").in(ids))));\n-  }\n-\n-  @Override\n-  public Mono<Player> queryPlayerByName(String playerName) {\n-    return getAll(Player.class, \"/data/player\", java.util.Map.of(\n-        INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"login\").eq(playerName))))\n-        .cast(Player.class)\n-        .next();\n-\n-  }\n-\n-  @SneakyThrows\n-  @Override\n-  public Mono<MeResult> getMe() {\n-    return getOne(MeResult.class, \"/me\");\n-  }\n-\n-  @Override\n-  public Mono<GameReview> createGameReview(GameReview review) {\n-    return post(REPLAY_ENDPOINT + \"/\" + review.getGame().getId() + \"/reviews\", review, GameReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateGameReview(GameReview review) {\n-    return patch(\"/data/gameReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n-    return post(MOD_VERSION_ENDPOINT + \"/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n-    return patch(\"/data/modVersionReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n-    return post(MAP_VERSION_ENDPOINT + \"/\" + review.getMapVersion().getId() + \"/reviews\", review, MapVersionReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n-    return patch(\"/data/mapVersionReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteGameReview(String id) {\n-    return delete(\"/data/gameReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteMapVersionReview(String id) {\n-    return delete(\"/data/mapVersionReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n-    MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n-    if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n-    }\n-    parameterMap.add(INCLUDE, MOD_INCLUDES);\n-    parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    return getPageWithTotalPages(MOD_ENDPOINT, count, page, parameterMap);\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MOD_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MOD_INCLUDES,\n-        FILTER, rsql(qBuilder()\n-            .bool(\"recommended\").isTrue())\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteModVersionReview(String id) {\n-    return delete(\"/data/modVersionReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Game> findReplayById(int id) {\n-    return getOne(Game.class, REPLAY_ENDPOINT + \"/\" + id, java.util.Map.of(INCLUDE, REPLAY_INCLUDES));\n-  }\n-\n-  @SneakyThrows\n-  @Override\n-  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n-  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n-    QBuilder qBuilder = new QBuilder<>();\n-    List<Condition<?>> conditions = new ArrayList<>();\n-    conditions.add(qBuilder().string(\"mapPool.matchmakerQueueMapPool.matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)));\n-    conditions.add(qBuilder().floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").lte(rating).or()\n-        .floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").ne(null));\n-    return getAll(MapPoolAssignment.class, \"/data/mapPoolAssignment\", java.util.Map.of(\n-        INCLUDE, MATCHMAKER_POOL_INCLUDES,\n-        FILTER, rsql(qBuilder.and(conditions)).replace(\"ex\", \"isnull\"),\n-        SORT, \"mapVersion.width,mapVersion.map.displayName\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n-  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    return getAll(MatchmakerQueue.class, \"/data/matchmakerQueue\", java.util.Map.of(\n-        INCLUDE, \"leaderboard\",\n-        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))))\n-        .cast(MatchmakerQueue.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Flux<TutorialCategory> getTutorialCategories() {\n-    return getAll(TutorialCategory.class, \"/data/tutorialCategory\",\n-        java.util.Map.of(INCLUDE, \"tutorials,tutorials.mapVersion.map,tutorials.mapVersion.map.latestVersion,\" +\n-            \"tutorials.mapVersion.map.author\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n-    return getPageWithTotalPages(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n-        INCLUDE, MAP_VERSION_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"map.author.id\").eq(String.valueOf(playerId)))\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n-    return patch(format(\"/data/mapVersion/%s\", id), mapVersion);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.CLAN, sync = true)\n-  public Mono<Clan> getClanByTag(String tag) {\n-    return getMany(Clan.class, \"/data/clan\", 1, java.util.Map.of(\n-        INCLUDE, CLAN_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"tag\").eq(tag))\n-    ))\n-        .cast(Clan.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n-    MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n-    if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n-    }\n-    parameterMap.add(INCLUDE, MAP_INCLUDES);\n-    parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, parameterMap);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.COOP_MAPS, sync = true)\n-  public Flux<CoopMission> getCoopMissions() {\n-    return getAll(CoopMission.class, \"/data/coopMission\");\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.COOP_LEADERBOARD, sync = true)\n-  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n-    Condition<?> filterCondition = qBuilder().string(\"mission\").eq(missionId);\n-\n-    if (numberOfPlayers > 0) {\n-      filterCondition = filterCondition.and().intNum(\"playerCount\").eq(numberOfPlayers);\n-    }\n-\n-    return getMany(CoopResult.class, \"/data/coopResult\", 1000, java.util.Map.of(\n-        FILTER, rsql(filterCondition),\n-        INCLUDE, COOP_RESULT_INCLUDES,\n-        SORT, \"duration\"\n-    ));\n-  }\n-\n-  @Override\n-  @SneakyThrows\n-  public Flux<Tournament> getAllTournaments() {\n-    authorizedLatch.await();\n-    return getAllNoPaging(Tournament.class, TOURNAMENT_LIST_ENDPOINT, java.util.Map.of());\n-  }\n-\n-  @Override\n-  public Flux<ModerationReport> getPlayerModerationReports(int playerId) {\n-    return getAllNoPaging(ModerationReport.class, REPORT_ENDPOINT, java.util.Map.of(\n-        INCLUDE, REPORT_INCLUDES,\n-        FILTER, rsql(qBuilder().intNum(\"reporter.id\").eq(playerId))))\n-        .cast(ModerationReport.class);\n-  }\n-\n-  @Override\n-  public Mono<ModerationReport> postModerationReport(com.faforever.client.reporting.ModerationReport report) {\n-    List<java.util.Map<String, String>> reportedUsers = new ArrayList<>();\n-    report.getReportedUsers().forEach(player -> reportedUsers.add(java.util.Map.of(\"type\", \"player\", \"id\", String.valueOf(player.getId()))));\n-    java.util.Map<String, Object> relationships = new HashMap<>(java.util.Map.of(\"reportedUsers\", java.util.Map.of(\"data\", reportedUsers)));\n-    if (report.getGameId() != null) {\n-      relationships.put(\"game\", java.util.Map.of(\"data\", java.util.Map.of(\"type\", \"game\", \"id\", report.getGameId())));\n-    }\n-    java.util.Map<String, Object> body = java.util.Map.of(\"data\", List.of(java.util.Map.of(\n-        \"type\", \"moderationReport\",\n-        \"attributes\", java.util.Map.of(\"gameIncidentTimecode\", report.getGameIncidentTimeCode(), \"reportDescription\", report.getReportDescription()),\n-        \"relationships\", relationships)));\n-    return post(REPORT_ENDPOINT, body, ModerationReport.class);\n-  }\n-\n-  @NotNull\n-  private MultiValueMap<String, Object> createFileMultipart(Path file, ByteCountListener listener) {\n-    MultiValueMap<String, Object> form = new LinkedMultiValueMap<>();\n-    form.add(\"file\", new CountingFileSystemResource(file, listener));\n-    return form;\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> postMultipartForm(String endpointPath, Object request) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.post().uri(endpointPath)\n-        .contentType(MediaType.MULTIPART_FORM_DATA)\n-        .bodyValue(request))\n-        .doOnSuccess(aVoid -> log.debug(\"Posted {} to {}\", request, endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<T> post(String endpointPath, Object request, Class<T> type) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(type, webClient.post().uri(endpointPath)\n-        .contentType(MediaType.parseMediaType(\"application/vnd.api+json;charset=utf-8\"))\n-        .bodyValue(request))\n-        .doOnNext(object -> log.debug(\"Posted {} to {} with type {}\", object, endpointPath, type));\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> patch(String endpointPath, Object request) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.patch().uri(endpointPath)\n-            .contentType(MediaType.parseMediaType(\"application/vnd.api+json;charset=utf-8\"))\n-            .bodyValue(request))\n-        .doOnSuccess(aVoid -> log.debug(\"Patched {} at {}\", request, endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> delete(String endpointPath) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.delete().uri(endpointPath))\n-        .doOnSuccess(aVoid -> log.debug(\"Deleted {}\", endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<T> getOne(Class<T> type, String endpointPath) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(type, webClient.get().uri(endpointPath))\n-        .cache()\n-        .doOnNext(object -> log.debug(\"Retrieved {} from {} with type {}\", object, endpointPath, type));\n-  }\n-\n-  @NotNull\n-  private <T> Mono<T> getOne(Class<T> type, String endpointPath, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(CollectionUtils.toMultiValueMap(multiValues))\n-        .build();\n-\n-    return getOne(type, uriComponents.toUriString());\n-  }\n-\n-  private <T> Flux<T> getAll(Class<T> type, String endpointPath) {\n-    return getAll(type, endpointPath, Collections.emptyMap());\n-  }\n-\n-  private <T> Flux<T> getAll(Class<T> type, String endpointPath, java.util.Map<String, Serializable> params) {\n-    return getMany(type, endpointPath, clientProperties.getApi().getMaxPageSize(), params);\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getMany(Class<T> type, String endpointPath, int count, java.util.Map<String, Serializable> params) {\n-    return getPage(type, endpointPath, count, 1, params);\n-  }\n-\n-  private <T> Flux<T> getPage(Class<T> type, String endpointPath, int pageSize, int page, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    return getPage(type, endpointPath, pageSize, page, CollectionUtils.toMultiValueMap(multiValues));\n-  }\n-\n-  private <T> Mono<Tuple2<List<T>, Integer>> getPageWithTotalPages(String endpointPath, int pageSize, int page, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    return getPageWithTotalPages(endpointPath, pageSize, page, CollectionUtils.toMultiValueMap(multiValues));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getAllNoPaging(Class<T> type, String endpointPath, java.util.Map<String, String> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(CollectionUtils.toMultiValueMap(multiValues))\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveFluxWithErrorHandling(type, webClient.get().uri(url))\n-        .cache()\n-        .doOnNext(list -> log.debug(\"Retrieved {} from {}\", list, url));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getPage(Class<T> type, String endpointPath, int pageSize, int page, MultiValueMap<String, String> params) {\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(params)\n-        .replaceQueryParam(\"page[size]\", pageSize)\n-        .replaceQueryParam(\"page[number]\", page)\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveFluxWithErrorHandling(type, webClient.get().uri(url))\n-        .cache()\n-        .doOnNext(list -> log.debug(\"Retrieved {} from {}\", list, url));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<Tuple2<List<T>, Integer>> getPageWithTotalPages(String endpointPath, int pageSize, int page, MultiValueMap<String, String> params) {\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(params)\n-        .replaceQueryParam(\"page[size]\", pageSize)\n-        .replaceQueryParam(\"page[number]\", page)\n-        .queryParam(\"page[totals]\")\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveMonoWithErrorHandling(JSONAPIDocument.class, webClient.get().uri(url))\n-        .map(jsonapiDocument -> (JSONAPIDocument<List<T>>) jsonapiDocument)\n-        .flatMap(document -> Mono.zip(\n-            Mono.fromCallable(document::get),\n-            Mono.fromCallable(document::getMeta)\n-                .map(meta -> ((java.util.Map<String, Integer>) meta.get(\"page\")).get(\"totalPages\"))))\n-        .switchIfEmpty(Mono.zip(Mono.just(List.of()), Mono.just(0)))\n-        .cache()\n-        .doOnNext(tuple -> log.debug(\"Retrieved {} from {}\", tuple.getT1(), url));\n-  }\n-\n-  private <T> Mono<T> retrieveMonoWithErrorHandling(Class<T> type, WebClient.RequestHeadersSpec<?> requestSpec) {\n-    return requestSpec.exchangeToMono(response -> {\n-      if (response.statusCode().is2xxSuccessful()) {\n-        return response.bodyToMono(type);\n-      } else if (response.statusCode().equals(HttpStatus.BAD_REQUEST)) {\n-        return response.bodyToMono(type).onErrorMap(ResourceParseException.class, exception -> new ApiException(exception.getErrors().getErrors()));\n-      } else if (response.statusCode().is4xxClientError()) {\n-        return response.createException().flatMap(Mono::error);\n-      } else if (response.statusCode().is5xxServerError()) {\n-        return response.createException().flatMap(Mono::error);\n-      } else {\n-        log.warn(\"Unknown status returned by api\");\n-        return response.createException().flatMap(Mono::error);\n-      }\n-    });\n-  }\n-\n-  private <T> Flux<T> retrieveFluxWithErrorHandling(Class<T> type, WebClient.RequestHeadersSpec<?> requestSpec) {\n-    return requestSpec.exchangeToFlux(response -> {\n-      if (response.statusCode().is2xxSuccessful()) {\n-        return response.bodyToFlux(type);\n-      } else if (response.statusCode().equals(HttpStatus.BAD_REQUEST)) {\n-        return response.bodyToFlux(type).onErrorMap(ResourceParseException.class, exception -> new ApiException(exception.getErrors().getErrors()));\n-      } else if (response.statusCode().is4xxClientError()) {\n-        return response.createException().flatMapMany(Mono::error);\n-      } else if (response.statusCode().is5xxServerError()) {\n-        return response.createException().flatMapMany(Mono::error);\n-      } else {\n-        log.warn(\"Unknown status returned by api\");\n-        return response.createException().flatMapMany(Mono::error);\n-      }\n-    });\n-  }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "1baf31a538e17b73834122b14ad1bed9e46c2b0f", "committedDate": "2021-01-04 17:28:42 -0500", "message": "Add missing slash (#2095)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "115d0985c8184318d89610d22d3bf10ceaa83b0a", "committedDate": "2021-01-07 21:04:29 -0500", "message": "Remove leaderboard snake case (#2110)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "bc045d14db06dcc4feae6c8f4587d886005111eb", "committedDate": "2021-02-13 18:20:40 -0500", "message": "Use scoretime for rating history and add loading pane (#2142)"}, {"oid": "6e0589ef00a29fa7ca43df0eb331f40aee234c72", "committedDate": "2021-02-21 09:50:45 -0500", "message": "Add ability to conduct moderator reports from the client (#2139)"}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "531d0f57d941849d3bacd616aff4931502026a54", "committedDate": "2021-05-03 10:04:23 -0400", "message": "add exact argument and use equality for toggle controller (#2230)"}, {"oid": "044426f35290dcb59a5244289b0a474e5aa005ba", "committedDate": "2021-05-09 11:49:33 -0400", "message": "Fix review version not being set (#2236)"}, {"oid": "b5e39f11830b2911091bcbc7612181338880779c", "committedDate": "2021-06-08 06:57:18 -0400", "message": "Use new recommended maps and mods attribute for top picks (#2260)"}, {"oid": "4c061711ca870443400f2d0f7076b6b9771be17b", "committedDate": "2021-06-19 23:50:41 -0400", "message": "Change get mods by uid to return optional"}, {"oid": "33163e5f1d7fb17cd0b0d74450c9f64384e434f7", "committedDate": "2021-07-02 21:58:03 -0400", "message": "Remove depreciated mapStatistics from api calls (#2292)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "73e38e91e5773a794e6c23a2e069289261925e4b", "committedDate": "2021-07-29 10:33:52 -0400", "message": "Log the url rather than components separately in api"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjQxOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536196418", "body": "just Map.of()", "bodyText": "just Map.of()", "bodyHTML": "<p dir=\"auto\">just Map.of()</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:51:08Z", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -431,12 +432,24 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(\n+        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersion,\" +\n+            \"mapPool.mapVersion.map,mapPool.mapVersion.map.latestVersion,\" +\n+            \"mapPool.mapVersion.map.author,mapPool.mapVersion.map.statistics,\" +\n+            \"mapPool.mapVersion.map.reviewsSummary,mapPool.mapVersion.map.versions.reviews,\" +\n+            \"mapPool.mapVersion.map.versions.reviews.player\",\n+        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  }\n+\n+  @Override\n+  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 00bd8bb6..95131d2a 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -428,23 +428,23 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, ImmutableMap.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n   }\n \n   @Override\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(\n-        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersion,\" +\n-            \"mapPool.mapVersion.map,mapPool.mapVersion.map.latestVersion,\" +\n-            \"mapPool.mapVersion.map.author,mapPool.mapVersion.map.statistics,\" +\n-            \"mapPool.mapVersion.map.reviewsSummary,mapPool.mapVersion.map.versions.reviews,\" +\n-            \"mapPool.mapVersion.map.versions.reviews.player\",\n+    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n+        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n+            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n+            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n+            \"mapPool.mapVersions.map.versions.reviews.player\",\n         \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n   }\n \n   @Override\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n         \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 95131d2a..f9c51505 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -444,7 +444,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(\n         \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex f9c51505..95131d2a 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -444,7 +444,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n         \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": {"commit": "2824223ed76fb452d6886470f5380f599cec4b93", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 95131d2a..c7f6cc9f 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -443,6 +442,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n         \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n", "next_change": {"commit": "c37a25b4ff66049a8ee011ea417d18393171a886", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex c7f6cc9f..d608e9b8 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -427,25 +446,26 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n     return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n-        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n             \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n             \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n             \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n             \"mapPool.mapVersions.map.versions.reviews.player\",\n-        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n-        \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n     }\n", "next_change": {"commit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex d608e9b8..745564c6 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -465,6 +465,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        INCLUDE, \"leaderboard\",\n         FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 00bd8bb6..8ba35eb6 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -428,24 +447,27 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, ImmutableMap.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return getAll(\"/data/matchmakerQueueMapPool\", ImmutableMap.of(\n-        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersion,\" +\n-            \"mapPool.mapVersion.map,mapPool.mapVersion.map.latestVersion,\" +\n-            \"mapPool.mapVersion.map.author,mapPool.mapVersion.map.statistics,\" +\n-            \"mapPool.mapVersion.map.reviewsSummary,mapPool.mapVersion.map.versions.reviews,\" +\n-            \"mapPool.mapVersion.map.versions.reviews.player\",\n-        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n+            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n+            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n+            \"mapPool.mapVersions.map.versions.reviews.player\",\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", ImmutableMap.of(\n-        \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        INCLUDE, \"leaderboard\",\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n     }\n", "next_change": {"commit": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 8ba35eb6..c9436e46 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -290,259 +312,270 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   }\n \n   @Override\n-  public void uploadMod(Path file, ByteCountListener listener) {\n+  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n     MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    post(\"/mods/upload\", multipartContent, false);\n+    return postMultipartForm(\"/mods/upload\", multipartContent);\n   }\n \n   @Override\n-  public void uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n+  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n     MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n     multipartContent.add(\"metadata\", java.util.Map.of(\"isRanked\", isRanked));\n-    post(\"/maps/upload\", multipartContent, false);\n+    return postMultipartForm(\"/maps/upload\", multipartContent);\n   }\n \n   @Override\n-  public void changePassword(String username, String currentPasswordHash, String newPasswordHash) {\n-    java.util.Map<String, String> body = java.util.Map.of(\n-        \"currentPassword\", currentPasswordHash,\n-        \"newPassword\", newPasswordHash\n-    );\n-\n-    post(\"/users/changePassword\", body, true);\n-  }\n-\n-  @Override\n-  public ModVersion getModVersion(String uid) {\n-    return (ModVersion) getMany(MOD_VERSION_ENDPOINT, 1,\n-        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, \"mod,mod.latestVersion,mod.versions,mod.uploader\")\n-    ).get(0);\n+  public Mono<ModVersion> getModVersion(String uid) {\n+    return getMany(ModVersion.class, MOD_VERSION_ENDPOINT, 1,\n+        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, MOD_VERSION_INCLUDES)\n+    )\n+        .cast(ModVersion.class)\n+        .next();\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.FEATURED_MOD_FILES, sync = true)\n-  public List<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    String endpoint = String.format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n+  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n+    String endpoint = format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n         Optional.ofNullable(version).map(String::valueOf).orElse(\"latest\"));\n-    return getMany(endpoint, 10_000, java.util.Map.of());\n+    return getMany(FeaturedModFile.class, endpoint, 10_000, java.util.Map.of());\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getNewestReplaysWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n+  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n         SORT, \"-endTime\",\n         INCLUDE, REPLAY_INCLUDES,\n         FILTER, \"endTime=isnull=false\"\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getHighestRatedReplaysWithMeta(int count, int page) {\n-    JSONAPIDocument<List<GameReviewsSummary>> pageWithPageCount = getPageWithMeta(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n+  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n         SORT, \"-lowerBound\",\n         // TODO this was done in a rush, check what is actually needed\n-        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.reviews,game.reviews.player,\" +\n+        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.playerStats.ratingChanges,game.reviews,game.reviews.player,\" +\n             \"game.mapVersion,game.mapVersion.map\",\n         FILTER, \"game.endTime=isnull=false\"\n-    ));\n-    return new Tuple<>(pageWithPageCount.get().stream()\n-        .map(GameReviewsSummary::getGame)\n-        .collect(Collectors.toList()),\n-        pageWithPageCount.getMeta());\n+    ))\n+        .map(tuple -> tuple.mapT1(gameReviews ->\n+            gameReviews.stream()\n+                .map(gameReviewSummary -> ((GameReviewsSummary) gameReviewSummary).getGame())\n+                .collect(Collectors.toList()))\n+        );\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> findReplaysByQueryWithMeta(String query, int maxResults, int page, SortConfig sortConfig) {\n-    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n-        FILTER, \"(\" + query + \");endTime=isnull=false\",\n+  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n+    return getPageWithTotalPages(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n+        FILTER, query + \";endTime=isnull=false\",\n         INCLUDE, REPLAY_INCLUDES,\n         SORT, sortConfig.toQuery()\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public Optional<MapVersion> findMapByFolderName(String folderName) {\n-    List<MapVersion> maps = getMany(MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, String.format(\"filename==\\\"*%s*\\\"\", folderName),\n-        INCLUDE, MAP_VERSION_INCLUDES));\n-    if (maps.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(maps.get(0));\n+  public Mono<MapVersion> findMapByFolderName(String folderName) {\n+    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n+        FILTER, rsql(qBuilder().string(\"filename\").eq(format(FILENAME_TEMPLATE, folderName))),\n+        INCLUDE, MAP_VERSION_INCLUDES))\n+        .cast(MapVersion.class)\n+        .next();\n   }\n \n   @Override\n-  public List<Player> getPlayersByIds(Collection<Integer> playerIds) {\n+  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n+    String queryFilter = rsql(qBuilder()\n+        .string(\"filename\").eq(format(FILENAME_TEMPLATE, mapFolderName))\n+        .and()\n+        .string(\"map.latestVersion.hidden\").eq(\"false\"));\n+    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n+        FILTER, queryFilter,\n+        INCLUDE, MAP_VERSION_INCLUDES\n+    ))\n+        .cast(MapVersion.class)\n+        .next();\n+  }\n+\n+  @Override\n+  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n     List<String> ids = playerIds.stream().map(String::valueOf).collect(Collectors.toList());\n \n-    return getMany(\"/data/player\", playerIds.size(), java.util.Map.of(\n+    return getMany(Player.class,\"/data/player\", playerIds.size(), java.util.Map.of(\n         INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"id\").in(ids))\n-    ));\n+        FILTER, rsql(qBuilder().string(\"id\").in(ids))));\n+  }\n+\n+  @Override\n+  public Mono<Player> queryPlayerByName(String playerName) {\n+    return getAll(Player.class, \"/data/player\", java.util.Map.of(\n+        INCLUDE, PLAYER_INCLUDES,\n+        FILTER, rsql(qBuilder().string(\"login\").eq(playerName))))\n+        .cast(Player.class)\n+        .next();\n+\n   }\n \n+  @SneakyThrows\n   @Override\n-  public MeResult getOwnPlayer() {\n-    return getOne(\"/me\", MeResult.class);\n+  public Mono<MeResult> getMe() {\n+    return getOne(MeResult.class, \"/me\");\n   }\n \n   @Override\n-  public GameReview createGameReview(GameReview review) {\n+  public Mono<GameReview> createGameReview(GameReview review) {\n     return post(REPLAY_ENDPOINT + \"/\" + review.getGame().getId() + \"/reviews\", review, GameReview.class);\n   }\n \n   @Override\n-  public void updateGameReview(GameReview review) {\n-    patch(\"/data/gameReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateGameReview(GameReview review) {\n+    return patch(\"/data/gameReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public ModVersionReview createModVersionReview(ModVersionReview review) {\n-    return post(\"/data/modVersion/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n+  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n+    return post(MOD_VERSION_ENDPOINT + \"/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n   }\n \n   @Override\n-  public void updateModVersionReview(ModVersionReview review) {\n-    patch(\"/data/modVersionReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n+    return patch(\"/data/modVersionReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public MapVersionReview createMapVersionReview(MapVersionReview review) {\n+  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n     return post(MAP_VERSION_ENDPOINT + \"/\" + review.getMapVersion().getId() + \"/reviews\", review, MapVersionReview.class);\n   }\n \n   @Override\n-  public void updateMapVersionReview(MapVersionReview review) {\n-    patch(\"/data/mapVersionReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n+    return patch(\"/data/mapVersionReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public void deleteGameReview(String id) {\n-    delete(\"/data/gameReview/\" + id);\n+  public Mono<Void> deleteGameReview(String id) {\n+    return delete(\"/data/gameReview/\" + id);\n   }\n \n   @Override\n-  public void deleteMapVersionReview(String id) {\n-    delete(\"/data/mapVersionReview/\" + id);\n+  public Mono<Void> deleteMapVersionReview(String id) {\n+    return delete(\"/data/mapVersionReview/\" + id);\n   }\n \n   @Override\n-  public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig searchConfig, int count, int page) {\n+  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n     MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n     if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + HIDDEN);\n+      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n     }\n     parameterMap.add(INCLUDE, MOD_INCLUDES);\n     parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    JSONAPIDocument<List<Mod>> jsonApiDoc = getPageWithMeta(MOD_ENDPOINT, count, page, parameterMap);\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+    return getPageWithTotalPages(MOD_ENDPOINT, count, page, parameterMap);\n   }\n \n   @Override\n-  public void deleteModVersionReview(String id) {\n-    delete(\"/data/modVersionReview/\" + id);\n+  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(MOD_ENDPOINT, count, page, java.util.Map.of(\n+        INCLUDE, MOD_INCLUDES,\n+        FILTER, rsql(qBuilder()\n+            .bool(\"recommended\").isTrue())\n+    ));\n   }\n \n   @Override\n-  public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n+  public Mono<Void> deleteModVersionReview(String id) {\n+    return delete(\"/data/modVersionReview/\" + id);\n   }\n \n+  @Override\n+  public Mono<Game> findReplayById(int id) {\n+    return getOne(Game.class, REPLAY_ENDPOINT + \"/\" + id, java.util.Map.of(INCLUDE, REPLAY_INCLUDES));\n+  }\n+\n+  @SneakyThrows\n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n-  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n-        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n-            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n-            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n-            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n-            \"mapPool.mapVersions.map.versions.reviews.player\",\n-        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n+    QBuilder qBuilder = new QBuilder<>();\n+    List<Condition<?>> conditions = new ArrayList<>();\n+    conditions.add(qBuilder().string(\"mapPool.matchmakerQueueMapPool.matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)));\n+    conditions.add(qBuilder().floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").lte(rating).or()\n+        .floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").ne(null));\n+    return getAll(MapPoolAssignment.class, \"/data/mapPoolAssignment\", java.util.Map.of(\n+        INCLUDE, MATCHMAKER_POOL_INCLUDES,\n+        FILTER, rsql(qBuilder.and(conditions)).replace(\"ex\", \"isnull\"),\n+        SORT, \"mapVersion.width,mapVersion.map.displayName\"));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n-  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    return getAll(MatchmakerQueue.class, \"/data/matchmakerQueue\", java.util.Map.of(\n         INCLUDE, \"leaderboard\",\n-        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n-    if (queue.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(queue.get(0));\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))))\n+        .cast(MatchmakerQueue.class)\n+        .next();\n   }\n \n   @Override\n-  public List<TutorialCategory> getTutorialCategories() {\n-    return getAll(\"/data/tutorialCategory\",\n+  public Flux<TutorialCategory> getTutorialCategories() {\n+    return getAll(TutorialCategory.class, \"/data/tutorialCategory\",\n         java.util.Map.of(INCLUDE, \"tutorials,tutorials.mapVersion.map,tutorials.mapVersion.map.latestVersion,\" +\n-            \"tutorials.mapVersion.map.author,tutorials.mapVersion.map.statistics\"));\n+            \"tutorials.mapVersion.map.author\"));\n   }\n \n   @Override\n-  public Tuple<List<MapVersion>, java.util.Map<String, ?>> getOwnedMapsWithMeta(int playerId, int loadMoreCount, int page) {\n-    JSONAPIDocument<List<MapVersion>> jsonApiDoc = getPageWithMeta(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n+  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n+    return getPageWithTotalPages(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n         INCLUDE, MAP_VERSION_INCLUDES,\n         FILTER, rsql(qBuilder().string(\"map.author.id\").eq(String.valueOf(playerId)))\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public void updateMapVersion(String id, MapVersion mapVersion) {\n-    patch(String.format(\"/data/mapVersion/%s\", id), mapVersion, Void.class);\n+  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n+    return patch(format(\"/data/mapVersion/%s\", id), mapVersion);\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.CLAN, sync = true)\n-  public Optional<Clan> getClanByTag(String tag) {\n-    List<Clan> clans = getMany(\"/data/clan\", 1, java.util.Map.of(\n-        INCLUDE, \"leader,founder,memberships,memberships.player\",\n+  public Mono<Clan> getClanByTag(String tag) {\n+    return getMany(Clan.class, \"/data/clan\", 1, java.util.Map.of(\n+        INCLUDE, CLAN_INCLUDES,\n         FILTER, rsql(qBuilder().string(\"tag\").eq(tag))\n-    ));\n-    if (clans.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(clans.get(0));\n+    ))\n+        .cast(Clan.class)\n+        .next();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> findMapsByQueryWithMeta(SearchConfig searchConfig, int count, int page) {\n+  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n     MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n     if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + HIDDEN);\n+      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n     }\n     parameterMap.add(INCLUDE, MAP_INCLUDES);\n     parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    JSONAPIDocument<List<Map>> jsonApiDoc = getPageWithMeta(MAP_ENDPOINT, count, page, parameterMap);\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n-  }\n-\n-  @Override\n-  public Optional<MapVersion> findMapVersionById(String id) {\n-    // FIXME: that is not gonna work this way\n-    //FIXME: filter hidden maps\n-    return Optional.ofNullable(getOne(MAP_ENDPOINT + \"/\" + id, MapVersion.class));\n+    return getPageWithTotalPages(MAP_ENDPOINT, count, page, parameterMap);\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.COOP_MAPS, sync = true)\n-  public List<CoopMission> getCoopMissions() {\n-    return getAll(\"/data/coopMission\");\n+  public Flux<CoopMission> getCoopMissions() {\n+    return getAll(CoopMission.class, \"/data/coopMission\");\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.COOP_LEADERBOARD, sync = true)\n-  public List<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n+  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n     Condition<?> filterCondition = qBuilder().string(\"mission\").eq(missionId);\n \n     if (numberOfPlayers > 0) {\n       filterCondition = filterCondition.and().intNum(\"playerCount\").eq(numberOfPlayers);\n     }\n \n-    return getMany(\"/data/coopResult\", 1000, java.util.Map.of(\n+    return getMany(CoopResult.class, \"/data/coopResult\", 1000, java.util.Map.of(\n         FILTER, rsql(filterCondition),\n         INCLUDE, COOP_RESULT_INCLUDES,\n         SORT, \"duration\"\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\ndeleted file mode 100644\nindex c9436e46..00000000\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,788 +0,0 @@\n-package com.faforever.client.api;\n-\n-import com.faforever.client.config.CacheNames;\n-import com.faforever.client.config.ClientProperties;\n-import com.faforever.client.config.ClientProperties.Api;\n-import com.faforever.client.io.CountingFileSystemResource;\n-import com.faforever.client.mod.FeaturedMod;\n-import com.faforever.client.user.event.LoggedOutEvent;\n-import com.faforever.client.vault.search.SearchController.SearchConfig;\n-import com.faforever.client.vault.search.SearchController.SortConfig;\n-import com.faforever.commons.api.dto.AchievementDefinition;\n-import com.faforever.commons.api.dto.ApiException;\n-import com.faforever.commons.api.dto.Clan;\n-import com.faforever.commons.api.dto.CoopMission;\n-import com.faforever.commons.api.dto.CoopResult;\n-import com.faforever.commons.api.dto.FeaturedModFile;\n-import com.faforever.commons.api.dto.Game;\n-import com.faforever.commons.api.dto.GameReview;\n-import com.faforever.commons.api.dto.GameReviewsSummary;\n-import com.faforever.commons.api.dto.Leaderboard;\n-import com.faforever.commons.api.dto.LeaderboardEntry;\n-import com.faforever.commons.api.dto.LeaderboardRatingJournal;\n-import com.faforever.commons.api.dto.Map;\n-import com.faforever.commons.api.dto.MapPoolAssignment;\n-import com.faforever.commons.api.dto.MapVersion;\n-import com.faforever.commons.api.dto.MapVersionReview;\n-import com.faforever.commons.api.dto.MatchmakerQueue;\n-import com.faforever.commons.api.dto.MeResult;\n-import com.faforever.commons.api.dto.Mod;\n-import com.faforever.commons.api.dto.ModVersion;\n-import com.faforever.commons.api.dto.ModVersionReview;\n-import com.faforever.commons.api.dto.ModerationReport;\n-import com.faforever.commons.api.dto.Player;\n-import com.faforever.commons.api.dto.PlayerAchievement;\n-import com.faforever.commons.api.dto.PlayerEvent;\n-import com.faforever.commons.api.dto.Tournament;\n-import com.faforever.commons.api.dto.TutorialCategory;\n-import com.faforever.commons.io.ByteCountListener;\n-import com.github.jasminb.jsonapi.JSONAPIDocument;\n-import com.github.jasminb.jsonapi.exceptions.ResourceParseException;\n-import com.github.rutledgepaulv.qbuilders.builders.QBuilder;\n-import com.github.rutledgepaulv.qbuilders.conditions.Condition;\n-import com.github.rutledgepaulv.qbuilders.visitors.RSQLVisitor;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.eventbus.EventBus;\n-import com.google.common.eventbus.Subscribe;\n-import lombok.RequiredArgsConstructor;\n-import lombok.SneakyThrows;\n-import lombok.extern.slf4j.Slf4j;\n-import org.jetbrains.annotations.NotNull;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.cache.annotation.Cacheable;\n-import org.springframework.context.annotation.Profile;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Component;\n-import org.springframework.util.CollectionUtils;\n-import org.springframework.util.LinkedMultiValueMap;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.web.reactive.function.client.WebClient;\n-import org.springframework.web.util.UriComponents;\n-import org.springframework.web.util.UriComponentsBuilder;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import reactor.util.function.Tuple2;\n-\n-import java.io.Serializable;\n-import java.nio.file.Path;\n-import java.time.LocalDateTime;\n-import java.time.ZoneOffset;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.stream.Collectors;\n-\n-import static java.lang.String.format;\n-\n-@SuppressWarnings(\"unchecked\")\n-@Slf4j\n-@Component\n-@Profile(\"!offline\")\n-@RequiredArgsConstructor\n-public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n-\n-  private static final String REPLAY_ENDPOINT = \"/data/game\";\n-  private static final String MAP_ENDPOINT = \"/data/map\";\n-  private static final String MAP_VERSION_ENDPOINT = \"/data/mapVersion\";\n-  private static final String MOD_ENDPOINT = \"/data/mod\";\n-  private static final String MOD_VERSION_ENDPOINT = \"/data/modVersion\";\n-  private static final String ACHIEVEMENT_ENDPOINT = \"/data/achievement\";\n-  private static final String LEADERBOARD_ENDPOINT = \"/data/leaderboard\";\n-  private static final String LEADERBOARD_ENTRY_ENDPOINT = \"/data/leaderboardRating\";\n-  private static final String REPORT_ENDPOINT = \"/data/moderationReport\";\n-  private static final String TOURNAMENT_LIST_ENDPOINT = \"/challonge/v1/tournaments.json\";\n-  private static final String REPLAY_INCLUDES = \"featuredMod,playerStats,playerStats.player,playerStats.ratingChanges,reviews,\" +\n-      \"reviews.player,mapVersion,mapVersion.map,reviewsSummary\";\n-  private static final String MAP_INCLUDES = \"latestVersion,author,reviewsSummary,\" +\n-      \"versions.reviews,versions.reviews.player\";\n-  private static final String MAP_VERSION_INCLUDES = \"map,map.latestVersion,map.author,\" +\n-      \"map.reviewsSummary,map.versions.reviews,map.versions.reviews.player\";\n-  private static final String MATCHMAKER_POOL_INCLUDES = \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,\" +\n-      \"mapVersion.map.author,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-      \"mapVersion.map.versions.reviews.player\";\n-  private static final String MOD_INCLUDES = \"latestVersion,reviewsSummary,versions,versions.reviews,\" +\n-      \"versions.reviews.player\";\n-  private static final String MOD_VERSION_INCLUDES = \"mod,mod.latestVersion,mod.versions,mod.versions.reviews,\" +\n-      \"mod.versions.reviews.player,mod.reviewsSummary,mod.uploader\";\n-  private static final String LEADERBOARD_ENTRY_INCLUDES = \"player,leaderboard\";\n-  private static final String COOP_RESULT_INCLUDES = \"game.playerStats.player\";\n-  private static final String PLAYER_INCLUDES = \"names\";\n-  private static final String REPORT_INCLUDES = \"reporter,lastModerator,reportedUsers,game\";\n-  private static final String FILTER = \"filter\";\n-  private static final String SORT = \"sort\";\n-  private static final String INCLUDE = \"include\";\n-  private static final String NOT_HIDDEN = \"latestVersion.hidden==\\\"false\\\"\";\n-  private static final String FILENAME_TEMPLATE = \"maps/%s.zip\";\n-  private static final String CLAN_INCLUDES = \"leader,founder,memberships,memberships.player\";\n-\n-  private final EventBus eventBus;\n-  private final ClientProperties clientProperties;\n-  private final JsonApiReader jsonApiReader;\n-  private final JsonApiWriter jsonApiWriter;\n-  private final OAuthTokenFilter oAuthTokenFilter;\n-\n-  private CountDownLatch authorizedLatch = new CountDownLatch(1);\n-  private WebClient webClient;\n-\n-  private static String rsql(Condition<?> eq) {\n-    return eq.query(new RSQLVisitor());\n-  }\n-\n-  private static <T extends QBuilder<T>> QBuilder<T> qBuilder() {\n-    return new QBuilder<>();\n-  }\n-\n-  @Override\n-  public void afterPropertiesSet() {\n-    eventBus.register(this);\n-  }\n-\n-  @Override\n-  public void authorize() {\n-    Api apiProperties = clientProperties.getApi();\n-\n-    webClient = WebClient.builder()\n-        .baseUrl(apiProperties.getBaseUrl())\n-        .filter(oAuthTokenFilter)\n-        .codecs(clientCodecConfigurer -> {\n-          clientCodecConfigurer.customCodecs().register(jsonApiReader);\n-          clientCodecConfigurer.customCodecs().register(jsonApiWriter);\n-        })\n-        .build();\n-\n-    authorizedLatch.countDown();\n-  }\n-\n-  @Subscribe\n-  public void onLoggedOutEvent(LoggedOutEvent event) {\n-    authorizedLatch = new CountDownLatch(1);\n-  }\n-\n-  @Subscribe\n-  public void onSessionExpiredEvent(SessionExpiredEvent event) {\n-    authorizedLatch = new CountDownLatch(1);\n-  }\n-\n-  @Override\n-  public Flux<PlayerAchievement> getPlayerAchievements(int playerId) {\n-    return getAll(PlayerAchievement.class, \"/data/playerAchievement\", java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId))\n-    ));\n-  }\n-\n-  @Override\n-  public Flux<PlayerEvent> getPlayerEvents(int playerId) {\n-    return getAll(PlayerEvent.class, \"/data/playerEvent\", java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId))\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.ACHIEVEMENTS, sync = true)\n-  public Flux<AchievementDefinition> getAchievementDefinitions() {\n-    return getAll(AchievementDefinition.class, ACHIEVEMENT_ENDPOINT, java.util.Map.of(\n-        SORT, \"order\"\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.ACHIEVEMENTS, sync = true)\n-  public Mono<AchievementDefinition> getAchievementDefinition(String achievementId) {\n-    return getOne(AchievementDefinition.class, ACHIEVEMENT_ENDPOINT + \"/\" + achievementId);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MODS, sync = true)\n-  public Flux<Mod> getMods() {\n-    return getAll(Mod.class, MOD_ENDPOINT, java.util.Map.of(\n-        INCLUDE, MOD_INCLUDES));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.FEATURED_MODS, sync = true)\n-  public Flux<com.faforever.commons.api.dto.FeaturedMod> getFeaturedMods() {\n-    return getMany(com.faforever.commons.api.dto.FeaturedMod.class, \"/data/featuredMod\", 1000, java.util.Map.of());\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Flux<Leaderboard> getLeaderboards() {\n-    return getAll(Leaderboard.class, LEADERBOARD_ENDPOINT);\n-  }\n-\n-  @Override\n-  public Flux<LeaderboardEntry> getLeaderboardEntriesForPlayer(int playerId) {\n-    return getAll(LeaderboardEntry.class, LEADERBOARD_ENTRY_ENDPOINT, java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId)),\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Flux<LeaderboardEntry> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n-    return getAll(LeaderboardEntry.class, LEADERBOARD_ENTRY_ENDPOINT, java.util.Map.of(\n-        FILTER, rsql(qBuilder().string(\"leaderboard.technicalName\").eq(leaderboardTechnicalName)\n-            .and().instant(\"updateTime\").after(LocalDateTime.now().minusMonths(1).toInstant(ZoneOffset.UTC), false)),\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Mono<Tuple2<List<LeaderboardEntry>, Integer>> getLeaderboardEntriesWithTotalPages(String leaderboardId, int count, int page) {\n-    return getPageWithTotalPages(LEADERBOARD_ENTRY_ENDPOINT, count, page, ImmutableMap.of(\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.RATING_HISTORY, sync = true)\n-  public Flux<LeaderboardRatingJournal> getRatingJournal(int playerId, int leaderboardId) {\n-    return getAll(LeaderboardRatingJournal.class, \"/data/leaderboardRatingJournal\", java.util.Map.of(\n-        FILTER, rsql(qBuilder()\n-            .intNum(\"gamePlayerStats.player.id\").eq(playerId)\n-            .and()\n-            .intNum(\"leaderboard.id\").eq(leaderboardId)),\n-        INCLUDE, \"gamePlayerStats\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getRecommendedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        FILTER, rsql(qBuilder()\n-            .bool(\"recommended\").isTrue())\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MAPS, sync = true)\n-  public Mono<Tuple2<List<Map>, Integer>> getMostPlayedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-gamesPlayed\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getHighestRatedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-reviewsSummary.lowerBound\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getNewestMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-updateTime\",\n-        FILTER, NOT_HIDDEN\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getMapsByIdWithTotalPages(List<Integer> mapIdList, int count, int page) {\n-    String filterCriteria = mapIdList.stream()\n-        .map(Object::toString)\n-        .collect(Collectors.joining(\",\", \"latestVersion.map.id=in=(\", \")\"));\n-\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-updateTime\",\n-        FILTER, filterCriteria\n-    ));\n-  }\n-\n-  @Override\n-  public Flux<Game> getLastGamesOnMap(int playerId, String mapVersionId, int count) {\n-    return getMany(Game.class, REPLAY_ENDPOINT, count, java.util.Map.of(\n-        FILTER, rsql(qBuilder()\n-            .string(\"mapVersion.id\").eq(mapVersionId)\n-            .and()\n-            .intNum(\"playerStats.player.id\").eq(playerId)),\n-        INCLUDE, REPLAY_INCLUDES,\n-        SORT, \"-endTime\"\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n-    MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    return postMultipartForm(\"/mods/upload\", multipartContent);\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n-    MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    multipartContent.add(\"metadata\", java.util.Map.of(\"isRanked\", isRanked));\n-    return postMultipartForm(\"/maps/upload\", multipartContent);\n-  }\n-\n-  @Override\n-  public Mono<ModVersion> getModVersion(String uid) {\n-    return getMany(ModVersion.class, MOD_VERSION_ENDPOINT, 1,\n-        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, MOD_VERSION_INCLUDES)\n-    )\n-        .cast(ModVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.FEATURED_MOD_FILES, sync = true)\n-  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    String endpoint = format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n-        Optional.ofNullable(version).map(String::valueOf).orElse(\"latest\"));\n-    return getMany(FeaturedModFile.class, endpoint, 10_000, java.util.Map.of());\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n-        SORT, \"-endTime\",\n-        INCLUDE, REPLAY_INCLUDES,\n-        FILTER, \"endTime=isnull=false\"\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n-        SORT, \"-lowerBound\",\n-        // TODO this was done in a rush, check what is actually needed\n-        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.playerStats.ratingChanges,game.reviews,game.reviews.player,\" +\n-            \"game.mapVersion,game.mapVersion.map\",\n-        FILTER, \"game.endTime=isnull=false\"\n-    ))\n-        .map(tuple -> tuple.mapT1(gameReviews ->\n-            gameReviews.stream()\n-                .map(gameReviewSummary -> ((GameReviewsSummary) gameReviewSummary).getGame())\n-                .collect(Collectors.toList()))\n-        );\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n-    return getPageWithTotalPages(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n-        FILTER, query + \";endTime=isnull=false\",\n-        INCLUDE, REPLAY_INCLUDES,\n-        SORT, sortConfig.toQuery()\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> findMapByFolderName(String folderName) {\n-    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, rsql(qBuilder().string(\"filename\").eq(format(FILENAME_TEMPLATE, folderName))),\n-        INCLUDE, MAP_VERSION_INCLUDES))\n-        .cast(MapVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n-    String queryFilter = rsql(qBuilder()\n-        .string(\"filename\").eq(format(FILENAME_TEMPLATE, mapFolderName))\n-        .and()\n-        .string(\"map.latestVersion.hidden\").eq(\"false\"));\n-    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, queryFilter,\n-        INCLUDE, MAP_VERSION_INCLUDES\n-    ))\n-        .cast(MapVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n-    List<String> ids = playerIds.stream().map(String::valueOf).collect(Collectors.toList());\n-\n-    return getMany(Player.class,\"/data/player\", playerIds.size(), java.util.Map.of(\n-        INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"id\").in(ids))));\n-  }\n-\n-  @Override\n-  public Mono<Player> queryPlayerByName(String playerName) {\n-    return getAll(Player.class, \"/data/player\", java.util.Map.of(\n-        INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"login\").eq(playerName))))\n-        .cast(Player.class)\n-        .next();\n-\n-  }\n-\n-  @SneakyThrows\n-  @Override\n-  public Mono<MeResult> getMe() {\n-    return getOne(MeResult.class, \"/me\");\n-  }\n-\n-  @Override\n-  public Mono<GameReview> createGameReview(GameReview review) {\n-    return post(REPLAY_ENDPOINT + \"/\" + review.getGame().getId() + \"/reviews\", review, GameReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateGameReview(GameReview review) {\n-    return patch(\"/data/gameReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n-    return post(MOD_VERSION_ENDPOINT + \"/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n-    return patch(\"/data/modVersionReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n-    return post(MAP_VERSION_ENDPOINT + \"/\" + review.getMapVersion().getId() + \"/reviews\", review, MapVersionReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n-    return patch(\"/data/mapVersionReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteGameReview(String id) {\n-    return delete(\"/data/gameReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteMapVersionReview(String id) {\n-    return delete(\"/data/mapVersionReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n-    MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n-    if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n-    }\n-    parameterMap.add(INCLUDE, MOD_INCLUDES);\n-    parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    return getPageWithTotalPages(MOD_ENDPOINT, count, page, parameterMap);\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MOD_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MOD_INCLUDES,\n-        FILTER, rsql(qBuilder()\n-            .bool(\"recommended\").isTrue())\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteModVersionReview(String id) {\n-    return delete(\"/data/modVersionReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Game> findReplayById(int id) {\n-    return getOne(Game.class, REPLAY_ENDPOINT + \"/\" + id, java.util.Map.of(INCLUDE, REPLAY_INCLUDES));\n-  }\n-\n-  @SneakyThrows\n-  @Override\n-  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n-  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n-    QBuilder qBuilder = new QBuilder<>();\n-    List<Condition<?>> conditions = new ArrayList<>();\n-    conditions.add(qBuilder().string(\"mapPool.matchmakerQueueMapPool.matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)));\n-    conditions.add(qBuilder().floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").lte(rating).or()\n-        .floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").ne(null));\n-    return getAll(MapPoolAssignment.class, \"/data/mapPoolAssignment\", java.util.Map.of(\n-        INCLUDE, MATCHMAKER_POOL_INCLUDES,\n-        FILTER, rsql(qBuilder.and(conditions)).replace(\"ex\", \"isnull\"),\n-        SORT, \"mapVersion.width,mapVersion.map.displayName\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n-  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    return getAll(MatchmakerQueue.class, \"/data/matchmakerQueue\", java.util.Map.of(\n-        INCLUDE, \"leaderboard\",\n-        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))))\n-        .cast(MatchmakerQueue.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Flux<TutorialCategory> getTutorialCategories() {\n-    return getAll(TutorialCategory.class, \"/data/tutorialCategory\",\n-        java.util.Map.of(INCLUDE, \"tutorials,tutorials.mapVersion.map,tutorials.mapVersion.map.latestVersion,\" +\n-            \"tutorials.mapVersion.map.author\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n-    return getPageWithTotalPages(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n-        INCLUDE, MAP_VERSION_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"map.author.id\").eq(String.valueOf(playerId)))\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n-    return patch(format(\"/data/mapVersion/%s\", id), mapVersion);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.CLAN, sync = true)\n-  public Mono<Clan> getClanByTag(String tag) {\n-    return getMany(Clan.class, \"/data/clan\", 1, java.util.Map.of(\n-        INCLUDE, CLAN_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"tag\").eq(tag))\n-    ))\n-        .cast(Clan.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n-    MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n-    if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n-    }\n-    parameterMap.add(INCLUDE, MAP_INCLUDES);\n-    parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, parameterMap);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.COOP_MAPS, sync = true)\n-  public Flux<CoopMission> getCoopMissions() {\n-    return getAll(CoopMission.class, \"/data/coopMission\");\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.COOP_LEADERBOARD, sync = true)\n-  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n-    Condition<?> filterCondition = qBuilder().string(\"mission\").eq(missionId);\n-\n-    if (numberOfPlayers > 0) {\n-      filterCondition = filterCondition.and().intNum(\"playerCount\").eq(numberOfPlayers);\n-    }\n-\n-    return getMany(CoopResult.class, \"/data/coopResult\", 1000, java.util.Map.of(\n-        FILTER, rsql(filterCondition),\n-        INCLUDE, COOP_RESULT_INCLUDES,\n-        SORT, \"duration\"\n-    ));\n-  }\n-\n-  @Override\n-  @SneakyThrows\n-  public Flux<Tournament> getAllTournaments() {\n-    authorizedLatch.await();\n-    return getAllNoPaging(Tournament.class, TOURNAMENT_LIST_ENDPOINT, java.util.Map.of());\n-  }\n-\n-  @Override\n-  public Flux<ModerationReport> getPlayerModerationReports(int playerId) {\n-    return getAllNoPaging(ModerationReport.class, REPORT_ENDPOINT, java.util.Map.of(\n-        INCLUDE, REPORT_INCLUDES,\n-        FILTER, rsql(qBuilder().intNum(\"reporter.id\").eq(playerId))))\n-        .cast(ModerationReport.class);\n-  }\n-\n-  @Override\n-  public Mono<ModerationReport> postModerationReport(com.faforever.client.reporting.ModerationReport report) {\n-    List<java.util.Map<String, String>> reportedUsers = new ArrayList<>();\n-    report.getReportedUsers().forEach(player -> reportedUsers.add(java.util.Map.of(\"type\", \"player\", \"id\", String.valueOf(player.getId()))));\n-    java.util.Map<String, Object> relationships = new HashMap<>(java.util.Map.of(\"reportedUsers\", java.util.Map.of(\"data\", reportedUsers)));\n-    if (report.getGameId() != null) {\n-      relationships.put(\"game\", java.util.Map.of(\"data\", java.util.Map.of(\"type\", \"game\", \"id\", report.getGameId())));\n-    }\n-    java.util.Map<String, Object> body = java.util.Map.of(\"data\", List.of(java.util.Map.of(\n-        \"type\", \"moderationReport\",\n-        \"attributes\", java.util.Map.of(\"gameIncidentTimecode\", report.getGameIncidentTimeCode(), \"reportDescription\", report.getReportDescription()),\n-        \"relationships\", relationships)));\n-    return post(REPORT_ENDPOINT, body, ModerationReport.class);\n-  }\n-\n-  @NotNull\n-  private MultiValueMap<String, Object> createFileMultipart(Path file, ByteCountListener listener) {\n-    MultiValueMap<String, Object> form = new LinkedMultiValueMap<>();\n-    form.add(\"file\", new CountingFileSystemResource(file, listener));\n-    return form;\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> postMultipartForm(String endpointPath, Object request) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.post().uri(endpointPath)\n-        .contentType(MediaType.MULTIPART_FORM_DATA)\n-        .bodyValue(request))\n-        .doOnSuccess(aVoid -> log.debug(\"Posted {} to {}\", request, endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<T> post(String endpointPath, Object request, Class<T> type) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(type, webClient.post().uri(endpointPath)\n-        .contentType(MediaType.parseMediaType(\"application/vnd.api+json;charset=utf-8\"))\n-        .bodyValue(request))\n-        .doOnNext(object -> log.debug(\"Posted {} to {} with type {}\", object, endpointPath, type));\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> patch(String endpointPath, Object request) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.patch().uri(endpointPath)\n-            .contentType(MediaType.parseMediaType(\"application/vnd.api+json;charset=utf-8\"))\n-            .bodyValue(request))\n-        .doOnSuccess(aVoid -> log.debug(\"Patched {} at {}\", request, endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> delete(String endpointPath) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.delete().uri(endpointPath))\n-        .doOnSuccess(aVoid -> log.debug(\"Deleted {}\", endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<T> getOne(Class<T> type, String endpointPath) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(type, webClient.get().uri(endpointPath))\n-        .cache()\n-        .doOnNext(object -> log.debug(\"Retrieved {} from {} with type {}\", object, endpointPath, type));\n-  }\n-\n-  @NotNull\n-  private <T> Mono<T> getOne(Class<T> type, String endpointPath, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(CollectionUtils.toMultiValueMap(multiValues))\n-        .build();\n-\n-    return getOne(type, uriComponents.toUriString());\n-  }\n-\n-  private <T> Flux<T> getAll(Class<T> type, String endpointPath) {\n-    return getAll(type, endpointPath, Collections.emptyMap());\n-  }\n-\n-  private <T> Flux<T> getAll(Class<T> type, String endpointPath, java.util.Map<String, Serializable> params) {\n-    return getMany(type, endpointPath, clientProperties.getApi().getMaxPageSize(), params);\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getMany(Class<T> type, String endpointPath, int count, java.util.Map<String, Serializable> params) {\n-    return getPage(type, endpointPath, count, 1, params);\n-  }\n-\n-  private <T> Flux<T> getPage(Class<T> type, String endpointPath, int pageSize, int page, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    return getPage(type, endpointPath, pageSize, page, CollectionUtils.toMultiValueMap(multiValues));\n-  }\n-\n-  private <T> Mono<Tuple2<List<T>, Integer>> getPageWithTotalPages(String endpointPath, int pageSize, int page, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    return getPageWithTotalPages(endpointPath, pageSize, page, CollectionUtils.toMultiValueMap(multiValues));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getAllNoPaging(Class<T> type, String endpointPath, java.util.Map<String, String> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(CollectionUtils.toMultiValueMap(multiValues))\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveFluxWithErrorHandling(type, webClient.get().uri(url))\n-        .cache()\n-        .doOnNext(list -> log.debug(\"Retrieved {} from {}\", list, url));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getPage(Class<T> type, String endpointPath, int pageSize, int page, MultiValueMap<String, String> params) {\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(params)\n-        .replaceQueryParam(\"page[size]\", pageSize)\n-        .replaceQueryParam(\"page[number]\", page)\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveFluxWithErrorHandling(type, webClient.get().uri(url))\n-        .cache()\n-        .doOnNext(list -> log.debug(\"Retrieved {} from {}\", list, url));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<Tuple2<List<T>, Integer>> getPageWithTotalPages(String endpointPath, int pageSize, int page, MultiValueMap<String, String> params) {\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(params)\n-        .replaceQueryParam(\"page[size]\", pageSize)\n-        .replaceQueryParam(\"page[number]\", page)\n-        .queryParam(\"page[totals]\")\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveMonoWithErrorHandling(JSONAPIDocument.class, webClient.get().uri(url))\n-        .map(jsonapiDocument -> (JSONAPIDocument<List<T>>) jsonapiDocument)\n-        .flatMap(document -> Mono.zip(\n-            Mono.fromCallable(document::get),\n-            Mono.fromCallable(document::getMeta)\n-                .map(meta -> ((java.util.Map<String, Integer>) meta.get(\"page\")).get(\"totalPages\"))))\n-        .switchIfEmpty(Mono.zip(Mono.just(List.of()), Mono.just(0)))\n-        .cache()\n-        .doOnNext(tuple -> log.debug(\"Retrieved {} from {}\", tuple.getT1(), url));\n-  }\n-\n-  private <T> Mono<T> retrieveMonoWithErrorHandling(Class<T> type, WebClient.RequestHeadersSpec<?> requestSpec) {\n-    return requestSpec.exchangeToMono(response -> {\n-      if (response.statusCode().is2xxSuccessful()) {\n-        return response.bodyToMono(type);\n-      } else if (response.statusCode().equals(HttpStatus.BAD_REQUEST)) {\n-        return response.bodyToMono(type).onErrorMap(ResourceParseException.class, exception -> new ApiException(exception.getErrors().getErrors()));\n-      } else if (response.statusCode().is4xxClientError()) {\n-        return response.createException().flatMap(Mono::error);\n-      } else if (response.statusCode().is5xxServerError()) {\n-        return response.createException().flatMap(Mono::error);\n-      } else {\n-        log.warn(\"Unknown status returned by api\");\n-        return response.createException().flatMap(Mono::error);\n-      }\n-    });\n-  }\n-\n-  private <T> Flux<T> retrieveFluxWithErrorHandling(Class<T> type, WebClient.RequestHeadersSpec<?> requestSpec) {\n-    return requestSpec.exchangeToFlux(response -> {\n-      if (response.statusCode().is2xxSuccessful()) {\n-        return response.bodyToFlux(type);\n-      } else if (response.statusCode().equals(HttpStatus.BAD_REQUEST)) {\n-        return response.bodyToFlux(type).onErrorMap(ResourceParseException.class, exception -> new ApiException(exception.getErrors().getErrors()));\n-      } else if (response.statusCode().is4xxClientError()) {\n-        return response.createException().flatMapMany(Mono::error);\n-      } else if (response.statusCode().is5xxServerError()) {\n-        return response.createException().flatMapMany(Mono::error);\n-      } else {\n-        log.warn(\"Unknown status returned by api\");\n-        return response.createException().flatMapMany(Mono::error);\n-      }\n-    });\n-  }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "1baf31a538e17b73834122b14ad1bed9e46c2b0f", "committedDate": "2021-01-04 17:28:42 -0500", "message": "Add missing slash (#2095)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "115d0985c8184318d89610d22d3bf10ceaa83b0a", "committedDate": "2021-01-07 21:04:29 -0500", "message": "Remove leaderboard snake case (#2110)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "bc045d14db06dcc4feae6c8f4587d886005111eb", "committedDate": "2021-02-13 18:20:40 -0500", "message": "Use scoretime for rating history and add loading pane (#2142)"}, {"oid": "6e0589ef00a29fa7ca43df0eb331f40aee234c72", "committedDate": "2021-02-21 09:50:45 -0500", "message": "Add ability to conduct moderator reports from the client (#2139)"}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "531d0f57d941849d3bacd616aff4931502026a54", "committedDate": "2021-05-03 10:04:23 -0400", "message": "add exact argument and use equality for toggle controller (#2230)"}, {"oid": "044426f35290dcb59a5244289b0a474e5aa005ba", "committedDate": "2021-05-09 11:49:33 -0400", "message": "Fix review version not being set (#2236)"}, {"oid": "b5e39f11830b2911091bcbc7612181338880779c", "committedDate": "2021-06-08 06:57:18 -0400", "message": "Use new recommended maps and mods attribute for top picks (#2260)"}, {"oid": "4c061711ca870443400f2d0f7076b6b9771be17b", "committedDate": "2021-06-19 23:50:41 -0400", "message": "Change get mods by uid to return optional"}, {"oid": "33163e5f1d7fb17cd0b0d74450c9f64384e434f7", "committedDate": "2021-07-02 21:58:03 -0400", "message": "Remove depreciated mapStatistics from api calls (#2292)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "73e38e91e5773a794e6c23a2e069289261925e4b", "committedDate": "2021-07-29 10:33:52 -0400", "message": "Log the url rather than components separately in api"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzA4Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536197083", "body": "just List.of()", "bodyText": "just List.of()", "bodyHTML": "<p dir=\"auto\">just List.of()</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:51:58Z", "path": "src/main/java/com/faforever/client/api/MockFafApiAccessor.java", "diffHunk": "@@ -284,8 +285,13 @@ public void deleteModVersionReview(String id) {\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    return new Tuple(Collections.emptyList(), Collections.emptyMap());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return Collections.emptyList();", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\nindex 82d05bb8..2d9acc4d 100644\n--- a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n+++ b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n", "chunk": "@@ -281,12 +281,12 @@ public class MockFafApiAccessor implements FafApiAccessor {\n \n   @Override\n   public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig query, int maxResults, int page) {\n-    return new Tuple(Collections.emptyList(), Collections.emptyMap());\n+    return new Tuple(List.of(), Collections.emptyMap());\n   }\n \n   @Override\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return Collections.emptyList();\n+    return List.of();\n   }\n \n   @Override\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\nindex 2d9acc4d..82d05bb8 100644\n--- a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n+++ b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n", "chunk": "@@ -281,12 +281,12 @@ public class MockFafApiAccessor implements FafApiAccessor {\n \n   @Override\n   public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig query, int maxResults, int page) {\n-    return new Tuple(List.of(), Collections.emptyMap());\n+    return new Tuple(Collections.emptyList(), Collections.emptyMap());\n   }\n \n   @Override\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return List.of();\n+    return Collections.emptyList();\n   }\n \n   @Override\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\nindex 82d05bb8..2d9acc4d 100644\n--- a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n+++ b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n", "chunk": "@@ -281,12 +281,12 @@ public class MockFafApiAccessor implements FafApiAccessor {\n \n   @Override\n   public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig query, int maxResults, int page) {\n-    return new Tuple(Collections.emptyList(), Collections.emptyMap());\n+    return new Tuple(List.of(), Collections.emptyMap());\n   }\n \n   @Override\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return Collections.emptyList();\n+    return List.of();\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\nindex 82d05bb8..68b03367 100644\n--- a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n+++ b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n", "chunk": "@@ -281,12 +281,12 @@ public class MockFafApiAccessor implements FafApiAccessor {\n \n   @Override\n   public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig query, int maxResults, int page) {\n-    return new Tuple(Collections.emptyList(), Collections.emptyMap());\n+    return new Tuple(List.of(), Collections.emptyMap());\n   }\n \n   @Override\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return Collections.emptyList();\n+    return List.of();\n   }\n \n   @Override\n", "next_change": {"commit": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\nindex 68b03367..a55e5961 100644\n--- a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n+++ b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n", "chunk": "@@ -281,11 +298,11 @@ public class MockFafApiAccessor implements FafApiAccessor {\n \n   @Override\n   public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig query, int maxResults, int page) {\n-    return new Tuple(List.of(), Collections.emptyMap());\n+    return new Tuple<>(List.of(), Collections.emptyMap());\n   }\n \n   @Override\n-  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+  public List<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n     return List.of();\n   }\n \n", "next_change": {"commit": "b5e39f11830b2911091bcbc7612181338880779c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\nindex a55e5961..e56c11c9 100644\n--- a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n+++ b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n", "chunk": "@@ -301,6 +293,12 @@ public class MockFafApiAccessor implements FafApiAccessor {\n     return new Tuple<>(List.of(), Collections.emptyMap());\n   }\n \n+  @Override\n+  public Tuple<List<Mod>, java.util.Map<String, ?>> getRecommendedModsWithMeta(int count, int page) {\n+    return new Tuple<>(List.of(), Collections.emptyMap());\n+  }\n+\n+\n   @Override\n   public List<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n     return List.of();\n", "next_change": {"commit": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\nindex e56c11c9..968f4e45 100644\n--- a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n+++ b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n", "chunk": "@@ -36,315 +34,297 @@ import com.faforever.commons.io.ByteCountListener;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.util.function.Tuple2;\n \n import java.nio.file.Path;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Optional;\n \n @Lazy\n @Component\n @Profile(FafClientApplication.PROFILE_OFFLINE)\n-// NOSONAR\n public class MockFafApiAccessor implements FafApiAccessor {\n \n   @Override\n-  public List<PlayerAchievement> getPlayerAchievements(int playerId) {\n-    return List.of();\n+  public Flux<PlayerAchievement> getPlayerAchievements(int playerId) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public List<PlayerEvent> getPlayerEvents(int playerId) {\n-    return null;\n+  public Flux<PlayerEvent> getPlayerEvents(int playerId) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public List<AchievementDefinition> getAchievementDefinitions() {\n-    return List.of();\n+  public Flux<AchievementDefinition> getAchievementDefinitions() {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public AchievementDefinition getAchievementDefinition(String achievementId) {\n+  public Mono<AchievementDefinition> getAchievementDefinition(String achievementId) {\n     AchievementDefinition achievementDefinition = new AchievementDefinition();\n     achievementDefinition.setName(\"Mock achievement\");\n     achievementDefinition.setDescription(\"Congratulations! You read this text.\");\n     achievementDefinition.setType(AchievementType.STANDARD);\n-    return achievementDefinition;\n+    return Mono.just(achievementDefinition);\n   }\n \n   @Override\n-  public void authorize(int playerId, String username, String password) {\n-\n+  public void authorize() {\n+    //do nothing\n   }\n \n   @Override\n-  public List<Mod> getMods() {\n-    Player uploader = new Player();\n-    return List.of();\n+  public Flux<Mod> getMods() {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public List<Leaderboard> getLeaderboards() {\n-    return List.of();\n+  public Flux<Leaderboard> getLeaderboards() {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public List<LeaderboardEntry> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n-    return Collections.emptyList();\n+  public Flux<LeaderboardEntry> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public Tuple<List<LeaderboardEntry>, java.util.Map<String, ?>> getLeaderboardEntriesWithMeta(String leaderboardTechnicalName, int count, int page) {\n-    return new Tuple<>(Collections.emptyList(), Collections.emptyMap());\n+  public Mono<Tuple2<List<LeaderboardEntry>, Integer>> getLeaderboardEntriesWithTotalPages(String leaderboardTechnicalName, int count, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public List<LeaderboardEntry> getLeaderboardEntriesForPlayer(int playerId) {\n-    return Collections.emptyList();\n-  }\n-\n-  private ModVersion mod() {\n-    return new ModVersion();\n-  }\n-\n-  private ModReviewsSummary modReviewsSummary() {\n-    return new ModReviewsSummary();\n+  public Flux<LeaderboardEntry> getLeaderboardEntriesForPlayer(int playerId) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public List<com.faforever.commons.api.dto.FeaturedMod> getFeaturedMods() {\n+  public Flux<com.faforever.commons.api.dto.FeaturedMod> getFeaturedMods() {\n     com.faforever.commons.api.dto.FeaturedMod featuredMod = new com.faforever.commons.api.dto.FeaturedMod();\n     featuredMod.setDisplayName(\"Forged Alliance Forever\");\n     featuredMod.setTechnicalName(\"faf\");\n     featuredMod.setVisible(true);\n     featuredMod.setDescription(\"Description\");\n \n-    return Collections.singletonList(featuredMod);\n+    return Flux.just(featuredMod);\n   }\n \n   @Override\n-  public List<LeaderboardRatingJournal> getRatingJournal(int playerId, int leaderboardId) {\n-    return List.of();\n+  public Flux<LeaderboardRatingJournal> getRatingJournal(int playerId, int leaderboardId) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> getMapsByIdWithMeta(List<Integer> mapIdList, int count, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Map>, Integer>> getMapsByIdWithTotalPages(List<Integer> mapIdList, int count, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> getRecommendedMapsWithMeta(int count, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Map>, Integer>> getRecommendedMapsWithTotalPages(int count, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> getMostPlayedMapsWithMeta(int count, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Map>, Integer>> getMostPlayedMapsWithTotalPages(int count, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> getHighestRatedMapsWithMeta(int count, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Map>, Integer>> getHighestRatedMapsWithTotalPages(int count, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> getNewestMapsWithMeta(int count, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Map>, Integer>> getNewestMapsWithTotalPages(int count, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public List<Game> getLastGamesOnMap(int playerId, String mapVersionId, int count) {\n-    return List.of();\n+  public Flux<Game> getLastGamesOnMap(int playerId, String mapVersionId, int count) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public void uploadMod(Path file, ByteCountListener listener) {\n-    // do nothing\n+  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n-    // do nothing\n+  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public List<CoopMission> getCoopMissions() {\n-    return List.of();\n+  public Flux<CoopMission> getCoopMissions() {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public ModVersion getModVersion(String uid) {\n-    return null;\n-  }\n-\n-  @Override\n-  public List<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    return List.of();\n+  public Mono<ModVersion> getModVersion(String uid) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getNewestReplaysWithMeta(int count, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getHighestRatedReplaysWithMeta(int count, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> findReplaysByQueryWithMeta(String query, int maxResults, int page, SortConfig sortConfig) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Optional<MapVersion> findMapByFolderName(String folderName) {\n-    return Optional.empty();\n+  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Optional<MapVersion> getMapLatestVersion(String mapFolderName) {\n-    return Optional.empty();\n+  public Mono<MapVersion> findMapByFolderName(String folderName) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public List<Player> getPlayersByIds(Collection<Integer> playerIds) {\n-    return List.of();\n+  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Optional<Player> queryPlayerByName(String playerName) {\n-    return Optional.empty();\n+  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public GameReview createGameReview(GameReview review) {\n-    return null;\n+  public Mono<Player> queryPlayerByName(String playerName) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void updateGameReview(GameReview review) {\n-\n+  public Mono<GameReview> createGameReview(GameReview review) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public ModVersionReview createModVersionReview(ModVersionReview review) {\n-    return null;\n+  public Mono<Void> updateGameReview(GameReview review) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void updateModVersionReview(ModVersionReview review) {\n-\n+  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public MapVersionReview createMapVersionReview(MapVersionReview review) {\n-    return null;\n+  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void updateMapVersionReview(MapVersionReview review) {\n-\n+  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void deleteGameReview(String id) {\n-\n+  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public List<TutorialCategory> getTutorialCategories() {\n-    return List.of();\n+  public Mono<Void> deleteGameReview(String id) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Optional<Clan> getClanByTag(String tag) {\n-    return Optional.empty();\n+  public Flux<TutorialCategory> getTutorialCategories() {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> findMapsByQueryWithMeta(SearchConfig searchConfig, int page, int count) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Clan> getClanByTag(String tag) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Optional<MapVersion> findMapVersionById(String id) {\n-    return Optional.empty();\n+  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int page, int count) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void deleteMapVersionReview(String id) {\n-\n+  public Mono<Void> deleteMapVersionReview(String id) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void deleteModVersionReview(String id) {\n-\n+  public Mono<Void> deleteModVersionReview(String id) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Optional<Game> findReplayById(int id) {\n-    return Optional.empty();\n+  public Mono<Game> findReplayById(int id) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig query, int maxResults, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig query, int maxResults, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public Tuple<List<Mod>, java.util.Map<String, ?>> getRecommendedModsWithMeta(int count, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n+    return Mono.empty();\n   }\n \n \n   @Override\n-  public List<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n-    return List.of();\n+  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    return Optional.empty();\n+  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public List<Tournament> getAllTournaments() {\n-    return List.of();\n+  public Flux<Tournament> getAllTournaments() {\n+    return Flux.empty();\n   }\n \n   @Override\n-  public List<ModerationReport> getPlayerModerationReports(int playerId) {\n+  public Flux<ModerationReport> getPlayerModerationReports(int playerId) {\n     return null;\n   }\n \n   @Override\n-  public void postModerationReport(com.faforever.client.reporting.ModerationReport report) {\n-    // do nothing\n-  }\n-\n-  @Override\n-  public Tuple<List<MapVersion>, java.util.Map<String, ?>> getOwnedMapsWithMeta(int playerId, int loadMoreCount, int page) {\n-    return new Tuple<>(List.of(), Collections.emptyMap());\n+  public Mono<ModerationReport> postModerationReport(com.faforever.client.reporting.ModerationReport report) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void updateMapVersion(String id, MapVersion mapVersion) {\n+  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public MeResult getOwnPlayer() {\n-    return null;\n+  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public void changePassword(String username, String currentPasswordHash, String newPasswordHash) {\n-\n+  public Mono<MeResult> getMe() {\n+    return Mono.empty();\n   }\n \n   @Override\n-  public List<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n-    return List.of();\n+  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n+    return Flux.empty();\n   }\n }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java b/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\ndeleted file mode 100644\nindex 968f4e45..00000000\n--- a/src/main/java/com/faforever/client/api/MockFafApiAccessor.java\n+++ /dev/null\n", "chunk": "@@ -1,330 +0,0 @@\n-package com.faforever.client.api;\n-\n-import com.faforever.client.FafClientApplication;\n-import com.faforever.client.mod.FeaturedMod;\n-import com.faforever.client.vault.search.SearchController.SearchConfig;\n-import com.faforever.client.vault.search.SearchController.SortConfig;\n-import com.faforever.commons.api.dto.AchievementDefinition;\n-import com.faforever.commons.api.dto.AchievementType;\n-import com.faforever.commons.api.dto.Clan;\n-import com.faforever.commons.api.dto.CoopMission;\n-import com.faforever.commons.api.dto.CoopResult;\n-import com.faforever.commons.api.dto.FeaturedModFile;\n-import com.faforever.commons.api.dto.Game;\n-import com.faforever.commons.api.dto.GameReview;\n-import com.faforever.commons.api.dto.Leaderboard;\n-import com.faforever.commons.api.dto.LeaderboardEntry;\n-import com.faforever.commons.api.dto.LeaderboardRatingJournal;\n-import com.faforever.commons.api.dto.Map;\n-import com.faforever.commons.api.dto.MapPoolAssignment;\n-import com.faforever.commons.api.dto.MapVersion;\n-import com.faforever.commons.api.dto.MapVersionReview;\n-import com.faforever.commons.api.dto.MatchmakerQueue;\n-import com.faforever.commons.api.dto.MeResult;\n-import com.faforever.commons.api.dto.Mod;\n-import com.faforever.commons.api.dto.ModVersion;\n-import com.faforever.commons.api.dto.ModVersionReview;\n-import com.faforever.commons.api.dto.ModerationReport;\n-import com.faforever.commons.api.dto.Player;\n-import com.faforever.commons.api.dto.PlayerAchievement;\n-import com.faforever.commons.api.dto.PlayerEvent;\n-import com.faforever.commons.api.dto.Tournament;\n-import com.faforever.commons.api.dto.TutorialCategory;\n-import com.faforever.commons.io.ByteCountListener;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.context.annotation.Profile;\n-import org.springframework.stereotype.Component;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import reactor.util.function.Tuple2;\n-\n-import java.nio.file.Path;\n-import java.util.Collection;\n-import java.util.List;\n-\n-@Lazy\n-@Component\n-@Profile(FafClientApplication.PROFILE_OFFLINE)\n-public class MockFafApiAccessor implements FafApiAccessor {\n-\n-  @Override\n-  public Flux<PlayerAchievement> getPlayerAchievements(int playerId) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Flux<PlayerEvent> getPlayerEvents(int playerId) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Flux<AchievementDefinition> getAchievementDefinitions() {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<AchievementDefinition> getAchievementDefinition(String achievementId) {\n-    AchievementDefinition achievementDefinition = new AchievementDefinition();\n-    achievementDefinition.setName(\"Mock achievement\");\n-    achievementDefinition.setDescription(\"Congratulations! You read this text.\");\n-    achievementDefinition.setType(AchievementType.STANDARD);\n-    return Mono.just(achievementDefinition);\n-  }\n-\n-  @Override\n-  public void authorize() {\n-    //do nothing\n-  }\n-\n-  @Override\n-  public Flux<Mod> getMods() {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Flux<Leaderboard> getLeaderboards() {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Flux<LeaderboardEntry> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<LeaderboardEntry>, Integer>> getLeaderboardEntriesWithTotalPages(String leaderboardTechnicalName, int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Flux<LeaderboardEntry> getLeaderboardEntriesForPlayer(int playerId) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Flux<com.faforever.commons.api.dto.FeaturedMod> getFeaturedMods() {\n-    com.faforever.commons.api.dto.FeaturedMod featuredMod = new com.faforever.commons.api.dto.FeaturedMod();\n-    featuredMod.setDisplayName(\"Forged Alliance Forever\");\n-    featuredMod.setTechnicalName(\"faf\");\n-    featuredMod.setVisible(true);\n-    featuredMod.setDescription(\"Description\");\n-\n-    return Flux.just(featuredMod);\n-  }\n-\n-  @Override\n-  public Flux<LeaderboardRatingJournal> getRatingJournal(int playerId, int leaderboardId) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getMapsByIdWithTotalPages(List<Integer> mapIdList, int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getRecommendedMapsWithTotalPages(int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getMostPlayedMapsWithTotalPages(int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getHighestRatedMapsWithTotalPages(int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getNewestMapsWithTotalPages(int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Flux<Game> getLastGamesOnMap(int playerId, String mapVersionId, int count) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Flux<CoopMission> getCoopMissions() {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<ModVersion> getModVersion(String uid) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> findMapByFolderName(String folderName) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<Player> queryPlayerByName(String playerName) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<GameReview> createGameReview(GameReview review) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> updateGameReview(GameReview review) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteGameReview(String id) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Flux<TutorialCategory> getTutorialCategories() {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<Clan> getClanByTag(String tag) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int page, int count) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteMapVersionReview(String id) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteModVersionReview(String id) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Game> findReplayById(int id) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig query, int maxResults, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n-    return Mono.empty();\n-  }\n-\n-\n-  @Override\n-  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Flux<Tournament> getAllTournaments() {\n-    return Flux.empty();\n-  }\n-\n-  @Override\n-  public Flux<ModerationReport> getPlayerModerationReports(int playerId) {\n-    return null;\n-  }\n-\n-  @Override\n-  public Mono<ModerationReport> postModerationReport(com.faforever.client.reporting.ModerationReport report) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Mono<MeResult> getMe() {\n-    return Mono.empty();\n-  }\n-\n-  @Override\n-  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n-    return Flux.empty();\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "bc045d14db06dcc4feae6c8f4587d886005111eb", "committedDate": "2021-02-13 18:20:40 -0500", "message": "Use scoretime for rating history and add loading pane (#2142)"}, {"oid": "6e0589ef00a29fa7ca43df0eb331f40aee234c72", "committedDate": "2021-02-21 09:50:45 -0500", "message": "Add ability to conduct moderator reports from the client (#2139)"}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "b5e39f11830b2911091bcbc7612181338880779c", "committedDate": "2021-06-08 06:57:18 -0400", "message": "Use new recommended maps and mods attribute for top picks (#2260)"}, {"oid": "4c061711ca870443400f2d0f7076b6b9771be17b", "committedDate": "2021-06-19 23:50:41 -0400", "message": "Change get mods by uid to return optional"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5Nzc5MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536197791", "body": "Why not `@Data` or `@Value`?", "bodyText": "Why not @Data or @Value?", "bodyHTML": "<p dir=\"auto\">Why not <code>@Data</code> or <code>@Value</code>?</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:52:54Z", "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4NjUyOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536386528", "bodyText": "I think I copied that from another dto class. No real reason to not use @Data", "author": "BlackYps", "createdAt": "2020-12-04T21:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5Nzc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 55a7d196..da8135cf 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -2,15 +2,10 @@ package com.faforever.client.api.dto;\n \n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n-\n+import lombok.Data;\n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"leaderboard\")\n public class Leaderboard {\n   @Id\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex da8135cf..55a7d196 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -2,10 +2,15 @@ package com.faforever.client.api.dto;\n \n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n import java.time.OffsetDateTime;\n \n-@Data\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")\n @Type(\"leaderboard\")\n public class Leaderboard {\n   @Id\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 55a7d196..da8135cf 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -2,15 +2,10 @@ package com.faforever.client.api.dto;\n \n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n-\n+import lombok.Data;\n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"leaderboard\")\n public class Leaderboard {\n   @Id\n", "next_change": {"commit": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex da8135cf..40aaa5bb 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -3,6 +3,7 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Type;\n import lombok.Data;\n+\n import java.time.OffsetDateTime;\n \n @Data\n", "next_change": {"commit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 40aaa5bb..3fed5bbe 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -1,5 +1,6 @@\n package com.faforever.client.api.dto;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Type;\n import lombok.Data;\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex da8135cf..40aaa5bb 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -12,7 +13,7 @@ public class Leaderboard {\n   private String id;\n   private OffsetDateTime createTime;\n   private OffsetDateTime updateTime;\n-  private String description_key;\n-  private String name_key;\n-  private String technical_name;\n+  private String descriptionKey;\n+  private String nameKey;\n+  private String technicalName;\n }\n\\ No newline at end of file\n", "next_change": {"commit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 40aaa5bb..3fed5bbe 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -13,7 +14,11 @@ public class Leaderboard {\n   private String id;\n   private OffsetDateTime createTime;\n   private OffsetDateTime updateTime;\n+  //TODO: Remove JsonProperty if api gets rid of snake_case\n+  @JsonProperty(\"description_key\")\n   private String descriptionKey;\n+  @JsonProperty(\"name_key\")\n   private String nameKey;\n+  @JsonProperty(\"technical_name\")\n   private String technicalName;\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 55a7d196..3fed5bbe 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -1,23 +1,24 @@\n package com.faforever.client.api.dto;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"leaderboard\")\n public class Leaderboard {\n   @Id\n   private String id;\n   private OffsetDateTime createTime;\n   private OffsetDateTime updateTime;\n-  private String description_key;\n-  private String name_key;\n-  private String technical_name;\n+  //TODO: Remove JsonProperty if api gets rid of snake_case\n+  @JsonProperty(\"description_key\")\n+  private String descriptionKey;\n+  @JsonProperty(\"name_key\")\n+  private String nameKey;\n+  @JsonProperty(\"technical_name\")\n+  private String technicalName;\n }\n\\ No newline at end of file\n", "next_change": {"commit": "92556052df1aa942558bc57b7d59fe45ad9511ad", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 3fed5bbe..40aaa5bb 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -14,11 +13,7 @@ public class Leaderboard {\n   private String id;\n   private OffsetDateTime createTime;\n   private OffsetDateTime updateTime;\n-  //TODO: Remove JsonProperty if api gets rid of snake_case\n-  @JsonProperty(\"description_key\")\n   private String descriptionKey;\n-  @JsonProperty(\"name_key\")\n   private String nameKey;\n-  @JsonProperty(\"technical_name\")\n   private String technicalName;\n }\n\\ No newline at end of file\n", "next_change": {"commit": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 40aaa5bb..d98a1946 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -16,4 +20,4 @@ public class Leaderboard {\n   private String descriptionKey;\n   private String nameKey;\n   private String technicalName;\n-}\n\\ No newline at end of file\n+}\n", "next_change": {"commit": "49f764d249aa8437651bba64e19df5ea336c4873", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\ndeleted file mode 100644\nindex d98a1946..00000000\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ /dev/null\n", "chunk": "@@ -1,23 +0,0 @@\n-package com.faforever.client.api.dto;\n-\n-import com.github.jasminb.jsonapi.annotations.Id;\n-import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n-\n-import java.time.OffsetDateTime;\n-\n-@Data\n-@Type(\"leaderboard\")\n-@AllArgsConstructor\n-@NoArgsConstructor\n-public class Leaderboard {\n-  @Id\n-  private String id;\n-  private OffsetDateTime createTime;\n-  private OffsetDateTime updateTime;\n-  private String descriptionKey;\n-  private String nameKey;\n-  private String technicalName;\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "92556052df1aa942558bc57b7d59fe45ad9511ad", "committedDate": "2021-01-01 21:32:47 -0500", "message": "Remove snake_case property (#2084)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5ODE2NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536198165", "body": "Why not @Data or @Value?", "bodyText": "Why not @DaTa or @value?", "bodyHTML": "<p dir=\"auto\">Why not <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DaTa/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DaTa\">@DaTa</a> or <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/value/hovercard\" href=\"https://github.com/value\">@value</a>?</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:53:27Z", "path": "src/main/java/com/faforever/client/api/dto/MapPool.java", "diffHunk": "@@ -7,13 +7,19 @@\n import lombok.Getter;\n import lombok.Setter;\n \n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n @Getter\n @Setter\n @EqualsAndHashCode(of = \"id\")", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MapPool.java b/src/main/java/com/faforever/client/api/dto/MapPool.java\nindex ebe46b96..6ad33e2a 100644\n--- a/src/main/java/com/faforever/client/api/dto/MapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MapPool.java\n", "chunk": "@@ -3,16 +3,12 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n import java.util.List;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"mapPool\")\n public class MapPool {\n   @Id\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MapPool.java b/src/main/java/com/faforever/client/api/dto/MapPool.java\nindex 6ad33e2a..ebe46b96 100644\n--- a/src/main/java/com/faforever/client/api/dto/MapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MapPool.java\n", "chunk": "@@ -3,12 +3,16 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.time.OffsetDateTime;\n import java.util.List;\n \n-@Data\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")\n @Type(\"mapPool\")\n public class MapPool {\n   @Id\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MapPool.java b/src/main/java/com/faforever/client/api/dto/MapPool.java\nindex ebe46b96..6ad33e2a 100644\n--- a/src/main/java/com/faforever/client/api/dto/MapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MapPool.java\n", "chunk": "@@ -3,16 +3,12 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n import java.util.List;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"mapPool\")\n public class MapPool {\n   @Id\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MapPool.java b/src/main/java/com/faforever/client/api/dto/MapPool.java\nindex ebe46b96..6ad33e2a 100644\n--- a/src/main/java/com/faforever/client/api/dto/MapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MapPool.java\n", "chunk": "@@ -3,16 +3,12 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n import java.util.List;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"mapPool\")\n public class MapPool {\n   @Id\n", "next_change": {"commit": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MapPool.java b/src/main/java/com/faforever/client/api/dto/MapPool.java\nindex 6ad33e2a..15323d3e 100644\n--- a/src/main/java/com/faforever/client/api/dto/MapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MapPool.java\n", "chunk": "@@ -1,21 +1,24 @@\n package com.faforever.client.api.dto;\n \n-import com.github.jasminb.jsonapi.annotations.Id;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n \n-import java.time.OffsetDateTime;\n import java.util.List;\n \n-@Data\n+@Getter\n+@Setter\n+@EqualsAndHashCode(callSuper = true)\n @Type(\"mapPool\")\n-public class MapPool {\n-  @Id\n-  private String id;\n-  private OffsetDateTime createTime;\n-  private OffsetDateTime updateTime;\n+public class MapPool extends AbstractEntity {\n+\n   private String name;\n-  @Relationship(\"mapVersions\")\n-  private List<MapVersion> mapVersions;\n+  @Relationship(\"matchmakerQueueMapPool\")\n+  @JsonIgnore\n+  private MatchmakerQueueMapPool matchmakerQueueMapPool;\n+  @Relationship(\"mapPoolAssignments\")\n+  private List<MapPoolAssignment> mapPoolAssignments;\n }\n\\ No newline at end of file\n", "next_change": {"commit": "49f764d249aa8437651bba64e19df5ea336c4873", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MapPool.java b/src/main/java/com/faforever/client/api/dto/MapPool.java\ndeleted file mode 100644\nindex 15323d3e..00000000\n--- a/src/main/java/com/faforever/client/api/dto/MapPool.java\n+++ /dev/null\n", "chunk": "@@ -1,24 +0,0 @@\n-package com.faforever.client.api.dto;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.github.jasminb.jsonapi.annotations.Relationship;\n-import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n-\n-import java.util.List;\n-\n-@Getter\n-@Setter\n-@EqualsAndHashCode(callSuper = true)\n-@Type(\"mapPool\")\n-public class MapPool extends AbstractEntity {\n-\n-  private String name;\n-  @Relationship(\"matchmakerQueueMapPool\")\n-  @JsonIgnore\n-  private MatchmakerQueueMapPool matchmakerQueueMapPool;\n-  @Relationship(\"mapPoolAssignments\")\n-  private List<MapPoolAssignment> mapPoolAssignments;\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMTA4OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536201089", "body": ".endsWith(\"'sParty\") has an implicit semantical meaning and therefore should be put into a dedicated method.\r\n\r\nI'd guess something like `boolean isOwnPartiesChannel(String name)`\r\nBut just comparing the end of the name sounds really... odd?", "bodyText": ".endsWith(\"'sParty\") has an implicit semantical meaning and therefore should be put into a dedicated method.\nI'd guess something like boolean isOwnPartiesChannel(String name)\nBut just comparing the end of the name sounds really... odd?", "bodyHTML": "<p dir=\"auto\">.endsWith(\"'sParty\") has an implicit semantical meaning and therefore should be put into a dedicated method.</p>\n<p dir=\"auto\">I'd guess something like <code>boolean isOwnPartiesChannel(String name)</code><br>\nBut just comparing the end of the name sounds really... odd?</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:57:25Z", "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -178,6 +178,8 @@ private void onConnectionStateChange(ConnectionState newValue) {\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n+      if (message.getSource() != null && message.getSource().endsWith(\"'sParty\"))\n+        return;", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 1b778c59..467fd977 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -178,7 +178,7 @@ public class ChatController extends AbstractViewController<Node> {\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n-      if (message.getSource() != null && message.getSource().endsWith(\"'sParty\"))\n+      if (isMatchmakerPartyMessage(message))\n         return;\n       if (!message.isPrivate()) {\n         getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 467fd977..1b778c59 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -178,7 +178,7 @@ public class ChatController extends AbstractViewController<Node> {\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n-      if (isMatchmakerPartyMessage(message))\n+      if (message.getSource() != null && message.getSource().endsWith(\"'sParty\"))\n         return;\n       if (!message.isPrivate()) {\n         getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n", "next_change": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 1b778c59..467fd977 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -178,7 +178,7 @@ public class ChatController extends AbstractViewController<Node> {\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n-      if (message.getSource() != null && message.getSource().endsWith(\"'sParty\"))\n+      if (isMatchmakerPartyMessage(message))\n         return;\n       if (!message.isPrivate()) {\n         getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 1b778c59..02483b88 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -178,7 +181,7 @@ public class ChatController extends AbstractViewController<Node> {\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n-      if (message.getSource() != null && message.getSource().endsWith(\"'sParty\"))\n+      if (isMatchmakerPartyMessage(message))\n         return;\n       if (!message.isPrivate()) {\n         getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n", "next_change": {"commit": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 02483b88..9ea039e1 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -179,10 +179,11 @@ public class ChatController extends AbstractViewController<Node> {\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n+    ChatMessage message = event.getMessage();\n+    if (isMatchmakerPartyMessage(message)) {\n+      return;\n+    }\n     Platform.runLater(() -> {\n-      ChatMessage message = event.getMessage();\n-      if (isMatchmakerPartyMessage(message))\n-        return;\n       if (!message.isPrivate()) {\n         getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n       } else {\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 9ea039e1..910fa857 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -183,7 +182,7 @@ public class ChatController extends AbstractViewController<Node> {\n     if (isMatchmakerPartyMessage(message)) {\n       return;\n     }\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       if (!message.isPrivate()) {\n         getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n       } else {\n", "next_change": {"commit": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 910fa857..ccfbaaa5 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -162,23 +156,16 @@ public class ChatController extends AbstractViewController<Node> {\n \n   private void onConnectionStateChange(ConnectionState newValue) {\n     switch (newValue) {\n-      case DISCONNECTED:\n-        onDisconnected();\n-        break;\n-      case CONNECTED:\n-        onConnected();\n-        break;\n-      case CONNECTING:\n-        onConnecting();\n-        break;\n-      default:\n-        throw new ProgrammingError(\"Uncovered connection state: \" + newValue);\n+      case DISCONNECTED -> onDisconnected();\n+      case CONNECTED -> onConnected();\n+      case CONNECTING -> onConnecting();\n+      default -> throw new ProgrammingError(\"Uncovered connection state: \" + newValue);\n     }\n   }\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n-    ChatMessage message = event.getMessage();\n+    ChatMessage message = event.message();\n     if (isMatchmakerPartyMessage(message)) {\n       return;\n     }\n", "next_change": {"commit": "ac8669087b7b29ade57a46217f70a569716d17fe", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex ccfbaaa5..b12c71ad 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -171,15 +171,15 @@ public class ChatController extends AbstractViewController<AnchorPane> {\n     }\n     JavaFxUtil.runLater(() -> {\n       if (!message.isPrivate()) {\n-        getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n+        getOrCreateChannelTab(message.source()).onChatMessage(message);\n       } else {\n-        addAndGetPrivateMessageTab(message.getSource()).onChatMessage(message);\n+        addAndGetPrivateMessageTab(message.source()).onChatMessage(message);\n       }\n     });\n   }\n \n   private boolean isMatchmakerPartyMessage(ChatMessage message) {\n-    return message.getSource() != null && isMatchmakerPartyMessage(message.getSource());\n+    return message.source() != null && isMatchmakerPartyMessage(message.source());\n   }\n \n   private boolean isMatchmakerPartyMessage(String channelName) {\n", "next_change": {"commit": "b86f5c8e62200ff540330a38577f87f3aa678f42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex b12c71ad..ce7ce27a 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -163,120 +159,26 @@ public class ChatController extends AbstractViewController<AnchorPane> {\n     }\n   }\n \n-  @Subscribe\n-  public void onChatMessage(ChatMessageEvent event) {\n-    ChatMessage message = event.message();\n-    if (isMatchmakerPartyMessage(message)) {\n-      return;\n-    }\n-    JavaFxUtil.runLater(() -> {\n-      if (!message.isPrivate()) {\n-        getOrCreateChannelTab(message.source()).onChatMessage(message);\n-      } else {\n-        addAndGetPrivateMessageTab(message.source()).onChatMessage(message);\n-      }\n-    });\n-  }\n-\n-  private boolean isMatchmakerPartyMessage(ChatMessage message) {\n-    return message.source() != null && isMatchmakerPartyMessage(message.source());\n-  }\n-\n-  private boolean isMatchmakerPartyMessage(String channelName) {\n-    return channelName.endsWith(PARTY_CHANNEL_SUFFIX);\n-  }\n-\n-  private AbstractChatTabController addAndGetPrivateMessageTab(String username) {\n-    JavaFxUtil.assertApplicationThread();\n-    if (!nameToChatTabController.containsKey(username)) {\n-      PrivateChatTabController tab = uiService.loadFxml(\"theme/chat/private_chat_tab.fxml\");\n-      tab.setReceiver(username);\n-      addTab(username, tab);\n-    }\n-\n-    return nameToChatTabController.get(username);\n-  }\n-\n   public AnchorPane getRoot() {\n     return chatRoot;\n   }\n \n-  @Subscribe\n-  public void onInitiatePrivateChatEvent(InitiatePrivateChatEvent event) {\n-    JavaFxUtil.runLater(() -> openPrivateMessageTabForUser(event.username()));\n-  }\n-\n-  private void openPrivateMessageTabForUser(String username) {\n-    JavaFxUtil.assertApplicationThread();\n-    if (username.equalsIgnoreCase(userService.getUsername())) {\n-      return;\n-    }\n-    AbstractChatTabController controller = addAndGetPrivateMessageTab(username);\n-    Tab tab = controller.getRoot();\n-    eventBus.post(new NavigateEvent(NavigationItem.CHAT));\n-    tabPane.getSelectionModel().select(tab);\n-    nameToChatTabController.get(tab.getId()).onDisplay();\n-  }\n-\n   public void onJoinChannelButtonClicked() {\n     String channelName = channelNameTextField.getText();\n-    channelNameTextField.clear();\n     if (!channelName.startsWith(\"#\")) {\n       channelName = \"#\" + channelName;\n     }\n \n-    joinChannel(channelName);\n-  }\n-\n-  private void joinChannel(String channelName) {\n     chatService.joinChannel(channelName);\n-  }\n-\n-  private void onChatUserLeftChannel(ChatChannelUser chatUser, String channelName) {\n-    if (isCurrentUser(chatUser)) {\n-      AbstractChatTabController chatTab = nameToChatTabController.remove(channelName);\n-      if (chatTab != null) {\n-        JavaFxUtil.runLater(() -> tabPane.getTabs().remove(chatTab.getRoot()));\n-      }\n-    }\n-  }\n-\n-  private void onUserJoinedChannel(ChatChannelUser chatUser, String channelName) {\n-    if (isCurrentUser(chatUser)) {\n-      JavaFxUtil.runLater(() -> {\n-        AbstractChatTabController tabController = getOrCreateChannelTab(channelName);\n-        onConnected();\n-        if (chatService.isDefaultChannel(channelName)) {\n-          Tab tab = tabController.getRoot();\n-          tabPane.getSelectionModel().select(tab);\n-          nameToChatTabController.get(tab.getId()).onDisplay();\n-        }\n-      });\n-    }\n-  }\n-\n-  private boolean isCurrentUser(ChatChannelUser chatUser) {\n-    return userService.getOwnUser() != null && chatUser.getUsername().equalsIgnoreCase(userService.getUsername());\n+    channelNameTextField.clear();\n   }\n \n   @Override\n   protected void onDisplay(NavigateEvent navigateEvent) {\n-    if (navigateEvent instanceof JoinChannelEvent joinChannelEvent) {\n-      chatService.joinChannel(joinChannelEvent.getChannel());\n-      return;\n-    }\n-    if (!tabPane.getTabs().isEmpty()) {\n-      Tab tab = tabPane.getSelectionModel().getSelectedItem();\n-      Optional.ofNullable(nameToChatTabController.get(tab.getId())).ifPresent(AbstractChatTabController::onDisplay);\n-    }\n-  }\n-\n-  @Override\n-  public void onHide() {\n-    super.onHide();\n-    if (!tabPane.getTabs().isEmpty()) {\n+    if (tabPane.getTabs().size() > 1) {\n       Tab tab = tabPane.getSelectionModel().getSelectedItem();\n-      Optional.ofNullable(nameToChatTabController.get(tab.getId())).ifPresent(AbstractChatTabController::onHide);\n+      Optional.ofNullable(channelToChatTabController.get((ChatChannel) tab.getUserData()))\n+          .ifPresent(AbstractChatTabController::onDisplay);\n     }\n   }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "committedDate": "2021-02-03 22:41:53 -0500", "message": "Clean Chat State Code (#2133)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "1831f2a39e73fe66f2332d01282f98b3883be148", "committedDate": "2022-04-10 09:08:56 -0400", "message": "Redesign chat user list & add show/hide categories (#2609)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "8eb4a9ec25810a70c965c28d20594fb453344217", "committedDate": "2023-04-02 13:57:17 -0400", "message": "Small cleanup"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjA0Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202042", "body": "Why is this public now? Could be a code smell. Not sure.", "bodyText": "Why is this public now? Could be a code smell. Not sure.", "bodyHTML": "<p dir=\"auto\">Why is this public now? Could be a code smell. Not sure.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:58:53Z", "path": "src/main/java/com/faforever/client/chat/ChatChannelUser.java", "diffHunk": "@@ -45,7 +45,7 @@\n     this(username, color, moderator, null);\n   }\n \n-  ChatChannelUser(String username, Color color, boolean moderator, Player player) {\n+  public ChatChannelUser(String username, Color color, boolean moderator, Player player) {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2MDA4NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536660084", "bodyText": "This and related changes were done in a214cbd by Geosearchef. This is where he implemented the hacky way to display the contextmenu. I can't say for sure, but this looks like a candidate for refactoring to make the whole thing cleaner", "author": "BlackYps", "createdAt": "2020-12-05T10:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "901c2727e7b4f0b304ae370161c8e76128b4fe5a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 496226c1..78fde060 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -45,7 +45,7 @@ public class ChatChannelUser {\n     this(username, color, moderator, null);\n   }\n \n-  public ChatChannelUser(String username, Color color, boolean moderator, Player player) {\n+  ChatChannelUser(String username, Color color, boolean moderator, Player player) {\n     this.username = new SimpleStringProperty(username);\n     this.moderator = new SimpleBooleanProperty(moderator);\n     this.color = new SimpleObjectProperty<>(color);\n", "next_change": {"commit": "e8fe02f6752b97d8f20ee0010fd9905eee528d97", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 78fde060..931b3fd4 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -51,17 +55,22 @@ public class ChatChannelUser {\n     this.color = new SimpleObjectProperty<>(color);\n     this.player = new SimpleObjectProperty<>(player);\n     this.lastActive = new SimpleObjectProperty<>();\n-    this.status = new SimpleObjectProperty<>();\n+    this.gameStatus = new SimpleObjectProperty<>();\n+    this.socialStatus = new SimpleObjectProperty<>();\n     this.avatar = new SimpleObjectProperty<>();\n     this.clan = new SimpleObjectProperty<>();\n     this.clanTag = new SimpleStringProperty();\n     this.countryFlag = new SimpleObjectProperty<>();\n     this.countryName = new SimpleStringProperty();\n     this.mapImage = new SimpleObjectProperty<>();\n-    this.statusImage = new SimpleObjectProperty<>();\n+    this.gameStatusImage = new SimpleObjectProperty<>();\n     this.statusTooltipText = new SimpleStringProperty();\n     this.displayed = new SimpleBooleanProperty(false);\n     this.populated = new SimpleBooleanProperty(false);\n+    if (player != null) {\n+      player.getChatChannelUsers().add(this);\n+      socialStatus.setValue(player.getSocialStatus());\n+    }\n   }\n \n   public Optional<Player> getPlayer() {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 496226c1..2b48a96c 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -29,39 +32,45 @@ public class ChatChannelUser {\n   private final ObjectProperty<Color> color;\n   private final ObjectProperty<Player> player;\n   private final ObjectProperty<Instant> lastActive;\n-  private final ObjectProperty<PlayerStatus> status;\n+  private final ObjectProperty<PlayerStatus> gameStatus;\n+  private final ObjectProperty<SocialStatus> socialStatus;\n   private final ObjectProperty<Image> avatar;\n   private final ObjectProperty<Clan> clan;\n   private final StringProperty clanTag;\n   private final ObjectProperty<Image> countryFlag;\n   private final StringProperty countryName;\n   private final ObjectProperty<Image> mapImage;\n-  private final ObjectProperty<Image> statusImage;\n+  private final ObjectProperty<Image> gameStatusImage;\n   private final StringProperty statusTooltipText;\n   private final BooleanProperty displayed;\n   private final BooleanProperty populated;\n \n-  ChatChannelUser(String username, Color color, boolean moderator) {\n-    this(username, color, moderator, null);\n+  ChatChannelUser(String username, boolean moderator) {\n+    this(username, moderator, null);\n   }\n \n-  public ChatChannelUser(String username, Color color, boolean moderator, Player player) {\n+  ChatChannelUser(String username, boolean moderator, Player player) {\n     this.username = new SimpleStringProperty(username);\n     this.moderator = new SimpleBooleanProperty(moderator);\n-    this.color = new SimpleObjectProperty<>(color);\n+    this.color = new SimpleObjectProperty<>();\n     this.player = new SimpleObjectProperty<>(player);\n     this.lastActive = new SimpleObjectProperty<>();\n-    this.status = new SimpleObjectProperty<>();\n+    this.gameStatus = new SimpleObjectProperty<>();\n+    this.socialStatus = new SimpleObjectProperty<>();\n     this.avatar = new SimpleObjectProperty<>();\n     this.clan = new SimpleObjectProperty<>();\n     this.clanTag = new SimpleStringProperty();\n     this.countryFlag = new SimpleObjectProperty<>();\n     this.countryName = new SimpleStringProperty();\n     this.mapImage = new SimpleObjectProperty<>();\n-    this.statusImage = new SimpleObjectProperty<>();\n+    this.gameStatusImage = new SimpleObjectProperty<>();\n     this.statusTooltipText = new SimpleStringProperty();\n     this.displayed = new SimpleBooleanProperty(false);\n     this.populated = new SimpleBooleanProperty(false);\n+    if (player != null) {\n+      player.getChatChannelUsers().add(this);\n+      socialStatus.setValue(player.getSocialStatus());\n+    }\n   }\n \n   public Optional<Player> getPlayer() {\n", "next_change": {"commit": "7a463b936c6d403f33e8c407babb70267228cab9", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 2b48a96c..8a7b7188 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -66,7 +73,6 @@ public class ChatChannelUser {\n     this.gameStatusImage = new SimpleObjectProperty<>();\n     this.statusTooltipText = new SimpleStringProperty();\n     this.displayed = new SimpleBooleanProperty(false);\n-    this.populated = new SimpleBooleanProperty(false);\n     if (player != null) {\n       player.getChatChannelUsers().add(this);\n       socialStatus.setValue(player.getSocialStatus());\n", "next_change": {"commit": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 8a7b7188..03689732 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -73,10 +70,6 @@ public class ChatChannelUser {\n     this.gameStatusImage = new SimpleObjectProperty<>();\n     this.statusTooltipText = new SimpleStringProperty();\n     this.displayed = new SimpleBooleanProperty(false);\n-    if (player != null) {\n-      player.getChatChannelUsers().add(this);\n-      socialStatus.setValue(player.getSocialStatus());\n-    }\n   }\n \n   public Optional<Player> getPlayer() {\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 03689732..049e8ecf 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -72,11 +74,11 @@ public class ChatChannelUser {\n     this.displayed = new SimpleBooleanProperty(false);\n   }\n \n-  public Optional<Player> getPlayer() {\n+  public Optional<PlayerBean> getPlayer() {\n     return Optional.ofNullable(player.get());\n   }\n \n-  public void setPlayer(Player player) {\n+  public void setPlayer(PlayerBean player) {\n     if (!Objects.equals(player, this.player.get())) {\n       if (this.player.get() != null) {\n         this.player.get().getChatChannelUsers().remove(this);\n", "next_change": {"commit": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 049e8ecf..962a3613 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -85,6 +85,9 @@ public class ChatChannelUser {\n         socialStatus.unbind();\n         gameStatus.unbind();\n         clanTag.unbind();\n+        socialStatus.set(null);\n+        gameStatus.set(null);\n+        clanTag.set(null);\n       }\n       if (player != null) {\n         player.getChatChannelUsers().add(this);\n", "next_change": {"commit": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 962a3613..4fc13160 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -93,12 +90,7 @@ public class ChatChannelUser {\n         player.getChatChannelUsers().add(this);\n         socialStatus.bind(player.socialStatusProperty());\n         gameStatus.bind(player.statusProperty());\n-        clanTag.bind(Bindings.createStringBinding(() -> {\n-          if (player.getClan() != null && !player.getClan().isBlank()) {\n-            return String.format(\"[%s]\", player.getClan());\n-          }\n-          return null;\n-        }, player.clanProperty()));\n+        clanTag.bind(player.clanProperty().map(clan -> clan.isBlank() ? null : String.format(\"[%s]\", clan)));\n       }\n       this.player.set(player);\n     }\n", "next_change": {"commit": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatChannelUser.java b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\nindex 4fc13160..851fe37a 100644\n--- a/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n+++ b/src/main/java/com/faforever/client/chat/ChatChannelUser.java\n", "chunk": "@@ -76,24 +52,7 @@ public class ChatChannelUser {\n   }\n \n   public void setPlayer(PlayerBean player) {\n-    if (!Objects.equals(player, this.player.get())) {\n-      if (this.player.get() != null) {\n-        this.player.get().getChatChannelUsers().remove(this);\n-        socialStatus.unbind();\n-        gameStatus.unbind();\n-        clanTag.unbind();\n-        socialStatus.set(null);\n-        gameStatus.set(null);\n-        clanTag.set(null);\n-      }\n-      if (player != null) {\n-        player.getChatChannelUsers().add(this);\n-        socialStatus.bind(player.socialStatusProperty());\n-        gameStatus.bind(player.statusProperty());\n-        clanTag.bind(player.clanProperty().map(clan -> clan.isBlank() ? null : String.format(\"[%s]\", clan)));\n-      }\n-      this.player.set(player);\n-    }\n+    this.player.set(player);\n   }\n \n   public ObjectProperty<PlayerBean> playerProperty() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "9fc8521d5595bbbdc6022f3231fbb0e1a27b4e7e", "committedDate": "2021-01-06 19:27:14 -0500", "message": "Ensure chat user listeners are not garbage collected (#2104)"}, {"oid": "7a463b936c6d403f33e8c407babb70267228cab9", "committedDate": "2021-01-29 19:15:23 -0500", "message": "Use Flowless over listview for chat user list (#2127)"}, {"oid": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "committedDate": "2021-02-03 22:41:53 -0500", "message": "Clean Chat State Code (#2133)"}, {"oid": "20ef5345970b276234b34a0a5e5dd766e8c4238e", "committedDate": "2021-06-18 08:01:44 -0400", "message": "Use listeners for chat users UI (#2279)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "committedDate": "2021-10-23 08:51:24 -0400", "message": "Utilize inheritance for context menus (#2381)"}, {"oid": "a7f1fa45020b48774e0a2e4f182453f1dbde55fc", "committedDate": "2021-12-16 08:30:01 -0500", "message": "Replace custom sorting  with sorted list for the chat user list (#2454)"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "ebdffe813f513bf7a83ffc35277b46643ca47ddf", "committedDate": "2022-02-19 18:51:02 -0500", "message": "Ensure color of chat users is set on join (#2571)"}, {"oid": "190511f2088348072c45a27b7e1121f37c7781bb", "committedDate": "2022-04-25 16:45:23 -0400", "message": "Allow set a channel topic by moderators (#2668)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjI0NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202245", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:59:12Z", "path": "src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Relationship;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\nindex 7378c669..8e24e8be 100644\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n", "chunk": "@@ -3,15 +3,11 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"matchmakerQueueMapPool\")\n public class MatchmakerQueueMapPool {\n   @Id\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\nindex 8e24e8be..7378c669 100644\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n", "chunk": "@@ -3,11 +3,15 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.time.OffsetDateTime;\n \n-@Data\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")\n @Type(\"matchmakerQueueMapPool\")\n public class MatchmakerQueueMapPool {\n   @Id\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\nindex 7378c669..8e24e8be 100644\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n", "chunk": "@@ -3,15 +3,11 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"matchmakerQueueMapPool\")\n public class MatchmakerQueueMapPool {\n   @Id\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\nindex 7378c669..8e24e8be 100644\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n+++ b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n", "chunk": "@@ -3,15 +3,11 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"matchmakerQueueMapPool\")\n public class MatchmakerQueueMapPool {\n   @Id\n", "next_change": {"commit": "49f764d249aa8437651bba64e19df5ea336c4873", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\ndeleted file mode 100644\nindex 8e24e8be..00000000\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueueMapPool.java\n+++ /dev/null\n", "chunk": "@@ -1,24 +0,0 @@\n-package com.faforever.client.api.dto;\n-\n-import com.github.jasminb.jsonapi.annotations.Id;\n-import com.github.jasminb.jsonapi.annotations.Relationship;\n-import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.Data;\n-\n-import java.time.OffsetDateTime;\n-\n-@Data\n-@Type(\"matchmakerQueueMapPool\")\n-public class MatchmakerQueueMapPool {\n-  @Id\n-  private String id;\n-  private OffsetDateTime createTime;\n-  private OffsetDateTime updateTime;\n-  private int minRating;\n-  private int maxRating;\n-\n-  @Relationship(\"mapPool\")\n-  private MapPool mapPool;\n-  @Relationship(\"matchmakerQueue\")\n-  private MatchmakerQueue matchmakerQueue;\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwMjM2Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536202363", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "Brutus5000", "createdAt": "2020-12-04T15:59:21Z", "path": "src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Relationship;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\nindex b8409c73..4a3c1dc2 100644\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n+++ b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n", "chunk": "@@ -3,15 +3,11 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"matchmakerQueue\")\n public class MatchmakerQueue {\n   @Id\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\nindex 4a3c1dc2..b8409c73 100644\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n+++ b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n", "chunk": "@@ -3,11 +3,15 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.time.OffsetDateTime;\n \n-@Data\n+@Getter\n+@Setter\n+@EqualsAndHashCode(of = \"id\")\n @Type(\"matchmakerQueue\")\n public class MatchmakerQueue {\n   @Id\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\nindex b8409c73..4a3c1dc2 100644\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n+++ b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n", "chunk": "@@ -3,15 +3,11 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"matchmakerQueue\")\n public class MatchmakerQueue {\n   @Id\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\nindex b8409c73..4a3c1dc2 100644\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n+++ b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n", "chunk": "@@ -3,15 +3,11 @@ package com.faforever.client.api.dto;\n import com.github.jasminb.jsonapi.annotations.Id;\n import com.github.jasminb.jsonapi.annotations.Relationship;\n import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n+import lombok.Data;\n \n import java.time.OffsetDateTime;\n \n-@Getter\n-@Setter\n-@EqualsAndHashCode(of = \"id\")\n+@Data\n @Type(\"matchmakerQueue\")\n public class MatchmakerQueue {\n   @Id\n", "next_change": {"commit": "49f764d249aa8437651bba64e19df5ea336c4873", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java b/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\ndeleted file mode 100644\nindex 4a3c1dc2..00000000\n--- a/src/main/java/com/faforever/client/api/dto/MatchmakerQueue.java\n+++ /dev/null\n", "chunk": "@@ -1,24 +0,0 @@\n-package com.faforever.client.api.dto;\n-\n-import com.github.jasminb.jsonapi.annotations.Id;\n-import com.github.jasminb.jsonapi.annotations.Relationship;\n-import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.Data;\n-\n-import java.time.OffsetDateTime;\n-\n-@Data\n-@Type(\"matchmakerQueue\")\n-public class MatchmakerQueue {\n-  @Id\n-  private String id;\n-  private OffsetDateTime createTime;\n-  private OffsetDateTime updateTime;\n-  private String nameKey;\n-  private String technicalName;\n-\n-  @Relationship(\"featuredMod\")\n-  private FeaturedMod featuredMod;\n-  @Relationship(\"leaderboard\")\n-  private Leaderboard leaderboard;\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDE0Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204143", "body": "Why does this method even exist if there is `getRoot()`? I know it was there before, but maybe you can explain.", "bodyText": "Why does this method even exist if there is getRoot()? I know it was there before, but maybe you can explain.", "bodyHTML": "<p dir=\"auto\">Why does this method even exist if there is <code>getRoot()</code>? I know it was there before, but maybe you can explain.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:02:00Z", "path": "src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java", "diffHunk": "@@ -145,7 +145,7 @@ public void initialize() {\n         });\n   }\n \n-  ContextMenu getContextMenu() {\n+  public ContextMenu getContextMenu() {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY1ODg5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536658892", "bodyText": "No idea...", "author": "BlackYps", "createdAt": "2020-12-05T10:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NjgyNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r546286825", "bodyText": "This was for the hacky implementation in the partyMemberItemController", "author": "BlackYps", "createdAt": "2020-12-19T21:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "901c2727e7b4f0b304ae370161c8e76128b4fe5a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\nindex 60ee666e..a923bad3 100644\n--- a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n", "chunk": "@@ -145,7 +145,7 @@ public class ChatUserContextMenuController implements Controller<ContextMenu> {\n         });\n   }\n \n-  public ContextMenu getContextMenu() {\n+  ContextMenu getContextMenu() {\n     return chatUserContextMenuRoot;\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\nindex 60ee666e..75c36073 100644\n--- a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n", "chunk": "@@ -145,7 +148,7 @@ public class ChatUserContextMenuController implements Controller<ContextMenu> {\n         });\n   }\n \n-  public ContextMenu getContextMenu() {\n+  ContextMenu getContextMenu() {\n     return chatUserContextMenuRoot;\n   }\n \n", "next_change": {"commit": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\nindex 75c36073..335cfdad 100644\n--- a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n", "chunk": "@@ -153,9 +164,9 @@ public class ChatUserContextMenuController implements Controller<ContextMenu> {\n   }\n \n   public void setChatUser(ChatChannelUser chatUser) {\n+    Assert.checkNotNullIllegalState(this.chatUser, \"Chat User already set\");\n+\n     this.chatUser = chatUser;\n-    showUserInfo.visibleProperty().bind(chatUser.playerProperty().isNotNull());\n-    viewReplaysItem.visibleProperty().bind(chatUser.playerProperty().isNotNull());\n \n     ChatPrefs chatPrefs = preferencesService.getPreferences().getChat();\n \n", "next_change": {"commit": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\nindex 335cfdad..509a2d1c 100644\n--- a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n", "chunk": "@@ -1,173 +1,106 @@\n package com.faforever.client.chat;\n \n-import com.faforever.client.chat.avatar.AvatarBean;\n-import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.avatar.AvatarService;\n import com.faforever.client.chat.event.ChatUserColorChangeEvent;\n-import com.faforever.client.fx.Controller;\n+import com.faforever.client.domain.GameBean;\n+import com.faforever.client.domain.PlayerBean;\n import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.StringListCell;\n-import com.faforever.client.game.Game;\n+import com.faforever.client.fx.OnlinePlayerContextMenuController;\n import com.faforever.client.game.JoinGameHelper;\n import com.faforever.client.game.PlayerStatus;\n import com.faforever.client.i18n.I18n;\n-import com.faforever.client.main.event.ShowUserReplaysEvent;\n-import com.faforever.client.moderator.BanDialogController;\n import com.faforever.client.moderator.ModeratorService;\n import com.faforever.client.notification.NotificationService;\n-import com.faforever.client.player.Player;\n import com.faforever.client.player.PlayerService;\n import com.faforever.client.player.SocialStatus;\n import com.faforever.client.preferences.ChatPrefs;\n import com.faforever.client.preferences.PreferencesService;\n-import com.faforever.client.remote.domain.GameType;\n import com.faforever.client.replay.ReplayService;\n-import com.faforever.client.reporting.ReportDialogController;\n import com.faforever.client.teammatchmaking.TeamMatchmakingService;\n import com.faforever.client.theme.UiService;\n-import com.faforever.client.ui.alert.Alert;\n-import com.faforever.client.ui.alert.animation.AlertAnimation;\n import com.faforever.client.util.Assert;\n import com.faforever.client.util.ClipboardUtil;\n import com.faforever.commons.api.dto.GroupPermission;\n import com.google.common.eventbus.EventBus;\n import javafx.beans.InvalidationListener;\n import javafx.beans.WeakInvalidationListener;\n-import javafx.beans.binding.Bindings;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.event.ActionEvent;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.ColorPicker;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.CustomMenuItem;\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.SeparatorMenuItem;\n import javafx.scene.control.TextInputDialog;\n-import javafx.scene.image.ImageView;\n-import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.jetbrains.annotations.NotNull;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.net.URL;\n-import java.util.Objects;\n-import java.util.Optional;\n import java.util.Set;\n \n import static com.faforever.client.chat.ChatColorMode.RANDOM;\n-import static com.faforever.client.player.SocialStatus.FOE;\n-import static com.faforever.client.player.SocialStatus.FRIEND;\n import static com.faforever.client.player.SocialStatus.SELF;\n import static java.util.Locale.US;\n \n @Slf4j\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @Component\n-@RequiredArgsConstructor\n-public class ChatUserContextMenuController implements Controller<ContextMenu> {\n+public class ChatUserContextMenuController extends OnlinePlayerContextMenuController {\n \n   private final PreferencesService preferencesService;\n-  private final PlayerService playerService;\n-  private final ReplayService replayService;\n-  private final NotificationService notificationService;\n-  private final I18n i18n;\n-  private final EventBus eventBus;\n-  private final JoinGameHelper joinGameHelper;\n-  private final AvatarService avatarService;\n-  private final UiService uiService;\n-  private final ModeratorService moderatorService;\n   private final TeamMatchmakingService teamMatchmakingService;\n-  public ComboBox<AvatarBean> avatarComboBox;\n-  public CustomMenuItem avatarPickerMenuItem;\n-  public MenuItem sendPrivateMessageItem;\n-  public SeparatorMenuItem socialSeparator;\n-  public CustomMenuItem colorPickerMenuItem;\n-  public ColorPicker colorPicker;\n-  public MenuItem joinGameItem;\n-  public MenuItem addFriendItem;\n-  public MenuItem removeFriendItem;\n-  public MenuItem addFoeItem;\n-  public MenuItem removeFoeItem;\n-  public MenuItem watchGameItem;\n-  public MenuItem viewReplaysItem;\n-  public MenuItem inviteItem;\n-  public MenuItem reportItem;\n-  public SeparatorMenuItem moderatorActionSeparator;\n-  public MenuItem banItem;\n-  public MenuItem broadcastMessage;\n-  public ContextMenu chatUserContextMenuRoot;\n-  public MenuItem showUserInfo;\n-  public Button removeCustomColorButton;\n-  private ChatChannelUser chatUser;\n-  public MenuItem kickGameItem;\n-  public MenuItem kickLobbyItem;\n \n-  private InvalidationListener chatUserPropertyInvalidationListener;\n+  private ChatChannelUser chatUser;\n+  private InvalidationListener playerPropertyInvalidationListener;\n+  private InvalidationListener socialStatusPropertyInvalidationListener;\n+\n+  public ChatUserContextMenuController(PlayerService playerService,\n+                                       EventBus eventBus,\n+                                       UiService uiService,\n+                                       PreferencesService preferencesService,\n+                                       ReplayService replayService,\n+                                       NotificationService notificationService,\n+                                       I18n i18n,\n+                                       JoinGameHelper joinGameHelper,\n+                                       AvatarService avatarService,\n+                                       ModeratorService moderatorService,\n+                                       TeamMatchmakingService teamMatchmakingService) {\n+    super(avatarService, eventBus, i18n, joinGameHelper, moderatorService, notificationService, playerService, replayService, uiService);\n+\n+    this.preferencesService = preferencesService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+  }\n \n+  @Override\n   public void initialize() {\n-    JavaFxUtil.bindManagedToVisible(removeCustomColorButton);\n-    avatarComboBox.setCellFactory(param -> avatarCell());\n-    avatarComboBox.setButtonCell(avatarCell());\n+    super.initialize();\n+    removeCustomColorButton.setOnAction(event -> onRemoveCustomColor());\n+    inviteItem.setOnAction(event -> onInviteToGameSelected());\n+    broadcastMessage.setOnAction(this::onBroadcastMessage);\n \n-    avatarPickerMenuItem.visibleProperty().bind(Bindings.createBooleanBinding(() -> !avatarComboBox.getItems().isEmpty(), avatarComboBox.getItems()));\n-    initializeListeners();\n+    JavaFxUtil.bindManagedToVisible(removeCustomColorButton);\n   }\n \n-  private void initializeListeners() {\n-    chatUserPropertyInvalidationListener = observable -> {\n-      Optional<Player> optionalPlayer = chatUser.getPlayer();\n-      optionalPlayer.ifPresent(player ->\n-          moderatorService.getPermissions().thenAccept(permissions -> setModeratorOptions(permissions, player)));\n+  @Override\n+  protected void initializeListener() {\n+    super.initializeListener();\n+    playerPropertyInvalidationListener = observable -> chatUser.getPlayer().ifPresent(super::setPlayer);\n+    socialStatusPropertyInvalidationListener = observable -> {\n       SocialStatus socialStatus = chatUser.getSocialStatus().orElse(null);\n-      PlayerStatus playerStatus = chatUser.getGameStatus().orElse(null);\n-      Game game = optionalPlayer.map(Player::getGame).orElse(null);\n-      if (socialStatus == SELF && optionalPlayer.isPresent()) {\n-        loadAvailableAvatars(optionalPlayer.get());\n-      }\n-      JavaFxUtil.runLater(() -> {\n-        showUserInfo.setVisible(optionalPlayer.isPresent());\n-        viewReplaysItem.setVisible(optionalPlayer.isPresent());\n-        sendPrivateMessageItem.setVisible(socialStatus != SELF);\n-        addFriendItem.setVisible(socialStatus != FRIEND && socialStatus != SELF);\n-        removeFriendItem.setVisible(socialStatus == FRIEND);\n-        addFoeItem.setVisible(socialStatus != FOE && socialStatus != SELF);\n-        removeFoeItem.setVisible(socialStatus == FOE);\n-        reportItem.setVisible(socialStatus != SELF);\n-\n-        joinGameItem.setVisible(socialStatus != SELF\n-            && (playerStatus == PlayerStatus.LOBBYING || playerStatus == PlayerStatus.HOSTING)\n-            && game != null && game.getGameType() != GameType.MATCHMAKER);\n-        watchGameItem.setVisible(playerStatus == PlayerStatus.PLAYING);\n-        inviteItem.setVisible(socialStatus != SELF && playerStatus == PlayerStatus.IDLE);\n-      });\n+      JavaFxUtil.runLater(() -> sendPrivateMessageItem.setVisible(socialStatus != SELF));\n     };\n   }\n \n-  @NotNull\n-  private StringListCell<AvatarBean> avatarCell() {\n-    return new StringListCell<>(\n-        AvatarBean::getDescription,\n-        avatarBean -> {\n-          URL url = avatarBean.getUrl();\n-          if (url == null) {\n-            return null;\n-          }\n-          return new ImageView(avatarService.loadAvatar(url.toString()));\n-        });\n+  @Override\n+  protected void setItemVisibility(SocialStatus socialStatus, PlayerStatus playerStatus, GameBean game) {\n+    super.setItemVisibility(socialStatus, playerStatus, game);\n+    JavaFxUtil.runLater(() -> inviteItem.setVisible(socialStatus != SELF && playerStatus == PlayerStatus.IDLE));\n   }\n \n-  ContextMenu getContextMenu() {\n-    return chatUserContextMenuRoot;\n+  @Override\n+  protected void setModeratorOptions(Set<String> permissions, PlayerBean player) {\n+    super.setModeratorOptions(permissions, player);\n+    JavaFxUtil.runLater(() -> broadcastMessage.setVisible(permissions.contains(GroupPermission.ROLE_WRITE_MESSAGE)));\n   }\n \n   public void setChatUser(ChatChannelUser chatUser) {\n     Assert.checkNotNullIllegalState(this.chatUser, \"Chat User already set\");\n-\n     this.chatUser = chatUser;\n-\n     ChatPrefs chatPrefs = preferencesService.getPreferences().getChat();\n \n     String lowerCaseUsername = chatUser.getUsername().toLowerCase(US);\n", "next_change": {"commit": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java b/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\ndeleted file mode 100644\nindex 509a2d1c..00000000\n--- a/src/main/java/com/faforever/client/chat/ChatUserContextMenuController.java\n+++ /dev/null\n", "chunk": "@@ -1,176 +0,0 @@\n-package com.faforever.client.chat;\n-\n-import com.faforever.client.avatar.AvatarService;\n-import com.faforever.client.chat.event.ChatUserColorChangeEvent;\n-import com.faforever.client.domain.GameBean;\n-import com.faforever.client.domain.PlayerBean;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.fx.OnlinePlayerContextMenuController;\n-import com.faforever.client.game.JoinGameHelper;\n-import com.faforever.client.game.PlayerStatus;\n-import com.faforever.client.i18n.I18n;\n-import com.faforever.client.moderator.ModeratorService;\n-import com.faforever.client.notification.NotificationService;\n-import com.faforever.client.player.PlayerService;\n-import com.faforever.client.player.SocialStatus;\n-import com.faforever.client.preferences.ChatPrefs;\n-import com.faforever.client.preferences.PreferencesService;\n-import com.faforever.client.replay.ReplayService;\n-import com.faforever.client.teammatchmaking.TeamMatchmakingService;\n-import com.faforever.client.theme.UiService;\n-import com.faforever.client.util.Assert;\n-import com.faforever.client.util.ClipboardUtil;\n-import com.faforever.commons.api.dto.GroupPermission;\n-import com.google.common.eventbus.EventBus;\n-import javafx.beans.InvalidationListener;\n-import javafx.beans.WeakInvalidationListener;\n-import javafx.event.ActionEvent;\n-import javafx.scene.control.TextInputDialog;\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.Set;\n-\n-import static com.faforever.client.chat.ChatColorMode.RANDOM;\n-import static com.faforever.client.player.SocialStatus.SELF;\n-import static java.util.Locale.US;\n-\n-@Slf4j\n-@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-@Component\n-public class ChatUserContextMenuController extends OnlinePlayerContextMenuController {\n-\n-  private final PreferencesService preferencesService;\n-  private final TeamMatchmakingService teamMatchmakingService;\n-\n-  private ChatChannelUser chatUser;\n-  private InvalidationListener playerPropertyInvalidationListener;\n-  private InvalidationListener socialStatusPropertyInvalidationListener;\n-\n-  public ChatUserContextMenuController(PlayerService playerService,\n-                                       EventBus eventBus,\n-                                       UiService uiService,\n-                                       PreferencesService preferencesService,\n-                                       ReplayService replayService,\n-                                       NotificationService notificationService,\n-                                       I18n i18n,\n-                                       JoinGameHelper joinGameHelper,\n-                                       AvatarService avatarService,\n-                                       ModeratorService moderatorService,\n-                                       TeamMatchmakingService teamMatchmakingService) {\n-    super(avatarService, eventBus, i18n, joinGameHelper, moderatorService, notificationService, playerService, replayService, uiService);\n-\n-    this.preferencesService = preferencesService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-  }\n-\n-  @Override\n-  public void initialize() {\n-    super.initialize();\n-    removeCustomColorButton.setOnAction(event -> onRemoveCustomColor());\n-    inviteItem.setOnAction(event -> onInviteToGameSelected());\n-    broadcastMessage.setOnAction(this::onBroadcastMessage);\n-\n-    JavaFxUtil.bindManagedToVisible(removeCustomColorButton);\n-  }\n-\n-  @Override\n-  protected void initializeListener() {\n-    super.initializeListener();\n-    playerPropertyInvalidationListener = observable -> chatUser.getPlayer().ifPresent(super::setPlayer);\n-    socialStatusPropertyInvalidationListener = observable -> {\n-      SocialStatus socialStatus = chatUser.getSocialStatus().orElse(null);\n-      JavaFxUtil.runLater(() -> sendPrivateMessageItem.setVisible(socialStatus != SELF));\n-    };\n-  }\n-\n-  @Override\n-  protected void setItemVisibility(SocialStatus socialStatus, PlayerStatus playerStatus, GameBean game) {\n-    super.setItemVisibility(socialStatus, playerStatus, game);\n-    JavaFxUtil.runLater(() -> inviteItem.setVisible(socialStatus != SELF && playerStatus == PlayerStatus.IDLE));\n-  }\n-\n-  @Override\n-  protected void setModeratorOptions(Set<String> permissions, PlayerBean player) {\n-    super.setModeratorOptions(permissions, player);\n-    JavaFxUtil.runLater(() -> broadcastMessage.setVisible(permissions.contains(GroupPermission.ROLE_WRITE_MESSAGE)));\n-  }\n-\n-  public void setChatUser(ChatChannelUser chatUser) {\n-    Assert.checkNotNullIllegalState(this.chatUser, \"Chat User already set\");\n-    this.chatUser = chatUser;\n-    ChatPrefs chatPrefs = preferencesService.getPreferences().getChat();\n-\n-    String lowerCaseUsername = chatUser.getUsername().toLowerCase(US);\n-    colorPicker.setValue(chatPrefs.getUserToColor().getOrDefault(lowerCaseUsername, null));\n-\n-    colorPicker.valueProperty().addListener((observable, oldValue, newValue) -> {\n-      String lowerUsername = chatUser.getUsername().toLowerCase(US);\n-      ChatUserCategory userCategory;\n-      if (chatUser.isModerator()) {\n-        userCategory = ChatUserCategory.MODERATOR;\n-      } else {\n-        userCategory = chatUser.getSocialStatus().map(status -> switch (status) {\n-          case FRIEND -> ChatUserCategory.FRIEND;\n-          case FOE -> ChatUserCategory.FOE;\n-          default -> ChatUserCategory.OTHER;\n-        }).orElse(ChatUserCategory.OTHER);\n-      }\n-      if (newValue == null) {\n-        chatPrefs.getUserToColor().remove(lowerUsername);\n-        chatUser.setColor(chatPrefs.getGroupToColor().getOrDefault(userCategory, null));\n-      } else {\n-        chatPrefs.getUserToColor().put(lowerUsername, newValue);\n-        chatUser.setColor(newValue);\n-      }\n-      eventBus.post(new ChatUserColorChangeEvent(chatUser));\n-    });\n-\n-    removeCustomColorButton.visibleProperty().bind(chatPrefs.chatColorModeProperty().isNotEqualTo(RANDOM)\n-        .and(colorPicker.valueProperty().isNotNull()));\n-    colorPickerMenuItem.visibleProperty().bind(chatPrefs.chatColorModeProperty().isNotEqualTo(RANDOM));\n-\n-    WeakInvalidationListener weakPlayerPropertyListener = new WeakInvalidationListener(playerPropertyInvalidationListener);\n-    WeakInvalidationListener weakSocialStatusPropertyListener = new WeakInvalidationListener(socialStatusPropertyInvalidationListener);\n-    JavaFxUtil.addAndTriggerListener(chatUser.playerProperty(), weakPlayerPropertyListener);\n-    JavaFxUtil.addAndTriggerListener(chatUser.socialStatusProperty(), weakSocialStatusPropertyListener);\n-  }\n-\n-  @Override\n-  public void onSendPrivateMessageSelected() {\n-    eventBus.post(new InitiatePrivateChatEvent(chatUser.getUsername()));\n-  }\n-\n-  @Override\n-  public void onCopyUsernameSelected() {\n-    ClipboardUtil.copyToClipboard(chatUser.getUsername());\n-  }\n-\n-  public void onInviteToGameSelected() {\n-    teamMatchmakingService.invitePlayer(getPlayer().getUsername());\n-  }\n-\n-  public void onBroadcastMessage(ActionEvent actionEvent) {\n-    actionEvent.consume();\n-\n-    TextInputDialog broadcastMessageInputDialog = new TextInputDialog();\n-    broadcastMessageInputDialog.setTitle(i18n.get(\"chat.userContext.broadcast\"));\n-\n-    broadcastMessageInputDialog.showAndWait()\n-        .ifPresent(broadcastMessage -> {\n-              if (broadcastMessage.isBlank()) {\n-                log.error(\"Broadcast message is empty: {}\", broadcastMessage);\n-              } else {\n-                log.info(\"Sending broadcast message: {}\", broadcastMessage);\n-                moderatorService.broadcastMessage(broadcastMessage);\n-              }\n-            }\n-        );\n-  }\n-\n-  public void onRemoveCustomColor() {\n-    colorPicker.setValue(null);\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "6e0589ef00a29fa7ca43df0eb331f40aee234c72", "committedDate": "2021-02-21 09:50:45 -0500", "message": "Add ability to conduct moderator reports from the client (#2139)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "2f8e8efb4839ff91fa0265eb0922869114c7b42d", "committedDate": "2021-05-28 11:59:56 -0400", "message": "Fix css properties not properly changing. (#2249)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "committedDate": "2021-10-23 08:51:24 -0400", "message": "Utilize inheritance for context menus (#2381)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDcxMQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204711", "body": "Remove. `@Inject` isn't needed.", "bodyText": "Remove. @Inject isn't needed.", "bodyHTML": "<p dir=\"auto\">Remove. <code>@Inject</code> isn't needed.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:02:49Z", "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex a96ae89a..6c1b89c3 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -37,7 +37,6 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n-  @Inject\n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n                                    PreferencesService preferencesService,\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex 6c1b89c3..a96ae89a 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -37,6 +37,7 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n+  @Inject\n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n                                    PreferencesService preferencesService,\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex a96ae89a..6c1b89c3 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -37,7 +37,6 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n-  @Inject\n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n                                    PreferencesService preferencesService,\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex a96ae89a..dc735b1f 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -37,7 +36,6 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n-  @Inject\n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n                                    PreferencesService preferencesService,\n", "next_change": {"commit": "292382c68442a30891549e67549fcf1381bf578f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex dc735b1f..701f2aec 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -16,22 +17,31 @@ import com.google.common.annotations.VisibleForTesting;\n import com.google.common.eventbus.EventBus;\n import javafx.application.Platform;\n import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Hyperlink;\n+import javafx.scene.control.Label;\n import javafx.scene.control.Tab;\n import javafx.scene.control.TextInputControl;\n+import javafx.scene.text.TextFlow;\n import javafx.scene.web.WebView;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n import java.time.Instant;\n+import java.util.Arrays;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n public class MatchmakingChatController extends AbstractChatTabController {\n \n+  private final ApplicationEventPublisher applicationEventPublisher;\n+\n   public Tab matchmakingChatTabRoot;\n   public WebView messagesWebView;\n   public TextInputControl messageTextField;\n+  public TextFlow topicText;\n+  public Hyperlink discordLink;\n \n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n", "next_change": {"commit": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex 701f2aec..ff7cc970 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -43,7 +43,7 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   public TextFlow topicText;\n   public Hyperlink discordLink;\n \n-  private Channel channel;\n+  private ChatChannel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n   // TODO cut dependencies\n", "next_change": {"commit": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex ff7cc970..198df355 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -35,16 +35,21 @@ import java.util.Arrays;\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n public class MatchmakingChatController extends AbstractChatTabController {\n \n-  private final ApplicationEventPublisher applicationEventPublisher;\n-\n   public Tab matchmakingChatTabRoot;\n   public WebView messagesWebView;\n   public TextInputControl messageTextField;\n   public TextFlow topicText;\n   public Hyperlink discordLink;\n \n+  private final MapChangeListener<String, ChatChannelUser> usersChangeListener = change -> {\n+    if (change.wasAdded()) {\n+      onPlayerConnected(change.getValueAdded().getUsername());\n+    } else if (change.wasRemoved()) {\n+      onPlayerDisconnected(change.getValueRemoved().getUsername());\n+    }\n+  };\n+\n   private ChatChannel channel;\n-  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex 198df355..d8aef105 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -52,20 +54,14 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private ChatChannel channel;\n \n   // TODO cut dependencies\n-  public MatchmakingChatController(UserService userService,\n-                                   PreferencesService preferencesService,\n-                                   PlayerService playerService,\n-                                   TimeService timeService,\n-                                   I18n i18n,\n-                                   NotificationService notificationService,\n-                                   UiService uiService,\n-                                   EventBus eventBus,\n-                                   AudioService audioService,\n-                                   ChatService chatService,\n-                                   WebViewConfigurer webViewConfigurer,\n-                                   CountryFlagService countryFlagService,\n-                                   EmoticonService emoticonService) {\n-    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService);\n+  public MatchmakingChatController(UserService userService, PreferencesService preferencesService,\n+                                   PlayerService playerService, TimeService timeService, I18n i18n,\n+                                   NotificationService notificationService, UiService uiService, EventBus eventBus,\n+                                   AudioService audioService, ChatService chatService,\n+                                   WebViewConfigurer webViewConfigurer, CountryFlagService countryFlagService,\n+                                   EmoticonService emoticonService, ChatPrefs chatPrefs,\n+                                   NotificationPrefs notificationPrefs) {\n+    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService, chatPrefs, notificationPrefs);\n   }\n \n   @Override\n", "next_change": {"commit": "ac8669087b7b29ade57a46217f70a569716d17fe", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex d8aef105..b91cf2ea 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -65,16 +69,21 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   }\n \n   @Override\n-  public Tab getRoot() {\n-    return matchmakingChatTabRoot;\n-  }\n+  public void initialize() {\n+    super.initialize();\n+    matchmakingChatTabRoot.idProperty().bind(receiver);\n+    matchmakingChatTabRoot.textProperty().bind(receiver);\n+\n+    receiver.addListener(((observable, oldValue, newValue) -> {\n+      if (oldValue != null) {\n+        chatService.removeUsersListener(oldValue, weakUsersChangeListener);\n+      }\n+\n+      if (newValue != null) {\n+        chatService.addUsersListener(newValue, weakUsersChangeListener);\n+      }\n+    }));\n \n-  public void setChannel(String partyName) {\n-    channel = chatService.getOrCreateChannel(partyName);\n-    chatService.joinChannel(partyName);\n-    setReceiver(partyName);\n-    matchmakingChatTabRoot.setId(partyName);\n-    matchmakingChatTabRoot.setText(partyName);\n     String topic = i18n.get(\"teammatchmaking.chat.topic\");\n     topicText.getChildren().clear();\n     Arrays.stream(topic.split(\"\\\\s\")).forEach(word -> {\n", "next_change": {"commit": "b86f5c8e62200ff540330a38577f87f3aa678f42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex b91cf2ea..dc9fd0f1 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -71,16 +68,16 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   @Override\n   public void initialize() {\n     super.initialize();\n-    matchmakingChatTabRoot.idProperty().bind(receiver);\n-    matchmakingChatTabRoot.textProperty().bind(receiver);\n+    matchmakingChatTabRoot.idProperty().bind(channelName);\n+    matchmakingChatTabRoot.textProperty().bind(channelName);\n \n-    receiver.addListener(((observable, oldValue, newValue) -> {\n+    chatChannel.addListener(((observable, oldValue, newValue) -> {\n       if (oldValue != null) {\n-        chatService.removeUsersListener(oldValue, weakUsersChangeListener);\n+        oldValue.removeUserListener(usersChangeListener);\n       }\n \n       if (newValue != null) {\n-        chatService.addUsersListener(newValue, weakUsersChangeListener);\n+        newValue.addUsersListeners(usersChangeListener);\n       }\n     }));\n \n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex ff7cc970..198df355 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -52,20 +57,15 @@ public class MatchmakingChatController extends AbstractChatTabController {\n                                    PlayerService playerService,\n                                    TimeService timeService,\n                                    I18n i18n,\n-                                   ImageUploadService imageUploadService,\n                                    NotificationService notificationService,\n-                                   ReportingService reportingService,\n                                    UiService uiService,\n                                    EventBus eventBus,\n                                    AudioService audioService,\n                                    ChatService chatService,\n                                    WebViewConfigurer webViewConfigurer,\n                                    CountryFlagService countryFlagService,\n-                                   ChatUserService chatUserService, ApplicationEventPublisher applicationEventPublisher) {\n-    super(webViewConfigurer, userService, chatService, preferencesService, playerService, audioService,\n-        timeService, i18n, imageUploadService, notificationService, reportingService, uiService,\n-        eventBus, countryFlagService, chatUserService);\n-    this.applicationEventPublisher = applicationEventPublisher;\n+                                   EmoticonService emoticonService) {\n+    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService);\n   }\n \n   @Override\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex 198df355..d8aef105 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -52,20 +54,14 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private ChatChannel channel;\n \n   // TODO cut dependencies\n-  public MatchmakingChatController(UserService userService,\n-                                   PreferencesService preferencesService,\n-                                   PlayerService playerService,\n-                                   TimeService timeService,\n-                                   I18n i18n,\n-                                   NotificationService notificationService,\n-                                   UiService uiService,\n-                                   EventBus eventBus,\n-                                   AudioService audioService,\n-                                   ChatService chatService,\n-                                   WebViewConfigurer webViewConfigurer,\n-                                   CountryFlagService countryFlagService,\n-                                   EmoticonService emoticonService) {\n-    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService);\n+  public MatchmakingChatController(UserService userService, PreferencesService preferencesService,\n+                                   PlayerService playerService, TimeService timeService, I18n i18n,\n+                                   NotificationService notificationService, UiService uiService, EventBus eventBus,\n+                                   AudioService audioService, ChatService chatService,\n+                                   WebViewConfigurer webViewConfigurer, CountryFlagService countryFlagService,\n+                                   EmoticonService emoticonService, ChatPrefs chatPrefs,\n+                                   NotificationPrefs notificationPrefs) {\n+    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService, chatPrefs, notificationPrefs);\n   }\n \n   @Override\n", "next_change": {"commit": "ac8669087b7b29ade57a46217f70a569716d17fe", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex d8aef105..b91cf2ea 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -65,16 +69,21 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   }\n \n   @Override\n-  public Tab getRoot() {\n-    return matchmakingChatTabRoot;\n-  }\n+  public void initialize() {\n+    super.initialize();\n+    matchmakingChatTabRoot.idProperty().bind(receiver);\n+    matchmakingChatTabRoot.textProperty().bind(receiver);\n+\n+    receiver.addListener(((observable, oldValue, newValue) -> {\n+      if (oldValue != null) {\n+        chatService.removeUsersListener(oldValue, weakUsersChangeListener);\n+      }\n+\n+      if (newValue != null) {\n+        chatService.addUsersListener(newValue, weakUsersChangeListener);\n+      }\n+    }));\n \n-  public void setChannel(String partyName) {\n-    channel = chatService.getOrCreateChannel(partyName);\n-    chatService.joinChannel(partyName);\n-    setReceiver(partyName);\n-    matchmakingChatTabRoot.setId(partyName);\n-    matchmakingChatTabRoot.setText(partyName);\n     String topic = i18n.get(\"teammatchmaking.chat.topic\");\n     topicText.getChildren().clear();\n     Arrays.stream(topic.split(\"\\\\s\")).forEach(word -> {\n", "next_change": {"commit": "b86f5c8e62200ff540330a38577f87f3aa678f42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex b91cf2ea..dc9fd0f1 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -71,16 +68,16 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   @Override\n   public void initialize() {\n     super.initialize();\n-    matchmakingChatTabRoot.idProperty().bind(receiver);\n-    matchmakingChatTabRoot.textProperty().bind(receiver);\n+    matchmakingChatTabRoot.idProperty().bind(channelName);\n+    matchmakingChatTabRoot.textProperty().bind(channelName);\n \n-    receiver.addListener(((observable, oldValue, newValue) -> {\n+    chatChannel.addListener(((observable, oldValue, newValue) -> {\n       if (oldValue != null) {\n-        chatService.removeUsersListener(oldValue, weakUsersChangeListener);\n+        oldValue.removeUserListener(usersChangeListener);\n       }\n \n       if (newValue != null) {\n-        chatService.addUsersListener(newValue, weakUsersChangeListener);\n+        newValue.addUsersListeners(usersChangeListener);\n       }\n     }));\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "292382c68442a30891549e67549fcf1381bf578f", "committedDate": "2021-01-29 19:16:50 -0500", "message": "Add discord invite over matchmaker chat (#2131)"}, {"oid": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "committedDate": "2021-02-03 22:41:53 -0500", "message": "Clean Chat State Code (#2133)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "9d05da005eac92c3e15ba3dd87dcb032cc110b05", "committedDate": "2021-09-28 22:11:28 -0400", "message": "Remove usages of applicationEventPublishers"}, {"oid": "cf1a484e8a3aacb3efeff891bea28f2525a2d618", "committedDate": "2021-12-05 10:28:56 -0500", "message": "Support emojis (#2430)"}, {"oid": "42787d4e234cd855f7d8950499f2a2d1e65a4082", "committedDate": "2022-03-21 19:49:36 -0400", "message": "Fix Join Discord Events (#2625)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "acf47e326a338fee2f29e83f11035e9112780aa5", "committedDate": "2023-04-20 19:17:43 -0400", "message": "Allow private chat tab to be garbage collected when closed (#2957)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536204948", "body": "Is there a TODO or not? If yes, please fix, if no please remove.", "bodyText": "Is there a TODO or not? If yes, please fix, if no please remove.", "bodyHTML": "<p dir=\"auto\">Is there a TODO or not? If yes, please fix, if no please remove.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:03:15Z", "path": "src/main/java/com/faforever/client/chat/MatchmakingChatController.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.faforever.client.chat;\n+\n+import com.faforever.client.audio.AudioService;\n+import com.faforever.client.chat.event.UnreadPartyMessageEvent;\n+import com.faforever.client.fx.WebViewConfigurer;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.uploader.ImageUploadService;\n+import com.faforever.client.user.UserService;\n+import com.faforever.client.util.TimeService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.web.WebView;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.time.Instant;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingChatController extends AbstractChatTabController {\n+\n+  public Tab matchmakingChatTabRoot;\n+  public WebView messagesWebView;\n+  public TextInputControl messageTextField;\n+\n+  private Channel channel;\n+  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n+\n+  @Inject\n+  // TODO cut dependencies", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4ODIyNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536388224", "bodyText": "I don't know. The other two classes that extend from AbstractChatTabController also have it and I wanted to stay consistent.", "author": "BlackYps", "createdAt": "2020-12-04T21:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MjIxMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536782212", "bodyText": "I think the thing to do here would be to cut the unnecessary dependencies.", "author": "Sheikah45", "createdAt": "2020-12-05T14:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NjczNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r546286737", "bodyText": "This is a separate issue. This todo also exists in the other chatcontrollers. I put it here for consistency", "author": "BlackYps", "createdAt": "2020-12-19T21:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex a96ae89a..6c1b89c3 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -37,7 +37,6 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n-  @Inject\n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n                                    PreferencesService preferencesService,\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex 6c1b89c3..a96ae89a 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -37,6 +37,7 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n+  @Inject\n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n                                    PreferencesService preferencesService,\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex a96ae89a..6c1b89c3 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -37,7 +37,6 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n-  @Inject\n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n                                    PreferencesService preferencesService,\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex a96ae89a..dc735b1f 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -37,7 +36,6 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n-  @Inject\n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n                                    PreferencesService preferencesService,\n", "next_change": {"commit": "292382c68442a30891549e67549fcf1381bf578f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex dc735b1f..701f2aec 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -16,22 +17,31 @@ import com.google.common.annotations.VisibleForTesting;\n import com.google.common.eventbus.EventBus;\n import javafx.application.Platform;\n import javafx.collections.MapChangeListener;\n+import javafx.scene.control.Hyperlink;\n+import javafx.scene.control.Label;\n import javafx.scene.control.Tab;\n import javafx.scene.control.TextInputControl;\n+import javafx.scene.text.TextFlow;\n import javafx.scene.web.WebView;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n import java.time.Instant;\n+import java.util.Arrays;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n public class MatchmakingChatController extends AbstractChatTabController {\n \n+  private final ApplicationEventPublisher applicationEventPublisher;\n+\n   public Tab matchmakingChatTabRoot;\n   public WebView messagesWebView;\n   public TextInputControl messageTextField;\n+  public TextFlow topicText;\n+  public Hyperlink discordLink;\n \n   private Channel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n", "next_change": {"commit": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex 701f2aec..ff7cc970 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -43,7 +43,7 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   public TextFlow topicText;\n   public Hyperlink discordLink;\n \n-  private Channel channel;\n+  private ChatChannel channel;\n   private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n   // TODO cut dependencies\n", "next_change": {"commit": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex ff7cc970..198df355 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -35,16 +35,21 @@ import java.util.Arrays;\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n public class MatchmakingChatController extends AbstractChatTabController {\n \n-  private final ApplicationEventPublisher applicationEventPublisher;\n-\n   public Tab matchmakingChatTabRoot;\n   public WebView messagesWebView;\n   public TextInputControl messageTextField;\n   public TextFlow topicText;\n   public Hyperlink discordLink;\n \n+  private final MapChangeListener<String, ChatChannelUser> usersChangeListener = change -> {\n+    if (change.wasAdded()) {\n+      onPlayerConnected(change.getValueAdded().getUsername());\n+    } else if (change.wasRemoved()) {\n+      onPlayerDisconnected(change.getValueRemoved().getUsername());\n+    }\n+  };\n+\n   private ChatChannel channel;\n-  private MapChangeListener<String, ChatChannelUser> usersChangeListener;\n \n   // TODO cut dependencies\n   public MatchmakingChatController(UserService userService,\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex 198df355..d8aef105 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -52,20 +54,14 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private ChatChannel channel;\n \n   // TODO cut dependencies\n-  public MatchmakingChatController(UserService userService,\n-                                   PreferencesService preferencesService,\n-                                   PlayerService playerService,\n-                                   TimeService timeService,\n-                                   I18n i18n,\n-                                   NotificationService notificationService,\n-                                   UiService uiService,\n-                                   EventBus eventBus,\n-                                   AudioService audioService,\n-                                   ChatService chatService,\n-                                   WebViewConfigurer webViewConfigurer,\n-                                   CountryFlagService countryFlagService,\n-                                   EmoticonService emoticonService) {\n-    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService);\n+  public MatchmakingChatController(UserService userService, PreferencesService preferencesService,\n+                                   PlayerService playerService, TimeService timeService, I18n i18n,\n+                                   NotificationService notificationService, UiService uiService, EventBus eventBus,\n+                                   AudioService audioService, ChatService chatService,\n+                                   WebViewConfigurer webViewConfigurer, CountryFlagService countryFlagService,\n+                                   EmoticonService emoticonService, ChatPrefs chatPrefs,\n+                                   NotificationPrefs notificationPrefs) {\n+    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService, chatPrefs, notificationPrefs);\n   }\n \n   @Override\n", "next_change": {"commit": "ac8669087b7b29ade57a46217f70a569716d17fe", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex d8aef105..b91cf2ea 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -65,16 +69,21 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   }\n \n   @Override\n-  public Tab getRoot() {\n-    return matchmakingChatTabRoot;\n-  }\n+  public void initialize() {\n+    super.initialize();\n+    matchmakingChatTabRoot.idProperty().bind(receiver);\n+    matchmakingChatTabRoot.textProperty().bind(receiver);\n+\n+    receiver.addListener(((observable, oldValue, newValue) -> {\n+      if (oldValue != null) {\n+        chatService.removeUsersListener(oldValue, weakUsersChangeListener);\n+      }\n+\n+      if (newValue != null) {\n+        chatService.addUsersListener(newValue, weakUsersChangeListener);\n+      }\n+    }));\n \n-  public void setChannel(String partyName) {\n-    channel = chatService.getOrCreateChannel(partyName);\n-    chatService.joinChannel(partyName);\n-    setReceiver(partyName);\n-    matchmakingChatTabRoot.setId(partyName);\n-    matchmakingChatTabRoot.setText(partyName);\n     String topic = i18n.get(\"teammatchmaking.chat.topic\");\n     topicText.getChildren().clear();\n     Arrays.stream(topic.split(\"\\\\s\")).forEach(word -> {\n", "next_change": {"commit": "b86f5c8e62200ff540330a38577f87f3aa678f42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex b91cf2ea..dc9fd0f1 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -71,16 +68,16 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   @Override\n   public void initialize() {\n     super.initialize();\n-    matchmakingChatTabRoot.idProperty().bind(receiver);\n-    matchmakingChatTabRoot.textProperty().bind(receiver);\n+    matchmakingChatTabRoot.idProperty().bind(channelName);\n+    matchmakingChatTabRoot.textProperty().bind(channelName);\n \n-    receiver.addListener(((observable, oldValue, newValue) -> {\n+    chatChannel.addListener(((observable, oldValue, newValue) -> {\n       if (oldValue != null) {\n-        chatService.removeUsersListener(oldValue, weakUsersChangeListener);\n+        oldValue.removeUserListener(usersChangeListener);\n       }\n \n       if (newValue != null) {\n-        chatService.addUsersListener(newValue, weakUsersChangeListener);\n+        newValue.addUsersListeners(usersChangeListener);\n       }\n     }));\n \n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex ff7cc970..198df355 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -52,20 +57,15 @@ public class MatchmakingChatController extends AbstractChatTabController {\n                                    PlayerService playerService,\n                                    TimeService timeService,\n                                    I18n i18n,\n-                                   ImageUploadService imageUploadService,\n                                    NotificationService notificationService,\n-                                   ReportingService reportingService,\n                                    UiService uiService,\n                                    EventBus eventBus,\n                                    AudioService audioService,\n                                    ChatService chatService,\n                                    WebViewConfigurer webViewConfigurer,\n                                    CountryFlagService countryFlagService,\n-                                   ChatUserService chatUserService, ApplicationEventPublisher applicationEventPublisher) {\n-    super(webViewConfigurer, userService, chatService, preferencesService, playerService, audioService,\n-        timeService, i18n, imageUploadService, notificationService, reportingService, uiService,\n-        eventBus, countryFlagService, chatUserService);\n-    this.applicationEventPublisher = applicationEventPublisher;\n+                                   EmoticonService emoticonService) {\n+    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService);\n   }\n \n   @Override\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex 198df355..d8aef105 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -52,20 +54,14 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   private ChatChannel channel;\n \n   // TODO cut dependencies\n-  public MatchmakingChatController(UserService userService,\n-                                   PreferencesService preferencesService,\n-                                   PlayerService playerService,\n-                                   TimeService timeService,\n-                                   I18n i18n,\n-                                   NotificationService notificationService,\n-                                   UiService uiService,\n-                                   EventBus eventBus,\n-                                   AudioService audioService,\n-                                   ChatService chatService,\n-                                   WebViewConfigurer webViewConfigurer,\n-                                   CountryFlagService countryFlagService,\n-                                   EmoticonService emoticonService) {\n-    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService);\n+  public MatchmakingChatController(UserService userService, PreferencesService preferencesService,\n+                                   PlayerService playerService, TimeService timeService, I18n i18n,\n+                                   NotificationService notificationService, UiService uiService, EventBus eventBus,\n+                                   AudioService audioService, ChatService chatService,\n+                                   WebViewConfigurer webViewConfigurer, CountryFlagService countryFlagService,\n+                                   EmoticonService emoticonService, ChatPrefs chatPrefs,\n+                                   NotificationPrefs notificationPrefs) {\n+    super(userService, chatService, preferencesService, playerService, audioService, timeService, i18n, notificationService, uiService, eventBus, webViewConfigurer, emoticonService, countryFlagService, chatPrefs, notificationPrefs);\n   }\n \n   @Override\n", "next_change": {"commit": "ac8669087b7b29ade57a46217f70a569716d17fe", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex d8aef105..b91cf2ea 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -65,16 +69,21 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   }\n \n   @Override\n-  public Tab getRoot() {\n-    return matchmakingChatTabRoot;\n-  }\n+  public void initialize() {\n+    super.initialize();\n+    matchmakingChatTabRoot.idProperty().bind(receiver);\n+    matchmakingChatTabRoot.textProperty().bind(receiver);\n+\n+    receiver.addListener(((observable, oldValue, newValue) -> {\n+      if (oldValue != null) {\n+        chatService.removeUsersListener(oldValue, weakUsersChangeListener);\n+      }\n+\n+      if (newValue != null) {\n+        chatService.addUsersListener(newValue, weakUsersChangeListener);\n+      }\n+    }));\n \n-  public void setChannel(String partyName) {\n-    channel = chatService.getOrCreateChannel(partyName);\n-    chatService.joinChannel(partyName);\n-    setReceiver(partyName);\n-    matchmakingChatTabRoot.setId(partyName);\n-    matchmakingChatTabRoot.setText(partyName);\n     String topic = i18n.get(\"teammatchmaking.chat.topic\");\n     topicText.getChildren().clear();\n     Arrays.stream(topic.split(\"\\\\s\")).forEach(word -> {\n", "next_change": {"commit": "b86f5c8e62200ff540330a38577f87f3aa678f42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\nindex b91cf2ea..dc9fd0f1 100644\n--- a/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n+++ b/src/main/java/com/faforever/client/chat/MatchmakingChatController.java\n", "chunk": "@@ -71,16 +68,16 @@ public class MatchmakingChatController extends AbstractChatTabController {\n   @Override\n   public void initialize() {\n     super.initialize();\n-    matchmakingChatTabRoot.idProperty().bind(receiver);\n-    matchmakingChatTabRoot.textProperty().bind(receiver);\n+    matchmakingChatTabRoot.idProperty().bind(channelName);\n+    matchmakingChatTabRoot.textProperty().bind(channelName);\n \n-    receiver.addListener(((observable, oldValue, newValue) -> {\n+    chatChannel.addListener(((observable, oldValue, newValue) -> {\n       if (oldValue != null) {\n-        chatService.removeUsersListener(oldValue, weakUsersChangeListener);\n+        oldValue.removeUserListener(usersChangeListener);\n       }\n \n       if (newValue != null) {\n-        chatService.addUsersListener(newValue, weakUsersChangeListener);\n+        newValue.addUsersListeners(usersChangeListener);\n       }\n     }));\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "292382c68442a30891549e67549fcf1381bf578f", "committedDate": "2021-01-29 19:16:50 -0500", "message": "Add discord invite over matchmaker chat (#2131)"}, {"oid": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "committedDate": "2021-02-03 22:41:53 -0500", "message": "Clean Chat State Code (#2133)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "9d05da005eac92c3e15ba3dd87dcb032cc110b05", "committedDate": "2021-09-28 22:11:28 -0400", "message": "Remove usages of applicationEventPublishers"}, {"oid": "cf1a484e8a3aacb3efeff891bea28f2525a2d618", "committedDate": "2021-12-05 10:28:56 -0500", "message": "Support emojis (#2430)"}, {"oid": "42787d4e234cd855f7d8950499f2a2d1e65a4082", "committedDate": "2022-03-21 19:49:36 -0400", "message": "Fix Join Discord Events (#2625)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "acf47e326a338fee2f29e83f11035e9112780aa5", "committedDate": "2023-04-20 19:17:43 -0400", "message": "Allow private chat tab to be garbage collected when closed (#2957)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwODk0MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536208940", "body": "duplicate code, please put into dedicated method", "bodyText": "duplicate code, please put into dedicated method", "bodyHTML": "<p dir=\"auto\">duplicate code, please put into dedicated method</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:09:17Z", "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -331,9 +339,17 @@ public ReadOnlyBooleanProperty gameRunningProperty() {\n       return gameDirectoryFuture.thenCompose(path -> joinGame(game, password));\n     }\n \n-    log.info(\"Joining game: '{}' ({})\", game.getTitle(), game.getId());\n+    if (inMatchmakerQueue.get()) {\n+      notificationService.addNotification(new ImmediateNotification(\n+          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.title\"),\n+          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.message\"),\n+          Severity.WARN,\n+          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n+      ));\n+      return completedFuture(null);\n+    }", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 097e99b9..d7556446 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -340,12 +342,7 @@ public class GameService implements InitializingBean {\n     }\n \n     if (inMatchmakerQueue.get()) {\n-      notificationService.addNotification(new ImmediateNotification(\n-          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.title\"),\n-          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.message\"),\n-          Severity.WARN,\n-          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n-      ));\n+      addAlreadyInQueueNotification();\n       return completedFuture(null);\n     }\n \n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex d7556446..097e99b9 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -342,7 +340,12 @@ public class GameService implements InitializingBean {\n     }\n \n     if (inMatchmakerQueue.get()) {\n-      addAlreadyInQueueNotification();\n+      notificationService.addNotification(new ImmediateNotification(\n+          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.title\"),\n+          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.message\"),\n+          Severity.WARN,\n+          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n+      ));\n       return completedFuture(null);\n     }\n \n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 097e99b9..08a0594e 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -340,12 +342,7 @@ public class GameService implements InitializingBean {\n     }\n \n     if (inMatchmakerQueue.get()) {\n-      notificationService.addNotification(new ImmediateNotification(\n-          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.title\"),\n-          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.message\"),\n-          Severity.WARN,\n-          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n-      ));\n+      addAlreadyInQueueNotification();\n       return completedFuture(null);\n     }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 097e99b9..725db3c0 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -340,12 +342,7 @@ public class GameService implements InitializingBean {\n     }\n \n     if (inMatchmakerQueue.get()) {\n-      notificationService.addNotification(new ImmediateNotification(\n-          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.title\"),\n-          i18n.get(\"teammatchmaking.notification.customAlreadyInQueue.message\"),\n-          Severity.WARN,\n-          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n-      ));\n+      addAlreadyInQueueNotification();\n       return completedFuture(null);\n     }\n \n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 725db3c0..0bd6dadd 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -341,7 +345,7 @@ public class GameService implements InitializingBean {\n       return gameDirectoryFuture.thenCompose(path -> joinGame(game, password));\n     }\n \n-    if (inMatchmakerQueue.get()) {\n+    if (inMatchmakerQueue) {\n       addAlreadyInQueueNotification();\n       return completedFuture(null);\n     }\n", "next_change": {"commit": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 0bd6dadd..ff799183 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -353,44 +333,46 @@ public class GameService implements InitializingBean {\n     log.info(\"Joining game: '{}' ({})\", game.getTitle(), game.getId());\n \n     Map<String, Integer> featuredModVersions = game.getFeaturedModVersions();\n-    Set<String> simModUIds = game.getSimMods().keySet();\n-\n-    return modService.getFeaturedMod(game.getFeaturedMod())\n-        .thenCompose(featuredModBean -> updateGameIfNecessary(featuredModBean, null, featuredModVersions, simModUIds))\n-        .thenAccept(aVoid -> {\n-          try {\n-            modService.enableSimMods(simModUIds);\n-          } catch (IOException e) {\n-            log.warn(\"SimMods could not be enabled\", e);\n-          }\n-        })\n-        .thenCompose(aVoid -> downloadMapIfNecessary(game.getMapFolderName()))\n-        .thenCompose(aVoid -> fafService.requestJoinGame(game.getId(), password))\n-        .thenAccept(gameLaunchMessage -> {\n-          synchronized (currentGame) {\n-            // Store password in case we rehost\n-            game.setPassword(password);\n-            currentGame.set(game);\n-          }\n+    synchronized (game.getSimMods()) {\n+      Set<String> simModUIds = game.getSimMods().keySet();\n+\n+      return modService.getFeaturedMod(game.getFeaturedMod())\n+          .thenCompose(featuredModBean -> updateGameIfNecessary(featuredModBean, null, featuredModVersions, simModUIds))\n+          .thenAccept(aVoid -> {\n+            try {\n+              modService.enableSimMods(simModUIds);\n+            } catch (IOException e) {\n+              log.warn(\"SimMods could not be enabled\", e);\n+            }\n+          })\n+          .thenCompose(aVoid -> downloadMapIfNecessary(game.getMapFolderName()))\n+          .thenCompose(aVoid -> fafService.requestJoinGame(game.getId(), password))\n+          .thenAccept(gameLaunchMessage -> {\n+            synchronized (currentGame) {\n+              // Store password in case we rehost\n+              game.setPassword(password);\n+              currentGame.set(game);\n+            }\n \n-          String ratingType = gameLaunchMessage.getRatingType();\n-          if (ratingType == null) {\n-            log.warn(\"Rating type not in gameLaunchMessage using game rating type\");\n-            ratingType = game.getRatingType();\n-          }\n+            String ratingType = gameLaunchMessage.getRatingType();\n+            if (ratingType == null) {\n+              log.warn(\"Rating type not in gameLaunchMessage using game rating type\");\n+              ratingType = game.getRatingType();\n+            }\n \n-          if (ratingType == null) {\n-            log.warn(\"Rating type not in game using default\");\n-            ratingType = DEFAULT_RATING_TYPE;\n-          }\n+            if (ratingType == null) {\n+              log.warn(\"Rating type not in game using default\");\n+              ratingType = DEFAULT_RATING_TYPE;\n+            }\n \n-          startGame(gameLaunchMessage, null, ratingType);\n-        })\n-        .exceptionally(throwable -> {\n-          log.warn(\"Game could not be joined\", throwable);\n-          notificationService.addImmediateErrorNotification(throwable, \"games.couldNotJoin\");\n-          return null;\n-        });\n+            startGame(gameLaunchMessage, null, ratingType);\n+          })\n+          .exceptionally(throwable -> {\n+            log.warn(\"Game could not be joined\", throwable);\n+            notificationService.addImmediateErrorNotification(throwable, \"games.couldNotJoin\");\n+            return null;\n+          });\n+    }\n   }\n \n   private CompletableFuture<Void> downloadMapIfNecessary(String mapFolderName) {\n", "next_change": {"commit": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex ff799183..5fe7af35 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -333,46 +333,43 @@ public class GameService implements InitializingBean {\n     log.info(\"Joining game: '{}' ({})\", game.getTitle(), game.getId());\n \n     Map<String, Integer> featuredModVersions = game.getFeaturedModVersions();\n-    synchronized (game.getSimMods()) {\n-      Set<String> simModUIds = game.getSimMods().keySet();\n-\n-      return modService.getFeaturedMod(game.getFeaturedMod())\n-          .thenCompose(featuredModBean -> updateGameIfNecessary(featuredModBean, null, featuredModVersions, simModUIds))\n-          .thenAccept(aVoid -> {\n-            try {\n-              modService.enableSimMods(simModUIds);\n-            } catch (IOException e) {\n-              log.warn(\"SimMods could not be enabled\", e);\n-            }\n-          })\n-          .thenCompose(aVoid -> downloadMapIfNecessary(game.getMapFolderName()))\n-          .thenCompose(aVoid -> fafService.requestJoinGame(game.getId(), password))\n-          .thenAccept(gameLaunchMessage -> {\n-            synchronized (currentGame) {\n-              // Store password in case we rehost\n-              game.setPassword(password);\n-              currentGame.set(game);\n-            }\n+    Set<String> simModUIds = game.getSimMods().keySet();\n+    return modService.getFeaturedMod(game.getFeaturedMod())\n+        .thenCompose(featuredModBean -> updateGameIfNecessary(featuredModBean, null, featuredModVersions, simModUIds))\n+        .thenAccept(aVoid -> {\n+          try {\n+            modService.enableSimMods(simModUIds);\n+          } catch (IOException e) {\n+            log.warn(\"SimMods could not be enabled\", e);\n+          }\n+        })\n+        .thenCompose(aVoid -> downloadMapIfNecessary(game.getMapFolderName()))\n+        .thenCompose(aVoid -> fafService.requestJoinGame(game.getId(), password))\n+        .thenAccept(gameLaunchMessage -> {\n+          synchronized (currentGame) {\n+            // Store password in case we rehost\n+            game.setPassword(password);\n+            currentGame.set(game);\n+          }\n \n-            String ratingType = gameLaunchMessage.getRatingType();\n-            if (ratingType == null) {\n-              log.warn(\"Rating type not in gameLaunchMessage using game rating type\");\n-              ratingType = game.getRatingType();\n-            }\n+          String ratingType = gameLaunchMessage.getRatingType();\n+          if (ratingType == null) {\n+            log.warn(\"Rating type not in gameLaunchMessage using game rating type\");\n+            ratingType = game.getRatingType();\n+          }\n \n-            if (ratingType == null) {\n-              log.warn(\"Rating type not in game using default\");\n-              ratingType = DEFAULT_RATING_TYPE;\n-            }\n+          if (ratingType == null) {\n+            log.warn(\"Rating type not in game using default\");\n+            ratingType = DEFAULT_RATING_TYPE;\n+          }\n \n-            startGame(gameLaunchMessage, null, ratingType);\n-          })\n-          .exceptionally(throwable -> {\n-            log.warn(\"Game could not be joined\", throwable);\n-            notificationService.addImmediateErrorNotification(throwable, \"games.couldNotJoin\");\n-            return null;\n-          });\n-    }\n+          startGame(gameLaunchMessage, null, ratingType);\n+        })\n+        .exceptionally(throwable -> {\n+          log.warn(\"Game could not be joined\", throwable);\n+          notificationService.addImmediateErrorNotification(throwable, \"games.couldNotJoin\");\n+          return null;\n+        });\n   }\n \n   private CompletableFuture<Void> downloadMapIfNecessary(String mapFolderName) {\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 5fe7af35..3c77fde1 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -352,21 +326,10 @@ public class GameService implements InitializingBean {\n             currentGame.set(game);\n           }\n \n-          String ratingType = gameLaunchMessage.getRatingType();\n-          if (ratingType == null) {\n-            log.warn(\"Rating type not in gameLaunchMessage using game rating type\");\n-            ratingType = game.getRatingType();\n-          }\n-\n-          if (ratingType == null) {\n-            log.warn(\"Rating type not in game using default\");\n-            ratingType = DEFAULT_RATING_TYPE;\n-          }\n-\n-          startGame(gameLaunchMessage, null, ratingType);\n+          startGame(gameLaunchMessage);\n         })\n         .exceptionally(throwable -> {\n-          log.warn(\"Game could not be joined\", throwable);\n+          log.error(\"Game could not be joined\", throwable);\n           notificationService.addImmediateErrorNotification(throwable, \"games.couldNotJoin\");\n           return null;\n         });\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 3c77fde1..7151b4fa 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -319,18 +328,23 @@ public class GameService implements InitializingBean, DisposableBean {\n         })\n         .thenCompose(aVoid -> downloadMapIfNecessary(game.getMapFolderName()))\n         .thenCompose(aVoid -> fafServerAccessor.requestJoinGame(game.getId(), password))\n-        .thenAccept(gameLaunchMessage -> {\n+        .thenCompose(gameLaunchMessage -> {\n           synchronized (currentGame) {\n             // Store password in case we rehost\n             game.setPassword(password);\n             currentGame.set(game);\n           }\n \n-          startGame(gameLaunchMessage);\n+          return startGame(gameLaunchMessage);\n         })\n         .exceptionally(throwable -> {\n+          throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n           log.error(\"Game could not be joined\", throwable);\n-          notificationService.addImmediateErrorNotification(throwable, \"games.couldNotJoin\");\n+          if (throwable instanceof NotifiableException) {\n+            notificationService.addErrorNotification((NotifiableException) throwable);\n+          } else {\n+            notificationService.addImmediateErrorNotification(throwable, \"games.couldNotJoin\");\n+          }\n           return null;\n         });\n   }\n", "next_change": {"commit": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 7151b4fa..eaa6d8dc 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -328,20 +395,20 @@ public class GameService implements InitializingBean, DisposableBean {\n         })\n         .thenCompose(aVoid -> downloadMapIfNecessary(game.getMapFolderName()))\n         .thenCompose(aVoid -> fafServerAccessor.requestJoinGame(game.getId(), password))\n-        .thenCompose(gameLaunchMessage -> {\n+        .thenCompose(gameLaunchResponse -> {\n           synchronized (currentGame) {\n             // Store password in case we rehost\n             game.setPassword(password);\n             currentGame.set(game);\n           }\n \n-          return startGame(gameLaunchMessage);\n+          return startGame(gameMapper.map(gameLaunchResponse));\n         })\n         .exceptionally(throwable -> {\n           throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n           log.error(\"Game could not be joined\", throwable);\n-          if (throwable instanceof NotifiableException) {\n-            notificationService.addErrorNotification((NotifiableException) throwable);\n+          if (throwable instanceof NotifiableException notifiableException) {\n+            notificationService.addErrorNotification(notifiableException);\n           } else {\n             notificationService.addImmediateErrorNotification(throwable, \"games.couldNotJoin\");\n           }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "7262cedf49eaa15fdb65186350641dfb8c55c789", "committedDate": "2021-02-06 00:34:16 -0500", "message": "Add function for checking if we can start the replay"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "912afca1fe8607fe4d9b54a5c7292a7c227562d8", "committedDate": "2021-02-22 08:34:36 -0500", "message": "Fixes #2158"}, {"oid": "9e8012a6aa6e226ac301c370c7feeeee58a0246f", "committedDate": "2021-03-04 04:39:40 -0500", "message": "Add game log file to error message"}, {"oid": "dfb08aba4e85f85704a3ddf8f22ae18aad98f6e9", "committedDate": "2021-03-21 17:30:00 -0400", "message": "Initialize leaderBoardRatings to empty map (#2193)"}, {"oid": "a34452295fd58f2909d8b4407e872436755990f0", "committedDate": "2021-04-10 12:27:54 -0400", "message": "Move IRC to its own log to reduce clutter and remove fxml debug logging (#2204)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "6267dab4c21c53554e5eaaf1282300e4c0dfac2f", "committedDate": "2021-05-08 22:43:31 -0400", "message": "Remove observers from num players (#2234)"}, {"oid": "b4973376cc9ba9e10712ce9f9c1b294a846c4902", "committedDate": "2021-06-13 07:48:53 -0400", "message": "Remember password for rehost (#2267)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "51ab2c11b78a7a27d2148f86042bf5ee2a19bfa7", "committedDate": "2021-06-19 22:43:36 -0400", "message": " make games a synchronized list"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "cf2a55309adb9d57eb3452168baba220f2a2e161", "committedDate": "2021-07-12 19:05:07 -0400", "message": "Mask user details in log file (#2306)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "65578845c57bc4087165d84f6a8dbfd533d1f053", "committedDate": "2021-07-25 16:44:14 -0400", "message": "Use full path in game error for log"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}, {"oid": "176fc85b84d81065204f6b1e75e1c73974fc7899", "committedDate": "2021-09-27 18:42:58 -0400", "message": "Create new gameoptions command line switch (#2339)"}, {"oid": "3fa639d4202ad594ede0c5965b0c28c03e193ff6", "committedDate": "2021-10-14 07:15:30 -0400", "message": "Add ability to close matchmaker games when match is cancelled"}, {"oid": "de179c3dc3dfcda3670dc0eb097d1062d48e052a", "committedDate": "2021-10-18 22:23:08 -0400", "message": "Only notify of cancellation when game is closed (#2396)"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "59a2459fe9ff1c6012a2df0e3fcec2503018e201", "committedDate": "2021-11-06 09:53:53 -0400", "message": "specify all command args and use all games in game count (#2395)"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "faa59d3ad8015f006584a89249f37e5cb175e4ec", "committedDate": "2021-12-13 23:26:00 -0500", "message": "Remove FaInitGenerator and simplify GameUpdate Logic (#2439)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "fe5f0ee3e1ca8df2c6355508f42a73effabad466", "committedDate": "2022-01-23 10:30:21 -0500", "message": "Add button to open log file on crash (#2541)"}, {"oid": "e7906975308e2a81875014823f8cd71519c1ee6d", "committedDate": "2022-01-30 08:42:11 -0500", "message": "Remove connection listener when game service is disposed (#2553)"}, {"oid": "fb1a7dcc58b10241195bd8c590a8d29ec5ae89b2", "committedDate": "2022-02-11 16:53:33 -0500", "message": "Replace embedded login web view with login via browser (#2338)"}, {"oid": "dc8d6fd7906e7b373871850fc5584e0c3b52a31d", "committedDate": "2022-02-16 20:11:12 -0500", "message": "Use synchronized map for gameToId (#2564)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "ab8cf13350f390780dc8bd841c247a250f71de97", "committedDate": "2022-02-20 00:16:01 -0500", "message": "Simplify playerStatus listener logic (#2572)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "d1bda0c6960e6ad884c89f1fa9ec3485d4401334", "committedDate": "2022-04-30 18:36:19 -0400", "message": "Restore Game Session and Lobby connection properly (#2681)"}, {"oid": "e87926ce0612b6e719ad78a8d65fbd741f8de672", "committedDate": "2022-07-07 20:07:01 -0400", "message": "Get coturn servers from the api (#2732)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "cd5ce92de93f23123fa6e8a6f36f9c0478ecde40", "committedDate": "2022-09-18 08:33:12 -0400", "message": "Send division name to game on start for matchmaker games (#2793)"}, {"oid": "d48de94568a61210fc24a19630dfad162bff60f3", "committedDate": "2022-10-16 15:59:29 -0400", "message": "Compatibility changes for ICE adapter with telemetry features (#2815)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "674703b3b7a7601973f527c1e0109a4fa33752e2", "committedDate": "2022-11-13 10:07:29 -0500", "message": "Simplify Game Bean (#2846)"}, {"oid": "e67e8b0e8f0c511e38eea9bf6cbc473d1d6c322f", "committedDate": "2022-11-24 08:53:35 -0500", "message": "Notify that a lobby is full when you watching a replay (#2847)"}, {"oid": "6c36398851869464028531b0b6b2ec71eab1d4c9", "committedDate": "2023-01-28 09:12:54 -0500", "message": "Remove uses of isWindows outside OS determination (#2901)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "9085a382406539e9389e2f881c979b184269f355", "committedDate": "2023-02-20 10:46:45 -0500", "message": "Fix data race between playerinfo and gameinfo messages (#2920)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "c19e7c2f4b3e8f29fbfa742d89a9ec445f3ff272", "committedDate": "2023-02-24 07:39:01 -0500", "message": "Use bindings and properties for team card controllers (#2926)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "1c672a6df80e7c15696969c3ffdb6ebc51e32270", "committedDate": "2023-03-05 07:29:54 -0500", "message": "Only notify friend joined on addition to game"}, {"oid": "05ffe3288430b5457e97bfca99ca52a7cbac994e", "committedDate": "2023-03-05 13:45:07 +0000", "message": "Ensure game list updated when type updated (#2934)"}, {"oid": "d82ab86d6cf39d9f6ec92def641759315ded890f", "committedDate": "2023-03-11 13:03:45 -0500", "message": "Activate player listener on fx thread"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "b65435ba7bd6de5c8f681c0efaf2dd8a71a59977", "committedDate": "2023-03-28 19:37:19 -0400", "message": "Allow watching replays while in queue (#2945)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMDE2MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536210161", "body": "I suggest debug logging of both cases", "bodyText": "I suggest debug logging of both cases", "bodyHTML": "<p dir=\"auto\">I suggest debug logging of both cases</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:11:05Z", "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -534,27 +546,27 @@ public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage>\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, faction, RatingMode.LADDER_1V1);\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode\n             }))\n         .exceptionally(throwable -> {\n-          if (throwable instanceof CancellationException) {\n-            log.info(\"Ranked1v1 search has been cancelled\");\n+          if (throwable.getCause() instanceof CancellationException) {\n+            log.info(\"Matchmaking search has been cancelled\");\n           } else {\n-            log.warn(\"Ranked1v1 could not be started\", throwable);\n+            log.warn(\"Matchmade game could not be started\", throwable);\n           }\n           return null;\n         });\n   }\n \n-  public void stopSearchLadder1v1() {\n-    if (searching1v1.get()) {\n-      fafService.stopSearchingRanked();\n-      searching1v1.set(false);\n+  public void onMatchmakerSearchStopped() {\n+    if (inMatchmakerQueue.get()) {\n+      fafService.stopSearchMatchmaker();\n+      inMatchmakerQueue.set(false);\n     }\n   }", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzExNDkxNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r537114915", "bodyText": "The other case is that inMatchmakerQueue is already false?", "author": "BlackYps", "createdAt": "2020-12-06T20:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMDE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 097e99b9..d7556446 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -562,6 +559,9 @@ public class GameService implements InitializingBean {\n     if (inMatchmakerQueue.get()) {\n       fafService.stopSearchMatchmaker();\n       inMatchmakerQueue.set(false);\n+      log.debug(\"Matchmaker search stopped\");\n+    } else {\n+      log.debug(\"Matchmaker search has already been stopped, ignoring call\");\n     }\n   }\n \n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex d7556446..097e99b9 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -559,9 +562,6 @@ public class GameService implements InitializingBean {\n     if (inMatchmakerQueue.get()) {\n       fafService.stopSearchMatchmaker();\n       inMatchmakerQueue.set(false);\n-      log.debug(\"Matchmaker search stopped\");\n-    } else {\n-      log.debug(\"Matchmaker search has already been stopped, ignoring call\");\n     }\n   }\n \n", "next_change": {"commit": "5e5cc4582645fa056588eb4a4cab463a72c9d682", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 097e99b9..d7556446 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -562,6 +559,9 @@ public class GameService implements InitializingBean {\n     if (inMatchmakerQueue.get()) {\n       fafService.stopSearchMatchmaker();\n       inMatchmakerQueue.set(false);\n+      log.debug(\"Matchmaker search stopped\");\n+    } else {\n+      log.debug(\"Matchmaker search has already been stopped, ignoring call\");\n     }\n   }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 097e99b9..725db3c0 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -562,6 +559,9 @@ public class GameService implements InitializingBean {\n     if (inMatchmakerQueue.get()) {\n       fafService.stopSearchMatchmaker();\n       inMatchmakerQueue.set(false);\n+      log.debug(\"Matchmaker search stopped\");\n+    } else {\n+      log.debug(\"Matchmaker search has already been stopped, ignoring call\");\n     }\n   }\n \n", "next_change": {"commit": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 725db3c0..2cf9d849 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -565,10 +583,14 @@ public class GameService implements InitializingBean {\n     }\n   }\n \n-  public BooleanProperty inMatchmakerQueueProperty() {\n+  public BooleanProperty getInMatchmakerQueueProperty() {\n     return inMatchmakerQueue;\n   }\n \n+  public BooleanProperty getInOthersPartyProperty() {\n+    return inOthersParty;\n+  }\n+\n   /**\n    * Returns the preferences the player is currently in. Returns {@code null} if not in a preferences.\n    */\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 2cf9d849..0bd6dadd 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -574,23 +597,15 @@ public class GameService implements InitializingBean {\n   }\n \n   public void onMatchmakerSearchStopped() {\n-    if (inMatchmakerQueue.get()) {\n+    if (inMatchmakerQueue) {\n       fafService.stopSearchMatchmaker();\n-      inMatchmakerQueue.set(false);\n+      inMatchmakerQueue = false;\n       log.debug(\"Matchmaker search stopped\");\n     } else {\n       log.debug(\"Matchmaker search has already been stopped, ignoring call\");\n     }\n   }\n \n-  public BooleanProperty getInMatchmakerQueueProperty() {\n-    return inMatchmakerQueue;\n-  }\n-\n-  public BooleanProperty getInOthersPartyProperty() {\n-    return inOthersParty;\n-  }\n-\n   /**\n    * Returns the preferences the player is currently in. Returns {@code null} if not in a preferences.\n    */\n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 0bd6dadd..12b2504e 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -566,44 +532,34 @@ public class GameService implements InitializingBean {\n     log.info(\"Matchmaking search has been started\");\n     inMatchmakerQueue = true;\n \n-    return modService.getFeaturedMod(FAF.getTechnicalName())\n+    CompletableFuture<Void> matchmakerFuture = modService.getFeaturedMod(FAF.getTechnicalName())\n         .thenAccept(featuredModBean -> updateGameIfNecessary(featuredModBean, null, emptyMap(), emptySet()))\n         .thenCompose(aVoid -> fafService.startSearchMatchmaker())\n-        .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapname())\n+        .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapName())\n             .thenRun(() -> {\n-              gameLaunchMessage.setArgs(new ArrayList<>(gameLaunchMessage.getArgs()));\n-\n               gameLaunchMessage.getArgs().add(\"/team \" + gameLaunchMessage.getTeam());\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              String ratingType = gameLaunchMessage.getRatingType();\n-\n-              if (ratingType == null) {\n-                log.warn(\"Rating type not in game launch message using default\");\n-                ratingType = DEFAULT_RATING_TYPE;\n-              }\n+              String ratingType = gameLaunchMessage.getLeaderboard();\n \n               startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), ratingType);\n-            }))\n-        .exceptionally(throwable -> {\n-          if (throwable.getCause() instanceof CancellationException) {\n-            log.info(\"Matchmaking search has been cancelled\");\n+            }));\n+\n+    matchmakerFuture.whenComplete((aVoid, throwable) -> {\n+          inMatchmakerQueue = false;\n+          if (throwable != null) {\n+            if (throwable instanceof CancellationException) {\n+              log.info(\"Matchmaking search has been cancelled\");\n+            } else {\n+              log.warn(\"Matchmade game could not be started\", throwable);\n+            }\n           } else {\n-            log.warn(\"Matchmade game could not be started\", throwable);\n+            log.debug(\"Matchmaker queue exited\");\n           }\n-          return null;\n         });\n-  }\n \n-  public void onMatchmakerSearchStopped() {\n-    if (inMatchmakerQueue) {\n-      fafService.stopSearchMatchmaker();\n-      inMatchmakerQueue = false;\n-      log.debug(\"Matchmaker search stopped\");\n-    } else {\n-      log.debug(\"Matchmaker search has already been stopped, ignoring call\");\n-    }\n+    return matchmakerFuture;\n   }\n \n   /**\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 12b2504e..9aa52e8b 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -566,7 +565,7 @@ public class GameService implements InitializingBean {\n    * Returns the preferences the player is currently in. Returns {@code null} if not in a preferences.\n    */\n   @Nullable\n-  public Game getCurrentGame() {\n+  public GameBean getCurrentGame() {\n     synchronized (currentGame) {\n       return currentGame.get();\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "7262cedf49eaa15fdb65186350641dfb8c55c789", "committedDate": "2021-02-06 00:34:16 -0500", "message": "Add function for checking if we can start the replay"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "912afca1fe8607fe4d9b54a5c7292a7c227562d8", "committedDate": "2021-02-22 08:34:36 -0500", "message": "Fixes #2158"}, {"oid": "9e8012a6aa6e226ac301c370c7feeeee58a0246f", "committedDate": "2021-03-04 04:39:40 -0500", "message": "Add game log file to error message"}, {"oid": "dfb08aba4e85f85704a3ddf8f22ae18aad98f6e9", "committedDate": "2021-03-21 17:30:00 -0400", "message": "Initialize leaderBoardRatings to empty map (#2193)"}, {"oid": "a34452295fd58f2909d8b4407e872436755990f0", "committedDate": "2021-04-10 12:27:54 -0400", "message": "Move IRC to its own log to reduce clutter and remove fxml debug logging (#2204)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "6267dab4c21c53554e5eaaf1282300e4c0dfac2f", "committedDate": "2021-05-08 22:43:31 -0400", "message": "Remove observers from num players (#2234)"}, {"oid": "b4973376cc9ba9e10712ce9f9c1b294a846c4902", "committedDate": "2021-06-13 07:48:53 -0400", "message": "Remember password for rehost (#2267)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "51ab2c11b78a7a27d2148f86042bf5ee2a19bfa7", "committedDate": "2021-06-19 22:43:36 -0400", "message": " make games a synchronized list"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "cf2a55309adb9d57eb3452168baba220f2a2e161", "committedDate": "2021-07-12 19:05:07 -0400", "message": "Mask user details in log file (#2306)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "65578845c57bc4087165d84f6a8dbfd533d1f053", "committedDate": "2021-07-25 16:44:14 -0400", "message": "Use full path in game error for log"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}, {"oid": "176fc85b84d81065204f6b1e75e1c73974fc7899", "committedDate": "2021-09-27 18:42:58 -0400", "message": "Create new gameoptions command line switch (#2339)"}, {"oid": "3fa639d4202ad594ede0c5965b0c28c03e193ff6", "committedDate": "2021-10-14 07:15:30 -0400", "message": "Add ability to close matchmaker games when match is cancelled"}, {"oid": "de179c3dc3dfcda3670dc0eb097d1062d48e052a", "committedDate": "2021-10-18 22:23:08 -0400", "message": "Only notify of cancellation when game is closed (#2396)"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "59a2459fe9ff1c6012a2df0e3fcec2503018e201", "committedDate": "2021-11-06 09:53:53 -0400", "message": "specify all command args and use all games in game count (#2395)"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "faa59d3ad8015f006584a89249f37e5cb175e4ec", "committedDate": "2021-12-13 23:26:00 -0500", "message": "Remove FaInitGenerator and simplify GameUpdate Logic (#2439)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "fe5f0ee3e1ca8df2c6355508f42a73effabad466", "committedDate": "2022-01-23 10:30:21 -0500", "message": "Add button to open log file on crash (#2541)"}, {"oid": "e7906975308e2a81875014823f8cd71519c1ee6d", "committedDate": "2022-01-30 08:42:11 -0500", "message": "Remove connection listener when game service is disposed (#2553)"}, {"oid": "fb1a7dcc58b10241195bd8c590a8d29ec5ae89b2", "committedDate": "2022-02-11 16:53:33 -0500", "message": "Replace embedded login web view with login via browser (#2338)"}, {"oid": "dc8d6fd7906e7b373871850fc5584e0c3b52a31d", "committedDate": "2022-02-16 20:11:12 -0500", "message": "Use synchronized map for gameToId (#2564)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "ab8cf13350f390780dc8bd841c247a250f71de97", "committedDate": "2022-02-20 00:16:01 -0500", "message": "Simplify playerStatus listener logic (#2572)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "d1bda0c6960e6ad884c89f1fa9ec3485d4401334", "committedDate": "2022-04-30 18:36:19 -0400", "message": "Restore Game Session and Lobby connection properly (#2681)"}, {"oid": "e87926ce0612b6e719ad78a8d65fbd741f8de672", "committedDate": "2022-07-07 20:07:01 -0400", "message": "Get coturn servers from the api (#2732)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "cd5ce92de93f23123fa6e8a6f36f9c0478ecde40", "committedDate": "2022-09-18 08:33:12 -0400", "message": "Send division name to game on start for matchmaker games (#2793)"}, {"oid": "d48de94568a61210fc24a19630dfad162bff60f3", "committedDate": "2022-10-16 15:59:29 -0400", "message": "Compatibility changes for ICE adapter with telemetry features (#2815)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "674703b3b7a7601973f527c1e0109a4fa33752e2", "committedDate": "2022-11-13 10:07:29 -0500", "message": "Simplify Game Bean (#2846)"}, {"oid": "e67e8b0e8f0c511e38eea9bf6cbc473d1d6c322f", "committedDate": "2022-11-24 08:53:35 -0500", "message": "Notify that a lobby is full when you watching a replay (#2847)"}, {"oid": "6c36398851869464028531b0b6b2ec71eab1d4c9", "committedDate": "2023-01-28 09:12:54 -0500", "message": "Remove uses of isWindows outside OS determination (#2901)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "9085a382406539e9389e2f881c979b184269f355", "committedDate": "2023-02-20 10:46:45 -0500", "message": "Fix data race between playerinfo and gameinfo messages (#2920)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "c19e7c2f4b3e8f29fbfa742d89a9ec445f3ff272", "committedDate": "2023-02-24 07:39:01 -0500", "message": "Use bindings and properties for team card controllers (#2926)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "1c672a6df80e7c15696969c3ffdb6ebc51e32270", "committedDate": "2023-03-05 07:29:54 -0500", "message": "Only notify friend joined on addition to game"}, {"oid": "05ffe3288430b5457e97bfca99ca52a7cbac994e", "committedDate": "2023-03-05 13:45:07 +0000", "message": "Ensure game list updated when type updated (#2934)"}, {"oid": "d82ab86d6cf39d9f6ec92def641759315ded890f", "committedDate": "2023-03-11 13:03:45 -0500", "message": "Activate player listener on fx thread"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "b65435ba7bd6de5c8f681c0efaf2dd8a71a59977", "committedDate": "2023-03-28 19:37:19 -0400", "message": "Allow watching replays while in queue (#2945)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNTAyNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536215026", "body": "Use Lombok `@Data` instead?\r\nGet rid of all the getter and setter below.", "bodyText": "Use Lombok @Data instead?\nGet rid of all the getter and setter below.", "bodyHTML": "<p dir=\"auto\">Use Lombok <code>@Data</code> instead?<br>\nGet rid of all the getter and setter below.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:18:06Z", "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "diffHunk": "@@ -9,32 +9,38 @@\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n+  private String action; // TODO: doesn't exist anymore\n+\n   public static class MatchmakerQueue {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\nindex c27dc705..49139cf9 100644\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n", "chunk": "@@ -4,13 +4,15 @@ import com.faforever.client.remote.domain.FafServerMessage;\n import com.faforever.client.remote.domain.FafServerMessageType;\n import com.faforever.client.remote.domain.RatingRange;\n import com.google.gson.annotations.SerializedName;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.util.List;\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n-  private String action; // TODO: doesn't exist anymore\n-\n+  @Data\n   public static class MatchmakerQueue {\n \n     private String queueName;\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\nindex 49139cf9..c27dc705 100644\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n", "chunk": "@@ -4,15 +4,13 @@ import com.faforever.client.remote.domain.FafServerMessage;\n import com.faforever.client.remote.domain.FafServerMessageType;\n import com.faforever.client.remote.domain.RatingRange;\n import com.google.gson.annotations.SerializedName;\n-import lombok.Data;\n-import lombok.Getter;\n-import lombok.Setter;\n \n import java.util.List;\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n-  @Data\n+  private String action; // TODO: doesn't exist anymore\n+\n   public static class MatchmakerQueue {\n \n     private String queueName;\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\nindex c27dc705..49139cf9 100644\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n", "chunk": "@@ -4,13 +4,15 @@ import com.faforever.client.remote.domain.FafServerMessage;\n import com.faforever.client.remote.domain.FafServerMessageType;\n import com.faforever.client.remote.domain.RatingRange;\n import com.google.gson.annotations.SerializedName;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.util.List;\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n-  private String action; // TODO: doesn't exist anymore\n-\n+  @Data\n   public static class MatchmakerQueue {\n \n     private String queueName;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\nindex c27dc705..49139cf9 100644\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n", "chunk": "@@ -4,13 +4,15 @@ import com.faforever.client.remote.domain.FafServerMessage;\n import com.faforever.client.remote.domain.FafServerMessageType;\n import com.faforever.client.remote.domain.RatingRange;\n import com.google.gson.annotations.SerializedName;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.util.List;\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n-  private String action; // TODO: doesn't exist anymore\n-\n+  @Data\n   public static class MatchmakerQueue {\n \n     private String queueName;\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\nindex 49139cf9..258e5401 100644\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n", "chunk": "@@ -10,16 +10,21 @@ import lombok.Setter;\n \n import java.util.List;\n \n+@Getter\n+@Setter\n public class MatchmakerInfoMessage extends FafServerMessage {\n+  private List<MatchmakerQueue> queues;\n+\n+  public MatchmakerInfoMessage() {\n+    super(FafServerMessageType.MATCHMAKER_INFO);\n+  }\n \n   @Data\n   public static class MatchmakerQueue {\n \n     private String queueName;\n     private String queuePopTime;\n-    @SerializedName(\"team_size\")\n     private int teamSize;\n-    @SerializedName(\"num_players\")\n     private int numPlayers;\n \n     // The boundaries indicate the ranges applicable for other searching players,\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\ndeleted file mode 100644\nindex 258e5401..00000000\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,47 +0,0 @@\n-package com.faforever.client.rankedmatch;\n-\n-import com.faforever.client.remote.domain.FafServerMessage;\n-import com.faforever.client.remote.domain.FafServerMessageType;\n-import com.faforever.client.remote.domain.RatingRange;\n-import com.google.gson.annotations.SerializedName;\n-import lombok.Data;\n-import lombok.Getter;\n-import lombok.Setter;\n-\n-import java.util.List;\n-\n-@Getter\n-@Setter\n-public class MatchmakerInfoMessage extends FafServerMessage {\n-  private List<MatchmakerQueue> queues;\n-\n-  public MatchmakerInfoMessage() {\n-    super(FafServerMessageType.MATCHMAKER_INFO);\n-  }\n-\n-  @Data\n-  public static class MatchmakerQueue {\n-\n-    private String queueName;\n-    private String queuePopTime;\n-    private int teamSize;\n-    private int numPlayers;\n-\n-    // The boundaries indicate the ranges applicable for other searching players,\n-    // boundarys.size() therefore indicates the players currently in queue\n-    @SerializedName(\"boundary_75s\")\n-    private List<RatingRange> boundary75s;\n-    @SerializedName(\"boundary_80s\")\n-    private List<RatingRange> boundary80s;\n-\n-    public MatchmakerQueue(String queueName, String queuePopTime, int teamSize, int numPlayers, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n-      this.queueName = queueName;\n-      this.queuePopTime = queuePopTime;\n-      this.teamSize = teamSize;\n-      this.numPlayers = numPlayers;\n-      this.boundary75s = boundary75s;\n-      this.boundary80s = boundary80s;\n-    }\n-\n-  }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNzk3OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536217978", "body": "Please resolve the todo", "bodyText": "Please resolve the todo", "bodyHTML": "<p dir=\"auto\">Please resolve the todo</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:22:38Z", "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -96,16 +96,17 @@\n     return fafServerAccessor.requestJoinGame(gameId, password);\n   }\n \n-  public CompletableFuture<GameLaunchMessage> startSearchLadder1v1(Faction faction) {\n-    return fafServerAccessor.startSearchLadder1v1(faction);\n+  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+    return fafServerAccessor.startSearchMatchmaker();\n   }\n \n-  public void requestMatchmakerInfo() {\n-    fafServerAccessor.requestMatchmakerInfo();\n+  public void stopSearchMatchmaker() {\n+    fafServerAccessor.stopSearchMatchmaker();\n   }\n \n-  public void stopSearchingRanked() {\n-    fafServerAccessor.stopSearchingRanked();\n+  //TODO: use for TMM or remove", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 7e4874b0..c010983f 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -104,7 +104,6 @@ public class FafService {\n     fafServerAccessor.stopSearchMatchmaker();\n   }\n \n-  //TODO: use for TMM or remove\n   public void requestMatchmakerInfo() {\n     fafServerAccessor.requestMatchmakerInfo();\n   }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex c010983f..7e4874b0 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -104,6 +104,7 @@ public class FafService {\n     fafServerAccessor.stopSearchMatchmaker();\n   }\n \n+  //TODO: use for TMM or remove\n   public void requestMatchmakerInfo() {\n     fafServerAccessor.requestMatchmakerInfo();\n   }\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 7e4874b0..c010983f 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -104,7 +104,6 @@ public class FafService {\n     fafServerAccessor.stopSearchMatchmaker();\n   }\n \n-  //TODO: use for TMM or remove\n   public void requestMatchmakerInfo() {\n     fafServerAccessor.requestMatchmakerInfo();\n   }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 7e4874b0..f8bdcfe7 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -104,7 +105,6 @@ public class FafService {\n     fafServerAccessor.stopSearchMatchmaker();\n   }\n \n-  //TODO: use for TMM or remove\n   public void requestMatchmakerInfo() {\n     fafServerAccessor.requestMatchmakerInfo();\n   }\n", "next_change": {"commit": "9653a226f9b0238b7692400162268b46bfa257f5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex f8bdcfe7..6492c939 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -113,8 +122,13 @@ public class FafService {\n     fafServerAccessor.sendGpgMessage(message);\n   }\n \n-  public CompletableFuture<LoginMessage> connectAndLogIn(String username, String password) {\n-    return fafServerAccessor.connectAndLogIn(username, password);\n+  @Async\n+  public CompletableFuture<LoginMessage> connectToServer(String token) {\n+    return fafServerAccessor.connectAndLogin(token);\n+  }\n+\n+  public void authorizeApi() {\n+    fafApiAccessor.authorize();\n   }\n \n   public void disconnect() {\n", "next_change": {"commit": "76394d8b1296276d51a4e8433d3365024db80e80", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 6492c939..c42f2493 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -118,13 +118,13 @@ public class FafService {\n     fafServerAccessor.requestMatchmakerInfo();\n   }\n \n-  public void sendGpgGameMessage(GpgGameMessage message) {\n+  public void sendGpgMessage(GpgOutboundMessage message) {\n     fafServerAccessor.sendGpgMessage(message);\n   }\n \n   @Async\n-  public CompletableFuture<LoginMessage> connectToServer(String token) {\n-    return fafServerAccessor.connectAndLogin(token);\n+  public CompletableFuture<LoginMessage> connectToServer() {\n+    return fafServerAccessor.connectAndLogin();\n   }\n \n   public void authorizeApi() {\n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex c42f2493..404eb9b5 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -102,29 +94,25 @@ public class FafService {\n     return fafServerAccessor.connectionStateProperty();\n   }\n \n-  public CompletableFuture<GameLaunchMessage> requestJoinGame(int gameId, String password) {\n+  public CompletableFuture<GameLaunchResponse> requestJoinGame(int gameId, String password) {\n     return fafServerAccessor.requestJoinGame(gameId, password);\n   }\n \n-  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+  public CompletableFuture<GameLaunchResponse> startSearchMatchmaker() {\n     return fafServerAccessor.startSearchMatchmaker();\n   }\n \n-  public void stopSearchMatchmaker() {\n-    fafServerAccessor.stopSearchMatchmaker();\n-  }\n-\n   public void requestMatchmakerInfo() {\n     fafServerAccessor.requestMatchmakerInfo();\n   }\n \n-  public void sendGpgMessage(GpgOutboundMessage message) {\n+  public void sendGpgMessage(GpgGameOutboundMessage message) {\n     fafServerAccessor.sendGpgMessage(message);\n   }\n \n   @Async\n-  public CompletableFuture<LoginMessage> connectToServer() {\n-    return fafServerAccessor.connectAndLogin();\n+  public CompletableFuture<LoginSuccessResponse> connectToServer() {\n+    return fafServerAccessor.connectAndLogIn();\n   }\n \n   public void authorizeApi() {\n", "next_change": {"commit": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 404eb9b5..4b45f279 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -110,7 +107,6 @@ public class FafService {\n     fafServerAccessor.sendGpgMessage(message);\n   }\n \n-  @Async\n   public CompletableFuture<LoginSuccessResponse> connectToServer() {\n     return fafServerAccessor.connectAndLogIn();\n   }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 4b45f279..5b7610e3 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -1,626 +1,13 @@\n package com.faforever.client.remote;\n \n-import com.faforever.client.api.FafApiAccessor;\n-import com.faforever.client.avatar.AvatarBean;\n-import com.faforever.client.avatar.event.AvatarChangedEvent;\n-import com.faforever.client.clan.Clan;\n-import com.faforever.client.coop.CoopMission;\n-import com.faforever.client.domain.RatingHistoryDataPoint;\n-import com.faforever.client.game.NewGameInfo;\n-import com.faforever.client.leaderboard.Leaderboard;\n-import com.faforever.client.leaderboard.LeaderboardEntry;\n-import com.faforever.client.map.MapBean;\n-import com.faforever.client.mod.FeaturedMod;\n-import com.faforever.client.mod.ModVersion;\n-import com.faforever.client.net.ConnectionState;\n-import com.faforever.client.player.Player;\n-import com.faforever.client.replay.Replay;\n-import com.faforever.client.reporting.ModerationReport;\n-import com.faforever.client.teammatchmaking.MatchmakingQueue;\n-import com.faforever.client.tournament.TournamentBean;\n-import com.faforever.client.tutorial.TutorialCategory;\n-import com.faforever.client.vault.review.Review;\n-import com.faforever.client.vault.search.SearchController.SearchConfig;\n-import com.faforever.client.vault.search.SearchController.SortConfig;\n-import com.faforever.commons.api.dto.AchievementDefinition;\n-import com.faforever.commons.api.dto.CoopResult;\n-import com.faforever.commons.api.dto.FeaturedModFile;\n-import com.faforever.commons.api.dto.Game;\n-import com.faforever.commons.api.dto.GameReview;\n-import com.faforever.commons.api.dto.MapVersion;\n-import com.faforever.commons.api.dto.MapVersionReview;\n-import com.faforever.commons.api.dto.MeResult;\n-import com.faforever.commons.api.dto.ModVersionReview;\n-import com.faforever.commons.api.dto.NeroxisGeneratorParams;\n-import com.faforever.commons.api.dto.PlayerAchievement;\n-import com.faforever.commons.api.dto.PlayerEvent;\n-import com.faforever.commons.io.ByteCountListener;\n-import com.faforever.commons.lobby.Faction;\n-import com.faforever.commons.lobby.GameLaunchResponse;\n-import com.faforever.commons.lobby.GpgGameOutboundMessage;\n-import com.faforever.commons.lobby.IceServer;\n-import com.faforever.commons.lobby.LoginSuccessResponse;\n-import com.faforever.commons.lobby.MatchmakerState;\n-import com.faforever.commons.lobby.ServerMessage;\n-import com.google.common.eventbus.EventBus;\n-import javafx.beans.property.ReadOnlyObjectProperty;\n import lombok.RequiredArgsConstructor;\n-import org.jetbrains.annotations.NotNull;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.stereotype.Service;\n-import org.springframework.util.Assert;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import reactor.util.function.Tuple2;\n-\n-import java.nio.file.Path;\n-import java.util.Collection;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-\n-import static java.util.stream.Collectors.toList;\n \n @Lazy\n @Service\n @RequiredArgsConstructor\n+@Deprecated\n public class FafService {\n \n-  private final FafServerAccessor fafServerAccessor;\n-  private final FafApiAccessor fafApiAccessor;\n-  private final EventBus eventBus;\n-\n-  public <T extends ServerMessage> void addOnMessageListener(Class<T> type, Consumer<T> listener) {\n-    fafServerAccessor.addEventListener(type, listener);\n-  }\n-\n-  public CompletableFuture<GameLaunchResponse> requestHostGame(NewGameInfo newGameInfo) {\n-    return fafServerAccessor.requestHostGame(newGameInfo);\n-  }\n-\n-  public ConnectionState getLobbyConnectionState() {\n-    return fafServerAccessor.getConnectionState();\n-  }\n-\n-  public ReadOnlyObjectProperty<ConnectionState> connectionStateProperty() {\n-    return fafServerAccessor.connectionStateProperty();\n-  }\n-\n-  public CompletableFuture<GameLaunchResponse> requestJoinGame(int gameId, String password) {\n-    return fafServerAccessor.requestJoinGame(gameId, password);\n-  }\n-\n-  public CompletableFuture<GameLaunchResponse> startSearchMatchmaker() {\n-    return fafServerAccessor.startSearchMatchmaker();\n-  }\n-\n-  public void requestMatchmakerInfo() {\n-    fafServerAccessor.requestMatchmakerInfo();\n-  }\n-\n-  public void sendGpgMessage(GpgGameOutboundMessage message) {\n-    fafServerAccessor.sendGpgMessage(message);\n-  }\n-\n-  public CompletableFuture<LoginSuccessResponse> connectToServer() {\n-    return fafServerAccessor.connectAndLogIn();\n-  }\n-\n-  public void authorizeApi() {\n-    fafApiAccessor.authorize();\n-  }\n-\n-  public void disconnect() {\n-    fafServerAccessor.disconnect();\n-  }\n-\n-  public void addFriend(Player player) {\n-    fafServerAccessor.addFriend(player.getId());\n-  }\n-\n-  public void addFoe(Player player) {\n-    fafServerAccessor.addFoe(player.getId());\n-  }\n-\n-  public void removeFriend(Player player) {\n-    fafServerAccessor.removeFriend(player.getId());\n-  }\n-\n-  public void removeFoe(Player player) {\n-    fafServerAccessor.removeFoe(player.getId());\n-  }\n-\n-  public void notifyGameEnded() {\n-    fafServerAccessor.sendGpgMessage(GpgGameOutboundMessage.Companion.gameStateMessage(\"Ended\"));\n-  }\n-\n-  public CompletableFuture<List<Leaderboard>> getLeaderboards() {\n-    return fafApiAccessor.getLeaderboards()\n-        .map(Leaderboard::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<LeaderboardEntry>> getLeaderboardEntriesForPlayer(int playerId) {\n-    return fafApiAccessor.getLeaderboardEntriesForPlayer(playerId)\n-        .map(LeaderboardEntry::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<LeaderboardEntry>> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n-    return fafApiAccessor.getAllLeaderboardEntries(leaderboardTechnicalName)\n-        .map(LeaderboardEntry::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<LeaderboardEntry>, Integer>> getLeaderboardEntriesWithPageCount(String leaderboardTechnicalName, int count, int page) {\n-    return fafApiAccessor.getLeaderboardEntriesWithTotalPages(leaderboardTechnicalName, count, page)\n-        .map(tuple -> tuple.mapT1(entries ->\n-            entries.stream().map(LeaderboardEntry::fromDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<ModVersion>> getMods() {\n-    return fafApiAccessor.getMods()\n-        .map(ModVersion::fromModDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Optional<com.faforever.client.mod.ModVersion>> getModVersion(String uid) {\n-    return fafApiAccessor.getModVersion(uid)\n-        .map(modVersion -> ModVersion.fromDto(modVersion, null))\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public void reconnect() {\n-    fafServerAccessor.reconnect();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getMostPlayedMapsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getMostPlayedMapsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Integer> getRecommendedMapPageCount(int count) {\n-    return fafApiAccessor.getRecommendedMapsWithTotalPages(count, 1).map(Tuple2::getT2).toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getRecommendedMapsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getRecommendedMapsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getMapsByIdWithPageCount(List<Integer> mapIdList, int count, int page) {\n-    return fafApiAccessor.getMapsByIdWithTotalPages(mapIdList, count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getHighestRatedMapsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getHighestRatedMapsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getNewestMapsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getNewestMapsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<CoopMission>> getCoopMaps() {\n-    return fafApiAccessor.getCoopMissions()\n-        .map(CoopMission::fromCoopInfo)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<AvatarBean>> getAvailableAvatars() {\n-    return fafServerAccessor.getAvailableAvatars().thenApply(avatars ->\n-        avatars.stream().map(AvatarBean::fromAvatar).collect(toList()));\n-  }\n-\n-  public CompletableFuture<MeResult> getCurrentUser() {\n-    return fafApiAccessor.getMe().toFuture();\n-  }\n-\n-  public CompletableFuture<Set<String>> getPermissions() {\n-    return fafApiAccessor.getMe().toFuture().thenApply(MeResult::getPermissions);\n-  }\n-\n-  public void selectAvatar(AvatarBean avatar) {\n-    fafServerAccessor.selectAvatar(avatar == null ? null : avatar.getUrl());\n-    eventBus.post(new AvatarChangedEvent(avatar));\n-  }\n-\n-  public CompletableFuture<List<CoopResult>> getCoopLeaderboard(CoopMission mission, int numberOfPlayers) {\n-    return fafApiAccessor.getCoopLeaderboard(mission.getId(), numberOfPlayers).collectList().toFuture();\n-  }\n-\n-  public CompletableFuture<List<RatingHistoryDataPoint>> getRatingHistory(int playerId, int leaderboardId) {\n-    return fafApiAccessor.getRatingJournal(playerId, leaderboardId)\n-        .filter(gamePlayerStats -> gamePlayerStats.getCreateTime() != null\n-            && gamePlayerStats.getMeanAfter() != null\n-            && gamePlayerStats.getDeviationAfter() != null)\n-        .map(entry -> new RatingHistoryDataPoint(entry.getGamePlayerStats().getScoreTime(), entry.getMeanAfter(), entry.getDeviationAfter()))\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<FeaturedMod>> getFeaturedMods() {\n-    return fafApiAccessor.getFeaturedMods()\n-        .sort(Comparator.comparingInt(com.faforever.commons.api.dto.FeaturedMod::getOrder))\n-        .map(FeaturedMod::fromFeaturedMod)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<FeaturedModFile>> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    return fafApiAccessor.getFeaturedModFiles(featuredMod, version).collectList().toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<Replay>, Integer>> getNewestReplaysWithPageCount(int topElementCount, int page) {\n-    return fafApiAccessor.getNewestReplaysWithTotalPages(topElementCount, page)\n-        .map(tuple -> tuple.mapT1(replays ->\n-            replays.stream().map(Replay::fromDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<Replay>, Integer>> getHighestRatedReplaysWithPageCount(int topElementCount, int page) {\n-    return fafApiAccessor.getHighestRatedReplaysWithTotalPages(topElementCount, page)\n-        .map(tuple -> tuple.mapT1(replays ->\n-            replays.stream().map(Replay::fromDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Void> uploadMod(Path modFile, ByteCountListener byteListener) {\n-    return fafApiAccessor.uploadMod(modFile, byteListener).toFuture();\n-  }\n-\n-  public CompletableFuture<Void> uploadMap(Path mapFile, boolean isRanked, ByteCountListener byteListener) {\n-    return fafApiAccessor.uploadMap(mapFile, isRanked, byteListener).toFuture();\n-  }\n-\n-  public CompletableFuture<Map<String, PlayerEvent>> getPlayerEvents(int playerId) {\n-    return fafApiAccessor.getPlayerEvents(playerId)\n-        .collectMap(playerEvent -> playerEvent.getEvent().getId())\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<PlayerAchievement>> getPlayerAchievements(int playerId) {\n-    return fafApiAccessor.getPlayerAchievements(playerId)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<AchievementDefinition>> getAchievementDefinitions() {\n-    return fafApiAccessor.getAchievementDefinitions()\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<AchievementDefinition> getAchievementDefinition(String achievementId) {\n-    return fafApiAccessor.getAchievementDefinition(achievementId)\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<Replay>, Integer>> findReplaysByQueryWithPageCount(String query, int maxResults, int page, SortConfig sortConfig) {\n-    return fafApiAccessor.findReplaysByQueryWithTotalPages(query, maxResults, page, sortConfig)\n-        .map(tuple -> tuple.mapT1(replays ->\n-            replays.stream().map(Replay::fromDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> findMapsByQueryWithPageCount(SearchConfig query, int count, int page) {\n-    return fafApiAccessor.findMapsByQueryWithTotalPages(query, count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Optional<MapBean>> findMapByFolderName(String folderName) {\n-    return fafApiAccessor.findMapByFolderName(folderName)\n-        .map(MapBean::fromMapVersionDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<Optional<MapBean>> getMapLatestVersion(String mapFolderName) {\n-    return fafApiAccessor.getMapLatestVersion(mapFolderName)\n-        .map(MapBean::fromMapVersionDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<List<Player>> getPlayersByIds(Collection<Integer> playerIds) {\n-    return fafApiAccessor.getPlayersByIds(playerIds)\n-        .map(Player::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Optional<Player>> queryPlayerByName(String playerName) {\n-    return fafApiAccessor.queryPlayerByName(playerName)\n-        .map(Player::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<Void> saveGameReview(Review review, int gameId) {\n-    GameReview gameReview = (GameReview) new GameReview()\n-        .setScore(review.getScore().byteValue())\n-        .setText(review.getText());\n-\n-    if (review.getId() == null) {\n-      Assert.notNull(review.getPlayer(), \"Player ID must be set\");\n-      return fafApiAccessor.createGameReview(\n-          (GameReview) gameReview\n-              .setGame(new Game().setId(String.valueOf(gameId)))\n-              .setPlayer((com.faforever.commons.api.dto.Player) (new com.faforever.commons.api.dto.Player().setId(String.valueOf(review.getPlayer().getId()))))\n-      ).doOnNext(updatedReview -> review.setId(updatedReview.getId()))\n-          .toFuture()\n-          .thenRun(() -> {\n-          });\n-    } else {\n-      return fafApiAccessor.updateGameReview((GameReview) gameReview.setId(review.getId())).toFuture();\n-    }\n-  }\n-\n-  public CompletableFuture<Void> saveModVersionReview(Review review, String modVersionId) {\n-    ModVersionReview modVersionReview = (ModVersionReview) new ModVersionReview()\n-        .setScore(review.getScore().byteValue())\n-        .setText(review.getText());\n-\n-    if (review.getId() == null) {\n-      Assert.notNull(review.getPlayer(), \"Player ID must be set\");\n-      return fafApiAccessor.createModVersionReview(\n-          (ModVersionReview) modVersionReview\n-              .setModVersion((com.faforever.commons.api.dto.ModVersion) new com.faforever.commons.api.dto.ModVersion().setId(String.valueOf(modVersionId)))\n-              .setPlayer((com.faforever.commons.api.dto.Player) new com.faforever.commons.api.dto.Player().setId(String.valueOf(review.getPlayer().getId())))\n-              .setId(String.valueOf(review.getId()))\n-      ).doOnNext(updatedReview -> review.setId(updatedReview.getId()))\n-          .toFuture()\n-          .thenRun(() -> {\n-          });\n-    } else {\n-      return fafApiAccessor.updateModVersionReview((ModVersionReview) modVersionReview.setId(review.getId())).toFuture();\n-    }\n-  }\n-\n-  public CompletableFuture<Void> saveMapVersionReview(Review review, String mapVersionId) {\n-    MapVersionReview mapVersionReview = (MapVersionReview) new MapVersionReview()\n-        .setScore(review.getScore().byteValue())\n-        .setText(review.getText());\n-\n-    if (review.getId() == null) {\n-      Assert.notNull(review.getPlayer(), \"Player ID must be set\");\n-      return fafApiAccessor.createMapVersionReview(\n-          (MapVersionReview) mapVersionReview\n-              .setMapVersion((MapVersion) new MapVersion().setId(mapVersionId))\n-              .setPlayer((com.faforever.commons.api.dto.Player) new com.faforever.commons.api.dto.Player().setId(String.valueOf(review.getPlayer().getId())))\n-              .setId(String.valueOf(review.getId()))\n-      ).doOnNext(updatedReview -> review.setId(updatedReview.getId()))\n-          .toFuture()\n-          .thenRun(() -> {\n-          });\n-    } else {\n-      return fafApiAccessor.updateMapVersionReview((MapVersionReview) mapVersionReview.setId(review.getId())).toFuture();\n-    }\n-  }\n-\n-  public CompletableFuture<Optional<Replay>> getLastGameOnMap(int playerId, String mapVersionId) {\n-    return fafApiAccessor.getLastGamesOnMap(playerId, mapVersionId, 1)\n-        .next()\n-        .map(Replay::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<Void> deleteGameReview(Review review) {\n-    return fafApiAccessor.deleteGameReview(review.getId()).toFuture();\n-  }\n-\n-  public CompletableFuture<Void> deleteMapVersionReview(Review review) {\n-    return fafApiAccessor.deleteMapVersionReview(review.getId()).toFuture();\n-  }\n-\n-  public CompletableFuture<Void> deleteModVersionReview(Review review) {\n-    return fafApiAccessor.deleteModVersionReview(review.getId()).toFuture();\n-  }\n-\n-  public CompletableFuture<Optional<Replay>> findReplayById(int id) {\n-    return fafApiAccessor.findReplayById(id)\n-        .map(Replay::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<List<IceServer>> getIceServers() {\n-    return fafServerAccessor.getIceServers();\n-  }\n-\n-  public void restoreGameSession(int id) {\n-    fafServerAccessor.restoreGameSession(id);\n-  }\n-\n-  public CompletableFuture<Tuple2<List<ModVersion>, Integer>> findModsByQueryWithPageCount(SearchConfig query, int count, int page) {\n-    return fafApiAccessor.findModsByQueryWithTotalPages(query, count, page)\n-        .map(tuple -> tuple.mapT1(mods ->\n-            mods.stream().map(ModVersion::fromModDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Integer> getRecommendedModPageCount(int count) {\n-    return fafApiAccessor.getRecommendedModsWithTotalPages(count, 1).map(Tuple2::getT2).toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<ModVersion>, Integer>> getRecommendedModsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getRecommendedModsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(mods ->\n-            mods.stream().map(ModVersion::fromModDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, float rating, int count, int page) {\n-    Flux<MapBean> matchmakerMapsFlux = fafApiAccessor.getMatchmakerPoolMaps(matchmakerQueueId, rating)\n-        .flatMap(mapPoolAssignment -> {\n-          if (mapPoolAssignment.getMapVersion() != null) {\n-            return Mono.just(MapBean.fromMapVersionDto(mapPoolAssignment.getMapVersion()));\n-          } else if (mapPoolAssignment.getMapParams() instanceof NeroxisGeneratorParams) {\n-            return Mono.just(MapBean.fromNeroxisGeneratedMapParams((NeroxisGeneratorParams) mapPoolAssignment.getMapParams()));\n-          } else {\n-            return Mono.empty();\n-          }\n-        })\n-        .distinct()\n-        .sort(Comparator.comparing(MapBean::getSize).thenComparing(MapBean::getDisplayName, String.CASE_INSENSITIVE_ORDER));\n-    return paginateResult(count, page, matchmakerMapsFlux).toFuture();\n-  }\n-\n-  @NotNull\n-  private <T> Mono<Tuple2<List<T>, Integer>> paginateResult(int count, int page, Flux<T> resultsFlux) {\n-    return Mono.zip(\n-        resultsFlux.skip((long) (page - 1) * count)\n-            .takeLast(count).collectList(),\n-        resultsFlux.count().map(size -> (size - 1) / count + 1)\n-            .cast(Integer.class)\n-    );\n-  }\n-\n-  public CompletableFuture<Optional<MatchmakingQueue>> getMatchmakingQueue(String technicalName) {\n-    return fafApiAccessor.getMatchmakerQueue(technicalName)\n-        .map(MatchmakingQueue::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public void acceptPartyInvite(Player player) {\n-    fafServerAccessor.acceptPartyInvite(player);\n-  }\n-\n-  public void inviteToParty(Player player) {\n-    fafServerAccessor.inviteToParty(player);\n-  }\n-\n-  public void kickPlayerFromParty(Player player) {\n-    fafServerAccessor.kickPlayerFromParty(player);\n-  }\n-\n-  public void leaveParty() {\n-    fafServerAccessor.leaveParty();\n-  }\n-\n-  public void readyParty() {\n-    fafServerAccessor.readyParty();\n-  }\n-\n-  public void unreadyParty() {\n-    fafServerAccessor.unreadyParty();\n-  }\n-\n-  public void setPartyFactions(List<Faction> factions) {\n-    fafServerAccessor.setPartyFactions(factions);\n-  }\n-\n-  public void updateMatchmakerState(MatchmakingQueue queue, MatchmakerState state) {\n-    fafServerAccessor.gameMatchmaking(queue, state);\n-  }\n-\n-  public CompletableFuture<Optional<Clan>> getClanByTag(String tag) {\n-    return fafApiAccessor.getClanByTag(tag)\n-        .map(Clan::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public void sendIceMessage(int remotePlayerId, Object message) {\n-    fafServerAccessor.sendGpgMessage(GpgGameOutboundMessage.Companion.iceMessage(remotePlayerId, message));\n-  }\n-\n-  public CompletableFuture<List<TournamentBean>> getAllTournaments() {\n-    return fafApiAccessor.getAllTournaments()\n-        .map(TournamentBean::fromTournamentDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<ModerationReport>> getAllModerationReports(int playerId) {\n-    return fafApiAccessor.getPlayerModerationReports(playerId)\n-        .map(ModerationReport::fromReportDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<ModerationReport> postModerationReport(ModerationReport report) {\n-    return fafApiAccessor.postModerationReport(report).map(ModerationReport::fromReportDto).toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getOwnedMapsWithPageCount(int playerId, int loadMoreCount, int page) {\n-    return fafApiAccessor.getOwnedMapsWithTotalPages(playerId, loadMoreCount, page)\n-        .map(tuple -> tuple.mapT1(mapVersions -> mapVersions.stream().map(MapBean::fromMapVersionDto).collect(Collectors.toList())))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Void> hideMapVersion(MapBean map) {\n-    String id = map.getId();\n-    MapVersion mapVersion = new MapVersion();\n-    mapVersion.setHidden(true);\n-    mapVersion.setId(map.getId());\n-    return fafApiAccessor.updateMapVersion(id, mapVersion).toFuture();\n-  }\n-\n-  public CompletableFuture<Void> unRankMapVersion(MapBean map) {\n-    String id = map.getId();\n-    MapVersion mapVersion = new MapVersion();\n-    mapVersion.setRanked(false);\n-    mapVersion.setId(map.getId());\n-    return fafApiAccessor.updateMapVersion(id, mapVersion).toFuture();\n-  }\n-\n-  public void closePlayersGame(int playerId) {\n-    fafServerAccessor.closePlayersGame(playerId);\n-  }\n-\n-  public void closePlayersLobby(int playerId) {\n-    fafServerAccessor.closePlayersLobby(playerId);\n-  }\n-\n-  public void broadcastMessage(String message) {\n-    fafServerAccessor.broadcastMessage(message);\n-  }\n-\n-  public CompletableFuture<List<TutorialCategory>> getTutorialCategories() {\n-    return fafApiAccessor.getTutorialCategories()\n-        .map(TutorialCategory::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n }\n", "next_change": {"commit": "88881f449a93629aceba0539fc634ffd353870a0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\ndeleted file mode 100644\nindex 5b7610e3..00000000\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ /dev/null\n", "chunk": "@@ -1,13 +0,0 @@\n-package com.faforever.client.remote;\n-\n-import lombok.RequiredArgsConstructor;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Service;\n-\n-@Lazy\n-@Service\n-@RequiredArgsConstructor\n-@Deprecated\n-public class FafService {\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "bc045d14db06dcc4feae6c8f4587d886005111eb", "committedDate": "2021-02-13 18:20:40 -0500", "message": "Use scoretime for rating history and add loading pane (#2142)"}, {"oid": "6e0589ef00a29fa7ca43df0eb331f40aee234c72", "committedDate": "2021-02-21 09:50:45 -0500", "message": "Add ability to conduct moderator reports from the client (#2139)"}, {"oid": "ae773e1d027847f23a85b000b975c71e1a332343", "committedDate": "2021-03-10 16:39:12 -0500", "message": "Sort map pool maps by size and display name (#2179)"}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "3007e139c4a0f7f8a1116ac7279174513f05bc1c", "committedDate": "2021-03-28 13:44:00 -0400", "message": "Remove EqualAndHash of id on MapBean"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "b5e39f11830b2911091bcbc7612181338880779c", "committedDate": "2021-06-08 06:57:18 -0400", "message": "Use new recommended maps and mods attribute for top picks (#2260)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "4c061711ca870443400f2d0f7076b6b9771be17b", "committedDate": "2021-06-19 23:50:41 -0400", "message": "Change get mods by uid to return optional"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536219889", "body": "I know it was there before, but now it looks even more like a code smell :thinking: ", "bodyText": "I know it was there before, but now it looks even more like a code smell \ud83e\udd14", "bodyHTML": "<p dir=\"auto\">I know it was there before, but now it looks even more like a code smell <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji></p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:25:25Z", "path": "src/main/java/com/faforever/client/remote/FafService.java", "diffHunk": "@@ -458,13 +459,27 @@ public void restoreGameSession(int id) {\n   }\n \n   @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getLadder1v1MapsWithPageCount(int count, int page) {\n-    Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> tuple = fafApiAccessor.getLadder1v1MapsWithMeta(count, page);\n-    return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n-        .parallelStream()\n-        .map(ladder1v1Map -> MapBean.fromMapVersionDto(ladder1v1Map.getMapVersion()))\n+  public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n+    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+        .stream()\n+        .map(MatchmakerQueueMapPool::getMapPool)\n+        .flatMap(mapPool -> mapPool.getMapVersions().stream())\n+        .distinct()\n+        .collect(toList());\n+    int totalPages = (mapVersions.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+        .stream()\n+        .skip((page - 1) * count)\n+        .limit(count)\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n-        ((HashMap<String,Integer>) tuple.getSecond().get(\"page\")).get(\"totalPages\")));\n+        totalPages));\n+  }\n+", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2MDYyNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536660625", "bodyText": "What exactly? Or the whole thing?", "author": "BlackYps", "createdAt": "2020-12-05T10:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NTIxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536895210", "bodyText": "The integer that is returned as well. Calculating page sizes / page numbers is not a problem tied to map beans, it applies to every collection and it could go into some util function.", "author": "Brutus5000", "createdAt": "2020-12-05T21:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5Njg0OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536896848", "bodyText": "Just as a note for all other api calls the api gives us the total page number. However it doesnt do that for the mapPool maps currently which is why it needs to be calculated here.", "author": "Sheikah45", "createdAt": "2020-12-05T21:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5ODAxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536898010", "bodyText": "I agree, but all the other api calls use pagination to limit the api call itself. This one is the only one (yet) that has to limit the returning result. What would an appropriate place for the helper function be?", "author": "BlackYps", "createdAt": "2020-12-05T21:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxOTg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6bc898e1955c41f87f97b267761c12eba21bf319", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 7e4874b0..f8bdcfe7 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -460,18 +460,23 @@ public class FafService {\n \n   @Async\n   public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n-    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+    List<MapBean> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n         .stream()\n         .map(MatchmakerQueueMapPool::getMapPool)\n         .flatMap(mapPool -> mapPool.getMapVersions().stream())\n         .distinct()\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList());\n-    int totalPages = (mapVersions.size() - 1) / count + 1;\n-    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+    return paginateResult(count, page, mapVersions);\n+  }\n+\n+  @NotNull\n+  private <T> CompletableFuture<Tuple<List<T>, Integer>> paginateResult(int count, int page, List<T> results) {\n+    int totalPages = (results.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(results\n         .stream()\n-        .skip((page - 1) * count)\n+        .skip((long) (page - 1) * count)\n         .limit(count)\n-        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n         totalPages));\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 7e4874b0..f8bdcfe7 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -460,18 +460,23 @@ public class FafService {\n \n   @Async\n   public CompletableFuture<Tuple<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, int count, int page) {\n-    List<MapVersion> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n+    List<MapBean> mapVersions = fafApiAccessor.getMatchmakerPools(matchmakerQueueId)\n         .stream()\n         .map(MatchmakerQueueMapPool::getMapPool)\n         .flatMap(mapPool -> mapPool.getMapVersions().stream())\n         .distinct()\n+        .map(MapBean::fromMapVersionDto)\n         .collect(toList());\n-    int totalPages = (mapVersions.size() - 1) / count + 1;\n-    return CompletableFuture.completedFuture(new Tuple<>(mapVersions\n+    return paginateResult(count, page, mapVersions);\n+  }\n+\n+  @NotNull\n+  private <T> CompletableFuture<Tuple<List<T>, Integer>> paginateResult(int count, int page, List<T> results) {\n+    int totalPages = (results.size() - 1) / count + 1;\n+    return CompletableFuture.completedFuture(new Tuple<>(results\n         .stream()\n-        .skip((page - 1) * count)\n+        .skip((long) (page - 1) * count)\n         .limit(count)\n-        .map(MapBean::fromMapVersionDto)\n         .collect(toList()),\n         totalPages));\n   }\n", "next_change": {"commit": "3007e139c4a0f7f8a1116ac7279174513f05bc1c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex f8bdcfe7..0c6938b6 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -484,7 +515,7 @@ public class FafService {\n   @Async\n   public CompletableFuture<Optional<MatchmakingQueue>> getMatchmakingQueue(String technicalName) {\n     return CompletableFuture.completedFuture(fafApiAccessor.getMatchmakerQueue(technicalName)\n-    .map(MatchmakingQueue::fromDto));\n+        .map(MatchmakingQueue::fromDto));\n   }\n \n   @Async\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 0c6938b6..c29abccd 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -518,6 +552,38 @@ public class FafService {\n         .map(MatchmakingQueue::fromDto));\n   }\n \n+  public void acceptPartyInvite(Player player) {\n+    fafServerAccessor.acceptPartyInvite(player);\n+  }\n+\n+  public void inviteToParty(Player player) {\n+    fafServerAccessor.inviteToParty(player);\n+  }\n+\n+  public void kickPlayerFromParty(Player player) {\n+    fafServerAccessor.kickPlayerFromParty(player);\n+  }\n+\n+  public void leaveParty() {\n+    fafServerAccessor.leaveParty();\n+  }\n+\n+  public void readyParty() {\n+    fafServerAccessor.readyParty();\n+  }\n+\n+  public void unreadyParty() {\n+    fafServerAccessor.unreadyParty();\n+  }\n+\n+  public void setPartyFactions(List<Faction> factions) {\n+    fafServerAccessor.setPartyFactions(factions);\n+  }\n+\n+  public void updateMatchmakerState(MatchmakingQueue queue, MatchmakingState state) {\n+    fafServerAccessor.gameMatchmaking(queue, state);\n+  }\n+\n   @Async\n   public CompletableFuture<Optional<Clan>> getClanByTag(String tag) {\n     return CompletableFuture.completedFuture(fafApiAccessor.getClanByTag(tag)\n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex c29abccd..404eb9b5 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -580,7 +582,7 @@ public class FafService {\n     fafServerAccessor.setPartyFactions(factions);\n   }\n \n-  public void updateMatchmakerState(MatchmakingQueue queue, MatchmakingState state) {\n+  public void updateMatchmakerState(MatchmakingQueue queue, MatchmakerState state) {\n     fafServerAccessor.gameMatchmaking(queue, state);\n   }\n \n", "next_change": {"commit": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 404eb9b5..4b45f279 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -586,92 +554,73 @@ public class FafService {\n     fafServerAccessor.gameMatchmaking(queue, state);\n   }\n \n-  @Async\n   public CompletableFuture<Optional<Clan>> getClanByTag(String tag) {\n-    return CompletableFuture.completedFuture(fafApiAccessor.getClanByTag(tag)\n-        .map(Clan::fromDto));\n-  }\n-\n-  public Optional<MapBean> findMapById(String id) {\n-    return fafApiAccessor.findMapVersionById(id)\n-        .map(MapBean::fromMapVersionDto);\n+    return fafApiAccessor.getClanByTag(tag)\n+        .map(Clan::fromDto)\n+        .toFuture()\n+        .thenApply(Optional::ofNullable);\n   }\n \n   public void sendIceMessage(int remotePlayerId, Object message) {\n     fafServerAccessor.sendGpgMessage(GpgGameOutboundMessage.Companion.iceMessage(remotePlayerId, message));\n   }\n \n-  @Async\n   public CompletableFuture<List<TournamentBean>> getAllTournaments() {\n-    return CompletableFuture.completedFuture(fafApiAccessor.getAllTournaments()\n-        .stream()\n+    return fafApiAccessor.getAllTournaments()\n         .map(TournamentBean::fromTournamentDto)\n-        .collect(toList()));\n+        .collectList()\n+        .toFuture();\n   }\n \n-  @Async\n   public CompletableFuture<List<ModerationReport>> getAllModerationReports(int playerId) {\n-    return CompletableFuture.completedFuture(fafApiAccessor.getPlayerModerationReports(playerId)\n-        .stream()\n+    return fafApiAccessor.getPlayerModerationReports(playerId)\n         .map(ModerationReport::fromReportDto)\n-        .collect(toList()));\n+        .collectList()\n+        .toFuture();\n   }\n \n-  public CompletableFuture<Void> postModerationReport(ModerationReport report) {\n-    fafApiAccessor.postModerationReport(report);\n-    return CompletableFuture.completedFuture(null);\n+  public CompletableFuture<ModerationReport> postModerationReport(ModerationReport report) {\n+    return fafApiAccessor.postModerationReport(report).map(ModerationReport::fromReportDto).toFuture();\n   }\n \n-  @Async\n-  public CompletableFuture<Tuple<List<MapBean>, Integer>> getOwnedMapsWithPageCount(int playerId, int loadMoreCount, int page) {\n-    Tuple<List<MapVersion>, java.util.Map<String, ?>> tuple = fafApiAccessor.getOwnedMapsWithMeta(playerId, loadMoreCount, page);\n-    return CompletableFuture.completedFuture(new Tuple<>(tuple.getFirst()\n-        .parallelStream()\n-        .map(MapBean::fromMapVersionDto)\n-        .collect(toList()),\n-        ((HashMap<String, Integer>) tuple.getSecond().get(\"page\")).get(\"totalPages\")));\n+  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getOwnedMapsWithPageCount(int playerId, int loadMoreCount, int page) {\n+    return fafApiAccessor.getOwnedMapsWithTotalPages(playerId, loadMoreCount, page)\n+        .map(tuple -> tuple.mapT1(mapVersions -> mapVersions.stream().map(MapBean::fromMapVersionDto).collect(Collectors.toList())))\n+        .toFuture();\n   }\n \n-  @Async\n   public CompletableFuture<Void> hideMapVersion(MapBean map) {\n     String id = map.getId();\n     MapVersion mapVersion = new MapVersion();\n     mapVersion.setHidden(true);\n     mapVersion.setId(map.getId());\n-    fafApiAccessor.updateMapVersion(id, mapVersion);\n-    return CompletableFuture.completedFuture(null);\n+    return fafApiAccessor.updateMapVersion(id, mapVersion).toFuture();\n   }\n \n-  @Async\n   public CompletableFuture<Void> unRankMapVersion(MapBean map) {\n     String id = map.getId();\n     MapVersion mapVersion = new MapVersion();\n     mapVersion.setRanked(false);\n     mapVersion.setId(map.getId());\n-    fafApiAccessor.updateMapVersion(id, mapVersion);\n-    return CompletableFuture.completedFuture(null);\n+    return fafApiAccessor.updateMapVersion(id, mapVersion).toFuture();\n   }\n \n-  @Async\n   public void closePlayersGame(int playerId) {\n     fafServerAccessor.closePlayersGame(playerId);\n   }\n \n-  @Async\n   public void closePlayersLobby(int playerId) {\n     fafServerAccessor.closePlayersLobby(playerId);\n   }\n \n-  @Async\n   public void broadcastMessage(String message) {\n     fafServerAccessor.broadcastMessage(message);\n   }\n \n-  @Async\n   public CompletableFuture<List<TutorialCategory>> getTutorialCategories() {\n-    return CompletableFuture.completedFuture(fafApiAccessor.getTutorialCategories().stream()\n+    return fafApiAccessor.getTutorialCategories()\n         .map(TutorialCategory::fromDto)\n-        .collect(toList())\n-    );\n+        .collectList()\n+        .toFuture();\n   }\n }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\nindex 4b45f279..5b7610e3 100644\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ b/src/main/java/com/faforever/client/remote/FafService.java\n", "chunk": "@@ -1,626 +1,13 @@\n package com.faforever.client.remote;\n \n-import com.faforever.client.api.FafApiAccessor;\n-import com.faforever.client.avatar.AvatarBean;\n-import com.faforever.client.avatar.event.AvatarChangedEvent;\n-import com.faforever.client.clan.Clan;\n-import com.faforever.client.coop.CoopMission;\n-import com.faforever.client.domain.RatingHistoryDataPoint;\n-import com.faforever.client.game.NewGameInfo;\n-import com.faforever.client.leaderboard.Leaderboard;\n-import com.faforever.client.leaderboard.LeaderboardEntry;\n-import com.faforever.client.map.MapBean;\n-import com.faforever.client.mod.FeaturedMod;\n-import com.faforever.client.mod.ModVersion;\n-import com.faforever.client.net.ConnectionState;\n-import com.faforever.client.player.Player;\n-import com.faforever.client.replay.Replay;\n-import com.faforever.client.reporting.ModerationReport;\n-import com.faforever.client.teammatchmaking.MatchmakingQueue;\n-import com.faforever.client.tournament.TournamentBean;\n-import com.faforever.client.tutorial.TutorialCategory;\n-import com.faforever.client.vault.review.Review;\n-import com.faforever.client.vault.search.SearchController.SearchConfig;\n-import com.faforever.client.vault.search.SearchController.SortConfig;\n-import com.faforever.commons.api.dto.AchievementDefinition;\n-import com.faforever.commons.api.dto.CoopResult;\n-import com.faforever.commons.api.dto.FeaturedModFile;\n-import com.faforever.commons.api.dto.Game;\n-import com.faforever.commons.api.dto.GameReview;\n-import com.faforever.commons.api.dto.MapVersion;\n-import com.faforever.commons.api.dto.MapVersionReview;\n-import com.faforever.commons.api.dto.MeResult;\n-import com.faforever.commons.api.dto.ModVersionReview;\n-import com.faforever.commons.api.dto.NeroxisGeneratorParams;\n-import com.faforever.commons.api.dto.PlayerAchievement;\n-import com.faforever.commons.api.dto.PlayerEvent;\n-import com.faforever.commons.io.ByteCountListener;\n-import com.faforever.commons.lobby.Faction;\n-import com.faforever.commons.lobby.GameLaunchResponse;\n-import com.faforever.commons.lobby.GpgGameOutboundMessage;\n-import com.faforever.commons.lobby.IceServer;\n-import com.faforever.commons.lobby.LoginSuccessResponse;\n-import com.faforever.commons.lobby.MatchmakerState;\n-import com.faforever.commons.lobby.ServerMessage;\n-import com.google.common.eventbus.EventBus;\n-import javafx.beans.property.ReadOnlyObjectProperty;\n import lombok.RequiredArgsConstructor;\n-import org.jetbrains.annotations.NotNull;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.stereotype.Service;\n-import org.springframework.util.Assert;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import reactor.util.function.Tuple2;\n-\n-import java.nio.file.Path;\n-import java.util.Collection;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-\n-import static java.util.stream.Collectors.toList;\n \n @Lazy\n @Service\n @RequiredArgsConstructor\n+@Deprecated\n public class FafService {\n \n-  private final FafServerAccessor fafServerAccessor;\n-  private final FafApiAccessor fafApiAccessor;\n-  private final EventBus eventBus;\n-\n-  public <T extends ServerMessage> void addOnMessageListener(Class<T> type, Consumer<T> listener) {\n-    fafServerAccessor.addEventListener(type, listener);\n-  }\n-\n-  public CompletableFuture<GameLaunchResponse> requestHostGame(NewGameInfo newGameInfo) {\n-    return fafServerAccessor.requestHostGame(newGameInfo);\n-  }\n-\n-  public ConnectionState getLobbyConnectionState() {\n-    return fafServerAccessor.getConnectionState();\n-  }\n-\n-  public ReadOnlyObjectProperty<ConnectionState> connectionStateProperty() {\n-    return fafServerAccessor.connectionStateProperty();\n-  }\n-\n-  public CompletableFuture<GameLaunchResponse> requestJoinGame(int gameId, String password) {\n-    return fafServerAccessor.requestJoinGame(gameId, password);\n-  }\n-\n-  public CompletableFuture<GameLaunchResponse> startSearchMatchmaker() {\n-    return fafServerAccessor.startSearchMatchmaker();\n-  }\n-\n-  public void requestMatchmakerInfo() {\n-    fafServerAccessor.requestMatchmakerInfo();\n-  }\n-\n-  public void sendGpgMessage(GpgGameOutboundMessage message) {\n-    fafServerAccessor.sendGpgMessage(message);\n-  }\n-\n-  public CompletableFuture<LoginSuccessResponse> connectToServer() {\n-    return fafServerAccessor.connectAndLogIn();\n-  }\n-\n-  public void authorizeApi() {\n-    fafApiAccessor.authorize();\n-  }\n-\n-  public void disconnect() {\n-    fafServerAccessor.disconnect();\n-  }\n-\n-  public void addFriend(Player player) {\n-    fafServerAccessor.addFriend(player.getId());\n-  }\n-\n-  public void addFoe(Player player) {\n-    fafServerAccessor.addFoe(player.getId());\n-  }\n-\n-  public void removeFriend(Player player) {\n-    fafServerAccessor.removeFriend(player.getId());\n-  }\n-\n-  public void removeFoe(Player player) {\n-    fafServerAccessor.removeFoe(player.getId());\n-  }\n-\n-  public void notifyGameEnded() {\n-    fafServerAccessor.sendGpgMessage(GpgGameOutboundMessage.Companion.gameStateMessage(\"Ended\"));\n-  }\n-\n-  public CompletableFuture<List<Leaderboard>> getLeaderboards() {\n-    return fafApiAccessor.getLeaderboards()\n-        .map(Leaderboard::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<LeaderboardEntry>> getLeaderboardEntriesForPlayer(int playerId) {\n-    return fafApiAccessor.getLeaderboardEntriesForPlayer(playerId)\n-        .map(LeaderboardEntry::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<LeaderboardEntry>> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n-    return fafApiAccessor.getAllLeaderboardEntries(leaderboardTechnicalName)\n-        .map(LeaderboardEntry::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<LeaderboardEntry>, Integer>> getLeaderboardEntriesWithPageCount(String leaderboardTechnicalName, int count, int page) {\n-    return fafApiAccessor.getLeaderboardEntriesWithTotalPages(leaderboardTechnicalName, count, page)\n-        .map(tuple -> tuple.mapT1(entries ->\n-            entries.stream().map(LeaderboardEntry::fromDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<ModVersion>> getMods() {\n-    return fafApiAccessor.getMods()\n-        .map(ModVersion::fromModDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Optional<com.faforever.client.mod.ModVersion>> getModVersion(String uid) {\n-    return fafApiAccessor.getModVersion(uid)\n-        .map(modVersion -> ModVersion.fromDto(modVersion, null))\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public void reconnect() {\n-    fafServerAccessor.reconnect();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getMostPlayedMapsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getMostPlayedMapsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Integer> getRecommendedMapPageCount(int count) {\n-    return fafApiAccessor.getRecommendedMapsWithTotalPages(count, 1).map(Tuple2::getT2).toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getRecommendedMapsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getRecommendedMapsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getMapsByIdWithPageCount(List<Integer> mapIdList, int count, int page) {\n-    return fafApiAccessor.getMapsByIdWithTotalPages(mapIdList, count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getHighestRatedMapsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getHighestRatedMapsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getNewestMapsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getNewestMapsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<CoopMission>> getCoopMaps() {\n-    return fafApiAccessor.getCoopMissions()\n-        .map(CoopMission::fromCoopInfo)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<AvatarBean>> getAvailableAvatars() {\n-    return fafServerAccessor.getAvailableAvatars().thenApply(avatars ->\n-        avatars.stream().map(AvatarBean::fromAvatar).collect(toList()));\n-  }\n-\n-  public CompletableFuture<MeResult> getCurrentUser() {\n-    return fafApiAccessor.getMe().toFuture();\n-  }\n-\n-  public CompletableFuture<Set<String>> getPermissions() {\n-    return fafApiAccessor.getMe().toFuture().thenApply(MeResult::getPermissions);\n-  }\n-\n-  public void selectAvatar(AvatarBean avatar) {\n-    fafServerAccessor.selectAvatar(avatar == null ? null : avatar.getUrl());\n-    eventBus.post(new AvatarChangedEvent(avatar));\n-  }\n-\n-  public CompletableFuture<List<CoopResult>> getCoopLeaderboard(CoopMission mission, int numberOfPlayers) {\n-    return fafApiAccessor.getCoopLeaderboard(mission.getId(), numberOfPlayers).collectList().toFuture();\n-  }\n-\n-  public CompletableFuture<List<RatingHistoryDataPoint>> getRatingHistory(int playerId, int leaderboardId) {\n-    return fafApiAccessor.getRatingJournal(playerId, leaderboardId)\n-        .filter(gamePlayerStats -> gamePlayerStats.getCreateTime() != null\n-            && gamePlayerStats.getMeanAfter() != null\n-            && gamePlayerStats.getDeviationAfter() != null)\n-        .map(entry -> new RatingHistoryDataPoint(entry.getGamePlayerStats().getScoreTime(), entry.getMeanAfter(), entry.getDeviationAfter()))\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<FeaturedMod>> getFeaturedMods() {\n-    return fafApiAccessor.getFeaturedMods()\n-        .sort(Comparator.comparingInt(com.faforever.commons.api.dto.FeaturedMod::getOrder))\n-        .map(FeaturedMod::fromFeaturedMod)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<FeaturedModFile>> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    return fafApiAccessor.getFeaturedModFiles(featuredMod, version).collectList().toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<Replay>, Integer>> getNewestReplaysWithPageCount(int topElementCount, int page) {\n-    return fafApiAccessor.getNewestReplaysWithTotalPages(topElementCount, page)\n-        .map(tuple -> tuple.mapT1(replays ->\n-            replays.stream().map(Replay::fromDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<Replay>, Integer>> getHighestRatedReplaysWithPageCount(int topElementCount, int page) {\n-    return fafApiAccessor.getHighestRatedReplaysWithTotalPages(topElementCount, page)\n-        .map(tuple -> tuple.mapT1(replays ->\n-            replays.stream().map(Replay::fromDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Void> uploadMod(Path modFile, ByteCountListener byteListener) {\n-    return fafApiAccessor.uploadMod(modFile, byteListener).toFuture();\n-  }\n-\n-  public CompletableFuture<Void> uploadMap(Path mapFile, boolean isRanked, ByteCountListener byteListener) {\n-    return fafApiAccessor.uploadMap(mapFile, isRanked, byteListener).toFuture();\n-  }\n-\n-  public CompletableFuture<Map<String, PlayerEvent>> getPlayerEvents(int playerId) {\n-    return fafApiAccessor.getPlayerEvents(playerId)\n-        .collectMap(playerEvent -> playerEvent.getEvent().getId())\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<PlayerAchievement>> getPlayerAchievements(int playerId) {\n-    return fafApiAccessor.getPlayerAchievements(playerId)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<AchievementDefinition>> getAchievementDefinitions() {\n-    return fafApiAccessor.getAchievementDefinitions()\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<AchievementDefinition> getAchievementDefinition(String achievementId) {\n-    return fafApiAccessor.getAchievementDefinition(achievementId)\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<Replay>, Integer>> findReplaysByQueryWithPageCount(String query, int maxResults, int page, SortConfig sortConfig) {\n-    return fafApiAccessor.findReplaysByQueryWithTotalPages(query, maxResults, page, sortConfig)\n-        .map(tuple -> tuple.mapT1(replays ->\n-            replays.stream().map(Replay::fromDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> findMapsByQueryWithPageCount(SearchConfig query, int count, int page) {\n-    return fafApiAccessor.findMapsByQueryWithTotalPages(query, count, page)\n-        .map(tuple -> tuple.mapT1(maps ->\n-            maps.stream().map(MapBean::fromMapDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Optional<MapBean>> findMapByFolderName(String folderName) {\n-    return fafApiAccessor.findMapByFolderName(folderName)\n-        .map(MapBean::fromMapVersionDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<Optional<MapBean>> getMapLatestVersion(String mapFolderName) {\n-    return fafApiAccessor.getMapLatestVersion(mapFolderName)\n-        .map(MapBean::fromMapVersionDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<List<Player>> getPlayersByIds(Collection<Integer> playerIds) {\n-    return fafApiAccessor.getPlayersByIds(playerIds)\n-        .map(Player::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Optional<Player>> queryPlayerByName(String playerName) {\n-    return fafApiAccessor.queryPlayerByName(playerName)\n-        .map(Player::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<Void> saveGameReview(Review review, int gameId) {\n-    GameReview gameReview = (GameReview) new GameReview()\n-        .setScore(review.getScore().byteValue())\n-        .setText(review.getText());\n-\n-    if (review.getId() == null) {\n-      Assert.notNull(review.getPlayer(), \"Player ID must be set\");\n-      return fafApiAccessor.createGameReview(\n-          (GameReview) gameReview\n-              .setGame(new Game().setId(String.valueOf(gameId)))\n-              .setPlayer((com.faforever.commons.api.dto.Player) (new com.faforever.commons.api.dto.Player().setId(String.valueOf(review.getPlayer().getId()))))\n-      ).doOnNext(updatedReview -> review.setId(updatedReview.getId()))\n-          .toFuture()\n-          .thenRun(() -> {\n-          });\n-    } else {\n-      return fafApiAccessor.updateGameReview((GameReview) gameReview.setId(review.getId())).toFuture();\n-    }\n-  }\n-\n-  public CompletableFuture<Void> saveModVersionReview(Review review, String modVersionId) {\n-    ModVersionReview modVersionReview = (ModVersionReview) new ModVersionReview()\n-        .setScore(review.getScore().byteValue())\n-        .setText(review.getText());\n-\n-    if (review.getId() == null) {\n-      Assert.notNull(review.getPlayer(), \"Player ID must be set\");\n-      return fafApiAccessor.createModVersionReview(\n-          (ModVersionReview) modVersionReview\n-              .setModVersion((com.faforever.commons.api.dto.ModVersion) new com.faforever.commons.api.dto.ModVersion().setId(String.valueOf(modVersionId)))\n-              .setPlayer((com.faforever.commons.api.dto.Player) new com.faforever.commons.api.dto.Player().setId(String.valueOf(review.getPlayer().getId())))\n-              .setId(String.valueOf(review.getId()))\n-      ).doOnNext(updatedReview -> review.setId(updatedReview.getId()))\n-          .toFuture()\n-          .thenRun(() -> {\n-          });\n-    } else {\n-      return fafApiAccessor.updateModVersionReview((ModVersionReview) modVersionReview.setId(review.getId())).toFuture();\n-    }\n-  }\n-\n-  public CompletableFuture<Void> saveMapVersionReview(Review review, String mapVersionId) {\n-    MapVersionReview mapVersionReview = (MapVersionReview) new MapVersionReview()\n-        .setScore(review.getScore().byteValue())\n-        .setText(review.getText());\n-\n-    if (review.getId() == null) {\n-      Assert.notNull(review.getPlayer(), \"Player ID must be set\");\n-      return fafApiAccessor.createMapVersionReview(\n-          (MapVersionReview) mapVersionReview\n-              .setMapVersion((MapVersion) new MapVersion().setId(mapVersionId))\n-              .setPlayer((com.faforever.commons.api.dto.Player) new com.faforever.commons.api.dto.Player().setId(String.valueOf(review.getPlayer().getId())))\n-              .setId(String.valueOf(review.getId()))\n-      ).doOnNext(updatedReview -> review.setId(updatedReview.getId()))\n-          .toFuture()\n-          .thenRun(() -> {\n-          });\n-    } else {\n-      return fafApiAccessor.updateMapVersionReview((MapVersionReview) mapVersionReview.setId(review.getId())).toFuture();\n-    }\n-  }\n-\n-  public CompletableFuture<Optional<Replay>> getLastGameOnMap(int playerId, String mapVersionId) {\n-    return fafApiAccessor.getLastGamesOnMap(playerId, mapVersionId, 1)\n-        .next()\n-        .map(Replay::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<Void> deleteGameReview(Review review) {\n-    return fafApiAccessor.deleteGameReview(review.getId()).toFuture();\n-  }\n-\n-  public CompletableFuture<Void> deleteMapVersionReview(Review review) {\n-    return fafApiAccessor.deleteMapVersionReview(review.getId()).toFuture();\n-  }\n-\n-  public CompletableFuture<Void> deleteModVersionReview(Review review) {\n-    return fafApiAccessor.deleteModVersionReview(review.getId()).toFuture();\n-  }\n-\n-  public CompletableFuture<Optional<Replay>> findReplayById(int id) {\n-    return fafApiAccessor.findReplayById(id)\n-        .map(Replay::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public CompletableFuture<List<IceServer>> getIceServers() {\n-    return fafServerAccessor.getIceServers();\n-  }\n-\n-  public void restoreGameSession(int id) {\n-    fafServerAccessor.restoreGameSession(id);\n-  }\n-\n-  public CompletableFuture<Tuple2<List<ModVersion>, Integer>> findModsByQueryWithPageCount(SearchConfig query, int count, int page) {\n-    return fafApiAccessor.findModsByQueryWithTotalPages(query, count, page)\n-        .map(tuple -> tuple.mapT1(mods ->\n-            mods.stream().map(ModVersion::fromModDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Integer> getRecommendedModPageCount(int count) {\n-    return fafApiAccessor.getRecommendedModsWithTotalPages(count, 1).map(Tuple2::getT2).toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<ModVersion>, Integer>> getRecommendedModsWithPageCount(int count, int page) {\n-    return fafApiAccessor.getRecommendedModsWithTotalPages(count, page)\n-        .map(tuple -> tuple.mapT1(mods ->\n-            mods.stream().map(ModVersion::fromModDto).collect(toList())\n-        ))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getMatchmakerMapsWithPageCount(int matchmakerQueueId, float rating, int count, int page) {\n-    Flux<MapBean> matchmakerMapsFlux = fafApiAccessor.getMatchmakerPoolMaps(matchmakerQueueId, rating)\n-        .flatMap(mapPoolAssignment -> {\n-          if (mapPoolAssignment.getMapVersion() != null) {\n-            return Mono.just(MapBean.fromMapVersionDto(mapPoolAssignment.getMapVersion()));\n-          } else if (mapPoolAssignment.getMapParams() instanceof NeroxisGeneratorParams) {\n-            return Mono.just(MapBean.fromNeroxisGeneratedMapParams((NeroxisGeneratorParams) mapPoolAssignment.getMapParams()));\n-          } else {\n-            return Mono.empty();\n-          }\n-        })\n-        .distinct()\n-        .sort(Comparator.comparing(MapBean::getSize).thenComparing(MapBean::getDisplayName, String.CASE_INSENSITIVE_ORDER));\n-    return paginateResult(count, page, matchmakerMapsFlux).toFuture();\n-  }\n-\n-  @NotNull\n-  private <T> Mono<Tuple2<List<T>, Integer>> paginateResult(int count, int page, Flux<T> resultsFlux) {\n-    return Mono.zip(\n-        resultsFlux.skip((long) (page - 1) * count)\n-            .takeLast(count).collectList(),\n-        resultsFlux.count().map(size -> (size - 1) / count + 1)\n-            .cast(Integer.class)\n-    );\n-  }\n-\n-  public CompletableFuture<Optional<MatchmakingQueue>> getMatchmakingQueue(String technicalName) {\n-    return fafApiAccessor.getMatchmakerQueue(technicalName)\n-        .map(MatchmakingQueue::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public void acceptPartyInvite(Player player) {\n-    fafServerAccessor.acceptPartyInvite(player);\n-  }\n-\n-  public void inviteToParty(Player player) {\n-    fafServerAccessor.inviteToParty(player);\n-  }\n-\n-  public void kickPlayerFromParty(Player player) {\n-    fafServerAccessor.kickPlayerFromParty(player);\n-  }\n-\n-  public void leaveParty() {\n-    fafServerAccessor.leaveParty();\n-  }\n-\n-  public void readyParty() {\n-    fafServerAccessor.readyParty();\n-  }\n-\n-  public void unreadyParty() {\n-    fafServerAccessor.unreadyParty();\n-  }\n-\n-  public void setPartyFactions(List<Faction> factions) {\n-    fafServerAccessor.setPartyFactions(factions);\n-  }\n-\n-  public void updateMatchmakerState(MatchmakingQueue queue, MatchmakerState state) {\n-    fafServerAccessor.gameMatchmaking(queue, state);\n-  }\n-\n-  public CompletableFuture<Optional<Clan>> getClanByTag(String tag) {\n-    return fafApiAccessor.getClanByTag(tag)\n-        .map(Clan::fromDto)\n-        .toFuture()\n-        .thenApply(Optional::ofNullable);\n-  }\n-\n-  public void sendIceMessage(int remotePlayerId, Object message) {\n-    fafServerAccessor.sendGpgMessage(GpgGameOutboundMessage.Companion.iceMessage(remotePlayerId, message));\n-  }\n-\n-  public CompletableFuture<List<TournamentBean>> getAllTournaments() {\n-    return fafApiAccessor.getAllTournaments()\n-        .map(TournamentBean::fromTournamentDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<List<ModerationReport>> getAllModerationReports(int playerId) {\n-    return fafApiAccessor.getPlayerModerationReports(playerId)\n-        .map(ModerationReport::fromReportDto)\n-        .collectList()\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<ModerationReport> postModerationReport(ModerationReport report) {\n-    return fafApiAccessor.postModerationReport(report).map(ModerationReport::fromReportDto).toFuture();\n-  }\n-\n-  public CompletableFuture<Tuple2<List<MapBean>, Integer>> getOwnedMapsWithPageCount(int playerId, int loadMoreCount, int page) {\n-    return fafApiAccessor.getOwnedMapsWithTotalPages(playerId, loadMoreCount, page)\n-        .map(tuple -> tuple.mapT1(mapVersions -> mapVersions.stream().map(MapBean::fromMapVersionDto).collect(Collectors.toList())))\n-        .toFuture();\n-  }\n-\n-  public CompletableFuture<Void> hideMapVersion(MapBean map) {\n-    String id = map.getId();\n-    MapVersion mapVersion = new MapVersion();\n-    mapVersion.setHidden(true);\n-    mapVersion.setId(map.getId());\n-    return fafApiAccessor.updateMapVersion(id, mapVersion).toFuture();\n-  }\n-\n-  public CompletableFuture<Void> unRankMapVersion(MapBean map) {\n-    String id = map.getId();\n-    MapVersion mapVersion = new MapVersion();\n-    mapVersion.setRanked(false);\n-    mapVersion.setId(map.getId());\n-    return fafApiAccessor.updateMapVersion(id, mapVersion).toFuture();\n-  }\n-\n-  public void closePlayersGame(int playerId) {\n-    fafServerAccessor.closePlayersGame(playerId);\n-  }\n-\n-  public void closePlayersLobby(int playerId) {\n-    fafServerAccessor.closePlayersLobby(playerId);\n-  }\n-\n-  public void broadcastMessage(String message) {\n-    fafServerAccessor.broadcastMessage(message);\n-  }\n-\n-  public CompletableFuture<List<TutorialCategory>> getTutorialCategories() {\n-    return fafApiAccessor.getTutorialCategories()\n-        .map(TutorialCategory::fromDto)\n-        .collectList()\n-        .toFuture();\n-  }\n }\n", "next_change": {"commit": "88881f449a93629aceba0539fc634ffd353870a0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/FafService.java b/src/main/java/com/faforever/client/remote/FafService.java\ndeleted file mode 100644\nindex 5b7610e3..00000000\n--- a/src/main/java/com/faforever/client/remote/FafService.java\n+++ /dev/null\n", "chunk": "@@ -1,13 +0,0 @@\n-package com.faforever.client.remote;\n-\n-import lombok.RequiredArgsConstructor;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Service;\n-\n-@Lazy\n-@Service\n-@RequiredArgsConstructor\n-@Deprecated\n-public class FafService {\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "bc045d14db06dcc4feae6c8f4587d886005111eb", "committedDate": "2021-02-13 18:20:40 -0500", "message": "Use scoretime for rating history and add loading pane (#2142)"}, {"oid": "6e0589ef00a29fa7ca43df0eb331f40aee234c72", "committedDate": "2021-02-21 09:50:45 -0500", "message": "Add ability to conduct moderator reports from the client (#2139)"}, {"oid": "ae773e1d027847f23a85b000b975c71e1a332343", "committedDate": "2021-03-10 16:39:12 -0500", "message": "Sort map pool maps by size and display name (#2179)"}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "3007e139c4a0f7f8a1116ac7279174513f05bc1c", "committedDate": "2021-03-28 13:44:00 -0400", "message": "Remove EqualAndHash of id on MapBean"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "b5e39f11830b2911091bcbc7612181338880779c", "committedDate": "2021-06-08 06:57:18 -0400", "message": "Use new recommended maps and mods attribute for top picks (#2260)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "4c061711ca870443400f2d0f7076b6b9771be17b", "committedDate": "2021-06-19 23:50:41 -0400", "message": "Change get mods by uid to return optional"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMDg1Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536220857", "body": "Underscores in variables and methods names are a no-go.", "bodyText": "Underscores in variables and methods names are a no-go.", "bodyHTML": "<p dir=\"auto\">Underscores in variables and methods names are a no-go.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:26:48Z", "path": "src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class AcceptPartyInviteMessage extends ClientMessage {\n+\n+  private Integer sender_id;\n+\n+  public AcceptPartyInviteMessage(Integer sender_id) {\n+    super(ClientMessageType.ACCEPT_PARTY_INVITE);\n+    this.sender_id = sender_id;\n+  }\n+\n+  public Integer getSender_id() {\n+    return sender_id;\n+  }\n+\n+  public void setSender_id(Integer sender_id) {\n+    this.sender_id = sender_id;\n+  }\n+}", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\nindex ac129042..0457cba8 100644\n--- a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class AcceptPartyInviteMessage extends ClientMessage {\n \n-  private Integer sender_id;\n+  private final Integer senderId;\n \n-  public AcceptPartyInviteMessage(Integer sender_id) {\n+  public AcceptPartyInviteMessage(Integer senderId) {\n     super(ClientMessageType.ACCEPT_PARTY_INVITE);\n-    this.sender_id = sender_id;\n-  }\n-\n-  public Integer getSender_id() {\n-    return sender_id;\n+    this.senderId = senderId;\n   }\n \n-  public void setSender_id(Integer sender_id) {\n-    this.sender_id = sender_id;\n-  }\n }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\nindex 0457cba8..ac129042 100644\n--- a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n", "chunk": "@@ -1,15 +1,19 @@\n package com.faforever.client.remote.domain;\n \n-import lombok.Getter;\n-\n-@Getter\n public class AcceptPartyInviteMessage extends ClientMessage {\n \n-  private final Integer senderId;\n+  private Integer sender_id;\n \n-  public AcceptPartyInviteMessage(Integer senderId) {\n+  public AcceptPartyInviteMessage(Integer sender_id) {\n     super(ClientMessageType.ACCEPT_PARTY_INVITE);\n-    this.senderId = senderId;\n+    this.sender_id = sender_id;\n+  }\n+\n+  public Integer getSender_id() {\n+    return sender_id;\n   }\n \n+  public void setSender_id(Integer sender_id) {\n+    this.sender_id = sender_id;\n+  }\n }\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\nindex ac129042..0457cba8 100644\n--- a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class AcceptPartyInviteMessage extends ClientMessage {\n \n-  private Integer sender_id;\n+  private final Integer senderId;\n \n-  public AcceptPartyInviteMessage(Integer sender_id) {\n+  public AcceptPartyInviteMessage(Integer senderId) {\n     super(ClientMessageType.ACCEPT_PARTY_INVITE);\n-    this.sender_id = sender_id;\n-  }\n-\n-  public Integer getSender_id() {\n-    return sender_id;\n+    this.senderId = senderId;\n   }\n \n-  public void setSender_id(Integer sender_id) {\n-    this.sender_id = sender_id;\n-  }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\nindex ac129042..0457cba8 100644\n--- a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class AcceptPartyInviteMessage extends ClientMessage {\n \n-  private Integer sender_id;\n+  private final Integer senderId;\n \n-  public AcceptPartyInviteMessage(Integer sender_id) {\n+  public AcceptPartyInviteMessage(Integer senderId) {\n     super(ClientMessageType.ACCEPT_PARTY_INVITE);\n-    this.sender_id = sender_id;\n-  }\n-\n-  public Integer getSender_id() {\n-    return sender_id;\n+    this.senderId = senderId;\n   }\n \n-  public void setSender_id(Integer sender_id) {\n-    this.sender_id = sender_id;\n-  }\n }\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\ndeleted file mode 100644\nindex 0457cba8..00000000\n--- a/src/main/java/com/faforever/client/remote/domain/AcceptPartyInviteMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,15 +0,0 @@\n-package com.faforever.client.remote.domain;\n-\n-import lombok.Getter;\n-\n-@Getter\n-public class AcceptPartyInviteMessage extends ClientMessage {\n-\n-  private final Integer senderId;\n-\n-  public AcceptPartyInviteMessage(Integer senderId) {\n-    super(ClientMessageType.ACCEPT_PARTY_INVITE);\n-    this.senderId = senderId;\n-  }\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTYwNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221604", "body": "Underscores in variables are a no-go.", "bodyText": "Underscores in variables are a no-go.", "bodyHTML": "<p dir=\"auto\">Underscores in variables are a no-go.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:27:32Z", "path": "src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.faforever.client.remote.domain;\n+\n+import lombok.Getter;\n+\n+@Getter\n+public class GameMatchmakingMessage extends ClientMessage {\n+\n+  private final String queue_name;\n+  private final MatchmakingState state;\n+\n+  public GameMatchmakingMessage(String queue_name, MatchmakingState state) {\n+    super(ClientMessageType.GAME_MATCHMAKING);\n+    this.queue_name = queue_name;\n+    this.state = state;\n+  }\n+\n+}", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\nindex e30878e1..ee8d1f3b 100644\n--- a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n", "chunk": "@@ -5,12 +5,12 @@ import lombok.Getter;\n @Getter\n public class GameMatchmakingMessage extends ClientMessage {\n \n-  private final String queue_name;\n+  private final String queueName;\n   private final MatchmakingState state;\n \n-  public GameMatchmakingMessage(String queue_name, MatchmakingState state) {\n+  public GameMatchmakingMessage(String queueName, MatchmakingState state) {\n     super(ClientMessageType.GAME_MATCHMAKING);\n-    this.queue_name = queue_name;\n+    this.queueName = queueName;\n     this.state = state;\n   }\n \n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\nindex ee8d1f3b..e30878e1 100644\n--- a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n", "chunk": "@@ -5,12 +5,12 @@ import lombok.Getter;\n @Getter\n public class GameMatchmakingMessage extends ClientMessage {\n \n-  private final String queueName;\n+  private final String queue_name;\n   private final MatchmakingState state;\n \n-  public GameMatchmakingMessage(String queueName, MatchmakingState state) {\n+  public GameMatchmakingMessage(String queue_name, MatchmakingState state) {\n     super(ClientMessageType.GAME_MATCHMAKING);\n-    this.queueName = queueName;\n+    this.queue_name = queue_name;\n     this.state = state;\n   }\n \n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\nindex e30878e1..ee8d1f3b 100644\n--- a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n", "chunk": "@@ -5,12 +5,12 @@ import lombok.Getter;\n @Getter\n public class GameMatchmakingMessage extends ClientMessage {\n \n-  private final String queue_name;\n+  private final String queueName;\n   private final MatchmakingState state;\n \n-  public GameMatchmakingMessage(String queue_name, MatchmakingState state) {\n+  public GameMatchmakingMessage(String queueName, MatchmakingState state) {\n     super(ClientMessageType.GAME_MATCHMAKING);\n-    this.queue_name = queue_name;\n+    this.queueName = queueName;\n     this.state = state;\n   }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\nindex e30878e1..ee8d1f3b 100644\n--- a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n", "chunk": "@@ -5,12 +5,12 @@ import lombok.Getter;\n @Getter\n public class GameMatchmakingMessage extends ClientMessage {\n \n-  private final String queue_name;\n+  private final String queueName;\n   private final MatchmakingState state;\n \n-  public GameMatchmakingMessage(String queue_name, MatchmakingState state) {\n+  public GameMatchmakingMessage(String queueName, MatchmakingState state) {\n     super(ClientMessageType.GAME_MATCHMAKING);\n-    this.queue_name = queue_name;\n+    this.queueName = queueName;\n     this.state = state;\n   }\n \n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java b/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\ndeleted file mode 100644\nindex ee8d1f3b..00000000\n--- a/src/main/java/com/faforever/client/remote/domain/GameMatchmakingMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,17 +0,0 @@\n-package com.faforever.client.remote.domain;\n-\n-import lombok.Getter;\n-\n-@Getter\n-public class GameMatchmakingMessage extends ClientMessage {\n-\n-  private final String queueName;\n-  private final MatchmakingState state;\n-\n-  public GameMatchmakingMessage(String queueName, MatchmakingState state) {\n-    super(ClientMessageType.GAME_MATCHMAKING);\n-    this.queueName = queueName;\n-    this.state = state;\n-  }\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTc2Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221767", "body": "stop it", "bodyText": "stop it", "bodyHTML": "<p dir=\"auto\">stop it</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:27:43Z", "path": "src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class InviteToPartyMessage extends ClientMessage {\n+\n+  private Integer recipient_id;\n+\n+  public InviteToPartyMessage(Integer recipient_id) {\n+    super(ClientMessageType.INVITE_TO_PARTY);\n+    this.recipient_id = recipient_id;\n+  }\n+\n+  public Integer getRecipient_id() {\n+    return recipient_id;\n+  }\n+\n+  public void setRecipient_id(Integer recipient_id) {\n+    this.recipient_id = recipient_id;\n+  }\n+}", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\nindex 46c940d3..649c294b 100644\n--- a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class InviteToPartyMessage extends ClientMessage {\n \n-  private Integer recipient_id;\n+  private final Integer recipientId;\n \n-  public InviteToPartyMessage(Integer recipient_id) {\n+  public InviteToPartyMessage(Integer recipientId) {\n     super(ClientMessageType.INVITE_TO_PARTY);\n-    this.recipient_id = recipient_id;\n-  }\n-\n-  public Integer getRecipient_id() {\n-    return recipient_id;\n+    this.recipientId = recipientId;\n   }\n \n-  public void setRecipient_id(Integer recipient_id) {\n-    this.recipient_id = recipient_id;\n-  }\n }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\nindex 649c294b..46c940d3 100644\n--- a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n", "chunk": "@@ -1,15 +1,19 @@\n package com.faforever.client.remote.domain;\n \n-import lombok.Getter;\n-\n-@Getter\n public class InviteToPartyMessage extends ClientMessage {\n \n-  private final Integer recipientId;\n+  private Integer recipient_id;\n \n-  public InviteToPartyMessage(Integer recipientId) {\n+  public InviteToPartyMessage(Integer recipient_id) {\n     super(ClientMessageType.INVITE_TO_PARTY);\n-    this.recipientId = recipientId;\n+    this.recipient_id = recipient_id;\n+  }\n+\n+  public Integer getRecipient_id() {\n+    return recipient_id;\n   }\n \n+  public void setRecipient_id(Integer recipient_id) {\n+    this.recipient_id = recipient_id;\n+  }\n }\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\nindex 46c940d3..649c294b 100644\n--- a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class InviteToPartyMessage extends ClientMessage {\n \n-  private Integer recipient_id;\n+  private final Integer recipientId;\n \n-  public InviteToPartyMessage(Integer recipient_id) {\n+  public InviteToPartyMessage(Integer recipientId) {\n     super(ClientMessageType.INVITE_TO_PARTY);\n-    this.recipient_id = recipient_id;\n-  }\n-\n-  public Integer getRecipient_id() {\n-    return recipient_id;\n+    this.recipientId = recipientId;\n   }\n \n-  public void setRecipient_id(Integer recipient_id) {\n-    this.recipient_id = recipient_id;\n-  }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\nindex 46c940d3..649c294b 100644\n--- a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class InviteToPartyMessage extends ClientMessage {\n \n-  private Integer recipient_id;\n+  private final Integer recipientId;\n \n-  public InviteToPartyMessage(Integer recipient_id) {\n+  public InviteToPartyMessage(Integer recipientId) {\n     super(ClientMessageType.INVITE_TO_PARTY);\n-    this.recipient_id = recipient_id;\n-  }\n-\n-  public Integer getRecipient_id() {\n-    return recipient_id;\n+    this.recipientId = recipientId;\n   }\n \n-  public void setRecipient_id(Integer recipient_id) {\n-    this.recipient_id = recipient_id;\n-  }\n }\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\ndeleted file mode 100644\nindex 649c294b..00000000\n--- a/src/main/java/com/faforever/client/remote/domain/InviteToPartyMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,15 +0,0 @@\n-package com.faforever.client.remote.domain;\n-\n-import lombok.Getter;\n-\n-@Getter\n-public class InviteToPartyMessage extends ClientMessage {\n-\n-  private final Integer recipientId;\n-\n-  public InviteToPartyMessage(Integer recipientId) {\n-    super(ClientMessageType.INVITE_TO_PARTY);\n-    this.recipientId = recipientId;\n-  }\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTk1NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536221955", "body": "my eyes!! :eyes: ", "bodyText": "my eyes!! \ud83d\udc40", "bodyHTML": "<p dir=\"auto\">my eyes!! <g-emoji class=\"g-emoji\" alias=\"eyes\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f440.png\">\ud83d\udc40</g-emoji></p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:27:59Z", "path": "src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.faforever.client.remote.domain;\n+\n+public class KickPlayerFromPartyMessage extends ClientMessage {\n+\n+  private Integer kicked_player_id;\n+\n+  public KickPlayerFromPartyMessage(Integer kicked_player_id) {\n+    super(ClientMessageType.KICK_PLAYER_FROM_PARTY);\n+    this.kicked_player_id = kicked_player_id;\n+  }\n+\n+  public Integer getKicked_player_id() {\n+    return kicked_player_id;\n+  }\n+\n+  public void setKicked_player_id(Integer kicked_player_id) {\n+    this.kicked_player_id = kicked_player_id;\n+  }\n+}", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\nindex b7288ef0..e950bac3 100644\n--- a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class KickPlayerFromPartyMessage extends ClientMessage {\n \n-  private Integer kicked_player_id;\n+  private final Integer kickedPlayerId;\n \n-  public KickPlayerFromPartyMessage(Integer kicked_player_id) {\n+  public KickPlayerFromPartyMessage(Integer kickedPlayerId) {\n     super(ClientMessageType.KICK_PLAYER_FROM_PARTY);\n-    this.kicked_player_id = kicked_player_id;\n-  }\n-\n-  public Integer getKicked_player_id() {\n-    return kicked_player_id;\n+    this.kickedPlayerId = kickedPlayerId;\n   }\n \n-  public void setKicked_player_id(Integer kicked_player_id) {\n-    this.kicked_player_id = kicked_player_id;\n-  }\n }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\nindex e950bac3..b7288ef0 100644\n--- a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n", "chunk": "@@ -1,15 +1,19 @@\n package com.faforever.client.remote.domain;\n \n-import lombok.Getter;\n-\n-@Getter\n public class KickPlayerFromPartyMessage extends ClientMessage {\n \n-  private final Integer kickedPlayerId;\n+  private Integer kicked_player_id;\n \n-  public KickPlayerFromPartyMessage(Integer kickedPlayerId) {\n+  public KickPlayerFromPartyMessage(Integer kicked_player_id) {\n     super(ClientMessageType.KICK_PLAYER_FROM_PARTY);\n-    this.kickedPlayerId = kickedPlayerId;\n+    this.kicked_player_id = kicked_player_id;\n+  }\n+\n+  public Integer getKicked_player_id() {\n+    return kicked_player_id;\n   }\n \n+  public void setKicked_player_id(Integer kicked_player_id) {\n+    this.kicked_player_id = kicked_player_id;\n+  }\n }\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\nindex b7288ef0..e950bac3 100644\n--- a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class KickPlayerFromPartyMessage extends ClientMessage {\n \n-  private Integer kicked_player_id;\n+  private final Integer kickedPlayerId;\n \n-  public KickPlayerFromPartyMessage(Integer kicked_player_id) {\n+  public KickPlayerFromPartyMessage(Integer kickedPlayerId) {\n     super(ClientMessageType.KICK_PLAYER_FROM_PARTY);\n-    this.kicked_player_id = kicked_player_id;\n-  }\n-\n-  public Integer getKicked_player_id() {\n-    return kicked_player_id;\n+    this.kickedPlayerId = kickedPlayerId;\n   }\n \n-  public void setKicked_player_id(Integer kicked_player_id) {\n-    this.kicked_player_id = kicked_player_id;\n-  }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\nindex b7288ef0..e950bac3 100644\n--- a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n", "chunk": "@@ -1,19 +1,15 @@\n package com.faforever.client.remote.domain;\n \n+import lombok.Getter;\n+\n+@Getter\n public class KickPlayerFromPartyMessage extends ClientMessage {\n \n-  private Integer kicked_player_id;\n+  private final Integer kickedPlayerId;\n \n-  public KickPlayerFromPartyMessage(Integer kicked_player_id) {\n+  public KickPlayerFromPartyMessage(Integer kickedPlayerId) {\n     super(ClientMessageType.KICK_PLAYER_FROM_PARTY);\n-    this.kicked_player_id = kicked_player_id;\n-  }\n-\n-  public Integer getKicked_player_id() {\n-    return kicked_player_id;\n+    this.kickedPlayerId = kickedPlayerId;\n   }\n \n-  public void setKicked_player_id(Integer kicked_player_id) {\n-    this.kicked_player_id = kicked_player_id;\n-  }\n }\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java b/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\ndeleted file mode 100644\nindex e950bac3..00000000\n--- a/src/main/java/com/faforever/client/remote/domain/KickPlayerFromPartyMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,15 +0,0 @@\n-package com.faforever.client.remote.domain;\n-\n-import lombok.Getter;\n-\n-@Getter\n-public class KickPlayerFromPartyMessage extends ClientMessage {\n-\n-  private final Integer kickedPlayerId;\n-\n-  public KickPlayerFromPartyMessage(Integer kickedPlayerId) {\n-    super(ClientMessageType.KICK_PLAYER_FROM_PARTY);\n-    this.kickedPlayerId = kickedPlayerId;\n-  }\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMjY1MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536222650", "body": "Please put line breaks after each stream operation", "bodyText": "Please put line breaks after each stream operation", "bodyHTML": "<p dir=\"auto\">Please put line breaks after each stream operation</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:29:00Z", "path": "src/main/java/com/faforever/client/remote/domain/MatchmakingState.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.faforever.client.remote.domain;\n+\n+import java.util.Arrays;\n+\n+public enum MatchmakingState {\n+  START(\"start\"), STOP(\"stop\");\n+\n+  private String string;\n+\n+  MatchmakingState(String string) {\n+    this.string = string;\n+  }\n+\n+  public static MatchmakingState fromString(String string) {\n+    return Arrays.stream(MatchmakingState.values()).filter(s -> s.getString().equals(string)).findFirst().orElse(null);", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\nindex e7195e32..99142066 100644\n--- a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n+++ b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n", "chunk": "@@ -5,14 +5,17 @@ import java.util.Arrays;\n public enum MatchmakingState {\n   START(\"start\"), STOP(\"stop\");\n \n-  private String string;\n+  private final String string;\n \n   MatchmakingState(String string) {\n     this.string = string;\n   }\n \n   public static MatchmakingState fromString(String string) {\n-    return Arrays.stream(MatchmakingState.values()).filter(s -> s.getString().equals(string)).findFirst().orElse(null);\n+    return Arrays.stream(MatchmakingState.values())\n+        .filter(s -> s.getString().equals(string))\n+        .findFirst()\n+        .orElse(null);\n   }\n \n   public String getString() {\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\nindex 99142066..e7195e32 100644\n--- a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n+++ b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n", "chunk": "@@ -5,17 +5,14 @@ import java.util.Arrays;\n public enum MatchmakingState {\n   START(\"start\"), STOP(\"stop\");\n \n-  private final String string;\n+  private String string;\n \n   MatchmakingState(String string) {\n     this.string = string;\n   }\n \n   public static MatchmakingState fromString(String string) {\n-    return Arrays.stream(MatchmakingState.values())\n-        .filter(s -> s.getString().equals(string))\n-        .findFirst()\n-        .orElse(null);\n+    return Arrays.stream(MatchmakingState.values()).filter(s -> s.getString().equals(string)).findFirst().orElse(null);\n   }\n \n   public String getString() {\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\nindex e7195e32..99142066 100644\n--- a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n+++ b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n", "chunk": "@@ -5,14 +5,17 @@ import java.util.Arrays;\n public enum MatchmakingState {\n   START(\"start\"), STOP(\"stop\");\n \n-  private String string;\n+  private final String string;\n \n   MatchmakingState(String string) {\n     this.string = string;\n   }\n \n   public static MatchmakingState fromString(String string) {\n-    return Arrays.stream(MatchmakingState.values()).filter(s -> s.getString().equals(string)).findFirst().orElse(null);\n+    return Arrays.stream(MatchmakingState.values())\n+        .filter(s -> s.getString().equals(string))\n+        .findFirst()\n+        .orElse(null);\n   }\n \n   public String getString() {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\nindex e7195e32..99142066 100644\n--- a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n+++ b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n", "chunk": "@@ -5,14 +5,17 @@ import java.util.Arrays;\n public enum MatchmakingState {\n   START(\"start\"), STOP(\"stop\");\n \n-  private String string;\n+  private final String string;\n \n   MatchmakingState(String string) {\n     this.string = string;\n   }\n \n   public static MatchmakingState fromString(String string) {\n-    return Arrays.stream(MatchmakingState.values()).filter(s -> s.getString().equals(string)).findFirst().orElse(null);\n+    return Arrays.stream(MatchmakingState.values())\n+        .filter(s -> s.getString().equals(string))\n+        .findFirst()\n+        .orElse(null);\n   }\n \n   public String getString() {\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\nindex 99142066..629afcb5 100644\n--- a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n+++ b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n", "chunk": "@@ -1,24 +1,8 @@\n package com.faforever.client.remote.domain;\n \n-import java.util.Arrays;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n \n public enum MatchmakingState {\n-  START(\"start\"), STOP(\"stop\");\n-\n-  private final String string;\n-\n-  MatchmakingState(String string) {\n-    this.string = string;\n-  }\n-\n-  public static MatchmakingState fromString(String string) {\n-    return Arrays.stream(MatchmakingState.values())\n-        .filter(s -> s.getString().equals(string))\n-        .findFirst()\n-        .orElse(null);\n-  }\n-\n-  public String getString() {\n-    return string;\n-  }\n+  @JsonProperty(\"start\") START,\n+  @JsonProperty(\"stop\") STOP\n }\n\\ No newline at end of file\n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java b/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\ndeleted file mode 100644\nindex 629afcb5..00000000\n--- a/src/main/java/com/faforever/client/remote/domain/MatchmakingState.java\n+++ /dev/null\n", "chunk": "@@ -1,8 +0,0 @@\n-package com.faforever.client.remote.domain;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-public enum MatchmakingState {\n-  @JsonProperty(\"start\") START,\n-  @JsonProperty(\"stop\") STOP\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMzM5Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536223396", "body": "Use lombok instead", "bodyText": "Use lombok instead", "bodyHTML": "<p dir=\"auto\">Use lombok instead</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:30:08Z", "path": "src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.faforever.client.remote.domain;\n+\n+public class PartyInviteMessage extends FafServerMessage {\n+\n+  private Integer sender;\n+\n+  public PartyInviteMessage() {\n+    super(FafServerMessageType.PARTY_INVITE);\n+  }\n+\n+  public Integer getSender() {\n+    return sender;\n+  }\n+\n+  public void setSender(Integer sender) {\n+    this.sender = sender;\n+  }", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\nindex eba9cac6..5dadd0fc 100644\n--- a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n", "chunk": "@@ -8,11 +13,4 @@ public class PartyInviteMessage extends FafServerMessage {\n     super(FafServerMessageType.PARTY_INVITE);\n   }\n \n-  public Integer getSender() {\n-    return sender;\n-  }\n-\n-  public void setSender(Integer sender) {\n-    this.sender = sender;\n-  }\n }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\nindex 5dadd0fc..eba9cac6 100644\n--- a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n", "chunk": "@@ -13,4 +8,11 @@ public class PartyInviteMessage extends FafServerMessage {\n     super(FafServerMessageType.PARTY_INVITE);\n   }\n \n+  public Integer getSender() {\n+    return sender;\n+  }\n+\n+  public void setSender(Integer sender) {\n+    this.sender = sender;\n+  }\n }\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\nindex eba9cac6..5dadd0fc 100644\n--- a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n", "chunk": "@@ -8,11 +13,4 @@ public class PartyInviteMessage extends FafServerMessage {\n     super(FafServerMessageType.PARTY_INVITE);\n   }\n \n-  public Integer getSender() {\n-    return sender;\n-  }\n-\n-  public void setSender(Integer sender) {\n-    this.sender = sender;\n-  }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\nindex eba9cac6..5dadd0fc 100644\n--- a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n", "chunk": "@@ -8,11 +13,4 @@ public class PartyInviteMessage extends FafServerMessage {\n     super(FafServerMessageType.PARTY_INVITE);\n   }\n \n-  public Integer getSender() {\n-    return sender;\n-  }\n-\n-  public void setSender(Integer sender) {\n-    this.sender = sender;\n-  }\n }\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java b/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\ndeleted file mode 100644\nindex 5dadd0fc..00000000\n--- a/src/main/java/com/faforever/client/remote/domain/PartyInviteMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,16 +0,0 @@\n-package com.faforever.client.remote.domain;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-\n-@Getter\n-@Setter\n-public class PartyInviteMessage extends FafServerMessage {\n-\n-  private Integer sender;\n-\n-  public PartyInviteMessage() {\n-    super(FafServerMessageType.PARTY_INVITE);\n-  }\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMzY0NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536223645", "body": "Use lombok instead", "bodyText": "Use lombok instead", "bodyHTML": "<p dir=\"auto\">Use lombok instead</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:30:31Z", "path": "src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.faforever.client.remote.domain;\n+\n+import com.faforever.client.game.Faction;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class SetPartyFactionsMessage extends ClientMessage {\n+\n+  private List<String> factions;\n+\n+  public SetPartyFactionsMessage(List<Faction> factions) {\n+    super(ClientMessageType.SET_PARTY_FACTIONS);\n+    this.factions = factions.stream().map(Faction::getString).collect(Collectors.toList());\n+  }\n+\n+  public List<String> getFactions() {\n+    return factions;\n+  }\n+\n+  public void setFactions(List<String> factions) {\n+    this.factions = factions;\n+  }", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\nindex f06f0402..7c166aa5 100644\n--- a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n", "chunk": "@@ -14,11 +18,4 @@ public class SetPartyFactionsMessage extends ClientMessage {\n     this.factions = factions.stream().map(Faction::getString).collect(Collectors.toList());\n   }\n \n-  public List<String> getFactions() {\n-    return factions;\n-  }\n-\n-  public void setFactions(List<String> factions) {\n-    this.factions = factions;\n-  }\n }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\nindex 7c166aa5..f06f0402 100644\n--- a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n", "chunk": "@@ -18,4 +14,11 @@ public class SetPartyFactionsMessage extends ClientMessage {\n     this.factions = factions.stream().map(Faction::getString).collect(Collectors.toList());\n   }\n \n+  public List<String> getFactions() {\n+    return factions;\n+  }\n+\n+  public void setFactions(List<String> factions) {\n+    this.factions = factions;\n+  }\n }\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\nindex f06f0402..7c166aa5 100644\n--- a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n", "chunk": "@@ -14,11 +18,4 @@ public class SetPartyFactionsMessage extends ClientMessage {\n     this.factions = factions.stream().map(Faction::getString).collect(Collectors.toList());\n   }\n \n-  public List<String> getFactions() {\n-    return factions;\n-  }\n-\n-  public void setFactions(List<String> factions) {\n-    this.factions = factions;\n-  }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\nindex f06f0402..7c166aa5 100644\n--- a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n+++ b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n", "chunk": "@@ -14,11 +18,4 @@ public class SetPartyFactionsMessage extends ClientMessage {\n     this.factions = factions.stream().map(Faction::getString).collect(Collectors.toList());\n   }\n \n-  public List<String> getFactions() {\n-    return factions;\n-  }\n-\n-  public void setFactions(List<String> factions) {\n-    this.factions = factions;\n-  }\n }\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java b/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\ndeleted file mode 100644\nindex 7c166aa5..00000000\n--- a/src/main/java/com/faforever/client/remote/domain/SetPartyFactionsMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-package com.faforever.client.remote.domain;\n-\n-import com.faforever.client.game.Faction;\n-import lombok.Getter;\n-import lombok.Setter;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-@Getter\n-@Setter\n-public class SetPartyFactionsMessage extends ClientMessage {\n-\n-  private List<String> factions;\n-\n-  public SetPartyFactionsMessage(List<Faction> factions) {\n-    super(ClientMessageType.SET_PARTY_FACTIONS);\n-    this.factions = factions.stream().map(Faction::getString).collect(Collectors.toList());\n-  }\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTA5Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536225097", "body": "Wait what? An object isn't allowed to change itself outside of the main thread?", "bodyText": "Wait what? An object isn't allowed to change itself outside of the main thread?", "bodyHTML": "<p dir=\"auto\">Wait what? An object isn't allowed to change itself outside of the main thread?</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:32:43Z", "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4OTU2NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536789564", "bodyText": "This seems fishy it should be able to run outside the main thread unless it is bound to some graphic somewhere", "author": "Sheikah45", "createdAt": "2020-12-05T14:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTA5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1ODg3Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r537158876", "bodyText": "There are a lot of graphical bindings to this, so it is necessary", "author": "BlackYps", "createdAt": "2020-12-07T00:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..b15fe2cf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -24,44 +23,13 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex b15fe2cf..81413f92 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -23,13 +24,44 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private final ObservableList<PartyMember> members;\n+  private ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));\n+          }\n+        });\n+\n+    playerService\n+        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n+        .thenAccept(players -> {\n+          List<PartyMember> members = message.getMembers().stream().map(member -> {\n+            Optional<Player> player;\n+            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n+              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n+            } else {\n+              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n+            }\n+\n+            if (!player.isPresent()) {\n+              log.warn(\"Could not find party member {}\", member.getPlayer());\n+              return null;\n+            } else {\n+              return new PartyMember(player.get(), member.getFactions());\n+            }\n+          }).filter(Objects::nonNull).collect(Collectors.toList());\n+          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n+          Platform.runLater(() -> this.members.setAll(members));\n+        });\n+  }\n+\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "6a7a51a60428a593bdd217aa5939c84fb6d54b25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..e05fcddd 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -32,34 +31,44 @@ public class Party {\n   }\n \n   public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n+    setOwnerFromMessage(message, playerService);\n+    setMembersFromMessage(message, playerService);\n+  }\n+\n+  private void setOwnerFromMessage(PartyInfoMessage message, PlayerService playerService) {\n+    List<Player> players =  playerService.getOnlinePlayersByIds(List.of(message.getOwner()));\n+    if (!players.isEmpty()) {\n+      Platform.runLater(() -> owner.set(players.get(0)));\n+    }\n+  }\n+\n+  private void setMembersFromMessage(PartyInfoMessage message, PlayerService playerService) {\n+    List<Player> players = playerService.getOnlinePlayersByIds(\n+        message.getMembers()\n+            .stream()\n+        .map(PartyInfoMessage.PartyMember::getPlayer)\n+        .collect(Collectors.toList()));\n+\n+    List<PartyMember> partyMembers = message.getMembers()\n+        .stream()\n+        .map(member -> pickRightPlayerToCreatePartyMember(players, member))\n+        .filter(Objects::nonNull)\n+        .collect(Collectors.toList());\n+\n+    Platform.runLater(() -> this.members.setAll(partyMembers));\n+  }\n+\n+  private PartyMember pickRightPlayerToCreatePartyMember(List<Player> players, PartyInfoMessage.PartyMember member) {\n+    Optional<Player> player = players.stream()\n+          .filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer())\n+          .findFirst();\n+\n+    if (player.isEmpty()) {\n+      log.warn(\"Could not find party member {}\", member.getPlayer());\n+      return null;\n+    } else {\n+      return new PartyMember(player.get(), member.getFactions());\n+    }\n   }\n \n   public Player getOwner() {\n", "next_change": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex e05fcddd..b15fe2cf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -23,54 +23,13 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    setOwnerFromMessage(message, playerService);\n-    setMembersFromMessage(message, playerService);\n-  }\n-\n-  private void setOwnerFromMessage(PartyInfoMessage message, PlayerService playerService) {\n-    List<Player> players =  playerService.getOnlinePlayersByIds(List.of(message.getOwner()));\n-    if (!players.isEmpty()) {\n-      Platform.runLater(() -> owner.set(players.get(0)));\n-    }\n-  }\n-\n-  private void setMembersFromMessage(PartyInfoMessage message, PlayerService playerService) {\n-    List<Player> players = playerService.getOnlinePlayersByIds(\n-        message.getMembers()\n-            .stream()\n-        .map(PartyInfoMessage.PartyMember::getPlayer)\n-        .collect(Collectors.toList()));\n-\n-    List<PartyMember> partyMembers = message.getMembers()\n-        .stream()\n-        .map(member -> pickRightPlayerToCreatePartyMember(players, member))\n-        .filter(Objects::nonNull)\n-        .collect(Collectors.toList());\n-\n-    Platform.runLater(() -> this.members.setAll(partyMembers));\n-  }\n-\n-  private PartyMember pickRightPlayerToCreatePartyMember(List<Player> players, PartyInfoMessage.PartyMember member) {\n-    Optional<Player> player = players.stream()\n-          .filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer())\n-          .findFirst();\n-\n-    if (player.isEmpty()) {\n-      log.warn(\"Could not find party member {}\", member.getPlayer());\n-      return null;\n-    } else {\n-      return new PartyMember(player.get(), member.getFactions());\n-    }\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..96cbe0bb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -14,54 +11,19 @@ import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n \n @Slf4j\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\ndeleted file mode 100644\nindex 96cbe0bb..00000000\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package com.faforever.client.teammatchmaking;\n-\n-import com.faforever.client.game.Faction;\n-import com.faforever.client.player.Player;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-@Slf4j\n-public class Party {\n-\n-  private final ObjectProperty<Player> owner;\n-  private final ObservableList<PartyMember> members;\n-\n-  public Party() {\n-    owner = new SimpleObjectProperty<>();\n-    members = FXCollections.observableArrayList();\n-  }\n-\n-  public Player getOwner() {\n-    return owner.get();\n-  }\n-\n-  public void setOwner(Player owner) {\n-    this.owner.set(owner);\n-  }\n-\n-  public ObjectProperty<Player> ownerProperty() {\n-    return owner;\n-  }\n-\n-  public ObservableList<PartyMember> getMembers() {\n-    return members;\n-  }\n-\n-  public void setMembers(ObservableList<PartyMember> members) {\n-    this.members.setAll(members);\n-  }\n-\n-  @Data\n-  @AllArgsConstructor\n-  public static class PartyMember {\n-    private final Player player;\n-    private List<Faction> factions;\n-\n-    public PartyMember(Player player) {\n-      this.player = player;\n-      this.factions = Arrays.asList(Faction.AEON, Faction.CYBRAN, Faction.SERAPHIM, Faction.UEF);\n-    }\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTMzNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536225335", "body": "use `List.of(message.getOwner())`", "bodyText": "use List.of(message.getOwner())", "bodyHTML": "<p dir=\"auto\">use <code>List.of(message.getOwner())</code></p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:33:06Z", "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..b15fe2cf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -24,44 +23,13 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex b15fe2cf..81413f92 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -23,13 +24,44 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private final ObservableList<PartyMember> members;\n+  private ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));\n+          }\n+        });\n+\n+    playerService\n+        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n+        .thenAccept(players -> {\n+          List<PartyMember> members = message.getMembers().stream().map(member -> {\n+            Optional<Player> player;\n+            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n+              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n+            } else {\n+              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n+            }\n+\n+            if (!player.isPresent()) {\n+              log.warn(\"Could not find party member {}\", member.getPlayer());\n+              return null;\n+            } else {\n+              return new PartyMember(player.get(), member.getFactions());\n+            }\n+          }).filter(Objects::nonNull).collect(Collectors.toList());\n+          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n+          Platform.runLater(() -> this.members.setAll(members));\n+        });\n+  }\n+\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "6a7a51a60428a593bdd217aa5939c84fb6d54b25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..e05fcddd 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -32,34 +31,44 @@ public class Party {\n   }\n \n   public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n+    setOwnerFromMessage(message, playerService);\n+    setMembersFromMessage(message, playerService);\n+  }\n+\n+  private void setOwnerFromMessage(PartyInfoMessage message, PlayerService playerService) {\n+    List<Player> players =  playerService.getOnlinePlayersByIds(List.of(message.getOwner()));\n+    if (!players.isEmpty()) {\n+      Platform.runLater(() -> owner.set(players.get(0)));\n+    }\n+  }\n+\n+  private void setMembersFromMessage(PartyInfoMessage message, PlayerService playerService) {\n+    List<Player> players = playerService.getOnlinePlayersByIds(\n+        message.getMembers()\n+            .stream()\n+        .map(PartyInfoMessage.PartyMember::getPlayer)\n+        .collect(Collectors.toList()));\n+\n+    List<PartyMember> partyMembers = message.getMembers()\n+        .stream()\n+        .map(member -> pickRightPlayerToCreatePartyMember(players, member))\n+        .filter(Objects::nonNull)\n+        .collect(Collectors.toList());\n+\n+    Platform.runLater(() -> this.members.setAll(partyMembers));\n+  }\n+\n+  private PartyMember pickRightPlayerToCreatePartyMember(List<Player> players, PartyInfoMessage.PartyMember member) {\n+    Optional<Player> player = players.stream()\n+          .filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer())\n+          .findFirst();\n+\n+    if (player.isEmpty()) {\n+      log.warn(\"Could not find party member {}\", member.getPlayer());\n+      return null;\n+    } else {\n+      return new PartyMember(player.get(), member.getFactions());\n+    }\n   }\n \n   public Player getOwner() {\n", "next_change": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex e05fcddd..b15fe2cf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -23,54 +23,13 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    setOwnerFromMessage(message, playerService);\n-    setMembersFromMessage(message, playerService);\n-  }\n-\n-  private void setOwnerFromMessage(PartyInfoMessage message, PlayerService playerService) {\n-    List<Player> players =  playerService.getOnlinePlayersByIds(List.of(message.getOwner()));\n-    if (!players.isEmpty()) {\n-      Platform.runLater(() -> owner.set(players.get(0)));\n-    }\n-  }\n-\n-  private void setMembersFromMessage(PartyInfoMessage message, PlayerService playerService) {\n-    List<Player> players = playerService.getOnlinePlayersByIds(\n-        message.getMembers()\n-            .stream()\n-        .map(PartyInfoMessage.PartyMember::getPlayer)\n-        .collect(Collectors.toList()));\n-\n-    List<PartyMember> partyMembers = message.getMembers()\n-        .stream()\n-        .map(member -> pickRightPlayerToCreatePartyMember(players, member))\n-        .filter(Objects::nonNull)\n-        .collect(Collectors.toList());\n-\n-    Platform.runLater(() -> this.members.setAll(partyMembers));\n-  }\n-\n-  private PartyMember pickRightPlayerToCreatePartyMember(List<Player> players, PartyInfoMessage.PartyMember member) {\n-    Optional<Player> player = players.stream()\n-          .filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer())\n-          .findFirst();\n-\n-    if (player.isEmpty()) {\n-      log.warn(\"Could not find party member {}\", member.getPlayer());\n-      return null;\n-    } else {\n-      return new PartyMember(player.get(), member.getFactions());\n-    }\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..96cbe0bb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -14,54 +11,19 @@ import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n \n @Slf4j\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\ndeleted file mode 100644\nindex 96cbe0bb..00000000\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package com.faforever.client.teammatchmaking;\n-\n-import com.faforever.client.game.Faction;\n-import com.faforever.client.player.Player;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-@Slf4j\n-public class Party {\n-\n-  private final ObjectProperty<Player> owner;\n-  private final ObservableList<PartyMember> members;\n-\n-  public Party() {\n-    owner = new SimpleObjectProperty<>();\n-    members = FXCollections.observableArrayList();\n-  }\n-\n-  public Player getOwner() {\n-    return owner.get();\n-  }\n-\n-  public void setOwner(Player owner) {\n-    this.owner.set(owner);\n-  }\n-\n-  public ObjectProperty<Player> ownerProperty() {\n-    return owner;\n-  }\n-\n-  public ObservableList<PartyMember> getMembers() {\n-    return members;\n-  }\n-\n-  public void setMembers(ObservableList<PartyMember> members) {\n-    this.members.setAll(members);\n-  }\n-\n-  @Data\n-  @AllArgsConstructor\n-  public static class PartyMember {\n-    private final Player player;\n-    private List<Faction> factions;\n-\n-    public PartyMember(Player player) {\n-      this.player = player;\n-      this.factions = Arrays.asList(Faction.AEON, Faction.CYBRAN, Faction.SERAPHIM, Faction.UEF);\n-    }\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNjQzOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536226439", "body": "This is a heavy violation of separation of concerns. This method is NOT allowed in a dto. Put it into the playerservice or wherever you need it.", "bodyText": "This is a heavy violation of separation of concerns. This method is NOT allowed in a dto. Put it into the playerservice or wherever you need it.", "bodyHTML": "<p dir=\"auto\">This is a heavy violation of separation of concerns. This method is NOT allowed in a dto. Put it into the playerservice or wherever you need it.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:34:47Z", "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..b15fe2cf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -24,44 +23,13 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex b15fe2cf..81413f92 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -23,13 +24,44 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private final ObservableList<PartyMember> members;\n+  private ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));\n+          }\n+        });\n+\n+    playerService\n+        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n+        .thenAccept(players -> {\n+          List<PartyMember> members = message.getMembers().stream().map(member -> {\n+            Optional<Player> player;\n+            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n+              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n+            } else {\n+              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n+            }\n+\n+            if (!player.isPresent()) {\n+              log.warn(\"Could not find party member {}\", member.getPlayer());\n+              return null;\n+            } else {\n+              return new PartyMember(player.get(), member.getFactions());\n+            }\n+          }).filter(Objects::nonNull).collect(Collectors.toList());\n+          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n+          Platform.runLater(() -> this.members.setAll(members));\n+        });\n+  }\n+\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "6a7a51a60428a593bdd217aa5939c84fb6d54b25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..e05fcddd 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -32,34 +31,44 @@ public class Party {\n   }\n \n   public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n+    setOwnerFromMessage(message, playerService);\n+    setMembersFromMessage(message, playerService);\n+  }\n+\n+  private void setOwnerFromMessage(PartyInfoMessage message, PlayerService playerService) {\n+    List<Player> players =  playerService.getOnlinePlayersByIds(List.of(message.getOwner()));\n+    if (!players.isEmpty()) {\n+      Platform.runLater(() -> owner.set(players.get(0)));\n+    }\n+  }\n+\n+  private void setMembersFromMessage(PartyInfoMessage message, PlayerService playerService) {\n+    List<Player> players = playerService.getOnlinePlayersByIds(\n+        message.getMembers()\n+            .stream()\n+        .map(PartyInfoMessage.PartyMember::getPlayer)\n+        .collect(Collectors.toList()));\n+\n+    List<PartyMember> partyMembers = message.getMembers()\n+        .stream()\n+        .map(member -> pickRightPlayerToCreatePartyMember(players, member))\n+        .filter(Objects::nonNull)\n+        .collect(Collectors.toList());\n+\n+    Platform.runLater(() -> this.members.setAll(partyMembers));\n+  }\n+\n+  private PartyMember pickRightPlayerToCreatePartyMember(List<Player> players, PartyInfoMessage.PartyMember member) {\n+    Optional<Player> player = players.stream()\n+          .filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer())\n+          .findFirst();\n+\n+    if (player.isEmpty()) {\n+      log.warn(\"Could not find party member {}\", member.getPlayer());\n+      return null;\n+    } else {\n+      return new PartyMember(player.get(), member.getFactions());\n+    }\n   }\n \n   public Player getOwner() {\n", "next_change": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex e05fcddd..b15fe2cf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -23,54 +23,13 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    setOwnerFromMessage(message, playerService);\n-    setMembersFromMessage(message, playerService);\n-  }\n-\n-  private void setOwnerFromMessage(PartyInfoMessage message, PlayerService playerService) {\n-    List<Player> players =  playerService.getOnlinePlayersByIds(List.of(message.getOwner()));\n-    if (!players.isEmpty()) {\n-      Platform.runLater(() -> owner.set(players.get(0)));\n-    }\n-  }\n-\n-  private void setMembersFromMessage(PartyInfoMessage message, PlayerService playerService) {\n-    List<Player> players = playerService.getOnlinePlayersByIds(\n-        message.getMembers()\n-            .stream()\n-        .map(PartyInfoMessage.PartyMember::getPlayer)\n-        .collect(Collectors.toList()));\n-\n-    List<PartyMember> partyMembers = message.getMembers()\n-        .stream()\n-        .map(member -> pickRightPlayerToCreatePartyMember(players, member))\n-        .filter(Objects::nonNull)\n-        .collect(Collectors.toList());\n-\n-    Platform.runLater(() -> this.members.setAll(partyMembers));\n-  }\n-\n-  private PartyMember pickRightPlayerToCreatePartyMember(List<Player> players, PartyInfoMessage.PartyMember member) {\n-    Optional<Player> player = players.stream()\n-          .filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer())\n-          .findFirst();\n-\n-    if (player.isEmpty()) {\n-      log.warn(\"Could not find party member {}\", member.getPlayer());\n-      return null;\n-    } else {\n-      return new PartyMember(player.get(), member.getFactions());\n-    }\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..96cbe0bb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -14,54 +11,19 @@ import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n \n @Slf4j\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\ndeleted file mode 100644\nindex 96cbe0bb..00000000\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package com.faforever.client.teammatchmaking;\n-\n-import com.faforever.client.game.Faction;\n-import com.faforever.client.player.Player;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-@Slf4j\n-public class Party {\n-\n-  private final ObjectProperty<Player> owner;\n-  private final ObservableList<PartyMember> members;\n-\n-  public Party() {\n-    owner = new SimpleObjectProperty<>();\n-    members = FXCollections.observableArrayList();\n-  }\n-\n-  public Player getOwner() {\n-    return owner.get();\n-  }\n-\n-  public void setOwner(Player owner) {\n-    this.owner.set(owner);\n-  }\n-\n-  public ObjectProperty<Player> ownerProperty() {\n-    return owner;\n-  }\n-\n-  public ObservableList<PartyMember> getMembers() {\n-    return members;\n-  }\n-\n-  public void setMembers(ObservableList<PartyMember> members) {\n-    this.members.setAll(members);\n-  }\n-\n-  @Data\n-  @AllArgsConstructor\n-  public static class PartyMember {\n-    private final Player player;\n-    private List<Faction> factions;\n-\n-    public PartyMember(Player player) {\n-      this.player = player;\n-      this.factions = Arrays.asList(Faction.AEON, Faction.CYBRAN, Faction.SERAPHIM, Faction.UEF);\n-    }\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNzAxMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536227012", "body": "The nested complexitiy of these lines is too damn high. Outsource it in functions or at least improve formatting with proper linebreaking on each stream.", "bodyText": "The nested complexitiy of these lines is too damn high. Outsource it in functions or at least improve formatting with proper linebreaking on each stream.", "bodyHTML": "<p dir=\"auto\">The nested complexitiy of these lines is too damn high. Outsource it in functions or at least improve formatting with proper linebreaking on each stream.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:35:37Z", "path": "src/main/java/com/faforever/client/teammatchmaking/Party.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import javafx.application.Platform;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class Party {\n+\n+  private final ObjectProperty<Player> owner;\n+  private ObservableList<PartyMember> members;\n+\n+  public Party() {\n+    owner = new SimpleObjectProperty<>();\n+    members = FXCollections.observableArrayList();\n+  }\n+\n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));\n+          }\n+        });\n+\n+    playerService\n+        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n+        .thenAccept(players -> {\n+          List<PartyMember> members = message.getMembers().stream().map(member -> {\n+            Optional<Player> player;\n+            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n+              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n+            } else {\n+              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n+            }\n+\n+            if (!player.isPresent()) {\n+              log.warn(\"Could not find party member {}\", member.getPlayer());\n+              return null;\n+            } else {\n+              return new PartyMember(player.get(), member.getFactions());\n+            }\n+          }).filter(Objects::nonNull).collect(Collectors.toList());\n+          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n+          Platform.runLater(() -> this.members.setAll(members));\n+        });", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..b15fe2cf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -24,44 +23,13 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex b15fe2cf..81413f92 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -23,13 +24,44 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private final ObservableList<PartyMember> members;\n+  private ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n+  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n+    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n+        .thenAccept(players -> {\n+          if (!players.isEmpty()) {\n+            Platform.runLater(() -> owner.set(players.get(0)));\n+          }\n+        });\n+\n+    playerService\n+        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n+        .thenAccept(players -> {\n+          List<PartyMember> members = message.getMembers().stream().map(member -> {\n+            Optional<Player> player;\n+            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n+              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n+            } else {\n+              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n+            }\n+\n+            if (!player.isPresent()) {\n+              log.warn(\"Could not find party member {}\", member.getPlayer());\n+              return null;\n+            } else {\n+              return new PartyMember(player.get(), member.getFactions());\n+            }\n+          }).filter(Objects::nonNull).collect(Collectors.toList());\n+          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n+          Platform.runLater(() -> this.members.setAll(members));\n+        });\n+  }\n+\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "6a7a51a60428a593bdd217aa5939c84fb6d54b25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..e05fcddd 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -32,34 +31,44 @@ public class Party {\n   }\n \n   public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n+    setOwnerFromMessage(message, playerService);\n+    setMembersFromMessage(message, playerService);\n+  }\n+\n+  private void setOwnerFromMessage(PartyInfoMessage message, PlayerService playerService) {\n+    List<Player> players =  playerService.getOnlinePlayersByIds(List.of(message.getOwner()));\n+    if (!players.isEmpty()) {\n+      Platform.runLater(() -> owner.set(players.get(0)));\n+    }\n+  }\n+\n+  private void setMembersFromMessage(PartyInfoMessage message, PlayerService playerService) {\n+    List<Player> players = playerService.getOnlinePlayersByIds(\n+        message.getMembers()\n+            .stream()\n+        .map(PartyInfoMessage.PartyMember::getPlayer)\n+        .collect(Collectors.toList()));\n+\n+    List<PartyMember> partyMembers = message.getMembers()\n+        .stream()\n+        .map(member -> pickRightPlayerToCreatePartyMember(players, member))\n+        .filter(Objects::nonNull)\n+        .collect(Collectors.toList());\n+\n+    Platform.runLater(() -> this.members.setAll(partyMembers));\n+  }\n+\n+  private PartyMember pickRightPlayerToCreatePartyMember(List<Player> players, PartyInfoMessage.PartyMember member) {\n+    Optional<Player> player = players.stream()\n+          .filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer())\n+          .findFirst();\n+\n+    if (player.isEmpty()) {\n+      log.warn(\"Could not find party member {}\", member.getPlayer());\n+      return null;\n+    } else {\n+      return new PartyMember(player.get(), member.getFactions());\n+    }\n   }\n \n   public Player getOwner() {\n", "next_change": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex e05fcddd..b15fe2cf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -23,54 +23,13 @@ import java.util.stream.Collectors;\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    setOwnerFromMessage(message, playerService);\n-    setMembersFromMessage(message, playerService);\n-  }\n-\n-  private void setOwnerFromMessage(PartyInfoMessage message, PlayerService playerService) {\n-    List<Player> players =  playerService.getOnlinePlayersByIds(List.of(message.getOwner()));\n-    if (!players.isEmpty()) {\n-      Platform.runLater(() -> owner.set(players.get(0)));\n-    }\n-  }\n-\n-  private void setMembersFromMessage(PartyInfoMessage message, PlayerService playerService) {\n-    List<Player> players = playerService.getOnlinePlayersByIds(\n-        message.getMembers()\n-            .stream()\n-        .map(PartyInfoMessage.PartyMember::getPlayer)\n-        .collect(Collectors.toList()));\n-\n-    List<PartyMember> partyMembers = message.getMembers()\n-        .stream()\n-        .map(member -> pickRightPlayerToCreatePartyMember(players, member))\n-        .filter(Objects::nonNull)\n-        .collect(Collectors.toList());\n-\n-    Platform.runLater(() -> this.members.setAll(partyMembers));\n-  }\n-\n-  private PartyMember pickRightPlayerToCreatePartyMember(List<Player> players, PartyInfoMessage.PartyMember member) {\n-    Optional<Player> player = players.stream()\n-          .filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer())\n-          .findFirst();\n-\n-    if (player.isEmpty()) {\n-      log.warn(\"Could not find party member {}\", member.getPlayer());\n-      return null;\n-    } else {\n-      return new PartyMember(player.get(), member.getFactions());\n-    }\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\nindex 81413f92..96cbe0bb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/Party.java\n", "chunk": "@@ -14,54 +11,19 @@ import lombok.Data;\n import lombok.extern.slf4j.Slf4j;\n \n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n \n @Slf4j\n public class Party {\n \n   private final ObjectProperty<Player> owner;\n-  private ObservableList<PartyMember> members;\n+  private final ObservableList<PartyMember> members;\n \n   public Party() {\n     owner = new SimpleObjectProperty<>();\n     members = FXCollections.observableArrayList();\n   }\n \n-  public void fromInfoMessage(PartyInfoMessage message, PlayerService playerService) {\n-    playerService.getPlayersByIds(Collections.singletonList(message.getOwner()))\n-        .thenAccept(players -> {\n-          if (!players.isEmpty()) {\n-            Platform.runLater(() -> owner.set(players.get(0)));\n-          }\n-        });\n-\n-    playerService\n-        .getPlayersByIds(message.getMembers().stream().map(PartyInfoMessage.PartyMember::getPlayer).collect(Collectors.toList()))\n-        .thenAccept(players -> {\n-          List<PartyMember> members = message.getMembers().stream().map(member -> {\n-            Optional<Player> player;\n-            if (playerService.getCurrentPlayer().map(Player::getId).map(id -> id.equals(member.getPlayer())).orElse(false)) {\n-              player = playerService.getCurrentPlayer(); // The player found by the search below might contain less information (e.g. a missing flag)\n-            } else {\n-              player = players.stream().filter(playerToBeFiltered -> playerToBeFiltered.getId() == member.getPlayer()).findFirst();\n-            }\n-\n-            if (!player.isPresent()) {\n-              log.warn(\"Could not find party member {}\", member.getPlayer());\n-              return null;\n-            } else {\n-              return new PartyMember(player.get(), member.getFactions());\n-            }\n-          }).filter(Objects::nonNull).collect(Collectors.toList());\n-          //TODO: this is a race condition. The api might answer with big delay and then server message order might be changed.\n-          Platform.runLater(() -> this.members.setAll(members));\n-        });\n-  }\n-\n   public Player getOwner() {\n     return owner.get();\n   }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/Party.java b/src/main/java/com/faforever/client/teammatchmaking/Party.java\ndeleted file mode 100644\nindex 96cbe0bb..00000000\n--- a/src/main/java/com/faforever/client/teammatchmaking/Party.java\n+++ /dev/null\n", "chunk": "@@ -1,58 +0,0 @@\n-package com.faforever.client.teammatchmaking;\n-\n-import com.faforever.client.game.Faction;\n-import com.faforever.client.player.Player;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-@Slf4j\n-public class Party {\n-\n-  private final ObjectProperty<Player> owner;\n-  private final ObservableList<PartyMember> members;\n-\n-  public Party() {\n-    owner = new SimpleObjectProperty<>();\n-    members = FXCollections.observableArrayList();\n-  }\n-\n-  public Player getOwner() {\n-    return owner.get();\n-  }\n-\n-  public void setOwner(Player owner) {\n-    this.owner.set(owner);\n-  }\n-\n-  public ObjectProperty<Player> ownerProperty() {\n-    return owner;\n-  }\n-\n-  public ObservableList<PartyMember> getMembers() {\n-    return members;\n-  }\n-\n-  public void setMembers(ObservableList<PartyMember> members) {\n-    this.members.setAll(members);\n-  }\n-\n-  @Data\n-  @AllArgsConstructor\n-  public static class PartyMember {\n-    private final Player player;\n-    private List<Faction> factions;\n-\n-    public PartyMember(Player player) {\n-      this.player = player;\n-      this.factions = Arrays.asList(Faction.AEON, Faction.CYBRAN, Faction.SERAPHIM, Faction.UEF);\n-    }\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyODgzMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536228833", "body": "Revert revert! :D", "bodyText": "Revert revert! :D", "bodyHTML": "<p dir=\"auto\">Revert revert! :D</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:38:18Z", "path": "src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java", "diffHunk": "@@ -233,6 +234,7 @@ public void testOnChatMessageAction() {\n   }\n \n   @Test\n+  @Ignore // TODO: REVERT", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java b/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\nindex 969bd476..dd353371 100644\n--- a/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\n+++ b/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\n", "chunk": "@@ -234,7 +234,6 @@ public class AbstractChatTabControllerTest extends AbstractPlainJavaFxTest {\n   }\n \n   @Test\n-  @Ignore // TODO: REVERT\n   public void testHasFocus() {\n     assertThat(instance.hasFocus(), is(true));\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java b/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\nindex 969bd476..fb7e15ad 100644\n--- a/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\n+++ b/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\n", "chunk": "@@ -234,7 +235,6 @@ public class AbstractChatTabControllerTest extends AbstractPlainJavaFxTest {\n   }\n \n   @Test\n-  @Ignore // TODO: REVERT\n   public void testHasFocus() {\n     assertThat(instance.hasFocus(), is(true));\n   }\n", "next_change": {"commit": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java b/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\nindex fb7e15ad..b8a2c201 100644\n--- a/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\n+++ b/src/test/java/com/faforever/client/chat/AbstractChatTabControllerTest.java\n", "chunk": "@@ -239,85 +244,35 @@ public class AbstractChatTabControllerTest extends AbstractPlainJavaFxTest {\n     assertThat(instance.hasFocus(), is(true));\n   }\n \n-  @Test\n-  public void testPasteImageCtrlV() {\n-    KeyCode modifier;\n-    if (Platform.isMacOSX()) {\n-      modifier = KeyCode.META;\n-    } else {\n-      modifier = KeyCode.CONTROL;\n-    }\n-\n-    Image image = new Image(getClass().getResourceAsStream(\"/theme/images/default_achievement.png\"));\n-\n-    String url = \"http://www.example.com/fake.png\";\n-    when(imageUploadService.uploadImageInBackground(any())).thenReturn(completedFuture(url));\n-\n-    WaitForAsyncUtils.waitForAsyncFx(TIMEOUT, () -> {\n-      ClipboardContent clipboardContent = new ClipboardContent();\n-      clipboardContent.putImage(image);\n-      Clipboard.getSystemClipboard().setContent(clipboardContent);\n-\n-      instance.messageTextField().getOnKeyReleased().handle(\n-          keyEvent(KeyCode.V, singletonList(modifier))\n-      );\n-    });\n-\n-    assertThat(instance.messageTextField().getText(), is(url));\n-  }\n-\n-  @Test\n-  public void testPasteImageShiftInsert() {\n-    Image image = new Image(getClass().getResourceAsStream(\"/theme/images/default_achievement.png\"));\n-\n-    String url = \"http://www.example.com/fake.png\";\n-    when(imageUploadService.uploadImageInBackground(any())).thenReturn(completedFuture(url));\n-\n-    WaitForAsyncUtils.waitForAsyncFx(TIMEOUT, () -> {\n-      ClipboardContent clipboardContent = new ClipboardContent();\n-      clipboardContent.putImage(image);\n-      Clipboard.getSystemClipboard().setContent(clipboardContent);\n-\n-      instance.messageTextField().getOnKeyReleased().handle(\n-          keyEvent(KeyCode.INSERT, singletonList(KeyCode.SHIFT))\n-      );\n-    });\n-\n-    assertThat(instance.messageTextField().getText(), is(url));\n-  }\n-\n   @Test\n   public void getMessageCssClassFriend() {\n-    String playerName = \"somePlayer\";\n-    Player player = new Player(playerName);\n+    PlayerBean player = PlayerBeanBuilder.create().defaultValues().get();\n     player.setSocialStatus(FRIEND);\n-    when(playerService.getPlayerForUsername(playerName)).thenReturn(Optional.of(player));\n-    assertEquals(instance.getMessageCssClass(playerName), SocialStatus.FRIEND.getCssClass());\n+    when(playerService.getPlayerByNameIfOnline(player.getUsername())).thenReturn(Optional.of(player));\n+    assertEquals(instance.getMessageCssClass(player.getUsername()), SocialStatus.FRIEND.getCssClass());\n   }\n \n   @Test\n   public void getMessageCssClassFoe() {\n-    String playerName = \"somePlayer\";\n-    Player player = new Player(playerName);\n+    PlayerBean player = PlayerBeanBuilder.create().defaultValues().get();\n     player.setSocialStatus(FOE);\n-    when(playerService.getPlayerForUsername(playerName)).thenReturn(Optional.of(player));\n-    assertEquals(instance.getMessageCssClass(playerName), SocialStatus.FOE.getCssClass());\n+    when(playerService.getPlayerByNameIfOnline(player.getUsername())).thenReturn(Optional.of(player));\n+    assertEquals(instance.getMessageCssClass(player.getUsername()), SocialStatus.FOE.getCssClass());\n   }\n \n   @Test\n   public void getMessageCssClassChatOnly() {\n     String playerName = \"somePlayer\";\n-    when(playerService.getPlayerForUsername(playerName)).thenReturn(Optional.empty());\n+    when(playerService.getPlayerByNameIfOnline(playerName)).thenReturn(Optional.empty());\n     assertEquals(instance.getMessageCssClass(playerName), CSS_CLASS_CHAT_ONLY);\n   }\n \n   @Test\n   public void getMessageCssClassSelf() {\n-    String playerName = \"junit\";\n-    Player player = new Player(playerName);\n+    PlayerBean player = PlayerBeanBuilder.create().defaultValues().get();\n     player.setSocialStatus(SELF);\n-    when(playerService.getPlayerForUsername(playerName)).thenReturn(Optional.of(player));\n-    assertEquals(instance.getMessageCssClass(playerName), SocialStatus.SELF.getCssClass());\n+    when(playerService.getPlayerByNameIfOnline(player.getUsername())).thenReturn(Optional.of(player));\n+    assertEquals(instance.getMessageCssClass(player.getUsername()), SocialStatus.SELF.getCssClass());\n   }\n \n   @Test\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "fb6e1b606e2f8ca91ef6870711513d9777f64f85", "committedDate": "2021-06-16 09:11:03 -0400", "message": "Extend mention pattern (#2271)"}, {"oid": "63cc61bf740cfb39092ea25035d7f81fc1564c78", "committedDate": "2021-06-16 18:15:30 -0400", "message": "Ensure request focus on thread (#2272)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "073bb6fe7712ad1fb01bd89b669fe10e6ccf3401", "committedDate": "2021-07-11 14:54:13 -0400", "message": "Update to junit5 (#2305)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "d5785a3fac2e05a97682da7215cf1689709372fd", "committedDate": "2021-08-15 08:14:00 -0400", "message": "fix \"messages containing multiple hash signs results in spam\" (#2327)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "cf1a484e8a3aacb3efeff891bea28f2525a2d618", "committedDate": "2021-12-05 10:28:56 -0500", "message": "Support emojis (#2430)"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTA2OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536229068", "body": "I guess this block can be removed now.", "bodyText": "I guess this block can be removed now.", "bodyHTML": "<p dir=\"auto\">I guess this block can be removed now.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:38:39Z", "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -484,80 +479,83 @@ public void testOnGameInfoRemove() {\n     assertThat(instance.getGames(), empty());\n   }\n \n-  @Test\n-  public void testStartSearchLadder1v1() throws Exception {\n-    int uid = 123;\n-    String map = \"scmp_037\";\n-    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n-        .uid(uid).mod(\"ladder1v1\").mapname(map)\n-        .expectedPlayers(2)\n-        .faction(CYBRAN)\n-        .initMode(LobbyMode.AUTO_LOBBY)\n-        .mapPosition(4)\n-        .team(1)\n-        .get();\n-\n-    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n-\n-    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n-    mockStartGameProcess(uid, RatingMode.LADDER_1V1, CYBRAN, false, additionalArgs);\n-    when(fafService.startSearchLadder1v1(CYBRAN)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n-    when(mapService.isInstalled(map)).thenReturn(false);\n-    when(mapService.download(map)).thenReturn(completedFuture(null));\n-    when(modService.getFeaturedMod(LADDER_1V1.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n-\n-    instance.startSearchLadder1v1(CYBRAN).toCompletableFuture();\n-\n-    verify(fafService).startSearchLadder1v1(CYBRAN);\n-    verify(mapService).download(map);\n-    verify(replayService).start(eq(uid), any());\n-    verify(forgedAllianceService).startGame(\n-        uid, CYBRAN, asList(additionalArgs), RatingMode.LADDER_1V1, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-  }\n-\n-  @Test\n-  public void testStartSearchLadder1v1GameRunningDoesNothing() throws Exception {\n-    Process process = mock(Process.class);\n-    when(process.isAlive()).thenReturn(true);\n-\n-    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n-    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n-\n-    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n-    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n-\n-    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n-    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        gameRunningLatch.countDown();\n-      }\n-    });\n-\n-    instance.hostGame(newGameInfo);\n-    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n-\n-    instance.startSearchLadder1v1(AEON);\n-\n-    assertThat(instance.searching1v1Property().get(), is(false));\n-  }\n+  //TODO: remove/reimplement TMM", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NDU5Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536894593", "bodyText": "same here", "author": "BlackYps", "createdAt": "2020-12-05T21:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 84d6cd3e..9efca9dc 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -479,68 +483,65 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     assertThat(instance.getGames(), empty());\n   }\n \n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void testStartSearchLadder1v1() throws Exception {\n-//    int uid = 123;\n-//    String map = \"scmp_037\";\n-//    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n-//        .uid(uid).mod(\"ladder1v1\").mapname(map)\n-//        .expectedPlayers(2)\n-//        .faction(CYBRAN)\n-//        .initMode(LobbyMode.AUTO_LOBBY)\n-//        .mapPosition(4)\n-//        .team(1)\n-//        .get();\n-//\n-//    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n-//\n-//    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n-//    mockStartGameProcess(uid, RatingMode.LADDER_1V1, CYBRAN, false, additionalArgs);\n-//    when(fafService.startSearchLadder1v1(CYBRAN)).thenReturn(completedFuture(gameLaunchMessage));\n-//    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n-//    when(mapService.isInstalled(map)).thenReturn(false);\n-//    when(mapService.download(map)).thenReturn(completedFuture(null));\n-//    when(modService.getFeaturedMod(LADDER_1V1.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n-//\n-//    instance.startSearchLadder1v1(CYBRAN).toCompletableFuture();\n-//\n-//    verify(fafService).startSearchLadder1v1(CYBRAN);\n-//    verify(mapService).download(map);\n-//    verify(replayService).start(eq(uid), any());\n-//    verify(forgedAllianceService).startGame(\n-//        uid, CYBRAN, asList(additionalArgs), RatingMode.LADDER_1V1, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-//  }\n-\n-\n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void testStartSearchLadder1v1GameRunningDoesNothing() throws Exception {\n-//    Process process = mock(Process.class);\n-//    when(process.isAlive()).thenReturn(true);\n-//\n-//    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n-//    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n-//\n-//    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n-//    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-//    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n-//    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n-//\n-//    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n-//    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n-//      if (newValue) {\n-//        gameRunningLatch.countDown();\n-//      }\n-//    });\n-//\n-//    instance.hostGame(newGameInfo);\n-//    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n-//\n-//    instance.startSearchLadder1v1(AEON);\n-//\n-//    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n-//  }\n+  @Test\n+  public void testStartSearchLadder1v1() throws Exception {\n+    int uid = 123;\n+    String map = \"scmp_037\";\n+    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n+        .uid(uid).mod(\"FAF\").mapname(map)\n+        .expectedPlayers(2)\n+        .faction(CYBRAN)\n+        .initMode(LobbyMode.AUTO_LOBBY)\n+        .mapPosition(4)\n+        .team(1)\n+        .get();\n+\n+    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n+\n+    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n+    mockStartGameProcess(uid, RatingMode.NONE, CYBRAN, false, additionalArgs);\n+    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n+    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n+    when(mapService.isInstalled(map)).thenReturn(false);\n+    when(mapService.download(map)).thenReturn(completedFuture(null));\n+    when(modService.getFeaturedMod(FAF.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n+\n+    instance.startSearchMatchmaker().toCompletableFuture();\n+\n+    verify(fafService).startSearchMatchmaker();\n+    verify(mapService).download(map);\n+    verify(replayService).start(eq(uid), any());\n+    verify(forgedAllianceService).startGame(\n+        uid, CYBRAN, asList(additionalArgs), RatingMode.NONE, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+  }\n+\n+  @Test\n+  public void testStartSearchMatchmakerGameRunningDoesNothing() throws Exception {\n+    Process process = mock(Process.class);\n+    when(process.isAlive()).thenReturn(true);\n+\n+    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n+    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n+\n+    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n+    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n+    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n+\n+    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n+    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        gameRunningLatch.countDown();\n+      }\n+    });\n+\n+    instance.hostGame(newGameInfo);\n+    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n+\n+    instance.startSearchMatchmaker();\n+\n+    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n+  }\n \n   @Test\n   public void testStopSearchMatchmaker() {\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 9efca9dc..84d6cd3e 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -483,65 +479,68 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     assertThat(instance.getGames(), empty());\n   }\n \n-  @Test\n-  public void testStartSearchLadder1v1() throws Exception {\n-    int uid = 123;\n-    String map = \"scmp_037\";\n-    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n-        .uid(uid).mod(\"FAF\").mapname(map)\n-        .expectedPlayers(2)\n-        .faction(CYBRAN)\n-        .initMode(LobbyMode.AUTO_LOBBY)\n-        .mapPosition(4)\n-        .team(1)\n-        .get();\n-\n-    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n-\n-    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n-    mockStartGameProcess(uid, RatingMode.NONE, CYBRAN, false, additionalArgs);\n-    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n-    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n-    when(mapService.isInstalled(map)).thenReturn(false);\n-    when(mapService.download(map)).thenReturn(completedFuture(null));\n-    when(modService.getFeaturedMod(FAF.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n-\n-    instance.startSearchMatchmaker().toCompletableFuture();\n-\n-    verify(fafService).startSearchMatchmaker();\n-    verify(mapService).download(map);\n-    verify(replayService).start(eq(uid), any());\n-    verify(forgedAllianceService).startGame(\n-        uid, CYBRAN, asList(additionalArgs), RatingMode.NONE, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-  }\n-\n-  @Test\n-  public void testStartSearchMatchmakerGameRunningDoesNothing() throws Exception {\n-    Process process = mock(Process.class);\n-    when(process.isAlive()).thenReturn(true);\n-\n-    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n-    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n-\n-    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n-    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n-    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n-\n-    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n-    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        gameRunningLatch.countDown();\n-      }\n-    });\n-\n-    instance.hostGame(newGameInfo);\n-    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n-\n-    instance.startSearchMatchmaker();\n-\n-    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n-  }\n+  //TODO: remove/reimplement TMM\n+//  @Test\n+//  public void testStartSearchLadder1v1() throws Exception {\n+//    int uid = 123;\n+//    String map = \"scmp_037\";\n+//    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n+//        .uid(uid).mod(\"ladder1v1\").mapname(map)\n+//        .expectedPlayers(2)\n+//        .faction(CYBRAN)\n+//        .initMode(LobbyMode.AUTO_LOBBY)\n+//        .mapPosition(4)\n+//        .team(1)\n+//        .get();\n+//\n+//    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n+//\n+//    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n+//    mockStartGameProcess(uid, RatingMode.LADDER_1V1, CYBRAN, false, additionalArgs);\n+//    when(fafService.startSearchLadder1v1(CYBRAN)).thenReturn(completedFuture(gameLaunchMessage));\n+//    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n+//    when(mapService.isInstalled(map)).thenReturn(false);\n+//    when(mapService.download(map)).thenReturn(completedFuture(null));\n+//    when(modService.getFeaturedMod(LADDER_1V1.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n+//\n+//    instance.startSearchLadder1v1(CYBRAN).toCompletableFuture();\n+//\n+//    verify(fafService).startSearchLadder1v1(CYBRAN);\n+//    verify(mapService).download(map);\n+//    verify(replayService).start(eq(uid), any());\n+//    verify(forgedAllianceService).startGame(\n+//        uid, CYBRAN, asList(additionalArgs), RatingMode.LADDER_1V1, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+//  }\n+\n+\n+  //TODO: remove/reimplement TMM\n+//  @Test\n+//  public void testStartSearchLadder1v1GameRunningDoesNothing() throws Exception {\n+//    Process process = mock(Process.class);\n+//    when(process.isAlive()).thenReturn(true);\n+//\n+//    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n+//    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n+//\n+//    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n+//    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+//    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n+//    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n+//\n+//    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n+//    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n+//      if (newValue) {\n+//        gameRunningLatch.countDown();\n+//      }\n+//    });\n+//\n+//    instance.hostGame(newGameInfo);\n+//    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n+//\n+//    instance.startSearchLadder1v1(AEON);\n+//\n+//    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n+//  }\n \n   @Test\n   public void testStopSearchMatchmaker() {\n", "next_change": {"commit": "6a9b84530c0c6744fdc6e36e4ab133cccb55965b", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 84d6cd3e..9efca9dc 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -479,68 +483,65 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     assertThat(instance.getGames(), empty());\n   }\n \n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void testStartSearchLadder1v1() throws Exception {\n-//    int uid = 123;\n-//    String map = \"scmp_037\";\n-//    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n-//        .uid(uid).mod(\"ladder1v1\").mapname(map)\n-//        .expectedPlayers(2)\n-//        .faction(CYBRAN)\n-//        .initMode(LobbyMode.AUTO_LOBBY)\n-//        .mapPosition(4)\n-//        .team(1)\n-//        .get();\n-//\n-//    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n-//\n-//    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n-//    mockStartGameProcess(uid, RatingMode.LADDER_1V1, CYBRAN, false, additionalArgs);\n-//    when(fafService.startSearchLadder1v1(CYBRAN)).thenReturn(completedFuture(gameLaunchMessage));\n-//    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n-//    when(mapService.isInstalled(map)).thenReturn(false);\n-//    when(mapService.download(map)).thenReturn(completedFuture(null));\n-//    when(modService.getFeaturedMod(LADDER_1V1.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n-//\n-//    instance.startSearchLadder1v1(CYBRAN).toCompletableFuture();\n-//\n-//    verify(fafService).startSearchLadder1v1(CYBRAN);\n-//    verify(mapService).download(map);\n-//    verify(replayService).start(eq(uid), any());\n-//    verify(forgedAllianceService).startGame(\n-//        uid, CYBRAN, asList(additionalArgs), RatingMode.LADDER_1V1, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-//  }\n-\n-\n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void testStartSearchLadder1v1GameRunningDoesNothing() throws Exception {\n-//    Process process = mock(Process.class);\n-//    when(process.isAlive()).thenReturn(true);\n-//\n-//    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n-//    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n-//\n-//    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n-//    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-//    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n-//    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n-//\n-//    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n-//    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n-//      if (newValue) {\n-//        gameRunningLatch.countDown();\n-//      }\n-//    });\n-//\n-//    instance.hostGame(newGameInfo);\n-//    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n-//\n-//    instance.startSearchLadder1v1(AEON);\n-//\n-//    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n-//  }\n+  @Test\n+  public void testStartSearchLadder1v1() throws Exception {\n+    int uid = 123;\n+    String map = \"scmp_037\";\n+    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n+        .uid(uid).mod(\"FAF\").mapname(map)\n+        .expectedPlayers(2)\n+        .faction(CYBRAN)\n+        .initMode(LobbyMode.AUTO_LOBBY)\n+        .mapPosition(4)\n+        .team(1)\n+        .get();\n+\n+    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n+\n+    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n+    mockStartGameProcess(uid, RatingMode.NONE, CYBRAN, false, additionalArgs);\n+    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n+    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n+    when(mapService.isInstalled(map)).thenReturn(false);\n+    when(mapService.download(map)).thenReturn(completedFuture(null));\n+    when(modService.getFeaturedMod(FAF.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n+\n+    instance.startSearchMatchmaker().toCompletableFuture();\n+\n+    verify(fafService).startSearchMatchmaker();\n+    verify(mapService).download(map);\n+    verify(replayService).start(eq(uid), any());\n+    verify(forgedAllianceService).startGame(\n+        uid, CYBRAN, asList(additionalArgs), RatingMode.NONE, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+  }\n+\n+  @Test\n+  public void testStartSearchMatchmakerGameRunningDoesNothing() throws Exception {\n+    Process process = mock(Process.class);\n+    when(process.isAlive()).thenReturn(true);\n+\n+    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n+    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n+\n+    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n+    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n+    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n+\n+    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n+    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        gameRunningLatch.countDown();\n+      }\n+    });\n+\n+    instance.hostGame(newGameInfo);\n+    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n+\n+    instance.startSearchMatchmaker();\n+\n+    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n+  }\n \n   @Test\n   public void testStopSearchMatchmaker() {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 84d6cd3e..9efca9dc 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -479,68 +483,65 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     assertThat(instance.getGames(), empty());\n   }\n \n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void testStartSearchLadder1v1() throws Exception {\n-//    int uid = 123;\n-//    String map = \"scmp_037\";\n-//    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n-//        .uid(uid).mod(\"ladder1v1\").mapname(map)\n-//        .expectedPlayers(2)\n-//        .faction(CYBRAN)\n-//        .initMode(LobbyMode.AUTO_LOBBY)\n-//        .mapPosition(4)\n-//        .team(1)\n-//        .get();\n-//\n-//    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n-//\n-//    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n-//    mockStartGameProcess(uid, RatingMode.LADDER_1V1, CYBRAN, false, additionalArgs);\n-//    when(fafService.startSearchLadder1v1(CYBRAN)).thenReturn(completedFuture(gameLaunchMessage));\n-//    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n-//    when(mapService.isInstalled(map)).thenReturn(false);\n-//    when(mapService.download(map)).thenReturn(completedFuture(null));\n-//    when(modService.getFeaturedMod(LADDER_1V1.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n-//\n-//    instance.startSearchLadder1v1(CYBRAN).toCompletableFuture();\n-//\n-//    verify(fafService).startSearchLadder1v1(CYBRAN);\n-//    verify(mapService).download(map);\n-//    verify(replayService).start(eq(uid), any());\n-//    verify(forgedAllianceService).startGame(\n-//        uid, CYBRAN, asList(additionalArgs), RatingMode.LADDER_1V1, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-//  }\n-\n-\n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void testStartSearchLadder1v1GameRunningDoesNothing() throws Exception {\n-//    Process process = mock(Process.class);\n-//    when(process.isAlive()).thenReturn(true);\n-//\n-//    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n-//    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n-//\n-//    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n-//    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-//    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n-//    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n-//\n-//    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n-//    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n-//      if (newValue) {\n-//        gameRunningLatch.countDown();\n-//      }\n-//    });\n-//\n-//    instance.hostGame(newGameInfo);\n-//    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n-//\n-//    instance.startSearchLadder1v1(AEON);\n-//\n-//    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n-//  }\n+  @Test\n+  public void testStartSearchLadder1v1() throws Exception {\n+    int uid = 123;\n+    String map = \"scmp_037\";\n+    GameLaunchMessage gameLaunchMessage = new GameLaunchMessageBuilder().defaultValues()\n+        .uid(uid).mod(\"FAF\").mapname(map)\n+        .expectedPlayers(2)\n+        .faction(CYBRAN)\n+        .initMode(LobbyMode.AUTO_LOBBY)\n+        .mapPosition(4)\n+        .team(1)\n+        .get();\n+\n+    FeaturedMod featuredMod = FeaturedModBeanBuilder.create().defaultValues().get();\n+\n+    String[] additionalArgs = {\"/team\", \"1\", \"/players\", \"2\", \"/startspot\", \"4\"};\n+    mockStartGameProcess(uid, RatingMode.NONE, CYBRAN, false, additionalArgs);\n+    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n+    when(gameUpdater.update(featuredMod, null, Collections.emptyMap(), Collections.emptySet())).thenReturn(completedFuture(null));\n+    when(mapService.isInstalled(map)).thenReturn(false);\n+    when(mapService.download(map)).thenReturn(completedFuture(null));\n+    when(modService.getFeaturedMod(FAF.getTechnicalName())).thenReturn(completedFuture(featuredMod));\n+\n+    instance.startSearchMatchmaker().toCompletableFuture();\n+\n+    verify(fafService).startSearchMatchmaker();\n+    verify(mapService).download(map);\n+    verify(replayService).start(eq(uid), any());\n+    verify(forgedAllianceService).startGame(\n+        uid, CYBRAN, asList(additionalArgs), RatingMode.NONE, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+  }\n+\n+  @Test\n+  public void testStartSearchMatchmakerGameRunningDoesNothing() throws Exception {\n+    Process process = mock(Process.class);\n+    when(process.isAlive()).thenReturn(true);\n+\n+    NewGameInfo newGameInfo = NewGameInfoBuilder.create().defaultValues().get();\n+    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n+\n+    when(forgedAllianceService.startGame(anyInt(), any(), any(), any(), anyInt(), eq(LOCAL_REPLAY_PORT), eq(false), eq(junitPlayer))).thenReturn(process);\n+    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(fafService.requestHostGame(newGameInfo)).thenReturn(completedFuture(gameLaunchMessage));\n+    when(mapService.download(newGameInfo.getMap())).thenReturn(completedFuture(null));\n+\n+    CountDownLatch gameRunningLatch = new CountDownLatch(1);\n+    instance.gameRunningProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        gameRunningLatch.countDown();\n+      }\n+    });\n+\n+    instance.hostGame(newGameInfo);\n+    gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n+\n+    instance.startSearchMatchmaker();\n+\n+    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n+  }\n \n   @Test\n   public void testStopSearchMatchmaker() {\n", "next_change": {"commit": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 9efca9dc..b334cfdc 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -540,22 +535,22 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n \n     instance.startSearchMatchmaker();\n \n-    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n+    assertThat(instance.getInMatchmakerQueueProperty().get(), is(false));\n   }\n \n   @Test\n   public void testStopSearchMatchmaker() {\n-    instance.inMatchmakerQueueProperty().set(true);\n+    instance.getInMatchmakerQueueProperty().set(true);\n     instance.onMatchmakerSearchStopped();\n-    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n+    assertThat(instance.getInMatchmakerQueueProperty().get(), is(false));\n     verify(fafService).stopSearchMatchmaker();\n   }\n \n   @Test\n   public void testStopSearchMatchmakerNotSearching() {\n-    instance.inMatchmakerQueueProperty().set(false);\n+    instance.getInMatchmakerQueueProperty().set(false);\n     instance.onMatchmakerSearchStopped();\n-    assertThat(instance.inMatchmakerQueueProperty().get(), is(false));\n+    assertThat(instance.getInMatchmakerQueueProperty().get(), is(false));\n     verify(fafService, never()).stopSearchMatchmaker();\n   }\n \n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex b334cfdc..fd3e198f 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -535,22 +614,21 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n \n     instance.startSearchMatchmaker();\n \n-    assertThat(instance.getInMatchmakerQueueProperty().get(), is(false));\n+    verify(notificationService).addImmediateWarnNotification(\"game.gameRunning\");\n   }\n \n   @Test\n   public void testStopSearchMatchmaker() {\n-    instance.getInMatchmakerQueueProperty().set(true);\n+    mockMatchmakerChain();\n+    instance.startSearchMatchmaker();\n+    verify(fafService).startSearchMatchmaker();\n     instance.onMatchmakerSearchStopped();\n-    assertThat(instance.getInMatchmakerQueueProperty().get(), is(false));\n     verify(fafService).stopSearchMatchmaker();\n   }\n \n   @Test\n   public void testStopSearchMatchmakerNotSearching() {\n-    instance.getInMatchmakerQueueProperty().set(false);\n     instance.onMatchmakerSearchStopped();\n-    assertThat(instance.getInMatchmakerQueueProperty().get(), is(false));\n     verify(fafService, never()).stopSearchMatchmaker();\n   }\n \n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex fd3e198f..2ff5f02e 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -617,21 +563,6 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     verify(notificationService).addImmediateWarnNotification(\"game.gameRunning\");\n   }\n \n-  @Test\n-  public void testStopSearchMatchmaker() {\n-    mockMatchmakerChain();\n-    instance.startSearchMatchmaker();\n-    verify(fafService).startSearchMatchmaker();\n-    instance.onMatchmakerSearchStopped();\n-    verify(fafService).stopSearchMatchmaker();\n-  }\n-\n-  @Test\n-  public void testStopSearchMatchmakerNotSearching() {\n-    instance.onMatchmakerSearchStopped();\n-    verify(fafService, never()).stopSearchMatchmaker();\n-  }\n-\n   @Test\n   public void testSubscribeEventBus() {\n     verify(eventBus).register(instance);\n", "next_change": {"commit": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 2ff5f02e..3d48b68b 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -558,7 +607,7 @@ public class GameServiceTest extends ServiceTest {\n     instance.hostGame(newGameInfo);\n     gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n \n-    instance.startSearchMatchmaker();\n+    instance.startSearchMatchmaker().join();\n \n     verify(notificationService).addImmediateWarnNotification(\"game.gameRunning\");\n   }\n", "next_change": {"commit": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 3d48b68b..c9e669b6 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -607,7 +679,7 @@ public class GameServiceTest extends ServiceTest {\n     instance.hostGame(newGameInfo);\n     gameRunningLatch.await(TIMEOUT, TIME_UNIT);\n \n-    instance.startSearchMatchmaker().join();\n+    instance.startSearchMatchmaker();\n \n     verify(notificationService).addImmediateWarnNotification(\"game.gameRunning\");\n   }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "b4973376cc9ba9e10712ce9f9c1b294a846c4902", "committedDate": "2021-06-13 07:48:53 -0400", "message": "Remember password for rehost (#2267)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "073bb6fe7712ad1fb01bd89b669fe10e6ccf3401", "committedDate": "2021-07-11 14:54:13 -0400", "message": "Update to junit5 (#2305)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}, {"oid": "176fc85b84d81065204f6b1e75e1c73974fc7899", "committedDate": "2021-09-27 18:42:58 -0400", "message": "Create new gameoptions command line switch (#2339)"}, {"oid": "abbb98698f36a89738a465b125153946e0a6e9e7", "committedDate": "2021-10-12 12:23:12 -0400", "message": "Use Path.of over Paths.get"}, {"oid": "3fa639d4202ad594ede0c5965b0c28c03e193ff6", "committedDate": "2021-10-14 07:15:30 -0400", "message": "Add ability to close matchmaker games when match is cancelled"}, {"oid": "de179c3dc3dfcda3670dc0eb097d1062d48e052a", "committedDate": "2021-10-18 22:23:08 -0400", "message": "Only notify of cancellation when game is closed (#2396)"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "59a2459fe9ff1c6012a2df0e3fcec2503018e201", "committedDate": "2021-11-06 09:53:53 -0400", "message": "specify all command args and use all games in game count (#2395)"}, {"oid": "faa59d3ad8015f006584a89249f37e5cb175e4ec", "committedDate": "2021-12-13 23:26:00 -0500", "message": "Remove FaInitGenerator and simplify GameUpdate Logic (#2439)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "fe5f0ee3e1ca8df2c6355508f42a73effabad466", "committedDate": "2022-01-23 10:30:21 -0500", "message": "Add button to open log file on crash (#2541)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "e19777b53e5bdd7794aa39baa39e020c45c2f86b", "committedDate": "2022-04-10 14:48:15 -0400", "message": "Use game type to determine lobby mode (#2647)"}, {"oid": "e87926ce0612b6e719ad78a8d65fbd741f8de672", "committedDate": "2022-07-07 20:07:01 -0400", "message": "Get coturn servers from the api (#2732)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "cd5ce92de93f23123fa6e8a6f36f9c0478ecde40", "committedDate": "2022-09-18 08:33:12 -0400", "message": "Send division name to game on start for matchmaker games (#2793)"}, {"oid": "d48de94568a61210fc24a19630dfad162bff60f3", "committedDate": "2022-10-16 15:59:29 -0400", "message": "Compatibility changes for ICE adapter with telemetry features (#2815)"}, {"oid": "674703b3b7a7601973f527c1e0109a4fa33752e2", "committedDate": "2022-11-13 10:07:29 -0500", "message": "Simplify Game Bean (#2846)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "9085a382406539e9389e2f881c979b184269f355", "committedDate": "2023-02-20 10:46:45 -0500", "message": "Fix data race between playerinfo and gameinfo messages (#2920)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "c19e7c2f4b3e8f29fbfa742d89a9ec445f3ff272", "committedDate": "2023-02-24 07:39:01 -0500", "message": "Use bindings and properties for team card controllers (#2926)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "b65435ba7bd6de5c8f681c0efaf2dd8a71a59977", "committedDate": "2023-03-28 19:37:19 -0400", "message": "Allow watching replays while in queue (#2945)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTE5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536229192", "body": "Can be removed now as well?", "bodyText": "Can be removed now as well?", "bodyHTML": "<p dir=\"auto\">Can be removed now as well?</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:38:52Z", "path": "src/test/java/com/faforever/client/game/GameServiceTest.java", "diffHunk": "@@ -629,12 +627,13 @@ public void runWithLiveReplayIfNoGameSet() {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  @Test\n-  public void startSearchLadder1v1IfNoGameSet() {\n-    when(preferencesService.isGamePathValid()).thenReturn(false);\n-    instance.startSearchLadder1v1(null);\n-    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-  }\n+  //TODO: remove/reimplement TMM", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgwMDMwNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536800304", "bodyText": "I think it needs to be reimplemented otherwise there is no test for this I think", "author": "Sheikah45", "createdAt": "2020-12-05T14:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NDUyMQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536894521", "bodyText": "Reimplementing this was surprisingly easy", "author": "BlackYps", "createdAt": "2020-12-05T21:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 84d6cd3e..9efca9dc 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -627,13 +628,12 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void startSearchLadder1v1IfNoGameSet() {\n-//    when(preferencesService.isGamePathValid()).thenReturn(false);\n-//    instance.startSearchLadder1v1(null);\n-//    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-//  }\n+  @Test\n+  public void startSearchMatchmakerIfNoGameSet() {\n+    when(preferencesService.isGamePathValid()).thenReturn(false);\n+    instance.startSearchMatchmaker();\n+    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n+  }\n \n   @Test\n   public void joinGameIfNoGameSet() {\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 9efca9dc..84d6cd3e 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -628,12 +627,13 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  @Test\n-  public void startSearchMatchmakerIfNoGameSet() {\n-    when(preferencesService.isGamePathValid()).thenReturn(false);\n-    instance.startSearchMatchmaker();\n-    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-  }\n+  //TODO: remove/reimplement TMM\n+//  @Test\n+//  public void startSearchLadder1v1IfNoGameSet() {\n+//    when(preferencesService.isGamePathValid()).thenReturn(false);\n+//    instance.startSearchLadder1v1(null);\n+//    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n+//  }\n \n   @Test\n   public void joinGameIfNoGameSet() {\n", "next_change": {"commit": "6a9b84530c0c6744fdc6e36e4ab133cccb55965b", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 84d6cd3e..9efca9dc 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -627,13 +628,12 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void startSearchLadder1v1IfNoGameSet() {\n-//    when(preferencesService.isGamePathValid()).thenReturn(false);\n-//    instance.startSearchLadder1v1(null);\n-//    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-//  }\n+  @Test\n+  public void startSearchMatchmakerIfNoGameSet() {\n+    when(preferencesService.isGamePathValid()).thenReturn(false);\n+    instance.startSearchMatchmaker();\n+    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n+  }\n \n   @Test\n   public void joinGameIfNoGameSet() {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 84d6cd3e..9efca9dc 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -627,13 +628,12 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n-  //TODO: remove/reimplement TMM\n-//  @Test\n-//  public void startSearchLadder1v1IfNoGameSet() {\n-//    when(preferencesService.isGamePathValid()).thenReturn(false);\n-//    instance.startSearchLadder1v1(null);\n-//    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n-//  }\n+  @Test\n+  public void startSearchMatchmakerIfNoGameSet() {\n+    when(preferencesService.isGamePathValid()).thenReturn(false);\n+    instance.startSearchMatchmaker();\n+    verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n+  }\n \n   @Test\n   public void joinGameIfNoGameSet() {\n", "next_change": {"commit": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 9efca9dc..5ec9a210 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -635,6 +707,53 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     verify(eventBus).post(any(GameDirectoryChooseEvent.class));\n   }\n \n+  @Test\n+  public void startSearchMatchmaker() throws IOException {\n+    when(preferencesService.isGamePathValid()).thenReturn(true);\n+    when(modService.getFeaturedMod(FAF.getTechnicalName()))\n+        .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n+    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n+    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(mapService.download(gameLaunchMessage.getMapname())).thenReturn(completedFuture(null));\n+    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n+    instance.startSearchMatchmaker();\n+    verify(forgedAllianceService).startGame(\n+        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"null\", \"/players\", \"null\", \"/startspot\", \"null\"),\n+        gameLaunchMessage.getRatingType(), GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+  }\n+\n+  @Test\n+  public void startSearchMatchmakerNoLaunchRatingType() throws IOException {\n+    when(preferencesService.isGamePathValid()).thenReturn(true);\n+    when(modService.getFeaturedMod(FAF.getTechnicalName()))\n+        .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n+    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().ratingType(null).get();\n+    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(mapService.download(gameLaunchMessage.getMapname())).thenReturn(completedFuture(null));\n+    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n+    instance.setMatchedQueueRatingType(\"ladder_1v1\");\n+    instance.startSearchMatchmaker();\n+    verify(forgedAllianceService).startGame(\n+        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"null\", \"/players\", \"null\", \"/startspot\", \"null\"),\n+        \"ladder_1v1\", GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+  }\n+\n+  @Test\n+  public void startSearchMatchmakerNoLaunchRatingTypeNoQueueRatingType() throws IOException {\n+    when(preferencesService.isGamePathValid()).thenReturn(true);\n+    when(modService.getFeaturedMod(FAF.getTechnicalName()))\n+        .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n+    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().ratingType(null).get();\n+    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(mapService.download(gameLaunchMessage.getMapname())).thenReturn(completedFuture(null));\n+    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n+    instance.setMatchedQueueRatingType(null);\n+    instance.startSearchMatchmaker();\n+    verify(forgedAllianceService).startGame(\n+        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"null\", \"/players\", \"null\", \"/startspot\", \"null\"),\n+        GameService.DEFAULT_RATING_TYPE, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+  }\n+\n   @Test\n   public void joinGameIfNoGameSet() {\n     when(preferencesService.isGamePathValid()).thenReturn(false);\n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 5ec9a210..2ff5f02e 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -712,46 +659,14 @@ public class GameServiceTest extends AbstractPlainJavaFxTest {\n     when(preferencesService.isGamePathValid()).thenReturn(true);\n     when(modService.getFeaturedMod(FAF.getTechnicalName()))\n         .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n-    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n+    GameLaunchResponse gameLaunchMessage = GameLaunchMessageTestBuilder.create().defaultValues().get();\n     when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-    when(mapService.download(gameLaunchMessage.getMapname())).thenReturn(completedFuture(null));\n+    when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n     when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n     instance.startSearchMatchmaker();\n     verify(forgedAllianceService).startGame(\n         gameLaunchMessage.getUid(), null, List.of(\"/team\", \"null\", \"/players\", \"null\", \"/startspot\", \"null\"),\n-        gameLaunchMessage.getRatingType(), GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-  }\n-\n-  @Test\n-  public void startSearchMatchmakerNoLaunchRatingType() throws IOException {\n-    when(preferencesService.isGamePathValid()).thenReturn(true);\n-    when(modService.getFeaturedMod(FAF.getTechnicalName()))\n-        .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n-    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().ratingType(null).get();\n-    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-    when(mapService.download(gameLaunchMessage.getMapname())).thenReturn(completedFuture(null));\n-    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n-    instance.setMatchedQueueRatingType(\"ladder_1v1\");\n-    instance.startSearchMatchmaker();\n-    verify(forgedAllianceService).startGame(\n-        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"null\", \"/players\", \"null\", \"/startspot\", \"null\"),\n-        \"ladder_1v1\", GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n-  }\n-\n-  @Test\n-  public void startSearchMatchmakerNoLaunchRatingTypeNoQueueRatingType() throws IOException {\n-    when(preferencesService.isGamePathValid()).thenReturn(true);\n-    when(modService.getFeaturedMod(FAF.getTechnicalName()))\n-        .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n-    GameLaunchMessage gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().ratingType(null).get();\n-    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n-    when(mapService.download(gameLaunchMessage.getMapname())).thenReturn(completedFuture(null));\n-    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n-    instance.setMatchedQueueRatingType(null);\n-    instance.startSearchMatchmaker();\n-    verify(forgedAllianceService).startGame(\n-        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"null\", \"/players\", \"null\", \"/startspot\", \"null\"),\n-        GameService.DEFAULT_RATING_TYPE, GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+        gameLaunchMessage.getLeaderboard(), GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n   }\n \n   @Test\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 2ff5f02e..743333e9 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -659,10 +670,10 @@ public class GameServiceTest extends ServiceTest {\n     when(preferencesService.isGamePathValid()).thenReturn(true);\n     when(modService.getFeaturedMod(FAF.getTechnicalName()))\n         .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n-    GameLaunchResponse gameLaunchMessage = GameLaunchMessageTestBuilder.create().defaultValues().get();\n+    GameLaunchResponse gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n     when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n     when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n-    when(fafService.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n+    when(fafServerAccessor.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n     instance.startSearchMatchmaker();\n     verify(forgedAllianceService).startGame(\n         gameLaunchMessage.getUid(), null, List.of(\"/team\", \"null\", \"/players\", \"null\", \"/startspot\", \"null\"),\n", "next_change": {"commit": "176fc85b84d81065204f6b1e75e1c73974fc7899", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 743333e9..7b3370b0 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -680,6 +695,24 @@ public class GameServiceTest extends ServiceTest {\n         gameLaunchMessage.getLeaderboard(), GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n   }\n \n+  @Test\n+  public void startSearchMatchmakerWithGameOptions() throws IOException {\n+    when(preferencesService.isGamePathValid()).thenReturn(true);\n+    when(modService.getFeaturedMod(FAF.getTechnicalName()))\n+        .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n+    Map<String, String> gameOptions = new LinkedHashMap<>();\n+    gameOptions.put(\"Share\", \"ShareUntilDeath\");\n+    gameOptions.put(\"UnitCap\", \"500\");\n+    GameLaunchResponse gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().team(1).expectedPlayers(4).mapPosition(3).gameOptions(gameOptions).get();\n+    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n+    when(fafServerAccessor.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n+    instance.startSearchMatchmaker();\n+    verify(forgedAllianceService).startGame(\n+        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"1\", \"/players\", \"4\", \"/startspot\", \"3\", \"/gameoptions\", \"Share:ShareUntilDeath\", \"UnitCap:500\"),\n+        gameLaunchMessage.getLeaderboard(), GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+  }\n+\n   @Test\n   public void joinGameIfNoGameSet() {\n     when(preferencesService.isGamePathValid()).thenReturn(false);\n", "next_change": {"commit": "3fa639d4202ad594ede0c5965b0c28c03e193ff6", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 7b3370b0..74a92771 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -681,36 +691,43 @@ public class GameServiceTest extends ServiceTest {\n   }\n \n   @Test\n-  public void startSearchMatchmaker() throws IOException {\n+  public void startSearchMatchmakerWithGameOptions() throws IOException {\n     when(preferencesService.isGamePathValid()).thenReturn(true);\n     when(modService.getFeaturedMod(FAF.getTechnicalName()))\n         .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n-    GameLaunchResponse gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().get();\n+    when(process.onExit()).thenReturn(CompletableFuture.completedFuture(process));\n+    when(process.exitValue()).thenReturn(0);\n+    Map<String, String> gameOptions = new LinkedHashMap<>();\n+    gameOptions.put(\"Share\", \"ShareUntilDeath\");\n+    gameOptions.put(\"UnitCap\", \"500\");\n+    GameLaunchResponse gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().team(1).expectedPlayers(4).mapPosition(3).gameOptions(gameOptions).get();\n+    mockStartMatchmakerGameProcess(gameLaunchMessage);\n     when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n     when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n     when(fafServerAccessor.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n     instance.startSearchMatchmaker();\n     verify(forgedAllianceService).startGame(\n-        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"null\", \"/players\", \"null\", \"/startspot\", \"null\"),\n+        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"1\", \"/players\", \"4\", \"/startspot\", \"3\", \"/gameoptions\", \"Share:ShareUntilDeath\", \"UnitCap:500\"),\n         gameLaunchMessage.getLeaderboard(), GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n   }\n \n   @Test\n-  public void startSearchMatchmakerWithGameOptions() throws IOException {\n+  public void startSearchMatchmakerThenCancelled() throws IOException {\n     when(preferencesService.isGamePathValid()).thenReturn(true);\n     when(modService.getFeaturedMod(FAF.getTechnicalName()))\n         .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n+    when(process.onExit()).thenReturn(CompletableFuture.completedFuture(process));\n+    when(process.exitValue()).thenReturn(1);\n     Map<String, String> gameOptions = new LinkedHashMap<>();\n     gameOptions.put(\"Share\", \"ShareUntilDeath\");\n     gameOptions.put(\"UnitCap\", \"500\");\n     GameLaunchResponse gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().team(1).expectedPlayers(4).mapPosition(3).gameOptions(gameOptions).get();\n+    mockStartMatchmakerGameProcess(gameLaunchMessage);\n     when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n     when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n-    when(fafServerAccessor.startSearchMatchmaker()).thenReturn(completedFuture(gameLaunchMessage));\n-    instance.startSearchMatchmaker();\n-    verify(forgedAllianceService).startGame(\n-        gameLaunchMessage.getUid(), null, List.of(\"/team\", \"1\", \"/players\", \"4\", \"/startspot\", \"3\", \"/gameoptions\", \"Share:ShareUntilDeath\", \"UnitCap:500\"),\n-        gameLaunchMessage.getLeaderboard(), GPG_PORT, LOCAL_REPLAY_PORT, false, junitPlayer);\n+    when(fafServerAccessor.startSearchMatchmaker()).thenReturn(CompletableFuture.failedFuture(new CancellationException()));\n+    instance.startSearchMatchmaker().cancel(false);\n+    verify(notificationService).addServerNotification(any());\n   }\n \n   @Test\n", "next_change": {"commit": "de179c3dc3dfcda3670dc0eb097d1062d48e052a", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex 74a92771..a9a28c52 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -725,11 +725,32 @@ public class GameServiceTest extends ServiceTest {\n     mockStartMatchmakerGameProcess(gameLaunchMessage);\n     when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n     when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n-    when(fafServerAccessor.startSearchMatchmaker()).thenReturn(CompletableFuture.failedFuture(new CancellationException()));\n-    instance.startSearchMatchmaker().cancel(false);\n+    when(fafServerAccessor.startSearchMatchmaker()).thenReturn(CompletableFuture.completedFuture(gameLaunchMessage));\n+    CompletableFuture<Void> future = instance.startSearchMatchmaker();\n+    future.cancel(false);\n     verify(notificationService).addServerNotification(any());\n   }\n \n+  @Test\n+  public void startSearchMatchmakerThenCancelledNoGame() throws IOException {\n+    when(preferencesService.isGamePathValid()).thenReturn(true);\n+    when(modService.getFeaturedMod(FAF.getTechnicalName()))\n+        .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n+    when(process.isAlive()).thenReturn(false);\n+    when(process.onExit()).thenReturn(new CompletableFuture<>());\n+    when(process.exitValue()).thenReturn(1);\n+    Map<String, String> gameOptions = new LinkedHashMap<>();\n+    gameOptions.put(\"Share\", \"ShareUntilDeath\");\n+    gameOptions.put(\"UnitCap\", \"500\");\n+    GameLaunchResponse gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().team(1).expectedPlayers(4).mapPosition(3).gameOptions(gameOptions).get();\n+    mockStartMatchmakerGameProcess(gameLaunchMessage);\n+    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n+    when(fafServerAccessor.startSearchMatchmaker()).thenReturn(CompletableFuture.completedFuture(gameLaunchMessage));\n+    instance.startSearchMatchmaker().cancel(false);\n+    verify(notificationService, never()).addServerNotification(any());\n+  }\n+\n   @Test\n   public void joinGameIfNoGameSet() {\n     when(preferencesService.isGamePathValid()).thenReturn(false);\n", "next_change": {"commit": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex a9a28c52..c9e669b6 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -735,19 +870,26 @@ public class GameServiceTest extends ServiceTest {\n   public void startSearchMatchmakerThenCancelledNoGame() throws IOException {\n     when(preferencesService.isGamePathValid()).thenReturn(true);\n     when(modService.getFeaturedMod(FAF.getTechnicalName()))\n-        .thenReturn(completedFuture(FeaturedModBeanBuilder.create().defaultValues().get()));\n+        .thenReturn(Mono.just(FeaturedModBeanBuilder.create().defaultValues().get()));\n     when(process.isAlive()).thenReturn(false);\n     when(process.onExit()).thenReturn(new CompletableFuture<>());\n     when(process.exitValue()).thenReturn(1);\n     Map<String, String> gameOptions = new LinkedHashMap<>();\n     gameOptions.put(\"Share\", \"ShareUntilDeath\");\n     gameOptions.put(\"UnitCap\", \"500\");\n-    GameLaunchResponse gameLaunchMessage = GameLaunchMessageBuilder.create().defaultValues().team(1).expectedPlayers(4).mapPosition(3).gameOptions(gameOptions).get();\n-    mockStartMatchmakerGameProcess(gameLaunchMessage);\n+    GameLaunchResponse gameLaunchMessage = GameLaunchMessageBuilder.create()\n+        .defaultValues()\n+        .team(1)\n+        .expectedPlayers(4)\n+        .mapPosition(3)\n+        .gameOptions(gameOptions)\n+        .get();\n+    mockStartGameProcess(gameMapper.map(gameLaunchMessage));\n     when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n     when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n     when(fafServerAccessor.startSearchMatchmaker()).thenReturn(CompletableFuture.completedFuture(gameLaunchMessage));\n-    instance.startSearchMatchmaker().cancel(false);\n+    instance.startSearchMatchmaker();\n+    instance.stopSearchMatchmaker();\n     verify(notificationService, never()).addServerNotification(any());\n   }\n \n", "next_change": {"commit": "b65435ba7bd6de5c8f681c0efaf2dd8a71a59977", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/game/GameServiceTest.java b/src/test/java/com/faforever/client/game/GameServiceTest.java\nindex c9e669b6..0708201e 100644\n--- a/src/test/java/com/faforever/client/game/GameServiceTest.java\n+++ b/src/test/java/com/faforever/client/game/GameServiceTest.java\n", "chunk": "@@ -885,7 +937,7 @@ public class GameServiceTest extends ServiceTest {\n         .gameOptions(gameOptions)\n         .get();\n     mockStartGameProcess(gameMapper.map(gameLaunchMessage));\n-    when(gameUpdater.update(any(), any(), any(), any())).thenReturn(completedFuture(null));\n+    when(gameUpdater.update(any(), any(), any(), any(), anyBoolean())).thenReturn(completedFuture(null));\n     when(mapService.download(gameLaunchMessage.getMapName())).thenReturn(completedFuture(null));\n     when(fafServerAccessor.startSearchMatchmaker()).thenReturn(CompletableFuture.completedFuture(gameLaunchMessage));\n     instance.startSearchMatchmaker();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "b4973376cc9ba9e10712ce9f9c1b294a846c4902", "committedDate": "2021-06-13 07:48:53 -0400", "message": "Remember password for rehost (#2267)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "073bb6fe7712ad1fb01bd89b669fe10e6ccf3401", "committedDate": "2021-07-11 14:54:13 -0400", "message": "Update to junit5 (#2305)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}, {"oid": "176fc85b84d81065204f6b1e75e1c73974fc7899", "committedDate": "2021-09-27 18:42:58 -0400", "message": "Create new gameoptions command line switch (#2339)"}, {"oid": "abbb98698f36a89738a465b125153946e0a6e9e7", "committedDate": "2021-10-12 12:23:12 -0400", "message": "Use Path.of over Paths.get"}, {"oid": "3fa639d4202ad594ede0c5965b0c28c03e193ff6", "committedDate": "2021-10-14 07:15:30 -0400", "message": "Add ability to close matchmaker games when match is cancelled"}, {"oid": "de179c3dc3dfcda3670dc0eb097d1062d48e052a", "committedDate": "2021-10-18 22:23:08 -0400", "message": "Only notify of cancellation when game is closed (#2396)"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "59a2459fe9ff1c6012a2df0e3fcec2503018e201", "committedDate": "2021-11-06 09:53:53 -0400", "message": "specify all command args and use all games in game count (#2395)"}, {"oid": "faa59d3ad8015f006584a89249f37e5cb175e4ec", "committedDate": "2021-12-13 23:26:00 -0500", "message": "Remove FaInitGenerator and simplify GameUpdate Logic (#2439)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "fe5f0ee3e1ca8df2c6355508f42a73effabad466", "committedDate": "2022-01-23 10:30:21 -0500", "message": "Add button to open log file on crash (#2541)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "e19777b53e5bdd7794aa39baa39e020c45c2f86b", "committedDate": "2022-04-10 14:48:15 -0400", "message": "Use game type to determine lobby mode (#2647)"}, {"oid": "e87926ce0612b6e719ad78a8d65fbd741f8de672", "committedDate": "2022-07-07 20:07:01 -0400", "message": "Get coturn servers from the api (#2732)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "cd5ce92de93f23123fa6e8a6f36f9c0478ecde40", "committedDate": "2022-09-18 08:33:12 -0400", "message": "Send division name to game on start for matchmaker games (#2793)"}, {"oid": "d48de94568a61210fc24a19630dfad162bff60f3", "committedDate": "2022-10-16 15:59:29 -0400", "message": "Compatibility changes for ICE adapter with telemetry features (#2815)"}, {"oid": "674703b3b7a7601973f527c1e0109a4fa33752e2", "committedDate": "2022-11-13 10:07:29 -0500", "message": "Simplify Game Bean (#2846)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "9085a382406539e9389e2f881c979b184269f355", "committedDate": "2023-02-20 10:46:45 -0500", "message": "Fix data race between playerinfo and gameinfo messages (#2920)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "c19e7c2f4b3e8f29fbfa742d89a9ec445f3ff272", "committedDate": "2023-02-24 07:39:01 -0500", "message": "Use bindings and properties for team card controllers (#2926)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "b65435ba7bd6de5c8f681c0efaf2dd8a71a59977", "committedDate": "2023-03-28 19:37:19 -0400", "message": "Allow watching replays while in queue (#2945)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMDE5Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536230193", "body": "I see a lot of empty tests there.", "bodyText": "I see a lot of empty tests there.", "bodyHTML": "<p dir=\"auto\">I see a lot of empty tests there.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T16:40:26Z", "path": "src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.google.common.eventbus.EventBus;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.faforever.client.notification.Severity.INFO;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 11518699..c8b8ee74 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -31,14 +42,18 @@ import org.springframework.scheduling.TaskScheduler;\n import org.testfx.util.WaitForAsyncUtils;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n \n import static com.faforever.client.notification.Severity.INFO;\n+import static com.faforever.client.notification.Severity.WARN;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex c8b8ee74..11518699 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -42,18 +31,14 @@ import org.springframework.scheduling.TaskScheduler;\n import org.testfx.util.WaitForAsyncUtils;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n \n import static com.faforever.client.notification.Severity.INFO;\n-import static com.faforever.client.notification.Severity.WARN;\n import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n", "next_change": {"commit": "6a9b84530c0c6744fdc6e36e4ab133cccb55965b", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 11518699..c8b8ee74 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -31,14 +42,18 @@ import org.springframework.scheduling.TaskScheduler;\n import org.testfx.util.WaitForAsyncUtils;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n \n import static com.faforever.client.notification.Severity.INFO;\n+import static com.faforever.client.notification.Severity.WARN;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 11518699..e97a7af0 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -31,14 +43,19 @@ import org.springframework.scheduling.TaskScheduler;\n import org.testfx.util.WaitForAsyncUtils;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import static com.faforever.client.notification.Severity.INFO;\n+import static com.faforever.client.notification.Severity.WARN;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n", "next_change": {"commit": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex e97a7af0..126446da 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -56,9 +57,9 @@ import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n \n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 126446da..50f4f9dd 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -49,24 +48,19 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n import static com.faforever.client.notification.Severity.INFO;\n import static com.faforever.client.notification.Severity.WARN;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n \n public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {\n \n-  @Mock\n-  private FafServerAccessor fafServerAccessor;\n   @Mock\n   private PlayerService playerService;\n   @Mock\n", "next_change": {"commit": "cf5fb2ddd48d654871217de26244252de16d1fb2", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 50f4f9dd..42857ff9 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -59,7 +58,7 @@ import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n-public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {\n+public class TeamMatchmakingServiceTest extends ServiceTest {\n \n   @Mock\n   private PlayerService playerService;\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 42857ff9..912f256c 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -67,7 +79,9 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n   @Mock\n   private PreferencesService preferencesService;\n   @Mock\n-  private FafService fafService;\n+  private FafServerAccessor fafServerAccessor;\n+  @Mock\n+  private FafApiAccessor fafApiAccessor;\n   @Mock\n   private EventBus eventBus;\n   @Mock\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 912f256c..362b95a6 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -89,38 +99,59 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n   @Mock\n   private TaskScheduler taskScheduler;\n   @Mock\n+  private JavaFxService javaFxService;\n+  @Mock\n   private GameService gameService;\n   @Mock\n   private CompletableFuture<Void> matchmakingFuture;\n \n   private PlayerBean player;\n   private PlayerBean otherPlayer;\n+  @InjectMocks\n   private TeamMatchmakingService instance;\n+  @Spy\n   private final MatchmakerMapper matchmakerMapper = Mappers.getMapper(MatchmakerMapper.class);\n \n+  private final TestPublisher<MatchmakerInfo> matchmakerInfoTestPublisher = TestPublisher.create();\n+  private final TestPublisher<MatchmakerMatchFoundResponse> matchmakerFoundTestPublisher = TestPublisher.create();\n+  private final TestPublisher<MatchmakerMatchCancelledResponse> matchmakerCancelledTestPublisher = TestPublisher.create();\n+  private final TestPublisher<PartyInvite> inviteTestPublisher = TestPublisher.create();\n+  private final TestPublisher<PartyKick> kickTestPublisher = TestPublisher.create();\n+  private final TestPublisher<PartyInfo> partyInfoTestPublisher = TestPublisher.create();\n+\n \n   @BeforeEach\n   public void setUp() throws Exception {\n     MapperSetup.injectMappers(matchmakerMapper);\n     player = PlayerBeanBuilder.create().defaultValues().username(\"junit\").get();\n     otherPlayer = PlayerBeanBuilder.create().defaultValues().username(\"junit2\").id(2).get();\n-    List<PlayerBean> playerList = new ArrayList<>();\n-    playerList.add(player);\n     when(playerService.getPlayerByIdIfOnline(2)).thenReturn(Optional.of(otherPlayer));\n     when(playerService.getPlayerByIdIfOnline(1)).thenReturn(Optional.of(player));\n     when(gameService.startSearchMatchmaker()).thenReturn(matchmakingFuture);\n-    instance = new TeamMatchmakingService(playerService, notificationService, preferencesService,\n-        fafApiAccessor, fafServerAccessor, eventBus, i18n, taskScheduler, gameService, matchmakerMapper);\n+    when(gameService.getGames()).thenReturn(FXCollections.emptyObservableList());\n+    when(javaFxService.getFxApplicationScheduler()).thenReturn(Schedulers.immediate());\n+    when(javaFxService.getSingleScheduler()).thenReturn(Schedulers.immediate());\n+    when(fafServerAccessor.getEvents(MatchmakerInfo.class)).thenReturn(matchmakerInfoTestPublisher.flux());\n+    when(fafServerAccessor.getEvents(MatchmakerMatchFoundResponse.class)).thenReturn(matchmakerFoundTestPublisher.flux());\n+    when(fafServerAccessor.getEvents(MatchmakerMatchCancelledResponse.class)).thenReturn(matchmakerCancelledTestPublisher.flux());\n+    when(fafServerAccessor.getEvents(PartyInvite.class)).thenReturn(inviteTestPublisher.flux());\n+    when(fafServerAccessor.getEvents(PartyKick.class)).thenReturn(kickTestPublisher.flux());\n+    when(fafServerAccessor.getEvents(PartyInfo.class)).thenReturn(partyInfoTestPublisher.flux());\n \n     when(preferencesService.isGamePathValid()).thenReturn(true);\n     when(playerService.getCurrentPlayer()).thenReturn(player);\n+\n+    instance.afterPropertiesSet();\n   }\n \n   private void setPartyMembers() {\n     ObservableList<PartyMember> testMembers = FXCollections.observableArrayList();\n-    testMembers.add(PartyMemberBuilder.create(PlayerBeanBuilder.create().defaultValues().username(\"member1\").get()).get());\n-    testMembers.add(PartyMemberBuilder.create(PlayerBeanBuilder.create().defaultValues().username(\"member2\").get()).get());\n-    testMembers.add(PartyMemberBuilder.create(PlayerBeanBuilder.create().defaultValues().username(\"member3\").get()).get());\n+    testMembers.add(PartyMemberBuilder.create(PlayerBeanBuilder.create().defaultValues().username(\"member1\").get())\n+        .get());\n+    testMembers.add(PartyMemberBuilder.create(PlayerBeanBuilder.create().defaultValues().username(\"member2\").get())\n+        .get());\n+    testMembers.add(PartyMemberBuilder.create(PlayerBeanBuilder.create().defaultValues().username(\"member3\").get())\n+        .get());\n     testMembers.add(new PartyMember(player));\n     instance.getParty().setMembers(testMembers);\n     instance.getParty().setOwner(player);\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 362b95a6..047d7ae0 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -158,7 +165,9 @@ public class TeamMatchmakingServiceTest extends UITest {\n   }\n \n   private void setOwnerByName(String owner) {\n-    instance.getParty().getMembers().stream()\n+    instance.getParty()\n+        .getMembers()\n+        .stream()\n         .filter(member -> member.getPlayer().getUsername().equals(owner))\n         .findFirst()\n         .ifPresent(partyMember1 -> instance.getParty().setOwner(partyMember1.getPlayer()));\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "453016c1face9e9c716475c6c790de091e76bc47", "committedDate": "2021-02-18 06:34:24 -0500", "message": "Add async wait to test"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "073bb6fe7712ad1fb01bd89b669fe10e6ccf3401", "committedDate": "2021-07-11 14:54:13 -0400", "message": "Update to junit5 (#2305)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "bf9ea315633bd4e7f94c70134435b4e42869755e", "committedDate": "2022-01-20 20:24:17 -0500", "message": "Check if game is running before accepting invite (#2522)"}, {"oid": "329d5a52b01e0016cdf55c562d720771bab7ffe4", "committedDate": "2022-01-23 10:29:39 -0500", "message": "Use addWarnNotificaiton where possible (#2542)"}, {"oid": "e19777b53e5bdd7794aa39baa39e020c45c2f86b", "committedDate": "2022-04-10 14:48:15 -0400", "message": "Use game type to determine lobby mode (#2647)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "45b4328f626effb6f28b9bcc3efbf1a8844a6cfd", "committedDate": "2022-08-14 21:03:03 -0400", "message": "Download all matchmaker maps before joining queue (#2775)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "41541457063145c41eeba7566bbb609590ac4374", "committedDate": "2023-04-23 15:35:10 -0400", "message": "Ensure queue ui state is synced with server state"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjg3Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536352877", "body": "`playerTextField.getText().isBlank()`", "bodyText": "playerTextField.getText().isBlank()", "bodyHTML": "<p dir=\"auto\"><code>playerTextField.getText().isBlank()</code></p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:11:25Z", "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex f24fade4..5544f253 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -43,44 +42,39 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n-    playerList.setAll(getPlayerNames());\n \n+\n+    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer()\n-              .map(Player::getUsername)\n-              .map(n -> n.equals(p))\n-              .orElse(true)) {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().isBlank()) {\n-            return playerService.getPlayerForUsername(p)\n-                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n-                .orElse(false);\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    playersListView.setItems(sortedPlayerList);\n-    playersListView.getSelectionModel().selectFirst();\n-    requestFocus();\n-  }\n+    //TODO\n+//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n+//      if(playerService.get) {\n+//\n+//      }\n+//    })));\n \n-  public void requestFocus() {\n-    Platform.runLater(() -> {\n-      if (!playerTextField.isFocused()) {\n-        playerTextField.requestFocus();\n-        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n-      }\n-    });\n+    playersListView.setItems(sortedPlayerList);\n+    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n+    playerTextField.requestFocus();\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames();\n+    return playerService.getPlayerNames(); //TODO: filter for online players\n   }\n \n   @Override\n", "next_change": {"commit": "411da96ef94f8c911fe64ba887f5e30260e4d642", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": {"commit": "587ffb1ad342d0630a5b7e2a8b7e1a44683a4f9d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex f24fade4..56ac463a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -71,12 +71,7 @@ public class InvitePlayerController implements Controller<Pane> {\n   }\n \n   public void requestFocus() {\n-    Platform.runLater(() -> {\n-      if (!playerTextField.isFocused()) {\n-        playerTextField.requestFocus();\n-        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n-      }\n-    });\n+    JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n   }\n \n   private Collection<String> getPlayerNames() {\n", "next_change": {"commit": "54fb44d2c2bf6664c2957b6dfff88b2d853b1a01", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 56ac463a..ae7e38fc 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -65,11 +69,34 @@ public class InvitePlayerController implements Controller<Pane> {\n         }, playerTextField.textProperty()\n     ));\n \n+    invitedPlayersListView.setSelectionModel(new NoSelectionModel<>());\n+    invitedPlayersListView.setCellFactory(param -> new IconButtonListCell<>(this::invitedPlayerListCellConfiguration, uiService));\n+\n+    playersListView.setSelectionModel(new NoSelectionModel<>());\n+    playersListView.setCellFactory(param -> new IconButtonListCell<>(this::playerListCellConfiguration, uiService));\n     playersListView.setItems(sortedPlayerList);\n     playersListView.getSelectionModel().selectFirst();\n     requestFocus();\n   }\n \n+  private void invitedPlayerListCellConfiguration(IconButtonListCellControllerAndItem<String> iconButtonListCellControllerAndItem) {\n+    IconButtonListCellController iconButtonListCellController = iconButtonListCellControllerAndItem.getIconButtonListCellController();\n+    String playerName = iconButtonListCellControllerAndItem.getItem();\n+    Button iconButton = iconButtonListCellController.getIconButton();\n+    iconButton.setDisable(true);\n+    iconButtonListCellController.getIconRegion().getStyleClass().add(\"added-person\");\n+    iconButtonListCellController.getLabel().setText(playerName);\n+  }\n+\n+  private void playerListCellConfiguration(IconButtonListCellControllerAndItem<String> iconButtonListCellControllerAndItem) {\n+    IconButtonListCellController iconButtonListCellController = iconButtonListCellControllerAndItem.getIconButtonListCellController();\n+    String playerName = iconButtonListCellControllerAndItem.getItem();\n+    Button iconButton = iconButtonListCellController.getIconButton();\n+    iconButton.setOnMouseClicked(event -> invite(playerName));\n+    iconButtonListCellController.getIconRegion().getStyleClass().add(\"add-person\");\n+    iconButtonListCellController.getLabel().setText(playerName);\n+  }\n+\n   public void requestFocus() {\n     JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n   }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex ae7e38fc..dc3cc68a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -98,7 +94,7 @@ public class InvitePlayerController implements Controller<Pane> {\n   }\n \n   public void requestFocus() {\n-    JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n+    fxApplicationThreadExecutor.execute(() -> playerTextField.requestFocus());\n   }\n \n   private Collection<String> getPlayerNames() {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "587ffb1ad342d0630a5b7e2a8b7e1a44683a4f9d", "committedDate": "2021-02-25 18:26:17 -0500", "message": "Remove RequestFocus Loop"}, {"oid": "54fb44d2c2bf6664c2957b6dfff88b2d853b1a01", "committedDate": "2021-05-31 13:43:23 -0400", "message": "Rework invite ui (#2182)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjk5Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536352996", "body": "Is this todo still relevant?", "bodyText": "Is this todo still relevant?", "bodyHTML": "<p dir=\"auto\">Is this todo still relevant?</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:11:36Z", "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjcxMjcxNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536712715", "bodyText": "seems to be already implemented", "author": "BlackYps", "createdAt": "2020-12-05T12:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NzE3Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536787177", "bodyText": "So the TODO should be removed then", "author": "Sheikah45", "createdAt": "2020-12-05T14:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1Mjk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex f24fade4..5544f253 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -43,44 +42,39 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n-    playerList.setAll(getPlayerNames());\n \n+\n+    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer()\n-              .map(Player::getUsername)\n-              .map(n -> n.equals(p))\n-              .orElse(true)) {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().isBlank()) {\n-            return playerService.getPlayerForUsername(p)\n-                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n-                .orElse(false);\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    playersListView.setItems(sortedPlayerList);\n-    playersListView.getSelectionModel().selectFirst();\n-    requestFocus();\n-  }\n+    //TODO\n+//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n+//      if(playerService.get) {\n+//\n+//      }\n+//    })));\n \n-  public void requestFocus() {\n-    Platform.runLater(() -> {\n-      if (!playerTextField.isFocused()) {\n-        playerTextField.requestFocus();\n-        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n-      }\n-    });\n+    playersListView.setItems(sortedPlayerList);\n+    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n+    playerTextField.requestFocus();\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames();\n+    return playerService.getPlayerNames(); //TODO: filter for online players\n   }\n \n   @Override\n", "next_change": {"commit": "411da96ef94f8c911fe64ba887f5e30260e4d642", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": {"commit": "587ffb1ad342d0630a5b7e2a8b7e1a44683a4f9d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex f24fade4..56ac463a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -71,12 +71,7 @@ public class InvitePlayerController implements Controller<Pane> {\n   }\n \n   public void requestFocus() {\n-    Platform.runLater(() -> {\n-      if (!playerTextField.isFocused()) {\n-        playerTextField.requestFocus();\n-        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n-      }\n-    });\n+    JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n   }\n \n   private Collection<String> getPlayerNames() {\n", "next_change": {"commit": "54fb44d2c2bf6664c2957b6dfff88b2d853b1a01", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 56ac463a..ae7e38fc 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -65,11 +69,34 @@ public class InvitePlayerController implements Controller<Pane> {\n         }, playerTextField.textProperty()\n     ));\n \n+    invitedPlayersListView.setSelectionModel(new NoSelectionModel<>());\n+    invitedPlayersListView.setCellFactory(param -> new IconButtonListCell<>(this::invitedPlayerListCellConfiguration, uiService));\n+\n+    playersListView.setSelectionModel(new NoSelectionModel<>());\n+    playersListView.setCellFactory(param -> new IconButtonListCell<>(this::playerListCellConfiguration, uiService));\n     playersListView.setItems(sortedPlayerList);\n     playersListView.getSelectionModel().selectFirst();\n     requestFocus();\n   }\n \n+  private void invitedPlayerListCellConfiguration(IconButtonListCellControllerAndItem<String> iconButtonListCellControllerAndItem) {\n+    IconButtonListCellController iconButtonListCellController = iconButtonListCellControllerAndItem.getIconButtonListCellController();\n+    String playerName = iconButtonListCellControllerAndItem.getItem();\n+    Button iconButton = iconButtonListCellController.getIconButton();\n+    iconButton.setDisable(true);\n+    iconButtonListCellController.getIconRegion().getStyleClass().add(\"added-person\");\n+    iconButtonListCellController.getLabel().setText(playerName);\n+  }\n+\n+  private void playerListCellConfiguration(IconButtonListCellControllerAndItem<String> iconButtonListCellControllerAndItem) {\n+    IconButtonListCellController iconButtonListCellController = iconButtonListCellControllerAndItem.getIconButtonListCellController();\n+    String playerName = iconButtonListCellControllerAndItem.getItem();\n+    Button iconButton = iconButtonListCellController.getIconButton();\n+    iconButton.setOnMouseClicked(event -> invite(playerName));\n+    iconButtonListCellController.getIconRegion().getStyleClass().add(\"add-person\");\n+    iconButtonListCellController.getLabel().setText(playerName);\n+  }\n+\n   public void requestFocus() {\n     JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n   }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex ae7e38fc..dc3cc68a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -98,7 +94,7 @@ public class InvitePlayerController implements Controller<Pane> {\n   }\n \n   public void requestFocus() {\n-    JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n+    fxApplicationThreadExecutor.execute(() -> playerTextField.requestFocus());\n   }\n \n   private Collection<String> getPlayerNames() {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "587ffb1ad342d0630a5b7e2a8b7e1a44683a4f9d", "committedDate": "2021-02-25 18:26:17 -0500", "message": "Remove RequestFocus Loop"}, {"oid": "54fb44d2c2bf6664c2957b6dfff88b2d853b1a01", "committedDate": "2021-05-31 13:43:23 -0400", "message": "Rework invite ui (#2182)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzI0Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536353246", "body": "Line breaks in the stream operations improves readability", "bodyText": "Line breaks in the stream operations improves readability", "bodyHTML": "<p dir=\"auto\">Line breaks in the stream operations improves readability</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:12:04Z", "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          } else {\n+            return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n+          }\n+        }, playerTextField.textProperty()", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex f24fade4..5544f253 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -43,44 +42,39 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n-    playerList.setAll(getPlayerNames());\n \n+\n+    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer()\n-              .map(Player::getUsername)\n-              .map(n -> n.equals(p))\n-              .orElse(true)) {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().isBlank()) {\n-            return playerService.getPlayerForUsername(p)\n-                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n-                .orElse(false);\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    playersListView.setItems(sortedPlayerList);\n-    playersListView.getSelectionModel().selectFirst();\n-    requestFocus();\n-  }\n+    //TODO\n+//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n+//      if(playerService.get) {\n+//\n+//      }\n+//    })));\n \n-  public void requestFocus() {\n-    Platform.runLater(() -> {\n-      if (!playerTextField.isFocused()) {\n-        playerTextField.requestFocus();\n-        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n-      }\n-    });\n+    playersListView.setItems(sortedPlayerList);\n+    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n+    playerTextField.requestFocus();\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames();\n+    return playerService.getPlayerNames(); //TODO: filter for online players\n   }\n \n   @Override\n", "next_change": {"commit": "411da96ef94f8c911fe64ba887f5e30260e4d642", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": {"commit": "587ffb1ad342d0630a5b7e2a8b7e1a44683a4f9d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex f24fade4..56ac463a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -71,12 +71,7 @@ public class InvitePlayerController implements Controller<Pane> {\n   }\n \n   public void requestFocus() {\n-    Platform.runLater(() -> {\n-      if (!playerTextField.isFocused()) {\n-        playerTextField.requestFocus();\n-        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n-      }\n-    });\n+    JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n   }\n \n   private Collection<String> getPlayerNames() {\n", "next_change": {"commit": "54fb44d2c2bf6664c2957b6dfff88b2d853b1a01", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 56ac463a..ae7e38fc 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -65,11 +69,34 @@ public class InvitePlayerController implements Controller<Pane> {\n         }, playerTextField.textProperty()\n     ));\n \n+    invitedPlayersListView.setSelectionModel(new NoSelectionModel<>());\n+    invitedPlayersListView.setCellFactory(param -> new IconButtonListCell<>(this::invitedPlayerListCellConfiguration, uiService));\n+\n+    playersListView.setSelectionModel(new NoSelectionModel<>());\n+    playersListView.setCellFactory(param -> new IconButtonListCell<>(this::playerListCellConfiguration, uiService));\n     playersListView.setItems(sortedPlayerList);\n     playersListView.getSelectionModel().selectFirst();\n     requestFocus();\n   }\n \n+  private void invitedPlayerListCellConfiguration(IconButtonListCellControllerAndItem<String> iconButtonListCellControllerAndItem) {\n+    IconButtonListCellController iconButtonListCellController = iconButtonListCellControllerAndItem.getIconButtonListCellController();\n+    String playerName = iconButtonListCellControllerAndItem.getItem();\n+    Button iconButton = iconButtonListCellController.getIconButton();\n+    iconButton.setDisable(true);\n+    iconButtonListCellController.getIconRegion().getStyleClass().add(\"added-person\");\n+    iconButtonListCellController.getLabel().setText(playerName);\n+  }\n+\n+  private void playerListCellConfiguration(IconButtonListCellControllerAndItem<String> iconButtonListCellControllerAndItem) {\n+    IconButtonListCellController iconButtonListCellController = iconButtonListCellControllerAndItem.getIconButtonListCellController();\n+    String playerName = iconButtonListCellControllerAndItem.getItem();\n+    Button iconButton = iconButtonListCellController.getIconButton();\n+    iconButton.setOnMouseClicked(event -> invite(playerName));\n+    iconButtonListCellController.getIconRegion().getStyleClass().add(\"add-person\");\n+    iconButtonListCellController.getLabel().setText(playerName);\n+  }\n+\n   public void requestFocus() {\n     JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n   }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex ae7e38fc..dc3cc68a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -98,7 +94,7 @@ public class InvitePlayerController implements Controller<Pane> {\n   }\n \n   public void requestFocus() {\n-    JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n+    fxApplicationThreadExecutor.execute(() -> playerTextField.requestFocus());\n   }\n \n   private Collection<String> getPlayerNames() {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "587ffb1ad342d0630a5b7e2a8b7e1a44683a4f9d", "committedDate": "2021-02-25 18:26:17 -0500", "message": "Remove RequestFocus Loop"}, {"oid": "54fb44d2c2bf6664c2957b6dfff88b2d853b1a01", "committedDate": "2021-05-31 13:43:23 -0400", "message": "Rework invite ui (#2182)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzMwMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536353300", "body": "Remove?", "bodyText": "Remove?", "bodyHTML": "<p dir=\"auto\">Remove?</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:12:10Z", "path": "src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.player.SocialStatus;\n+import javafx.beans.binding.Bindings;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.collections.transformation.SortedList;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.Pane;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class InvitePlayerController implements Controller<Pane> {\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final ObservableList<String> playerList = FXCollections.observableArrayList();\n+  private final FilteredList<String> filteredPlayerList = new FilteredList<>(playerList, p -> true);\n+  private final SortedList<String> sortedPlayerList = new SortedList<>(filteredPlayerList, Comparator.naturalOrder());\n+\n+  public Pane root;\n+  public TextField playerTextField;\n+  public ListView<String> playersListView;\n+  public ListView<String> invitedPlayersListView;\n+\n+  @Override\n+  public void initialize() {\n+    playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n+      playersListView.getSelectionModel().selectFirst();\n+    });\n+\n+\n+    //TODO: use longest common subsequence instead and sort list\n+    filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+            return false;\n+          }\n+\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          } else {\n+            return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n+          }\n+        }, playerTextField.textProperty()\n+    ));\n+\n+    //TODO", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex f24fade4..5544f253 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -43,44 +42,39 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n-    playerList.setAll(getPlayerNames());\n \n+\n+    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer()\n-              .map(Player::getUsername)\n-              .map(n -> n.equals(p))\n-              .orElse(true)) {\n+          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().isBlank()) {\n-            return playerService.getPlayerForUsername(p)\n-                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n-                .orElse(false);\n+          if (playerTextField.getText().trim().equals(\"\")) {\n+            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    playersListView.setItems(sortedPlayerList);\n-    playersListView.getSelectionModel().selectFirst();\n-    requestFocus();\n-  }\n+    //TODO\n+//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n+//      if(playerService.get) {\n+//\n+//      }\n+//    })));\n \n-  public void requestFocus() {\n-    Platform.runLater(() -> {\n-      if (!playerTextField.isFocused()) {\n-        playerTextField.requestFocus();\n-        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n-      }\n-    });\n+    playersListView.setItems(sortedPlayerList);\n+    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n+    playerTextField.requestFocus();\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames();\n+    return playerService.getPlayerNames(); //TODO: filter for online players\n   }\n \n   @Override\n", "next_change": {"commit": "411da96ef94f8c911fe64ba887f5e30260e4d642", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 5544f253..f24fade4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -42,39 +43,44 @@ public class InvitePlayerController implements Controller<Pane> {\n   @Override\n   public void initialize() {\n     playerTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      playerList.setAll(getPlayerNames());\n       playersListView.getSelectionModel().selectFirst();\n     });\n+    playerList.setAll(getPlayerNames());\n \n-\n-    //TODO: use longest common subsequence instead and sort list\n     filteredPlayerList.predicateProperty().bind(Bindings.createObjectBinding(() -> p -> {\n-          if (playerService.getCurrentPlayer().map(Player::getUsername).map(n -> n.equals(p)).orElse(true)) {\n+          if (playerService.getCurrentPlayer()\n+              .map(Player::getUsername)\n+              .map(n -> n.equals(p))\n+              .orElse(true)) {\n             return false;\n           }\n \n-          if (playerTextField.getText().trim().equals(\"\")) {\n-            return playerService.getPlayerForUsername(p).map(player -> player.getSocialStatus() == SocialStatus.FRIEND).orElse(false);\n+          if (playerTextField.getText().isBlank()) {\n+            return playerService.getPlayerForUsername(p)\n+                .map(player -> player.getSocialStatus() == SocialStatus.FRIEND)\n+                .orElse(false);\n           } else {\n             return p.toLowerCase().contains(playerTextField.getText().toLowerCase());\n           }\n         }, playerTextField.textProperty()\n     ));\n \n-    //TODO\n-//    sortedPlayerList.comparatorProperty().bind(Bindings.createObjectBinding(() -> Comparator.comparingDouble(p -> {\n-//      if(playerService.get) {\n-//\n-//      }\n-//    })));\n-\n     playersListView.setItems(sortedPlayerList);\n-    playerTextField.setText(\"\"); // TODO doesn't show friends on first open\n-    playerTextField.requestFocus();\n+    playersListView.getSelectionModel().selectFirst();\n+    requestFocus();\n+  }\n+\n+  public void requestFocus() {\n+    Platform.runLater(() -> {\n+      if (!playerTextField.isFocused()) {\n+        playerTextField.requestFocus();\n+        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n+      }\n+    });\n   }\n \n   private Collection<String> getPlayerNames() {\n-    return playerService.getPlayerNames(); //TODO: filter for online players\n+    return playerService.getPlayerNames();\n   }\n \n   @Override\n", "next_change": {"commit": "587ffb1ad342d0630a5b7e2a8b7e1a44683a4f9d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex f24fade4..56ac463a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -71,12 +71,7 @@ public class InvitePlayerController implements Controller<Pane> {\n   }\n \n   public void requestFocus() {\n-    Platform.runLater(() -> {\n-      if (!playerTextField.isFocused()) {\n-        playerTextField.requestFocus();\n-        requestFocus(); // Yes, this is a loop, because it often fails on the first try\n-      }\n-    });\n+    JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n   }\n \n   private Collection<String> getPlayerNames() {\n", "next_change": {"commit": "54fb44d2c2bf6664c2957b6dfff88b2d853b1a01", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex 56ac463a..ae7e38fc 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -65,11 +69,34 @@ public class InvitePlayerController implements Controller<Pane> {\n         }, playerTextField.textProperty()\n     ));\n \n+    invitedPlayersListView.setSelectionModel(new NoSelectionModel<>());\n+    invitedPlayersListView.setCellFactory(param -> new IconButtonListCell<>(this::invitedPlayerListCellConfiguration, uiService));\n+\n+    playersListView.setSelectionModel(new NoSelectionModel<>());\n+    playersListView.setCellFactory(param -> new IconButtonListCell<>(this::playerListCellConfiguration, uiService));\n     playersListView.setItems(sortedPlayerList);\n     playersListView.getSelectionModel().selectFirst();\n     requestFocus();\n   }\n \n+  private void invitedPlayerListCellConfiguration(IconButtonListCellControllerAndItem<String> iconButtonListCellControllerAndItem) {\n+    IconButtonListCellController iconButtonListCellController = iconButtonListCellControllerAndItem.getIconButtonListCellController();\n+    String playerName = iconButtonListCellControllerAndItem.getItem();\n+    Button iconButton = iconButtonListCellController.getIconButton();\n+    iconButton.setDisable(true);\n+    iconButtonListCellController.getIconRegion().getStyleClass().add(\"added-person\");\n+    iconButtonListCellController.getLabel().setText(playerName);\n+  }\n+\n+  private void playerListCellConfiguration(IconButtonListCellControllerAndItem<String> iconButtonListCellControllerAndItem) {\n+    IconButtonListCellController iconButtonListCellController = iconButtonListCellControllerAndItem.getIconButtonListCellController();\n+    String playerName = iconButtonListCellControllerAndItem.getItem();\n+    Button iconButton = iconButtonListCellController.getIconButton();\n+    iconButton.setOnMouseClicked(event -> invite(playerName));\n+    iconButtonListCellController.getIconRegion().getStyleClass().add(\"add-person\");\n+    iconButtonListCellController.getLabel().setText(playerName);\n+  }\n+\n   public void requestFocus() {\n     JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n   }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\nindex ae7e38fc..dc3cc68a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/InvitePlayerController.java\n", "chunk": "@@ -98,7 +94,7 @@ public class InvitePlayerController implements Controller<Pane> {\n   }\n \n   public void requestFocus() {\n-    JavaFxUtil.runLater(() -> playerTextField.requestFocus());\n+    fxApplicationThreadExecutor.execute(() -> playerTextField.requestFocus());\n   }\n \n   private Collection<String> getPlayerNames() {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "587ffb1ad342d0630a5b7e2a8b7e1a44683a4f9d", "committedDate": "2021-02-25 18:26:17 -0500", "message": "Remove RequestFocus Loop"}, {"oid": "54fb44d2c2bf6664c2957b6dfff88b2d853b1a01", "committedDate": "2021-05-31 13:43:23 -0400", "message": "Rework invite ui (#2182)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NTEzMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536355132", "body": "Isn't the toUpperCase something that should be configurable in the control via css or something?", "bodyText": "Isn't the toUpperCase something that should be configurable in the control via css or something?", "bodyHTML": "<p dir=\"auto\">Isn't the toUpperCase something that should be configurable in the control via css or something?</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:16:00Z", "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<Node> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public Node queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+\n+  private Timeline queuePopTimeUpdater;\n+\n+  private MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex f53be866..8e6b89f1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -60,44 +58,39 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n   @Override\n   public void initialize() {\n     eventBus.register(this);\n-    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n-      @Override\n-      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n-        if ((double) newValue > 150.0) {\n-          joinLeaveQueueButton.setText(\n-              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n-        } else {\n-          joinLeaveQueueButton.setText(\n-              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n-        }\n+    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue > 150.0) {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+      } else {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n       }\n     });\n   }\n \n   @Override\n-  public Node getRoot() {\n+  public VBox getRoot() {\n     return queueItemRoot;\n   }\n \n-  void setQueue(MatchmakingQueue queue) {\n+  public void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n-    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n-    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n       }\n     });\n \n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 8e6b89f1..f53be866 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -58,39 +60,44 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   @Override\n   public void initialize() {\n     eventBus.register(this);\n-    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n-      if ((double) newValue > 150.0) {\n-        joinLeaveQueueButton.setText(\n-            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n-      } else {\n-        joinLeaveQueueButton.setText(\n-            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n       }\n     });\n   }\n \n   @Override\n-  public VBox getRoot() {\n+  public Node getRoot() {\n     return queueItemRoot;\n   }\n \n-  public void setQueue(MatchmakingQueue queue) {\n+  void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n+    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n+    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n+    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n       }\n     });\n \n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex f53be866..f65375bf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -79,25 +72,23 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n     return queueItemRoot;\n   }\n \n-  void setQueue(MatchmakingQueue queue) {\n+  public void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n-    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n-    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n       }\n     });\n \n", "next_change": {"commit": "dc2d3117782a2b139a02e51508741fb581197491", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex f65375bf..ec73c4fc 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -94,8 +96,10 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n \n     joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n         () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+            || !teamMatchmakingService.getPlayersInGame().isEmpty()\n             || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n-        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n+        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty(),\n+        teamMatchmakingService.getPlayersInGame()\n     ));\n     queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n     queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n", "next_change": {"commit": "6bc898e1955c41f87f97b267761c12eba21bf319", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex ec73c4fc..5415d742 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -104,8 +100,10 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n     queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n \n-    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+    setQueuePopTimeUpdater(queue);\n+  }\n \n+  private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n     Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n         Instant now = Instant.now();\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex f53be866..19fd1843 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -60,58 +61,53 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n   @Override\n   public void initialize() {\n     eventBus.register(this);\n-    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n-      @Override\n-      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n-        if ((double) newValue > 150.0) {\n-          joinLeaveQueueButton.setText(\n-              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n-        } else {\n-          joinLeaveQueueButton.setText(\n-              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n-        }\n-      }\n-    });\n+    joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n+    joinLeaveQueueButton.setEllipsisString(\"\");\n+    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n   @Override\n-  public Node getRoot() {\n+  public VBox getRoot() {\n     return queueItemRoot;\n   }\n \n-  void setQueue(MatchmakingQueue queue) {\n+  public void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n+    joinLeaveQueueButton.setText(i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName())));\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n-    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n-    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+        default -> log.warn(\"Unexpected matching status: \" + newValue);\n       }\n     });\n \n     joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n         () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+            || !teamMatchmakingService.getPlayersInGame().isEmpty()\n             || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n-        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n+        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty(),\n+        teamMatchmakingService.getPlayersInGame()\n     ));\n     queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n     queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n \n-    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+    setQueuePopTimeUpdater(queue);\n+  }\n \n-    queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n+  private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n+    Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n         Instant now = Instant.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 19fd1843..d9604063 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -91,19 +90,33 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n         case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n         default -> log.warn(\"Unexpected matching status: \" + newValue);\n       }\n-    });\n+    };\n+  }\n \n-    joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n-        () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n-            || !teamMatchmakingService.getPlayersInGame().isEmpty()\n-            || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n-        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty(),\n-        teamMatchmakingService.getPlayersInGame()\n-    ));\n-    queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n-    queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n \n+  public void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+    joinLeaveQueueButton.setText(i18n.getOrDefault(queue.getTechnicalName(), String.format(QUEUE_I18N_PATTERN, queue.getTechnicalName())));\n     setQueuePopTimeUpdater(queue);\n+\n+    JavaFxUtil.addAndTriggerListener(queue.matchingStatusProperty(), new WeakChangeListener<>(queueMatchStatusChangeListener));\n+    JavaFxUtil.addAndTriggerListener(queue.playersInQueueProperty(), new WeakInvalidationListener(queuePopulationInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().getMembers(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n+  }\n+\n+  private void setQueueButtonState() {\n+    boolean disable = teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+        || teamMatchmakingService.partyMembersNotReady()\n+        || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null));\n+    JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n   }\n \n   private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n", "next_change": {"commit": "9653a226f9b0238b7692400162268b46bfa257f5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex d9604063..484ae2f0 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -115,7 +115,7 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   private void setQueueButtonState() {\n     boolean disable = teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n         || teamMatchmakingService.partyMembersNotReady()\n-        || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null));\n+        || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer());\n     JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n   }\n \n", "next_change": {"commit": "a1e4b6913e8bb1a5135dbb2a0b98c77eff7bc0d2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 484ae2f0..c3e86504 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -105,15 +108,17 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n     JavaFxUtil.addAndTriggerListener(queue.matchingStatusProperty(), new WeakChangeListener<>(queueMatchStatusChangeListener));\n     JavaFxUtil.addAndTriggerListener(queue.playersInQueueProperty(), new WeakInvalidationListener(queuePopulationInvalidationListener));\n-    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().getMembers(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n-    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n-    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n-    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().getMembers(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(fafService.connectionStateProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n     JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n   }\n \n   private void setQueueButtonState() {\n-    boolean disable = teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+    boolean disable = fafService.getLobbyConnectionState() != ConnectionState.CONNECTED\n+        || teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n         || teamMatchmakingService.partyMembersNotReady()\n         || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer());\n     JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex c3e86504..25042e32 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -112,22 +113,22 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n     JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n     JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(fafService.connectionStateProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(userService.connectionStateProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n     JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n   }\n \n   private void setQueueButtonState() {\n-    boolean disable = fafService.getLobbyConnectionState() != ConnectionState.CONNECTED\n+    boolean disable = userService.getConnectionState() != ConnectionState.CONNECTED\n         || teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n         || teamMatchmakingService.partyMembersNotReady()\n         || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer());\n     JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n   }\n \n-  private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n+  private void setQueuePopTimeUpdater(MatchmakerQueueBean queue) {\n     Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n-        Instant now = Instant.now();\n+        OffsetDateTime now = OffsetDateTime.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n         if (!timeUntilPopQueue.isNegative()) {\n           queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 25042e32..3922b9c1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -131,9 +132,8 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n         OffsetDateTime now = OffsetDateTime.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n         if (!timeUntilPopQueue.isNegative()) {\n-          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n-              timeUntilPopQueue.toMinutes(),\n-              timeUntilPopQueue.toSecondsPart()).toUpperCase());\n+          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\", timeUntilPopQueue.toMinutes(), timeUntilPopQueue.toSecondsPart())\n+              .toUpperCase());\n         }\n       }\n     }), new KeyFrame(javafx.util.Duration.seconds(1)));\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 3922b9c1..0a261767 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -141,17 +139,11 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queuePopTimeUpdater.play();\n   }\n \n-  private void disableMatchStatus() {\n-    matchFoundLabel.setVisible(false);\n-    matchStartingLabel.setVisible(false);\n-    matchCancelledLabel.setVisible(false);\n-  }\n-\n-  public void onJoinLeaveQueueClicked(ActionEvent actionEvent) {\n-    if (queue.isJoined()) {\n-      teamMatchmakingService.leaveQueue(queue);\n+  public void onJoinLeaveQueueClicked() {\n+    if (queueJoined.getValue()) {\n+      teamMatchmakingService.leaveQueue(getQueue());\n     } else {\n-      teamMatchmakingService.joinQueue(queue).thenAccept(success -> {\n+      teamMatchmakingService.joinQueue(getQueue()).thenAccept(success -> {\n         if (!success) {\n           joinLeaveQueueButton.setSelected(false);\n           refreshingLabel.setVisible(false);\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 0a261767..7d10fbbb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -139,20 +146,6 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queuePopTimeUpdater.play();\n   }\n \n-  public void onJoinLeaveQueueClicked() {\n-    if (queueJoined.getValue()) {\n-      teamMatchmakingService.leaveQueue(getQueue());\n-    } else {\n-      teamMatchmakingService.joinQueue(getQueue()).thenAccept(success -> {\n-        if (!success) {\n-          joinLeaveQueueButton.setSelected(false);\n-          refreshingLabel.setVisible(false);\n-        }\n-      });\n-    }\n-    refreshingLabel.setVisible(true);\n-  }\n-\n   public void showMapPool() {\n     eventBus.post(new ShowMapPoolEvent(getQueue()));\n   }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a1e4b6913e8bb1a5135dbb2a0b98c77eff7bc0d2", "committedDate": "2021-07-22 20:27:32 -0400", "message": "Remove sources of not on fxApplication and asking for player when no logged in."}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "281448853b1da106a17713898858bb33bbe04a91", "committedDate": "2021-10-14 07:12:58 -0400", "message": "Change names and alignment"}, {"oid": "8c7620da7b56d5a3e16e3107bdfc63a75dbba6f3", "committedDate": "2021-10-29 22:00:13 -0400", "message": "Make TokenService thread safe (#2408)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1613daa8d3de6a63d049913865bdbf50c8f37b94", "committedDate": "2023-02-25 20:35:17 -0500", "message": "Set queue labels on load"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536356181", "body": "Don't tell me it's hacky without telling what and why. I assume the WeakReference is meant here, but it I don't know for sure.", "bodyText": "Don't tell me it's hacky without telling what and why. I assume the WeakReference is meant here, but it I don't know for sure.", "bodyHTML": "<p dir=\"auto\">Don't tell me it's hacky without telling what and why. I assume the WeakReference is meant here, but it I don't know for sure.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:18:01Z", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyODcwNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536428707", "bodyText": "I don't know either. That comment is from Geosearchef.", "author": "BlackYps", "createdAt": "2020-12-04T22:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2MjA0Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536662042", "bodyText": "a214cbd", "author": "BlackYps", "createdAt": "2020-12-05T10:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MDIyMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536790223", "bodyText": "The contextmenu is separable from the chatUser which might be the thing to do here as I don't understand why the chatUser is necessary if all we want is a context menu", "author": "Sheikah45", "createdAt": "2020-12-05T14:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MzE2Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536793166", "bodyText": "This also seems like it would be a different context menu", "author": "Sheikah45", "createdAt": "2020-12-05T14:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..07f3584b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -68,6 +70,7 @@ public class PartyMemberItemController implements Controller<Node> {\n   public ImageView playerStatusImageView;\n \n   private Player player;\n+  private ChatChannelUser chatUser;\n   //TODO: this is a bit hacky\n   private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n \n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 07f3584b..89555f34 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -70,7 +68,6 @@ public class PartyMemberItemController implements Controller<Node> {\n   public ImageView playerStatusImageView;\n \n   private Player player;\n-  private ChatChannelUser chatUser;\n   //TODO: this is a bit hacky\n   private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n \n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..07f3584b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -68,6 +70,7 @@ public class PartyMemberItemController implements Controller<Node> {\n   public ImageView playerStatusImageView;\n \n   private Player player;\n+  private ChatChannelUser chatUser;\n   //TODO: this is a bit hacky\n   private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n \n", "next_change": {"commit": "901c2727e7b4f0b304ae370161c8e76128b4fe5a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 07f3584b..5d8e3251 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -70,9 +70,7 @@ public class PartyMemberItemController implements Controller<Node> {\n   public ImageView playerStatusImageView;\n \n   private Player player;\n-  private ChatChannelUser chatUser;\n-  //TODO: this is a bit hacky\n-  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+  private WeakReference<PartyMemberContextMenuController> contextMenuController = null;\n \n   @Override\n   public void initialize() {\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..0bb28821 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -68,8 +67,7 @@ public class PartyMemberItemController implements Controller<Node> {\n   public ImageView playerStatusImageView;\n \n   private Player player;\n-  //TODO: this is a bit hacky\n-  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+  private WeakReference<PartyMemberContextMenuController> contextMenuController = null;\n \n   @Override\n   public void initialize() {\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0bb28821..0b62f17e 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -68,10 +65,14 @@ public class PartyMemberItemController implements Controller<Node> {\n \n   private Player player;\n   private WeakReference<PartyMemberContextMenuController> contextMenuController = null;\n+  private InvalidationListener playerStatusInvalidationListener;\n+  private InvalidationListener playerPropertiesInvalidationListener;\n+  private InvalidationListener partyOwnerInvalidationListener;\n \n   @Override\n   public void initialize() {\n-    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView, leagueImageView, kickPlayerButton);\n+    initializeListeners();\n   }\n \n   @Override\n", "next_change": {"commit": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0b62f17e..4b15ca02 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -63,16 +73,14 @@ public class PartyMemberItemController implements Controller<Node> {\n   public HBox playerCard;\n   public ImageView playerStatusImageView;\n \n-  private Player player;\n-  private WeakReference<PartyMemberContextMenuController> contextMenuController = null;\n-  private InvalidationListener playerStatusInvalidationListener;\n-  private InvalidationListener playerPropertiesInvalidationListener;\n-  private InvalidationListener partyOwnerInvalidationListener;\n+  private PlayerBean player;\n+  private final SimpleInvalidationListener playerStatusInvalidationListener = this::setMemberGameStatus;\n+  private final SimpleInvalidationListener playerPropertiesInvalidationListener = this::setPlayerProperties;\n+  private final SimpleInvalidationListener partyOwnerInvalidationListener = this::setPartyOwnerProperties;\n \n   @Override\n   public void initialize() {\n     JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView, leagueImageView, kickPlayerButton);\n-    initializeListeners();\n   }\n \n   @Override\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "committedDate": "2021-10-23 08:51:24 -0400", "message": "Utilize inheritance for context menus (#2381)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTU2Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536361567", "body": "`StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()`\r\n\r\nIf the string is empty it's empty? Thanks captain.", "bodyText": "StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()\nIf the string is empty it's empty? Thanks captain.", "bodyHTML": "<p dir=\"auto\"><code>StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()</code></p>\n<p dir=\"auto\">If the string is empty it's empty? Thanks captain.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:28:48Z", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n+    this.countryFlagService = countryFlagService;\n+    this.avatarService = avatarService;\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.uiService = uiService;\n+    this.chatService = chatService;\n+    this.i18n = i18n;\n+  }\n+\n+  void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMDM1Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536430352", "bodyText": "This seems to be a nullcheck, no?", "author": "BlackYps", "createdAt": "2020-12-04T22:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5NTU5NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536895595", "bodyText": "Yes, but the CountryFlagService.loadCountryFlag has null handling builtin ^^", "author": "Brutus5000", "createdAt": "2020-12-05T21:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..07f3584b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -81,47 +84,12 @@ public class PartyMemberItemController implements Controller<Node> {\n     return playerItemRoot;\n   }\n \n-  private ChatChannelUser chatUser;\n-\n-  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n-    this.countryFlagService = countryFlagService;\n-    this.avatarService = avatarService;\n-    this.playerService = playerService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-    this.uiService = uiService;\n-    this.chatService = chatService;\n-    this.i18n = i18n;\n-  }\n-\n-  void setMember(PartyMember member) {\n+  public void setMember(PartyMember member) {\n     this.player = member.getPlayer();\n     //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n     chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n \n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n-\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-\n-    leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n-        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n-    gameCountLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n-        player.numberOfGamesProperty()));\n-\n-    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n-    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n-    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n+    initializeBindings();\n     playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 07f3584b..89555f34 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -84,12 +81,47 @@ public class PartyMemberItemController implements Controller<Node> {\n     return playerItemRoot;\n   }\n \n-  public void setMember(PartyMember member) {\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n+    this.countryFlagService = countryFlagService;\n+    this.avatarService = avatarService;\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.uiService = uiService;\n+    this.chatService = chatService;\n+    this.i18n = i18n;\n+  }\n+\n+  void setMember(PartyMember member) {\n     this.player = member.getPlayer();\n     //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n     chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n \n-    initializeBindings();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n+    gameCountLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n+        player.numberOfGamesProperty()));\n+\n+    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n+    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n+    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n+    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n     playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..07f3584b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -81,47 +84,12 @@ public class PartyMemberItemController implements Controller<Node> {\n     return playerItemRoot;\n   }\n \n-  private ChatChannelUser chatUser;\n-\n-  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n-    this.countryFlagService = countryFlagService;\n-    this.avatarService = avatarService;\n-    this.playerService = playerService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-    this.uiService = uiService;\n-    this.chatService = chatService;\n-    this.i18n = i18n;\n-  }\n-\n-  void setMember(PartyMember member) {\n+  public void setMember(PartyMember member) {\n     this.player = member.getPlayer();\n     //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n     chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n \n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n-\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-\n-    leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n-        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n-    gameCountLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n-        player.numberOfGamesProperty()));\n-\n-    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n-    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n-    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n+    initializeBindings();\n     playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n", "next_change": {"commit": "dc2d3117782a2b139a02e51508741fb581197491", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 07f3584b..d0c56c5a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -93,23 +94,28 @@ public class PartyMemberItemController implements Controller<Node> {\n     playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue == PlayerStatus.IDLE) {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(false);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        });\n-      } else {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(true);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        });\n-      }\n-    });\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n \n     selectFactionsBasedOnParty();\n   }\n \n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n+\n   private void initializeBindings() {\n     countryImageView.imageProperty().bind(createObjectBinding(() ->\n         countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..0bb28821 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -81,65 +79,57 @@ public class PartyMemberItemController implements Controller<Node> {\n     return playerItemRoot;\n   }\n \n-  private ChatChannelUser chatUser;\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n \n-  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n-    this.countryFlagService = countryFlagService;\n-    this.avatarService = avatarService;\n-    this.playerService = playerService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-    this.uiService = uiService;\n-    this.chatService = chatService;\n-    this.i18n = i18n;\n-  }\n+    initializeBindings();\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n-  void setMember(PartyMember member) {\n-    this.player = member.getPlayer();\n-    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n-    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n \n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    selectFactionsBasedOnParty();\n+  }\n+\n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n \n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n     avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n     avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n     leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n \n     clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n     clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-\n     usernameLabel.textProperty().bind(player.usernameProperty());\n-\n     leagueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n         player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n     gameCountLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n         player.numberOfGamesProperty()));\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n \n     BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n     kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n-    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n-    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n-\n-    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue == PlayerStatus.IDLE) {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(false);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        });\n-      } else {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(true);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        });\n-      }\n-    });\n-\n-    selectFactionsBasedOnParty();\n+    JavaFxUtil.bindManagedToVisible(kickPlayerButton);\n   }\n \n   private void selectFactionsBasedOnParty() {\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0bb28821..0b62f17e 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -80,72 +81,80 @@ public class PartyMemberItemController implements Controller<Node> {\n   }\n \n   public void setMember(PartyMember member) {\n-    this.player = member.getPlayer();\n-\n-    initializeBindings();\n-    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+    Assert.checkNotNullIllegalState(player, \"Party member already set\");\n+    player = member.getPlayer();\n \n+    // TODO: replace this with divisionproperty once it is available\n+    leagueImageView.setVisible(false);\n+    leagueLabel.setText(i18n.get(\"leaderboard.divisionName\").toUpperCase());\n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n-    markMemberBusy(player.statusProperty().get());\n \n+    addListeners();\n     selectFactionsBasedOnParty();\n   }\n \n-  private void markMemberBusy(PlayerStatus status) {\n-    if (status != PlayerStatus.IDLE) {\n-      Platform.runLater(() -> {\n-        playerStatusImageView.setVisible(true);\n-        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      });\n-    } else {\n-      Platform.runLater(() -> {\n-        playerStatusImageView.setVisible(false);\n-        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      });\n-    }\n+  private void initializeListeners() {\n+    playerStatusInvalidationListener = observable -> setMemberGameStatus();\n+    playerPropertiesInvalidationListener = observable -> setPlayerProperties();\n+    partyOwnerInvalidationListener = observable -> setPartyOwnerProperties();\n+  }\n+\n+  private void setMemberGameStatus() {\n+    boolean inGame = player.getStatus() != PlayerStatus.IDLE;\n+    JavaFxUtil.runLater(() -> {\n+      playerStatusImageView.setVisible(inGame);\n+      playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, inGame);\n+    });\n+  }\n+\n+  private void setPartyOwnerProperties() {\n+    Player currentPlayer = playerService.getCurrentPlayer().orElseThrow(() -> new IllegalStateException(\"Current Player not set\"));\n+    Player owner = teamMatchmakingService.getParty().getOwner();\n+    JavaFxUtil.runLater(() -> {\n+      crownLabel.setVisible(owner == player);\n+      kickPlayerButton.setVisible(owner == currentPlayer && player != currentPlayer);\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, owner == player);\n+    });\n+  }\n+\n+  private void setPlayerProperties() {\n+    Image countryFlag = countryFlagService.loadCountryFlag(player.getCountry()).orElse(null);\n+    Image avatarImage = Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl());\n+    String clanTag = Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan());\n+    JavaFxUtil.runLater(() -> {\n+      countryImageView.setImage(countryFlag);\n+      avatarImageView.setImage(avatarImage);\n+      clanLabel.setVisible(!Strings.isNullOrEmpty(player.getClan()));\n+      clanLabel.setText(clanTag);\n+      gameCountLabel.setText(i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase());\n+      usernameLabel.setText(player.getUsername());\n+    });\n   }\n \n-  private void initializeBindings() {\n-    countryImageView.imageProperty().bind(createObjectBinding(() ->\n-        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n-\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-    leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n-        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n-    gameCountLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n-        player.numberOfGamesProperty()));\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n-\n-    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n-    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    JavaFxUtil.bindManagedToVisible(kickPlayerButton);\n+  private void addListeners() {\n+    JavaFxUtil.addAndTriggerListener(player.clanProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.avatarUrlProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.countryProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.numberOfGamesProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.usernameProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(player.statusProperty(), new WeakInvalidationListener(playerStatusInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(partyOwnerInvalidationListener));\n   }\n \n   private void selectFactionsBasedOnParty() {\n-    uefLabel.setDisable(!isFactionSelectedInParty(Faction.UEF));\n-    aeonLabel.setDisable(!isFactionSelectedInParty(Faction.AEON));\n-    cybranLabel.setDisable(!isFactionSelectedInParty(Faction.CYBRAN));\n-    seraphimLabel.setDisable(!isFactionSelectedInParty(Faction.SERAPHIM));\n+    uefLabel.setDisable(factionIsNotSelected(Faction.UEF));\n+    aeonLabel.setDisable(factionIsNotSelected(Faction.AEON));\n+    cybranLabel.setDisable(factionIsNotSelected(Faction.CYBRAN));\n+    seraphimLabel.setDisable(factionIsNotSelected(Faction.SERAPHIM));\n   }\n \n-  private boolean isFactionSelectedInParty(Faction faction) {\n+  private boolean factionIsNotSelected(Faction faction) {\n     return teamMatchmakingService.getParty().getMembers().stream()\n-        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+        .noneMatch(member -> member.getPlayer() == player && member.getFactions().contains(faction));\n   }\n \n   public void onKickPlayerButtonClicked(ActionEvent actionEvent) {\n-    teamMatchmakingService.kickPlayerFromParty(this.player);\n+    teamMatchmakingService.kickPlayerFromParty(player);\n   }\n \n   public void onContextMenuRequested(ContextMenuEvent event) {\n", "next_change": {"commit": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0b62f17e..ade773e9 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -153,23 +182,20 @@ public class PartyMemberItemController implements Controller<Node> {\n         .noneMatch(member -> member.getPlayer() == player && member.getFactions().contains(faction));\n   }\n \n-  public void onKickPlayerButtonClicked(ActionEvent actionEvent) {\n+  public void onKickPlayerButtonClicked() {\n     teamMatchmakingService.kickPlayerFromParty(player);\n   }\n \n   public void onContextMenuRequested(ContextMenuEvent event) {\n-    if (contextMenuController != null) {\n-      PartyMemberContextMenuController controller = contextMenuController.get();\n-      if (controller != null) {\n-        controller.getContextMenu().show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n-        return;\n-      }\n-    }\n-\n-    PartyMemberContextMenuController controller = uiService.loadFxml(\"theme/play/teammatchmaking/party_member_context_menu.fxml\");\n-    controller.setPlayer(player);\n-    controller.getContextMenu().show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n-\n-    contextMenuController = new WeakReference<>(controller);\n+    ContextMenuBuilder.newBuilder(context)\n+        .addItem(ShowPlayerInfoMenuItem.class, player)\n+        .addItem(SendPrivateMessageMenuItem.class, player.getUsername())\n+        .addItem(CopyUsernameMenuItem.class, player.getUsername())\n+        .addSeparator()\n+        .addItem(ReportPlayerMenuItem.class, player)\n+        .addSeparator()\n+        .addItem(ViewReplaysMenuItem.class, player)\n+        .build()\n+        .show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n   }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "committedDate": "2021-10-23 08:51:24 -0400", "message": "Utilize inheritance for context menus (#2381)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MzA3Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536363076", "body": "Use `@RequiredArgsConstructor`", "bodyText": "Use @RequiredArgsConstructor", "bodyHTML": "<p dir=\"auto\">Use <code>@RequiredArgsConstructor</code></p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:32:00Z", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..07f3584b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -81,47 +84,12 @@ public class PartyMemberItemController implements Controller<Node> {\n     return playerItemRoot;\n   }\n \n-  private ChatChannelUser chatUser;\n-\n-  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n-    this.countryFlagService = countryFlagService;\n-    this.avatarService = avatarService;\n-    this.playerService = playerService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-    this.uiService = uiService;\n-    this.chatService = chatService;\n-    this.i18n = i18n;\n-  }\n-\n-  void setMember(PartyMember member) {\n+  public void setMember(PartyMember member) {\n     this.player = member.getPlayer();\n     //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n     chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n \n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n-\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-\n-    leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n-        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n-    gameCountLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n-        player.numberOfGamesProperty()));\n-\n-    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n-    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n-    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n+    initializeBindings();\n     playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 07f3584b..89555f34 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -84,12 +81,47 @@ public class PartyMemberItemController implements Controller<Node> {\n     return playerItemRoot;\n   }\n \n-  public void setMember(PartyMember member) {\n+  private ChatChannelUser chatUser;\n+\n+  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n+    this.countryFlagService = countryFlagService;\n+    this.avatarService = avatarService;\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.uiService = uiService;\n+    this.chatService = chatService;\n+    this.i18n = i18n;\n+  }\n+\n+  void setMember(PartyMember member) {\n     this.player = member.getPlayer();\n     //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n     chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n \n-    initializeBindings();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n+    gameCountLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n+        player.numberOfGamesProperty()));\n+\n+    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n+    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n+    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n+    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n     playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..07f3584b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -81,47 +84,12 @@ public class PartyMemberItemController implements Controller<Node> {\n     return playerItemRoot;\n   }\n \n-  private ChatChannelUser chatUser;\n-\n-  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n-    this.countryFlagService = countryFlagService;\n-    this.avatarService = avatarService;\n-    this.playerService = playerService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-    this.uiService = uiService;\n-    this.chatService = chatService;\n-    this.i18n = i18n;\n-  }\n-\n-  void setMember(PartyMember member) {\n+  public void setMember(PartyMember member) {\n     this.player = member.getPlayer();\n     //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n     chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n \n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n-\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-\n-    leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n-        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n-    gameCountLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n-        player.numberOfGamesProperty()));\n-\n-    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n-    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n-    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n+    initializeBindings();\n     playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n", "next_change": {"commit": "dc2d3117782a2b139a02e51508741fb581197491", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 07f3584b..d0c56c5a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -93,23 +94,28 @@ public class PartyMemberItemController implements Controller<Node> {\n     playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue == PlayerStatus.IDLE) {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(false);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        });\n-      } else {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(true);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        });\n-      }\n-    });\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n \n     selectFactionsBasedOnParty();\n   }\n \n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n+\n   private void initializeBindings() {\n     countryImageView.imageProperty().bind(createObjectBinding(() ->\n         countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 89555f34..0bb28821 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -81,65 +79,57 @@ public class PartyMemberItemController implements Controller<Node> {\n     return playerItemRoot;\n   }\n \n-  private ChatChannelUser chatUser;\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n \n-  public PartyMemberItemController(CountryFlagService countryFlagService, AvatarService avatarService, PlayerService playerService, TeamMatchmakingService teamMatchmakingService, UiService uiService, ChatService chatService, I18n i18n) {\n-    this.countryFlagService = countryFlagService;\n-    this.avatarService = avatarService;\n-    this.playerService = playerService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-    this.uiService = uiService;\n-    this.chatService = chatService;\n-    this.i18n = i18n;\n-  }\n+    initializeBindings();\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n \n-  void setMember(PartyMember member) {\n-    this.player = member.getPlayer();\n-    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n-    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n \n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    selectFactionsBasedOnParty();\n+  }\n+\n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n \n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n     avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n     avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n     leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n \n     clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n     clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-\n     usernameLabel.textProperty().bind(player.usernameProperty());\n-\n     leagueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n         player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n     gameCountLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n         player.numberOfGamesProperty()));\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n \n     BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n     kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n-    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n-    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n-\n-    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue == PlayerStatus.IDLE) {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(false);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        });\n-      } else {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(true);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        });\n-      }\n-    });\n-\n-    selectFactionsBasedOnParty();\n+    JavaFxUtil.bindManagedToVisible(kickPlayerButton);\n   }\n \n   private void selectFactionsBasedOnParty() {\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0bb28821..0b62f17e 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -80,72 +81,80 @@ public class PartyMemberItemController implements Controller<Node> {\n   }\n \n   public void setMember(PartyMember member) {\n-    this.player = member.getPlayer();\n-\n-    initializeBindings();\n-    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+    Assert.checkNotNullIllegalState(player, \"Party member already set\");\n+    player = member.getPlayer();\n \n+    // TODO: replace this with divisionproperty once it is available\n+    leagueImageView.setVisible(false);\n+    leagueLabel.setText(i18n.get(\"leaderboard.divisionName\").toUpperCase());\n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n-    markMemberBusy(player.statusProperty().get());\n \n+    addListeners();\n     selectFactionsBasedOnParty();\n   }\n \n-  private void markMemberBusy(PlayerStatus status) {\n-    if (status != PlayerStatus.IDLE) {\n-      Platform.runLater(() -> {\n-        playerStatusImageView.setVisible(true);\n-        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      });\n-    } else {\n-      Platform.runLater(() -> {\n-        playerStatusImageView.setVisible(false);\n-        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      });\n-    }\n+  private void initializeListeners() {\n+    playerStatusInvalidationListener = observable -> setMemberGameStatus();\n+    playerPropertiesInvalidationListener = observable -> setPlayerProperties();\n+    partyOwnerInvalidationListener = observable -> setPartyOwnerProperties();\n+  }\n+\n+  private void setMemberGameStatus() {\n+    boolean inGame = player.getStatus() != PlayerStatus.IDLE;\n+    JavaFxUtil.runLater(() -> {\n+      playerStatusImageView.setVisible(inGame);\n+      playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, inGame);\n+    });\n+  }\n+\n+  private void setPartyOwnerProperties() {\n+    Player currentPlayer = playerService.getCurrentPlayer().orElseThrow(() -> new IllegalStateException(\"Current Player not set\"));\n+    Player owner = teamMatchmakingService.getParty().getOwner();\n+    JavaFxUtil.runLater(() -> {\n+      crownLabel.setVisible(owner == player);\n+      kickPlayerButton.setVisible(owner == currentPlayer && player != currentPlayer);\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, owner == player);\n+    });\n+  }\n+\n+  private void setPlayerProperties() {\n+    Image countryFlag = countryFlagService.loadCountryFlag(player.getCountry()).orElse(null);\n+    Image avatarImage = Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl());\n+    String clanTag = Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan());\n+    JavaFxUtil.runLater(() -> {\n+      countryImageView.setImage(countryFlag);\n+      avatarImageView.setImage(avatarImage);\n+      clanLabel.setVisible(!Strings.isNullOrEmpty(player.getClan()));\n+      clanLabel.setText(clanTag);\n+      gameCountLabel.setText(i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase());\n+      usernameLabel.setText(player.getUsername());\n+    });\n   }\n \n-  private void initializeBindings() {\n-    countryImageView.imageProperty().bind(createObjectBinding(() ->\n-        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n-\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-    leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n-        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n-    gameCountLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n-        player.numberOfGamesProperty()));\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n-\n-    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n-    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    JavaFxUtil.bindManagedToVisible(kickPlayerButton);\n+  private void addListeners() {\n+    JavaFxUtil.addAndTriggerListener(player.clanProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.avatarUrlProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.countryProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.numberOfGamesProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.usernameProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(player.statusProperty(), new WeakInvalidationListener(playerStatusInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(partyOwnerInvalidationListener));\n   }\n \n   private void selectFactionsBasedOnParty() {\n-    uefLabel.setDisable(!isFactionSelectedInParty(Faction.UEF));\n-    aeonLabel.setDisable(!isFactionSelectedInParty(Faction.AEON));\n-    cybranLabel.setDisable(!isFactionSelectedInParty(Faction.CYBRAN));\n-    seraphimLabel.setDisable(!isFactionSelectedInParty(Faction.SERAPHIM));\n+    uefLabel.setDisable(factionIsNotSelected(Faction.UEF));\n+    aeonLabel.setDisable(factionIsNotSelected(Faction.AEON));\n+    cybranLabel.setDisable(factionIsNotSelected(Faction.CYBRAN));\n+    seraphimLabel.setDisable(factionIsNotSelected(Faction.SERAPHIM));\n   }\n \n-  private boolean isFactionSelectedInParty(Faction faction) {\n+  private boolean factionIsNotSelected(Faction faction) {\n     return teamMatchmakingService.getParty().getMembers().stream()\n-        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+        .noneMatch(member -> member.getPlayer() == player && member.getFactions().contains(faction));\n   }\n \n   public void onKickPlayerButtonClicked(ActionEvent actionEvent) {\n-    teamMatchmakingService.kickPlayerFromParty(this.player);\n+    teamMatchmakingService.kickPlayerFromParty(player);\n   }\n \n   public void onContextMenuRequested(ContextMenuEvent event) {\n", "next_change": {"commit": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0b62f17e..ade773e9 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -153,23 +182,20 @@ public class PartyMemberItemController implements Controller<Node> {\n         .noneMatch(member -> member.getPlayer() == player && member.getFactions().contains(faction));\n   }\n \n-  public void onKickPlayerButtonClicked(ActionEvent actionEvent) {\n+  public void onKickPlayerButtonClicked() {\n     teamMatchmakingService.kickPlayerFromParty(player);\n   }\n \n   public void onContextMenuRequested(ContextMenuEvent event) {\n-    if (contextMenuController != null) {\n-      PartyMemberContextMenuController controller = contextMenuController.get();\n-      if (controller != null) {\n-        controller.getContextMenu().show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n-        return;\n-      }\n-    }\n-\n-    PartyMemberContextMenuController controller = uiService.loadFxml(\"theme/play/teammatchmaking/party_member_context_menu.fxml\");\n-    controller.setPlayer(player);\n-    controller.getContextMenu().show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n-\n-    contextMenuController = new WeakReference<>(controller);\n+    ContextMenuBuilder.newBuilder(context)\n+        .addItem(ShowPlayerInfoMenuItem.class, player)\n+        .addItem(SendPrivateMessageMenuItem.class, player.getUsername())\n+        .addItem(CopyUsernameMenuItem.class, player.getUsername())\n+        .addSeparator()\n+        .addItem(ReportPlayerMenuItem.class, player)\n+        .addSeparator()\n+        .addItem(ViewReplaysMenuItem.class, player)\n+        .build()\n+        .show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n   }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "committedDate": "2021-10-23 08:51:24 -0400", "message": "Utilize inheritance for context menus (#2381)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MzM3Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536363373", "body": "Again here `StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()` seems  useless.\r\nAnd duplicate code", "bodyText": "Again here StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry() seems  useless.\nAnd duplicate code", "bodyHTML": "<p dir=\"auto\">Again here <code>StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()</code> seems  useless.<br>\nAnd duplicate code</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:32:39Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 382577d4..fa6baed8 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -98,29 +99,17 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public ColumnConstraints column2;\n   public RowConstraints row2;\n   private Player player;\n-  private MatchmakingChatController matchmakingChatController;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n \n   @Override\n   public void initialize() {\n     eventBus.register(this);\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n     initializeDynamicChatPosition();\n-\n     player = playerService.getCurrentPlayer().get();\n     initializeUppercaseText();\n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() ->\n-        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n-        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n-        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+    initializeBindings();\n \n     teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n       playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fa6baed8..382577d4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -99,17 +98,29 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public ColumnConstraints column2;\n   public RowConstraints row2;\n   private Player player;\n-  @VisibleForTesting\n-  protected MatchmakingChatController matchmakingChatController;\n+  private MatchmakingChatController matchmakingChatController;\n \n   @Override\n   public void initialize() {\n     eventBus.register(this);\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n     initializeDynamicChatPosition();\n+\n     player = playerService.getCurrentPlayer().get();\n     initializeUppercaseText();\n-    initializeBindings();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n \n     teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n       playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 382577d4..31b7b463 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -105,22 +104,9 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     eventBus.register(this);\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n     initializeDynamicChatPosition();\n-\n     player = playerService.getCurrentPlayer().get();\n     initializeUppercaseText();\n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() ->\n-        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n-        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n-        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+    initializeBindings();\n \n     teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n       playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n", "next_change": {"commit": "6bc898e1955c41f87f97b267761c12eba21bf319", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 31b7b463..55113911 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -108,20 +112,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     initializeUppercaseText();\n     initializeBindings();\n \n-    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n-      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n-          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n-      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n-      partyMemberPane.getChildren().clear();\n-      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n-      for(int i = 0; i < members.size(); i++) {\n-        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n-        controller.setMember(members.get(i));\n-        if (members.size() == 1) {\n-          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n-        } else {\n-          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n-        }\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n       }\n     });\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 382577d4..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -98,52 +101,35 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public ColumnConstraints column2;\n   public RowConstraints row2;\n   private Player player;\n-  private MatchmakingChatController matchmakingChatController;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n \n   @Override\n   public void initialize() {\n     eventBus.register(this);\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n     initializeDynamicChatPosition();\n-\n     player = playerService.getCurrentPlayer().get();\n     initializeUppercaseText();\n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() ->\n-        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n-        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n-        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+    initializeBindings();\n \n-    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n-      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n-          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n-      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n-      partyMemberPane.getChildren().clear();\n-      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n-      for(int i = 0; i < members.size(); i++) {\n-        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n-        controller.setMember(members.get(i));\n-        if (members.size() == 1)\n-          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n-        else\n-          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n       }\n     });\n \n-    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n-        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n-        teamMatchmakingService.getParty().ownerProperty(),\n-        playerService.currentPlayerProperty()\n-    ));\n-    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n \n     teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n       refreshingLabel.setVisible(false);\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fbafe994..0bb9235d 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -124,11 +139,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     });\n \n     player.statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue != PlayerStatus.IDLE) {\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      } else {\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      }\n+      JavaFxUtil.runLater(() -> {\n+        if (newValue != PlayerStatus.IDLE) {\n+          teamMatchmakingService.getPlayersInGame().add(player);\n+        } else {\n+          teamMatchmakingService.getPlayersInGame().remove(player);\n+        }\n+      });\n     });\n \n     teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n", "next_change": {"commit": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0bb9235d..67f6fa95 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -138,15 +138,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       }\n     });\n \n-    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n-      JavaFxUtil.runLater(() -> {\n-        if (newValue != PlayerStatus.IDLE) {\n-          teamMatchmakingService.getPlayersInGame().add(player);\n-        } else {\n-          teamMatchmakingService.getPlayersInGame().remove(player);\n-        }\n-      });\n-    });\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> JavaFxUtil.runLater(() -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    }));\n \n     teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n       refreshingLabel.setVisible(false);\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 67f6fa95..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -105,61 +103,34 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public ColumnConstraints column2;\n   public RowConstraints row2;\n   private Player player;\n-  private HashMap<Faction, ToggleButton> factionsToButtons;\n+  private Map<Faction, ToggleButton> factionsToButtons;\n   @VisibleForTesting\n   protected MatchmakingChatController matchmakingChatController;\n+  private InvalidationListener matchmakingQueuesLabelInvalidationListener;\n+  private InvalidationListener playerPropertiesInvalidationListener;\n+  private ChangeListener<Player> partyOwnerChangeListener;\n \n   @Override\n   public void initialize() {\n-    eventBus.register(this);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, leagueImageView);\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n+    eventBus.register(this);\n+\n+    factionsToButtons = Map.of(Faction.UEF, uefButton, Faction.AEON, aeonButton,\n+        Faction.CYBRAN, cybranButton, Faction.SERAPHIM, seraphimButton);\n+\n+    player = playerService.getCurrentPlayer().orElseThrow(() -> new IllegalStateException(\"Current Player not set\"));\n     initializeDynamicChatPosition();\n-    player = playerService.getCurrentPlayer().get();\n     initializeUppercaseText();\n-    initializeBindings();\n-\n-    factionsToButtons = new HashMap<>();\n-    factionsToButtons.put(Faction.AEON, aeonButton);\n-    factionsToButtons.put(Faction.UEF, uefButton);\n-    factionsToButtons.put(Faction.CYBRAN, cybranButton);\n-    factionsToButtons.put(Faction.SERAPHIM, seraphimButton);\n+    initializeListeners();\n \n     ObservableList<Faction> factions = preferencesService.getPreferences().getMatchmaker().getFactions();\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n+    teamMatchmakingService.requestMatchmakerInfo();\n \n-    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n-    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n-      renderQueues(); // The teamMatchmakingService may already have all queues collected\n-    }                 // so we won't get any updates on the following change listener\n-    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        renderQueues();\n-      }\n-    });\n-\n-    player.statusProperty().addListener((observable, oldValue, newValue) -> JavaFxUtil.runLater(() -> {\n-      if (newValue != PlayerStatus.IDLE) {\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      } else {\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      }\n-    }));\n-\n-    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n-      refreshingLabel.setVisible(false);\n-      selectFactionsBasedOnParty();\n-    });\n-\n-    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n-      if (matchmakingChatController != null) {\n-        matchmakingChatController.closeChannel();\n-      }\n-      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n-    });\n-    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n-\n-    fafService.requestMatchmakerInfo();\n+    // TODO: Use when leagues implemented\n+    leagueImageView.setVisible(false);\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": {"commit": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..014ae7a4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,9 +132,6 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n-\n-    // TODO: Use when leagues implemented\n-    leagueImageView.setVisible(false);\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 014ae7a4..e068bcb6 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,7 +130,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     initializeUppercaseText();\n     initializeListeners();\n \n-    ObservableList<Faction> factions = preferencesService.getPreferences().getMatchmaker().getFactions();\n+    ObservableList<Faction> factions = matchmakerPrefs.getFactions();\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n", "next_change": {"commit": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex e068bcb6..3fd7aac3 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,7 +131,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     player = playerService.getCurrentPlayer();\n     initializeDynamicChatPosition();\n     initializeUppercaseText();\n-    initializeListeners();\n+    addListeners();\n \n     ObservableList<Faction> factions = matchmakerPrefs.getFactions();\n     selectFactions(factions);\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 3fd7aac3..37806f04 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -137,6 +138,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n+    renderQueues();\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDE4NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536364184", "body": "Can this not be done via css? Then it would be completely redundant (handled in FXML)", "bodyText": "Can this not be done via css? Then it would be completely redundant (handled in FXML)", "bodyHTML": "<p dir=\"auto\">Can this not be done via css? Then it would be completely redundant (handled in FXML)</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:34:25Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1)\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        else\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    });\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3NDUyMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536374522", "bodyText": "I wish! CSS can do that, but the \"special\" css for javafx cannot :(", "author": "BlackYps", "createdAt": "2020-12-04T20:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4MDc2Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536380767", "bodyText": "Shame", "author": "Brutus5000", "createdAt": "2020-12-04T21:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDE4NA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 382577d4..5caafee1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -190,15 +176,64 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n \n     leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n-        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+        player.leaderboardRatingMapProperty())); // This should actually be a divisionProperty once that is available\n     gameCountLabel.textProperty().bind(createStringBinding(() ->\n         i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n     queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n-      if (teamMatchmakingService.getParty().getOwner().equals(player))\n-        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n-      else\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n         return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n-    }, teamMatchmakingService.getParty().ownerProperty()));\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n   }\n \n   @Override\n", "next_change": {"commit": "51a3f02a375abe5df258a764d0538e620a067eb5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 5caafee1..577f58c8 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -241,51 +257,44 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     return teamMatchmakingRoot;\n   }\n \n-  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+  public void onInvitePlayerButtonClicked() {\n     InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n     Pane root = invitePlayerController.getRoot();\n     uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n   }\n \n-  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+  public void onLeavePartyButtonClicked() {\n     teamMatchmakingService.leaveParty();\n   }\n \n-  public void onFactionButtonClicked(ActionEvent actionEvent) {\n-    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+  public void onFactionButtonClicked() {\n+    List<Faction> factions = factionsToButtons.entrySet().stream()\n+        .filter(entry -> entry.getValue().isSelected())\n+        .map(Map.Entry::getKey)\n+        .collect(Collectors.toList());\n+    if (factions.isEmpty()) {\n       selectFactionsBasedOnParty();\n       return;\n     }\n-\n-    List<Faction> factions = new ArrayList<>();\n-    if (uefButton.isSelected()) {\n-      factions.add(Faction.UEF);\n-    }\n-    if (aeonButton.isSelected()) {\n-      factions.add(Faction.AEON);\n-    }\n-    if (cybranButton.isSelected()) {\n-      factions.add(Faction.CYBRAN);\n-    }\n-    if (seraphimButton.isSelected()) {\n-      factions.add(Faction.SERAPHIM);\n-    }\n+    preferencesService.getPreferences().getMatchmaker().getFactions().setAll(factions);\n+    preferencesService.storeInBackground();\n \n     teamMatchmakingService.sendFactionSelection(factions);\n-\n     refreshingLabel.setVisible(true);\n   }\n \n   private void selectFactionsBasedOnParty() {\n-    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n-    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n-    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n-    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+    List<Faction> factions = teamMatchmakingService.getParty().getMembers().stream()\n+        .filter(m -> m.getPlayer().getId() == player.getId())\n+        .findFirst()\n+        .map(PartyMember::getFactions)\n+        .orElse(List.of());\n+    selectFactions(factions);\n   }\n \n-  private boolean isFactionSelectedInParty(Faction faction) {\n-    return teamMatchmakingService.getParty().getMembers().stream()\n-        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  private void selectFactions(List<Faction> factions) {\n+    factionsToButtons.forEach((faction, toggleButton) ->\n+        toggleButton.setSelected(factions.contains(faction)));\n   }\n \n   private void createChannelTab(String channelName) {\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 577f58c8..0bb9235d 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -300,7 +301,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   private void createChannelTab(String channelName) {\n     matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n     matchmakingChatController.setChannel(channelName);\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0bb9235d..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -299,9 +307,9 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void createChannelTab(String channelName) {\n-    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n-    matchmakingChatController.setChannel(channelName);\n     JavaFxUtil.runLater(() -> {\n+      matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+      matchmakingChatController.setChannel(channelName);\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n", "next_change": {"commit": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..3459df5a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -318,7 +320,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n     ChatMessage message = event.getMessage();\n-    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n       JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n     }\n   }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 3459df5a..298b1efa 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -326,8 +327,8 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private synchronized void renderQueues() {\n-    List<MatchmakingQueue> queues = new ArrayList<>(teamMatchmakingService.getMatchmakingQueues());\n-    queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n", "next_change": {"commit": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 298b1efa..f49035ec 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -333,7 +348,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n+      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex f49035ec..4e72f938 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -320,37 +348,41 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void selectFactions(List<Faction> factions) {\n-    factionsToButtons.forEach((faction, toggleButton) ->\n-        toggleButton.setSelected(factions.contains(faction)));\n+    factionsToButtons.forEach((faction, toggleButton) -> toggleButton.setSelected(factions.contains(faction)));\n   }\n \n   private void createChannelTab(String channelName) {\n+    chatService.joinChannel(channelName);\n+    ChatChannel chatChannel = chatService.getOrCreateChannel(channelName);\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChatChannel(chatChannel);\n     JavaFxUtil.runLater(() -> {\n-      matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n-      matchmakingChatController.setChannel(channelName);\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n   }\n \n-  @Subscribe\n-  public void onChatMessage(ChatMessageEvent event) {\n-    ChatMessage message = event.getMessage();\n-    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n-      JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n-    }\n-  }\n-\n   private synchronized void renderQueues() {\n-    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n-    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getTeamSize).thenComparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n+      controller.getRoot()\n+          .prefWidthProperty()\n+          .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n   }\n+\n+  public void onSearchButtonClicked() {\n+    if (searchButton.isSelected()) {\n+      teamMatchmakingService.joinQueues()\n+          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+    } else {\n+      teamMatchmakingService.leaveQueues();\n+    }\n+  }\n }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 4e72f938..a1c06dc1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -374,13 +376,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n           .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n-    JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n+    fxApplicationThreadExecutor.execute(() -> queuePane.getChildren().setAll(queueCards));\n   }\n \n   public void onSearchButtonClicked() {\n     if (searchButton.isSelected()) {\n       teamMatchmakingService.joinQueues()\n-          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+          .thenAcceptAsync(searchButton::setSelected, fxApplicationThreadExecutor);\n     } else {\n       teamMatchmakingService.leaveQueues();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NDg1Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536364852", "body": "As stated earlier, this should be outsourced into a dedicated function", "bodyText": "As stated earlier, this should be outsourced into a dedicated function", "bodyHTML": "<p dir=\"auto\">As stated earlier, this should be outsourced into a dedicated function</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:35:50Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  private MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.isEmpty(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+        teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1)\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        else\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    });\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+    }, teamMatchmakingService.getParty().ownerProperty()));\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    Dialog dialog = uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.setPartyFactions(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    JavaFxUtil.assertApplicationThread();\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    chatTabPane.getTabs().clear();\n+    chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()))) {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 382577d4..fa6baed8 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -255,18 +262,19 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void createChannelTab(String channelName) {\n-    JavaFxUtil.assertApplicationThread();\n     matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n     matchmakingChatController.setChannel(channelName);\n-    chatTabPane.getTabs().clear();\n-    chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n   }\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n-      if (message.getSource().equals(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()))) {\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n         matchmakingChatController.onChatMessage(message);\n       }\n     });\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fa6baed8..382577d4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -262,19 +255,18 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void createChannelTab(String channelName) {\n+    JavaFxUtil.assertApplicationThread();\n     matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n     matchmakingChatController.setChannel(channelName);\n-    Platform.runLater(() -> {\n-      chatTabPane.getTabs().clear();\n-      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n-    });\n+    chatTabPane.getTabs().clear();\n+    chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n   }\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n-      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+      if (message.getSource().equals(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()))) {\n         matchmakingChatController.onChatMessage(message);\n       }\n     });\n", "next_change": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 382577d4..78213393 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -255,18 +262,19 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void createChannelTab(String channelName) {\n-    JavaFxUtil.assertApplicationThread();\n     matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n     matchmakingChatController.setChannel(channelName);\n-    chatTabPane.getTabs().clear();\n-    chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n   }\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n     Platform.runLater(() -> {\n       ChatMessage message = event.getMessage();\n-      if (message.getSource().equals(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()))) {\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n         matchmakingChatController.onChatMessage(message);\n       }\n     });\n", "next_change": {"commit": "2824223ed76fb452d6886470f5380f599cec4b93", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 78213393..1f76931b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -280,11 +300,11 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     });\n   }\n \n-  @Subscribe\n-  public void onQueuesAdded(QueuesAddedEvent event) {\n+  private synchronized void renderQueues() {\n     Platform.runLater(() -> {\n       List<MatchmakingQueue> queues = teamMatchmakingService.getMatchmakingQueues();\n       queueBox.getChildren().clear();\n+      queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n       queues.forEach(queue -> {\n         MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n         controller.setQueue(queue);\n", "next_change": {"commit": "41d3283903944aac66f95760c3be06e378dc8aa5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 1f76931b..12344cbf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -302,14 +310,16 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n \n   private synchronized void renderQueues() {\n     Platform.runLater(() -> {\n-      List<MatchmakingQueue> queues = teamMatchmakingService.getMatchmakingQueues();\n-      queueBox.getChildren().clear();\n-      queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n-      queues.forEach(queue -> {\n-        MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n-        controller.setQueue(queue);\n-        queueBox.getChildren().add(controller.getRoot());\n-      });\n+      List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n+      synchronized (queues) {\n+        queueBox.getChildren().clear();\n+        queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+        queues.forEach(queue -> {\n+          MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n+          controller.setQueue(queue);\n+          queueBox.getChildren().add(controller.getRoot());\n+        });\n+      }\n     });\n   }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 382577d4..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -255,33 +289,34 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void createChannelTab(String channelName) {\n-    JavaFxUtil.assertApplicationThread();\n     matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n     matchmakingChatController.setChannel(channelName);\n-    chatTabPane.getTabs().clear();\n-    chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n   }\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n-    Platform.runLater(() -> {\n-      ChatMessage message = event.getMessage();\n-      if (message.getSource().equals(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()))) {\n-        matchmakingChatController.onChatMessage(message);\n-      }\n-    });\n+    ChatMessage message = event.getMessage();\n+    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+      Platform.runLater(() -> matchmakingChatController.onChatMessage(message));\n+    }\n   }\n \n-  @Subscribe\n-  public void onQueuesAdded(QueuesAddedEvent event) {\n+  private void renderQueues() {\n     Platform.runLater(() -> {\n-      List<MatchmakingQueue> queues = teamMatchmakingService.getMatchmakingQueues();\n-      queueBox.getChildren().clear();\n-      queues.forEach(queue -> {\n-        MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n-        controller.setQueue(queue);\n-        queueBox.getChildren().add(controller.getRoot());\n-      });\n+      List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n+      synchronized (queues) {\n+        queueBox.getChildren().clear();\n+        queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+        queues.forEach(queue -> {\n+          MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n+          controller.setQueue(queue);\n+          queueBox.getChildren().add(controller.getRoot());\n+        });\n+      }\n     });\n   }\n }\n", "next_change": {"commit": "8d66f9a7f480f5003041e59147024e5d27c385d2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fbafe994..a529f5f5 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -301,20 +310,20 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public void onChatMessage(ChatMessageEvent event) {\n     ChatMessage message = event.getMessage();\n     if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n-      Platform.runLater(() -> matchmakingChatController.onChatMessage(message));\n+      JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n     }\n   }\n \n   private void renderQueues() {\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n-        queueBox.getChildren().clear();\n+        queuePane.getChildren().clear();\n         queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n         queues.forEach(queue -> {\n           MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n           controller.setQueue(queue);\n-          queueBox.getChildren().add(controller.getRoot());\n+          queuePane.getChildren().add(controller.getRoot());\n         });\n       }\n     });\n", "next_change": {"commit": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex a529f5f5..a2051e0f 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -317,12 +318,14 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   private void renderQueues() {\n     JavaFxUtil.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n+      int queuesPerRow = Math.min(queues.size(), 4);\n       synchronized (queues) {\n         queuePane.getChildren().clear();\n         queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n         queues.forEach(queue -> {\n           MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n           controller.setQueue(queue);\n+          controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n           queuePane.getChildren().add(controller.getRoot());\n         });\n       }\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex a2051e0f..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -315,20 +323,16 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     }\n   }\n \n-  private void renderQueues() {\n-    JavaFxUtil.runLater(() -> {\n-      List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n-      int queuesPerRow = Math.min(queues.size(), 4);\n-      synchronized (queues) {\n-        queuePane.getChildren().clear();\n-        queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n-        queues.forEach(queue -> {\n-          MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n-          controller.setQueue(queue);\n-          controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n-          queuePane.getChildren().add(controller.getRoot());\n-        });\n-      }\n-    });\n+  private synchronized void renderQueues() {\n+    List<MatchmakingQueue> queues = new ArrayList<>(teamMatchmakingService.getMatchmakingQueues());\n+    queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+    int queuesPerRow = Math.min(queues.size(), 4);\n+    List<VBox> queueCards = queues.stream().map(queue -> {\n+      MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n+      controller.setQueue(queue);\n+      controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n+      return controller.getRoot();\n+    }).collect(Collectors.toList());\n+    JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n   }\n }\n", "next_change": {"commit": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..f49035ec 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -318,19 +336,19 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n     ChatMessage message = event.getMessage();\n-    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n       JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n     }\n   }\n \n   private synchronized void renderQueues() {\n-    List<MatchmakingQueue> queues = new ArrayList<>(teamMatchmakingService.getMatchmakingQueues());\n-    queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n+      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex f49035ec..4e72f938 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -320,37 +348,41 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void selectFactions(List<Faction> factions) {\n-    factionsToButtons.forEach((faction, toggleButton) ->\n-        toggleButton.setSelected(factions.contains(faction)));\n+    factionsToButtons.forEach((faction, toggleButton) -> toggleButton.setSelected(factions.contains(faction)));\n   }\n \n   private void createChannelTab(String channelName) {\n+    chatService.joinChannel(channelName);\n+    ChatChannel chatChannel = chatService.getOrCreateChannel(channelName);\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChatChannel(chatChannel);\n     JavaFxUtil.runLater(() -> {\n-      matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n-      matchmakingChatController.setChannel(channelName);\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n   }\n \n-  @Subscribe\n-  public void onChatMessage(ChatMessageEvent event) {\n-    ChatMessage message = event.getMessage();\n-    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n-      JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n-    }\n-  }\n-\n   private synchronized void renderQueues() {\n-    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n-    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getTeamSize).thenComparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n+      controller.getRoot()\n+          .prefWidthProperty()\n+          .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n   }\n+\n+  public void onSearchButtonClicked() {\n+    if (searchButton.isSelected()) {\n+      teamMatchmakingService.joinQueues()\n+          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+    } else {\n+      teamMatchmakingService.leaveQueues();\n+    }\n+  }\n }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 4e72f938..a1c06dc1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -374,13 +376,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n           .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n-    JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n+    fxApplicationThreadExecutor.execute(() -> queuePane.getChildren().setAll(queueCards));\n   }\n \n   public void onSearchButtonClicked() {\n     if (searchButton.isSelected()) {\n       teamMatchmakingService.joinQueues()\n-          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+          .thenAcceptAsync(searchButton::setSelected, fxApplicationThreadExecutor);\n     } else {\n       teamMatchmakingService.leaveQueues();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTAzMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365030", "body": "If not needed remove Initializing bean or use `@RequiredArgsConstructor` and do all the current constructor logic here.", "bodyText": "If not needed remove Initializing bean or use @RequiredArgsConstructor and do all the current constructor logic here.", "bodyHTML": "<p dir=\"auto\">If not needed remove Initializing bean or use <code>@RequiredArgsConstructor</code> and do all the current constructor logic here.</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:36:12Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..917793a2 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -78,11 +79,6 @@ public class TeamMatchmakingService implements InitializingBean {\n   private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n   private boolean queuesAdded = false;\n \n-  @Override\n-  public void afterPropertiesSet() throws Exception {\n-\n-  }\n-\n   public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n     this.fafServerAccessor = fafServerAccessor;\n     this.playerService = playerService;\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 917793a2..24815e3a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -79,6 +78,11 @@ public class TeamMatchmakingService {\n   private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n   private boolean queuesAdded = false;\n \n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+\n+  }\n+\n   public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n     this.fafServerAccessor = fafServerAccessor;\n     this.playerService = playerService;\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..03df2d04 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -78,11 +78,6 @@ public class TeamMatchmakingService implements InitializingBean {\n   private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n   private boolean queuesAdded = false;\n \n-  @Override\n-  public void afterPropertiesSet() throws Exception {\n-\n-  }\n-\n   public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n     this.fafServerAccessor = fafServerAccessor;\n     this.playerService = playerService;\n", "next_change": {"commit": "3e0e68d82855851a4ab0aca69a06418550486f29", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 03df2d04..12ec106b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -73,10 +76,13 @@ public class TeamMatchmakingService {\n   private final Party party;\n   @Getter\n   private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  @Getter\n+  private final ObservableSet<Player> playersInGame = FXCollections.observableSet();\n   private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n \n   private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n   private boolean queuesAdded = false;\n+  private final BooleanProperty currentlyInQueue = new SimpleBooleanProperty();\n \n   public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n     this.fafServerAccessor = fafServerAccessor;\n", "next_change": {"commit": "2824223ed76fb452d6886470f5380f599cec4b93", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 12ec106b..a3f7dc09 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -81,7 +82,7 @@ public class TeamMatchmakingService {\n   private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n \n   private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n-  private boolean queuesAdded = false;\n+  private final BooleanProperty queuesAdded = new SimpleBooleanProperty(false);\n   private final BooleanProperty currentlyInQueue = new SimpleBooleanProperty();\n \n   public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n", "next_change": {"commit": "41d3283903944aac66f95760c3be06e378dc8aa5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex a3f7dc09..ed60fc16 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -82,7 +82,7 @@ public class TeamMatchmakingService {\n   private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n \n   private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n-  private final BooleanProperty queuesAdded = new SimpleBooleanProperty(false);\n+  private final BooleanProperty queuesReadyForUpdate = new SimpleBooleanProperty(false);\n   private final BooleanProperty currentlyInQueue = new SimpleBooleanProperty();\n \n   public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..ed60fc16 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -73,15 +77,13 @@ public class TeamMatchmakingService implements InitializingBean {\n   private final Party party;\n   @Getter\n   private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  @Getter\n+  private final ObservableSet<Player> playersInGame = FXCollections.observableSet();\n   private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n \n   private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n-  private boolean queuesAdded = false;\n-\n-  @Override\n-  public void afterPropertiesSet() throws Exception {\n-\n-  }\n+  private final BooleanProperty queuesReadyForUpdate = new SimpleBooleanProperty(false);\n+  private final BooleanProperty currentlyInQueue = new SimpleBooleanProperty();\n \n   public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n     this.fafServerAccessor = fafServerAccessor;\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex ed60fc16..2c3e17a1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -76,17 +77,16 @@ public class TeamMatchmakingService {\n   @Getter\n   private final Party party;\n   @Getter\n-  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n-  @Getter\n-  private final ObservableSet<Player> playersInGame = FXCollections.observableSet();\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.synchronizedObservableList(FXCollections.observableArrayList());\n+  private final ReadOnlyBooleanWrapper partyMembersNotReady;\n+  private final ObservableSet<Player> playersInGame;\n   private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n \n   private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n-  private final BooleanProperty queuesReadyForUpdate = new SimpleBooleanProperty(false);\n   private final BooleanProperty currentlyInQueue = new SimpleBooleanProperty();\n+  private final InvalidationListener queueJoinInvalidationListener;\n \n-  public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n-    this.fafServerAccessor = fafServerAccessor;\n+  public TeamMatchmakingService(PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n     this.playerService = playerService;\n     this.notificationService = notificationService;\n     this.preferencesService = preferencesService;\n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 2c3e17a1..f1e38e77 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -86,6 +89,8 @@ public class TeamMatchmakingService {\n   private final BooleanProperty currentlyInQueue = new SimpleBooleanProperty();\n   private final InvalidationListener queueJoinInvalidationListener;\n \n+  private CompletableFuture<Void> matchmakingGameFuture;\n+\n   public TeamMatchmakingService(PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n     this.playerService = playerService;\n     this.notificationService = notificationService;\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex f1e38e77..1d09bc81 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -91,35 +104,37 @@ public class TeamMatchmakingService implements InitializingBean {\n \n   private CompletableFuture<Void> matchmakingGameFuture;\n \n-  public TeamMatchmakingService(PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n+  public TeamMatchmakingService(PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafApiAccessor fafApiAccessor, FafServerAccessor fafServerAccessor, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService, MatchmakerMapper matchmakerMapper) {\n     this.playerService = playerService;\n     this.notificationService = notificationService;\n     this.preferencesService = preferencesService;\n-    this.fafService = fafService;\n+    this.fafApiAccessor = fafApiAccessor;\n+    this.fafServerAccessor = fafServerAccessor;\n     this.eventBus = eventBus;\n     this.i18n = i18n;\n     this.taskScheduler = taskScheduler;\n     this.gameService = gameService;\n+    this.matchmakerMapper = matchmakerMapper;\n \n-    fafService.addOnMessageListener(PartyInvite.class, this::onPartyInvite);\n-    fafService.addOnMessageListener(PartyKick.class, this::onPartyKicked);\n-    fafService.addOnMessageListener(PartyInfo.class, this::onPartyInfo);\n-    fafService.addOnMessageListener(SearchInfo.class, this::onSearchInfoMessage);\n-    fafService.addOnMessageListener(MatchmakerMatchFoundResponse.class, this::onMatchFoundMessage);\n-    fafService.addOnMessageListener(MatchmakerMatchCancelledResponse.class, this::onMatchCancelledMessage);\n-    fafService.addOnMessageListener(GameLaunchResponse.class, this::onGameLaunchMessage);\n-    fafService.addOnMessageListener(MatchmakerInfo.class, this::onMatchmakerInfo);\n+    fafServerAccessor.addEventListener(PartyInvite.class, this::onPartyInvite);\n+    fafServerAccessor.addEventListener(PartyKick.class, this::onPartyKicked);\n+    fafServerAccessor.addEventListener(PartyInfo.class, this::onPartyInfo);\n+    fafServerAccessor.addEventListener(SearchInfo.class, this::onSearchInfoMessage);\n+    fafServerAccessor.addEventListener(MatchmakerMatchFoundResponse.class, this::onMatchFoundMessage);\n+    fafServerAccessor.addEventListener(MatchmakerMatchCancelledResponse.class, this::onMatchCancelledMessage);\n+    fafServerAccessor.addEventListener(GameLaunchResponse.class, this::onGameLaunchMessage);\n+    fafServerAccessor.addEventListener(MatchmakerInfo.class, this::onMatchmakerInfo);\n \n-    party = new Party();\n+    party = new PartyBean();\n \n     playersInGame = FXCollections.observableSet();\n     partyMembersNotReady = new ReadOnlyBooleanWrapper();\n \n     partyMembersNotReady.bind(Bindings.createBooleanBinding(() -> !playersInGame.isEmpty(), playersInGame));\n \n-    queueJoinInvalidationListener = observable -> currentlyInQueue.set(matchmakingQueues.stream().anyMatch(MatchmakingQueue::isJoined));\n+    queueJoinInvalidationListener = observable -> currentlyInQueue.set(matchmakerQueues.stream().anyMatch(MatchmakerQueueBean::isJoined));\n \n-    JavaFxUtil.attachListToMap(matchmakingQueues, queueIdToQueue);\n+    JavaFxUtil.attachListToMap(matchmakerQueues, queueIdToQueue);\n   }\n \n   @Override\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 1d09bc81..f6d586dd 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -125,20 +123,10 @@ public class TeamMatchmakingService implements InitializingBean {\n     fafServerAccessor.addEventListener(GameLaunchResponse.class, this::onGameLaunchMessage);\n     fafServerAccessor.addEventListener(MatchmakerInfo.class, this::onMatchmakerInfo);\n \n-    party = new PartyBean();\n-\n-    playersInGame = FXCollections.observableSet();\n-    partyMembersNotReady = new ReadOnlyBooleanWrapper();\n-\n     partyMembersNotReady.bind(Bindings.createBooleanBinding(() -> !playersInGame.isEmpty(), playersInGame));\n \n-    queueJoinInvalidationListener = observable -> currentlyInQueue.set(matchmakerQueues.stream().anyMatch(MatchmakerQueueBean::isJoined));\n-\n     JavaFxUtil.attachListToMap(matchmakerQueues, queueIdToQueue);\n-  }\n \n-  @Override\n-  public void afterPropertiesSet() throws Exception {\n     eventBus.register(this);\n   }\n \n", "next_change": {"commit": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex f6d586dd..487e1c23 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -123,7 +126,7 @@ public class TeamMatchmakingService implements InitializingBean {\n     fafServerAccessor.addEventListener(GameLaunchResponse.class, this::onGameLaunchMessage);\n     fafServerAccessor.addEventListener(MatchmakerInfo.class, this::onMatchmakerInfo);\n \n-    partyMembersNotReady.bind(Bindings.createBooleanBinding(() -> !playersInGame.isEmpty(), playersInGame));\n+    partyMembersNotReady.bind(playersInGame.emptyProperty().map(empty -> !empty));\n \n     JavaFxUtil.attachListToMap(matchmakerQueues, queueIdToQueue);\n \n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 487e1c23..b26d6b19 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -97,64 +101,117 @@ public class TeamMatchmakingService implements InitializingBean {\n   private final I18n i18n;\n   private final TaskScheduler taskScheduler;\n   private final GameService gameService;\n+  private final JavaFxService javaFxService;\n   private final MatchmakerMapper matchmakerMapper;\n \n   @Getter\n   private final PartyBean party = new PartyBean();\n+  private final ObservableMap<String, MatchmakerQueueBean> nameToQueue = FXCollections.synchronizedObservableMap(FXCollections.observableHashMap());\n   @Getter\n-  private final ObservableList<MatchmakerQueueBean> matchmakerQueues = FXCollections.observableArrayList();\n-  private final ObservableMap<Integer, MatchmakerQueueBean> queueIdToQueue = FXCollections.synchronizedObservableMap(FXCollections.observableHashMap());\n+  private final ObservableList<MatchmakerQueueBean> queues = JavaFxUtil.attachListToMap(FXCollections.synchronizedObservableList(FXCollections.observableArrayList(queue -> new Observable[]{queue.joinedProperty()})), nameToQueue);\n   private final ReadOnlyBooleanWrapper partyMembersNotReady = new ReadOnlyBooleanWrapper();\n   private final SetProperty<PlayerBean> playersInGame = new SimpleSetProperty<>(FXCollections.observableSet());\n   private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n \n-  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private final AtomicBoolean matchFoundAndWaitingForGameLaunch = new AtomicBoolean();\n   private final BooleanProperty currentlyInQueue = new SimpleBooleanProperty();\n-  private final InvalidationListener queueJoinInvalidationListener = observable -> currentlyInQueue.set(matchmakerQueues.stream()\n-      .anyMatch(MatchmakerQueueBean::isJoined));\n \n   private CompletableFuture<Void> matchmakingGameFuture;\n \n   @Override\n   public void afterPropertiesSet() throws Exception {\n-    fafServerAccessor.addEventListener(PartyInvite.class, this::onPartyInvite);\n-    fafServerAccessor.addEventListener(PartyKick.class, this::onPartyKicked);\n-    fafServerAccessor.addEventListener(PartyInfo.class, this::onPartyInfo);\n     fafServerAccessor.addEventListener(SearchInfo.class, this::onSearchInfoMessage);\n-    fafServerAccessor.addEventListener(MatchmakerMatchFoundResponse.class, this::onMatchFoundMessage);\n-    fafServerAccessor.addEventListener(MatchmakerMatchCancelledResponse.class, this::onMatchCancelledMessage);\n     fafServerAccessor.addEventListener(GameLaunchResponse.class, this::onGameLaunchMessage);\n-    fafServerAccessor.addEventListener(MatchmakerInfo.class, this::onMatchmakerInfo);\n \n-    partyMembersNotReady.bind(playersInGame.emptyProperty().map(empty -> !empty));\n+    queues.addListener((SimpleInvalidationListener) () -> currentlyInQueue.set(queues.stream()\n+        .anyMatch(MatchmakerQueueBean::isJoined)));\n+\n+    fafServerAccessor.getEvents(PartyInfo.class)\n+        .publishOn(javaFxService.getFxApplicationScheduler())\n+        .doOnNext(this::onPartyInfo)\n+        .doOnError(throwable -> log.error(\"Error processing party info\", throwable))\n+        .retry()\n+        .subscribe();\n+\n+    fafServerAccessor.getEvents(PartyKick.class)\n+        .publishOn(javaFxService.getFxApplicationScheduler())\n+        .doOnNext(message -> initializeParty())\n+        .doOnError(throwable -> log.error(\"Error processing party kick\", throwable))\n+        .retry()\n+        .subscribe();\n+\n+    fafServerAccessor.getEvents(PartyInvite.class)\n+        .map(message -> playerService.getPlayerByIdIfOnline(message.getSender()))\n+        .flatMap(Mono::justOrEmpty)\n+        .doOnNext(this::sendInviteNotifications)\n+        .doOnError(throwable -> log.error(\"Error processing invite\", throwable))\n+        .retry()\n+        .subscribe();\n+\n+    fafServerAccessor.getEvents(MatchmakerMatchFoundResponse.class)\n+        .doOnNext(ignored -> matchFoundAndWaitingForGameLaunch.set(true))\n+        .doOnNext(ignored -> notifyMatchFound())\n+        .publishOn(javaFxService.getFxApplicationScheduler())\n+        .doOnNext(this::setFoundLabelForQueue)\n+        .doOnNext(ignored -> queues.forEach(matchmakingQueue -> matchmakingQueue.setJoined(false)))\n+        .publishOn(javaFxService.getSingleScheduler())\n+        .doOnError(throwable -> log.error(\"Error processing found response\", throwable))\n+        .retry()\n+        .subscribe();\n+\n+    fafServerAccessor.getEvents(MatchmakerMatchCancelledResponse.class)\n+        .publishOn(javaFxService.getFxApplicationScheduler())\n+        .doOnNext(ignored -> changeLabelForQueues(MatchingStatus.MATCH_CANCELLED))\n+        .publishOn(javaFxService.getSingleScheduler())\n+        .doOnError(throwable -> log.error(\"Error handling cancelled response\", throwable))\n+        .retry()\n+        .subscribe(ignored -> {\n+          matchFoundAndWaitingForGameLaunch.set(false);\n+          stopMatchMakerLaunch();\n+        });\n \n-    JavaFxUtil.attachListToMap(matchmakerQueues, queueIdToQueue);\n+    fafServerAccessor.getEvents(MatchmakerInfo.class)\n+        .flatMapIterable(MatchmakerInfo::getQueues)\n+        .concatMap(matchmakerQueue -> Mono.zip(Mono.just(matchmakerQueue), Mono.justOrEmpty(nameToQueue.get(matchmakerQueue.getName()))\n+            .switchIfEmpty(getQueueFromApi(matchmakerQueue.getName()))))\n+        .publishOn(javaFxService.getFxApplicationScheduler())\n+        .map(TupleUtils.function(matchmakerMapper::update))\n+        .doOnError(throwable -> log.error(\"Error updating queue\", throwable))\n+        .retry()\n+        .subscribe();\n+\n+    partyMembersNotReady.bind(playersInGame.emptyProperty().map(empty -> !empty));\n \n     eventBus.register(this);\n   }\n \n-  @VisibleForTesting\n-  protected void onMatchmakerInfo(MatchmakerInfo message) {\n-    message.getQueues().forEach(this::updateOrCreateQueue);\n+  private void sendInviteNotifications(PlayerBean player) {\n+    ActionCallback callback = event -> this.acceptPartyInvite(player);\n+\n+    notificationService.addNotification(new TransientNotification(i18n.get(\"teammatchmaking.notification.invite.title\"), i18n.get(\"teammatchmaking.notification.invite.message\", player.getUsername()), IdenticonUtil.createIdenticon(player.getId()), callback));\n+    notificationService.addNotification(new PersistentNotification(i18n.get(\"teammatchmaking.notification.invite.message\", player.getUsername()), Severity.INFO, Collections.singletonList(new Action(i18n.get(\"teammatchmaking.notification.invite.join\"), callback))));\n   }\n \n-  private synchronized void updateOrCreateQueue(MatchmakerInfo.MatchmakerQueue messageQueue) {\n-    matchmakerQueues.stream()\n-        .filter(matchmakingQueue -> Objects.equals(matchmakingQueue.getTechnicalName(), messageQueue.getName()))\n-        .findFirst()\n-        .ifPresentOrElse(matchmakerQueue -> matchmakerMapper.update(messageQueue, matchmakerQueue),\n-            () -> getQueueFromApi(messageQueue.getName()).thenAccept(matchmakerQueueFromApi ->\n-                matchmakerQueueFromApi.ifPresent(matchmakerQueue -> {\n-                  queueIdToQueue.put(matchmakerQueue.getId(), matchmakerQueue);\n-                  matchmakerQueue.joinedProperty().addListener(queueJoinInvalidationListener);\n-                  matchmakerMapper.update(messageQueue, matchmakerQueue);\n-                  JavaFxUtil.addAndTriggerListener(gameService.getGames(), (InvalidationListener) observable -> updateMatchmakerGameCount(matchmakerQueue));\n-                })));\n+  private void changeLabelForQueues(MatchingStatus matchCancelled) {\n+    queues.stream()\n+        .filter(matchmakingQueue -> matchmakingQueue.getMatchingStatus() != null)\n+        .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(matchCancelled, Duration.ofSeconds(60), taskScheduler));\n+  }\n+\n+  private void notifyMatchFound() {\n+    notificationService.addNotification(new TransientNotification(i18n.get(\"teammatchmaking.notification.matchFound.title\"), i18n.get(\"teammatchmaking.notification.matchFound.message\")));\n+  }\n+\n+  private void setFoundLabelForQueue(MatchmakerMatchFoundResponse message) {\n+    queues.stream()\n+        .filter(matchmakingQueue -> Objects.equals(matchmakingQueue.getTechnicalName(), message.getQueueName()))\n+        .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(60), taskScheduler));\n   }\n \n   private void updateMatchmakerGameCount(MatchmakerQueueBean matchmakerQueue) {\n     String leaderboard = matchmakerQueue.getLeaderboard().getTechnicalName();\n-    int activeGames = (int) gameService.getGames().stream()\n+    int activeGames = (int) gameService.getGames()\n+        .stream()\n         .filter(game -> GameStatus.CLOSED != game.getStatus())\n         .filter(game -> GameType.MATCHMAKER == game.getGameType())\n         .filter(game -> leaderboard.equals(game.getLeaderboard()))\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex b26d6b19..cfacc7b1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -219,90 +294,86 @@ public class TeamMatchmakingService implements InitializingBean {\n     matchmakerQueue.setActiveGames(activeGames);\n   }\n \n-  private Mono<MatchmakerQueueBean> getQueueFromApi(String queueTechnicalName) {\n+  private Mono<MatchmakerQueueBean> getQueueFromApi(MatchmakerInfo.MatchmakerQueue matchmakerQueue) {\n     ElideNavigatorOnCollection<MatchmakerQueue> navigator = ElideNavigator.of(MatchmakerQueue.class)\n         .collection()\n-        .setFilter(qBuilder().string(\"technicalName\").eq(queueTechnicalName));\n+        .setFilter(qBuilder().string(\"technicalName\").eq(matchmakerQueue.getName()));\n     return fafApiAccessor.getMany(navigator)\n         .next()\n         .map(dto -> matchmakerMapper.map(dto, new CycleAvoidingMappingContext()))\n+        .map(queue -> matchmakerMapper.update(matchmakerQueue, queue))\n+        .doOnNext(queue -> queue.setSelected(!matchmakerPrefs.getUnselectedQueueIds().contains(queue.getId())))\n         .doOnNext(queue -> JavaFxUtil.addAndTriggerListener(gameService.getGames(), (SimpleInvalidationListener) () -> updateMatchmakerGameCount(queue)))\n         .doOnNext(queue -> nameToQueue.put(queue.getTechnicalName(), queue));\n   }\n \n-  @VisibleForTesting\n-  protected void onSearchInfoMessage(SearchInfo message) {\n-    queues.stream()\n-        .filter(matchmakingQueue -> Objects.equals(matchmakingQueue.getTechnicalName(), message.getQueueName()))\n-        .forEach(matchmakingQueue -> {\n-          JavaFxUtil.runLater(() -> matchmakingQueue.setJoined(message.getState().equals(MatchmakerState.START)));\n-          leaveQueueTimeouts.forEach(f -> f.cancel(false));\n-\n-          if (message.getState().equals(MatchmakerState.START)) {\n-            party.getMembers()\n-                .stream()\n-                .filter(partyMember -> Objects.equals(partyMember.getPlayer(), playerService.getCurrentPlayer()))\n-                .findFirst()\n-                .ifPresent(member -> sendFactionSelection(member.getFactions()));\n-\n-            matchmakingGameFuture = gameService.startSearchMatchmaker();\n-          }\n-        });\n+  public CompletableFuture<Boolean> joinQueues() {\n+    if (gamePathInvalid()) {\n+      return CompletableFuture.completedFuture(false);\n+    }\n \n-    if (queues.stream().noneMatch(MatchmakerQueueBean::isJoined) && !matchFoundAndWaitingForGameLaunch.get()) {\n-      stopMatchMakerLaunch();\n+    if (gameService.isGameRunning()) {\n+      log.debug(\"Game is running, ignoring tmm queue join request\");\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.gameAlreadyRunning.message\");\n+      return CompletableFuture.completedFuture(false);\n     }\n-  }\n \n-  private void stopMatchMakerLaunch() {\n-    if (matchmakingGameFuture != null) {\n-      matchmakingGameFuture.cancel(false);\n+    if (!Objects.equals(party.getOwner(), playerService.getCurrentPlayer())) {\n+      log.debug(\"Not party owner cannot join queues\");\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.notPartyOwner.message\");\n+      return CompletableFuture.completedFuture(false);\n     }\n+\n+    return modService.getFeaturedMod(FAF.getTechnicalName())\n+        .toFuture()\n+        .thenCompose(featuredModBean -> gameService.updateGameIfNecessary(featuredModBean, Set.of()))\n+        .thenCompose(aVoid -> selectedQueues.stream()\n+            .map(this::joinQueue)\n+            .reduce((future1, future2) -> future1.thenCombine(future2, (result1, result2) -> result1 || result2))\n+            .orElse(CompletableFuture.completedFuture(false)))\n+        .exceptionally(throwable -> {\n+          throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+          log.error(\"Unable to join queues\", throwable);\n+          if (throwable instanceof NotifiableException notifiableException) {\n+            notificationService.addErrorNotification(notifiableException);\n+          } else {\n+            notificationService.addImmediateErrorNotification(throwable, \"teammatchmaking.couldNotStart\");\n+          }\n+          return false;\n+        });\n   }\n \n-  @VisibleForTesting\n-  protected void onGameLaunchMessage(GameLaunchResponse message) {\n-    if (message.getGameType() != GameType.MATCHMAKER) {\n+  public void leaveQueues() {\n+    if (!Objects.equals(party.getOwner(), playerService.getCurrentPlayer())) {\n+      log.debug(\"Not party owner cannot join queues\");\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.notPartyOwner.message\");\n       return;\n     }\n \n-    changeLabelForQueues(MatchingStatus.GAME_LAUNCHING);\n-\n-    matchFoundAndWaitingForGameLaunch.set(false);\n+    queues.stream().filter(queue -> queue.getMatchingStatus() == MatchingStatus.SEARCHING).forEach(this::leaveQueue);\n   }\n \n-  public CompletableFuture<Boolean> joinQueue(MatchmakerQueueBean queue) {\n-    if (gamePathInvalid()) {\n-      return CompletableFuture.completedFuture(false);\n-    }\n-\n-    if (gameService.isGameRunning()) {\n-      log.debug(\"Game is running, ignoring tmm queue join request\");\n-      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.gameAlreadyRunning.message\");\n+  private CompletableFuture<Boolean> joinQueue(MatchmakerQueueBean queue) {\n+    if (party.getMembers().size() > queue.getTeamSize()) {\n+      log.debug(\"Party of {} larger than queue size of {}, not queueing\", party.getMembers()\n+          .size(), queue.getTeamSize());\n       return CompletableFuture.completedFuture(false);\n     }\n \n     return mapService.downloadAllMatchmakerMaps(queue)\n-        .thenCompose(aVoid -> modService.getFeaturedMod(FAF.getTechnicalName()))\n-        .thenCompose(featuredModBean -> gameService.updateGameIfNecessary(featuredModBean, Set.of()))\n         .thenRun(() -> fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START))\n         .thenApply(aVoid -> true)\n         .exceptionally(throwable -> {\n           throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n-          log.error(\"Unable to join queue\", throwable);\n-          if (throwable instanceof NotifiableException) {\n-            notificationService.addErrorNotification((NotifiableException) throwable);\n-          } else {\n-            notificationService.addImmediateErrorNotification(throwable, \"game.start.couldNotStart\");\n-          }\n+          log.error(\"Unable to join queue `{}`\", queue.getTechnicalName(), throwable);\n+          notificationService.addImmediateErrorNotification(throwable, \"teammatchmaking.couldNotJoinQueue\", queue.getTechnicalName());\n+          queue.setMatchingStatus(null);\n           return false;\n         });\n   }\n \n-  public void leaveQueue(MatchmakerQueueBean queue) {\n+  private void leaveQueue(MatchmakerQueueBean queue) {\n     fafServerAccessor.gameMatchmaking(queue, MatchmakerState.STOP);\n-    leaveQueueTimeouts.add(taskScheduler.schedule(() -> JavaFxUtil.runLater(() -> queue.setJoined(false)), Instant.now()\n-        .plus(Duration.ofSeconds(5))));\n   }\n \n   public void onPartyInfo(PartyInfo message) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "44608046bbe5e7732abe4cbf9cdce2cb5791fa66", "committedDate": "2021-05-02 06:15:32 -0400", "message": "Increase match status timeout to match server (#2225)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "77464ec68ced4950682a6163d72b2123f3307ea9", "committedDate": "2021-06-20 06:53:49 -0400", "message": "Use hashmap to keep queues unique"}, {"oid": "ee7d2fa0b6afab275876b0cb339971656b9a5cc3", "committedDate": "2021-06-20 08:35:06 -0400", "message": "remove all queues on logout"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "bf9ea315633bd4e7f94c70134435b4e42869755e", "committedDate": "2022-01-20 20:24:17 -0500", "message": "Check if game is running before accepting invite (#2522)"}, {"oid": "329d5a52b01e0016cdf55c562d720771bab7ffe4", "committedDate": "2022-01-23 10:29:39 -0500", "message": "Use addWarnNotificaiton where possible (#2542)"}, {"oid": "e19777b53e5bdd7794aa39baa39e020c45c2f86b", "committedDate": "2022-04-10 14:48:15 -0400", "message": "Use game type to determine lobby mode (#2647)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "45b4328f626effb6f28b9bcc3efbf1a8844a6cfd", "committedDate": "2022-08-14 21:03:03 -0400", "message": "Download all matchmaker maps before joining queue (#2775)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "4c85e71fce1bdadb708feb3c32e21f8111c27a1f", "committedDate": "2023-04-23 11:44:10 -0400", "message": "Disable search button when in no queues"}, {"oid": "41541457063145c41eeba7566bbb609590ac4374", "committedDate": "2023-04-23 15:35:10 -0400", "message": "Ensure queue ui state is synced with server state"}, {"oid": "528297c88514ecc8f87127cfd79bbe064763a780", "committedDate": "2023-04-29 08:40:26 -0400", "message": "Clean up gradle and make launching class the spring boot class"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTM5MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365391", "body": "line breaks after the stream operators", "bodyText": "line breaks after the stream operators", "bodyHTML": "<p dir=\"auto\">line breaks after the stream operators</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:36:56Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+\n+  }\n+\n+  public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n+    this.fafServerAccessor = fafServerAccessor;\n+    this.playerService = playerService;\n+    this.notificationService = notificationService;\n+    this.preferencesService = preferencesService;\n+    this.fafService = fafService;\n+    this.eventBus = eventBus;\n+    this.i18n = i18n;\n+    this.taskScheduler = taskScheduler;\n+    this.gameService = gameService;\n+\n+    fafService.addOnMessageListener(PartyInviteMessage.class, this::onPartyInvite);\n+    fafService.addOnMessageListener(PartyKickedMessage.class, this::onPartyKicked);\n+    fafService.addOnMessageListener(PartyInfoMessage.class, this::onPartyInfo);\n+    fafService.addOnMessageListener(SearchInfoMessage.class, this::onSearchInfoMessage);\n+    fafService.addOnMessageListener(MatchFoundMessage.class, this::onMatchFoundMessage);\n+    fafService.addOnMessageListener(MatchCancelledMessage.class, this::onMatchCancelledMessage);\n+    fafService.addOnMessageListener(GameLaunchMessage.class, this::onGameLaunchMessage);\n+    fafService.connectionStateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == ConnectionState.DISCONNECTED) {\n+        Platform.runLater(() -> initParty(playerService.getCurrentPlayer().get()));\n+      }\n+    });\n+\n+    fafService.addOnMessageListener(MatchmakerInfoMessage.class, this::onMatchmakerInfo);\n+\n+    party = new Party();\n+\n+    playerService.currentPlayerProperty().addListener((obs, old, player) -> {\n+      if (party.getOwner() == null && party.getMembers().isEmpty() && player != null) {\n+        Platform.runLater(() -> initParty(player));\n+      }\n+    });\n+\n+    playerService.getCurrentPlayer().ifPresent(this::initParty);\n+  }\n+\n+  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+    List<CompletableFuture<?>> futures = new ArrayList<>();\n+    message.getQueues().forEach(remoteQueue -> {\n+      MatchmakingQueue localQueue = matchmakingQueues.stream()\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..917793a2 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -120,11 +116,14 @@ public class TeamMatchmakingService implements InitializingBean {\n     playerService.getCurrentPlayer().ifPresent(this::initParty);\n   }\n \n-  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+  @VisibleForTesting\n+  protected void onMatchmakerInfo(MatchmakerInfoMessage message) {\n     List<CompletableFuture<?>> futures = new ArrayList<>();\n     message.getQueues().forEach(remoteQueue -> {\n       MatchmakingQueue localQueue = matchmakingQueues.stream()\n-          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName()))\n+          .findFirst()\n+          .orElse(null);\n       if (localQueue == null) {\n         queuesAdded = true;\n         CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(remoteQueue.getQueueName());\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 917793a2..24815e3a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -116,14 +120,11 @@ public class TeamMatchmakingService {\n     playerService.getCurrentPlayer().ifPresent(this::initParty);\n   }\n \n-  @VisibleForTesting\n-  protected void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n     List<CompletableFuture<?>> futures = new ArrayList<>();\n     message.getQueues().forEach(remoteQueue -> {\n       MatchmakingQueue localQueue = matchmakingQueues.stream()\n-          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName()))\n-          .findFirst()\n-          .orElse(null);\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);\n       if (localQueue == null) {\n         queuesAdded = true;\n         CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(remoteQueue.getQueueName());\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..03df2d04 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -124,7 +119,9 @@ public class TeamMatchmakingService implements InitializingBean {\n     List<CompletableFuture<?>> futures = new ArrayList<>();\n     message.getQueues().forEach(remoteQueue -> {\n       MatchmakingQueue localQueue = matchmakingQueues.stream()\n-          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName()))\n+          .findFirst()\n+          .orElse(null);\n       if (localQueue == null) {\n         queuesAdded = true;\n         CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(remoteQueue.getQueueName());\n", "next_change": {"commit": "2824223ed76fb452d6886470f5380f599cec4b93", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 03df2d04..a3f7dc09 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -115,41 +122,47 @@ public class TeamMatchmakingService {\n     playerService.getCurrentPlayer().ifPresent(this::initParty);\n   }\n \n-  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+  @VisibleForTesting\n+  protected void onMatchmakerInfo(MatchmakerInfoMessage message) {\n     List<CompletableFuture<?>> futures = new ArrayList<>();\n-    message.getQueues().forEach(remoteQueue -> {\n-      MatchmakingQueue localQueue = matchmakingQueues.stream()\n-          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName()))\n-          .findFirst()\n-          .orElse(null);\n-      if (localQueue == null) {\n-        queuesAdded = true;\n-        CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(remoteQueue.getQueueName());\n-        futures.add(future);\n-        future.thenAccept(result -> result.ifPresent(\n-            matchmakingQueue -> {\n-              matchmakingQueues.add(matchmakingQueue);\n-              matchmakingQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n-              matchmakingQueue.setTeamSize(remoteQueue.getTeamSize());\n-              matchmakingQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n-              Platform.runLater(() -> matchmakingQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n-            }));\n-      } else {\n-        localQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n-        localQueue.setTeamSize(remoteQueue.getTeamSize());\n-        localQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n-        Platform.runLater(() -> localQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n-      }\n+\n+    message.getQueues().forEach(messageQueue -> {\n+      CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(messageQueue.getQueueName());\n+      futures.add(future);\n+      future.thenAccept(result -> result.ifPresent(\n+          matchmakingQueueFromApi -> copyInfoAndAddQueueIfNecessary(matchmakingQueueFromApi, messageQueue)));\n     });\n \n     CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[futures.size()])).thenRun(() -> {\n-      if (queuesAdded) {\n-        eventBus.post(new QueuesAddedEvent());\n-        queuesAdded = false;\n-      }\n+      queuesAdded.set(false);\n     });\n   }\n \n+  private synchronized void copyInfoAndAddQueueIfNecessary(MatchmakingQueue matchmakingQueueFromApi, MatchmakerQueue messageQueue) {\n+    MatchmakingQueue localQueue = matchmakingQueues.stream()\n+        .filter(q -> Objects.equals(q.getQueueName(), messageQueue.getQueueName()))\n+        .findFirst()\n+        .orElse(null);\n+    if (localQueue == null) {\n+      queuesAdded.set(true);\n+      matchmakingQueues.add(matchmakingQueueFromApi);\n+      matchmakingQueueFromApi.joinedProperty().addListener((observable, oldValue, newValue) -> {\n+        currentlyInQueue.set(matchmakingQueues.stream().anyMatch(MatchmakingQueue::isJoined));\n+      });\n+      copyQueueInfo(matchmakingQueueFromApi, messageQueue);\n+    } else {\n+      copyQueueInfo(localQueue, messageQueue);\n+    }\n+  }\n+\n+  private void copyQueueInfo(MatchmakingQueue queue, MatchmakerQueue messageQueue) {\n+    queue.setQueuePopTime(OffsetDateTime.parse(messageQueue.getQueuePopTime()).toInstant());\n+    queue.setTeamSize(messageQueue.getTeamSize());\n+    queue.setPartiesInQueue(messageQueue.getBoundary75s().size());\n+    Platform.runLater(() -> queue.setPlayersInQueue(messageQueue.getNumPlayers()));\n+  }\n+\n+  @VisibleForTesting\n   protected void onSearchInfoMessage(SearchInfoMessage message) {\n     matchmakingQueues.stream()\n         .filter(q -> Objects.equals(q.getQueueName(), message.getQueueName()))\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..ed60fc16 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -120,41 +122,52 @@ public class TeamMatchmakingService implements InitializingBean {\n     playerService.getCurrentPlayer().ifPresent(this::initParty);\n   }\n \n-  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+  @VisibleForTesting\n+  protected void onMatchmakerInfo(MatchmakerInfoMessage message) {\n     List<CompletableFuture<?>> futures = new ArrayList<>();\n-    message.getQueues().forEach(remoteQueue -> {\n-      MatchmakingQueue localQueue = matchmakingQueues.stream()\n-          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);\n-      if (localQueue == null) {\n-        queuesAdded = true;\n-        CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(remoteQueue.getQueueName());\n-        futures.add(future);\n-        future.thenAccept(result -> result.ifPresent(\n-            matchmakingQueue -> {\n-              matchmakingQueues.add(matchmakingQueue);\n-              matchmakingQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n-              matchmakingQueue.setTeamSize(remoteQueue.getTeamSize());\n-              matchmakingQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n-              Platform.runLater(() -> matchmakingQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n-            }));\n-      } else {\n-        localQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n-        localQueue.setTeamSize(remoteQueue.getTeamSize());\n-        localQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n-        Platform.runLater(() -> localQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n-      }\n+\n+    message.getQueues().forEach(messageQueue -> {\n+      CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(messageQueue.getQueueName());\n+      futures.add(future.thenCompose(result -> result.map(matchmakingQueue ->\n+          copyInfoAndAddQueueIfNecessary(matchmakingQueue, messageQueue))\n+          .orElseGet(() -> CompletableFuture.completedFuture(null))));\n     });\n \n     CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[futures.size()])).thenRun(() -> {\n-      if (queuesAdded) {\n-        eventBus.post(new QueuesAddedEvent());\n-        queuesAdded = false;\n-      }\n+      queuesReadyForUpdate.set(true);\n     });\n   }\n \n+  private synchronized CompletableFuture<Void> copyInfoAndAddQueueIfNecessary(MatchmakingQueue matchmakingQueueFromApi, MatchmakerQueue messageQueue) {\n+    MatchmakingQueue localQueue = matchmakingQueues.stream()\n+        .filter(q -> Objects.equals(q.getQueueName(), messageQueue.getQueueName()))\n+        .findFirst()\n+        .orElse(null);\n+    if (localQueue == null) {\n+      queuesReadyForUpdate.set(false);\n+      matchmakingQueues.add(matchmakingQueueFromApi);\n+      matchmakingQueueFromApi.joinedProperty().addListener((observable, oldValue, newValue) -> {\n+        currentlyInQueue.set(matchmakingQueues.stream().anyMatch(MatchmakingQueue::isJoined));\n+      });\n+      copyQueueInfo(matchmakingQueueFromApi, messageQueue);\n+    } else {\n+      copyQueueInfo(localQueue, messageQueue);\n+    }\n+    return CompletableFuture.completedFuture(null);\n+  }\n+\n+  private void copyQueueInfo(MatchmakingQueue queue, MatchmakerQueue messageQueue) {\n+    queue.setQueuePopTime(OffsetDateTime.parse(messageQueue.getQueuePopTime()).toInstant());\n+    queue.setTeamSize(messageQueue.getTeamSize());\n+    queue.setPartiesInQueue(messageQueue.getBoundary75s().size());\n+    Platform.runLater(() -> queue.setPlayersInQueue(messageQueue.getNumPlayers()));\n+  }\n+\n+  @VisibleForTesting\n   protected void onSearchInfoMessage(SearchInfoMessage message) {\n-    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueueName())).forEach(q -> {\n+    matchmakingQueues.stream()\n+        .filter(q -> Objects.equals(q.getQueueName(), message.getQueueName()))\n+        .forEach(q -> {\n           Platform.runLater(() -> {\n             q.setJoined(message.getState() == MatchmakingState.START);\n             leaveQueueTimeouts.forEach(f -> f.cancel(false));\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex ed60fc16..7372b682 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -168,7 +170,7 @@ public class TeamMatchmakingService {\n     matchmakingQueues.stream()\n         .filter(q -> Objects.equals(q.getQueueName(), message.getQueueName()))\n         .forEach(q -> {\n-          Platform.runLater(() -> {\n+          JavaFxUtil.runLater(() -> {\n             q.setJoined(message.getState() == MatchmakingState.START);\n             leaveQueueTimeouts.forEach(f -> f.cancel(false));\n           });\n", "next_change": {"commit": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 7372b682..d523b68a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -170,22 +170,22 @@ public class TeamMatchmakingService {\n     matchmakingQueues.stream()\n         .filter(q -> Objects.equals(q.getQueueName(), message.getQueueName()))\n         .forEach(q -> {\n-          JavaFxUtil.runLater(() -> {\n-            q.setJoined(message.getState() == MatchmakingState.START);\n-            leaveQueueTimeouts.forEach(f -> f.cancel(false));\n-          });\n-\n-          //TODO: check current state / other queues\n-          if (message.getState() == MatchmakingState.START) {\n-            gameService.startSearchMatchmaker();\n-\n-            Optional<PartyMember> ownPartyMember = party.getMembers().stream()\n-                .filter(m -> m.getPlayer().getId() == playerService.getCurrentPlayer().map(Player::getId).orElse(-1))\n-                .findFirst();\n-            ownPartyMember.ifPresent(m -> sendFactionSelection(m.getFactions()));\n-          }\n-        }\n-    );\n+              JavaFxUtil.runLater(() -> {\n+                q.setJoined(message.getState() == MatchmakingState.START);\n+                leaveQueueTimeouts.forEach(f -> f.cancel(false));\n+              });\n+\n+              //TODO: check current state / other queues\n+              if (message.getState() == MatchmakingState.START) {\n+                gameService.startSearchMatchmaker();\n+\n+                Optional<PartyMember> ownPartyMember = party.getMembers().stream()\n+                    .filter(m -> m.getPlayer().getId() == playerService.getCurrentPlayer().map(Player::getId).orElse(-1))\n+                    .findFirst();\n+                ownPartyMember.ifPresent(m -> sendFactionSelection(m.getFactions()));\n+              }\n+            }\n+        );\n \n     if (matchmakingQueues.stream()\n         .noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex d523b68a..2c3e17a1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -105,92 +105,73 @@ public class TeamMatchmakingService {\n     fafService.addOnMessageListener(GameLaunchMessage.class, this::onGameLaunchMessage);\n     fafService.connectionStateProperty().addListener((observable, oldValue, newValue) -> {\n       if (newValue == ConnectionState.DISCONNECTED) {\n-        initMyParty();\n+        initializeParty();\n       }\n     });\n-\n     fafService.addOnMessageListener(MatchmakerInfoMessage.class, this::onMatchmakerInfo);\n \n     party = new Party();\n \n-    this.gameService.getInOthersPartyProperty().bind(party.ownerProperty().isNotEqualTo(playerService.currentPlayerProperty()));\n-\n-    playerService.currentPlayerProperty().addListener((obs, old, player) -> {\n-      if (party.getOwner() == null && party.getMembers().isEmpty() && player != null) {\n-        initMyParty();\n+    playerService.currentPlayerProperty().addListener((observable, oldValue, newValue) -> {\n+      if (party.getOwner() == null && party.getMembers().isEmpty() && newValue != null) {\n+        initializeParty();\n       }\n     });\n \n-    playerService.getCurrentPlayer().ifPresent(player -> initMyParty());\n+    playersInGame = FXCollections.observableSet();\n+    partyMembersNotReady = new ReadOnlyBooleanWrapper();\n+\n+    partyMembersNotReady.bind(Bindings.createBooleanBinding(() -> !playersInGame.isEmpty(), playersInGame));\n+\n+    playerService.getCurrentPlayer().ifPresent(player -> initializeParty());\n+    queueJoinInvalidationListener = observable -> currentlyInQueue.set(matchmakingQueues.stream().anyMatch(MatchmakingQueue::isJoined));\n   }\n \n   @VisibleForTesting\n   protected void onMatchmakerInfo(MatchmakerInfoMessage message) {\n-    List<CompletableFuture<?>> futures = new ArrayList<>();\n-\n-    message.getQueues().forEach(messageQueue -> {\n-      CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(messageQueue.getQueueName());\n-      futures.add(future.thenCompose(result -> result.map(matchmakingQueue ->\n-          copyInfoAndAddQueueIfNecessary(matchmakingQueue, messageQueue))\n-          .orElseGet(() -> CompletableFuture.completedFuture(null))));\n-    });\n-\n-    CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[0])).thenRun(() -> {\n-      queuesReadyForUpdate.set(true);\n-    });\n+    message.getQueues().forEach(this::updateOrCreateQueue);\n   }\n \n-  private synchronized CompletableFuture<Void> copyInfoAndAddQueueIfNecessary(MatchmakingQueue matchmakingQueueFromApi, MatchmakerQueue messageQueue) {\n-    MatchmakingQueue localQueue = matchmakingQueues.stream()\n-        .filter(q -> Objects.equals(q.getQueueName(), messageQueue.getQueueName()))\n+  private synchronized void updateOrCreateQueue(MatchmakerQueue messageQueue) {\n+    matchmakingQueues.stream()\n+        .filter(matchmakingQueue -> Objects.equals(matchmakingQueue.getTechnicalName(), messageQueue.getQueueName()))\n         .findFirst()\n-        .orElse(null);\n-    if (localQueue == null) {\n-      queuesReadyForUpdate.set(false);\n-      matchmakingQueues.add(matchmakingQueueFromApi);\n-      matchmakingQueueFromApi.joinedProperty().addListener((observable, oldValue, newValue) -> {\n-        currentlyInQueue.set(matchmakingQueues.stream().anyMatch(MatchmakingQueue::isJoined));\n-      });\n-      copyQueueInfo(matchmakingQueueFromApi, messageQueue);\n-    } else {\n-      copyQueueInfo(localQueue, messageQueue);\n-    }\n-    return CompletableFuture.completedFuture(null);\n+        .ifPresentOrElse(matchmakingQueue -> updateQueueInfo(matchmakingQueue, messageQueue),\n+            () -> fafService.getMatchmakingQueue(messageQueue.getQueueName()).thenAccept(matchmakingQueueFromApi ->\n+                matchmakingQueueFromApi.ifPresent(apiQueue -> {\n+                  matchmakingQueues.add(apiQueue);\n+                  apiQueue.joinedProperty().addListener(queueJoinInvalidationListener);\n+                  updateQueueInfo(apiQueue, messageQueue);\n+                })));\n   }\n \n-  private void copyQueueInfo(MatchmakingQueue queue, MatchmakerQueue messageQueue) {\n+  private void updateQueueInfo(MatchmakingQueue queue, MatchmakerQueue messageQueue) {\n     queue.setQueuePopTime(OffsetDateTime.parse(messageQueue.getQueuePopTime()).toInstant());\n     queue.setTeamSize(messageQueue.getTeamSize());\n     queue.setPartiesInQueue(messageQueue.getBoundary75s().size());\n-    JavaFxUtil.runLater(() -> queue.setPlayersInQueue(messageQueue.getNumPlayers()));\n+    queue.setPlayersInQueue(messageQueue.getNumPlayers());\n   }\n \n   @VisibleForTesting\n   protected void onSearchInfoMessage(SearchInfoMessage message) {\n     matchmakingQueues.stream()\n-        .filter(q -> Objects.equals(q.getQueueName(), message.getQueueName()))\n-        .forEach(q -> {\n-              JavaFxUtil.runLater(() -> {\n-                q.setJoined(message.getState() == MatchmakingState.START);\n-                leaveQueueTimeouts.forEach(f -> f.cancel(false));\n-              });\n-\n-              //TODO: check current state / other queues\n+        .filter(matchmakingQueue -> Objects.equals(matchmakingQueue.getTechnicalName(), message.getQueueName()))\n+        .forEach(matchmakingQueue -> {\n+          matchmakingQueue.setJoined(message.getState() == MatchmakingState.START);\n+          leaveQueueTimeouts.forEach(f -> f.cancel(false));\n+\n               if (message.getState() == MatchmakingState.START) {\n                 gameService.startSearchMatchmaker();\n \n-                Optional<PartyMember> ownPartyMember = party.getMembers().stream()\n-                    .filter(m -> m.getPlayer().getId() == playerService.getCurrentPlayer().map(Player::getId).orElse(-1))\n-                    .findFirst();\n-                ownPartyMember.ifPresent(m -> sendFactionSelection(m.getFactions()));\n+                party.getMembers().stream()\n+                    .filter(partyMember -> Objects.equals(partyMember.getPlayer(), playerService.getCurrentPlayer().orElse(null)))\n+                    .findFirst()\n+                    .ifPresent(member -> sendFactionSelection(member.getFactions()));\n               }\n             }\n         );\n \n-    if (matchmakingQueues.stream()\n-        .noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n-        && message.getState() != MatchmakingState.START // catches same race condition\n-        && !matchFoundAndWaitingForGameLaunch) {\n+    if (matchmakingQueues.stream().noneMatch(MatchmakingQueue::isJoined) && !matchFoundAndWaitingForGameLaunch) {\n       gameService.onMatchmakerSearchStopped();\n     }\n   }\n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 2c3e17a1..f1e38e77 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -172,18 +172,25 @@ public class TeamMatchmakingService {\n         );\n \n     if (matchmakingQueues.stream().noneMatch(MatchmakingQueue::isJoined) && !matchFoundAndWaitingForGameLaunch) {\n-      gameService.onMatchmakerSearchStopped();\n+      stopMatchMakerLaunch();\n+    }\n+  }\n+\n+  private void stopMatchMakerLaunch() {\n+    if (matchmakingGameFuture != null) {\n+      matchmakingGameFuture.cancel(false);\n     }\n   }\n \n   @VisibleForTesting\n-  protected void onMatchFoundMessage(MatchFoundMessage message) {\n+  protected void onMatchFoundMessage(MatchmakerMatchFoundResponse message) {\n     matchFoundAndWaitingForGameLaunch = true; // messages from server: match found -> STOP all queues that you are in that haven't found a match -> game launch\n \n     notificationService.addNotification(new TransientNotification(\n         i18n.get(\"teammatchmaking.notification.matchFound.title\"),\n         i18n.get(\"teammatchmaking.notification.matchFound.message\")\n     ));\n+\n     matchmakingQueues.stream()\n         .filter(matchmakingQueue -> Objects.equals(matchmakingQueue.getTechnicalName(), message.getQueueName()))\n         .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(60), taskScheduler));\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex f1e38e77..1d09bc81 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -191,16 +209,16 @@ public class TeamMatchmakingService implements InitializingBean {\n         i18n.get(\"teammatchmaking.notification.matchFound.message\")\n     ));\n \n-    matchmakingQueues.stream()\n+    matchmakerQueues.stream()\n         .filter(matchmakingQueue -> Objects.equals(matchmakingQueue.getTechnicalName(), message.getQueueName()))\n         .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(60), taskScheduler));\n \n-    matchmakingQueues.forEach(matchmakingQueue -> matchmakingQueue.setJoined(false));\n+    matchmakerQueues.forEach(matchmakingQueue -> matchmakingQueue.setJoined(false));\n   }\n \n   @VisibleForTesting\n   protected void onMatchCancelledMessage(MatchmakerMatchCancelledResponse message) {\n-    matchmakingQueues.stream()\n+    matchmakerQueues.stream()\n         .filter(matchmakingQueue -> matchmakingQueue.getMatchingStatus() != null)\n         .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(60), taskScheduler));\n \n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 1d09bc81..b26d6b19 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -200,69 +260,49 @@ public class TeamMatchmakingService implements InitializingBean {\n     }\n   }\n \n-  @VisibleForTesting\n-  protected void onMatchFoundMessage(MatchmakerMatchFoundResponse message) {\n-    matchFoundAndWaitingForGameLaunch = true; // messages from server: match found -> STOP all queues that you are in that haven't found a match -> game launch\n-\n-    notificationService.addNotification(new TransientNotification(\n-        i18n.get(\"teammatchmaking.notification.matchFound.title\"),\n-        i18n.get(\"teammatchmaking.notification.matchFound.message\")\n-    ));\n-\n-    matchmakerQueues.stream()\n-        .filter(matchmakingQueue -> Objects.equals(matchmakingQueue.getTechnicalName(), message.getQueueName()))\n-        .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(60), taskScheduler));\n-\n-    matchmakerQueues.forEach(matchmakingQueue -> matchmakingQueue.setJoined(false));\n-  }\n-\n-  @VisibleForTesting\n-  protected void onMatchCancelledMessage(MatchmakerMatchCancelledResponse message) {\n-    matchmakerQueues.stream()\n-        .filter(matchmakingQueue -> matchmakingQueue.getMatchingStatus() != null)\n-        .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(60), taskScheduler));\n-\n-    matchFoundAndWaitingForGameLaunch = false;\n-    stopMatchMakerLaunch();\n-  }\n-\n   @VisibleForTesting\n   protected void onGameLaunchMessage(GameLaunchResponse message) {\n-    if (message.getLobbyMode() != LobbyMode.AUTO_LOBBY) {\n+    if (message.getGameType() != GameType.MATCHMAKER) {\n       return;\n     }\n \n-    matchmakerQueues.stream()\n-        .filter(matchmakingQueue -> matchmakingQueue.getMatchingStatus() != null)\n-        .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(60), taskScheduler));\n+    changeLabelForQueues(MatchingStatus.GAME_LAUNCHING);\n \n-    matchFoundAndWaitingForGameLaunch = false;\n+    matchFoundAndWaitingForGameLaunch.set(false);\n   }\n \n-  public boolean joinQueue(MatchmakerQueueBean queue) {\n+  public CompletableFuture<Boolean> joinQueue(MatchmakerQueueBean queue) {\n     if (gamePathInvalid()) {\n-      return false;\n+      return CompletableFuture.completedFuture(false);\n     }\n \n     if (gameService.isGameRunning()) {\n       log.debug(\"Game is running, ignoring tmm queue join request\");\n-      notificationService.addNotification(new ImmediateNotification(\n-          i18n.get(\"teammatchmaking.notification.gameAlreadyRunning.title\"),\n-          i18n.get(\"teammatchmaking.notification.gameAlreadyRunning.message\"),\n-          Severity.WARN,\n-          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n-      ));\n-      return false;\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.gameAlreadyRunning.message\");\n+      return CompletableFuture.completedFuture(false);\n     }\n \n-    fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START);\n-    return true;\n+    return mapService.downloadAllMatchmakerMaps(queue)\n+        .thenCompose(aVoid -> modService.getFeaturedMod(FAF.getTechnicalName()))\n+        .thenCompose(featuredModBean -> gameService.updateGameIfNecessary(featuredModBean, Set.of()))\n+        .thenRun(() -> fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START))\n+        .thenApply(aVoid -> true)\n+        .exceptionally(throwable -> {\n+          throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+          log.error(\"Unable to join queue\", throwable);\n+          if (throwable instanceof NotifiableException) {\n+            notificationService.addErrorNotification((NotifiableException) throwable);\n+          } else {\n+            notificationService.addImmediateErrorNotification(throwable, \"game.start.couldNotStart\");\n+          }\n+          return false;\n+        });\n   }\n \n   public void leaveQueue(MatchmakerQueueBean queue) {\n     fafServerAccessor.gameMatchmaking(queue, MatchmakerState.STOP);\n-    leaveQueueTimeouts.add(taskScheduler.schedule(\n-        () -> JavaFxUtil.runLater(() -> queue.setJoined(false)), Instant.now().plus(Duration.ofSeconds(5))));\n+    leaveQueueTimeouts.add(taskScheduler.schedule(() -> JavaFxUtil.runLater(() -> queue.setJoined(false)), Instant.now()\n+        .plus(Duration.ofSeconds(5))));\n   }\n \n   public void onPartyInfo(PartyInfo message) {\n", "next_change": {"commit": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex b26d6b19..59def8d3 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -301,8 +285,6 @@ public class TeamMatchmakingService implements InitializingBean {\n \n   public void leaveQueue(MatchmakerQueueBean queue) {\n     fafServerAccessor.gameMatchmaking(queue, MatchmakerState.STOP);\n-    leaveQueueTimeouts.add(taskScheduler.schedule(() -> JavaFxUtil.runLater(() -> queue.setJoined(false)), Instant.now()\n-        .plus(Duration.ofSeconds(5))));\n   }\n \n   public void onPartyInfo(PartyInfo message) {\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 59def8d3..cfacc7b1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -266,24 +318,61 @@ public class TeamMatchmakingService implements InitializingBean {\n       return CompletableFuture.completedFuture(false);\n     }\n \n-    return mapService.downloadAllMatchmakerMaps(queue)\n-        .thenCompose(aVoid -> modService.getFeaturedMod(FAF.getTechnicalName()).toFuture())\n+    if (!Objects.equals(party.getOwner(), playerService.getCurrentPlayer())) {\n+      log.debug(\"Not party owner cannot join queues\");\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.notPartyOwner.message\");\n+      return CompletableFuture.completedFuture(false);\n+    }\n+\n+    return modService.getFeaturedMod(FAF.getTechnicalName())\n+        .toFuture()\n         .thenCompose(featuredModBean -> gameService.updateGameIfNecessary(featuredModBean, Set.of()))\n-        .thenRun(() -> fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START))\n-        .thenApply(aVoid -> true)\n+        .thenCompose(aVoid -> selectedQueues.stream()\n+            .map(this::joinQueue)\n+            .reduce((future1, future2) -> future1.thenCombine(future2, (result1, result2) -> result1 || result2))\n+            .orElse(CompletableFuture.completedFuture(false)))\n         .exceptionally(throwable -> {\n           throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n-          log.error(\"Unable to join queue\", throwable);\n-          if (throwable instanceof NotifiableException) {\n-            notificationService.addErrorNotification((NotifiableException) throwable);\n+          log.error(\"Unable to join queues\", throwable);\n+          if (throwable instanceof NotifiableException notifiableException) {\n+            notificationService.addErrorNotification(notifiableException);\n           } else {\n-            notificationService.addImmediateErrorNotification(throwable, \"game.start.couldNotStart\");\n+            notificationService.addImmediateErrorNotification(throwable, \"teammatchmaking.couldNotStart\");\n           }\n           return false;\n         });\n   }\n \n-  public void leaveQueue(MatchmakerQueueBean queue) {\n+  public void leaveQueues() {\n+    if (!Objects.equals(party.getOwner(), playerService.getCurrentPlayer())) {\n+      log.debug(\"Not party owner cannot join queues\");\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.notPartyOwner.message\");\n+      return;\n+    }\n+\n+    queues.stream().filter(queue -> queue.getMatchingStatus() == MatchingStatus.SEARCHING).forEach(this::leaveQueue);\n+  }\n+\n+  private CompletableFuture<Boolean> joinQueue(MatchmakerQueueBean queue) {\n+    if (party.getMembers().size() > queue.getTeamSize()) {\n+      log.debug(\"Party of {} larger than queue size of {}, not queueing\", party.getMembers()\n+          .size(), queue.getTeamSize());\n+      return CompletableFuture.completedFuture(false);\n+    }\n+\n+    return mapService.downloadAllMatchmakerMaps(queue)\n+        .thenRun(() -> fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START))\n+        .thenApply(aVoid -> true)\n+        .exceptionally(throwable -> {\n+          throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+          log.error(\"Unable to join queue `{}`\", queue.getTechnicalName(), throwable);\n+          notificationService.addImmediateErrorNotification(throwable, \"teammatchmaking.couldNotJoinQueue\", queue.getTechnicalName());\n+          queue.setMatchingStatus(null);\n+          return false;\n+        });\n+  }\n+\n+  private void leaveQueue(MatchmakerQueueBean queue) {\n     fafServerAccessor.gameMatchmaking(queue, MatchmakerState.STOP);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "44608046bbe5e7732abe4cbf9cdce2cb5791fa66", "committedDate": "2021-05-02 06:15:32 -0400", "message": "Increase match status timeout to match server (#2225)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "77464ec68ced4950682a6163d72b2123f3307ea9", "committedDate": "2021-06-20 06:53:49 -0400", "message": "Use hashmap to keep queues unique"}, {"oid": "ee7d2fa0b6afab275876b0cb339971656b9a5cc3", "committedDate": "2021-06-20 08:35:06 -0400", "message": "remove all queues on logout"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "bf9ea315633bd4e7f94c70134435b4e42869755e", "committedDate": "2022-01-20 20:24:17 -0500", "message": "Check if game is running before accepting invite (#2522)"}, {"oid": "329d5a52b01e0016cdf55c562d720771bab7ffe4", "committedDate": "2022-01-23 10:29:39 -0500", "message": "Use addWarnNotificaiton where possible (#2542)"}, {"oid": "e19777b53e5bdd7794aa39baa39e020c45c2f86b", "committedDate": "2022-04-10 14:48:15 -0400", "message": "Use game type to determine lobby mode (#2647)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "45b4328f626effb6f28b9bcc3efbf1a8844a6cfd", "committedDate": "2022-08-14 21:03:03 -0400", "message": "Download all matchmaker maps before joining queue (#2775)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "4c85e71fce1bdadb708feb3c32e21f8111c27a1f", "committedDate": "2023-04-23 11:44:10 -0400", "message": "Disable search button when in no queues"}, {"oid": "41541457063145c41eeba7566bbb609590ac4374", "committedDate": "2023-04-23 15:35:10 -0400", "message": "Ensure queue ui state is synced with server state"}, {"oid": "528297c88514ecc8f87127cfd79bbe064763a780", "committedDate": "2023-04-29 08:40:26 -0400", "message": "Clean up gradle and make launching class the spring boot class"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTgzNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536365837", "body": "linebreaks after each stream operator", "bodyText": "linebreaks after each stream operator", "bodyHTML": "<p dir=\"auto\">linebreaks after each stream operator</p>", "author": "Brutus5000", "createdAt": "2020-12-04T20:38:04Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.Action;\n+import com.faforever.client.notification.Action.ActionCallback;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.Severity;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.preferences.event.MissingGamePathEvent;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.util.IdenticonUtil;\n+import com.google.common.eventbus.EventBus;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+\n+@Lazy\n+@Service\n+@Slf4j\n+public class TeamMatchmakingService implements InitializingBean {\n+\n+  private final FafServerAccessor fafServerAccessor;\n+  private final PlayerService playerService;\n+  private final NotificationService notificationService;\n+  private final PreferencesService preferencesService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+  private final I18n i18n;\n+  private final TaskScheduler taskScheduler;\n+  private final GameService gameService;\n+\n+  @Getter\n+  private final Party party;\n+  @Getter\n+  private final ObservableList<MatchmakingQueue> matchmakingQueues = FXCollections.observableArrayList();\n+  private final List<ScheduledFuture<?>> leaveQueueTimeouts = new LinkedList<>();\n+\n+  private volatile boolean matchFoundAndWaitingForGameLaunch = false;\n+  private boolean queuesAdded = false;\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+\n+  }\n+\n+  public TeamMatchmakingService(FafServerAccessor fafServerAccessor, PlayerService playerService, NotificationService notificationService, PreferencesService preferencesService, FafService fafService, EventBus eventBus, I18n i18n, TaskScheduler taskScheduler, GameService gameService) {\n+    this.fafServerAccessor = fafServerAccessor;\n+    this.playerService = playerService;\n+    this.notificationService = notificationService;\n+    this.preferencesService = preferencesService;\n+    this.fafService = fafService;\n+    this.eventBus = eventBus;\n+    this.i18n = i18n;\n+    this.taskScheduler = taskScheduler;\n+    this.gameService = gameService;\n+\n+    fafService.addOnMessageListener(PartyInviteMessage.class, this::onPartyInvite);\n+    fafService.addOnMessageListener(PartyKickedMessage.class, this::onPartyKicked);\n+    fafService.addOnMessageListener(PartyInfoMessage.class, this::onPartyInfo);\n+    fafService.addOnMessageListener(SearchInfoMessage.class, this::onSearchInfoMessage);\n+    fafService.addOnMessageListener(MatchFoundMessage.class, this::onMatchFoundMessage);\n+    fafService.addOnMessageListener(MatchCancelledMessage.class, this::onMatchCancelledMessage);\n+    fafService.addOnMessageListener(GameLaunchMessage.class, this::onGameLaunchMessage);\n+    fafService.connectionStateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == ConnectionState.DISCONNECTED) {\n+        Platform.runLater(() -> initParty(playerService.getCurrentPlayer().get()));\n+      }\n+    });\n+\n+    fafService.addOnMessageListener(MatchmakerInfoMessage.class, this::onMatchmakerInfo);\n+\n+    party = new Party();\n+\n+    playerService.currentPlayerProperty().addListener((obs, old, player) -> {\n+      if (party.getOwner() == null && party.getMembers().isEmpty() && player != null) {\n+        Platform.runLater(() -> initParty(player));\n+      }\n+    });\n+\n+    playerService.getCurrentPlayer().ifPresent(this::initParty);\n+  }\n+\n+  private void onMatchmakerInfo(MatchmakerInfoMessage message) {\n+    List<CompletableFuture<?>> futures = new ArrayList<>();\n+    message.getQueues().forEach(remoteQueue -> {\n+      MatchmakingQueue localQueue = matchmakingQueues.stream()\n+          .filter(q -> Objects.equals(q.getQueueName(), remoteQueue.getQueueName())).findFirst().orElse(null);\n+      if (localQueue == null) {\n+        queuesAdded = true;\n+        CompletableFuture<Optional<MatchmakingQueue>> future = fafService.getMatchmakingQueue(remoteQueue.getQueueName());\n+        futures.add(future);\n+        future.thenAccept(result -> result.ifPresent(\n+            matchmakingQueue -> {\n+              matchmakingQueues.add(matchmakingQueue);\n+              matchmakingQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n+              matchmakingQueue.setTeamSize(remoteQueue.getTeamSize());\n+              matchmakingQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n+              Platform.runLater(() -> matchmakingQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n+            }));\n+      } else {\n+        localQueue.setQueuePopTime(OffsetDateTime.parse(remoteQueue.getQueuePopTime()).toInstant());\n+        localQueue.setTeamSize(remoteQueue.getTeamSize());\n+        localQueue.setPartiesInQueue(remoteQueue.getBoundary75s().size());\n+        Platform.runLater(() -> localQueue.setPlayersInQueue(remoteQueue.getNumPlayers()));\n+      }\n+    });\n+\n+    CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[futures.size()])).thenRun(() -> {\n+      if (queuesAdded) {\n+        eventBus.post(new QueuesAddedEvent());\n+        queuesAdded = false;\n+      }\n+    });\n+  }\n+\n+  protected void onSearchInfoMessage(SearchInfoMessage message) {\n+    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueueName())).forEach(q -> {\n+          Platform.runLater(() -> {\n+            q.setJoined(message.getState() == MatchmakingState.START);\n+            leaveQueueTimeouts.forEach(f -> f.cancel(false));\n+          });\n+\n+          //TODO: check current state / other queues\n+          if (message.getState() == MatchmakingState.START) {\n+            gameService.startSearchMatchmaker();\n+\n+            // Send own factions to server upon joining a queue\n+            Optional<PartyMember> ownPartyMember = party.getMembers().stream()\n+                .filter(m -> m.getPlayer().getId() == playerService.getCurrentPlayer().map(Player::getId).orElse(-1))\n+                .findFirst();\n+            ownPartyMember.ifPresent(m -> setPartyFactions(m.getFactions()));\n+          }\n+        }\n+    );\n+\n+    if (matchmakingQueues.stream().noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n+        && message.getState() != MatchmakingState.START // catches same race condition\n+        && !matchFoundAndWaitingForGameLaunch) {\n+      gameService.onMatchmakerSearchStopped();\n+    }\n+  }\n+\n+  private void onMatchFoundMessage(MatchFoundMessage message) {\n+    matchFoundAndWaitingForGameLaunch = true; // messages from server: match found -> STOP all queues that you are in that haven't found a match -> game launch\n+\n+    notificationService.addNotification(new TransientNotification(\n+        i18n.get(\"teammatchmaking.notification.matchFound.title\"),\n+        i18n.get(\"teammatchmaking.notification.matchFound.message\")\n+    ));\n+    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueue())).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler);\n+    });\n+\n+    matchmakingQueues.forEach(q -> q.setJoined(false));\n+  }\n+\n+  private void onMatchCancelledMessage(MatchCancelledMessage message) {\n+    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler);\n+    });\n+\n+    matchFoundAndWaitingForGameLaunch = false;\n+    gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n+  }\n+\n+  private void onGameLaunchMessage(GameLaunchMessage message) {\n+    if (message.getInitMode() != LobbyMode.AUTO_LOBBY) {\n+      return;\n+    }\n+\n+    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {", "originalCommit": "926eb981194e2bb5d6af3ea25e6276720252355e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..917793a2 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -173,44 +175,48 @@ public class TeamMatchmakingService implements InitializingBean {\n         }\n     );\n \n-    if (matchmakingQueues.stream().noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n+    if (matchmakingQueues.stream()\n+        .noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n         && message.getState() != MatchmakingState.START // catches same race condition\n         && !matchFoundAndWaitingForGameLaunch) {\n       gameService.onMatchmakerSearchStopped();\n     }\n   }\n \n-  private void onMatchFoundMessage(MatchFoundMessage message) {\n+  @VisibleForTesting\n+  protected void onMatchFoundMessage(MatchFoundMessage message) {\n     matchFoundAndWaitingForGameLaunch = true; // messages from server: match found -> STOP all queues that you are in that haven't found a match -> game launch\n \n     notificationService.addNotification(new TransientNotification(\n         i18n.get(\"teammatchmaking.notification.matchFound.title\"),\n         i18n.get(\"teammatchmaking.notification.matchFound.message\")\n     ));\n-    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueue())).forEach(q -> {\n-      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler);\n-    });\n+    matchmakingQueues.stream()\n+        .filter(q -> Objects.equals(q.getQueueName(), message.getQueue()))\n+        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler));\n \n     matchmakingQueues.forEach(q -> q.setJoined(false));\n   }\n \n-  private void onMatchCancelledMessage(MatchCancelledMessage message) {\n-    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n-      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler);\n-    });\n+  @VisibleForTesting\n+  protected void onMatchCancelledMessage(MatchCancelledMessage message) {\n+    matchmakingQueues.stream()\n+        .filter(q -> q.getMatchingStatus() != null)\n+        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n   }\n \n-  private void onGameLaunchMessage(GameLaunchMessage message) {\n+  @VisibleForTesting\n+  protected void onGameLaunchMessage(GameLaunchMessage message) {\n     if (message.getInitMode() != LobbyMode.AUTO_LOBBY) {\n       return;\n     }\n \n-    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n-      q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler);\n-    });\n+    matchmakingQueues.stream()\n+        .filter(q -> q.getMatchingStatus() != null)\n+        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 917793a2..24815e3a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -175,48 +173,44 @@ public class TeamMatchmakingService {\n         }\n     );\n \n-    if (matchmakingQueues.stream()\n-        .noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n+    if (matchmakingQueues.stream().noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n         && message.getState() != MatchmakingState.START // catches same race condition\n         && !matchFoundAndWaitingForGameLaunch) {\n       gameService.onMatchmakerSearchStopped();\n     }\n   }\n \n-  @VisibleForTesting\n-  protected void onMatchFoundMessage(MatchFoundMessage message) {\n+  private void onMatchFoundMessage(MatchFoundMessage message) {\n     matchFoundAndWaitingForGameLaunch = true; // messages from server: match found -> STOP all queues that you are in that haven't found a match -> game launch\n \n     notificationService.addNotification(new TransientNotification(\n         i18n.get(\"teammatchmaking.notification.matchFound.title\"),\n         i18n.get(\"teammatchmaking.notification.matchFound.message\")\n     ));\n-    matchmakingQueues.stream()\n-        .filter(q -> Objects.equals(q.getQueueName(), message.getQueue()))\n-        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler));\n+    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueue())).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler);\n+    });\n \n     matchmakingQueues.forEach(q -> q.setJoined(false));\n   }\n \n-  @VisibleForTesting\n-  protected void onMatchCancelledMessage(MatchCancelledMessage message) {\n-    matchmakingQueues.stream()\n-        .filter(q -> q.getMatchingStatus() != null)\n-        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler));\n+  private void onMatchCancelledMessage(MatchCancelledMessage message) {\n+    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler);\n+    });\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n   }\n \n-  @VisibleForTesting\n-  protected void onGameLaunchMessage(GameLaunchMessage message) {\n+  private void onGameLaunchMessage(GameLaunchMessage message) {\n     if (message.getInitMode() != LobbyMode.AUTO_LOBBY) {\n       return;\n     }\n \n-    matchmakingQueues.stream()\n-        .filter(q -> q.getMatchingStatus() != null)\n-        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler));\n+    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n+      q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler);\n+    });\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..03df2d04 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -208,9 +208,9 @@ public class TeamMatchmakingService implements InitializingBean {\n       return;\n     }\n \n-    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n-      q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler);\n-    });\n+    matchmakingQueues.stream()\n+        .filter(q -> q.getMatchingStatus() != null)\n+        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 24815e3a..ed60fc16 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -164,53 +177,56 @@ public class TeamMatchmakingService implements InitializingBean {\n           if (message.getState() == MatchmakingState.START) {\n             gameService.startSearchMatchmaker();\n \n-            // Send own factions to server upon joining a queue\n             Optional<PartyMember> ownPartyMember = party.getMembers().stream()\n                 .filter(m -> m.getPlayer().getId() == playerService.getCurrentPlayer().map(Player::getId).orElse(-1))\n                 .findFirst();\n-            ownPartyMember.ifPresent(m -> setPartyFactions(m.getFactions()));\n+            ownPartyMember.ifPresent(m -> sendFactionSelection(m.getFactions()));\n           }\n         }\n     );\n \n-    if (matchmakingQueues.stream().noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n+    if (matchmakingQueues.stream()\n+        .noneMatch(q -> q.isJoined() && !q.getQueueName().equals(message.getQueueName())) // filter catches a race condition due MatchmakingQueue::isJoined being set on UI thread\n         && message.getState() != MatchmakingState.START // catches same race condition\n         && !matchFoundAndWaitingForGameLaunch) {\n       gameService.onMatchmakerSearchStopped();\n     }\n   }\n \n-  private void onMatchFoundMessage(MatchFoundMessage message) {\n+  @VisibleForTesting\n+  protected void onMatchFoundMessage(MatchFoundMessage message) {\n     matchFoundAndWaitingForGameLaunch = true; // messages from server: match found -> STOP all queues that you are in that haven't found a match -> game launch\n \n     notificationService.addNotification(new TransientNotification(\n         i18n.get(\"teammatchmaking.notification.matchFound.title\"),\n         i18n.get(\"teammatchmaking.notification.matchFound.message\")\n     ));\n-    matchmakingQueues.stream().filter(q -> Objects.equals(q.getQueueName(), message.getQueue())).forEach(q -> {\n-      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler);\n-    });\n+    matchmakingQueues.stream()\n+        .filter(q -> Objects.equals(q.getQueueName(), message.getQueueName()))\n+        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.MATCH_FOUND, Duration.ofSeconds(15), taskScheduler));\n \n     matchmakingQueues.forEach(q -> q.setJoined(false));\n   }\n \n-  private void onMatchCancelledMessage(MatchCancelledMessage message) {\n-    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n-      q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler);\n-    });\n+  @VisibleForTesting\n+  protected void onMatchCancelledMessage(MatchCancelledMessage message) {\n+    matchmakingQueues.stream()\n+        .filter(q -> q.getMatchingStatus() != null)\n+        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.MATCH_CANCELLED, Duration.ofSeconds(15), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n   }\n \n-  private void onGameLaunchMessage(GameLaunchMessage message) {\n+  @VisibleForTesting\n+  protected void onGameLaunchMessage(GameLaunchMessage message) {\n     if (message.getInitMode() != LobbyMode.AUTO_LOBBY) {\n       return;\n     }\n \n-    matchmakingQueues.stream().filter(q -> q.getMatchingStatus() != null).forEach(q -> {\n-      q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler);\n-    });\n+    matchmakingQueues.stream()\n+        .filter(q -> q.getMatchingStatus() != null)\n+        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n", "next_change": {"commit": "44608046bbe5e7732abe4cbf9cdce2cb5791fa66", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex ed60fc16..9ee13408 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -226,7 +236,7 @@ public class TeamMatchmakingService {\n \n     matchmakingQueues.stream()\n         .filter(q -> q.getMatchingStatus() != null)\n-        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(15), taskScheduler));\n+        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(60), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 9ee13408..2c3e17a1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -235,15 +208,15 @@ public class TeamMatchmakingService {\n     }\n \n     matchmakingQueues.stream()\n-        .filter(q -> q.getMatchingStatus() != null)\n-        .forEach(q -> q.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(60), taskScheduler));\n+        .filter(matchmakingQueue -> matchmakingQueue.getMatchingStatus() != null)\n+        .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(60), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n     gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n   }\n \n   public boolean joinQueue(MatchmakingQueue queue) {\n-    if (!ensureValidGamePath()) {\n+    if (gamePathInvalid()) {\n       return false;\n     }\n \n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 2c3e17a1..f1e38e77 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -212,7 +219,6 @@ public class TeamMatchmakingService {\n         .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(60), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n-    gameService.onMatchmakerSearchStopped(); // joining custom games is still blocked till match is cancelled or launched\n   }\n \n   public boolean joinQueue(MatchmakingQueue queue) {\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex f1e38e77..1d09bc81 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -214,14 +232,14 @@ public class TeamMatchmakingService implements InitializingBean {\n       return;\n     }\n \n-    matchmakingQueues.stream()\n+    matchmakerQueues.stream()\n         .filter(matchmakingQueue -> matchmakingQueue.getMatchingStatus() != null)\n         .forEach(matchmakingQueue -> matchmakingQueue.setTimedOutMatchingStatus(MatchingStatus.GAME_LAUNCHING, Duration.ofSeconds(60), taskScheduler));\n \n     matchFoundAndWaitingForGameLaunch = false;\n   }\n \n-  public boolean joinQueue(MatchmakingQueue queue) {\n+  public boolean joinQueue(MatchmakerQueueBean queue) {\n     if (gamePathInvalid()) {\n       return false;\n     }\n", "next_change": {"commit": "329d5a52b01e0016cdf55c562d720771bab7ffe4", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 1d09bc81..fd71b3a4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -246,12 +245,7 @@ public class TeamMatchmakingService implements InitializingBean {\n \n     if (gameService.isGameRunning()) {\n       log.debug(\"Game is running, ignoring tmm queue join request\");\n-      notificationService.addNotification(new ImmediateNotification(\n-          i18n.get(\"teammatchmaking.notification.gameAlreadyRunning.title\"),\n-          i18n.get(\"teammatchmaking.notification.gameAlreadyRunning.message\"),\n-          Severity.WARN,\n-          Collections.singletonList(new Action(i18n.get(\"dismiss\")))\n-      ));\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.gameAlreadyRunning.message\");\n       return false;\n     }\n \n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex fd71b3a4..f6d586dd 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -238,19 +227,31 @@ public class TeamMatchmakingService implements InitializingBean {\n     matchFoundAndWaitingForGameLaunch = false;\n   }\n \n-  public boolean joinQueue(MatchmakerQueueBean queue) {\n+  public CompletableFuture<Boolean> joinQueue(MatchmakerQueueBean queue) {\n     if (gamePathInvalid()) {\n-      return false;\n+      return CompletableFuture.completedFuture(false);\n     }\n \n     if (gameService.isGameRunning()) {\n       log.debug(\"Game is running, ignoring tmm queue join request\");\n       notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.gameAlreadyRunning.message\");\n-      return false;\n+      return CompletableFuture.completedFuture(false);\n     }\n \n-    fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START);\n-    return true;\n+    return modService.getFeaturedMod(FAF.getTechnicalName())\n+        .thenCompose(featuredModBean -> gameService.updateGameIfNecessary(featuredModBean, Set.of()))\n+        .thenRun(() -> fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START))\n+        .thenApply(aVoid -> true)\n+        .exceptionally(throwable -> {\n+          throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+          log.error(\"Unable to join queue\", throwable);\n+          if (throwable instanceof NotifiableException) {\n+            notificationService.addErrorNotification((NotifiableException) throwable);\n+          } else {\n+            notificationService.addImmediateErrorNotification(throwable, \"game.start.couldNotStart\");\n+          }\n+          return false;\n+        });\n   }\n \n   public void leaveQueue(MatchmakerQueueBean queue) {\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex f6d586dd..b26d6b19 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -256,8 +301,8 @@ public class TeamMatchmakingService implements InitializingBean {\n \n   public void leaveQueue(MatchmakerQueueBean queue) {\n     fafServerAccessor.gameMatchmaking(queue, MatchmakerState.STOP);\n-    leaveQueueTimeouts.add(taskScheduler.schedule(\n-        () -> JavaFxUtil.runLater(() -> queue.setJoined(false)), Instant.now().plus(Duration.ofSeconds(5))));\n+    leaveQueueTimeouts.add(taskScheduler.schedule(() -> JavaFxUtil.runLater(() -> queue.setJoined(false)), Instant.now()\n+        .plus(Duration.ofSeconds(5))));\n   }\n \n   public void onPartyInfo(PartyInfo message) {\n", "next_change": {"commit": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex b26d6b19..59def8d3 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -301,8 +285,6 @@ public class TeamMatchmakingService implements InitializingBean {\n \n   public void leaveQueue(MatchmakerQueueBean queue) {\n     fafServerAccessor.gameMatchmaking(queue, MatchmakerState.STOP);\n-    leaveQueueTimeouts.add(taskScheduler.schedule(() -> JavaFxUtil.runLater(() -> queue.setJoined(false)), Instant.now()\n-        .plus(Duration.ofSeconds(5))));\n   }\n \n   public void onPartyInfo(PartyInfo message) {\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\nindex 59def8d3..cfacc7b1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingService.java\n", "chunk": "@@ -266,24 +318,61 @@ public class TeamMatchmakingService implements InitializingBean {\n       return CompletableFuture.completedFuture(false);\n     }\n \n-    return mapService.downloadAllMatchmakerMaps(queue)\n-        .thenCompose(aVoid -> modService.getFeaturedMod(FAF.getTechnicalName()).toFuture())\n+    if (!Objects.equals(party.getOwner(), playerService.getCurrentPlayer())) {\n+      log.debug(\"Not party owner cannot join queues\");\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.notPartyOwner.message\");\n+      return CompletableFuture.completedFuture(false);\n+    }\n+\n+    return modService.getFeaturedMod(FAF.getTechnicalName())\n+        .toFuture()\n         .thenCompose(featuredModBean -> gameService.updateGameIfNecessary(featuredModBean, Set.of()))\n-        .thenRun(() -> fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START))\n-        .thenApply(aVoid -> true)\n+        .thenCompose(aVoid -> selectedQueues.stream()\n+            .map(this::joinQueue)\n+            .reduce((future1, future2) -> future1.thenCombine(future2, (result1, result2) -> result1 || result2))\n+            .orElse(CompletableFuture.completedFuture(false)))\n         .exceptionally(throwable -> {\n           throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n-          log.error(\"Unable to join queue\", throwable);\n-          if (throwable instanceof NotifiableException) {\n-            notificationService.addErrorNotification((NotifiableException) throwable);\n+          log.error(\"Unable to join queues\", throwable);\n+          if (throwable instanceof NotifiableException notifiableException) {\n+            notificationService.addErrorNotification(notifiableException);\n           } else {\n-            notificationService.addImmediateErrorNotification(throwable, \"game.start.couldNotStart\");\n+            notificationService.addImmediateErrorNotification(throwable, \"teammatchmaking.couldNotStart\");\n           }\n           return false;\n         });\n   }\n \n-  public void leaveQueue(MatchmakerQueueBean queue) {\n+  public void leaveQueues() {\n+    if (!Objects.equals(party.getOwner(), playerService.getCurrentPlayer())) {\n+      log.debug(\"Not party owner cannot join queues\");\n+      notificationService.addImmediateWarnNotification(\"teammatchmaking.notification.notPartyOwner.message\");\n+      return;\n+    }\n+\n+    queues.stream().filter(queue -> queue.getMatchingStatus() == MatchingStatus.SEARCHING).forEach(this::leaveQueue);\n+  }\n+\n+  private CompletableFuture<Boolean> joinQueue(MatchmakerQueueBean queue) {\n+    if (party.getMembers().size() > queue.getTeamSize()) {\n+      log.debug(\"Party of {} larger than queue size of {}, not queueing\", party.getMembers()\n+          .size(), queue.getTeamSize());\n+      return CompletableFuture.completedFuture(false);\n+    }\n+\n+    return mapService.downloadAllMatchmakerMaps(queue)\n+        .thenRun(() -> fafServerAccessor.gameMatchmaking(queue, MatchmakerState.START))\n+        .thenApply(aVoid -> true)\n+        .exceptionally(throwable -> {\n+          throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+          log.error(\"Unable to join queue `{}`\", queue.getTechnicalName(), throwable);\n+          notificationService.addImmediateErrorNotification(throwable, \"teammatchmaking.couldNotJoinQueue\", queue.getTechnicalName());\n+          queue.setMatchingStatus(null);\n+          return false;\n+        });\n+  }\n+\n+  private void leaveQueue(MatchmakerQueueBean queue) {\n     fafServerAccessor.gameMatchmaking(queue, MatchmakerState.STOP);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "44608046bbe5e7732abe4cbf9cdce2cb5791fa66", "committedDate": "2021-05-02 06:15:32 -0400", "message": "Increase match status timeout to match server (#2225)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "77464ec68ced4950682a6163d72b2123f3307ea9", "committedDate": "2021-06-20 06:53:49 -0400", "message": "Use hashmap to keep queues unique"}, {"oid": "ee7d2fa0b6afab275876b0cb339971656b9a5cc3", "committedDate": "2021-06-20 08:35:06 -0400", "message": "remove all queues on logout"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "bf9ea315633bd4e7f94c70134435b4e42869755e", "committedDate": "2022-01-20 20:24:17 -0500", "message": "Check if game is running before accepting invite (#2522)"}, {"oid": "329d5a52b01e0016cdf55c562d720771bab7ffe4", "committedDate": "2022-01-23 10:29:39 -0500", "message": "Use addWarnNotificaiton where possible (#2542)"}, {"oid": "e19777b53e5bdd7794aa39baa39e020c45c2f86b", "committedDate": "2022-04-10 14:48:15 -0400", "message": "Use game type to determine lobby mode (#2647)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "45b4328f626effb6f28b9bcc3efbf1a8844a6cfd", "committedDate": "2022-08-14 21:03:03 -0400", "message": "Download all matchmaker maps before joining queue (#2775)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "4c85e71fce1bdadb708feb3c32e21f8111c27a1f", "committedDate": "2023-04-23 11:44:10 -0400", "message": "Disable search button when in no queues"}, {"oid": "41541457063145c41eeba7566bbb609590ac4374", "committedDate": "2023-04-23 15:35:10 -0400", "message": "Ensure queue ui state is synced with server state"}, {"oid": "528297c88514ecc8f87127cfd79bbe064763a780", "committedDate": "2023-04-29 08:40:26 -0400", "message": "Clean up gradle and make launching class the spring boot class"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzA4OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536783089", "body": "Can this TODO be resolved?", "bodyText": "Can this TODO be resolved?", "bodyHTML": "<p dir=\"auto\">Can this TODO be resolved?</p>", "author": "Sheikah45", "createdAt": "2020-12-05T14:14:44Z", "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -505,27 +518,23 @@ public Game getByUid(int uid) {\n     return game;\n   }\n \n-  public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage> listener) {\n-    fafService.addOnMessageListener(MatchmakerInfoMessage.class, listener);\n-  }\n-\n-  public CompletableFuture<Void> startSearchLadder1v1(Faction faction) {\n+  public CompletableFuture<Void> startSearchMatchmaker() {\n     if (isRunning()) {\n-      log.debug(\"Game is running, ignoring 1v1 search request\");\n+      log.debug(\"Game is running, ignoring matchmaking search request\");\n       notificationService.addImmediateErrorNotification(new UnsupportedOperationException(\"Forged Alliances is already running\"), \"game.gameRunning\");\n       return completedFuture(null);\n     }\n \n     if (!preferencesService.isGamePathValid()) {\n       CompletableFuture<Path> gameDirectoryFuture = postGameDirectoryChooseEvent();\n-      return gameDirectoryFuture.thenCompose(path -> startSearchLadder1v1(faction));\n+      return gameDirectoryFuture.thenCompose(path -> startSearchMatchmaker());\n     }\n \n-    searching1v1.set(true);\n+    inMatchmakerQueue.set(true);\n \n-    return modService.getFeaturedMod(LADDER_1V1.getTechnicalName())\n+    return modService.getFeaturedMod(FAF.getTechnicalName())//TODO: use matchmaking featured mod", "originalCommit": "506f696bf0fb72c82a1dd6569b1d24c461397b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjE0OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542006148", "bodyText": "FAF is the right featured mod for the matchmaker. I will delete the todo", "author": "BlackYps", "createdAt": "2020-12-13T21:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 08a0594e..725db3c0 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -532,7 +532,7 @@ public class GameService implements InitializingBean {\n \n     inMatchmakerQueue.set(true);\n \n-    return modService.getFeaturedMod(FAF.getTechnicalName())//TODO: use matchmaking featured mod\n+    return modService.getFeaturedMod(FAF.getTechnicalName())\n         .thenAccept(featuredModBean -> updateGameIfNecessary(featuredModBean, null, emptyMap(), emptySet()))\n         .thenCompose(aVoid -> fafService.startSearchMatchmaker())\n         .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapname())\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 08a0594e..725db3c0 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -532,7 +532,7 @@ public class GameService implements InitializingBean {\n \n     inMatchmakerQueue.set(true);\n \n-    return modService.getFeaturedMod(FAF.getTechnicalName())//TODO: use matchmaking featured mod\n+    return modService.getFeaturedMod(FAF.getTechnicalName())\n         .thenAccept(featuredModBean -> updateGameIfNecessary(featuredModBean, null, emptyMap(), emptySet()))\n         .thenCompose(aVoid -> fafService.startSearchMatchmaker())\n         .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapname())\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 725db3c0..d1b1ad3d 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -530,6 +561,7 @@ public class GameService implements InitializingBean {\n       return gameDirectoryFuture.thenCompose(path -> startSearchMatchmaker());\n     }\n \n+    log.info(\"Matchmaking search has been started\");\n     inMatchmakerQueue.set(true);\n \n     return modService.getFeaturedMod(FAF.getTechnicalName())\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex d1b1ad3d..0bd6dadd 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -562,7 +564,7 @@ public class GameService implements InitializingBean {\n     }\n \n     log.info(\"Matchmaking search has been started\");\n-    inMatchmakerQueue.set(true);\n+    inMatchmakerQueue = true;\n \n     return modService.getFeaturedMod(FAF.getTechnicalName())\n         .thenAccept(featuredModBean -> updateGameIfNecessary(featuredModBean, null, emptyMap(), emptySet()))\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 0bd6dadd..0d1c7373 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -571,8 +553,6 @@ public class GameService implements InitializingBean {\n         .thenCompose(aVoid -> fafService.startSearchMatchmaker())\n         .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapname())\n             .thenRun(() -> {\n-              gameLaunchMessage.setArgs(new ArrayList<>(gameLaunchMessage.getArgs()));\n-\n               gameLaunchMessage.getArgs().add(\"/team \" + gameLaunchMessage.getTeam());\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 0d1c7373..12b2504e 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -548,42 +532,34 @@ public class GameService implements InitializingBean {\n     log.info(\"Matchmaking search has been started\");\n     inMatchmakerQueue = true;\n \n-    return modService.getFeaturedMod(FAF.getTechnicalName())\n+    CompletableFuture<Void> matchmakerFuture = modService.getFeaturedMod(FAF.getTechnicalName())\n         .thenAccept(featuredModBean -> updateGameIfNecessary(featuredModBean, null, emptyMap(), emptySet()))\n         .thenCompose(aVoid -> fafService.startSearchMatchmaker())\n-        .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapname())\n+        .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapName())\n             .thenRun(() -> {\n               gameLaunchMessage.getArgs().add(\"/team \" + gameLaunchMessage.getTeam());\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              String ratingType = gameLaunchMessage.getRatingType();\n-\n-              if (ratingType == null) {\n-                log.warn(\"Rating type not in game launch message using default\");\n-                ratingType = DEFAULT_RATING_TYPE;\n-              }\n+              String ratingType = gameLaunchMessage.getLeaderboard();\n \n               startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), ratingType);\n-            }))\n-        .exceptionally(throwable -> {\n-          if (throwable.getCause() instanceof CancellationException) {\n-            log.info(\"Matchmaking search has been cancelled\");\n+            }));\n+\n+    matchmakerFuture.whenComplete((aVoid, throwable) -> {\n+          inMatchmakerQueue = false;\n+          if (throwable != null) {\n+            if (throwable instanceof CancellationException) {\n+              log.info(\"Matchmaking search has been cancelled\");\n+            } else {\n+              log.warn(\"Matchmade game could not be started\", throwable);\n+            }\n           } else {\n-            log.warn(\"Matchmade game could not be started\", throwable);\n+            log.debug(\"Matchmaker queue exited\");\n           }\n-          return null;\n         });\n-  }\n \n-  public void onMatchmakerSearchStopped() {\n-    if (inMatchmakerQueue) {\n-      fafService.stopSearchMatchmaker();\n-      inMatchmakerQueue = false;\n-      log.debug(\"Matchmaker search stopped\");\n-    } else {\n-      log.debug(\"Matchmaker search has already been stopped, ignoring call\");\n-    }\n+    return matchmakerFuture;\n   }\n \n   /**\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 12b2504e..9aa52e8b 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -566,7 +565,7 @@ public class GameService implements InitializingBean {\n    * Returns the preferences the player is currently in. Returns {@code null} if not in a preferences.\n    */\n   @Nullable\n-  public Game getCurrentGame() {\n+  public GameBean getCurrentGame() {\n     synchronized (currentGame) {\n       return currentGame.get();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "7262cedf49eaa15fdb65186350641dfb8c55c789", "committedDate": "2021-02-06 00:34:16 -0500", "message": "Add function for checking if we can start the replay"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "912afca1fe8607fe4d9b54a5c7292a7c227562d8", "committedDate": "2021-02-22 08:34:36 -0500", "message": "Fixes #2158"}, {"oid": "9e8012a6aa6e226ac301c370c7feeeee58a0246f", "committedDate": "2021-03-04 04:39:40 -0500", "message": "Add game log file to error message"}, {"oid": "dfb08aba4e85f85704a3ddf8f22ae18aad98f6e9", "committedDate": "2021-03-21 17:30:00 -0400", "message": "Initialize leaderBoardRatings to empty map (#2193)"}, {"oid": "a34452295fd58f2909d8b4407e872436755990f0", "committedDate": "2021-04-10 12:27:54 -0400", "message": "Move IRC to its own log to reduce clutter and remove fxml debug logging (#2204)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "6267dab4c21c53554e5eaaf1282300e4c0dfac2f", "committedDate": "2021-05-08 22:43:31 -0400", "message": "Remove observers from num players (#2234)"}, {"oid": "b4973376cc9ba9e10712ce9f9c1b294a846c4902", "committedDate": "2021-06-13 07:48:53 -0400", "message": "Remember password for rehost (#2267)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "51ab2c11b78a7a27d2148f86042bf5ee2a19bfa7", "committedDate": "2021-06-19 22:43:36 -0400", "message": " make games a synchronized list"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "cf2a55309adb9d57eb3452168baba220f2a2e161", "committedDate": "2021-07-12 19:05:07 -0400", "message": "Mask user details in log file (#2306)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "65578845c57bc4087165d84f6a8dbfd533d1f053", "committedDate": "2021-07-25 16:44:14 -0400", "message": "Use full path in game error for log"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}, {"oid": "176fc85b84d81065204f6b1e75e1c73974fc7899", "committedDate": "2021-09-27 18:42:58 -0400", "message": "Create new gameoptions command line switch (#2339)"}, {"oid": "3fa639d4202ad594ede0c5965b0c28c03e193ff6", "committedDate": "2021-10-14 07:15:30 -0400", "message": "Add ability to close matchmaker games when match is cancelled"}, {"oid": "de179c3dc3dfcda3670dc0eb097d1062d48e052a", "committedDate": "2021-10-18 22:23:08 -0400", "message": "Only notify of cancellation when game is closed (#2396)"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "59a2459fe9ff1c6012a2df0e3fcec2503018e201", "committedDate": "2021-11-06 09:53:53 -0400", "message": "specify all command args and use all games in game count (#2395)"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "faa59d3ad8015f006584a89249f37e5cb175e4ec", "committedDate": "2021-12-13 23:26:00 -0500", "message": "Remove FaInitGenerator and simplify GameUpdate Logic (#2439)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "fe5f0ee3e1ca8df2c6355508f42a73effabad466", "committedDate": "2022-01-23 10:30:21 -0500", "message": "Add button to open log file on crash (#2541)"}, {"oid": "e7906975308e2a81875014823f8cd71519c1ee6d", "committedDate": "2022-01-30 08:42:11 -0500", "message": "Remove connection listener when game service is disposed (#2553)"}, {"oid": "fb1a7dcc58b10241195bd8c590a8d29ec5ae89b2", "committedDate": "2022-02-11 16:53:33 -0500", "message": "Replace embedded login web view with login via browser (#2338)"}, {"oid": "dc8d6fd7906e7b373871850fc5584e0c3b52a31d", "committedDate": "2022-02-16 20:11:12 -0500", "message": "Use synchronized map for gameToId (#2564)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "ab8cf13350f390780dc8bd841c247a250f71de97", "committedDate": "2022-02-20 00:16:01 -0500", "message": "Simplify playerStatus listener logic (#2572)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "d1bda0c6960e6ad884c89f1fa9ec3485d4401334", "committedDate": "2022-04-30 18:36:19 -0400", "message": "Restore Game Session and Lobby connection properly (#2681)"}, {"oid": "e87926ce0612b6e719ad78a8d65fbd741f8de672", "committedDate": "2022-07-07 20:07:01 -0400", "message": "Get coturn servers from the api (#2732)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "cd5ce92de93f23123fa6e8a6f36f9c0478ecde40", "committedDate": "2022-09-18 08:33:12 -0400", "message": "Send division name to game on start for matchmaker games (#2793)"}, {"oid": "d48de94568a61210fc24a19630dfad162bff60f3", "committedDate": "2022-10-16 15:59:29 -0400", "message": "Compatibility changes for ICE adapter with telemetry features (#2815)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "674703b3b7a7601973f527c1e0109a4fa33752e2", "committedDate": "2022-11-13 10:07:29 -0500", "message": "Simplify Game Bean (#2846)"}, {"oid": "e67e8b0e8f0c511e38eea9bf6cbc473d1d6c322f", "committedDate": "2022-11-24 08:53:35 -0500", "message": "Notify that a lobby is full when you watching a replay (#2847)"}, {"oid": "6c36398851869464028531b0b6b2ec71eab1d4c9", "committedDate": "2023-01-28 09:12:54 -0500", "message": "Remove uses of isWindows outside OS determination (#2901)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "9085a382406539e9389e2f881c979b184269f355", "committedDate": "2023-02-20 10:46:45 -0500", "message": "Fix data race between playerinfo and gameinfo messages (#2920)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "c19e7c2f4b3e8f29fbfa742d89a9ec445f3ff272", "committedDate": "2023-02-24 07:39:01 -0500", "message": "Use bindings and properties for team card controllers (#2926)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "1c672a6df80e7c15696969c3ffdb6ebc51e32270", "committedDate": "2023-03-05 07:29:54 -0500", "message": "Only notify friend joined on addition to game"}, {"oid": "05ffe3288430b5457e97bfca99ca52a7cbac994e", "committedDate": "2023-03-05 13:45:07 +0000", "message": "Ensure game list updated when type updated (#2934)"}, {"oid": "d82ab86d6cf39d9f6ec92def641759315ded890f", "committedDate": "2023-03-11 13:03:45 -0500", "message": "Activate player listener on fx thread"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "b65435ba7bd6de5c8f681c0efaf2dd8a71a59977", "committedDate": "2023-03-28 19:37:19 -0400", "message": "Allow watching replays while in queue (#2945)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzI3NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536783274", "body": "This one seems needed as well unless I am missing something", "bodyText": "This one seems needed as well unless I am missing something", "bodyHTML": "<p dir=\"auto\">This one seems needed as well unless I am missing something</p>", "author": "Sheikah45", "createdAt": "2020-12-05T14:15:14Z", "path": "src/main/java/com/faforever/client/game/GameService.java", "diffHunk": "@@ -534,27 +543,27 @@ public void addOnRankedMatchNotificationListener(Consumer<MatchmakerInfoMessage>\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, faction, RatingMode.LADDER_1V1);\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode", "originalCommit": "506f696bf0fb72c82a1dd6569b1d24c461397b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwODQ5OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542008498", "bodyText": "This is for displaying the right rating in the game. We should grab the appropriate leaderboard from the queue information once #1791 is implemented.", "author": "BlackYps", "createdAt": "2020-12-13T21:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MzI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 08a0594e..725db3c0 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -543,7 +543,7 @@ public class GameService implements InitializingBean {\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: use leaderboard information from queue to display right rating\n             }))\n         .exceptionally(throwable -> {\n           if (throwable.getCause() instanceof CancellationException) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 08a0594e..725db3c0 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -543,7 +543,7 @@ public class GameService implements InitializingBean {\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: rating mode\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: use leaderboard information from queue to display right rating\n             }))\n         .exceptionally(throwable -> {\n           if (throwable.getCause() instanceof CancellationException) {\n", "next_change": {"commit": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 725db3c0..bfd75f72 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -543,7 +578,19 @@ public class GameService implements InitializingBean {\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), NONE); // TODO: use leaderboard information from queue to display right rating\n+              String ratingType = gameLaunchMessage.getRatingType();\n+\n+              if (ratingType == null) {\n+                log.warn(\"Rating type not in game launch message using MatchedQueueRatingType\");\n+                ratingType = matchedQueueRatingType;\n+              }\n+\n+              if (ratingType == null) {\n+                log.warn(\"matchedQueueRatingType null using default\");\n+                ratingType = DEFAULT_RATING_TYPE;\n+              }\n+\n+              startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), ratingType);\n             }))\n         .exceptionally(throwable -> {\n           if (throwable.getCause() instanceof CancellationException) {\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex bfd75f72..0bd6dadd 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -581,12 +580,7 @@ public class GameService implements InitializingBean {\n               String ratingType = gameLaunchMessage.getRatingType();\n \n               if (ratingType == null) {\n-                log.warn(\"Rating type not in game launch message using MatchedQueueRatingType\");\n-                ratingType = matchedQueueRatingType;\n-              }\n-\n-              if (ratingType == null) {\n-                log.warn(\"matchedQueueRatingType null using default\");\n+                log.warn(\"Rating type not in game launch message using default\");\n                 ratingType = DEFAULT_RATING_TYPE;\n               }\n \n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 0bd6dadd..12b2504e 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -566,44 +532,34 @@ public class GameService implements InitializingBean {\n     log.info(\"Matchmaking search has been started\");\n     inMatchmakerQueue = true;\n \n-    return modService.getFeaturedMod(FAF.getTechnicalName())\n+    CompletableFuture<Void> matchmakerFuture = modService.getFeaturedMod(FAF.getTechnicalName())\n         .thenAccept(featuredModBean -> updateGameIfNecessary(featuredModBean, null, emptyMap(), emptySet()))\n         .thenCompose(aVoid -> fafService.startSearchMatchmaker())\n-        .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapname())\n+        .thenAccept((gameLaunchMessage) -> downloadMapIfNecessary(gameLaunchMessage.getMapName())\n             .thenRun(() -> {\n-              gameLaunchMessage.setArgs(new ArrayList<>(gameLaunchMessage.getArgs()));\n-\n               gameLaunchMessage.getArgs().add(\"/team \" + gameLaunchMessage.getTeam());\n               gameLaunchMessage.getArgs().add(\"/players \" + gameLaunchMessage.getExpectedPlayers());\n               gameLaunchMessage.getArgs().add(\"/startspot \" + gameLaunchMessage.getMapPosition());\n \n-              String ratingType = gameLaunchMessage.getRatingType();\n-\n-              if (ratingType == null) {\n-                log.warn(\"Rating type not in game launch message using default\");\n-                ratingType = DEFAULT_RATING_TYPE;\n-              }\n+              String ratingType = gameLaunchMessage.getLeaderboard();\n \n               startGame(gameLaunchMessage, gameLaunchMessage.getFaction(), ratingType);\n-            }))\n-        .exceptionally(throwable -> {\n-          if (throwable.getCause() instanceof CancellationException) {\n-            log.info(\"Matchmaking search has been cancelled\");\n+            }));\n+\n+    matchmakerFuture.whenComplete((aVoid, throwable) -> {\n+          inMatchmakerQueue = false;\n+          if (throwable != null) {\n+            if (throwable instanceof CancellationException) {\n+              log.info(\"Matchmaking search has been cancelled\");\n+            } else {\n+              log.warn(\"Matchmade game could not be started\", throwable);\n+            }\n           } else {\n-            log.warn(\"Matchmade game could not be started\", throwable);\n+            log.debug(\"Matchmaker queue exited\");\n           }\n-          return null;\n         });\n-  }\n \n-  public void onMatchmakerSearchStopped() {\n-    if (inMatchmakerQueue) {\n-      fafService.stopSearchMatchmaker();\n-      inMatchmakerQueue = false;\n-      log.debug(\"Matchmaker search stopped\");\n-    } else {\n-      log.debug(\"Matchmaker search has already been stopped, ignoring call\");\n-    }\n+    return matchmakerFuture;\n   }\n \n   /**\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GameService.java b/src/main/java/com/faforever/client/game/GameService.java\nindex 12b2504e..9aa52e8b 100644\n--- a/src/main/java/com/faforever/client/game/GameService.java\n+++ b/src/main/java/com/faforever/client/game/GameService.java\n", "chunk": "@@ -566,7 +565,7 @@ public class GameService implements InitializingBean {\n    * Returns the preferences the player is currently in. Returns {@code null} if not in a preferences.\n    */\n   @Nullable\n-  public Game getCurrentGame() {\n+  public GameBean getCurrentGame() {\n     synchronized (currentGame) {\n       return currentGame.get();\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "7262cedf49eaa15fdb65186350641dfb8c55c789", "committedDate": "2021-02-06 00:34:16 -0500", "message": "Add function for checking if we can start the replay"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "912afca1fe8607fe4d9b54a5c7292a7c227562d8", "committedDate": "2021-02-22 08:34:36 -0500", "message": "Fixes #2158"}, {"oid": "9e8012a6aa6e226ac301c370c7feeeee58a0246f", "committedDate": "2021-03-04 04:39:40 -0500", "message": "Add game log file to error message"}, {"oid": "dfb08aba4e85f85704a3ddf8f22ae18aad98f6e9", "committedDate": "2021-03-21 17:30:00 -0400", "message": "Initialize leaderBoardRatings to empty map (#2193)"}, {"oid": "a34452295fd58f2909d8b4407e872436755990f0", "committedDate": "2021-04-10 12:27:54 -0400", "message": "Move IRC to its own log to reduce clutter and remove fxml debug logging (#2204)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "6267dab4c21c53554e5eaaf1282300e4c0dfac2f", "committedDate": "2021-05-08 22:43:31 -0400", "message": "Remove observers from num players (#2234)"}, {"oid": "b4973376cc9ba9e10712ce9f9c1b294a846c4902", "committedDate": "2021-06-13 07:48:53 -0400", "message": "Remember password for rehost (#2267)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "51ab2c11b78a7a27d2148f86042bf5ee2a19bfa7", "committedDate": "2021-06-19 22:43:36 -0400", "message": " make games a synchronized list"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "cf2a55309adb9d57eb3452168baba220f2a2e161", "committedDate": "2021-07-12 19:05:07 -0400", "message": "Mask user details in log file (#2306)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "65578845c57bc4087165d84f6a8dbfd533d1f053", "committedDate": "2021-07-25 16:44:14 -0400", "message": "Use full path in game error for log"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}, {"oid": "176fc85b84d81065204f6b1e75e1c73974fc7899", "committedDate": "2021-09-27 18:42:58 -0400", "message": "Create new gameoptions command line switch (#2339)"}, {"oid": "3fa639d4202ad594ede0c5965b0c28c03e193ff6", "committedDate": "2021-10-14 07:15:30 -0400", "message": "Add ability to close matchmaker games when match is cancelled"}, {"oid": "de179c3dc3dfcda3670dc0eb097d1062d48e052a", "committedDate": "2021-10-18 22:23:08 -0400", "message": "Only notify of cancellation when game is closed (#2396)"}, {"oid": "44cd76e631f58b50c1396fc6d5fe41ade66310c8", "committedDate": "2021-11-01 21:16:47 -0400", "message": "Return same future when already in matchmakerQueue (#2412)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "59a2459fe9ff1c6012a2df0e3fcec2503018e201", "committedDate": "2021-11-06 09:53:53 -0400", "message": "specify all command args and use all games in game count (#2395)"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "faa59d3ad8015f006584a89249f37e5cb175e4ec", "committedDate": "2021-12-13 23:26:00 -0500", "message": "Remove FaInitGenerator and simplify GameUpdate Logic (#2439)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "fe5f0ee3e1ca8df2c6355508f42a73effabad466", "committedDate": "2022-01-23 10:30:21 -0500", "message": "Add button to open log file on crash (#2541)"}, {"oid": "e7906975308e2a81875014823f8cd71519c1ee6d", "committedDate": "2022-01-30 08:42:11 -0500", "message": "Remove connection listener when game service is disposed (#2553)"}, {"oid": "fb1a7dcc58b10241195bd8c590a8d29ec5ae89b2", "committedDate": "2022-02-11 16:53:33 -0500", "message": "Replace embedded login web view with login via browser (#2338)"}, {"oid": "dc8d6fd7906e7b373871850fc5584e0c3b52a31d", "committedDate": "2022-02-16 20:11:12 -0500", "message": "Use synchronized map for gameToId (#2564)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "ab8cf13350f390780dc8bd841c247a250f71de97", "committedDate": "2022-02-20 00:16:01 -0500", "message": "Simplify playerStatus listener logic (#2572)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "d1bda0c6960e6ad884c89f1fa9ec3485d4401334", "committedDate": "2022-04-30 18:36:19 -0400", "message": "Restore Game Session and Lobby connection properly (#2681)"}, {"oid": "e87926ce0612b6e719ad78a8d65fbd741f8de672", "committedDate": "2022-07-07 20:07:01 -0400", "message": "Get coturn servers from the api (#2732)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "cd5ce92de93f23123fa6e8a6f36f9c0478ecde40", "committedDate": "2022-09-18 08:33:12 -0400", "message": "Send division name to game on start for matchmaker games (#2793)"}, {"oid": "d48de94568a61210fc24a19630dfad162bff60f3", "committedDate": "2022-10-16 15:59:29 -0400", "message": "Compatibility changes for ICE adapter with telemetry features (#2815)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "674703b3b7a7601973f527c1e0109a4fa33752e2", "committedDate": "2022-11-13 10:07:29 -0500", "message": "Simplify Game Bean (#2846)"}, {"oid": "e67e8b0e8f0c511e38eea9bf6cbc473d1d6c322f", "committedDate": "2022-11-24 08:53:35 -0500", "message": "Notify that a lobby is full when you watching a replay (#2847)"}, {"oid": "6c36398851869464028531b0b6b2ec71eab1d4c9", "committedDate": "2023-01-28 09:12:54 -0500", "message": "Remove uses of isWindows outside OS determination (#2901)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "9085a382406539e9389e2f881c979b184269f355", "committedDate": "2023-02-20 10:46:45 -0500", "message": "Fix data race between playerinfo and gameinfo messages (#2920)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "c19e7c2f4b3e8f29fbfa742d89a9ec445f3ff272", "committedDate": "2023-02-24 07:39:01 -0500", "message": "Use bindings and properties for team card controllers (#2926)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "1c672a6df80e7c15696969c3ffdb6ebc51e32270", "committedDate": "2023-03-05 07:29:54 -0500", "message": "Only notify friend joined on addition to game"}, {"oid": "05ffe3288430b5457e97bfca99ca52a7cbac994e", "committedDate": "2023-03-05 13:45:07 +0000", "message": "Ensure game list updated when type updated (#2934)"}, {"oid": "d82ab86d6cf39d9f6ec92def641759315ded890f", "committedDate": "2023-03-11 13:03:45 -0500", "message": "Activate player listener on fx thread"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "b65435ba7bd6de5c8f681c0efaf2dd8a71a59977", "committedDate": "2023-03-28 19:37:19 -0400", "message": "Allow watching replays while in queue (#2945)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NTYxMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536785612", "body": "I believe these can be removed with the @Data at top", "bodyText": "I believe these can be removed with the @DaTa at top", "bodyHTML": "<p dir=\"auto\">I believe these can be removed with the <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/DaTa/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DaTa\">@DaTa</a> at top</p>", "author": "Sheikah45", "createdAt": "2020-12-05T14:20:13Z", "path": "src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java", "diffHunk": "@@ -4,86 +4,47 @@\n import com.faforever.client.remote.domain.FafServerMessageType;\n import com.faforever.client.remote.domain.RatingRange;\n import com.google.gson.annotations.SerializedName;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.Setter;\n \n import java.util.List;\n \n public class MatchmakerInfoMessage extends FafServerMessage {\n \n+  @Data\n   public static class MatchmakerQueue {\n \n-    private QueueName queueName;\n+    private String queueName;\n     private String queuePopTime;\n+    @SerializedName(\"team_size\")\n+    private int teamSize;\n+    @SerializedName(\"num_players\")\n+    private int numPlayers;\n+\n+    // The boundaries indicate the ranges applicable for other searching players,\n+    // boundarys.size() therefore indicates the players currently in queue\n     @SerializedName(\"boundary_75s\")\n     private List<RatingRange> boundary75s;\n     @SerializedName(\"boundary_80s\")\n     private List<RatingRange> boundary80s;\n \n-    public static enum QueueName {\n-      @SerializedName(\"ladder1v1\")\n-      LADDER_1V1\n-    }\n-\n-    public MatchmakerQueue(QueueName queueName, String queuePopTime, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n+    public MatchmakerQueue(String queueName, String queuePopTime, int teamSize, int numPlayers, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n       this.queueName = queueName;\n       this.queuePopTime = queuePopTime;\n+      this.teamSize = teamSize;\n+      this.numPlayers = numPlayers;\n       this.boundary75s = boundary75s;\n       this.boundary80s = boundary80s;\n     }\n \n-    public QueueName getQueueName() {\n-      return queueName;\n-    }\n-\n-    public void setQueueName(QueueName queueName) {\n-      this.queueName = queueName;\n-    }\n-\n-    public String getQueuePopTime() {\n-      return queuePopTime;\n-    }\n-\n-    public void setQueuePopTime(String queuePopTime) {\n-      this.queuePopTime = queuePopTime;\n-    }\n-\n-    public List<RatingRange> getBoundary75s() {\n-      return boundary75s;\n-    }\n-\n-    public void setBoundary75s(List<RatingRange> boundary75s) {\n-      this.boundary75s = boundary75s;\n-    }\n-\n-    public List<RatingRange> getBoundary80s() {\n-      return boundary80s;\n-    }\n-\n-    public void setBoundary80s(List<RatingRange> boundary80s) {\n-      this.boundary80s = boundary80s;\n-    }\n   }\n-\n-  private String action;\n+  @Getter\n+  @Setter", "originalCommit": "506f696bf0fb72c82a1dd6569b1d24c461397b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNjE3OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536826178", "bodyText": "The @DaTa annotation is only for the nested class", "author": "BlackYps", "createdAt": "2020-12-05T17:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NTYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\nindex 49139cf9..c27dc705 100644\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n", "chunk": "@@ -38,13 +36,74 @@ public class MatchmakerInfoMessage extends FafServerMessage {\n       this.boundary80s = boundary80s;\n     }\n \n+    public String getQueueName() {\n+      return queueName;\n+    }\n+\n+    public void setQueueName(String queueName) {\n+      this.queueName = queueName;\n+    }\n+\n+    public String getQueuePopTime() {\n+      return queuePopTime;\n+    }\n+\n+    public void setQueuePopTime(String queuePopTime) {\n+      this.queuePopTime = queuePopTime;\n+    }\n+\n+    public List<RatingRange> getBoundary75s() {\n+      return boundary75s;\n+    }\n+\n+    public void setBoundary75s(List<RatingRange> boundary75s) {\n+      this.boundary75s = boundary75s;\n+    }\n+\n+    public List<RatingRange> getBoundary80s() {\n+      return boundary80s;\n+    }\n+\n+    public void setBoundary80s(List<RatingRange> boundary80s) {\n+      this.boundary80s = boundary80s;\n+    }\n+\n+    public int getTeamSize() {\n+      return teamSize;\n+    }\n+\n+    public void setTeamSize(int team_size) {\n+      this.teamSize = team_size;\n+    }\n+\n+    public int getNumPlayers() {\n+      return numPlayers;\n+    }\n+\n+    public void setNumPlayers(int numPlayers) {\n+      this.numPlayers = numPlayers;\n+    }\n   }\n-  @Getter\n-  @Setter\n   private List<MatchmakerQueue> queues;\n \n   public MatchmakerInfoMessage() {\n     super(FafServerMessageType.MATCHMAKER_INFO);\n   }\n \n+\n+  public String getAction() {\n+    return action;\n+  }\n+\n+  public void setAction(String action) {\n+    this.action = action;\n+  }\n+\n+  public List<MatchmakerQueue> getQueues() {\n+    return queues;\n+  }\n+\n+  public void setQueues(List<MatchmakerQueue> queues) {\n+    this.queues = queues;\n+  }\n }\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\nindex c27dc705..49139cf9 100644\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n", "chunk": "@@ -36,74 +38,13 @@ public class MatchmakerInfoMessage extends FafServerMessage {\n       this.boundary80s = boundary80s;\n     }\n \n-    public String getQueueName() {\n-      return queueName;\n-    }\n-\n-    public void setQueueName(String queueName) {\n-      this.queueName = queueName;\n-    }\n-\n-    public String getQueuePopTime() {\n-      return queuePopTime;\n-    }\n-\n-    public void setQueuePopTime(String queuePopTime) {\n-      this.queuePopTime = queuePopTime;\n-    }\n-\n-    public List<RatingRange> getBoundary75s() {\n-      return boundary75s;\n-    }\n-\n-    public void setBoundary75s(List<RatingRange> boundary75s) {\n-      this.boundary75s = boundary75s;\n-    }\n-\n-    public List<RatingRange> getBoundary80s() {\n-      return boundary80s;\n-    }\n-\n-    public void setBoundary80s(List<RatingRange> boundary80s) {\n-      this.boundary80s = boundary80s;\n-    }\n-\n-    public int getTeamSize() {\n-      return teamSize;\n-    }\n-\n-    public void setTeamSize(int team_size) {\n-      this.teamSize = team_size;\n-    }\n-\n-    public int getNumPlayers() {\n-      return numPlayers;\n-    }\n-\n-    public void setNumPlayers(int numPlayers) {\n-      this.numPlayers = numPlayers;\n-    }\n   }\n+  @Getter\n+  @Setter\n   private List<MatchmakerQueue> queues;\n \n   public MatchmakerInfoMessage() {\n     super(FafServerMessageType.MATCHMAKER_INFO);\n   }\n \n-\n-  public String getAction() {\n-    return action;\n-  }\n-\n-  public void setAction(String action) {\n-    this.action = action;\n-  }\n-\n-  public List<MatchmakerQueue> getQueues() {\n-    return queues;\n-  }\n-\n-  public void setQueues(List<MatchmakerQueue> queues) {\n-    this.queues = queues;\n-  }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\nindex 49139cf9..258e5401 100644\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n", "chunk": "@@ -39,12 +44,4 @@ public class MatchmakerInfoMessage extends FafServerMessage {\n     }\n \n   }\n-  @Getter\n-  @Setter\n-  private List<MatchmakerQueue> queues;\n-\n-  public MatchmakerInfoMessage() {\n-    super(FafServerMessageType.MATCHMAKER_INFO);\n-  }\n-\n }\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java b/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\ndeleted file mode 100644\nindex 258e5401..00000000\n--- a/src/main/java/com/faforever/client/rankedmatch/MatchmakerInfoMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,47 +0,0 @@\n-package com.faforever.client.rankedmatch;\n-\n-import com.faforever.client.remote.domain.FafServerMessage;\n-import com.faforever.client.remote.domain.FafServerMessageType;\n-import com.faforever.client.remote.domain.RatingRange;\n-import com.google.gson.annotations.SerializedName;\n-import lombok.Data;\n-import lombok.Getter;\n-import lombok.Setter;\n-\n-import java.util.List;\n-\n-@Getter\n-@Setter\n-public class MatchmakerInfoMessage extends FafServerMessage {\n-  private List<MatchmakerQueue> queues;\n-\n-  public MatchmakerInfoMessage() {\n-    super(FafServerMessageType.MATCHMAKER_INFO);\n-  }\n-\n-  @Data\n-  public static class MatchmakerQueue {\n-\n-    private String queueName;\n-    private String queuePopTime;\n-    private int teamSize;\n-    private int numPlayers;\n-\n-    // The boundaries indicate the ranges applicable for other searching players,\n-    // boundarys.size() therefore indicates the players currently in queue\n-    @SerializedName(\"boundary_75s\")\n-    private List<RatingRange> boundary75s;\n-    @SerializedName(\"boundary_80s\")\n-    private List<RatingRange> boundary80s;\n-\n-    public MatchmakerQueue(String queueName, String queuePopTime, int teamSize, int numPlayers, List<RatingRange> boundary75s, List<RatingRange> boundary80s) {\n-      this.queueName = queueName;\n-      this.queuePopTime = queuePopTime;\n-      this.teamSize = teamSize;\n-      this.numPlayers = numPlayers;\n-      this.boundary75s = boundary75s;\n-      this.boundary80s = boundary80s;\n-    }\n-\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4ODA2Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536788066", "body": "JavaFxUtil.bindManagedToVisible", "bodyText": "JavaFxUtil.bindManagedToVisible", "bodyHTML": "<p dir=\"auto\">JavaFxUtil.bindManagedToVisible</p>", "author": "Sheikah45", "createdAt": "2020-12-05T14:25:44Z", "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<Node> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public Node queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+\n+  private Timeline queuePopTimeUpdater;\n+\n+  private MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n+        queue.playersInQueueProperty()));\n+\n+    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n+    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n+    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());", "originalCommit": "506f696bf0fb72c82a1dd6569b1d24c461397b05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4385daf18b21429cd163c5d239caa74f40d9845", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex aeb1471d..8e6b89f1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -86,18 +81,16 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n-    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n-    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n       }\n     });\n \n", "next_change": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 8e6b89f1..f53be866 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -58,39 +60,44 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   @Override\n   public void initialize() {\n     eventBus.register(this);\n-    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n-      if ((double) newValue > 150.0) {\n-        joinLeaveQueueButton.setText(\n-            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n-      } else {\n-        joinLeaveQueueButton.setText(\n-            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n       }\n     });\n   }\n \n   @Override\n-  public VBox getRoot() {\n+  public Node getRoot() {\n     return queueItemRoot;\n   }\n \n-  public void setQueue(MatchmakingQueue queue) {\n+  void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n+    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n+    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n+    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n       }\n     });\n \n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex f53be866..f65375bf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -79,25 +72,23 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n     return queueItemRoot;\n   }\n \n-  void setQueue(MatchmakingQueue queue) {\n+  public void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n-    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n-    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n       }\n     });\n \n", "next_change": {"commit": "dc2d3117782a2b139a02e51508741fb581197491", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex f65375bf..ec73c4fc 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -94,8 +96,10 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n \n     joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n         () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+            || !teamMatchmakingService.getPlayersInGame().isEmpty()\n             || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n-        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n+        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty(),\n+        teamMatchmakingService.getPlayersInGame()\n     ));\n     queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n     queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n", "next_change": {"commit": "6bc898e1955c41f87f97b267761c12eba21bf319", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex ec73c4fc..5415d742 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -104,8 +100,10 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n     queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n \n-    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+    setQueuePopTimeUpdater(queue);\n+  }\n \n+  private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n     Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n         Instant now = Instant.now();\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex aeb1471d..19fd1843 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -60,58 +61,53 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n   @Override\n   public void initialize() {\n     eventBus.register(this);\n-    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n-      @Override\n-      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n-        if ((double) newValue > 150.0) {\n-          joinLeaveQueueButton.setText(\n-              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n-        } else {\n-          joinLeaveQueueButton.setText(\n-              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n-        }\n-      }\n-    });\n+    joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n+    joinLeaveQueueButton.setEllipsisString(\"\");\n+    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n   @Override\n-  public Node getRoot() {\n+  public VBox getRoot() {\n     return queueItemRoot;\n   }\n \n   public void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n+    joinLeaveQueueButton.setText(i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName())));\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n-    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n-    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+        default -> log.warn(\"Unexpected matching status: \" + newValue);\n       }\n     });\n \n     joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n         () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+            || !teamMatchmakingService.getPlayersInGame().isEmpty()\n             || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n-        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n+        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty(),\n+        teamMatchmakingService.getPlayersInGame()\n     ));\n     queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n     queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n \n-    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+    setQueuePopTimeUpdater(queue);\n+  }\n \n-    queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n+  private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n+    Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n         Instant now = Instant.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 19fd1843..d9604063 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -91,19 +90,33 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n         case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n         default -> log.warn(\"Unexpected matching status: \" + newValue);\n       }\n-    });\n+    };\n+  }\n \n-    joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n-        () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n-            || !teamMatchmakingService.getPlayersInGame().isEmpty()\n-            || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n-        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty(),\n-        teamMatchmakingService.getPlayersInGame()\n-    ));\n-    queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n-    queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n \n+  public void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+    joinLeaveQueueButton.setText(i18n.getOrDefault(queue.getTechnicalName(), String.format(QUEUE_I18N_PATTERN, queue.getTechnicalName())));\n     setQueuePopTimeUpdater(queue);\n+\n+    JavaFxUtil.addAndTriggerListener(queue.matchingStatusProperty(), new WeakChangeListener<>(queueMatchStatusChangeListener));\n+    JavaFxUtil.addAndTriggerListener(queue.playersInQueueProperty(), new WeakInvalidationListener(queuePopulationInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().getMembers(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n+  }\n+\n+  private void setQueueButtonState() {\n+    boolean disable = teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+        || teamMatchmakingService.partyMembersNotReady()\n+        || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null));\n+    JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n   }\n \n   private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n", "next_change": {"commit": "9653a226f9b0238b7692400162268b46bfa257f5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex d9604063..484ae2f0 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -115,7 +115,7 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   private void setQueueButtonState() {\n     boolean disable = teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n         || teamMatchmakingService.partyMembersNotReady()\n-        || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null));\n+        || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer());\n     JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n   }\n \n", "next_change": {"commit": "a1e4b6913e8bb1a5135dbb2a0b98c77eff7bc0d2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 484ae2f0..c3e86504 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -105,15 +108,17 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n     JavaFxUtil.addAndTriggerListener(queue.matchingStatusProperty(), new WeakChangeListener<>(queueMatchStatusChangeListener));\n     JavaFxUtil.addAndTriggerListener(queue.playersInQueueProperty(), new WeakInvalidationListener(queuePopulationInvalidationListener));\n-    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().getMembers(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n-    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n-    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n-    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(partyPropertyInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().getMembers(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(fafService.connectionStateProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n     JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n   }\n \n   private void setQueueButtonState() {\n-    boolean disable = teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+    boolean disable = fafService.getLobbyConnectionState() != ConnectionState.CONNECTED\n+        || teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n         || teamMatchmakingService.partyMembersNotReady()\n         || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer());\n     JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex c3e86504..25042e32 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -112,22 +113,22 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n     JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n     JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(fafService.connectionStateProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(userService.connectionStateProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n     JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n   }\n \n   private void setQueueButtonState() {\n-    boolean disable = fafService.getLobbyConnectionState() != ConnectionState.CONNECTED\n+    boolean disable = userService.getConnectionState() != ConnectionState.CONNECTED\n         || teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n         || teamMatchmakingService.partyMembersNotReady()\n         || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer());\n     JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n   }\n \n-  private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n+  private void setQueuePopTimeUpdater(MatchmakerQueueBean queue) {\n     Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n-        Instant now = Instant.now();\n+        OffsetDateTime now = OffsetDateTime.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n         if (!timeUntilPopQueue.isNegative()) {\n           queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 25042e32..3922b9c1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -131,9 +132,8 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n         OffsetDateTime now = OffsetDateTime.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n         if (!timeUntilPopQueue.isNegative()) {\n-          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n-              timeUntilPopQueue.toMinutes(),\n-              timeUntilPopQueue.toSecondsPart()).toUpperCase());\n+          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\", timeUntilPopQueue.toMinutes(), timeUntilPopQueue.toSecondsPart())\n+              .toUpperCase());\n         }\n       }\n     }), new KeyFrame(javafx.util.Duration.seconds(1)));\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 3922b9c1..0a261767 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -141,17 +139,11 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queuePopTimeUpdater.play();\n   }\n \n-  private void disableMatchStatus() {\n-    matchFoundLabel.setVisible(false);\n-    matchStartingLabel.setVisible(false);\n-    matchCancelledLabel.setVisible(false);\n-  }\n-\n-  public void onJoinLeaveQueueClicked(ActionEvent actionEvent) {\n-    if (queue.isJoined()) {\n-      teamMatchmakingService.leaveQueue(queue);\n+  public void onJoinLeaveQueueClicked() {\n+    if (queueJoined.getValue()) {\n+      teamMatchmakingService.leaveQueue(getQueue());\n     } else {\n-      teamMatchmakingService.joinQueue(queue).thenAccept(success -> {\n+      teamMatchmakingService.joinQueue(getQueue()).thenAccept(success -> {\n         if (!success) {\n           joinLeaveQueueButton.setSelected(false);\n           refreshingLabel.setVisible(false);\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 0a261767..7d10fbbb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -139,20 +146,6 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queuePopTimeUpdater.play();\n   }\n \n-  public void onJoinLeaveQueueClicked() {\n-    if (queueJoined.getValue()) {\n-      teamMatchmakingService.leaveQueue(getQueue());\n-    } else {\n-      teamMatchmakingService.joinQueue(getQueue()).thenAccept(success -> {\n-        if (!success) {\n-          joinLeaveQueueButton.setSelected(false);\n-          refreshingLabel.setVisible(false);\n-        }\n-      });\n-    }\n-    refreshingLabel.setVisible(true);\n-  }\n-\n   public void showMapPool() {\n     eventBus.post(new ShowMapPoolEvent(getQueue()));\n   }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a1e4b6913e8bb1a5135dbb2a0b98c77eff7bc0d2", "committedDate": "2021-07-22 20:27:32 -0400", "message": "Remove sources of not on fxApplication and asking for player when no logged in."}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "281448853b1da106a17713898858bb33bbe04a91", "committedDate": "2021-10-14 07:12:58 -0400", "message": "Change names and alignment"}, {"oid": "8c7620da7b56d5a3e16e3107bdfc63a75dbba6f3", "committedDate": "2021-10-29 22:00:13 -0400", "message": "Make TokenService thread safe (#2408)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1613daa8d3de6a63d049913865bdbf50c8f37b94", "committedDate": "2023-02-25 20:35:17 -0500", "message": "Set queue labels on load"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MjIzOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r536792239", "body": "We need to make sure this listener is removed if a player leaves the party", "bodyText": "We need to make sure this listener is removed if a player leaves the party", "bodyHTML": "<p dir=\"auto\">We need to make sure this listener is removed if a player leaves the party</p>", "author": "Sheikah45", "createdAt": "2020-12-05T14:34:37Z", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatChannelUser;\n+import com.faforever.client.chat.ChatService;\n+import com.faforever.client.chat.ChatUserContextMenuController;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final ChatService chatService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  private ChatChannelUser chatUser;\n+  //TODO: this is a bit hacky\n+  private WeakReference<ChatUserContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n+    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n+\n+    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n+        StringUtils.hasText(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n+    gameCountLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n+        player.numberOfGamesProperty()));\n+\n+    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n+    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n+    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n+    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue == PlayerStatus.IDLE) {\n+        Platform.runLater(() -> {\n+          playerStatusImageView.setVisible(false);\n+          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        });\n+      } else {\n+        Platform.runLater(() -> {\n+          playerStatusImageView.setVisible(true);\n+          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        });\n+      }", "originalCommit": "506f696bf0fb72c82a1dd6569b1d24c461397b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3MDkxNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542570915", "bodyText": "Everytime a partymember leaves or joines the player cards get rerendered, that means it clears all children from the pane and instantiates new controllers. I am not sure, if this also cleans up the controllers, or if we need to do some form of garbage collection", "author": "BlackYps", "createdAt": "2020-12-14T17:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MjIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc2d3117782a2b139a02e51508741fb581197491", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex f5199475..d0c56c5a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -89,48 +90,54 @@ public class PartyMemberItemController implements Controller<Node> {\n     //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n     chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n \n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.hasText(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    initializeBindings();\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n+\n+    selectFactionsBasedOnParty();\n+  }\n \n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n     avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n     avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n     leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n \n     clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n     clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-\n     usernameLabel.textProperty().bind(player.usernameProperty());\n-\n     leagueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n         player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n     gameCountLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n         player.numberOfGamesProperty()));\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n \n     BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n     kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n-    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n-    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n-\n-    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue == PlayerStatus.IDLE) {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(false);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        });\n-      } else {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(true);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        });\n-      }\n-    });\n-\n-    selectFactionsBasedOnParty();\n+    JavaFxUtil.bindManagedToVisible(kickPlayerButton);\n   }\n \n   private void selectFactionsBasedOnParty() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex f5199475..0bb28821 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -86,51 +81,55 @@ public class PartyMemberItemController implements Controller<Node> {\n \n   public void setMember(PartyMember member) {\n     this.player = member.getPlayer();\n-    //TODO: this is a bit hacky, a chat channel user is required to create a context menu as in the chat tab (for foeing/befriending/messaging people...)\n-    chatUser = new ChatChannelUser(player.getUsername(), chatService.getChatUserColor(player.getUsername()), false, player);\n \n-    countryImageView.imageProperty().bind(createObjectBinding(() -> countryFlagService.loadCountryFlag(\n-        StringUtils.hasText(player.getCountry()) ? \"\" : player.getCountry()).orElse(null), player.countryProperty()));\n+    initializeBindings();\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n+\n+    selectFactionsBasedOnParty();\n+  }\n \n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n     avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n     avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n     leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n \n     clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n     clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-\n     usernameLabel.textProperty().bind(player.usernameProperty());\n-\n     leagueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n         player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n     gameCountLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n         player.numberOfGamesProperty()));\n+    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n \n     BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n     kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    kickPlayerButton.managedProperty().bind(kickPlayerButton.visibleProperty());\n-    playerStatusImageView.managedProperty().bind(playerStatusImageView.visibleProperty());\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n-    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n-\n-    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    playerService.getPlayerForUsername(player.getUsername()).get().statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue == PlayerStatus.IDLE) {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(false);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        });\n-      } else {\n-        Platform.runLater(() -> {\n-          playerStatusImageView.setVisible(true);\n-          playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        });\n-      }\n-    });\n-\n-    selectFactionsBasedOnParty();\n+    JavaFxUtil.bindManagedToVisible(kickPlayerButton);\n   }\n \n   private void selectFactionsBasedOnParty() {\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0bb28821..0b62f17e 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -80,72 +81,80 @@ public class PartyMemberItemController implements Controller<Node> {\n   }\n \n   public void setMember(PartyMember member) {\n-    this.player = member.getPlayer();\n-\n-    initializeBindings();\n-    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+    Assert.checkNotNullIllegalState(player, \"Party member already set\");\n+    player = member.getPlayer();\n \n+    // TODO: replace this with divisionproperty once it is available\n+    leagueImageView.setVisible(false);\n+    leagueLabel.setText(i18n.get(\"leaderboard.divisionName\").toUpperCase());\n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n-    markMemberBusy(player.statusProperty().get());\n \n+    addListeners();\n     selectFactionsBasedOnParty();\n   }\n \n-  private void markMemberBusy(PlayerStatus status) {\n-    if (status != PlayerStatus.IDLE) {\n-      Platform.runLater(() -> {\n-        playerStatusImageView.setVisible(true);\n-        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      });\n-    } else {\n-      Platform.runLater(() -> {\n-        playerStatusImageView.setVisible(false);\n-        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      });\n-    }\n+  private void initializeListeners() {\n+    playerStatusInvalidationListener = observable -> setMemberGameStatus();\n+    playerPropertiesInvalidationListener = observable -> setPlayerProperties();\n+    partyOwnerInvalidationListener = observable -> setPartyOwnerProperties();\n+  }\n+\n+  private void setMemberGameStatus() {\n+    boolean inGame = player.getStatus() != PlayerStatus.IDLE;\n+    JavaFxUtil.runLater(() -> {\n+      playerStatusImageView.setVisible(inGame);\n+      playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, inGame);\n+    });\n+  }\n+\n+  private void setPartyOwnerProperties() {\n+    Player currentPlayer = playerService.getCurrentPlayer().orElseThrow(() -> new IllegalStateException(\"Current Player not set\"));\n+    Player owner = teamMatchmakingService.getParty().getOwner();\n+    JavaFxUtil.runLater(() -> {\n+      crownLabel.setVisible(owner == player);\n+      kickPlayerButton.setVisible(owner == currentPlayer && player != currentPlayer);\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, owner == player);\n+    });\n+  }\n+\n+  private void setPlayerProperties() {\n+    Image countryFlag = countryFlagService.loadCountryFlag(player.getCountry()).orElse(null);\n+    Image avatarImage = Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl());\n+    String clanTag = Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan());\n+    JavaFxUtil.runLater(() -> {\n+      countryImageView.setImage(countryFlag);\n+      avatarImageView.setImage(avatarImage);\n+      clanLabel.setVisible(!Strings.isNullOrEmpty(player.getClan()));\n+      clanLabel.setText(clanTag);\n+      gameCountLabel.setText(i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase());\n+      usernameLabel.setText(player.getUsername());\n+    });\n   }\n \n-  private void initializeBindings() {\n-    countryImageView.imageProperty().bind(createObjectBinding(() ->\n-        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n-\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-    leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n-        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n-    gameCountLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n-        player.numberOfGamesProperty()));\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n-\n-    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n-    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    JavaFxUtil.bindManagedToVisible(kickPlayerButton);\n+  private void addListeners() {\n+    JavaFxUtil.addAndTriggerListener(player.clanProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.avatarUrlProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.countryProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.numberOfGamesProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.usernameProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(player.statusProperty(), new WeakInvalidationListener(playerStatusInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(partyOwnerInvalidationListener));\n   }\n \n   private void selectFactionsBasedOnParty() {\n-    uefLabel.setDisable(!isFactionSelectedInParty(Faction.UEF));\n-    aeonLabel.setDisable(!isFactionSelectedInParty(Faction.AEON));\n-    cybranLabel.setDisable(!isFactionSelectedInParty(Faction.CYBRAN));\n-    seraphimLabel.setDisable(!isFactionSelectedInParty(Faction.SERAPHIM));\n+    uefLabel.setDisable(factionIsNotSelected(Faction.UEF));\n+    aeonLabel.setDisable(factionIsNotSelected(Faction.AEON));\n+    cybranLabel.setDisable(factionIsNotSelected(Faction.CYBRAN));\n+    seraphimLabel.setDisable(factionIsNotSelected(Faction.SERAPHIM));\n   }\n \n-  private boolean isFactionSelectedInParty(Faction faction) {\n+  private boolean factionIsNotSelected(Faction faction) {\n     return teamMatchmakingService.getParty().getMembers().stream()\n-        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+        .noneMatch(member -> member.getPlayer() == player && member.getFactions().contains(faction));\n   }\n \n   public void onKickPlayerButtonClicked(ActionEvent actionEvent) {\n-    teamMatchmakingService.kickPlayerFromParty(this.player);\n+    teamMatchmakingService.kickPlayerFromParty(player);\n   }\n \n   public void onContextMenuRequested(ContextMenuEvent event) {\n", "next_change": {"commit": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0b62f17e..ade773e9 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -153,23 +182,20 @@ public class PartyMemberItemController implements Controller<Node> {\n         .noneMatch(member -> member.getPlayer() == player && member.getFactions().contains(faction));\n   }\n \n-  public void onKickPlayerButtonClicked(ActionEvent actionEvent) {\n+  public void onKickPlayerButtonClicked() {\n     teamMatchmakingService.kickPlayerFromParty(player);\n   }\n \n   public void onContextMenuRequested(ContextMenuEvent event) {\n-    if (contextMenuController != null) {\n-      PartyMemberContextMenuController controller = contextMenuController.get();\n-      if (controller != null) {\n-        controller.getContextMenu().show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n-        return;\n-      }\n-    }\n-\n-    PartyMemberContextMenuController controller = uiService.loadFxml(\"theme/play/teammatchmaking/party_member_context_menu.fxml\");\n-    controller.setPlayer(player);\n-    controller.getContextMenu().show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n-\n-    contextMenuController = new WeakReference<>(controller);\n+    ContextMenuBuilder.newBuilder(context)\n+        .addItem(ShowPlayerInfoMenuItem.class, player)\n+        .addItem(SendPrivateMessageMenuItem.class, player.getUsername())\n+        .addItem(CopyUsernameMenuItem.class, player.getUsername())\n+        .addSeparator()\n+        .addItem(ReportPlayerMenuItem.class, player)\n+        .addSeparator()\n+        .addItem(ViewReplaysMenuItem.class, player)\n+        .build()\n+        .show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n   }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "committedDate": "2021-10-23 08:51:24 -0400", "message": "Utilize inheritance for context menus (#2381)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"oid": "b4385daf18b21429cd163c5d239caa74f40d9845", "url": "https://github.com/FAForever/downlords-faf-client/commit/b4385daf18b21429cd163c5d239caa74f40d9845", "message": "Refactor partychat", "committedDate": "2020-12-07T10:58:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjM3Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022372", "body": "TODO what also refer to an issue if you make a TODO", "bodyText": "TODO what also refer to an issue if you make a TODO", "bodyHTML": "<p dir=\"auto\">TODO what also refer to an issue if you make a TODO</p>", "author": "1-alex98", "createdAt": "2020-12-13T22:40:51Z", "path": "src/main/java/com/faforever/client/remote/MockFafServerAccessor.java", "diffHunk": "@@ -245,17 +234,17 @@ public void requestMatchmakerInfo() {\n   }\n \n   @Override\n-  public CompletableFuture<GameLaunchMessage> startSearchLadder1v1(Faction faction) {\n-    logger.debug(\"Searching 1v1 match with faction: {}\", faction);\n+  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+    logger.debug(\"Starting matchmaker game\");\n     GameLaunchMessage gameLaunchMessage = new GameLaunchMessage();\n     gameLaunchMessage.setUid(123);\n-    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName());\n+    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName()); // TODO", "originalCommit": "ba436113c98b78d863a04b0dcec8154039b5c14f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NzU3OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542477579", "bodyText": "I am not sure, I guess it refers to changing the gamemode to a matchmaking mode. However we use FAF gamemode, so I guess this todo is obsolete.", "author": "BlackYps", "createdAt": "2020-12-14T15:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\nindex f1243b63..e279fd9a 100644\n--- a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n+++ b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n", "chunk": "@@ -238,7 +238,7 @@ public class MockFafServerAccessor implements FafServerAccessor {\n     logger.debug(\"Starting matchmaker game\");\n     GameLaunchMessage gameLaunchMessage = new GameLaunchMessage();\n     gameLaunchMessage.setUid(123);\n-    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName()); // TODO\n+    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName());\n     return CompletableFuture.completedFuture(gameLaunchMessage);\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\nindex f1243b63..e279fd9a 100644\n--- a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n+++ b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n", "chunk": "@@ -238,7 +238,7 @@ public class MockFafServerAccessor implements FafServerAccessor {\n     logger.debug(\"Starting matchmaker game\");\n     GameLaunchMessage gameLaunchMessage = new GameLaunchMessage();\n     gameLaunchMessage.setUid(123);\n-    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName()); // TODO\n+    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName());\n     return CompletableFuture.completedFuture(gameLaunchMessage);\n   }\n \n", "next_change": {"commit": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\nindex e279fd9a..208687e0 100644\n--- a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n+++ b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n", "chunk": "@@ -235,7 +231,7 @@ public class MockFafServerAccessor implements FafServerAccessor {\n \n   @Override\n   public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n-    logger.debug(\"Starting matchmaker game\");\n+    log.debug(\"Starting matchmaker game\");\n     GameLaunchMessage gameLaunchMessage = new GameLaunchMessage();\n     gameLaunchMessage.setUid(123);\n     gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName());\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\nindex 208687e0..f3407810 100644\n--- a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n+++ b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n", "chunk": "@@ -232,9 +225,9 @@ public class MockFafServerAccessor implements FafServerAccessor {\n   @Override\n   public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n     log.debug(\"Starting matchmaker game\");\n-    GameLaunchMessage gameLaunchMessage = new GameLaunchMessage();\n-    gameLaunchMessage.setUid(123);\n-    gameLaunchMessage.setMod(KnownFeaturedMod.DEFAULT.getTechnicalName());\n+    GameLaunchMessage gameLaunchMessage = new GameLaunchMessage(List.of(\"/ratingcolor d8d8d8d8\", \"/numgames 1234\"), 1234, \"faf\",\n+        \"\", \"\", 0, 0, null,\n+        null, LobbyMode.DEFAULT_LOBBY, \"\");\n     return CompletableFuture.completedFuture(gameLaunchMessage);\n   }\n \n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\nindex f3407810..c8df30a8 100644\n--- a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n+++ b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n", "chunk": "@@ -223,21 +128,16 @@ public class MockFafServerAccessor implements FafServerAccessor {\n   }\n \n   @Override\n-  public CompletableFuture<GameLaunchMessage> startSearchMatchmaker() {\n+  public CompletableFuture<GameLaunchResponse> startSearchMatchmaker() {\n     log.debug(\"Starting matchmaker game\");\n-    GameLaunchMessage gameLaunchMessage = new GameLaunchMessage(List.of(\"/ratingcolor d8d8d8d8\", \"/numgames 1234\"), 1234, \"faf\",\n-        \"\", \"\", 0, 0, null,\n-        null, LobbyMode.DEFAULT_LOBBY, \"\");\n+    GameLaunchResponse gameLaunchMessage = new GameLaunchResponse(1234, \"\", \"faf\", LobbyMode.DEFAULT_LOBBY, \"\",\n+        List.of(\"/ratingcolor d8d8d8d8\", \"/numgames 1234\"), \"\", null,\n+        null, null, null);\n     return CompletableFuture.completedFuture(gameLaunchMessage);\n   }\n \n   @Override\n-  public void stopSearchMatchmaker() {\n-\n-  }\n-\n-  @Override\n-  public void sendGpgMessage(GpgOutboundMessage message) {\n+  public void sendGpgMessage(GpgGameOutboundMessage message) {\n \n   }\n \n", "next_change": {"commit": "88881f449a93629aceba0539fc634ffd353870a0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java b/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\ndeleted file mode 100644\nindex c8df30a8..00000000\n--- a/src/main/java/com/faforever/client/remote/MockFafServerAccessor.java\n+++ /dev/null\n", "chunk": "@@ -1,228 +0,0 @@\n-package com.faforever.client.remote;\n-\n-import com.faforever.client.FafClientApplication;\n-import com.faforever.client.game.NewGameInfo;\n-import com.faforever.client.i18n.I18n;\n-import com.faforever.client.net.ConnectionState;\n-import com.faforever.client.notification.NotificationService;\n-import com.faforever.client.task.CompletableTask;\n-import com.faforever.client.task.TaskService;\n-import com.faforever.client.teammatchmaking.MatchmakingQueue;\n-import com.faforever.commons.lobby.Faction;\n-import com.faforever.commons.lobby.GameLaunchResponse;\n-import com.faforever.commons.lobby.GpgGameOutboundMessage;\n-import com.faforever.commons.lobby.IceServer;\n-import com.faforever.commons.lobby.LobbyMode;\n-import com.faforever.commons.lobby.LoginSuccessResponse;\n-import com.faforever.commons.lobby.MatchmakerState;\n-import com.faforever.commons.lobby.Player.Avatar;\n-import com.faforever.commons.lobby.ServerMessage;\n-import com.google.common.eventbus.EventBus;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.ReadOnlyObjectProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.context.annotation.Profile;\n-import org.springframework.stereotype.Component;\n-\n-import java.net.URL;\n-import java.util.List;\n-import java.util.Timer;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Consumer;\n-\n-import static com.faforever.client.task.CompletableTask.Priority.HIGH;\n-\n-@Lazy\n-@Component\n-@Profile(FafClientApplication.PROFILE_OFFLINE)\n-@RequiredArgsConstructor\n-@Slf4j\n-// NOSONAR\n-public class MockFafServerAccessor implements FafServerAccessor {\n-\n-  private static final String USER_NAME = \"MockUser\";\n-  private final Timer timer = new Timer(\"LobbyServerAccessorTimer\", true);\n-\n-  private final TaskService taskService;\n-  private final NotificationService notificationService;\n-  private final I18n i18n;\n-  private final EventBus eventBus;\n-\n-  private final ObjectProperty<ConnectionState> connectionState = new SimpleObjectProperty<>(ConnectionState.DISCONNECTED);\n-\n-  @Override\n-  @SuppressWarnings(\"unchecked\")\n-  public <T extends ServerMessage> void addEventListener(Class<T> type, Consumer<T> listener) {\n-\n-  }\n-\n-  @Override\n-  public ConnectionState getConnectionState() {\n-    return connectionState.get();\n-  }\n-\n-  @Override\n-  public ReadOnlyObjectProperty<ConnectionState> connectionStateProperty() {\n-    return connectionState;\n-  }\n-\n-  @Override\n-  public CompletableFuture<LoginSuccessResponse> connectAndLogIn() {\n-    return CompletableFuture.completedFuture(null);\n-  }\n-\n-  @Override\n-  public CompletableFuture<GameLaunchResponse> requestHostGame(NewGameInfo newGameInfo) {\n-    return taskService.submitTask(new CompletableTask<GameLaunchResponse>(HIGH) {\n-      @Override\n-      protected GameLaunchResponse call() throws Exception {\n-        updateTitle(\"Hosting game\");\n-\n-        return new GameLaunchResponse(1234, \"\", \"faf\", LobbyMode.DEFAULT_LOBBY, \"\",\n-            List.of(\"/ratingcolor d8d8d8d8\", \"/numgames 1234\"), \"\", null,\n-             null, null, null);\n-      }\n-    }).getFuture();\n-  }\n-\n-  @Override\n-  public CompletableFuture<GameLaunchResponse> requestJoinGame(int gameId, String password) {\n-    return taskService.submitTask(new CompletableTask<GameLaunchResponse>(HIGH) {\n-      @Override\n-      protected GameLaunchResponse call() throws Exception {\n-        updateTitle(\"Joining game\");\n-\n-        return new GameLaunchResponse(1234, \"\", \"faf\", LobbyMode.DEFAULT_LOBBY, \"\",\n-            List.of(\"/ratingcolor d8d8d8d8\", \"/numgames 1234\"), \"\", null,\n-            null, null, null);\n-      }\n-    }).getFuture();\n-  }\n-\n-  @Override\n-  public void disconnect() {\n-\n-  }\n-\n-  @Override\n-  public void reconnect() {\n-\n-  }\n-\n-  @Override\n-  public void addFriend(int playerId) {\n-\n-  }\n-\n-  @Override\n-  public void addFoe(int playerId) {\n-\n-  }\n-\n-  @Override\n-  public void requestMatchmakerInfo() {\n-\n-  }\n-\n-  @Override\n-  public CompletableFuture<GameLaunchResponse> startSearchMatchmaker() {\n-    log.debug(\"Starting matchmaker game\");\n-    GameLaunchResponse gameLaunchMessage = new GameLaunchResponse(1234, \"\", \"faf\", LobbyMode.DEFAULT_LOBBY, \"\",\n-        List.of(\"/ratingcolor d8d8d8d8\", \"/numgames 1234\"), \"\", null,\n-        null, null, null);\n-    return CompletableFuture.completedFuture(gameLaunchMessage);\n-  }\n-\n-  @Override\n-  public void sendGpgMessage(GpgGameOutboundMessage message) {\n-\n-  }\n-\n-  @Override\n-  public void removeFriend(int playerId) {\n-\n-  }\n-\n-  @Override\n-  public void removeFoe(int playerId) {\n-\n-  }\n-\n-  @Override\n-  public void selectAvatar(URL url) {\n-\n-  }\n-\n-  @Override\n-  public void closePlayersGame(int playerId) {\n-\n-  }\n-\n-  @Override\n-  public void closePlayersLobby(int playerId) {\n-\n-  }\n-\n-  @Override\n-  public void broadcastMessage(String message) {\n-\n-  }\n-\n-  @Override\n-  public CompletableFuture<List<Avatar>> getAvailableAvatars() {\n-    return CompletableFuture.completedFuture(List.of());\n-  }\n-\n-  @Override\n-  public CompletableFuture<List<IceServer>> getIceServers() {\n-    return CompletableFuture.completedFuture(List.of());\n-  }\n-\n-  @Override\n-  public void restoreGameSession(int id) {\n-\n-  }\n-\n-  @Override\n-  public void gameMatchmaking(MatchmakingQueue queue, MatchmakerState state) {\n-\n-  }\n-\n-  @Override\n-  public void inviteToParty(com.faforever.client.player.Player recipient) {\n-\n-  }\n-\n-  @Override\n-  public void acceptPartyInvite(com.faforever.client.player.Player sender) {\n-\n-  }\n-\n-  @Override\n-  public void kickPlayerFromParty(com.faforever.client.player.Player kickedPlayer) {\n-\n-  }\n-\n-  @Override\n-  public void readyParty() {\n-\n-  }\n-\n-  @Override\n-  public void unreadyParty() {\n-\n-  }\n-\n-  @Override\n-  public void leaveParty() {\n-\n-  }\n-\n-  @Override\n-  public void setPartyFactions(List<Faction> factions) {\n-\n-  }\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "4e36b5fc243b0688503d3343a453989abb3439e4", "committedDate": "2021-03-23 09:09:15 -0400", "message": "remove depreciated fields from player object (#2197)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "88881f449a93629aceba0539fc634ffd353870a0", "committedDate": "2021-09-26 07:40:47 -0400", "message": "Add ability to start games offline and remove mock services (#2353)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjc1NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022755", "body": "Extract into method", "bodyText": "Extract into method", "bodyHTML": "<p dir=\"auto\">Extract into method</p>", "author": "1-alex98", "createdAt": "2020-12-13T22:42:49Z", "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.layout.VBox;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<VBox> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public VBox queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+  @VisibleForTesting\n+  protected MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue > 150.0) {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+      } else {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {\n+    this.queue = queue;\n+\n+    playersInQueueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n+        queue.playersInQueueProperty()));\n+\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n+    queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n+      disableMatchStatus();\n+      if (newValue == null) {\n+        return;\n+      }\n+      switch (newValue) {\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+      }\n+    });\n+\n+    joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+            || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n+        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n+    ));\n+    queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n+    queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n+\n+    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+\n+    Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n+      if (queue.getQueuePopTime() != null) {\n+        Instant now = Instant.now();\n+        Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n+        if (!timeUntilPopQueue.isNegative()) {\n+          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n+              timeUntilPopQueue.toMinutes(),\n+              timeUntilPopQueue.toSecondsPart()).toUpperCase());\n+        }\n+      }", "originalCommit": "ba436113c98b78d863a04b0dcec8154039b5c14f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 8e6b89f1..25042e32 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -91,22 +92,43 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n         case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n         case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n         case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+        default -> log.warn(\"Unexpected matching status: \" + newValue);\n       }\n-    });\n+    };\n+  }\n \n-    joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n-        () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n-            || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n-        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n-    ));\n-    queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n-    queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n \n-    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+  public void setQueue(MatchmakerQueueBean queue) {\n+    this.queue = queue;\n+    joinLeaveQueueButton.setText(i18n.getOrDefault(queue.getTechnicalName(), String.format(QUEUE_I18N_PATTERN, queue.getTechnicalName())));\n+    setQueuePopTimeUpdater(queue);\n+\n+    JavaFxUtil.addAndTriggerListener(queue.matchingStatusProperty(), new WeakChangeListener<>(queueMatchStatusChangeListener));\n+    JavaFxUtil.addAndTriggerListener(queue.playersInQueueProperty(), new WeakInvalidationListener(queuePopulationInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().getMembers(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addListener(userService.connectionStateProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n+  }\n+\n+  private void setQueueButtonState() {\n+    boolean disable = userService.getConnectionState() != ConnectionState.CONNECTED\n+        || teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+        || teamMatchmakingService.partyMembersNotReady()\n+        || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer());\n+    JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n+  }\n \n+  private void setQueuePopTimeUpdater(MatchmakerQueueBean queue) {\n     Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n-        Instant now = Instant.now();\n+        OffsetDateTime now = OffsetDateTime.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n         if (!timeUntilPopQueue.isNegative()) {\n           queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 25042e32..3922b9c1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -131,9 +132,8 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n         OffsetDateTime now = OffsetDateTime.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n         if (!timeUntilPopQueue.isNegative()) {\n-          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\",\n-              timeUntilPopQueue.toMinutes(),\n-              timeUntilPopQueue.toSecondsPart()).toUpperCase());\n+          queuePopTimeLabel.setText(i18n.get(\"teammatchmaking.queuePopTimer\", timeUntilPopQueue.toMinutes(), timeUntilPopQueue.toSecondsPart())\n+              .toUpperCase());\n         }\n       }\n     }), new KeyFrame(javafx.util.Duration.seconds(1)));\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 3922b9c1..0a261767 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -141,17 +139,11 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queuePopTimeUpdater.play();\n   }\n \n-  private void disableMatchStatus() {\n-    matchFoundLabel.setVisible(false);\n-    matchStartingLabel.setVisible(false);\n-    matchCancelledLabel.setVisible(false);\n-  }\n-\n-  public void onJoinLeaveQueueClicked(ActionEvent actionEvent) {\n-    if (queue.isJoined()) {\n-      teamMatchmakingService.leaveQueue(queue);\n+  public void onJoinLeaveQueueClicked() {\n+    if (queueJoined.getValue()) {\n+      teamMatchmakingService.leaveQueue(getQueue());\n     } else {\n-      teamMatchmakingService.joinQueue(queue).thenAccept(success -> {\n+      teamMatchmakingService.joinQueue(getQueue()).thenAccept(success -> {\n         if (!success) {\n           joinLeaveQueueButton.setSelected(false);\n           refreshingLabel.setVisible(false);\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 0a261767..7d10fbbb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -139,20 +146,6 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queuePopTimeUpdater.play();\n   }\n \n-  public void onJoinLeaveQueueClicked() {\n-    if (queueJoined.getValue()) {\n-      teamMatchmakingService.leaveQueue(getQueue());\n-    } else {\n-      teamMatchmakingService.joinQueue(getQueue()).thenAccept(success -> {\n-        if (!success) {\n-          joinLeaveQueueButton.setSelected(false);\n-          refreshingLabel.setVisible(false);\n-        }\n-      });\n-    }\n-    refreshingLabel.setVisible(true);\n-  }\n-\n   public void showMapPool() {\n     eventBus.post(new ShowMapPoolEvent(getQueue()));\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a1e4b6913e8bb1a5135dbb2a0b98c77eff7bc0d2", "committedDate": "2021-07-22 20:27:32 -0400", "message": "Remove sources of not on fxApplication and asking for player when no logged in."}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "281448853b1da106a17713898858bb33bbe04a91", "committedDate": "2021-10-14 07:12:58 -0400", "message": "Change names and alignment"}, {"oid": "8c7620da7b56d5a3e16e3107bdfc63a75dbba6f3", "committedDate": "2021-10-29 22:00:13 -0400", "message": "Make TokenService thread safe (#2408)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1613daa8d3de6a63d049913865bdbf50c8f37b94", "committedDate": "2023-02-25 20:35:17 -0500", "message": "Set queue labels on load"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMjgzMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542022833", "body": "the method is a little long", "bodyText": "the method is a little long", "bodyHTML": "<p dir=\"auto\">the method is a little long</p>", "author": "1-alex98", "createdAt": "2020-12-13T22:43:35Z", "path": "src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.ShowMapPoolEvent;\n+import com.faforever.client.player.PlayerService;\n+import com.google.common.eventbus.EventBus;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.layout.VBox;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+public class MatchmakingQueueItemController implements Controller<VBox> {\n+\n+  private final static String QUEUE_I18N_PATTERN = \"teammatchmaking.queue.%s.%s\";\n+\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final I18n i18n;\n+  private final EventBus eventBus;\n+\n+  public VBox queueItemRoot;\n+  public Label playersInQueueLabel;\n+  public Label queuePopTimeLabel;\n+  public ToggleButton joinLeaveQueueButton;\n+  public Label refreshingLabel;\n+  public Label matchFoundLabel;\n+  public Label matchStartingLabel;\n+  public Label matchCancelledLabel;\n+  public Button mapPoolButton;\n+\n+  @VisibleForTesting\n+  protected MatchmakingQueue queue;\n+\n+  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n+    this.playerService = playerService;\n+    this.teamMatchmakingService = teamMatchmakingService;\n+    this.i18n = i18n;\n+    this.eventBus = eventBus;\n+  }\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue > 150.0) {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+      } else {\n+        joinLeaveQueueButton.setText(\n+            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public VBox getRoot() {\n+    return queueItemRoot;\n+  }\n+\n+  public void setQueue(MatchmakingQueue queue) {", "originalCommit": "ba436113c98b78d863a04b0dcec8154039b5c14f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 8e6b89f1..f53be866 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -58,39 +60,44 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   @Override\n   public void initialize() {\n     eventBus.register(this);\n-    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n-      if ((double) newValue > 150.0) {\n-        joinLeaveQueueButton.setText(\n-            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n-      } else {\n-        joinLeaveQueueButton.setText(\n-            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+    joinLeaveQueueButton.widthProperty().addListener(new ChangeListener<Number>() {\n+      @Override\n+      public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n+        if ((double) newValue > 150.0) {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n+        } else {\n+          joinLeaveQueueButton.setText(\n+              i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n+        }\n       }\n     });\n   }\n \n   @Override\n-  public VBox getRoot() {\n+  public Node getRoot() {\n     return queueItemRoot;\n   }\n \n-  public void setQueue(MatchmakingQueue queue) {\n+  void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n+    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n+    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n+    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n       }\n     });\n \n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex f53be866..f65375bf 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -79,25 +72,23 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n     return queueItemRoot;\n   }\n \n-  void setQueue(MatchmakingQueue queue) {\n+  public void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n         queue.playersInQueueProperty()));\n \n-    matchFoundLabel.visibleProperty().bind(matchFoundLabel.managedProperty());\n-    matchStartingLabel.visibleProperty().bind(matchStartingLabel.managedProperty());\n-    matchCancelledLabel.visibleProperty().bind(matchCancelledLabel.managedProperty());\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n     queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n       }\n       switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setManaged(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setManaged(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setManaged(true);\n+        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n       }\n     });\n \n", "next_change": {"commit": "dc2d3117782a2b139a02e51508741fb581197491", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex f65375bf..ec73c4fc 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -94,8 +96,10 @@ public class MatchmakingQueueItemController implements Controller<Node> {\n \n     joinLeaveQueueButton.disableProperty().bind(createBooleanBinding(\n         () -> teamMatchmakingService.getParty().getMembers().size() > queue.getTeamSize()\n+            || !teamMatchmakingService.getPlayersInGame().isEmpty()\n             || !teamMatchmakingService.getParty().getOwner().equals(playerService.getCurrentPlayer().orElse(null)),\n-        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty()\n+        teamMatchmakingService.getParty().getMembers(), queue.teamSizeProperty(),\n+        teamMatchmakingService.getPlayersInGame()\n     ));\n     queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n     queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n", "next_change": {"commit": "6bc898e1955c41f87f97b267761c12eba21bf319", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex ec73c4fc..5415d742 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -104,8 +100,10 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     queue.joinedProperty().addListener(observable -> refreshingLabel.setVisible(false));\n     queue.joinedProperty().addListener(observable -> joinLeaveQueueButton.setSelected(queue.isJoined()));\n \n-    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+    setQueuePopTimeUpdater(queue);\n+  }\n \n+  private void setQueuePopTimeUpdater(MatchmakingQueue queue) {\n     Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n         Instant now = Instant.now();\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 8e6b89f1..19fd1843 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -58,15 +61,9 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   @Override\n   public void initialize() {\n     eventBus.register(this);\n-    joinLeaveQueueButton.widthProperty().addListener((observable, oldValue, newValue) -> {\n-      if ((double) newValue > 150.0) {\n-        joinLeaveQueueButton.setText(\n-            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"fullName\")));\n-      } else {\n-        joinLeaveQueueButton.setText(\n-            i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName(), \"shortName\")));\n-      }\n-    });\n+    joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n+    joinLeaveQueueButton.setEllipsisString(\"\");\n+    mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n   @Override\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 19fd1843..d9604063 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -49,38 +53,33 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   public Button mapPoolButton;\n \n   @VisibleForTesting\n-  protected MatchmakingQueue queue;\n-\n-  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n-    this.playerService = playerService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-    this.i18n = i18n;\n-    this.eventBus = eventBus;\n-  }\n+  MatchmakingQueue queue;\n+  private InvalidationListener partyPropertyInvalidationListener;\n+  private InvalidationListener queueStateInvalidationListener;\n+  private InvalidationListener queuePopulationInvalidationListener;\n+  private ChangeListener<MatchingStatus> queueMatchStatusChangeListener;\n \n   @Override\n   public void initialize() {\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n+\n+    initializeListeners();\n+\n     eventBus.register(this);\n     joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n     joinLeaveQueueButton.setEllipsisString(\"\");\n     mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n-  @Override\n-  public VBox getRoot() {\n-    return queueItemRoot;\n-  }\n-\n-  public void setQueue(MatchmakingQueue queue) {\n-    this.queue = queue;\n-    joinLeaveQueueButton.setText(i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName())));\n-\n-    playersInQueueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n-        queue.playersInQueueProperty()));\n-\n-    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n-    queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n+  private void initializeListeners() {\n+    partyPropertyInvalidationListener = observable -> setQueueButtonState();\n+    queueStateInvalidationListener = observable -> JavaFxUtil.runLater(() -> {\n+      refreshingLabel.setVisible(false);\n+      joinLeaveQueueButton.setSelected(queue.isJoined());\n+    });\n+    queuePopulationInvalidationListener = observable ->\n+        JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase()));\n+    queueMatchStatusChangeListener = (observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex d9604063..3922b9c1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -67,18 +70,17 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n     eventBus.register(this);\n     joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n-    joinLeaveQueueButton.setEllipsisString(\"\");\n     mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n   private void initializeListeners() {\n-    partyPropertyInvalidationListener = observable -> setQueueButtonState();\n+    queueButtonStateInvalidationListener = observable -> setQueueButtonState();\n     queueStateInvalidationListener = observable -> JavaFxUtil.runLater(() -> {\n       refreshingLabel.setVisible(false);\n       joinLeaveQueueButton.setSelected(queue.isJoined());\n     });\n-    queuePopulationInvalidationListener = observable ->\n-        JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase()));\n+    queuePopulationInvalidationListener = observable -> JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue())\n+        .toUpperCase()));\n     queueMatchStatusChangeListener = (observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n", "next_change": {"commit": "09d88f7599f827553f70d419e15fb7b34989c77d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 3922b9c1..af01f63b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -81,6 +83,8 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     });\n     queuePopulationInvalidationListener = observable -> JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue())\n         .toUpperCase()));\n+    queueGamesInvalidationListener = observable -> JavaFxUtil.runLater(() -> activeGamesLabel.setText(i18n.get(\"teammatchmaking.activeGames\", queue.getActiveGames())\n+        .toUpperCase()));\n     queueMatchStatusChangeListener = (observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n", "next_change": {"commit": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex af01f63b..409a6d79 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -58,47 +58,37 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n   @VisibleForTesting\n   MatchmakerQueueBean queue;\n-  private InvalidationListener queueButtonStateInvalidationListener;\n-  private InvalidationListener queueStateInvalidationListener;\n-  private InvalidationListener queuePopulationInvalidationListener;\n-  private InvalidationListener queueGamesInvalidationListener;\n-  private ChangeListener<MatchingStatus> queueMatchStatusChangeListener;\n+  private final SimpleInvalidationListener queueButtonStateInvalidationListener = this::setQueueButtonState;\n+  private final SimpleInvalidationListener queueStateInvalidationListener = () -> JavaFxUtil.runLater(() -> {\n+    refreshingLabel.setVisible(false);\n+    joinLeaveQueueButton.setSelected(queue.isJoined());\n+  });\n+  private final SimpleInvalidationListener queuePopulationInvalidationListener = this::setPlayersInQueueText;\n+\n+  private final SimpleInvalidationListener queueGamesInvalidationListener = this::setActiveGamesText;\n+\n+  private final SimpleChangeListener<MatchingStatus> queueMatchStatusChangeListener = newValue -> {\n+    disableMatchStatus();\n+    if (newValue == null) {\n+      return;\n+    }\n+    switch (newValue) {\n+      case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+      case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+      case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+      default -> log.warn(\"Unexpected matching status: \" + newValue);\n+    }\n+  };\n \n   @Override\n   public void initialize() {\n     JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n \n-    initializeListeners();\n-\n     eventBus.register(this);\n     joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n     mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n-  private void initializeListeners() {\n-    queueButtonStateInvalidationListener = observable -> setQueueButtonState();\n-    queueStateInvalidationListener = observable -> JavaFxUtil.runLater(() -> {\n-      refreshingLabel.setVisible(false);\n-      joinLeaveQueueButton.setSelected(queue.isJoined());\n-    });\n-    queuePopulationInvalidationListener = observable -> JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue())\n-        .toUpperCase()));\n-    queueGamesInvalidationListener = observable -> JavaFxUtil.runLater(() -> activeGamesLabel.setText(i18n.get(\"teammatchmaking.activeGames\", queue.getActiveGames())\n-        .toUpperCase()));\n-    queueMatchStatusChangeListener = (observable, oldValue, newValue) -> {\n-      disableMatchStatus();\n-      if (newValue == null) {\n-        return;\n-      }\n-      switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n-        default -> log.warn(\"Unexpected matching status: \" + newValue);\n-      }\n-    };\n-  }\n-\n   @Override\n   public VBox getRoot() {\n     return queueItemRoot;\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 409a6d79..0a261767 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -87,6 +76,43 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     eventBus.register(this);\n     joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n     mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+\n+    ObservableValue<MatchingStatus> matchingStatus = queue.flatMap(MatchmakerQueueBean::matchingStatusProperty);\n+    matchFoundLabel.visibleProperty().bind(matchingStatus.map(status -> status == MatchingStatus.MATCH_FOUND).orElse(false));\n+    matchStartingLabel.visibleProperty().bind(matchingStatus.map(status -> status == MatchingStatus.GAME_LAUNCHING).orElse(false));\n+    matchCancelledLabel.visibleProperty().bind(matchingStatus.map(status -> status == MatchingStatus.MATCH_CANCELLED).orElse(false));\n+\n+    joinLeaveQueueButton.textProperty()\n+        .bind(queue.map(MatchmakerQueueBean::getTechnicalName)\n+            .map(technicalName -> i18n.getOrDefault(technicalName, String.format(QUEUE_I18N_PATTERN, technicalName))));\n+\n+    playersInQueueLabel.textProperty()\n+        .bind(queue.flatMap(MatchmakerQueueBean::playersInQueueProperty)\n+            .map(numPlayers -> i18n.get(\"teammatchmaking.playersInQueue\", numPlayers))\n+            .map(String::toUpperCase));\n+\n+    activeGamesLabel.textProperty()\n+        .bind(queue.flatMap(MatchmakerQueueBean::activeGamesProperty)\n+            .map(numPlayers -> i18n.get(\"teammatchmaking.activeGames\", numPlayers))\n+            .map(String::toUpperCase));\n+\n+    BooleanBinding partyTooBig = Bindings.size(teamMatchmakingService.getParty().getMembers())\n+        .greaterThan(IntegerBinding.integerExpression(queue.flatMap(MatchmakerQueueBean::teamSizeProperty)));\n+\n+    BooleanExpression notPartyOwner = BooleanBinding.booleanExpression(teamMatchmakingService.getParty()\n+        .ownerProperty()\n+        .map(owner -> !owner.equals(playerService.getCurrentPlayer())));\n+\n+    joinLeaveQueueButton.disableProperty()\n+        .bind(userService.ownPlayerProperty().isNull()\n+            .or(queue.isNull())\n+            .or(partyTooBig)\n+            .or(teamMatchmakingService.partyMembersNotReadyProperty())\n+            .or(notPartyOwner));\n+\n+    queueJoined.addListener(queueStateInvalidationListener);\n+\n+    queue.addListener((SimpleChangeListener<MatchmakerQueueBean>) this::setQueuePopTimeUpdater);\n   }\n \n   @Override\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 0a261767..7d10fbbb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -101,16 +109,15 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n     BooleanExpression notPartyOwner = BooleanBinding.booleanExpression(teamMatchmakingService.getParty()\n         .ownerProperty()\n-        .map(owner -> !owner.equals(playerService.getCurrentPlayer())));\n+        .isNotEqualTo(playerService.currentPlayerProperty()));\n \n-    joinLeaveQueueButton.disableProperty()\n-        .bind(userService.ownPlayerProperty().isNull()\n+    selectButton.disableProperty()\n+        .bind(playerService.currentPlayerProperty().isNull()\n             .or(queue.isNull())\n             .or(partyTooBig)\n             .or(teamMatchmakingService.partyMembersNotReadyProperty())\n-            .or(notPartyOwner));\n-\n-    queueJoined.addListener(queueStateInvalidationListener);\n+            .or(notPartyOwner)\n+            .when(showing));\n \n     queue.addListener((SimpleChangeListener<MatchmakerQueueBean>) this::setQueuePopTimeUpdater);\n   }\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 409a6d79..0a261767 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -95,40 +121,7 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   }\n \n   public void setQueue(MatchmakerQueueBean queue) {\n-    this.queue = queue;\n-    joinLeaveQueueButton.setText(i18n.getOrDefault(queue.getTechnicalName(), String.format(QUEUE_I18N_PATTERN, queue.getTechnicalName())));\n-    setQueuePopTimeUpdater(queue);\n-\n-    JavaFxUtil.addAndTriggerListener(queue.matchingStatusProperty(), new WeakChangeListener<>(queueMatchStatusChangeListener));\n-    JavaFxUtil.addAndTriggerListener(queue.playersInQueueProperty(), new WeakInvalidationListener(queuePopulationInvalidationListener));\n-    JavaFxUtil.addAndTriggerListener(queue.activeGamesProperty(), new WeakInvalidationListener(queueGamesInvalidationListener));\n-    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty()\n-        .getMembers(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(teamMatchmakingService.getParty()\n-        .ownerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(userService.ownPlayerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n-  }\n-\n-  private void setPlayersInQueueText() {\n-    JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue())\n-        .toUpperCase()));\n-  }\n-\n-  private void setActiveGamesText() {\n-    JavaFxUtil.runLater(() -> activeGamesLabel.setText(i18n.get(\"teammatchmaking.activeGames\", queue.getActiveGames())\n-        .toUpperCase()));\n-  }\n-\n-  private void setQueueButtonState() {\n-    boolean disable = userService.getOwnPlayer() == null || teamMatchmakingService.getParty()\n-        .getMembers()\n-        .size() > queue.getTeamSize() || teamMatchmakingService.partyMembersNotReady() || !teamMatchmakingService.getParty()\n-        .getOwner()\n-        .equals(playerService.getCurrentPlayer());\n-    JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n+    this.queue.set(queue);\n   }\n \n   private void setQueuePopTimeUpdater(MatchmakerQueueBean queue) {\n", "next_change": {"commit": "1613daa8d3de6a63d049913865bdbf50c8f37b94", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 0a261767..aa7eeef1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -125,7 +125,7 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   }\n \n   private void setQueuePopTimeUpdater(MatchmakerQueueBean queue) {\n-    Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n+    Timeline queuePopTimeUpdater = new Timeline(new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n         OffsetDateTime now = OffsetDateTime.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 8e6b89f1..19fd1843 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -76,6 +73,7 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n   public void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n+    joinLeaveQueueButton.setText(i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName())));\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n", "next_change": {"commit": "8d66f9a7f480f5003041e59147024e5d27c385d2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 19fd1843..3792569f 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -73,7 +73,7 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n   public void setQueue(MatchmakingQueue queue) {\n     this.queue = queue;\n-    joinLeaveQueueButton.setText(i18n.get(String.format(QUEUE_I18N_PATTERN, queue.getQueueName())));\n+    joinLeaveQueueButton.setText(i18n.getOrDefault(queue.getQueueName(), String.format(QUEUE_I18N_PATTERN, queue.getQueueName())));\n \n     playersInQueueLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 3792569f..d9604063 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -50,37 +54,32 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n   @VisibleForTesting\n   MatchmakingQueue queue;\n-\n-  public MatchmakingQueueItemController(PlayerService playerService, TeamMatchmakingService teamMatchmakingService, I18n i18n, EventBus eventBus) {\n-    this.playerService = playerService;\n-    this.teamMatchmakingService = teamMatchmakingService;\n-    this.i18n = i18n;\n-    this.eventBus = eventBus;\n-  }\n+  private InvalidationListener partyPropertyInvalidationListener;\n+  private InvalidationListener queueStateInvalidationListener;\n+  private InvalidationListener queuePopulationInvalidationListener;\n+  private ChangeListener<MatchingStatus> queueMatchStatusChangeListener;\n \n   @Override\n   public void initialize() {\n+    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n+\n+    initializeListeners();\n+\n     eventBus.register(this);\n     joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n     joinLeaveQueueButton.setEllipsisString(\"\");\n     mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n-  @Override\n-  public VBox getRoot() {\n-    return queueItemRoot;\n-  }\n-\n-  public void setQueue(MatchmakingQueue queue) {\n-    this.queue = queue;\n-    joinLeaveQueueButton.setText(i18n.getOrDefault(queue.getQueueName(), String.format(QUEUE_I18N_PATTERN, queue.getQueueName())));\n-\n-    playersInQueueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase(),\n-        queue.playersInQueueProperty()));\n-\n-    JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n-    queue.matchingStatusProperty().addListener((observable, oldValue, newValue) -> {\n+  private void initializeListeners() {\n+    partyPropertyInvalidationListener = observable -> setQueueButtonState();\n+    queueStateInvalidationListener = observable -> JavaFxUtil.runLater(() -> {\n+      refreshingLabel.setVisible(false);\n+      joinLeaveQueueButton.setSelected(queue.isJoined());\n+    });\n+    queuePopulationInvalidationListener = observable ->\n+        JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase()));\n+    queueMatchStatusChangeListener = (observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n         return;\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex d9604063..3922b9c1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -67,18 +70,17 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n     eventBus.register(this);\n     joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n-    joinLeaveQueueButton.setEllipsisString(\"\");\n     mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n   private void initializeListeners() {\n-    partyPropertyInvalidationListener = observable -> setQueueButtonState();\n+    queueButtonStateInvalidationListener = observable -> setQueueButtonState();\n     queueStateInvalidationListener = observable -> JavaFxUtil.runLater(() -> {\n       refreshingLabel.setVisible(false);\n       joinLeaveQueueButton.setSelected(queue.isJoined());\n     });\n-    queuePopulationInvalidationListener = observable ->\n-        JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue()).toUpperCase()));\n+    queuePopulationInvalidationListener = observable -> JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue())\n+        .toUpperCase()));\n     queueMatchStatusChangeListener = (observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n", "next_change": {"commit": "09d88f7599f827553f70d419e15fb7b34989c77d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 3922b9c1..af01f63b 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -81,6 +83,8 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     });\n     queuePopulationInvalidationListener = observable -> JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue())\n         .toUpperCase()));\n+    queueGamesInvalidationListener = observable -> JavaFxUtil.runLater(() -> activeGamesLabel.setText(i18n.get(\"teammatchmaking.activeGames\", queue.getActiveGames())\n+        .toUpperCase()));\n     queueMatchStatusChangeListener = (observable, oldValue, newValue) -> {\n       disableMatchStatus();\n       if (newValue == null) {\n", "next_change": {"commit": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex af01f63b..409a6d79 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -58,47 +58,37 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n   @VisibleForTesting\n   MatchmakerQueueBean queue;\n-  private InvalidationListener queueButtonStateInvalidationListener;\n-  private InvalidationListener queueStateInvalidationListener;\n-  private InvalidationListener queuePopulationInvalidationListener;\n-  private InvalidationListener queueGamesInvalidationListener;\n-  private ChangeListener<MatchingStatus> queueMatchStatusChangeListener;\n+  private final SimpleInvalidationListener queueButtonStateInvalidationListener = this::setQueueButtonState;\n+  private final SimpleInvalidationListener queueStateInvalidationListener = () -> JavaFxUtil.runLater(() -> {\n+    refreshingLabel.setVisible(false);\n+    joinLeaveQueueButton.setSelected(queue.isJoined());\n+  });\n+  private final SimpleInvalidationListener queuePopulationInvalidationListener = this::setPlayersInQueueText;\n+\n+  private final SimpleInvalidationListener queueGamesInvalidationListener = this::setActiveGamesText;\n+\n+  private final SimpleChangeListener<MatchingStatus> queueMatchStatusChangeListener = newValue -> {\n+    disableMatchStatus();\n+    if (newValue == null) {\n+      return;\n+    }\n+    switch (newValue) {\n+      case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n+      case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n+      case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n+      default -> log.warn(\"Unexpected matching status: \" + newValue);\n+    }\n+  };\n \n   @Override\n   public void initialize() {\n     JavaFxUtil.bindManagedToVisible(matchFoundLabel, matchStartingLabel, matchCancelledLabel);\n \n-    initializeListeners();\n-\n     eventBus.register(this);\n     joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n     mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n   }\n \n-  private void initializeListeners() {\n-    queueButtonStateInvalidationListener = observable -> setQueueButtonState();\n-    queueStateInvalidationListener = observable -> JavaFxUtil.runLater(() -> {\n-      refreshingLabel.setVisible(false);\n-      joinLeaveQueueButton.setSelected(queue.isJoined());\n-    });\n-    queuePopulationInvalidationListener = observable -> JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue())\n-        .toUpperCase()));\n-    queueGamesInvalidationListener = observable -> JavaFxUtil.runLater(() -> activeGamesLabel.setText(i18n.get(\"teammatchmaking.activeGames\", queue.getActiveGames())\n-        .toUpperCase()));\n-    queueMatchStatusChangeListener = (observable, oldValue, newValue) -> {\n-      disableMatchStatus();\n-      if (newValue == null) {\n-        return;\n-      }\n-      switch (newValue) {\n-        case MATCH_FOUND -> matchFoundLabel.setVisible(true);\n-        case GAME_LAUNCHING -> matchStartingLabel.setVisible(true);\n-        case MATCH_CANCELLED -> matchCancelledLabel.setVisible(true);\n-        default -> log.warn(\"Unexpected matching status: \" + newValue);\n-      }\n-    };\n-  }\n-\n   @Override\n   public VBox getRoot() {\n     return queueItemRoot;\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 409a6d79..0a261767 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -87,6 +76,43 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n     eventBus.register(this);\n     joinLeaveQueueButton.setTextOverrun(OverrunStyle.WORD_ELLIPSIS);\n     mapPoolButton.setText(i18n.get(\"teammatchmaking.mapPool\").toUpperCase());\n+\n+    ObservableValue<MatchingStatus> matchingStatus = queue.flatMap(MatchmakerQueueBean::matchingStatusProperty);\n+    matchFoundLabel.visibleProperty().bind(matchingStatus.map(status -> status == MatchingStatus.MATCH_FOUND).orElse(false));\n+    matchStartingLabel.visibleProperty().bind(matchingStatus.map(status -> status == MatchingStatus.GAME_LAUNCHING).orElse(false));\n+    matchCancelledLabel.visibleProperty().bind(matchingStatus.map(status -> status == MatchingStatus.MATCH_CANCELLED).orElse(false));\n+\n+    joinLeaveQueueButton.textProperty()\n+        .bind(queue.map(MatchmakerQueueBean::getTechnicalName)\n+            .map(technicalName -> i18n.getOrDefault(technicalName, String.format(QUEUE_I18N_PATTERN, technicalName))));\n+\n+    playersInQueueLabel.textProperty()\n+        .bind(queue.flatMap(MatchmakerQueueBean::playersInQueueProperty)\n+            .map(numPlayers -> i18n.get(\"teammatchmaking.playersInQueue\", numPlayers))\n+            .map(String::toUpperCase));\n+\n+    activeGamesLabel.textProperty()\n+        .bind(queue.flatMap(MatchmakerQueueBean::activeGamesProperty)\n+            .map(numPlayers -> i18n.get(\"teammatchmaking.activeGames\", numPlayers))\n+            .map(String::toUpperCase));\n+\n+    BooleanBinding partyTooBig = Bindings.size(teamMatchmakingService.getParty().getMembers())\n+        .greaterThan(IntegerBinding.integerExpression(queue.flatMap(MatchmakerQueueBean::teamSizeProperty)));\n+\n+    BooleanExpression notPartyOwner = BooleanBinding.booleanExpression(teamMatchmakingService.getParty()\n+        .ownerProperty()\n+        .map(owner -> !owner.equals(playerService.getCurrentPlayer())));\n+\n+    joinLeaveQueueButton.disableProperty()\n+        .bind(userService.ownPlayerProperty().isNull()\n+            .or(queue.isNull())\n+            .or(partyTooBig)\n+            .or(teamMatchmakingService.partyMembersNotReadyProperty())\n+            .or(notPartyOwner));\n+\n+    queueJoined.addListener(queueStateInvalidationListener);\n+\n+    queue.addListener((SimpleChangeListener<MatchmakerQueueBean>) this::setQueuePopTimeUpdater);\n   }\n \n   @Override\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 0a261767..7d10fbbb 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -101,16 +109,15 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n \n     BooleanExpression notPartyOwner = BooleanBinding.booleanExpression(teamMatchmakingService.getParty()\n         .ownerProperty()\n-        .map(owner -> !owner.equals(playerService.getCurrentPlayer())));\n+        .isNotEqualTo(playerService.currentPlayerProperty()));\n \n-    joinLeaveQueueButton.disableProperty()\n-        .bind(userService.ownPlayerProperty().isNull()\n+    selectButton.disableProperty()\n+        .bind(playerService.currentPlayerProperty().isNull()\n             .or(queue.isNull())\n             .or(partyTooBig)\n             .or(teamMatchmakingService.partyMembersNotReadyProperty())\n-            .or(notPartyOwner));\n-\n-    queueJoined.addListener(queueStateInvalidationListener);\n+            .or(notPartyOwner)\n+            .when(showing));\n \n     queue.addListener((SimpleChangeListener<MatchmakerQueueBean>) this::setQueuePopTimeUpdater);\n   }\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 409a6d79..0a261767 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -95,40 +121,7 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   }\n \n   public void setQueue(MatchmakerQueueBean queue) {\n-    this.queue = queue;\n-    joinLeaveQueueButton.setText(i18n.getOrDefault(queue.getTechnicalName(), String.format(QUEUE_I18N_PATTERN, queue.getTechnicalName())));\n-    setQueuePopTimeUpdater(queue);\n-\n-    JavaFxUtil.addAndTriggerListener(queue.matchingStatusProperty(), new WeakChangeListener<>(queueMatchStatusChangeListener));\n-    JavaFxUtil.addAndTriggerListener(queue.playersInQueueProperty(), new WeakInvalidationListener(queuePopulationInvalidationListener));\n-    JavaFxUtil.addAndTriggerListener(queue.activeGamesProperty(), new WeakInvalidationListener(queueGamesInvalidationListener));\n-    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty()\n-        .getMembers(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(queue.teamSizeProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(teamMatchmakingService.getParty()\n-        .ownerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(teamMatchmakingService.partyMembersNotReadyProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addListener(userService.ownPlayerProperty(), new WeakInvalidationListener(queueButtonStateInvalidationListener));\n-    JavaFxUtil.addAndTriggerListener(queue.joinedProperty(), new WeakInvalidationListener(queueStateInvalidationListener));\n-  }\n-\n-  private void setPlayersInQueueText() {\n-    JavaFxUtil.runLater(() -> playersInQueueLabel.setText(i18n.get(\"teammatchmaking.playersInQueue\", queue.getPlayersInQueue())\n-        .toUpperCase()));\n-  }\n-\n-  private void setActiveGamesText() {\n-    JavaFxUtil.runLater(() -> activeGamesLabel.setText(i18n.get(\"teammatchmaking.activeGames\", queue.getActiveGames())\n-        .toUpperCase()));\n-  }\n-\n-  private void setQueueButtonState() {\n-    boolean disable = userService.getOwnPlayer() == null || teamMatchmakingService.getParty()\n-        .getMembers()\n-        .size() > queue.getTeamSize() || teamMatchmakingService.partyMembersNotReady() || !teamMatchmakingService.getParty()\n-        .getOwner()\n-        .equals(playerService.getCurrentPlayer());\n-    JavaFxUtil.runLater(() -> joinLeaveQueueButton.setDisable(disable));\n+    this.queue.set(queue);\n   }\n \n   private void setQueuePopTimeUpdater(MatchmakerQueueBean queue) {\n", "next_change": {"commit": "1613daa8d3de6a63d049913865bdbf50c8f37b94", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\nindex 0a261767..aa7eeef1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n", "chunk": "@@ -125,7 +125,7 @@ public class MatchmakingQueueItemController implements Controller<VBox> {\n   }\n \n   private void setQueuePopTimeUpdater(MatchmakerQueueBean queue) {\n-    Timeline queuePopTimeUpdater = new Timeline(1, new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n+    Timeline queuePopTimeUpdater = new Timeline(new KeyFrame(javafx.util.Duration.seconds(0), (ActionEvent event) -> {\n       if (queue.getQueuePopTime() != null) {\n         OffsetDateTime now = OffsetDateTime.now();\n         Duration timeUntilPopQueue = Duration.between(now, queue.getQueuePopTime());\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a1e4b6913e8bb1a5135dbb2a0b98c77eff7bc0d2", "committedDate": "2021-07-22 20:27:32 -0400", "message": "Remove sources of not on fxApplication and asking for player when no logged in."}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "281448853b1da106a17713898858bb33bbe04a91", "committedDate": "2021-10-14 07:12:58 -0400", "message": "Change names and alignment"}, {"oid": "8c7620da7b56d5a3e16e3107bdfc63a75dbba6f3", "committedDate": "2021-10-29 22:00:13 -0400", "message": "Make TokenService thread safe (#2408)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1613daa8d3de6a63d049913865bdbf50c8f37b94", "committedDate": "2023-02-25 20:35:17 -0500", "message": "Set queue labels on load"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyMzA2Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r542023066", "body": "extract method", "bodyText": "extract method", "bodyHTML": "<p dir=\"auto\">extract method</p>", "author": "1-alex98", "createdAt": "2020-12-13T22:44:35Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.ui.dialog.Dialog;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+      partyMemberPane.getChildren().clear();\n+      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+      for(int i = 0; i < members.size(); i++) {\n+        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+        controller.setMember(members.get(i));\n+        if (members.size() == 1) {\n+          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+        } else {\n+          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+        }\n+      }", "originalCommit": "ba436113c98b78d863a04b0dcec8154039b5c14f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7936a63a30c4691a77194e00c838a537184cfccb", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fa6baed8..382577d4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -120,14 +131,20 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       for(int i = 0; i < members.size(); i++) {\n         PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n         controller.setMember(members.get(i));\n-        if (members.size() == 1) {\n+        if (members.size() == 1)\n           partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n-        } else {\n+        else\n           partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n-        }\n       }\n     });\n \n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+\n     teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n       refreshingLabel.setVisible(false);\n       selectFactionsBasedOnParty();\n", "next_change": {"commit": "8f554c321468bac2c60105d0e9b003eba46b29d7", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 382577d4..31b7b463 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -131,20 +117,14 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       for(int i = 0; i < members.size(); i++) {\n         PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n         controller.setMember(members.get(i));\n-        if (members.size() == 1)\n+        if (members.size() == 1) {\n           partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n-        else\n+        } else {\n           partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+        }\n       }\n     });\n \n-    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n-        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n-        teamMatchmakingService.getParty().ownerProperty(),\n-        playerService.currentPlayerProperty()\n-    ));\n-    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n-\n     teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n       refreshingLabel.setVisible(false);\n       selectFactionsBasedOnParty();\n", "next_change": {"commit": "dc2d3117782a2b139a02e51508741fb581197491", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 31b7b463..3e6f572c 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -125,6 +129,14 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       }\n     });\n \n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n     teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n       refreshingLabel.setVisible(false);\n       selectFactionsBasedOnParty();\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fa6baed8..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -111,20 +113,21 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     initializeUppercaseText();\n     initializeBindings();\n \n-    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> {\n-      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n-          (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n-      List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n-      partyMemberPane.getChildren().clear();\n-      members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n-      for(int i = 0; i < members.size(); i++) {\n-        PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n-        controller.setMember(members.get(i));\n-        if (members.size() == 1) {\n-          partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n-        } else {\n-          partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n-        }\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n       }\n     });\n \n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fbafe994..0bb9235d 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -124,11 +139,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     });\n \n     player.statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue != PlayerStatus.IDLE) {\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      } else {\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      }\n+      JavaFxUtil.runLater(() -> {\n+        if (newValue != PlayerStatus.IDLE) {\n+          teamMatchmakingService.getPlayersInGame().add(player);\n+        } else {\n+          teamMatchmakingService.getPlayersInGame().remove(player);\n+        }\n+      });\n     });\n \n     teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n", "next_change": {"commit": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0bb9235d..67f6fa95 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -138,15 +138,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       }\n     });\n \n-    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n-      JavaFxUtil.runLater(() -> {\n-        if (newValue != PlayerStatus.IDLE) {\n-          teamMatchmakingService.getPlayersInGame().add(player);\n-        } else {\n-          teamMatchmakingService.getPlayersInGame().remove(player);\n-        }\n-      });\n-    });\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> JavaFxUtil.runLater(() -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    }));\n \n     teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n       refreshingLabel.setVisible(false);\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 67f6fa95..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -105,61 +103,34 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public ColumnConstraints column2;\n   public RowConstraints row2;\n   private Player player;\n-  private HashMap<Faction, ToggleButton> factionsToButtons;\n+  private Map<Faction, ToggleButton> factionsToButtons;\n   @VisibleForTesting\n   protected MatchmakingChatController matchmakingChatController;\n+  private InvalidationListener matchmakingQueuesLabelInvalidationListener;\n+  private InvalidationListener playerPropertiesInvalidationListener;\n+  private ChangeListener<Player> partyOwnerChangeListener;\n \n   @Override\n   public void initialize() {\n-    eventBus.register(this);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, leagueImageView);\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n+    eventBus.register(this);\n+\n+    factionsToButtons = Map.of(Faction.UEF, uefButton, Faction.AEON, aeonButton,\n+        Faction.CYBRAN, cybranButton, Faction.SERAPHIM, seraphimButton);\n+\n+    player = playerService.getCurrentPlayer().orElseThrow(() -> new IllegalStateException(\"Current Player not set\"));\n     initializeDynamicChatPosition();\n-    player = playerService.getCurrentPlayer().get();\n     initializeUppercaseText();\n-    initializeBindings();\n-\n-    factionsToButtons = new HashMap<>();\n-    factionsToButtons.put(Faction.AEON, aeonButton);\n-    factionsToButtons.put(Faction.UEF, uefButton);\n-    factionsToButtons.put(Faction.CYBRAN, cybranButton);\n-    factionsToButtons.put(Faction.SERAPHIM, seraphimButton);\n+    initializeListeners();\n \n     ObservableList<Faction> factions = preferencesService.getPreferences().getMatchmaker().getFactions();\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n+    teamMatchmakingService.requestMatchmakerInfo();\n \n-    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n-    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n-      renderQueues(); // The teamMatchmakingService may already have all queues collected\n-    }                 // so we won't get any updates on the following change listener\n-    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        renderQueues();\n-      }\n-    });\n-\n-    player.statusProperty().addListener((observable, oldValue, newValue) -> JavaFxUtil.runLater(() -> {\n-      if (newValue != PlayerStatus.IDLE) {\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      } else {\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      }\n-    }));\n-\n-    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n-      refreshingLabel.setVisible(false);\n-      selectFactionsBasedOnParty();\n-    });\n-\n-    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n-      if (matchmakingChatController != null) {\n-        matchmakingChatController.closeChannel();\n-      }\n-      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n-    });\n-    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n-\n-    fafService.requestMatchmakerInfo();\n+    // TODO: Use when leagues implemented\n+    leagueImageView.setVisible(false);\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": {"commit": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..014ae7a4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,9 +132,6 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n-\n-    // TODO: Use when leagues implemented\n-    leagueImageView.setVisible(false);\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 014ae7a4..e068bcb6 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,7 +130,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     initializeUppercaseText();\n     initializeListeners();\n \n-    ObservableList<Faction> factions = preferencesService.getPreferences().getMatchmaker().getFactions();\n+    ObservableList<Faction> factions = matchmakerPrefs.getFactions();\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n", "next_change": {"commit": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex e068bcb6..3fd7aac3 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,7 +131,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     player = playerService.getCurrentPlayer();\n     initializeDynamicChatPosition();\n     initializeUppercaseText();\n-    initializeListeners();\n+    addListeners();\n \n     ObservableList<Faction> factions = matchmakerPrefs.getFactions();\n     selectFactions(factions);\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 3fd7aac3..37806f04 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -137,6 +138,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n+    renderQueues();\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"oid": "7936a63a30c4691a77194e00c838a537184cfccb", "url": "https://github.com/FAForever/downlords-faf-client/commit/7936a63a30c4691a77194e00c838a537184cfccb", "message": "Fix merge errors", "committedDate": "2020-12-19T23:02:29Z", "type": "commit"}, {"oid": "8f554c321468bac2c60105d0e9b003eba46b29d7", "url": "https://github.com/FAForever/downlords-faf-client/commit/8f554c321468bac2c60105d0e9b003eba46b29d7", "message": "Refactoring\n\nUse Map instead of ImmutableMap\nUse List.of instead of Collections.emptyList\nClean imports\nExtract method in GameService\nUse line breaks in stream operations\nController refactoring", "committedDate": "2020-12-19T23:03:23Z", "type": "commit"}, {"oid": "411da96ef94f8c911fe64ba887f5e30260e4d642", "url": "https://github.com/FAForever/downlords-faf-client/commit/411da96ef94f8c911fe64ba887f5e30260e4d642", "message": "Improve invite dialog", "committedDate": "2020-12-20T00:12:02Z", "type": "commit"}, {"oid": "6a9b84530c0c6744fdc6e36e4ab133cccb55965b", "url": "https://github.com/FAForever/downlords-faf-client/commit/6a9b84530c0c6744fdc6e36e4ab133cccb55965b", "message": "Add more tests", "committedDate": "2020-12-20T00:12:02Z", "type": "commit"}, {"oid": "5e5cc4582645fa056588eb4a4cab463a72c9d682", "url": "https://github.com/FAForever/downlords-faf-client/commit/5e5cc4582645fa056588eb4a4cab463a72c9d682", "message": "Add logging when matchmaker search stopped", "committedDate": "2020-12-20T00:13:52Z", "type": "commit"}, {"oid": "6a7a51a60428a593bdd217aa5939c84fb6d54b25", "url": "https://github.com/FAForever/downlords-faf-client/commit/6a7a51a60428a593bdd217aa5939c84fb6d54b25", "message": "Fix missing info on partymember cards", "committedDate": "2020-12-20T00:13:52Z", "type": "commit"}, {"oid": "adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "url": "https://github.com/FAForever/downlords-faf-client/commit/adfe7a5cd79e54cfab1ae93d7cd54d1345705925", "message": "Refactoring\n\nMove method from Party.java to TeamMatchmakingService\nRefactor partychat logic\nCleanup todos\nReposition kick button", "committedDate": "2020-12-20T00:13:52Z", "type": "commit"}, {"oid": "95ba8394fa4afa1ef7473e847c41a0339fb85ad3", "url": "https://github.com/FAForever/downlords-faf-client/commit/95ba8394fa4afa1ef7473e847c41a0339fb85ad3", "message": "Add github actions", "committedDate": "2020-12-20T13:45:20Z", "type": "commit"}, {"oid": "dc2d3117782a2b139a02e51508741fb581197491", "url": "https://github.com/FAForever/downlords-faf-client/commit/dc2d3117782a2b139a02e51508741fb581197491", "message": "Disable queue buttons when someone is in a game", "committedDate": "2020-12-20T13:45:20Z", "type": "commit"}, {"oid": "3e0e68d82855851a4ab0aca69a06418550486f29", "url": "https://github.com/FAForever/downlords-faf-client/commit/3e0e68d82855851a4ab0aca69a06418550486f29", "message": "Change queue heading message when you are in queue", "committedDate": "2020-12-20T13:45:20Z", "type": "commit"}, {"oid": "392770c1e55a656b1770d1a6a6bf16f038a9cdf1", "url": "https://github.com/FAForever/downlords-faf-client/commit/392770c1e55a656b1770d1a6a6bf16f038a9cdf1", "message": "Remember factions", "committedDate": "2020-12-20T13:45:20Z", "type": "commit"}, {"oid": "6bc898e1955c41f87f97b267761c12eba21bf319", "url": "https://github.com/FAForever/downlords-faf-client/commit/6bc898e1955c41f87f97b267761c12eba21bf319", "message": "Refactoring", "committedDate": "2020-12-20T13:45:21Z", "type": "commit"}, {"oid": "2824223ed76fb452d6886470f5380f599cec4b93", "url": "https://github.com/FAForever/downlords-faf-client/commit/2824223ed76fb452d6886470f5380f599cec4b93", "message": "Cache api call and fix queue display bugs", "committedDate": "2020-12-20T13:45:21Z", "type": "commit"}, {"oid": "901c2727e7b4f0b304ae370161c8e76128b4fe5a", "url": "https://github.com/FAForever/downlords-faf-client/commit/901c2727e7b4f0b304ae370161c8e76128b4fe5a", "message": "Create new context menu for party members", "committedDate": "2020-12-20T13:45:21Z", "type": "commit"}, {"oid": "e8fe02f6752b97d8f20ee0010fd9905eee528d97", "url": "https://github.com/FAForever/downlords-faf-client/commit/e8fe02f6752b97d8f20ee0010fd9905eee528d97", "message": "merge branch 'develop' into feature/team-matchmaking", "committedDate": "2020-12-20T14:29:39Z", "type": "commit"}, {"oid": "e8fe02f6752b97d8f20ee0010fd9905eee528d97", "url": "https://github.com/FAForever/downlords-faf-client/commit/e8fe02f6752b97d8f20ee0010fd9905eee528d97", "message": "merge branch 'develop' into feature/team-matchmaking", "committedDate": "2020-12-20T14:29:39Z", "type": "forcePushed"}, {"oid": "857d045ad3caf57e21c8ec74f32171049a96cef9", "url": "https://github.com/FAForever/downlords-faf-client/commit/857d045ad3caf57e21c8ec74f32171049a96cef9", "message": "code cleanup", "committedDate": "2020-12-20T14:54:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MDgyNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r546740827", "body": "empty test", "bodyText": "empty test", "bodyHTML": "<p dir=\"auto\">empty test</p>", "author": "Sheikah45", "createdAt": "2020-12-21T14:37:29Z", "path": "src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.fa.relay.LobbyMode;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.GameService;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.OpenTeamMatchmakingEvent;\n+import com.faforever.client.net.ConnectionState;\n+import com.faforever.client.notification.ImmediateNotification;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.notification.PersistentNotification;\n+import com.faforever.client.notification.TransientNotification;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage;\n+import com.faforever.client.rankedmatch.MatchmakerInfoMessage.MatchmakerQueue;\n+import com.faforever.client.remote.FafServerAccessor;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.remote.domain.GameLaunchMessage;\n+import com.faforever.client.remote.domain.MatchCancelledMessage;\n+import com.faforever.client.remote.domain.MatchFoundMessage;\n+import com.faforever.client.remote.domain.MatchmakingState;\n+import com.faforever.client.remote.domain.PartyInfoMessage;\n+import com.faforever.client.remote.domain.PartyInviteMessage;\n+import com.faforever.client.remote.domain.PartyKickedMessage;\n+import com.faforever.client.remote.domain.SearchInfoMessage;\n+import com.faforever.client.teammatchmaking.MatchmakingQueue.MatchingStatus;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.google.common.eventbus.EventBus;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.faforever.client.notification.Severity.INFO;\n+import static com.faforever.client.notification.Severity.WARN;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {\n+\n+  @Mock\n+  private FafServerAccessor fafServerAccessor;\n+  @Mock\n+  private PlayerService playerService;\n+  @Mock\n+  private NotificationService notificationService;\n+  @Mock\n+  private PreferencesService preferencesService;\n+  @Mock\n+  private FafService fafService;\n+  @Mock\n+  private EventBus eventBus;\n+  @Mock\n+  private I18n i18n;\n+  @Mock\n+  private TaskScheduler taskScheduler;\n+  @Mock\n+  private GameService gameService;\n+  @Mock\n+  private Player player;\n+  @Mock\n+  private Player otherPlayer;\n+\n+  private TeamMatchmakingService instance;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    List<Player> playerList = new ArrayList<>();\n+    playerList.add(player);\n+    when(player.getStatus()).thenReturn(PlayerStatus.IDLE);\n+    when(playerService.getPlayersByIds(Collections.singletonList(1))).thenReturn(CompletableFuture.completedFuture(playerList));\n+    ReadOnlyObjectProperty<ConnectionState> state = new SimpleObjectProperty<>();\n+    when(fafService.connectionStateProperty()).thenReturn(state);\n+    ReadOnlyObjectProperty<Player> playerProperty = new SimpleObjectProperty<>();\n+    when(playerService.currentPlayerProperty()).thenReturn(playerProperty);\n+    instance = new TeamMatchmakingService(fafServerAccessor, playerService, notificationService, preferencesService,\n+        fafService, eventBus, i18n, taskScheduler, gameService);\n+\n+    when(preferencesService.isGamePathValid()).thenReturn(true);\n+    when(playerService.getCurrentPlayer()).thenReturn(Optional.of(player));\n+  }\n+\n+  private void setPartyMembers() {\n+    ObservableList<PartyMember> testMembers = FXCollections.observableArrayList();\n+    testMembers.add(new PartyMember(new Player(\"member1\")));\n+    testMembers.add(new PartyMember(new Player(\"member2\")));\n+    testMembers.add(new PartyMember(new Player(\"member3\")));\n+    testMembers.add(new PartyMember(player));\n+    instance.getParty().setMembers(testMembers);\n+    instance.getParty().setOwner(player);\n+  }\n+\n+  private void setOwnerByName(String owner) {\n+    instance.getParty().getMembers().stream()\n+        .filter(member -> member.getPlayer().getUsername().equals(owner))\n+        .findFirst()\n+        .ifPresent(partyMember1 -> instance.getParty().setOwner(partyMember1.getPlayer()));\n+  }\n+\n+  @Test\n+  public void testOnInviteMessage() {\n+    when(player.getUsername()).thenReturn(\"dummy\");\n+    PartyInviteMessage message = new PartyInviteMessage();\n+    message.setSender(1);\n+\n+    instance.onPartyInvite(message);\n+\n+    ArgumentCaptor<TransientNotification> captorTransient = ArgumentCaptor.forClass(TransientNotification.class);\n+    verify(notificationService).addNotification(captorTransient.capture());\n+    ArgumentCaptor<PersistentNotification> captorPersistent = ArgumentCaptor.forClass(PersistentNotification.class);\n+    verify(notificationService).addNotification(captorPersistent.capture());\n+    PersistentNotification persistentNotification = captorPersistent.getValue();\n+    assertThat(persistentNotification.getSeverity(), is(INFO));\n+    verify(i18n, times(2)).get(\"teammatchmaking.notification.invite.message\", \"dummy\");\n+  }\n+\n+  @Test\n+  public void testOnKickedFromPartyMessage() {\n+    setPartyMembers();\n+    setOwnerByName(\"member2\");\n+\n+    instance.onPartyKicked(new PartyKickedMessage());\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+    assertThat(instance.getPlayersInGame().isEmpty(), is(true));\n+  }\n+\n+  @Test\n+  public void testOnKickedFromPartyMessageWhenInGame() {\n+    setPartyMembers();\n+    setOwnerByName(\"member2\");\n+    when(player.getStatus()).thenReturn(PlayerStatus.PLAYING);\n+\n+    instance.onPartyKicked(new PartyKickedMessage());\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+    assertThat(instance.getPlayersInGame().size(), is(1));\n+    assertThat(instance.getPlayersInGame().contains(player), is(true));\n+  }\n+\n+  @Test\n+  public void testOnPartyInfoMessagePlayerNotInParty() {\n+    when(playerService.getCurrentPlayer()).thenReturn(Optional.of(player));\n+    List<PartyInfoMessage.PartyMember> testMembers = FXCollections.observableArrayList();\n+    PartyInfoMessage.PartyMember member = new PartyInfoMessage.PartyMember();\n+    member.setPlayer(2);\n+    testMembers.add(member);\n+    PartyInfoMessage message = new PartyInfoMessage();\n+    message.setMembers(testMembers);\n+\n+    instance.onPartyInfo(message);\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    assertThat(instance.getParty().getMembers().size(), is(1));\n+    assertThat(instance.getParty().getOwner(), is(player));\n+  }\n+\n+  @Test\n+  public void testOnPartyInfoMessage() {\n+\n+  }", "originalCommit": "857d045ad3caf57e21c8ec74f32171049a96cef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1df5ab784ec12b238cef8f7aecc98359bb31eabf", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 9d3a1089..4072cd62 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -187,7 +198,18 @@ public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {\n \n   @Test\n   public void testOnPartyInfoMessage() {\n+    when(playerService.getOnlinePlayersByIds(List.of(2))).thenReturn(List.of(otherPlayer));\n+    when(playerService.getOnlinePlayersByIds(List.of(1, 2))).thenReturn(List.of(player, otherPlayer));\n+    List<PartyInfoMessage.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n+    PartyInfoMessage message = new PartyInfoMessage();\n+    message.setMembers(testMembers);\n+    message.setOwner(2);\n+\n+    instance.onPartyInfo(message);\n+    WaitForAsyncUtils.waitForFxEvents();\n \n+    assertThat(instance.getParty().getMembers().size(), is(2));\n+    assertThat(instance.getParty().getOwner(), is(otherPlayer));\n   }\n \n   @Test\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 9d3a1089..e97a7af0 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -187,7 +198,18 @@ public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {\n \n   @Test\n   public void testOnPartyInfoMessage() {\n+    when(playerService.getOnlinePlayersByIds(List.of(2))).thenReturn(List.of(otherPlayer));\n+    when(playerService.getOnlinePlayersByIds(List.of(1, 2))).thenReturn(List.of(player, otherPlayer));\n+    List<PartyInfoMessage.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n+    PartyInfoMessage message = new PartyInfoMessage();\n+    message.setMembers(testMembers);\n+    message.setOwner(2);\n+\n+    instance.onPartyInfo(message);\n+    WaitForAsyncUtils.waitForFxEvents();\n \n+    assertThat(instance.getParty().getMembers().size(), is(2));\n+    assertThat(instance.getParty().getOwner(), is(otherPlayer));\n   }\n \n   @Test\n", "next_change": {"commit": "cf5fb2ddd48d654871217de26244252de16d1fb2", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex e97a7af0..42857ff9 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -198,15 +184,13 @@ public class TeamMatchmakingServiceTest extends AbstractPlainJavaFxTest {\n \n   @Test\n   public void testOnPartyInfoMessage() {\n-    when(playerService.getOnlinePlayersByIds(List.of(2))).thenReturn(List.of(otherPlayer));\n-    when(playerService.getOnlinePlayersByIds(List.of(1, 2))).thenReturn(List.of(player, otherPlayer));\n     List<PartyInfoMessage.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n     PartyInfoMessage message = new PartyInfoMessage();\n     message.setMembers(testMembers);\n     message.setOwner(2);\n \n     instance.onPartyInfo(message);\n-    WaitForAsyncUtils.waitForFxEvents();\n+\n \n     assertThat(instance.getParty().getMembers().size(), is(2));\n     assertThat(instance.getParty().getOwner(), is(otherPlayer));\n", "next_change": {"commit": "3da6b85589fdae47408305000ba2189ec4de91ec", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 42857ff9..bf402d04 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -184,10 +180,8 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n \n   @Test\n   public void testOnPartyInfoMessage() {\n-    List<PartyInfoMessage.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n-    PartyInfoMessage message = new PartyInfoMessage();\n-    message.setMembers(testMembers);\n-    message.setOwner(2);\n+    List<UpdatePartyMessage.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n+    UpdatePartyMessage message = new UpdatePartyMessage(2, testMembers);\n \n     instance.onPartyInfo(message);\n \n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex bf402d04..3f605277 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -180,8 +181,8 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n \n   @Test\n   public void testOnPartyInfoMessage() {\n-    List<UpdatePartyMessage.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n-    UpdatePartyMessage message = new UpdatePartyMessage(2, testMembers);\n+    List<PartyInfo.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n+    PartyInfo message = new PartyInfo(2, testMembers);\n \n     instance.onPartyInfo(message);\n \n", "next_change": {"commit": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 3f605277..00a5afb3 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -186,11 +216,24 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n \n     instance.onPartyInfo(message);\n \n-\n     assertThat(instance.getParty().getMembers().size(), is(2));\n     assertThat(instance.getParty().getOwner(), is(otherPlayer));\n   }\n \n+  @Test\n+  public void testPartyMembersReady() {\n+    List<PartyInfo.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n+    PartyInfo message = new PartyInfo(2, testMembers);\n+\n+    instance.onPartyInfo(message);\n+\n+    assertThat(instance.partyMembersNotReady(), is(false));\n+\n+    instance.getParty().getMembers().get(0).getPlayer().setGame(GameBeanBuilder.create().defaultValues().get());\n+\n+    assertThat(instance.partyMembersNotReady(), is(true));\n+  }\n+\n   @Test\n   public void testOnSearchInfoMessage() {\n     SearchInfo message = new SearchInfo(\"notExistingQueue\", MatchmakerState.START);\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 00a5afb3..362b95a6 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -236,59 +252,44 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n \n   @Test\n   public void testOnSearchInfoMessage() {\n+    matchmakerInfoTestPublisher.next(createMatchmakerInfoMessage());\n+\n     SearchInfo message = new SearchInfo(\"notExistingQueue\", MatchmakerState.START);\n \n     instance.onSearchInfoMessage(message);\n \n     verify(gameService, never()).startSearchMatchmaker();\n \n-    MatchmakerQueueBean testQueue = new MatchmakerQueueBean();\n-    testQueue.setTechnicalName(\"testQueue\");\n-    testQueue.setJoined(false);\n-    instance.getMatchmakerQueues().add(testQueue);\n-\n-    SearchInfo message2 = new SearchInfo(\"testQueue\", MatchmakerState.START);\n+    SearchInfo message2 = new SearchInfo(\"queue1\", MatchmakerState.START);\n \n     instance.onSearchInfoMessage(message2);\n \n-\n     verify(gameService).startSearchMatchmaker();\n-    assertThat(testQueue.isJoined(), is(true));\n+    assertThat(instance.getQueues().get(0).isJoined(), is(true));\n   }\n \n   @Test\n   public void testOnMatchFoundMessage() {\n-    setTwoQueues();\n+    matchmakerInfoTestPublisher.next(createMatchmakerInfoMessage());\n     MatchmakerMatchFoundResponse message = new MatchmakerMatchFoundResponse(\"queue1\");\n \n-    instance.onMatchFoundMessage(message);\n+    matchmakerFoundTestPublisher.next(message);\n \n     ArgumentCaptor<TransientNotification> captor = ArgumentCaptor.forClass(TransientNotification.class);\n     verify(notificationService).addNotification(captor.capture());\n-    assertThat(instance.getMatchmakerQueues().get(0).getMatchingStatus(), is(MatchingStatus.MATCH_FOUND));\n-    assertThat(instance.getMatchmakerQueues().get(1).getMatchingStatus(), is(nullValue()));\n+    assertThat(instance.getQueues().get(0).getMatchingStatus(), is(MatchingStatus.MATCH_FOUND));\n+    assertThat(instance.getQueues().get(1).getMatchingStatus(), is(nullValue()));\n     assertThat(instance.isCurrentlyInQueue(), is(false));\n   }\n \n-  private void setTwoQueues() {\n-    instance.getMatchmakerQueues().clear();\n-    MatchmakerQueueBean queue1 = new MatchmakerQueueBean();\n-    queue1.setJoined(true);\n-    queue1.setTechnicalName(\"queue1\");\n-    MatchmakerQueueBean queue2 = new MatchmakerQueueBean();\n-    queue2.setJoined(true);\n-    queue2.setTechnicalName(\"queue2\");\n-    instance.getMatchmakerQueues().addAll(queue1, queue2);\n-  }\n-\n   @Test\n   public void testOnMatchCancelledMessage() {\n     testOnMatchFoundMessage();\n \n-    instance.onMatchCancelledMessage(new MatchmakerMatchCancelledResponse());\n+    matchmakerCancelledTestPublisher.next(new MatchmakerMatchCancelledResponse());\n \n-    assertThat(instance.getMatchmakerQueues().get(0).getMatchingStatus(), is(MatchingStatus.MATCH_CANCELLED));\n-    assertThat(instance.getMatchmakerQueues().get(1).getMatchingStatus(), is(nullValue()));\n+    assertThat(instance.getQueues().get(0).getMatchingStatus(), is(MatchingStatus.MATCH_CANCELLED));\n+    assertThat(instance.getQueues().get(1).getMatchingStatus(), is(nullValue()));\n   }\n \n   @Test\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 42857ff9..bf402d04 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -198,9 +192,7 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n \n   @Test\n   public void testOnSearchInfoMessage() {\n-    SearchInfoMessage message = new SearchInfoMessage();\n-    message.setQueueName(\"notExistingQueue\");\n-    message.setState(MatchmakingState.START);\n+    SearchInfoMessage message = new SearchInfoMessage(\"notExistingQueue\", MatchmakingState.START);\n \n     instance.onSearchInfoMessage(message);\n \n", "next_change": {"commit": "221e3fb2309212167304c3977087bb652337b890", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex bf402d04..3f605277 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -192,19 +193,18 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n \n   @Test\n   public void testOnSearchInfoMessage() {\n-    SearchInfoMessage message = new SearchInfoMessage(\"notExistingQueue\", MatchmakingState.START);\n+    SearchInfo message = new SearchInfo(\"notExistingQueue\", MatchmakerState.START);\n \n     instance.onSearchInfoMessage(message);\n \n     verify(gameService, never()).startSearchMatchmaker();\n-    verify(gameService).onMatchmakerSearchStopped();\n \n     MatchmakingQueue testQueue = new MatchmakingQueue();\n     testQueue.setTechnicalName(\"testQueue\");\n     testQueue.setJoined(false);\n     instance.getMatchmakingQueues().add(testQueue);\n \n-    SearchInfoMessage message2 = new SearchInfoMessage(\"testQueue\", MatchmakingState.START);\n+    SearchInfo message2 = new SearchInfo(\"testQueue\", MatchmakerState.START);\n \n     instance.onSearchInfoMessage(message2);\n \n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 3f605277..912f256c 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -199,10 +217,10 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n \n     verify(gameService, never()).startSearchMatchmaker();\n \n-    MatchmakingQueue testQueue = new MatchmakingQueue();\n+    MatchmakerQueueBean testQueue = new MatchmakerQueueBean();\n     testQueue.setTechnicalName(\"testQueue\");\n     testQueue.setJoined(false);\n-    instance.getMatchmakingQueues().add(testQueue);\n+    instance.getMatchmakerQueues().add(testQueue);\n \n     SearchInfo message2 = new SearchInfo(\"testQueue\", MatchmakerState.START);\n \n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 912f256c..362b95a6 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -204,103 +232,103 @@ public class TeamMatchmakingServiceTest extends ServiceTest {\n \n     instance.onPartyInfo(message);\n \n-\n     assertThat(instance.getParty().getMembers().size(), is(2));\n     assertThat(instance.getParty().getOwner(), is(otherPlayer));\n   }\n \n+  @Test\n+  public void testPartyMembersReady() {\n+    List<PartyInfo.PartyMember> testMembers = generatePartyMembers(List.of(1, 2));\n+    PartyInfo message = new PartyInfo(2, testMembers);\n+\n+    instance.onPartyInfo(message);\n+\n+    assertThat(instance.partyMembersNotReady(), is(false));\n+\n+    instance.getParty().getMembers().get(0).getPlayer().setGame(GameBeanBuilder.create().defaultValues().get());\n+\n+    assertThat(instance.partyMembersNotReady(), is(true));\n+  }\n+\n   @Test\n   public void testOnSearchInfoMessage() {\n+    matchmakerInfoTestPublisher.next(createMatchmakerInfoMessage());\n+\n     SearchInfo message = new SearchInfo(\"notExistingQueue\", MatchmakerState.START);\n \n     instance.onSearchInfoMessage(message);\n \n     verify(gameService, never()).startSearchMatchmaker();\n \n-    MatchmakerQueueBean testQueue = new MatchmakerQueueBean();\n-    testQueue.setTechnicalName(\"testQueue\");\n-    testQueue.setJoined(false);\n-    instance.getMatchmakerQueues().add(testQueue);\n-\n-    SearchInfo message2 = new SearchInfo(\"testQueue\", MatchmakerState.START);\n+    SearchInfo message2 = new SearchInfo(\"queue1\", MatchmakerState.START);\n \n     instance.onSearchInfoMessage(message2);\n \n-\n     verify(gameService).startSearchMatchmaker();\n-    assertThat(testQueue.isJoined(), is(true));\n+    assertThat(instance.getQueues().get(0).isJoined(), is(true));\n   }\n \n   @Test\n   public void testOnMatchFoundMessage() {\n-    setTwoQueues();\n+    matchmakerInfoTestPublisher.next(createMatchmakerInfoMessage());\n     MatchmakerMatchFoundResponse message = new MatchmakerMatchFoundResponse(\"queue1\");\n \n-    instance.onMatchFoundMessage(message);\n+    matchmakerFoundTestPublisher.next(message);\n \n     ArgumentCaptor<TransientNotification> captor = ArgumentCaptor.forClass(TransientNotification.class);\n     verify(notificationService).addNotification(captor.capture());\n-    assertThat(instance.getMatchmakerQueues().get(0).getMatchingStatus(), is(MatchingStatus.MATCH_FOUND));\n-    assertThat(instance.getMatchmakerQueues().get(1).getMatchingStatus(), is(nullValue()));\n+    assertThat(instance.getQueues().get(0).getMatchingStatus(), is(MatchingStatus.MATCH_FOUND));\n+    assertThat(instance.getQueues().get(1).getMatchingStatus(), is(nullValue()));\n     assertThat(instance.isCurrentlyInQueue(), is(false));\n   }\n \n-  private void setTwoQueues() {\n-    instance.getMatchmakerQueues().clear();\n-    MatchmakerQueueBean queue1 = new MatchmakerQueueBean();\n-    queue1.setJoined(true);\n-    queue1.setTechnicalName(\"queue1\");\n-    MatchmakerQueueBean queue2 = new MatchmakerQueueBean();\n-    queue2.setJoined(true);\n-    queue2.setTechnicalName(\"queue2\");\n-    instance.getMatchmakerQueues().addAll(queue1, queue2);\n-  }\n-\n   @Test\n   public void testOnMatchCancelledMessage() {\n     testOnMatchFoundMessage();\n \n-    instance.onMatchCancelledMessage(new MatchmakerMatchCancelledResponse());\n+    matchmakerCancelledTestPublisher.next(new MatchmakerMatchCancelledResponse());\n \n-    assertThat(instance.getMatchmakerQueues().get(0).getMatchingStatus(), is(MatchingStatus.MATCH_CANCELLED));\n-    assertThat(instance.getMatchmakerQueues().get(1).getMatchingStatus(), is(nullValue()));\n+    assertThat(instance.getQueues().get(0).getMatchingStatus(), is(MatchingStatus.MATCH_CANCELLED));\n+    assertThat(instance.getQueues().get(1).getMatchingStatus(), is(nullValue()));\n   }\n \n   @Test\n   public void testOnGameLaunchMessage() {\n     testOnMatchFoundMessage();\n-    GameLaunchResponse message = GameLaunchMessageBuilder.create().defaultValues().initMode(LobbyMode.AUTO_LOBBY).get();\n+    GameLaunchResponse message = GameLaunchMessageBuilder.create()\n+        .defaultValues()\n+        .gameType(GameType.MATCHMAKER)\n+        .initMode(LobbyMode.AUTO_LOBBY)\n+        .get();\n \n     instance.onGameLaunchMessage(message);\n \n-    assertThat(instance.getMatchmakerQueues().get(0).getMatchingStatus(), is(MatchingStatus.GAME_LAUNCHING));\n-    assertThat(instance.getMatchmakerQueues().get(1).getMatchingStatus(), is(nullValue()));\n+    assertThat(instance.getQueues().get(0).getMatchingStatus(), is(MatchingStatus.GAME_LAUNCHING));\n+    assertThat(instance.getQueues().get(1).getMatchingStatus(), is(nullValue()));\n   }\n \n   @Test\n   public void testOnMatchmakerInfoMessage() {\n-    instance.getMatchmakerQueues().clear();\n-    MatchmakerQueueBean queue1 = MatchmakerQueueBeanBuilder.create().defaultValues().get();\n-    queue1.setTechnicalName(\"queue1\");\n-    instance.getMatchmakerQueues().add(queue1);\n-    MatchmakerQueue matchmakerQueue = new MatchmakerQueue().setLeaderboard(new Leaderboard().setId(\"1\"));\n-    matchmakerQueue.setId(\"2\");\n-    when(fafApiAccessor.getMany(any())).thenReturn(Flux.just(matchmakerQueue));\n-\n-    instance.onMatchmakerInfo(createMatchmakerInfoMessage());\n-\n-    verify(fafApiAccessor, never()).getMany(argThat(ElideMatchers.hasFilter(qBuilder().string(\"technicalName\").eq(\"queue1\"))));\n-    verify(fafApiAccessor).getMany(argThat(ElideMatchers.hasFilter(qBuilder().string(\"technicalName\").eq(\"queue2\"))));\n+    matchmakerInfoTestPublisher.next(createMatchmakerInfoMessage());\n+\n+    verify(fafApiAccessor).getMany(argThat(ElideMatchers.hasFilter(qBuilder().string(\"technicalName\")\n+        .eq(\"queue1\"))));\n   }\n \n   @NotNull\n   private MatchmakerInfo createMatchmakerInfoMessage() {\n-    MatchmakerInfo.MatchmakerQueue messageQueue1 = new MatchmakerInfo.MatchmakerQueue(\"queue1\", OffsetDateTime.ofInstant(Instant.now().plusSeconds(10), ZoneOffset.UTC),\n+    MatchmakerInfo.MatchmakerQueue messageQueue1 = new MatchmakerInfo.MatchmakerQueue(\"queue1\", OffsetDateTime.ofInstant(Instant.now()\n+        .plusSeconds(10), ZoneOffset.UTC),\n         10, 1, 0, List.of(), List.of());\n-    MatchmakerInfo.MatchmakerQueue messageQueue2 = new MatchmakerInfo.MatchmakerQueue(\"queue2\", OffsetDateTime.ofInstant(Instant.now().plusSeconds(10), ZoneOffset.UTC),\n+    MatchmakerInfo.MatchmakerQueue messageQueue2 = new MatchmakerInfo.MatchmakerQueue(\"queue2\", OffsetDateTime.ofInstant(Instant.now()\n+        .plusSeconds(10), ZoneOffset.UTC),\n         10, 1, 0, List.of(), List.of());\n     ObservableList<MatchmakerInfo.MatchmakerQueue> queues = FXCollections.observableArrayList();\n     queues.addAll(messageQueue1, messageQueue2);\n+\n+    MatchmakerQueue matchmakerQueue1 = new MatchmakerQueue().setTechnicalName(\"queue1\").setLeaderboard(new Leaderboard());\n+    MatchmakerQueue matchmakerQueue2 = new MatchmakerQueue().setTechnicalName(\"queue2\").setLeaderboard(new Leaderboard());\n+    when(fafApiAccessor.getMany(any())).thenReturn(Flux.just(matchmakerQueue1), Flux.just(matchmakerQueue2));\n     return new MatchmakerInfo(queues);\n   }\n \n", "next_change": {"commit": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 362b95a6..9a74b297 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -328,21 +331,21 @@ public class TeamMatchmakingServiceTest extends UITest {\n \n     MatchmakerQueue matchmakerQueue1 = new MatchmakerQueue().setTechnicalName(\"queue1\").setLeaderboard(new Leaderboard());\n     MatchmakerQueue matchmakerQueue2 = new MatchmakerQueue().setTechnicalName(\"queue2\").setLeaderboard(new Leaderboard());\n-    when(fafApiAccessor.getMany(any())).thenReturn(Flux.just(matchmakerQueue1), Flux.just(matchmakerQueue2));\n+    when(fafApiAccessor.getMany(any(ElideNavigatorOnCollection.class))).thenReturn(Flux.just(matchmakerQueue1), Flux.just(matchmakerQueue2));\n     return new MatchmakerInfo(queues);\n   }\n \n   @Test\n   public void testInvitePlayer() {\n+    matchmakerInfoTestPublisher.next(createMatchmakerInfoMessage());\n+\n     when(playerService.getPlayerByNameIfOnline(\"invitee\")).thenReturn(Optional.of(otherPlayer));\n-    instance.currentlyInQueueProperty().set(false);\n \n     instance.invitePlayer(\"invitee\");\n \n     verify(fafServerAccessor).inviteToParty(otherPlayer);\n \n-\n-    instance.currentlyInQueueProperty().set(true);\n+    searchInfoTestPublisher.next(new SearchInfo(\"queue1\", MatchmakerState.START));\n \n     instance.invitePlayer(\"invitee\");\n \n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\nindex 9a74b297..047d7ae0 100644\n--- a/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n+++ b/src/test/java/com/faforever/client/teammatchmaking/TeamMatchmakingServiceTest.java\n", "chunk": "@@ -350,6 +358,18 @@ public class TeamMatchmakingServiceTest extends UITest {\n     instance.invitePlayer(\"invitee\");\n \n     verify(notificationService).addImmediateWarnNotification(any());\n+\n+    searchInfoTestPublisher.next(new SearchInfo(\"queue1\", MatchmakerState.STOP));\n+\n+    instance.invitePlayer(\"invitee\");\n+\n+    verify(fafServerAccessor, times(2)).inviteToParty(otherPlayer);\n+\n+    instance.setSearching(true);\n+\n+    instance.invitePlayer(\"invitee\");\n+\n+    verify(notificationService, times(2)).addImmediateWarnNotification(any());\n   }\n \n   @Test\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "ed2ccef31dcb8fa440bb7aa24361cc905d867483", "committedDate": "2021-01-07 18:44:09 -0500", "message": "Remove ability to watch replays while in queue or party(#2106)"}, {"oid": "453016c1face9e9c716475c6c790de091e76bc47", "committedDate": "2021-02-18 06:34:24 -0500", "message": "Add async wait to test"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "f4bb8861a92cc4aaf0eeeea63c7d9ef2f4068d9c", "committedDate": "2021-06-19 21:37:27 -0400", "message": "Remove coupling of UI and game and player service (#2280)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "073bb6fe7712ad1fb01bd89b669fe10e6ccf3401", "committedDate": "2021-07-11 14:54:13 -0400", "message": "Update to junit5 (#2305)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "3da6b85589fdae47408305000ba2189ec4de91ec", "committedDate": "2021-07-12 20:17:59 -0400", "message": "Use jackson over gson (#2294)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "14d40babd8ca17ddef8b8f1beb97818b3219b2dd", "committedDate": "2022-01-09 21:20:36 -0500", "message": "Use InjectMocks for test instance instantiation (#2515)"}, {"oid": "bf9ea315633bd4e7f94c70134435b4e42869755e", "committedDate": "2022-01-20 20:24:17 -0500", "message": "Check if game is running before accepting invite (#2522)"}, {"oid": "329d5a52b01e0016cdf55c562d720771bab7ffe4", "committedDate": "2022-01-23 10:29:39 -0500", "message": "Use addWarnNotificaiton where possible (#2542)"}, {"oid": "e19777b53e5bdd7794aa39baa39e020c45c2f86b", "committedDate": "2022-04-10 14:48:15 -0400", "message": "Use game type to determine lobby mode (#2647)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "45b4328f626effb6f28b9bcc3efbf1a8844a6cfd", "committedDate": "2022-08-14 21:03:03 -0400", "message": "Download all matchmaker maps before joining queue (#2775)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "41541457063145c41eeba7566bbb609590ac4374", "committedDate": "2023-04-23 15:35:10 -0400", "message": "Ensure queue ui state is synced with server state"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"oid": "54b40ddf6c8f67bac4c08cb8e2ac82c4c9099340", "url": "https://github.com/FAForever/downlords-faf-client/commit/54b40ddf6c8f67bac4c08cb8e2ac82c4c9099340", "message": "Add invite item to chat context menu", "committedDate": "2020-12-21T21:39:38Z", "type": "commit"}, {"oid": "1df5ab784ec12b238cef8f7aecc98359bb31eabf", "url": "https://github.com/FAForever/downlords-faf-client/commit/1df5ab784ec12b238cef8f7aecc98359bb31eabf", "message": "Add tests", "committedDate": "2020-12-24T00:21:44Z", "type": "commit"}, {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5", "url": "https://github.com/FAForever/downlords-faf-client/commit/41d3283903944aac66f95760c3be06e378dc8aa5", "message": "Fix queues not displayed bug", "committedDate": "2020-12-26T17:30:38Z", "type": "commit"}, {"oid": "41d3283903944aac66f95760c3be06e378dc8aa5", "url": "https://github.com/FAForever/downlords-faf-client/commit/41d3283903944aac66f95760c3be06e378dc8aa5", "message": "Fix queues not displayed bug", "committedDate": "2020-12-26T17:30:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAzNzkxMQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549037911", "body": "Needs to be a constant", "bodyText": "Needs to be a constant", "bodyHTML": "<p dir=\"auto\">Needs to be a constant</p>", "author": "1-alex98", "createdAt": "2020-12-26T22:29:00Z", "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -135,10 +136,10 @@ public void initialize() {\n     eventBus.register(this);\n \n     chatService.addChannelsListener(change -> {\n-      if (change.wasRemoved()) {\n+      if (change.wasRemoved() && !change.getValueRemoved().getName().endsWith(\"'sParty\")) {", "originalCommit": "41d3283903944aac66f95760c3be06e378dc8aa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMyMDU2Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549320567", "bodyText": "Overload isMatchmakerPartyMessage to take a String as well. Then use the dedicated function", "author": "Brutus5000", "createdAt": "2020-12-28T11:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAzNzkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b7a3de636218a11c2076e50bf59953d9e3be826b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex c8746c31..f60e0759 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -136,10 +136,10 @@ public class ChatController extends AbstractViewController<Node> {\n     eventBus.register(this);\n \n     chatService.addChannelsListener(change -> {\n-      if (change.wasRemoved() && !change.getValueRemoved().getName().endsWith(\"'sParty\")) {\n+      if (change.wasRemoved() && !isMatchmakerPartyMessage(change.getValueRemoved().getName())) {\n         onChannelLeft(change.getValueRemoved());\n       }\n-      if (change.wasAdded() && !change.getValueAdded().getName().endsWith(\"'sParty\")) {\n+      if (change.wasAdded() && !isMatchmakerPartyMessage(change.getValueAdded().getName())) {\n         onChannelJoined(change.getValueAdded());\n       }\n     });\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex c8746c31..02483b88 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -136,10 +138,10 @@ public class ChatController extends AbstractViewController<Node> {\n     eventBus.register(this);\n \n     chatService.addChannelsListener(change -> {\n-      if (change.wasRemoved() && !change.getValueRemoved().getName().endsWith(\"'sParty\")) {\n+      if (change.wasRemoved() && !isMatchmakerPartyMessage(change.getValueRemoved().getName())) {\n         onChannelLeft(change.getValueRemoved());\n       }\n-      if (change.wasAdded() && !change.getValueAdded().getName().endsWith(\"'sParty\")) {\n+      if (change.wasAdded() && !isMatchmakerPartyMessage(change.getValueAdded().getName())) {\n         onChannelJoined(change.getValueAdded());\n       }\n     });\n", "next_change": {"commit": "b86f5c8e62200ff540330a38577f87f3aa678f42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 02483b88..ce7ce27a 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -31,266 +26,159 @@ import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n \n-import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n-\n @Slf4j\n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n-public class ChatController extends AbstractViewController<Node> {\n+@RequiredArgsConstructor\n+public class ChatController extends AbstractViewController<AnchorPane> {\n \n-  private final Map<String, AbstractChatTabController> nameToChatTabController;\n   private final ChatService chatService;\n   private final UiService uiService;\n-  private final UserService userService;\n-  private final NotificationService notificationService;\n-  private final EventBus eventBus;\n-  public Node chatRoot;\n+\n+  private final Map<ChatChannel, AbstractChatTabController> channelToChatTabController = new HashMap<>();\n+  private final MapChangeListener<String, ChatChannel> channelChangeListener = change -> {\n+    if (change.wasRemoved()) {\n+      onChannelLeft(change.getValueRemoved());\n+    }\n+    if (change.wasAdded()) {\n+      onChannelJoined(change.getValueAdded());\n+    }\n+  };\n+\n+  public AnchorPane chatRoot;\n   public TabPane tabPane;\n   public Pane connectingProgressPane;\n   public VBox noOpenTabsContainer;\n   public TextField channelNameTextField;\n \n-  public ChatController(ChatService chatService, UiService uiService, UserService userService, NotificationService notificationService, EventBus eventBus) {\n-    this.chatService = chatService;\n-    this.uiService = uiService;\n-    this.userService = userService;\n-    this.notificationService = notificationService;\n-    this.eventBus = eventBus;\n+  @Override\n+  public void initialize() {\n+    super.initialize();\n+\n+    ObservableValue<Boolean> showing = JavaFxUtil.showingProperty(getRoot());\n \n-    nameToChatTabController = new HashMap<>();\n-  }\n+    chatService.addChannelsListener(channelChangeListener);\n \n-  private void onChannelLeft(Channel channel) {\n-    Platform.runLater(() -> removeTab(channel.getName()));\n-  }\n+    JavaFxUtil.addAndTriggerListener(chatService.connectionStateProperty()\n+        .when(showing), (SimpleChangeListener<ConnectionState>) this::onConnectionStateChange);\n \n-  private void onChannelJoined(Channel channel) {\n-    String channelName = channel.getName();\n-    chatService.addUsersListener(channelName, change -> {\n-      if (change.wasRemoved()) {\n-        onChatUserLeftChannel(change.getValueRemoved(), channelName);\n-      }\n-      if (change.wasAdded()) {\n-        onUserJoinedChannel(change.getValueAdded(), channelName);\n+    JavaFxUtil.addListener(tabPane.getTabs(), (ListChangeListener<Tab>) change -> {\n+      while (change.next()) {\n+        change.getRemoved().forEach(tab -> channelToChatTabController.remove((ChatChannel) tab.getUserData()));\n       }\n     });\n   }\n \n+  public void dispose() {\n+    chatService.removeChannelsListener(channelChangeListener);\n+  }\n+\n+  private void onChannelLeft(ChatChannel chatChannel) {\n+    if (chatChannel.isPartyChannel()) {\n+      return;\n+    }\n+\n+    removeTab(chatChannel);\n+  }\n+\n+  private void onChannelJoined(ChatChannel chatChannel) {\n+    if (chatChannel.isPartyChannel()) {\n+      return;\n+    }\n+\n+    addAndSelectTab(chatChannel);\n+    onConnected();\n+  }\n+\n   private void onDisconnected() {\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       connectingProgressPane.setVisible(true);\n       tabPane.setVisible(false);\n+      tabPane.getTabs().removeIf(Tab::isClosable);\n     });\n   }\n \n   private void onConnected() {\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       connectingProgressPane.setVisible(false);\n       tabPane.setVisible(true);\n     });\n   }\n \n   private void onConnecting() {\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       connectingProgressPane.setVisible(true);\n       tabPane.setVisible(false);\n     });\n   }\n \n-  private void onLoggedOut() {\n-    Platform.runLater(() -> tabPane.getTabs().clear());\n-  }\n-\n-  private void removeTab(String playerOrChannelName) {\n-    AbstractChatTabController controller = nameToChatTabController.get(playerOrChannelName);\n+  private void removeTab(ChatChannel chatChannel) {\n+    AbstractChatTabController controller = channelToChatTabController.remove(chatChannel);\n     if (controller != null) {\n-      tabPane.getTabs().remove(controller.getRoot());\n-    }\n-  }\n-\n-  private AbstractChatTabController getOrCreateChannelTab(String channelName) {\n-    JavaFxUtil.assertApplicationThread();\n-    if (!nameToChatTabController.containsKey(channelName)) {\n-      ChannelTabController tab = uiService.loadFxml(\"theme/chat/channel_tab.fxml\");\n-      tab.setChannel(chatService.getOrCreateChannel(channelName));\n-      addTab(channelName, tab);\n+      JavaFxUtil.runLater(() -> tabPane.getTabs().remove(controller.getRoot()));\n     }\n-    return nameToChatTabController.get(channelName);\n   }\n \n-  private void addTab(String playerOrChannelName, AbstractChatTabController tabController) {\n-    JavaFxUtil.assertApplicationThread();\n-    nameToChatTabController.put(playerOrChannelName, tabController);\n-    Tab tab = tabController.getRoot();\n+  private void addAndSelectTab(ChatChannel chatChannel) {\n+    if (!channelToChatTabController.containsKey(chatChannel)) {\n+      JavaFxUtil.runLater(() -> {\n+        AbstractChatTabController tabController;\n+        if (chatChannel.isPrivateChannel()) {\n+          tabController = uiService.loadFxml(\"theme/chat/private_chat_tab.fxml\");\n+        } else {\n+          tabController = uiService.loadFxml(\"theme/chat/channel_tab.fxml\");\n+        }\n+        tabController.setChatChannel(chatChannel);\n+        channelToChatTabController.put(chatChannel, tabController);\n \n-    if (chatService.isDefaultChannel(playerOrChannelName)) {\n-      tabPane.getTabs().add(0, tab);\n-    } else {\n-      tabPane.getTabs().add(tabPane.getTabs().size() - 1, tab);\n+        Tab tab = tabController.getRoot();\n+        tab.setUserData(chatChannel);\n+        if (chatService.isDefaultChannel(chatChannel)) {\n+          tabPane.getTabs().add(0, tab);\n+          tabPane.getSelectionModel().select(tab);\n+          tabController.onDisplay();\n+        } else {\n+          tabPane.getTabs().add(tabPane.getTabs().size() - 1, tab);\n+\n+          if (chatChannel.isPrivateChannel() || tabPane.getSelectionModel().getSelectedIndex() == tabPane.getTabs()\n+              .size() - 1) {\n+            tabPane.getSelectionModel().select(tab);\n+            tabController.onDisplay();\n+          }\n+        }\n+      });\n     }\n-    tabPane.getSelectionModel().select(tab);\n-    nameToChatTabController.get(tab.getId()).onDisplay();\n-  }\n-\n-  @Override\n-  public void initialize() {\n-    super.initialize();\n-    eventBus.register(this);\n-\n-    chatService.addChannelsListener(change -> {\n-      if (change.wasRemoved() && !isMatchmakerPartyMessage(change.getValueRemoved().getName())) {\n-        onChannelLeft(change.getValueRemoved());\n-      }\n-      if (change.wasAdded() && !isMatchmakerPartyMessage(change.getValueAdded().getName())) {\n-        onChannelJoined(change.getValueAdded());\n-      }\n-    });\n-\n-    JavaFxUtil.addListener(chatService.connectionStateProperty(), (observable, oldValue, newValue) -> onConnectionStateChange(newValue));\n-    onConnectionStateChange(chatService.connectionStateProperty().get());\n-\n-    JavaFxUtil.addListener(tabPane.getTabs(), (ListChangeListener<Tab>) change -> {\n-      while (change.next()) {\n-        change.getRemoved().forEach(tab -> nameToChatTabController.remove(tab.getId()));\n-      }\n-    });\n-  }\n-\n-  @Subscribe\n-  public void onLoggedOutEvent(LoggedOutEvent event) {\n-    onLoggedOut();\n   }\n \n   private void onConnectionStateChange(ConnectionState newValue) {\n     switch (newValue) {\n-      case DISCONNECTED:\n-        onDisconnected();\n-        break;\n-      case CONNECTED:\n-        onConnected();\n-        break;\n-      case CONNECTING:\n-        onConnecting();\n-        break;\n-      default:\n-        throw new ProgrammingError(\"Uncovered connection state: \" + newValue);\n-    }\n-  }\n-\n-  @Subscribe\n-  public void onChatMessage(ChatMessageEvent event) {\n-    Platform.runLater(() -> {\n-      ChatMessage message = event.getMessage();\n-      if (isMatchmakerPartyMessage(message))\n-        return;\n-      if (!message.isPrivate()) {\n-        getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n-      } else {\n-        addAndGetPrivateMessageTab(message.getSource()).onChatMessage(message);\n-      }\n-    });\n-  }\n-\n-  private boolean isMatchmakerPartyMessage(ChatMessage message) {\n-    return message.getSource() != null && isMatchmakerPartyMessage(message.getSource());\n-  }\n-\n-  private boolean isMatchmakerPartyMessage(String channelName) {\n-    return channelName.endsWith(PARTY_CHANNEL_SUFFIX);\n-  }\n-\n-  private AbstractChatTabController addAndGetPrivateMessageTab(String username) {\n-    JavaFxUtil.assertApplicationThread();\n-    if (!nameToChatTabController.containsKey(username)) {\n-      PrivateChatTabController tab = uiService.loadFxml(\"theme/chat/private_chat_tab.fxml\");\n-      tab.setReceiver(username);\n-      addTab(username, tab);\n+      case DISCONNECTED -> onDisconnected();\n+      case CONNECTED -> onConnected();\n+      case CONNECTING -> onConnecting();\n+      default -> throw new ProgrammingError(\"Uncovered connection state: \" + newValue);\n     }\n-\n-    return nameToChatTabController.get(username);\n   }\n \n-  public Node getRoot() {\n+  public AnchorPane getRoot() {\n     return chatRoot;\n   }\n \n-  @Subscribe\n-  public void onInitiatePrivateChatEvent(InitiatePrivateChatEvent event) {\n-    Platform.runLater(() -> openPrivateMessageTabForUser(event.getUsername()));\n-  }\n-\n-  private void openPrivateMessageTabForUser(String username) {\n-    if (username.equalsIgnoreCase(userService.getUsername())) {\n-      return;\n-    }\n-    AbstractChatTabController controller = addAndGetPrivateMessageTab(username);\n-    Tab tab = controller.getRoot();\n-    eventBus.post(new NavigateEvent(NavigationItem.CHAT));\n-    tabPane.getSelectionModel().select(tab);\n-    nameToChatTabController.get(tab.getId()).onDisplay();\n-  }\n-\n   public void onJoinChannelButtonClicked() {\n     String channelName = channelNameTextField.getText();\n-    channelNameTextField.clear();\n     if (!channelName.startsWith(\"#\")) {\n-      log.info(\"Channel name {} does not start with #\", channelName);\n-      notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"chat.error.noHashTag\", channelName);\n-      return;\n+      channelName = \"#\" + channelName;\n     }\n \n-    joinChannel(channelName);\n-  }\n-\n-  private void joinChannel(String channelName) {\n     chatService.joinChannel(channelName);\n-  }\n-\n-  private void onChatUserLeftChannel(ChatChannelUser chatUser, String channelName) {\n-    if (isCurrentUser(chatUser)) {\n-      AbstractChatTabController chatTab = nameToChatTabController.get(channelName);\n-      if (chatTab != null) {\n-        Platform.runLater(() -> tabPane.getTabs().remove(chatTab.getRoot()));\n-      }\n-    }\n-  }\n-\n-  private void onUserJoinedChannel(ChatChannelUser chatUser, String channelName) {\n-    if (isCurrentUser(chatUser)) {\n-      Platform.runLater(() -> {\n-        AbstractChatTabController tabController = getOrCreateChannelTab(channelName);\n-        onConnected();\n-        if (channelName.equals(chatService.getDefaultChannelName())) {\n-          Tab tab = tabController.getRoot();\n-          tabPane.getSelectionModel().select(tab);\n-          nameToChatTabController.get(tab.getId()).onDisplay();\n-        }\n-      });\n-    }\n-  }\n-\n-  private boolean isCurrentUser(ChatChannelUser chatUser) {\n-    return chatUser.getUsername().equalsIgnoreCase(userService.getUsername());\n+    channelNameTextField.clear();\n   }\n \n   @Override\n   protected void onDisplay(NavigateEvent navigateEvent) {\n-    if (navigateEvent instanceof JoinChannelEvent) {\n-      chatService.joinChannel(((JoinChannelEvent) navigateEvent).getChannel());\n-      return;\n-    }\n-    if (!tabPane.getTabs().isEmpty()) {\n-      Tab tab = tabPane.getSelectionModel().getSelectedItem();\n-      Optional.ofNullable(nameToChatTabController.get(tab.getId())).ifPresent(AbstractChatTabController::onDisplay);\n-    }\n-  }\n-\n-  @Override\n-  public void onHide() {\n-    super.onHide();\n-    if (!tabPane.getTabs().isEmpty()) {\n+    if (tabPane.getTabs().size() > 1) {\n       Tab tab = tabPane.getSelectionModel().getSelectedItem();\n-      Optional.ofNullable(nameToChatTabController.get(tab.getId())).ifPresent(AbstractChatTabController::onHide);\n+      Optional.ofNullable(channelToChatTabController.get((ChatChannel) tab.getUserData()))\n+          .ifPresent(AbstractChatTabController::onDisplay);\n     }\n   }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "committedDate": "2021-02-03 22:41:53 -0500", "message": "Clean Chat State Code (#2133)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "1831f2a39e73fe66f2332d01282f98b3883be148", "committedDate": "2022-04-10 09:08:56 -0400", "message": "Redesign chat user list & add show/hide categories (#2609)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "8eb4a9ec25810a70c965c28d20594fb453344217", "committedDate": "2023-04-02 13:57:17 -0400", "message": "Small cleanup"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMxOTk0NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549319944", "body": "Should this be cached as well?", "bodyText": "Should this be cached as well?", "bodyHTML": "<p dir=\"auto\">Should this be cached as well?</p>", "author": "Brutus5000", "createdAt": "2020-12-28T11:49:32Z", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -427,28 +427,41 @@ public void deleteModVersionReview(String id) {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, ImmutableMap.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        \"include\", \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {", "originalCommit": "41d3283903944aac66f95760c3be06e378dc8aa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2Njk1Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549666957", "bodyText": "probably a good idea", "author": "BlackYps", "createdAt": "2020-12-29T11:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMxOTk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "bde9eea83c469241a9ec5f504210f58df2cca22a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex c7f6cc9f..2d8ac439 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -431,6 +431,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n     return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n         \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n", "next_change": {"commit": "c37a25b4ff66049a8ee011ea417d18393171a886", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 2d8ac439..d608e9b8 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -427,26 +446,26 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n     return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n-        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n             \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n             \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n             \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n             \"mapPool.mapVersions.map.versions.reviews.player\",\n-        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n-        \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n     }\n", "next_change": {"commit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex d608e9b8..745564c6 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -465,6 +465,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        INCLUDE, \"leaderboard\",\n         FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex c7f6cc9f..8ba35eb6 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -427,25 +447,27 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(\"/data/game/\" + id, Game.class, java.util.Map.of(\"include\", REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n   public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n     return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n-        \"include\", \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n             \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n             \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n             \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n             \"mapPool.mapVersions.map.versions.reviews.player\",\n-        \"filter\", rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n-        \"filter\", rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n+        INCLUDE, \"leaderboard\",\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n     }\n", "next_change": {"commit": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 8ba35eb6..c9436e46 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -290,259 +312,270 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   }\n \n   @Override\n-  public void uploadMod(Path file, ByteCountListener listener) {\n+  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n     MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    post(\"/mods/upload\", multipartContent, false);\n+    return postMultipartForm(\"/mods/upload\", multipartContent);\n   }\n \n   @Override\n-  public void uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n+  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n     MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n     multipartContent.add(\"metadata\", java.util.Map.of(\"isRanked\", isRanked));\n-    post(\"/maps/upload\", multipartContent, false);\n+    return postMultipartForm(\"/maps/upload\", multipartContent);\n   }\n \n   @Override\n-  public void changePassword(String username, String currentPasswordHash, String newPasswordHash) {\n-    java.util.Map<String, String> body = java.util.Map.of(\n-        \"currentPassword\", currentPasswordHash,\n-        \"newPassword\", newPasswordHash\n-    );\n-\n-    post(\"/users/changePassword\", body, true);\n-  }\n-\n-  @Override\n-  public ModVersion getModVersion(String uid) {\n-    return (ModVersion) getMany(MOD_VERSION_ENDPOINT, 1,\n-        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, \"mod,mod.latestVersion,mod.versions,mod.uploader\")\n-    ).get(0);\n+  public Mono<ModVersion> getModVersion(String uid) {\n+    return getMany(ModVersion.class, MOD_VERSION_ENDPOINT, 1,\n+        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, MOD_VERSION_INCLUDES)\n+    )\n+        .cast(ModVersion.class)\n+        .next();\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.FEATURED_MOD_FILES, sync = true)\n-  public List<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    String endpoint = String.format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n+  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n+    String endpoint = format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n         Optional.ofNullable(version).map(String::valueOf).orElse(\"latest\"));\n-    return getMany(endpoint, 10_000, java.util.Map.of());\n+    return getMany(FeaturedModFile.class, endpoint, 10_000, java.util.Map.of());\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getNewestReplaysWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n+  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n         SORT, \"-endTime\",\n         INCLUDE, REPLAY_INCLUDES,\n         FILTER, \"endTime=isnull=false\"\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getHighestRatedReplaysWithMeta(int count, int page) {\n-    JSONAPIDocument<List<GameReviewsSummary>> pageWithPageCount = getPageWithMeta(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n+  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n         SORT, \"-lowerBound\",\n         // TODO this was done in a rush, check what is actually needed\n-        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.reviews,game.reviews.player,\" +\n+        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.playerStats.ratingChanges,game.reviews,game.reviews.player,\" +\n             \"game.mapVersion,game.mapVersion.map\",\n         FILTER, \"game.endTime=isnull=false\"\n-    ));\n-    return new Tuple<>(pageWithPageCount.get().stream()\n-        .map(GameReviewsSummary::getGame)\n-        .collect(Collectors.toList()),\n-        pageWithPageCount.getMeta());\n+    ))\n+        .map(tuple -> tuple.mapT1(gameReviews ->\n+            gameReviews.stream()\n+                .map(gameReviewSummary -> ((GameReviewsSummary) gameReviewSummary).getGame())\n+                .collect(Collectors.toList()))\n+        );\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> findReplaysByQueryWithMeta(String query, int maxResults, int page, SortConfig sortConfig) {\n-    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n-        FILTER, \"(\" + query + \");endTime=isnull=false\",\n+  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n+    return getPageWithTotalPages(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n+        FILTER, query + \";endTime=isnull=false\",\n         INCLUDE, REPLAY_INCLUDES,\n         SORT, sortConfig.toQuery()\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public Optional<MapVersion> findMapByFolderName(String folderName) {\n-    List<MapVersion> maps = getMany(MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, String.format(\"filename==\\\"*%s*\\\"\", folderName),\n-        INCLUDE, MAP_VERSION_INCLUDES));\n-    if (maps.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(maps.get(0));\n+  public Mono<MapVersion> findMapByFolderName(String folderName) {\n+    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n+        FILTER, rsql(qBuilder().string(\"filename\").eq(format(FILENAME_TEMPLATE, folderName))),\n+        INCLUDE, MAP_VERSION_INCLUDES))\n+        .cast(MapVersion.class)\n+        .next();\n   }\n \n   @Override\n-  public List<Player> getPlayersByIds(Collection<Integer> playerIds) {\n+  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n+    String queryFilter = rsql(qBuilder()\n+        .string(\"filename\").eq(format(FILENAME_TEMPLATE, mapFolderName))\n+        .and()\n+        .string(\"map.latestVersion.hidden\").eq(\"false\"));\n+    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n+        FILTER, queryFilter,\n+        INCLUDE, MAP_VERSION_INCLUDES\n+    ))\n+        .cast(MapVersion.class)\n+        .next();\n+  }\n+\n+  @Override\n+  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n     List<String> ids = playerIds.stream().map(String::valueOf).collect(Collectors.toList());\n \n-    return getMany(\"/data/player\", playerIds.size(), java.util.Map.of(\n+    return getMany(Player.class,\"/data/player\", playerIds.size(), java.util.Map.of(\n         INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"id\").in(ids))\n-    ));\n+        FILTER, rsql(qBuilder().string(\"id\").in(ids))));\n+  }\n+\n+  @Override\n+  public Mono<Player> queryPlayerByName(String playerName) {\n+    return getAll(Player.class, \"/data/player\", java.util.Map.of(\n+        INCLUDE, PLAYER_INCLUDES,\n+        FILTER, rsql(qBuilder().string(\"login\").eq(playerName))))\n+        .cast(Player.class)\n+        .next();\n+\n   }\n \n+  @SneakyThrows\n   @Override\n-  public MeResult getOwnPlayer() {\n-    return getOne(\"/me\", MeResult.class);\n+  public Mono<MeResult> getMe() {\n+    return getOne(MeResult.class, \"/me\");\n   }\n \n   @Override\n-  public GameReview createGameReview(GameReview review) {\n+  public Mono<GameReview> createGameReview(GameReview review) {\n     return post(REPLAY_ENDPOINT + \"/\" + review.getGame().getId() + \"/reviews\", review, GameReview.class);\n   }\n \n   @Override\n-  public void updateGameReview(GameReview review) {\n-    patch(\"/data/gameReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateGameReview(GameReview review) {\n+    return patch(\"/data/gameReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public ModVersionReview createModVersionReview(ModVersionReview review) {\n-    return post(\"/data/modVersion/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n+  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n+    return post(MOD_VERSION_ENDPOINT + \"/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n   }\n \n   @Override\n-  public void updateModVersionReview(ModVersionReview review) {\n-    patch(\"/data/modVersionReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n+    return patch(\"/data/modVersionReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public MapVersionReview createMapVersionReview(MapVersionReview review) {\n+  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n     return post(MAP_VERSION_ENDPOINT + \"/\" + review.getMapVersion().getId() + \"/reviews\", review, MapVersionReview.class);\n   }\n \n   @Override\n-  public void updateMapVersionReview(MapVersionReview review) {\n-    patch(\"/data/mapVersionReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n+    return patch(\"/data/mapVersionReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public void deleteGameReview(String id) {\n-    delete(\"/data/gameReview/\" + id);\n+  public Mono<Void> deleteGameReview(String id) {\n+    return delete(\"/data/gameReview/\" + id);\n   }\n \n   @Override\n-  public void deleteMapVersionReview(String id) {\n-    delete(\"/data/mapVersionReview/\" + id);\n+  public Mono<Void> deleteMapVersionReview(String id) {\n+    return delete(\"/data/mapVersionReview/\" + id);\n   }\n \n   @Override\n-  public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig searchConfig, int count, int page) {\n+  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n     MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n     if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + HIDDEN);\n+      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n     }\n     parameterMap.add(INCLUDE, MOD_INCLUDES);\n     parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    JSONAPIDocument<List<Mod>> jsonApiDoc = getPageWithMeta(MOD_ENDPOINT, count, page, parameterMap);\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+    return getPageWithTotalPages(MOD_ENDPOINT, count, page, parameterMap);\n   }\n \n   @Override\n-  public void deleteModVersionReview(String id) {\n-    delete(\"/data/modVersionReview/\" + id);\n+  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(MOD_ENDPOINT, count, page, java.util.Map.of(\n+        INCLUDE, MOD_INCLUDES,\n+        FILTER, rsql(qBuilder()\n+            .bool(\"recommended\").isTrue())\n+    ));\n   }\n \n   @Override\n-  public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n+  public Mono<Void> deleteModVersionReview(String id) {\n+    return delete(\"/data/modVersionReview/\" + id);\n   }\n \n+  @Override\n+  public Mono<Game> findReplayById(int id) {\n+    return getOne(Game.class, REPLAY_ENDPOINT + \"/\" + id, java.util.Map.of(INCLUDE, REPLAY_INCLUDES));\n+  }\n+\n+  @SneakyThrows\n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n-  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n-        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n-            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n-            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n-            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n-            \"mapPool.mapVersions.map.versions.reviews.player\",\n-        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n+    QBuilder qBuilder = new QBuilder<>();\n+    List<Condition<?>> conditions = new ArrayList<>();\n+    conditions.add(qBuilder().string(\"mapPool.matchmakerQueueMapPool.matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)));\n+    conditions.add(qBuilder().floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").lte(rating).or()\n+        .floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").ne(null));\n+    return getAll(MapPoolAssignment.class, \"/data/mapPoolAssignment\", java.util.Map.of(\n+        INCLUDE, MATCHMAKER_POOL_INCLUDES,\n+        FILTER, rsql(qBuilder.and(conditions)).replace(\"ex\", \"isnull\"),\n+        SORT, \"mapVersion.width,mapVersion.map.displayName\"));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n-  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    return getAll(MatchmakerQueue.class, \"/data/matchmakerQueue\", java.util.Map.of(\n         INCLUDE, \"leaderboard\",\n-        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n-    if (queue.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(queue.get(0));\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))))\n+        .cast(MatchmakerQueue.class)\n+        .next();\n   }\n \n   @Override\n-  public List<TutorialCategory> getTutorialCategories() {\n-    return getAll(\"/data/tutorialCategory\",\n+  public Flux<TutorialCategory> getTutorialCategories() {\n+    return getAll(TutorialCategory.class, \"/data/tutorialCategory\",\n         java.util.Map.of(INCLUDE, \"tutorials,tutorials.mapVersion.map,tutorials.mapVersion.map.latestVersion,\" +\n-            \"tutorials.mapVersion.map.author,tutorials.mapVersion.map.statistics\"));\n+            \"tutorials.mapVersion.map.author\"));\n   }\n \n   @Override\n-  public Tuple<List<MapVersion>, java.util.Map<String, ?>> getOwnedMapsWithMeta(int playerId, int loadMoreCount, int page) {\n-    JSONAPIDocument<List<MapVersion>> jsonApiDoc = getPageWithMeta(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n+  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n+    return getPageWithTotalPages(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n         INCLUDE, MAP_VERSION_INCLUDES,\n         FILTER, rsql(qBuilder().string(\"map.author.id\").eq(String.valueOf(playerId)))\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public void updateMapVersion(String id, MapVersion mapVersion) {\n-    patch(String.format(\"/data/mapVersion/%s\", id), mapVersion, Void.class);\n+  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n+    return patch(format(\"/data/mapVersion/%s\", id), mapVersion);\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.CLAN, sync = true)\n-  public Optional<Clan> getClanByTag(String tag) {\n-    List<Clan> clans = getMany(\"/data/clan\", 1, java.util.Map.of(\n-        INCLUDE, \"leader,founder,memberships,memberships.player\",\n+  public Mono<Clan> getClanByTag(String tag) {\n+    return getMany(Clan.class, \"/data/clan\", 1, java.util.Map.of(\n+        INCLUDE, CLAN_INCLUDES,\n         FILTER, rsql(qBuilder().string(\"tag\").eq(tag))\n-    ));\n-    if (clans.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(clans.get(0));\n+    ))\n+        .cast(Clan.class)\n+        .next();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> findMapsByQueryWithMeta(SearchConfig searchConfig, int count, int page) {\n+  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n     MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n     if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + HIDDEN);\n+      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n     }\n     parameterMap.add(INCLUDE, MAP_INCLUDES);\n     parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    JSONAPIDocument<List<Map>> jsonApiDoc = getPageWithMeta(MAP_ENDPOINT, count, page, parameterMap);\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n-  }\n-\n-  @Override\n-  public Optional<MapVersion> findMapVersionById(String id) {\n-    // FIXME: that is not gonna work this way\n-    //FIXME: filter hidden maps\n-    return Optional.ofNullable(getOne(MAP_ENDPOINT + \"/\" + id, MapVersion.class));\n+    return getPageWithTotalPages(MAP_ENDPOINT, count, page, parameterMap);\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.COOP_MAPS, sync = true)\n-  public List<CoopMission> getCoopMissions() {\n-    return getAll(\"/data/coopMission\");\n+  public Flux<CoopMission> getCoopMissions() {\n+    return getAll(CoopMission.class, \"/data/coopMission\");\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.COOP_LEADERBOARD, sync = true)\n-  public List<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n+  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n     Condition<?> filterCondition = qBuilder().string(\"mission\").eq(missionId);\n \n     if (numberOfPlayers > 0) {\n       filterCondition = filterCondition.and().intNum(\"playerCount\").eq(numberOfPlayers);\n     }\n \n-    return getMany(\"/data/coopResult\", 1000, java.util.Map.of(\n+    return getMany(CoopResult.class, \"/data/coopResult\", 1000, java.util.Map.of(\n         FILTER, rsql(filterCondition),\n         INCLUDE, COOP_RESULT_INCLUDES,\n         SORT, \"duration\"\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\ndeleted file mode 100644\nindex c9436e46..00000000\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,788 +0,0 @@\n-package com.faforever.client.api;\n-\n-import com.faforever.client.config.CacheNames;\n-import com.faforever.client.config.ClientProperties;\n-import com.faforever.client.config.ClientProperties.Api;\n-import com.faforever.client.io.CountingFileSystemResource;\n-import com.faforever.client.mod.FeaturedMod;\n-import com.faforever.client.user.event.LoggedOutEvent;\n-import com.faforever.client.vault.search.SearchController.SearchConfig;\n-import com.faforever.client.vault.search.SearchController.SortConfig;\n-import com.faforever.commons.api.dto.AchievementDefinition;\n-import com.faforever.commons.api.dto.ApiException;\n-import com.faforever.commons.api.dto.Clan;\n-import com.faforever.commons.api.dto.CoopMission;\n-import com.faforever.commons.api.dto.CoopResult;\n-import com.faforever.commons.api.dto.FeaturedModFile;\n-import com.faforever.commons.api.dto.Game;\n-import com.faforever.commons.api.dto.GameReview;\n-import com.faforever.commons.api.dto.GameReviewsSummary;\n-import com.faforever.commons.api.dto.Leaderboard;\n-import com.faforever.commons.api.dto.LeaderboardEntry;\n-import com.faforever.commons.api.dto.LeaderboardRatingJournal;\n-import com.faforever.commons.api.dto.Map;\n-import com.faforever.commons.api.dto.MapPoolAssignment;\n-import com.faforever.commons.api.dto.MapVersion;\n-import com.faforever.commons.api.dto.MapVersionReview;\n-import com.faforever.commons.api.dto.MatchmakerQueue;\n-import com.faforever.commons.api.dto.MeResult;\n-import com.faforever.commons.api.dto.Mod;\n-import com.faforever.commons.api.dto.ModVersion;\n-import com.faforever.commons.api.dto.ModVersionReview;\n-import com.faforever.commons.api.dto.ModerationReport;\n-import com.faforever.commons.api.dto.Player;\n-import com.faforever.commons.api.dto.PlayerAchievement;\n-import com.faforever.commons.api.dto.PlayerEvent;\n-import com.faforever.commons.api.dto.Tournament;\n-import com.faforever.commons.api.dto.TutorialCategory;\n-import com.faforever.commons.io.ByteCountListener;\n-import com.github.jasminb.jsonapi.JSONAPIDocument;\n-import com.github.jasminb.jsonapi.exceptions.ResourceParseException;\n-import com.github.rutledgepaulv.qbuilders.builders.QBuilder;\n-import com.github.rutledgepaulv.qbuilders.conditions.Condition;\n-import com.github.rutledgepaulv.qbuilders.visitors.RSQLVisitor;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.eventbus.EventBus;\n-import com.google.common.eventbus.Subscribe;\n-import lombok.RequiredArgsConstructor;\n-import lombok.SneakyThrows;\n-import lombok.extern.slf4j.Slf4j;\n-import org.jetbrains.annotations.NotNull;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.cache.annotation.Cacheable;\n-import org.springframework.context.annotation.Profile;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Component;\n-import org.springframework.util.CollectionUtils;\n-import org.springframework.util.LinkedMultiValueMap;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.web.reactive.function.client.WebClient;\n-import org.springframework.web.util.UriComponents;\n-import org.springframework.web.util.UriComponentsBuilder;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import reactor.util.function.Tuple2;\n-\n-import java.io.Serializable;\n-import java.nio.file.Path;\n-import java.time.LocalDateTime;\n-import java.time.ZoneOffset;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.stream.Collectors;\n-\n-import static java.lang.String.format;\n-\n-@SuppressWarnings(\"unchecked\")\n-@Slf4j\n-@Component\n-@Profile(\"!offline\")\n-@RequiredArgsConstructor\n-public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n-\n-  private static final String REPLAY_ENDPOINT = \"/data/game\";\n-  private static final String MAP_ENDPOINT = \"/data/map\";\n-  private static final String MAP_VERSION_ENDPOINT = \"/data/mapVersion\";\n-  private static final String MOD_ENDPOINT = \"/data/mod\";\n-  private static final String MOD_VERSION_ENDPOINT = \"/data/modVersion\";\n-  private static final String ACHIEVEMENT_ENDPOINT = \"/data/achievement\";\n-  private static final String LEADERBOARD_ENDPOINT = \"/data/leaderboard\";\n-  private static final String LEADERBOARD_ENTRY_ENDPOINT = \"/data/leaderboardRating\";\n-  private static final String REPORT_ENDPOINT = \"/data/moderationReport\";\n-  private static final String TOURNAMENT_LIST_ENDPOINT = \"/challonge/v1/tournaments.json\";\n-  private static final String REPLAY_INCLUDES = \"featuredMod,playerStats,playerStats.player,playerStats.ratingChanges,reviews,\" +\n-      \"reviews.player,mapVersion,mapVersion.map,reviewsSummary\";\n-  private static final String MAP_INCLUDES = \"latestVersion,author,reviewsSummary,\" +\n-      \"versions.reviews,versions.reviews.player\";\n-  private static final String MAP_VERSION_INCLUDES = \"map,map.latestVersion,map.author,\" +\n-      \"map.reviewsSummary,map.versions.reviews,map.versions.reviews.player\";\n-  private static final String MATCHMAKER_POOL_INCLUDES = \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,\" +\n-      \"mapVersion.map.author,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-      \"mapVersion.map.versions.reviews.player\";\n-  private static final String MOD_INCLUDES = \"latestVersion,reviewsSummary,versions,versions.reviews,\" +\n-      \"versions.reviews.player\";\n-  private static final String MOD_VERSION_INCLUDES = \"mod,mod.latestVersion,mod.versions,mod.versions.reviews,\" +\n-      \"mod.versions.reviews.player,mod.reviewsSummary,mod.uploader\";\n-  private static final String LEADERBOARD_ENTRY_INCLUDES = \"player,leaderboard\";\n-  private static final String COOP_RESULT_INCLUDES = \"game.playerStats.player\";\n-  private static final String PLAYER_INCLUDES = \"names\";\n-  private static final String REPORT_INCLUDES = \"reporter,lastModerator,reportedUsers,game\";\n-  private static final String FILTER = \"filter\";\n-  private static final String SORT = \"sort\";\n-  private static final String INCLUDE = \"include\";\n-  private static final String NOT_HIDDEN = \"latestVersion.hidden==\\\"false\\\"\";\n-  private static final String FILENAME_TEMPLATE = \"maps/%s.zip\";\n-  private static final String CLAN_INCLUDES = \"leader,founder,memberships,memberships.player\";\n-\n-  private final EventBus eventBus;\n-  private final ClientProperties clientProperties;\n-  private final JsonApiReader jsonApiReader;\n-  private final JsonApiWriter jsonApiWriter;\n-  private final OAuthTokenFilter oAuthTokenFilter;\n-\n-  private CountDownLatch authorizedLatch = new CountDownLatch(1);\n-  private WebClient webClient;\n-\n-  private static String rsql(Condition<?> eq) {\n-    return eq.query(new RSQLVisitor());\n-  }\n-\n-  private static <T extends QBuilder<T>> QBuilder<T> qBuilder() {\n-    return new QBuilder<>();\n-  }\n-\n-  @Override\n-  public void afterPropertiesSet() {\n-    eventBus.register(this);\n-  }\n-\n-  @Override\n-  public void authorize() {\n-    Api apiProperties = clientProperties.getApi();\n-\n-    webClient = WebClient.builder()\n-        .baseUrl(apiProperties.getBaseUrl())\n-        .filter(oAuthTokenFilter)\n-        .codecs(clientCodecConfigurer -> {\n-          clientCodecConfigurer.customCodecs().register(jsonApiReader);\n-          clientCodecConfigurer.customCodecs().register(jsonApiWriter);\n-        })\n-        .build();\n-\n-    authorizedLatch.countDown();\n-  }\n-\n-  @Subscribe\n-  public void onLoggedOutEvent(LoggedOutEvent event) {\n-    authorizedLatch = new CountDownLatch(1);\n-  }\n-\n-  @Subscribe\n-  public void onSessionExpiredEvent(SessionExpiredEvent event) {\n-    authorizedLatch = new CountDownLatch(1);\n-  }\n-\n-  @Override\n-  public Flux<PlayerAchievement> getPlayerAchievements(int playerId) {\n-    return getAll(PlayerAchievement.class, \"/data/playerAchievement\", java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId))\n-    ));\n-  }\n-\n-  @Override\n-  public Flux<PlayerEvent> getPlayerEvents(int playerId) {\n-    return getAll(PlayerEvent.class, \"/data/playerEvent\", java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId))\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.ACHIEVEMENTS, sync = true)\n-  public Flux<AchievementDefinition> getAchievementDefinitions() {\n-    return getAll(AchievementDefinition.class, ACHIEVEMENT_ENDPOINT, java.util.Map.of(\n-        SORT, \"order\"\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.ACHIEVEMENTS, sync = true)\n-  public Mono<AchievementDefinition> getAchievementDefinition(String achievementId) {\n-    return getOne(AchievementDefinition.class, ACHIEVEMENT_ENDPOINT + \"/\" + achievementId);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MODS, sync = true)\n-  public Flux<Mod> getMods() {\n-    return getAll(Mod.class, MOD_ENDPOINT, java.util.Map.of(\n-        INCLUDE, MOD_INCLUDES));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.FEATURED_MODS, sync = true)\n-  public Flux<com.faforever.commons.api.dto.FeaturedMod> getFeaturedMods() {\n-    return getMany(com.faforever.commons.api.dto.FeaturedMod.class, \"/data/featuredMod\", 1000, java.util.Map.of());\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Flux<Leaderboard> getLeaderboards() {\n-    return getAll(Leaderboard.class, LEADERBOARD_ENDPOINT);\n-  }\n-\n-  @Override\n-  public Flux<LeaderboardEntry> getLeaderboardEntriesForPlayer(int playerId) {\n-    return getAll(LeaderboardEntry.class, LEADERBOARD_ENTRY_ENDPOINT, java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId)),\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Flux<LeaderboardEntry> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n-    return getAll(LeaderboardEntry.class, LEADERBOARD_ENTRY_ENDPOINT, java.util.Map.of(\n-        FILTER, rsql(qBuilder().string(\"leaderboard.technicalName\").eq(leaderboardTechnicalName)\n-            .and().instant(\"updateTime\").after(LocalDateTime.now().minusMonths(1).toInstant(ZoneOffset.UTC), false)),\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Mono<Tuple2<List<LeaderboardEntry>, Integer>> getLeaderboardEntriesWithTotalPages(String leaderboardId, int count, int page) {\n-    return getPageWithTotalPages(LEADERBOARD_ENTRY_ENDPOINT, count, page, ImmutableMap.of(\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.RATING_HISTORY, sync = true)\n-  public Flux<LeaderboardRatingJournal> getRatingJournal(int playerId, int leaderboardId) {\n-    return getAll(LeaderboardRatingJournal.class, \"/data/leaderboardRatingJournal\", java.util.Map.of(\n-        FILTER, rsql(qBuilder()\n-            .intNum(\"gamePlayerStats.player.id\").eq(playerId)\n-            .and()\n-            .intNum(\"leaderboard.id\").eq(leaderboardId)),\n-        INCLUDE, \"gamePlayerStats\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getRecommendedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        FILTER, rsql(qBuilder()\n-            .bool(\"recommended\").isTrue())\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MAPS, sync = true)\n-  public Mono<Tuple2<List<Map>, Integer>> getMostPlayedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-gamesPlayed\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getHighestRatedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-reviewsSummary.lowerBound\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getNewestMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-updateTime\",\n-        FILTER, NOT_HIDDEN\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getMapsByIdWithTotalPages(List<Integer> mapIdList, int count, int page) {\n-    String filterCriteria = mapIdList.stream()\n-        .map(Object::toString)\n-        .collect(Collectors.joining(\",\", \"latestVersion.map.id=in=(\", \")\"));\n-\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-updateTime\",\n-        FILTER, filterCriteria\n-    ));\n-  }\n-\n-  @Override\n-  public Flux<Game> getLastGamesOnMap(int playerId, String mapVersionId, int count) {\n-    return getMany(Game.class, REPLAY_ENDPOINT, count, java.util.Map.of(\n-        FILTER, rsql(qBuilder()\n-            .string(\"mapVersion.id\").eq(mapVersionId)\n-            .and()\n-            .intNum(\"playerStats.player.id\").eq(playerId)),\n-        INCLUDE, REPLAY_INCLUDES,\n-        SORT, \"-endTime\"\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n-    MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    return postMultipartForm(\"/mods/upload\", multipartContent);\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n-    MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    multipartContent.add(\"metadata\", java.util.Map.of(\"isRanked\", isRanked));\n-    return postMultipartForm(\"/maps/upload\", multipartContent);\n-  }\n-\n-  @Override\n-  public Mono<ModVersion> getModVersion(String uid) {\n-    return getMany(ModVersion.class, MOD_VERSION_ENDPOINT, 1,\n-        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, MOD_VERSION_INCLUDES)\n-    )\n-        .cast(ModVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.FEATURED_MOD_FILES, sync = true)\n-  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    String endpoint = format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n-        Optional.ofNullable(version).map(String::valueOf).orElse(\"latest\"));\n-    return getMany(FeaturedModFile.class, endpoint, 10_000, java.util.Map.of());\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n-        SORT, \"-endTime\",\n-        INCLUDE, REPLAY_INCLUDES,\n-        FILTER, \"endTime=isnull=false\"\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n-        SORT, \"-lowerBound\",\n-        // TODO this was done in a rush, check what is actually needed\n-        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.playerStats.ratingChanges,game.reviews,game.reviews.player,\" +\n-            \"game.mapVersion,game.mapVersion.map\",\n-        FILTER, \"game.endTime=isnull=false\"\n-    ))\n-        .map(tuple -> tuple.mapT1(gameReviews ->\n-            gameReviews.stream()\n-                .map(gameReviewSummary -> ((GameReviewsSummary) gameReviewSummary).getGame())\n-                .collect(Collectors.toList()))\n-        );\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n-    return getPageWithTotalPages(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n-        FILTER, query + \";endTime=isnull=false\",\n-        INCLUDE, REPLAY_INCLUDES,\n-        SORT, sortConfig.toQuery()\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> findMapByFolderName(String folderName) {\n-    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, rsql(qBuilder().string(\"filename\").eq(format(FILENAME_TEMPLATE, folderName))),\n-        INCLUDE, MAP_VERSION_INCLUDES))\n-        .cast(MapVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n-    String queryFilter = rsql(qBuilder()\n-        .string(\"filename\").eq(format(FILENAME_TEMPLATE, mapFolderName))\n-        .and()\n-        .string(\"map.latestVersion.hidden\").eq(\"false\"));\n-    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, queryFilter,\n-        INCLUDE, MAP_VERSION_INCLUDES\n-    ))\n-        .cast(MapVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n-    List<String> ids = playerIds.stream().map(String::valueOf).collect(Collectors.toList());\n-\n-    return getMany(Player.class,\"/data/player\", playerIds.size(), java.util.Map.of(\n-        INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"id\").in(ids))));\n-  }\n-\n-  @Override\n-  public Mono<Player> queryPlayerByName(String playerName) {\n-    return getAll(Player.class, \"/data/player\", java.util.Map.of(\n-        INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"login\").eq(playerName))))\n-        .cast(Player.class)\n-        .next();\n-\n-  }\n-\n-  @SneakyThrows\n-  @Override\n-  public Mono<MeResult> getMe() {\n-    return getOne(MeResult.class, \"/me\");\n-  }\n-\n-  @Override\n-  public Mono<GameReview> createGameReview(GameReview review) {\n-    return post(REPLAY_ENDPOINT + \"/\" + review.getGame().getId() + \"/reviews\", review, GameReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateGameReview(GameReview review) {\n-    return patch(\"/data/gameReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n-    return post(MOD_VERSION_ENDPOINT + \"/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n-    return patch(\"/data/modVersionReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n-    return post(MAP_VERSION_ENDPOINT + \"/\" + review.getMapVersion().getId() + \"/reviews\", review, MapVersionReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n-    return patch(\"/data/mapVersionReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteGameReview(String id) {\n-    return delete(\"/data/gameReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteMapVersionReview(String id) {\n-    return delete(\"/data/mapVersionReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n-    MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n-    if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n-    }\n-    parameterMap.add(INCLUDE, MOD_INCLUDES);\n-    parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    return getPageWithTotalPages(MOD_ENDPOINT, count, page, parameterMap);\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MOD_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MOD_INCLUDES,\n-        FILTER, rsql(qBuilder()\n-            .bool(\"recommended\").isTrue())\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteModVersionReview(String id) {\n-    return delete(\"/data/modVersionReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Game> findReplayById(int id) {\n-    return getOne(Game.class, REPLAY_ENDPOINT + \"/\" + id, java.util.Map.of(INCLUDE, REPLAY_INCLUDES));\n-  }\n-\n-  @SneakyThrows\n-  @Override\n-  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n-  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n-    QBuilder qBuilder = new QBuilder<>();\n-    List<Condition<?>> conditions = new ArrayList<>();\n-    conditions.add(qBuilder().string(\"mapPool.matchmakerQueueMapPool.matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)));\n-    conditions.add(qBuilder().floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").lte(rating).or()\n-        .floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").ne(null));\n-    return getAll(MapPoolAssignment.class, \"/data/mapPoolAssignment\", java.util.Map.of(\n-        INCLUDE, MATCHMAKER_POOL_INCLUDES,\n-        FILTER, rsql(qBuilder.and(conditions)).replace(\"ex\", \"isnull\"),\n-        SORT, \"mapVersion.width,mapVersion.map.displayName\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n-  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    return getAll(MatchmakerQueue.class, \"/data/matchmakerQueue\", java.util.Map.of(\n-        INCLUDE, \"leaderboard\",\n-        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))))\n-        .cast(MatchmakerQueue.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Flux<TutorialCategory> getTutorialCategories() {\n-    return getAll(TutorialCategory.class, \"/data/tutorialCategory\",\n-        java.util.Map.of(INCLUDE, \"tutorials,tutorials.mapVersion.map,tutorials.mapVersion.map.latestVersion,\" +\n-            \"tutorials.mapVersion.map.author\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n-    return getPageWithTotalPages(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n-        INCLUDE, MAP_VERSION_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"map.author.id\").eq(String.valueOf(playerId)))\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n-    return patch(format(\"/data/mapVersion/%s\", id), mapVersion);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.CLAN, sync = true)\n-  public Mono<Clan> getClanByTag(String tag) {\n-    return getMany(Clan.class, \"/data/clan\", 1, java.util.Map.of(\n-        INCLUDE, CLAN_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"tag\").eq(tag))\n-    ))\n-        .cast(Clan.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n-    MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n-    if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n-    }\n-    parameterMap.add(INCLUDE, MAP_INCLUDES);\n-    parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, parameterMap);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.COOP_MAPS, sync = true)\n-  public Flux<CoopMission> getCoopMissions() {\n-    return getAll(CoopMission.class, \"/data/coopMission\");\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.COOP_LEADERBOARD, sync = true)\n-  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n-    Condition<?> filterCondition = qBuilder().string(\"mission\").eq(missionId);\n-\n-    if (numberOfPlayers > 0) {\n-      filterCondition = filterCondition.and().intNum(\"playerCount\").eq(numberOfPlayers);\n-    }\n-\n-    return getMany(CoopResult.class, \"/data/coopResult\", 1000, java.util.Map.of(\n-        FILTER, rsql(filterCondition),\n-        INCLUDE, COOP_RESULT_INCLUDES,\n-        SORT, \"duration\"\n-    ));\n-  }\n-\n-  @Override\n-  @SneakyThrows\n-  public Flux<Tournament> getAllTournaments() {\n-    authorizedLatch.await();\n-    return getAllNoPaging(Tournament.class, TOURNAMENT_LIST_ENDPOINT, java.util.Map.of());\n-  }\n-\n-  @Override\n-  public Flux<ModerationReport> getPlayerModerationReports(int playerId) {\n-    return getAllNoPaging(ModerationReport.class, REPORT_ENDPOINT, java.util.Map.of(\n-        INCLUDE, REPORT_INCLUDES,\n-        FILTER, rsql(qBuilder().intNum(\"reporter.id\").eq(playerId))))\n-        .cast(ModerationReport.class);\n-  }\n-\n-  @Override\n-  public Mono<ModerationReport> postModerationReport(com.faforever.client.reporting.ModerationReport report) {\n-    List<java.util.Map<String, String>> reportedUsers = new ArrayList<>();\n-    report.getReportedUsers().forEach(player -> reportedUsers.add(java.util.Map.of(\"type\", \"player\", \"id\", String.valueOf(player.getId()))));\n-    java.util.Map<String, Object> relationships = new HashMap<>(java.util.Map.of(\"reportedUsers\", java.util.Map.of(\"data\", reportedUsers)));\n-    if (report.getGameId() != null) {\n-      relationships.put(\"game\", java.util.Map.of(\"data\", java.util.Map.of(\"type\", \"game\", \"id\", report.getGameId())));\n-    }\n-    java.util.Map<String, Object> body = java.util.Map.of(\"data\", List.of(java.util.Map.of(\n-        \"type\", \"moderationReport\",\n-        \"attributes\", java.util.Map.of(\"gameIncidentTimecode\", report.getGameIncidentTimeCode(), \"reportDescription\", report.getReportDescription()),\n-        \"relationships\", relationships)));\n-    return post(REPORT_ENDPOINT, body, ModerationReport.class);\n-  }\n-\n-  @NotNull\n-  private MultiValueMap<String, Object> createFileMultipart(Path file, ByteCountListener listener) {\n-    MultiValueMap<String, Object> form = new LinkedMultiValueMap<>();\n-    form.add(\"file\", new CountingFileSystemResource(file, listener));\n-    return form;\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> postMultipartForm(String endpointPath, Object request) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.post().uri(endpointPath)\n-        .contentType(MediaType.MULTIPART_FORM_DATA)\n-        .bodyValue(request))\n-        .doOnSuccess(aVoid -> log.debug(\"Posted {} to {}\", request, endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<T> post(String endpointPath, Object request, Class<T> type) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(type, webClient.post().uri(endpointPath)\n-        .contentType(MediaType.parseMediaType(\"application/vnd.api+json;charset=utf-8\"))\n-        .bodyValue(request))\n-        .doOnNext(object -> log.debug(\"Posted {} to {} with type {}\", object, endpointPath, type));\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> patch(String endpointPath, Object request) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.patch().uri(endpointPath)\n-            .contentType(MediaType.parseMediaType(\"application/vnd.api+json;charset=utf-8\"))\n-            .bodyValue(request))\n-        .doOnSuccess(aVoid -> log.debug(\"Patched {} at {}\", request, endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> delete(String endpointPath) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.delete().uri(endpointPath))\n-        .doOnSuccess(aVoid -> log.debug(\"Deleted {}\", endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<T> getOne(Class<T> type, String endpointPath) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(type, webClient.get().uri(endpointPath))\n-        .cache()\n-        .doOnNext(object -> log.debug(\"Retrieved {} from {} with type {}\", object, endpointPath, type));\n-  }\n-\n-  @NotNull\n-  private <T> Mono<T> getOne(Class<T> type, String endpointPath, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(CollectionUtils.toMultiValueMap(multiValues))\n-        .build();\n-\n-    return getOne(type, uriComponents.toUriString());\n-  }\n-\n-  private <T> Flux<T> getAll(Class<T> type, String endpointPath) {\n-    return getAll(type, endpointPath, Collections.emptyMap());\n-  }\n-\n-  private <T> Flux<T> getAll(Class<T> type, String endpointPath, java.util.Map<String, Serializable> params) {\n-    return getMany(type, endpointPath, clientProperties.getApi().getMaxPageSize(), params);\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getMany(Class<T> type, String endpointPath, int count, java.util.Map<String, Serializable> params) {\n-    return getPage(type, endpointPath, count, 1, params);\n-  }\n-\n-  private <T> Flux<T> getPage(Class<T> type, String endpointPath, int pageSize, int page, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    return getPage(type, endpointPath, pageSize, page, CollectionUtils.toMultiValueMap(multiValues));\n-  }\n-\n-  private <T> Mono<Tuple2<List<T>, Integer>> getPageWithTotalPages(String endpointPath, int pageSize, int page, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    return getPageWithTotalPages(endpointPath, pageSize, page, CollectionUtils.toMultiValueMap(multiValues));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getAllNoPaging(Class<T> type, String endpointPath, java.util.Map<String, String> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(CollectionUtils.toMultiValueMap(multiValues))\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveFluxWithErrorHandling(type, webClient.get().uri(url))\n-        .cache()\n-        .doOnNext(list -> log.debug(\"Retrieved {} from {}\", list, url));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getPage(Class<T> type, String endpointPath, int pageSize, int page, MultiValueMap<String, String> params) {\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(params)\n-        .replaceQueryParam(\"page[size]\", pageSize)\n-        .replaceQueryParam(\"page[number]\", page)\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveFluxWithErrorHandling(type, webClient.get().uri(url))\n-        .cache()\n-        .doOnNext(list -> log.debug(\"Retrieved {} from {}\", list, url));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<Tuple2<List<T>, Integer>> getPageWithTotalPages(String endpointPath, int pageSize, int page, MultiValueMap<String, String> params) {\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(params)\n-        .replaceQueryParam(\"page[size]\", pageSize)\n-        .replaceQueryParam(\"page[number]\", page)\n-        .queryParam(\"page[totals]\")\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveMonoWithErrorHandling(JSONAPIDocument.class, webClient.get().uri(url))\n-        .map(jsonapiDocument -> (JSONAPIDocument<List<T>>) jsonapiDocument)\n-        .flatMap(document -> Mono.zip(\n-            Mono.fromCallable(document::get),\n-            Mono.fromCallable(document::getMeta)\n-                .map(meta -> ((java.util.Map<String, Integer>) meta.get(\"page\")).get(\"totalPages\"))))\n-        .switchIfEmpty(Mono.zip(Mono.just(List.of()), Mono.just(0)))\n-        .cache()\n-        .doOnNext(tuple -> log.debug(\"Retrieved {} from {}\", tuple.getT1(), url));\n-  }\n-\n-  private <T> Mono<T> retrieveMonoWithErrorHandling(Class<T> type, WebClient.RequestHeadersSpec<?> requestSpec) {\n-    return requestSpec.exchangeToMono(response -> {\n-      if (response.statusCode().is2xxSuccessful()) {\n-        return response.bodyToMono(type);\n-      } else if (response.statusCode().equals(HttpStatus.BAD_REQUEST)) {\n-        return response.bodyToMono(type).onErrorMap(ResourceParseException.class, exception -> new ApiException(exception.getErrors().getErrors()));\n-      } else if (response.statusCode().is4xxClientError()) {\n-        return response.createException().flatMap(Mono::error);\n-      } else if (response.statusCode().is5xxServerError()) {\n-        return response.createException().flatMap(Mono::error);\n-      } else {\n-        log.warn(\"Unknown status returned by api\");\n-        return response.createException().flatMap(Mono::error);\n-      }\n-    });\n-  }\n-\n-  private <T> Flux<T> retrieveFluxWithErrorHandling(Class<T> type, WebClient.RequestHeadersSpec<?> requestSpec) {\n-    return requestSpec.exchangeToFlux(response -> {\n-      if (response.statusCode().is2xxSuccessful()) {\n-        return response.bodyToFlux(type);\n-      } else if (response.statusCode().equals(HttpStatus.BAD_REQUEST)) {\n-        return response.bodyToFlux(type).onErrorMap(ResourceParseException.class, exception -> new ApiException(exception.getErrors().getErrors()));\n-      } else if (response.statusCode().is4xxClientError()) {\n-        return response.createException().flatMapMany(Mono::error);\n-      } else if (response.statusCode().is5xxServerError()) {\n-        return response.createException().flatMapMany(Mono::error);\n-      } else {\n-        log.warn(\"Unknown status returned by api\");\n-        return response.createException().flatMapMany(Mono::error);\n-      }\n-    });\n-  }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "1baf31a538e17b73834122b14ad1bed9e46c2b0f", "committedDate": "2021-01-04 17:28:42 -0500", "message": "Add missing slash (#2095)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "115d0985c8184318d89610d22d3bf10ceaa83b0a", "committedDate": "2021-01-07 21:04:29 -0500", "message": "Remove leaderboard snake case (#2110)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "bc045d14db06dcc4feae6c8f4587d886005111eb", "committedDate": "2021-02-13 18:20:40 -0500", "message": "Use scoretime for rating history and add loading pane (#2142)"}, {"oid": "6e0589ef00a29fa7ca43df0eb331f40aee234c72", "committedDate": "2021-02-21 09:50:45 -0500", "message": "Add ability to conduct moderator reports from the client (#2139)"}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "531d0f57d941849d3bacd616aff4931502026a54", "committedDate": "2021-05-03 10:04:23 -0400", "message": "add exact argument and use equality for toggle controller (#2230)"}, {"oid": "044426f35290dcb59a5244289b0a474e5aa005ba", "committedDate": "2021-05-09 11:49:33 -0400", "message": "Fix review version not being set (#2236)"}, {"oid": "b5e39f11830b2911091bcbc7612181338880779c", "committedDate": "2021-06-08 06:57:18 -0400", "message": "Use new recommended maps and mods attribute for top picks (#2260)"}, {"oid": "4c061711ca870443400f2d0f7076b6b9771be17b", "committedDate": "2021-06-19 23:50:41 -0400", "message": "Change get mods by uid to return optional"}, {"oid": "33163e5f1d7fb17cd0b0d74450c9f64384e434f7", "committedDate": "2021-07-02 21:58:03 -0400", "message": "Remove depreciated mapStatistics from api calls (#2292)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "73e38e91e5773a794e6c23a2e069289261925e4b", "committedDate": "2021-07-29 10:33:52 -0400", "message": "Log the url rather than components separately in api"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMyMDE5OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549320199", "body": "We just changed this in the API to be properly camel case again", "bodyText": "We just changed this in the API to be properly camel case again", "bodyHTML": "<p dir=\"auto\">We just changed this in the API to be properly camel case again</p>", "author": "Brutus5000", "createdAt": "2020-12-28T11:50:25Z", "path": "src/main/java/com/faforever/client/api/dto/Leaderboard.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.faforever.client.api.dto;\n+\n+import com.github.jasminb.jsonapi.annotations.Id;\n+import com.github.jasminb.jsonapi.annotations.Type;\n+import lombok.Data;\n+import java.time.OffsetDateTime;\n+\n+@Data\n+@Type(\"leaderboard\")\n+public class Leaderboard {\n+  @Id\n+  private String id;\n+  private OffsetDateTime createTime;\n+  private OffsetDateTime updateTime;\n+  private String description_key;\n+  private String name_key;\n+  private String technical_name;", "originalCommit": "41d3283903944aac66f95760c3be06e378dc8aa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0OTI5Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549349296", "bodyText": "Brutus did this get changed to being camelCase after you reverted?", "author": "Sheikah45", "createdAt": "2020-12-28T13:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMyMDE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex da8135cf..40aaa5bb 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -12,7 +13,7 @@ public class Leaderboard {\n   private String id;\n   private OffsetDateTime createTime;\n   private OffsetDateTime updateTime;\n-  private String description_key;\n-  private String name_key;\n-  private String technical_name;\n+  private String descriptionKey;\n+  private String nameKey;\n+  private String technicalName;\n }\n\\ No newline at end of file\n", "next_change": {"commit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 40aaa5bb..3fed5bbe 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -13,7 +14,11 @@ public class Leaderboard {\n   private String id;\n   private OffsetDateTime createTime;\n   private OffsetDateTime updateTime;\n+  //TODO: Remove JsonProperty if api gets rid of snake_case\n+  @JsonProperty(\"description_key\")\n   private String descriptionKey;\n+  @JsonProperty(\"name_key\")\n   private String nameKey;\n+  @JsonProperty(\"technical_name\")\n   private String technicalName;\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex da8135cf..3fed5bbe 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -12,7 +14,11 @@ public class Leaderboard {\n   private String id;\n   private OffsetDateTime createTime;\n   private OffsetDateTime updateTime;\n-  private String description_key;\n-  private String name_key;\n-  private String technical_name;\n+  //TODO: Remove JsonProperty if api gets rid of snake_case\n+  @JsonProperty(\"description_key\")\n+  private String descriptionKey;\n+  @JsonProperty(\"name_key\")\n+  private String nameKey;\n+  @JsonProperty(\"technical_name\")\n+  private String technicalName;\n }\n\\ No newline at end of file\n", "next_change": {"commit": "92556052df1aa942558bc57b7d59fe45ad9511ad", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 3fed5bbe..40aaa5bb 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -14,11 +13,7 @@ public class Leaderboard {\n   private String id;\n   private OffsetDateTime createTime;\n   private OffsetDateTime updateTime;\n-  //TODO: Remove JsonProperty if api gets rid of snake_case\n-  @JsonProperty(\"description_key\")\n   private String descriptionKey;\n-  @JsonProperty(\"name_key\")\n   private String nameKey;\n-  @JsonProperty(\"technical_name\")\n   private String technicalName;\n }\n\\ No newline at end of file\n", "next_change": {"commit": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\nindex 40aaa5bb..d98a1946 100644\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n", "chunk": "@@ -16,4 +20,4 @@ public class Leaderboard {\n   private String descriptionKey;\n   private String nameKey;\n   private String technicalName;\n-}\n\\ No newline at end of file\n+}\n", "next_change": {"commit": "49f764d249aa8437651bba64e19df5ea336c4873", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/dto/Leaderboard.java b/src/main/java/com/faforever/client/api/dto/Leaderboard.java\ndeleted file mode 100644\nindex d98a1946..00000000\n--- a/src/main/java/com/faforever/client/api/dto/Leaderboard.java\n+++ /dev/null\n", "chunk": "@@ -1,23 +0,0 @@\n-package com.faforever.client.api.dto;\n-\n-import com.github.jasminb.jsonapi.annotations.Id;\n-import com.github.jasminb.jsonapi.annotations.Type;\n-import lombok.AllArgsConstructor;\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n-\n-import java.time.OffsetDateTime;\n-\n-@Data\n-@Type(\"leaderboard\")\n-@AllArgsConstructor\n-@NoArgsConstructor\n-public class Leaderboard {\n-  @Id\n-  private String id;\n-  private OffsetDateTime createTime;\n-  private OffsetDateTime updateTime;\n-  private String descriptionKey;\n-  private String nameKey;\n-  private String technicalName;\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "92556052df1aa942558bc57b7d59fe45ad9511ad", "committedDate": "2021-01-01 21:32:47 -0500", "message": "Remove snake_case property (#2084)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}]}, {"oid": "b7a3de636218a11c2076e50bf59953d9e3be826b", "url": "https://github.com/FAForever/downlords-faf-client/commit/b7a3de636218a11c2076e50bf59953d9e3be826b", "message": "Code cleanup", "committedDate": "2020-12-29T11:44:01Z", "type": "commit"}, {"oid": "bde9eea83c469241a9ec5f504210f58df2cca22a", "url": "https://github.com/FAForever/downlords-faf-client/commit/bde9eea83c469241a9ec5f504210f58df2cca22a", "message": "Cache map pools", "committedDate": "2020-12-29T11:44:01Z", "type": "commit"}, {"oid": "c37a25b4ff66049a8ee011ea417d18393171a886", "url": "https://github.com/FAForever/downlords-faf-client/commit/c37a25b4ff66049a8ee011ea417d18393171a886", "message": "Merge branch 'develop' into feature/team-matchmaking\n\n# Conflicts:\n#\tsrc/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "committedDate": "2020-12-29T12:06:17Z", "type": "commit"}, {"oid": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "url": "https://github.com/FAForever/downlords-faf-client/commit/1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "message": "leaderboard to camelCase", "committedDate": "2020-12-29T12:06:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcxMzY2Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549713667", "body": "I would include the leaderboard of the queue, although if the api did not change back to camelcase this may break it at the moment", "bodyText": "I would include the leaderboard of the queue, although if the api did not change back to camelcase this may break it at the moment", "bodyHTML": "<p dir=\"auto\">I would include the leaderboard of the queue, although if the api did not change back to camelcase this may break it at the moment</p>", "author": "Sheikah45", "createdAt": "2020-12-29T13:55:59Z", "path": "src/main/java/com/faforever/client/api/FafApiAccessorImpl.java", "diffHunk": "@@ -446,28 +446,42 @@ public void deleteModVersionReview(String id) {\n \n   @Override\n   public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, ImmutableMap.of(INCLUDE, REPLAY_INCLUDES)));\n+    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n   }\n \n   @Override\n-  public Tuple<List<Ladder1v1Map>, java.util.Map<String, ?>> getLadder1v1MapsWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Ladder1v1Map>> jsonApiDoc = getPageWithMeta(\"/data/ladder1v1Map\", count, page, ImmutableMap.of(\n-        INCLUDE, \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,mapVersion.map.author,\" +\n-            \"mapVersion.map.statistics,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-            \"mapVersion.map.versions.reviews.player\"));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n+  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n+    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n+        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n+            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n+            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n+            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n+            \"mapPool.mapVersions.map.versions.reviews.player\",\n+        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  }\n+\n+  @Override\n+  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n+  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));", "originalCommit": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex d608e9b8..745564c6 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -465,6 +465,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        INCLUDE, \"leaderboard\",\n         FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex d608e9b8..8ba35eb6 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -465,6 +466,7 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n   public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n     List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+        INCLUDE, \"leaderboard\",\n         FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n     if (queue.isEmpty()) {\n       return Optional.empty();\n", "next_change": {"commit": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\nindex 8ba35eb6..c9436e46 100644\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n", "chunk": "@@ -290,259 +312,270 @@ public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n   }\n \n   @Override\n-  public void uploadMod(Path file, ByteCountListener listener) {\n+  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n     MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    post(\"/mods/upload\", multipartContent, false);\n+    return postMultipartForm(\"/mods/upload\", multipartContent);\n   }\n \n   @Override\n-  public void uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n+  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n     MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n     multipartContent.add(\"metadata\", java.util.Map.of(\"isRanked\", isRanked));\n-    post(\"/maps/upload\", multipartContent, false);\n+    return postMultipartForm(\"/maps/upload\", multipartContent);\n   }\n \n   @Override\n-  public void changePassword(String username, String currentPasswordHash, String newPasswordHash) {\n-    java.util.Map<String, String> body = java.util.Map.of(\n-        \"currentPassword\", currentPasswordHash,\n-        \"newPassword\", newPasswordHash\n-    );\n-\n-    post(\"/users/changePassword\", body, true);\n-  }\n-\n-  @Override\n-  public ModVersion getModVersion(String uid) {\n-    return (ModVersion) getMany(MOD_VERSION_ENDPOINT, 1,\n-        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, \"mod,mod.latestVersion,mod.versions,mod.uploader\")\n-    ).get(0);\n+  public Mono<ModVersion> getModVersion(String uid) {\n+    return getMany(ModVersion.class, MOD_VERSION_ENDPOINT, 1,\n+        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, MOD_VERSION_INCLUDES)\n+    )\n+        .cast(ModVersion.class)\n+        .next();\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.FEATURED_MOD_FILES, sync = true)\n-  public List<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    String endpoint = String.format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n+  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n+    String endpoint = format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n         Optional.ofNullable(version).map(String::valueOf).orElse(\"latest\"));\n-    return getMany(endpoint, 10_000, java.util.Map.of());\n+    return getMany(FeaturedModFile.class, endpoint, 10_000, java.util.Map.of());\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getNewestReplaysWithMeta(int count, int page) {\n-    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n+  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n         SORT, \"-endTime\",\n         INCLUDE, REPLAY_INCLUDES,\n         FILTER, \"endTime=isnull=false\"\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> getHighestRatedReplaysWithMeta(int count, int page) {\n-    JSONAPIDocument<List<GameReviewsSummary>> pageWithPageCount = getPageWithMeta(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n+  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n         SORT, \"-lowerBound\",\n         // TODO this was done in a rush, check what is actually needed\n-        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.reviews,game.reviews.player,\" +\n+        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.playerStats.ratingChanges,game.reviews,game.reviews.player,\" +\n             \"game.mapVersion,game.mapVersion.map\",\n         FILTER, \"game.endTime=isnull=false\"\n-    ));\n-    return new Tuple<>(pageWithPageCount.get().stream()\n-        .map(GameReviewsSummary::getGame)\n-        .collect(Collectors.toList()),\n-        pageWithPageCount.getMeta());\n+    ))\n+        .map(tuple -> tuple.mapT1(gameReviews ->\n+            gameReviews.stream()\n+                .map(gameReviewSummary -> ((GameReviewsSummary) gameReviewSummary).getGame())\n+                .collect(Collectors.toList()))\n+        );\n   }\n \n   @Override\n-  public Tuple<List<Game>, java.util.Map<String, ?>> findReplaysByQueryWithMeta(String query, int maxResults, int page, SortConfig sortConfig) {\n-    JSONAPIDocument<List<Game>> jsonApiDoc = getPageWithMeta(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n-        FILTER, \"(\" + query + \");endTime=isnull=false\",\n+  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n+    return getPageWithTotalPages(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n+        FILTER, query + \";endTime=isnull=false\",\n         INCLUDE, REPLAY_INCLUDES,\n         SORT, sortConfig.toQuery()\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public Optional<MapVersion> findMapByFolderName(String folderName) {\n-    List<MapVersion> maps = getMany(MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, String.format(\"filename==\\\"*%s*\\\"\", folderName),\n-        INCLUDE, MAP_VERSION_INCLUDES));\n-    if (maps.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(maps.get(0));\n+  public Mono<MapVersion> findMapByFolderName(String folderName) {\n+    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n+        FILTER, rsql(qBuilder().string(\"filename\").eq(format(FILENAME_TEMPLATE, folderName))),\n+        INCLUDE, MAP_VERSION_INCLUDES))\n+        .cast(MapVersion.class)\n+        .next();\n   }\n \n   @Override\n-  public List<Player> getPlayersByIds(Collection<Integer> playerIds) {\n+  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n+    String queryFilter = rsql(qBuilder()\n+        .string(\"filename\").eq(format(FILENAME_TEMPLATE, mapFolderName))\n+        .and()\n+        .string(\"map.latestVersion.hidden\").eq(\"false\"));\n+    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n+        FILTER, queryFilter,\n+        INCLUDE, MAP_VERSION_INCLUDES\n+    ))\n+        .cast(MapVersion.class)\n+        .next();\n+  }\n+\n+  @Override\n+  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n     List<String> ids = playerIds.stream().map(String::valueOf).collect(Collectors.toList());\n \n-    return getMany(\"/data/player\", playerIds.size(), java.util.Map.of(\n+    return getMany(Player.class,\"/data/player\", playerIds.size(), java.util.Map.of(\n         INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"id\").in(ids))\n-    ));\n+        FILTER, rsql(qBuilder().string(\"id\").in(ids))));\n+  }\n+\n+  @Override\n+  public Mono<Player> queryPlayerByName(String playerName) {\n+    return getAll(Player.class, \"/data/player\", java.util.Map.of(\n+        INCLUDE, PLAYER_INCLUDES,\n+        FILTER, rsql(qBuilder().string(\"login\").eq(playerName))))\n+        .cast(Player.class)\n+        .next();\n+\n   }\n \n+  @SneakyThrows\n   @Override\n-  public MeResult getOwnPlayer() {\n-    return getOne(\"/me\", MeResult.class);\n+  public Mono<MeResult> getMe() {\n+    return getOne(MeResult.class, \"/me\");\n   }\n \n   @Override\n-  public GameReview createGameReview(GameReview review) {\n+  public Mono<GameReview> createGameReview(GameReview review) {\n     return post(REPLAY_ENDPOINT + \"/\" + review.getGame().getId() + \"/reviews\", review, GameReview.class);\n   }\n \n   @Override\n-  public void updateGameReview(GameReview review) {\n-    patch(\"/data/gameReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateGameReview(GameReview review) {\n+    return patch(\"/data/gameReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public ModVersionReview createModVersionReview(ModVersionReview review) {\n-    return post(\"/data/modVersion/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n+  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n+    return post(MOD_VERSION_ENDPOINT + \"/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n   }\n \n   @Override\n-  public void updateModVersionReview(ModVersionReview review) {\n-    patch(\"/data/modVersionReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n+    return patch(\"/data/modVersionReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public MapVersionReview createMapVersionReview(MapVersionReview review) {\n+  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n     return post(MAP_VERSION_ENDPOINT + \"/\" + review.getMapVersion().getId() + \"/reviews\", review, MapVersionReview.class);\n   }\n \n   @Override\n-  public void updateMapVersionReview(MapVersionReview review) {\n-    patch(\"/data/mapVersionReview/\" + review.getId(), review, Void.class);\n+  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n+    return patch(\"/data/mapVersionReview/\" + review.getId(), review);\n   }\n \n   @Override\n-  public void deleteGameReview(String id) {\n-    delete(\"/data/gameReview/\" + id);\n+  public Mono<Void> deleteGameReview(String id) {\n+    return delete(\"/data/gameReview/\" + id);\n   }\n \n   @Override\n-  public void deleteMapVersionReview(String id) {\n-    delete(\"/data/mapVersionReview/\" + id);\n+  public Mono<Void> deleteMapVersionReview(String id) {\n+    return delete(\"/data/mapVersionReview/\" + id);\n   }\n \n   @Override\n-  public Tuple<List<Mod>, java.util.Map<String, ?>> findModsByQueryWithMeta(SearchConfig searchConfig, int count, int page) {\n+  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n     MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n     if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + HIDDEN);\n+      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n     }\n     parameterMap.add(INCLUDE, MOD_INCLUDES);\n     parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    JSONAPIDocument<List<Mod>> jsonApiDoc = getPageWithMeta(MOD_ENDPOINT, count, page, parameterMap);\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n+    return getPageWithTotalPages(MOD_ENDPOINT, count, page, parameterMap);\n   }\n \n   @Override\n-  public void deleteModVersionReview(String id) {\n-    delete(\"/data/modVersionReview/\" + id);\n+  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n+    return getPageWithTotalPages(MOD_ENDPOINT, count, page, java.util.Map.of(\n+        INCLUDE, MOD_INCLUDES,\n+        FILTER, rsql(qBuilder()\n+            .bool(\"recommended\").isTrue())\n+    ));\n   }\n \n   @Override\n-  public Optional<Game> findReplayById(int id) {\n-    return Optional.ofNullable(getOne(REPLAY_ENDPOINT + id, Game.class, java.util.Map.of(INCLUDE, REPLAY_INCLUDES)));\n+  public Mono<Void> deleteModVersionReview(String id) {\n+    return delete(\"/data/modVersionReview/\" + id);\n   }\n \n+  @Override\n+  public Mono<Game> findReplayById(int id) {\n+    return getOne(Game.class, REPLAY_ENDPOINT + \"/\" + id, java.util.Map.of(INCLUDE, REPLAY_INCLUDES));\n+  }\n+\n+  @SneakyThrows\n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n-  public List<MatchmakerQueueMapPool> getMatchmakerPools(int matchmakerQueueId) {\n-    return getAll(\"/data/matchmakerQueueMapPool\", java.util.Map.of(\n-        INCLUDE, \"matchmakerQueue,mapPool,mapPool.mapVersions,\" +\n-            \"mapPool.mapVersions.map,mapPool.mapVersions.map.latestVersion,\" +\n-            \"mapPool.mapVersions.map.author,mapPool.mapVersions.map.statistics,\" +\n-            \"mapPool.mapVersions.map.reviewsSummary,mapPool.mapVersions.map.versions.reviews,\" +\n-            \"mapPool.mapVersions.map.versions.reviews.player\",\n-        FILTER, rsql(qBuilder().string(\"matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)))));\n+  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n+    QBuilder qBuilder = new QBuilder<>();\n+    List<Condition<?>> conditions = new ArrayList<>();\n+    conditions.add(qBuilder().string(\"mapPool.matchmakerQueueMapPool.matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)));\n+    conditions.add(qBuilder().floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").lte(rating).or()\n+        .floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").ne(null));\n+    return getAll(MapPoolAssignment.class, \"/data/mapPoolAssignment\", java.util.Map.of(\n+        INCLUDE, MATCHMAKER_POOL_INCLUDES,\n+        FILTER, rsql(qBuilder.and(conditions)).replace(\"ex\", \"isnull\"),\n+        SORT, \"mapVersion.width,mapVersion.map.displayName\"));\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n-  public Optional<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    List<MatchmakerQueue> queue = getAll(\"/data/matchmakerQueue\", java.util.Map.of(\n+  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n+    return getAll(MatchmakerQueue.class, \"/data/matchmakerQueue\", java.util.Map.of(\n         INCLUDE, \"leaderboard\",\n-        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))));\n-    if (queue.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(queue.get(0));\n+        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))))\n+        .cast(MatchmakerQueue.class)\n+        .next();\n   }\n \n   @Override\n-  public List<TutorialCategory> getTutorialCategories() {\n-    return getAll(\"/data/tutorialCategory\",\n+  public Flux<TutorialCategory> getTutorialCategories() {\n+    return getAll(TutorialCategory.class, \"/data/tutorialCategory\",\n         java.util.Map.of(INCLUDE, \"tutorials,tutorials.mapVersion.map,tutorials.mapVersion.map.latestVersion,\" +\n-            \"tutorials.mapVersion.map.author,tutorials.mapVersion.map.statistics\"));\n+            \"tutorials.mapVersion.map.author\"));\n   }\n \n   @Override\n-  public Tuple<List<MapVersion>, java.util.Map<String, ?>> getOwnedMapsWithMeta(int playerId, int loadMoreCount, int page) {\n-    JSONAPIDocument<List<MapVersion>> jsonApiDoc = getPageWithMeta(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n+  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n+    return getPageWithTotalPages(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n         INCLUDE, MAP_VERSION_INCLUDES,\n         FILTER, rsql(qBuilder().string(\"map.author.id\").eq(String.valueOf(playerId)))\n     ));\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n   }\n \n   @Override\n-  public void updateMapVersion(String id, MapVersion mapVersion) {\n-    patch(String.format(\"/data/mapVersion/%s\", id), mapVersion, Void.class);\n+  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n+    return patch(format(\"/data/mapVersion/%s\", id), mapVersion);\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.CLAN, sync = true)\n-  public Optional<Clan> getClanByTag(String tag) {\n-    List<Clan> clans = getMany(\"/data/clan\", 1, java.util.Map.of(\n-        INCLUDE, \"leader,founder,memberships,memberships.player\",\n+  public Mono<Clan> getClanByTag(String tag) {\n+    return getMany(Clan.class, \"/data/clan\", 1, java.util.Map.of(\n+        INCLUDE, CLAN_INCLUDES,\n         FILTER, rsql(qBuilder().string(\"tag\").eq(tag))\n-    ));\n-    if (clans.isEmpty()) {\n-      return Optional.empty();\n-    }\n-    return Optional.ofNullable(clans.get(0));\n+    ))\n+        .cast(Clan.class)\n+        .next();\n   }\n \n   @Override\n-  public Tuple<List<Map>, java.util.Map<String, ?>> findMapsByQueryWithMeta(SearchConfig searchConfig, int count, int page) {\n+  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n     MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n     if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + HIDDEN);\n+      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n     }\n     parameterMap.add(INCLUDE, MAP_INCLUDES);\n     parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    JSONAPIDocument<List<Map>> jsonApiDoc = getPageWithMeta(MAP_ENDPOINT, count, page, parameterMap);\n-    return new Tuple<>(jsonApiDoc.get(), jsonApiDoc.getMeta());\n-  }\n-\n-  @Override\n-  public Optional<MapVersion> findMapVersionById(String id) {\n-    // FIXME: that is not gonna work this way\n-    //FIXME: filter hidden maps\n-    return Optional.ofNullable(getOne(MAP_ENDPOINT + \"/\" + id, MapVersion.class));\n+    return getPageWithTotalPages(MAP_ENDPOINT, count, page, parameterMap);\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.COOP_MAPS, sync = true)\n-  public List<CoopMission> getCoopMissions() {\n-    return getAll(\"/data/coopMission\");\n+  public Flux<CoopMission> getCoopMissions() {\n+    return getAll(CoopMission.class, \"/data/coopMission\");\n   }\n \n   @Override\n   @Cacheable(value = CacheNames.COOP_LEADERBOARD, sync = true)\n-  public List<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n+  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n     Condition<?> filterCondition = qBuilder().string(\"mission\").eq(missionId);\n \n     if (numberOfPlayers > 0) {\n       filterCondition = filterCondition.and().intNum(\"playerCount\").eq(numberOfPlayers);\n     }\n \n-    return getMany(\"/data/coopResult\", 1000, java.util.Map.of(\n+    return getMany(CoopResult.class, \"/data/coopResult\", 1000, java.util.Map.of(\n         FILTER, rsql(filterCondition),\n         INCLUDE, COOP_RESULT_INCLUDES,\n         SORT, \"duration\"\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java b/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\ndeleted file mode 100644\nindex c9436e46..00000000\n--- a/src/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,788 +0,0 @@\n-package com.faforever.client.api;\n-\n-import com.faforever.client.config.CacheNames;\n-import com.faforever.client.config.ClientProperties;\n-import com.faforever.client.config.ClientProperties.Api;\n-import com.faforever.client.io.CountingFileSystemResource;\n-import com.faforever.client.mod.FeaturedMod;\n-import com.faforever.client.user.event.LoggedOutEvent;\n-import com.faforever.client.vault.search.SearchController.SearchConfig;\n-import com.faforever.client.vault.search.SearchController.SortConfig;\n-import com.faforever.commons.api.dto.AchievementDefinition;\n-import com.faforever.commons.api.dto.ApiException;\n-import com.faforever.commons.api.dto.Clan;\n-import com.faforever.commons.api.dto.CoopMission;\n-import com.faforever.commons.api.dto.CoopResult;\n-import com.faforever.commons.api.dto.FeaturedModFile;\n-import com.faforever.commons.api.dto.Game;\n-import com.faforever.commons.api.dto.GameReview;\n-import com.faforever.commons.api.dto.GameReviewsSummary;\n-import com.faforever.commons.api.dto.Leaderboard;\n-import com.faforever.commons.api.dto.LeaderboardEntry;\n-import com.faforever.commons.api.dto.LeaderboardRatingJournal;\n-import com.faforever.commons.api.dto.Map;\n-import com.faforever.commons.api.dto.MapPoolAssignment;\n-import com.faforever.commons.api.dto.MapVersion;\n-import com.faforever.commons.api.dto.MapVersionReview;\n-import com.faforever.commons.api.dto.MatchmakerQueue;\n-import com.faforever.commons.api.dto.MeResult;\n-import com.faforever.commons.api.dto.Mod;\n-import com.faforever.commons.api.dto.ModVersion;\n-import com.faforever.commons.api.dto.ModVersionReview;\n-import com.faforever.commons.api.dto.ModerationReport;\n-import com.faforever.commons.api.dto.Player;\n-import com.faforever.commons.api.dto.PlayerAchievement;\n-import com.faforever.commons.api.dto.PlayerEvent;\n-import com.faforever.commons.api.dto.Tournament;\n-import com.faforever.commons.api.dto.TutorialCategory;\n-import com.faforever.commons.io.ByteCountListener;\n-import com.github.jasminb.jsonapi.JSONAPIDocument;\n-import com.github.jasminb.jsonapi.exceptions.ResourceParseException;\n-import com.github.rutledgepaulv.qbuilders.builders.QBuilder;\n-import com.github.rutledgepaulv.qbuilders.conditions.Condition;\n-import com.github.rutledgepaulv.qbuilders.visitors.RSQLVisitor;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.eventbus.EventBus;\n-import com.google.common.eventbus.Subscribe;\n-import lombok.RequiredArgsConstructor;\n-import lombok.SneakyThrows;\n-import lombok.extern.slf4j.Slf4j;\n-import org.jetbrains.annotations.NotNull;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.cache.annotation.Cacheable;\n-import org.springframework.context.annotation.Profile;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Component;\n-import org.springframework.util.CollectionUtils;\n-import org.springframework.util.LinkedMultiValueMap;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.web.reactive.function.client.WebClient;\n-import org.springframework.web.util.UriComponents;\n-import org.springframework.web.util.UriComponentsBuilder;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import reactor.util.function.Tuple2;\n-\n-import java.io.Serializable;\n-import java.nio.file.Path;\n-import java.time.LocalDateTime;\n-import java.time.ZoneOffset;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.stream.Collectors;\n-\n-import static java.lang.String.format;\n-\n-@SuppressWarnings(\"unchecked\")\n-@Slf4j\n-@Component\n-@Profile(\"!offline\")\n-@RequiredArgsConstructor\n-public class FafApiAccessorImpl implements FafApiAccessor, InitializingBean {\n-\n-  private static final String REPLAY_ENDPOINT = \"/data/game\";\n-  private static final String MAP_ENDPOINT = \"/data/map\";\n-  private static final String MAP_VERSION_ENDPOINT = \"/data/mapVersion\";\n-  private static final String MOD_ENDPOINT = \"/data/mod\";\n-  private static final String MOD_VERSION_ENDPOINT = \"/data/modVersion\";\n-  private static final String ACHIEVEMENT_ENDPOINT = \"/data/achievement\";\n-  private static final String LEADERBOARD_ENDPOINT = \"/data/leaderboard\";\n-  private static final String LEADERBOARD_ENTRY_ENDPOINT = \"/data/leaderboardRating\";\n-  private static final String REPORT_ENDPOINT = \"/data/moderationReport\";\n-  private static final String TOURNAMENT_LIST_ENDPOINT = \"/challonge/v1/tournaments.json\";\n-  private static final String REPLAY_INCLUDES = \"featuredMod,playerStats,playerStats.player,playerStats.ratingChanges,reviews,\" +\n-      \"reviews.player,mapVersion,mapVersion.map,reviewsSummary\";\n-  private static final String MAP_INCLUDES = \"latestVersion,author,reviewsSummary,\" +\n-      \"versions.reviews,versions.reviews.player\";\n-  private static final String MAP_VERSION_INCLUDES = \"map,map.latestVersion,map.author,\" +\n-      \"map.reviewsSummary,map.versions.reviews,map.versions.reviews.player\";\n-  private static final String MATCHMAKER_POOL_INCLUDES = \"mapVersion,mapVersion.map,mapVersion.map.latestVersion,\" +\n-      \"mapVersion.map.author,mapVersion.map.reviewsSummary,mapVersion.map.versions.reviews,\" +\n-      \"mapVersion.map.versions.reviews.player\";\n-  private static final String MOD_INCLUDES = \"latestVersion,reviewsSummary,versions,versions.reviews,\" +\n-      \"versions.reviews.player\";\n-  private static final String MOD_VERSION_INCLUDES = \"mod,mod.latestVersion,mod.versions,mod.versions.reviews,\" +\n-      \"mod.versions.reviews.player,mod.reviewsSummary,mod.uploader\";\n-  private static final String LEADERBOARD_ENTRY_INCLUDES = \"player,leaderboard\";\n-  private static final String COOP_RESULT_INCLUDES = \"game.playerStats.player\";\n-  private static final String PLAYER_INCLUDES = \"names\";\n-  private static final String REPORT_INCLUDES = \"reporter,lastModerator,reportedUsers,game\";\n-  private static final String FILTER = \"filter\";\n-  private static final String SORT = \"sort\";\n-  private static final String INCLUDE = \"include\";\n-  private static final String NOT_HIDDEN = \"latestVersion.hidden==\\\"false\\\"\";\n-  private static final String FILENAME_TEMPLATE = \"maps/%s.zip\";\n-  private static final String CLAN_INCLUDES = \"leader,founder,memberships,memberships.player\";\n-\n-  private final EventBus eventBus;\n-  private final ClientProperties clientProperties;\n-  private final JsonApiReader jsonApiReader;\n-  private final JsonApiWriter jsonApiWriter;\n-  private final OAuthTokenFilter oAuthTokenFilter;\n-\n-  private CountDownLatch authorizedLatch = new CountDownLatch(1);\n-  private WebClient webClient;\n-\n-  private static String rsql(Condition<?> eq) {\n-    return eq.query(new RSQLVisitor());\n-  }\n-\n-  private static <T extends QBuilder<T>> QBuilder<T> qBuilder() {\n-    return new QBuilder<>();\n-  }\n-\n-  @Override\n-  public void afterPropertiesSet() {\n-    eventBus.register(this);\n-  }\n-\n-  @Override\n-  public void authorize() {\n-    Api apiProperties = clientProperties.getApi();\n-\n-    webClient = WebClient.builder()\n-        .baseUrl(apiProperties.getBaseUrl())\n-        .filter(oAuthTokenFilter)\n-        .codecs(clientCodecConfigurer -> {\n-          clientCodecConfigurer.customCodecs().register(jsonApiReader);\n-          clientCodecConfigurer.customCodecs().register(jsonApiWriter);\n-        })\n-        .build();\n-\n-    authorizedLatch.countDown();\n-  }\n-\n-  @Subscribe\n-  public void onLoggedOutEvent(LoggedOutEvent event) {\n-    authorizedLatch = new CountDownLatch(1);\n-  }\n-\n-  @Subscribe\n-  public void onSessionExpiredEvent(SessionExpiredEvent event) {\n-    authorizedLatch = new CountDownLatch(1);\n-  }\n-\n-  @Override\n-  public Flux<PlayerAchievement> getPlayerAchievements(int playerId) {\n-    return getAll(PlayerAchievement.class, \"/data/playerAchievement\", java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId))\n-    ));\n-  }\n-\n-  @Override\n-  public Flux<PlayerEvent> getPlayerEvents(int playerId) {\n-    return getAll(PlayerEvent.class, \"/data/playerEvent\", java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId))\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.ACHIEVEMENTS, sync = true)\n-  public Flux<AchievementDefinition> getAchievementDefinitions() {\n-    return getAll(AchievementDefinition.class, ACHIEVEMENT_ENDPOINT, java.util.Map.of(\n-        SORT, \"order\"\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.ACHIEVEMENTS, sync = true)\n-  public Mono<AchievementDefinition> getAchievementDefinition(String achievementId) {\n-    return getOne(AchievementDefinition.class, ACHIEVEMENT_ENDPOINT + \"/\" + achievementId);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MODS, sync = true)\n-  public Flux<Mod> getMods() {\n-    return getAll(Mod.class, MOD_ENDPOINT, java.util.Map.of(\n-        INCLUDE, MOD_INCLUDES));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.FEATURED_MODS, sync = true)\n-  public Flux<com.faforever.commons.api.dto.FeaturedMod> getFeaturedMods() {\n-    return getMany(com.faforever.commons.api.dto.FeaturedMod.class, \"/data/featuredMod\", 1000, java.util.Map.of());\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Flux<Leaderboard> getLeaderboards() {\n-    return getAll(Leaderboard.class, LEADERBOARD_ENDPOINT);\n-  }\n-\n-  @Override\n-  public Flux<LeaderboardEntry> getLeaderboardEntriesForPlayer(int playerId) {\n-    return getAll(LeaderboardEntry.class, LEADERBOARD_ENTRY_ENDPOINT, java.util.Map.of(\n-        FILTER, rsql(qBuilder().intNum(\"player.id\").eq(playerId)),\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Flux<LeaderboardEntry> getAllLeaderboardEntries(String leaderboardTechnicalName) {\n-    return getAll(LeaderboardEntry.class, LEADERBOARD_ENTRY_ENDPOINT, java.util.Map.of(\n-        FILTER, rsql(qBuilder().string(\"leaderboard.technicalName\").eq(leaderboardTechnicalName)\n-            .and().instant(\"updateTime\").after(LocalDateTime.now().minusMonths(1).toInstant(ZoneOffset.UTC), false)),\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.LEADERBOARD, sync = true)\n-  public Mono<Tuple2<List<LeaderboardEntry>, Integer>> getLeaderboardEntriesWithTotalPages(String leaderboardId, int count, int page) {\n-    return getPageWithTotalPages(LEADERBOARD_ENTRY_ENDPOINT, count, page, ImmutableMap.of(\n-        INCLUDE, LEADERBOARD_ENTRY_INCLUDES,\n-        SORT, \"-rating\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.RATING_HISTORY, sync = true)\n-  public Flux<LeaderboardRatingJournal> getRatingJournal(int playerId, int leaderboardId) {\n-    return getAll(LeaderboardRatingJournal.class, \"/data/leaderboardRatingJournal\", java.util.Map.of(\n-        FILTER, rsql(qBuilder()\n-            .intNum(\"gamePlayerStats.player.id\").eq(playerId)\n-            .and()\n-            .intNum(\"leaderboard.id\").eq(leaderboardId)),\n-        INCLUDE, \"gamePlayerStats\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getRecommendedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        FILTER, rsql(qBuilder()\n-            .bool(\"recommended\").isTrue())\n-    ));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MAPS, sync = true)\n-  public Mono<Tuple2<List<Map>, Integer>> getMostPlayedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-gamesPlayed\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getHighestRatedMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-reviewsSummary.lowerBound\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getNewestMapsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-updateTime\",\n-        FILTER, NOT_HIDDEN\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> getMapsByIdWithTotalPages(List<Integer> mapIdList, int count, int page) {\n-    String filterCriteria = mapIdList.stream()\n-        .map(Object::toString)\n-        .collect(Collectors.joining(\",\", \"latestVersion.map.id=in=(\", \")\"));\n-\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MAP_INCLUDES,\n-        SORT, \"-updateTime\",\n-        FILTER, filterCriteria\n-    ));\n-  }\n-\n-  @Override\n-  public Flux<Game> getLastGamesOnMap(int playerId, String mapVersionId, int count) {\n-    return getMany(Game.class, REPLAY_ENDPOINT, count, java.util.Map.of(\n-        FILTER, rsql(qBuilder()\n-            .string(\"mapVersion.id\").eq(mapVersionId)\n-            .and()\n-            .intNum(\"playerStats.player.id\").eq(playerId)),\n-        INCLUDE, REPLAY_INCLUDES,\n-        SORT, \"-endTime\"\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMod(Path file, ByteCountListener listener) {\n-    MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    return postMultipartForm(\"/mods/upload\", multipartContent);\n-  }\n-\n-  @Override\n-  public Mono<Void> uploadMap(Path file, boolean isRanked, ByteCountListener listener) {\n-    MultiValueMap<String, Object> multipartContent = createFileMultipart(file, listener);\n-    multipartContent.add(\"metadata\", java.util.Map.of(\"isRanked\", isRanked));\n-    return postMultipartForm(\"/maps/upload\", multipartContent);\n-  }\n-\n-  @Override\n-  public Mono<ModVersion> getModVersion(String uid) {\n-    return getMany(ModVersion.class, MOD_VERSION_ENDPOINT, 1,\n-        java.util.Map.of(FILTER, rsql(qBuilder().string(\"uid\").eq(uid)), INCLUDE, MOD_VERSION_INCLUDES)\n-    )\n-        .cast(ModVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.FEATURED_MOD_FILES, sync = true)\n-  public Flux<FeaturedModFile> getFeaturedModFiles(FeaturedMod featuredMod, Integer version) {\n-    String endpoint = format(\"/featuredMods/%s/files/%s\", featuredMod.getId(),\n-        Optional.ofNullable(version).map(String::valueOf).orElse(\"latest\"));\n-    return getMany(FeaturedModFile.class, endpoint, 10_000, java.util.Map.of());\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getNewestReplaysWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(REPLAY_ENDPOINT, count, page, java.util.Map.of(\n-        SORT, \"-endTime\",\n-        INCLUDE, REPLAY_INCLUDES,\n-        FILTER, \"endTime=isnull=false\"\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> getHighestRatedReplaysWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(\"/data/gameReviewsSummary\", count, page, java.util.Map.of(\n-        SORT, \"-lowerBound\",\n-        // TODO this was done in a rush, check what is actually needed\n-        INCLUDE, \"game,game.featuredMod,game.playerStats,game.playerStats.player,game.playerStats.ratingChanges,game.reviews,game.reviews.player,\" +\n-            \"game.mapVersion,game.mapVersion.map\",\n-        FILTER, \"game.endTime=isnull=false\"\n-    ))\n-        .map(tuple -> tuple.mapT1(gameReviews ->\n-            gameReviews.stream()\n-                .map(gameReviewSummary -> ((GameReviewsSummary) gameReviewSummary).getGame())\n-                .collect(Collectors.toList()))\n-        );\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Game>, Integer>> findReplaysByQueryWithTotalPages(String query, int maxResults, int page, SortConfig sortConfig) {\n-    return getPageWithTotalPages(REPLAY_ENDPOINT, maxResults, page, java.util.Map.of(\n-        FILTER, query + \";endTime=isnull=false\",\n-        INCLUDE, REPLAY_INCLUDES,\n-        SORT, sortConfig.toQuery()\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> findMapByFolderName(String folderName) {\n-    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, rsql(qBuilder().string(\"filename\").eq(format(FILENAME_TEMPLATE, folderName))),\n-        INCLUDE, MAP_VERSION_INCLUDES))\n-        .cast(MapVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Mono<MapVersion> getMapLatestVersion(String mapFolderName) {\n-    String queryFilter = rsql(qBuilder()\n-        .string(\"filename\").eq(format(FILENAME_TEMPLATE, mapFolderName))\n-        .and()\n-        .string(\"map.latestVersion.hidden\").eq(\"false\"));\n-    return getMany(MapVersion.class, MAP_VERSION_ENDPOINT, 1, java.util.Map.of(\n-        FILTER, queryFilter,\n-        INCLUDE, MAP_VERSION_INCLUDES\n-    ))\n-        .cast(MapVersion.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Flux<Player> getPlayersByIds(Collection<Integer> playerIds) {\n-    List<String> ids = playerIds.stream().map(String::valueOf).collect(Collectors.toList());\n-\n-    return getMany(Player.class,\"/data/player\", playerIds.size(), java.util.Map.of(\n-        INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"id\").in(ids))));\n-  }\n-\n-  @Override\n-  public Mono<Player> queryPlayerByName(String playerName) {\n-    return getAll(Player.class, \"/data/player\", java.util.Map.of(\n-        INCLUDE, PLAYER_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"login\").eq(playerName))))\n-        .cast(Player.class)\n-        .next();\n-\n-  }\n-\n-  @SneakyThrows\n-  @Override\n-  public Mono<MeResult> getMe() {\n-    return getOne(MeResult.class, \"/me\");\n-  }\n-\n-  @Override\n-  public Mono<GameReview> createGameReview(GameReview review) {\n-    return post(REPLAY_ENDPOINT + \"/\" + review.getGame().getId() + \"/reviews\", review, GameReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateGameReview(GameReview review) {\n-    return patch(\"/data/gameReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<ModVersionReview> createModVersionReview(ModVersionReview review) {\n-    return post(MOD_VERSION_ENDPOINT + \"/\" + review.getModVersion().getId() + \"/reviews\", review, ModVersionReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateModVersionReview(ModVersionReview review) {\n-    return patch(\"/data/modVersionReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<MapVersionReview> createMapVersionReview(MapVersionReview review) {\n-    return post(MAP_VERSION_ENDPOINT + \"/\" + review.getMapVersion().getId() + \"/reviews\", review, MapVersionReview.class);\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersionReview(MapVersionReview review) {\n-    return patch(\"/data/mapVersionReview/\" + review.getId(), review);\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteGameReview(String id) {\n-    return delete(\"/data/gameReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteMapVersionReview(String id) {\n-    return delete(\"/data/mapVersionReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> findModsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n-    MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n-    if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n-    }\n-    parameterMap.add(INCLUDE, MOD_INCLUDES);\n-    parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    return getPageWithTotalPages(MOD_ENDPOINT, count, page, parameterMap);\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Mod>, Integer>> getRecommendedModsWithTotalPages(int count, int page) {\n-    return getPageWithTotalPages(MOD_ENDPOINT, count, page, java.util.Map.of(\n-        INCLUDE, MOD_INCLUDES,\n-        FILTER, rsql(qBuilder()\n-            .bool(\"recommended\").isTrue())\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> deleteModVersionReview(String id) {\n-    return delete(\"/data/modVersionReview/\" + id);\n-  }\n-\n-  @Override\n-  public Mono<Game> findReplayById(int id) {\n-    return getOne(Game.class, REPLAY_ENDPOINT + \"/\" + id, java.util.Map.of(INCLUDE, REPLAY_INCLUDES));\n-  }\n-\n-  @SneakyThrows\n-  @Override\n-  @Cacheable(value = CacheNames.MATCHMAKER_POOLS, sync = true)\n-  public Flux<MapPoolAssignment> getMatchmakerPoolMaps(int matchmakerQueueId, float rating) {\n-    QBuilder qBuilder = new QBuilder<>();\n-    List<Condition<?>> conditions = new ArrayList<>();\n-    conditions.add(qBuilder().string(\"mapPool.matchmakerQueueMapPool.matchmakerQueue.id\").eq(String.valueOf(matchmakerQueueId)));\n-    conditions.add(qBuilder().floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").lte(rating).or()\n-        .floatNum(\"mapPool.matchmakerQueueMapPool.minRating\").ne(null));\n-    return getAll(MapPoolAssignment.class, \"/data/mapPoolAssignment\", java.util.Map.of(\n-        INCLUDE, MATCHMAKER_POOL_INCLUDES,\n-        FILTER, rsql(qBuilder.and(conditions)).replace(\"ex\", \"isnull\"),\n-        SORT, \"mapVersion.width,mapVersion.map.displayName\"));\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.MATCHMAKER_QUEUES, sync = true)\n-  public Mono<MatchmakerQueue> getMatchmakerQueue(String technicalName) {\n-    return getAll(MatchmakerQueue.class, \"/data/matchmakerQueue\", java.util.Map.of(\n-        INCLUDE, \"leaderboard\",\n-        FILTER, rsql(qBuilder().string(\"technicalName\").eq(technicalName))))\n-        .cast(MatchmakerQueue.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Flux<TutorialCategory> getTutorialCategories() {\n-    return getAll(TutorialCategory.class, \"/data/tutorialCategory\",\n-        java.util.Map.of(INCLUDE, \"tutorials,tutorials.mapVersion.map,tutorials.mapVersion.map.latestVersion,\" +\n-            \"tutorials.mapVersion.map.author\"));\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<MapVersion>, Integer>> getOwnedMapsWithTotalPages(int playerId, int loadMoreCount, int page) {\n-    return getPageWithTotalPages(MAP_VERSION_ENDPOINT, loadMoreCount, page, java.util.Map.of(\n-        INCLUDE, MAP_VERSION_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"map.author.id\").eq(String.valueOf(playerId)))\n-    ));\n-  }\n-\n-  @Override\n-  public Mono<Void> updateMapVersion(String id, MapVersion mapVersion) {\n-    return patch(format(\"/data/mapVersion/%s\", id), mapVersion);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.CLAN, sync = true)\n-  public Mono<Clan> getClanByTag(String tag) {\n-    return getMany(Clan.class, \"/data/clan\", 1, java.util.Map.of(\n-        INCLUDE, CLAN_INCLUDES,\n-        FILTER, rsql(qBuilder().string(\"tag\").eq(tag))\n-    ))\n-        .cast(Clan.class)\n-        .next();\n-  }\n-\n-  @Override\n-  public Mono<Tuple2<List<Map>, Integer>> findMapsByQueryWithTotalPages(SearchConfig searchConfig, int count, int page) {\n-    MultiValueMap<String, String> parameterMap = new LinkedMultiValueMap<>();\n-    if (searchConfig.hasQuery()) {\n-      parameterMap.add(FILTER, searchConfig.getSearchQuery() + \";\" + NOT_HIDDEN);\n-    }\n-    parameterMap.add(INCLUDE, MAP_INCLUDES);\n-    parameterMap.add(SORT, searchConfig.getSortConfig().toQuery());\n-    return getPageWithTotalPages(MAP_ENDPOINT, count, page, parameterMap);\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.COOP_MAPS, sync = true)\n-  public Flux<CoopMission> getCoopMissions() {\n-    return getAll(CoopMission.class, \"/data/coopMission\");\n-  }\n-\n-  @Override\n-  @Cacheable(value = CacheNames.COOP_LEADERBOARD, sync = true)\n-  public Flux<CoopResult> getCoopLeaderboard(String missionId, int numberOfPlayers) {\n-    Condition<?> filterCondition = qBuilder().string(\"mission\").eq(missionId);\n-\n-    if (numberOfPlayers > 0) {\n-      filterCondition = filterCondition.and().intNum(\"playerCount\").eq(numberOfPlayers);\n-    }\n-\n-    return getMany(CoopResult.class, \"/data/coopResult\", 1000, java.util.Map.of(\n-        FILTER, rsql(filterCondition),\n-        INCLUDE, COOP_RESULT_INCLUDES,\n-        SORT, \"duration\"\n-    ));\n-  }\n-\n-  @Override\n-  @SneakyThrows\n-  public Flux<Tournament> getAllTournaments() {\n-    authorizedLatch.await();\n-    return getAllNoPaging(Tournament.class, TOURNAMENT_LIST_ENDPOINT, java.util.Map.of());\n-  }\n-\n-  @Override\n-  public Flux<ModerationReport> getPlayerModerationReports(int playerId) {\n-    return getAllNoPaging(ModerationReport.class, REPORT_ENDPOINT, java.util.Map.of(\n-        INCLUDE, REPORT_INCLUDES,\n-        FILTER, rsql(qBuilder().intNum(\"reporter.id\").eq(playerId))))\n-        .cast(ModerationReport.class);\n-  }\n-\n-  @Override\n-  public Mono<ModerationReport> postModerationReport(com.faforever.client.reporting.ModerationReport report) {\n-    List<java.util.Map<String, String>> reportedUsers = new ArrayList<>();\n-    report.getReportedUsers().forEach(player -> reportedUsers.add(java.util.Map.of(\"type\", \"player\", \"id\", String.valueOf(player.getId()))));\n-    java.util.Map<String, Object> relationships = new HashMap<>(java.util.Map.of(\"reportedUsers\", java.util.Map.of(\"data\", reportedUsers)));\n-    if (report.getGameId() != null) {\n-      relationships.put(\"game\", java.util.Map.of(\"data\", java.util.Map.of(\"type\", \"game\", \"id\", report.getGameId())));\n-    }\n-    java.util.Map<String, Object> body = java.util.Map.of(\"data\", List.of(java.util.Map.of(\n-        \"type\", \"moderationReport\",\n-        \"attributes\", java.util.Map.of(\"gameIncidentTimecode\", report.getGameIncidentTimeCode(), \"reportDescription\", report.getReportDescription()),\n-        \"relationships\", relationships)));\n-    return post(REPORT_ENDPOINT, body, ModerationReport.class);\n-  }\n-\n-  @NotNull\n-  private MultiValueMap<String, Object> createFileMultipart(Path file, ByteCountListener listener) {\n-    MultiValueMap<String, Object> form = new LinkedMultiValueMap<>();\n-    form.add(\"file\", new CountingFileSystemResource(file, listener));\n-    return form;\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> postMultipartForm(String endpointPath, Object request) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.post().uri(endpointPath)\n-        .contentType(MediaType.MULTIPART_FORM_DATA)\n-        .bodyValue(request))\n-        .doOnSuccess(aVoid -> log.debug(\"Posted {} to {}\", request, endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<T> post(String endpointPath, Object request, Class<T> type) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(type, webClient.post().uri(endpointPath)\n-        .contentType(MediaType.parseMediaType(\"application/vnd.api+json;charset=utf-8\"))\n-        .bodyValue(request))\n-        .doOnNext(object -> log.debug(\"Posted {} to {} with type {}\", object, endpointPath, type));\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> patch(String endpointPath, Object request) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.patch().uri(endpointPath)\n-            .contentType(MediaType.parseMediaType(\"application/vnd.api+json;charset=utf-8\"))\n-            .bodyValue(request))\n-        .doOnSuccess(aVoid -> log.debug(\"Patched {} at {}\", request, endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private Mono<Void> delete(String endpointPath) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(Void.class, webClient.delete().uri(endpointPath))\n-        .doOnSuccess(aVoid -> log.debug(\"Deleted {}\", endpointPath));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<T> getOne(Class<T> type, String endpointPath) {\n-    authorizedLatch.await();\n-    return retrieveMonoWithErrorHandling(type, webClient.get().uri(endpointPath))\n-        .cache()\n-        .doOnNext(object -> log.debug(\"Retrieved {} from {} with type {}\", object, endpointPath, type));\n-  }\n-\n-  @NotNull\n-  private <T> Mono<T> getOne(Class<T> type, String endpointPath, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(CollectionUtils.toMultiValueMap(multiValues))\n-        .build();\n-\n-    return getOne(type, uriComponents.toUriString());\n-  }\n-\n-  private <T> Flux<T> getAll(Class<T> type, String endpointPath) {\n-    return getAll(type, endpointPath, Collections.emptyMap());\n-  }\n-\n-  private <T> Flux<T> getAll(Class<T> type, String endpointPath, java.util.Map<String, Serializable> params) {\n-    return getMany(type, endpointPath, clientProperties.getApi().getMaxPageSize(), params);\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getMany(Class<T> type, String endpointPath, int count, java.util.Map<String, Serializable> params) {\n-    return getPage(type, endpointPath, count, 1, params);\n-  }\n-\n-  private <T> Flux<T> getPage(Class<T> type, String endpointPath, int pageSize, int page, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    return getPage(type, endpointPath, pageSize, page, CollectionUtils.toMultiValueMap(multiValues));\n-  }\n-\n-  private <T> Mono<Tuple2<List<T>, Integer>> getPageWithTotalPages(String endpointPath, int pageSize, int page, java.util.Map<String, Serializable> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-\n-    return getPageWithTotalPages(endpointPath, pageSize, page, CollectionUtils.toMultiValueMap(multiValues));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getAllNoPaging(Class<T> type, String endpointPath, java.util.Map<String, String> params) {\n-    java.util.Map<String, List<String>> multiValues = params.entrySet().stream()\n-        .collect(Collectors.toMap(Entry::getKey, entry -> Collections.singletonList(String.valueOf(entry.getValue()))));\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(CollectionUtils.toMultiValueMap(multiValues))\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveFluxWithErrorHandling(type, webClient.get().uri(url))\n-        .cache()\n-        .doOnNext(list -> log.debug(\"Retrieved {} from {}\", list, url));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Flux<T> getPage(Class<T> type, String endpointPath, int pageSize, int page, MultiValueMap<String, String> params) {\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(params)\n-        .replaceQueryParam(\"page[size]\", pageSize)\n-        .replaceQueryParam(\"page[number]\", page)\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveFluxWithErrorHandling(type, webClient.get().uri(url))\n-        .cache()\n-        .doOnNext(list -> log.debug(\"Retrieved {} from {}\", list, url));\n-  }\n-\n-  @SneakyThrows\n-  private <T> Mono<Tuple2<List<T>, Integer>> getPageWithTotalPages(String endpointPath, int pageSize, int page, MultiValueMap<String, String> params) {\n-    UriComponents uriComponents = UriComponentsBuilder.fromPath(endpointPath)\n-        .queryParams(params)\n-        .replaceQueryParam(\"page[size]\", pageSize)\n-        .replaceQueryParam(\"page[number]\", page)\n-        .queryParam(\"page[totals]\")\n-        .build();\n-\n-    authorizedLatch.await();\n-    String url = uriComponents.toUriString();\n-    return retrieveMonoWithErrorHandling(JSONAPIDocument.class, webClient.get().uri(url))\n-        .map(jsonapiDocument -> (JSONAPIDocument<List<T>>) jsonapiDocument)\n-        .flatMap(document -> Mono.zip(\n-            Mono.fromCallable(document::get),\n-            Mono.fromCallable(document::getMeta)\n-                .map(meta -> ((java.util.Map<String, Integer>) meta.get(\"page\")).get(\"totalPages\"))))\n-        .switchIfEmpty(Mono.zip(Mono.just(List.of()), Mono.just(0)))\n-        .cache()\n-        .doOnNext(tuple -> log.debug(\"Retrieved {} from {}\", tuple.getT1(), url));\n-  }\n-\n-  private <T> Mono<T> retrieveMonoWithErrorHandling(Class<T> type, WebClient.RequestHeadersSpec<?> requestSpec) {\n-    return requestSpec.exchangeToMono(response -> {\n-      if (response.statusCode().is2xxSuccessful()) {\n-        return response.bodyToMono(type);\n-      } else if (response.statusCode().equals(HttpStatus.BAD_REQUEST)) {\n-        return response.bodyToMono(type).onErrorMap(ResourceParseException.class, exception -> new ApiException(exception.getErrors().getErrors()));\n-      } else if (response.statusCode().is4xxClientError()) {\n-        return response.createException().flatMap(Mono::error);\n-      } else if (response.statusCode().is5xxServerError()) {\n-        return response.createException().flatMap(Mono::error);\n-      } else {\n-        log.warn(\"Unknown status returned by api\");\n-        return response.createException().flatMap(Mono::error);\n-      }\n-    });\n-  }\n-\n-  private <T> Flux<T> retrieveFluxWithErrorHandling(Class<T> type, WebClient.RequestHeadersSpec<?> requestSpec) {\n-    return requestSpec.exchangeToFlux(response -> {\n-      if (response.statusCode().is2xxSuccessful()) {\n-        return response.bodyToFlux(type);\n-      } else if (response.statusCode().equals(HttpStatus.BAD_REQUEST)) {\n-        return response.bodyToFlux(type).onErrorMap(ResourceParseException.class, exception -> new ApiException(exception.getErrors().getErrors()));\n-      } else if (response.statusCode().is4xxClientError()) {\n-        return response.createException().flatMapMany(Mono::error);\n-      } else if (response.statusCode().is5xxServerError()) {\n-        return response.createException().flatMapMany(Mono::error);\n-      } else {\n-        log.warn(\"Unknown status returned by api\");\n-        return response.createException().flatMapMany(Mono::error);\n-      }\n-    });\n-  }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "1baf31a538e17b73834122b14ad1bed9e46c2b0f", "committedDate": "2021-01-04 17:28:42 -0500", "message": "Add missing slash (#2095)"}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "115d0985c8184318d89610d22d3bf10ceaa83b0a", "committedDate": "2021-01-07 21:04:29 -0500", "message": "Remove leaderboard snake case (#2110)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "bc045d14db06dcc4feae6c8f4587d886005111eb", "committedDate": "2021-02-13 18:20:40 -0500", "message": "Use scoretime for rating history and add loading pane (#2142)"}, {"oid": "6e0589ef00a29fa7ca43df0eb331f40aee234c72", "committedDate": "2021-02-21 09:50:45 -0500", "message": "Add ability to conduct moderator reports from the client (#2139)"}, {"oid": "fef21874222cb1c77d8f55367d6fde15f4b14a33", "committedDate": "2021-03-28 09:29:42 -0400", "message": "Get maps from mapPoolAssignment (#2190)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "531d0f57d941849d3bacd616aff4931502026a54", "committedDate": "2021-05-03 10:04:23 -0400", "message": "add exact argument and use equality for toggle controller (#2230)"}, {"oid": "044426f35290dcb59a5244289b0a474e5aa005ba", "committedDate": "2021-05-09 11:49:33 -0400", "message": "Fix review version not being set (#2236)"}, {"oid": "b5e39f11830b2911091bcbc7612181338880779c", "committedDate": "2021-06-08 06:57:18 -0400", "message": "Use new recommended maps and mods attribute for top picks (#2260)"}, {"oid": "4c061711ca870443400f2d0f7076b6b9771be17b", "committedDate": "2021-06-19 23:50:41 -0400", "message": "Change get mods by uid to return optional"}, {"oid": "33163e5f1d7fb17cd0b0d74450c9f64384e434f7", "committedDate": "2021-07-02 21:58:03 -0400", "message": "Remove depreciated mapStatistics from api calls (#2292)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "73e38e91e5773a794e6c23a2e069289261925e4b", "committedDate": "2021-07-29 10:33:52 -0400", "message": "Log the url rather than components separately in api"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMTI2NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549721264", "body": "This should be a constant as well ideally related to the one used for checking the channel name", "bodyText": "This should be a constant as well ideally related to the one used for checking the channel name", "bodyHTML": "<p dir=\"auto\">This should be a constant as well ideally related to the one used for checking the channel name</p>", "author": "Sheikah45", "createdAt": "2020-12-29T14:18:47Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,324 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));", "originalCommit": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13248e0b78ebc057e5672d703678134e1fa9e2f5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0ee76865..127b337c 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -139,9 +140,9 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       if (matchmakingChatController != null) {\n         matchmakingChatController.closeChannel();\n       }\n-      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n     });\n-    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n \n     fafService.requestMatchmakerInfo();\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0ee76865..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -139,9 +140,9 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       if (matchmakingChatController != null) {\n         matchmakingChatController.closeChannel();\n       }\n-      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n     });\n-    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n \n     fafService.requestMatchmakerInfo();\n   }\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fbafe994..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -101,50 +103,34 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public ColumnConstraints column2;\n   public RowConstraints row2;\n   private Player player;\n+  private Map<Faction, ToggleButton> factionsToButtons;\n   @VisibleForTesting\n   protected MatchmakingChatController matchmakingChatController;\n+  private InvalidationListener matchmakingQueuesLabelInvalidationListener;\n+  private InvalidationListener playerPropertiesInvalidationListener;\n+  private ChangeListener<Player> partyOwnerChangeListener;\n \n   @Override\n   public void initialize() {\n-    eventBus.register(this);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, leagueImageView);\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n-    initializeDynamicChatPosition();\n-    player = playerService.getCurrentPlayer().get();\n-    initializeUppercaseText();\n-    initializeBindings();\n-\n-    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n-    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n-      renderQueues(); // The teamMatchmakingService may already have all queues collected\n-    }                 // so we won't get any updates on the following change listener\n-    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        renderQueues();\n-      }\n-    });\n+    eventBus.register(this);\n \n-    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue != PlayerStatus.IDLE) {\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      } else {\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      }\n-    });\n+    factionsToButtons = Map.of(Faction.UEF, uefButton, Faction.AEON, aeonButton,\n+        Faction.CYBRAN, cybranButton, Faction.SERAPHIM, seraphimButton);\n \n-    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n-      refreshingLabel.setVisible(false);\n-      selectFactionsBasedOnParty();\n-    });\n+    player = playerService.getCurrentPlayer().orElseThrow(() -> new IllegalStateException(\"Current Player not set\"));\n+    initializeDynamicChatPosition();\n+    initializeUppercaseText();\n+    initializeListeners();\n \n-    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n-      if (matchmakingChatController != null) {\n-        matchmakingChatController.closeChannel();\n-      }\n-      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n-    });\n-    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+    ObservableList<Faction> factions = preferencesService.getPreferences().getMatchmaker().getFactions();\n+    selectFactions(factions);\n+    teamMatchmakingService.sendFactionSelection(factions);\n+    teamMatchmakingService.requestMatchmakerInfo();\n \n-    fafService.requestMatchmakerInfo();\n+    // TODO: Use when leagues implemented\n+    leagueImageView.setVisible(false);\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": {"commit": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..014ae7a4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,9 +132,6 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n-\n-    // TODO: Use when leagues implemented\n-    leagueImageView.setVisible(false);\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 014ae7a4..e068bcb6 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,7 +130,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     initializeUppercaseText();\n     initializeListeners();\n \n-    ObservableList<Faction> factions = preferencesService.getPreferences().getMatchmaker().getFactions();\n+    ObservableList<Faction> factions = matchmakerPrefs.getFactions();\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n", "next_change": {"commit": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex e068bcb6..3fd7aac3 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,7 +131,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     player = playerService.getCurrentPlayer();\n     initializeDynamicChatPosition();\n     initializeUppercaseText();\n-    initializeListeners();\n+    addListeners();\n \n     ObservableList<Faction> factions = matchmakerPrefs.getFactions();\n     selectFactions(factions);\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 3fd7aac3..37806f04 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -137,6 +138,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n+    renderQueues();\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMTk3OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549721978", "body": "constant", "bodyText": "constant", "bodyHTML": "<p dir=\"auto\">constant</p>", "author": "Sheikah45", "createdAt": "2020-12-29T14:20:55Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,324 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+    });\n+    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));", "originalCommit": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13248e0b78ebc057e5672d703678134e1fa9e2f5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0ee76865..127b337c 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -139,9 +140,9 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       if (matchmakingChatController != null) {\n         matchmakingChatController.closeChannel();\n       }\n-      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n     });\n-    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n \n     fafService.requestMatchmakerInfo();\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0ee76865..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -139,9 +140,9 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n       if (matchmakingChatController != null) {\n         matchmakingChatController.closeChannel();\n       }\n-      createChannelTab(String.format(\"#%s'sParty\", newValue.getUsername()));\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n     });\n-    createChannelTab(String.format(\"#%s'sParty\", teamMatchmakingService.getParty().getOwner().getUsername()));\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n \n     fafService.requestMatchmakerInfo();\n   }\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fbafe994..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -101,50 +103,34 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public ColumnConstraints column2;\n   public RowConstraints row2;\n   private Player player;\n+  private Map<Faction, ToggleButton> factionsToButtons;\n   @VisibleForTesting\n   protected MatchmakingChatController matchmakingChatController;\n+  private InvalidationListener matchmakingQueuesLabelInvalidationListener;\n+  private InvalidationListener playerPropertiesInvalidationListener;\n+  private ChangeListener<Player> partyOwnerChangeListener;\n \n   @Override\n   public void initialize() {\n-    eventBus.register(this);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, leagueImageView);\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n-    initializeDynamicChatPosition();\n-    player = playerService.getCurrentPlayer().get();\n-    initializeUppercaseText();\n-    initializeBindings();\n-\n-    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n-    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n-      renderQueues(); // The teamMatchmakingService may already have all queues collected\n-    }                 // so we won't get any updates on the following change listener\n-    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue) {\n-        renderQueues();\n-      }\n-    });\n+    eventBus.register(this);\n \n-    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue != PlayerStatus.IDLE) {\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      } else {\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      }\n-    });\n+    factionsToButtons = Map.of(Faction.UEF, uefButton, Faction.AEON, aeonButton,\n+        Faction.CYBRAN, cybranButton, Faction.SERAPHIM, seraphimButton);\n \n-    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n-      refreshingLabel.setVisible(false);\n-      selectFactionsBasedOnParty();\n-    });\n+    player = playerService.getCurrentPlayer().orElseThrow(() -> new IllegalStateException(\"Current Player not set\"));\n+    initializeDynamicChatPosition();\n+    initializeUppercaseText();\n+    initializeListeners();\n \n-    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n-      if (matchmakingChatController != null) {\n-        matchmakingChatController.closeChannel();\n-      }\n-      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n-    });\n-    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+    ObservableList<Faction> factions = preferencesService.getPreferences().getMatchmaker().getFactions();\n+    selectFactions(factions);\n+    teamMatchmakingService.sendFactionSelection(factions);\n+    teamMatchmakingService.requestMatchmakerInfo();\n \n-    fafService.requestMatchmakerInfo();\n+    // TODO: Use when leagues implemented\n+    leagueImageView.setVisible(false);\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": {"commit": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..014ae7a4 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,9 +132,6 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n-\n-    // TODO: Use when leagues implemented\n-    leagueImageView.setVisible(false);\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 014ae7a4..e068bcb6 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,7 +130,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     initializeUppercaseText();\n     initializeListeners();\n \n-    ObservableList<Faction> factions = preferencesService.getPreferences().getMatchmaker().getFactions();\n+    ObservableList<Faction> factions = matchmakerPrefs.getFactions();\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n", "next_change": {"commit": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex e068bcb6..3fd7aac3 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -128,7 +131,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     player = playerService.getCurrentPlayer();\n     initializeDynamicChatPosition();\n     initializeUppercaseText();\n-    initializeListeners();\n+    addListeners();\n \n     ObservableList<Faction> factions = matchmakerPrefs.getFactions();\n     selectFactions(factions);\n", "next_change": {"commit": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 3fd7aac3..37806f04 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -137,6 +138,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     selectFactions(factions);\n     teamMatchmakingService.sendFactionSelection(factions);\n     teamMatchmakingService.requestMatchmakerInfo();\n+    renderQueues();\n   }\n \n   private void initializeDynamicChatPosition() {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTAwMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549725002", "body": "Would be good to have this as a constant to make referencing easier", "bodyText": "Would be good to have this as a constant to make referencing easier", "bodyHTML": "<p dir=\"auto\">Would be good to have this as a constant to make referencing easier</p>", "author": "Sheikah45", "createdAt": "2020-12-29T14:29:57Z", "path": "src/main/java/com/faforever/client/chat/ChatController.java", "diffHunk": "@@ -186,6 +189,14 @@ public void onChatMessage(ChatMessageEvent event) {\n     });\n   }\n \n+  private boolean isMatchmakerPartyMessage(ChatMessage message) {\n+    return message.getSource() != null && isMatchmakerPartyMessage(message.getSource());\n+  }\n+\n+  private boolean isMatchmakerPartyMessage(String channelName) {\n+    return channelName.endsWith(\"'sParty\");", "originalCommit": "1ff214537aa6580a5470daecf7bb442bdfc8e1f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13248e0b78ebc057e5672d703678134e1fa9e2f5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex f60e0759..02483b88 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -194,7 +196,7 @@ public class ChatController extends AbstractViewController<Node> {\n   }\n \n   private boolean isMatchmakerPartyMessage(String channelName) {\n-    return channelName.endsWith(\"'sParty\");\n+    return channelName.endsWith(PARTY_CHANNEL_SUFFIX);\n   }\n \n   private AbstractChatTabController addAndGetPrivateMessageTab(String username) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex f60e0759..02483b88 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -194,7 +196,7 @@ public class ChatController extends AbstractViewController<Node> {\n   }\n \n   private boolean isMatchmakerPartyMessage(String channelName) {\n-    return channelName.endsWith(\"'sParty\");\n+    return channelName.endsWith(PARTY_CHANNEL_SUFFIX);\n   }\n \n   private AbstractChatTabController addAndGetPrivateMessageTab(String username) {\n", "next_change": {"commit": "ac8669087b7b29ade57a46217f70a569716d17fe", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex 02483b88..b12c71ad 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -163,36 +156,30 @@ public class ChatController extends AbstractViewController<Node> {\n \n   private void onConnectionStateChange(ConnectionState newValue) {\n     switch (newValue) {\n-      case DISCONNECTED:\n-        onDisconnected();\n-        break;\n-      case CONNECTED:\n-        onConnected();\n-        break;\n-      case CONNECTING:\n-        onConnecting();\n-        break;\n-      default:\n-        throw new ProgrammingError(\"Uncovered connection state: \" + newValue);\n+      case DISCONNECTED -> onDisconnected();\n+      case CONNECTED -> onConnected();\n+      case CONNECTING -> onConnecting();\n+      default -> throw new ProgrammingError(\"Uncovered connection state: \" + newValue);\n     }\n   }\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n-    Platform.runLater(() -> {\n-      ChatMessage message = event.getMessage();\n-      if (isMatchmakerPartyMessage(message))\n-        return;\n+    ChatMessage message = event.message();\n+    if (isMatchmakerPartyMessage(message)) {\n+      return;\n+    }\n+    JavaFxUtil.runLater(() -> {\n       if (!message.isPrivate()) {\n-        getOrCreateChannelTab(message.getSource()).onChatMessage(message);\n+        getOrCreateChannelTab(message.source()).onChatMessage(message);\n       } else {\n-        addAndGetPrivateMessageTab(message.getSource()).onChatMessage(message);\n+        addAndGetPrivateMessageTab(message.source()).onChatMessage(message);\n       }\n     });\n   }\n \n   private boolean isMatchmakerPartyMessage(ChatMessage message) {\n-    return message.getSource() != null && isMatchmakerPartyMessage(message.getSource());\n+    return message.source() != null && isMatchmakerPartyMessage(message.source());\n   }\n \n   private boolean isMatchmakerPartyMessage(String channelName) {\n", "next_change": {"commit": "b86f5c8e62200ff540330a38577f87f3aa678f42", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/chat/ChatController.java b/src/main/java/com/faforever/client/chat/ChatController.java\nindex b12c71ad..ce7ce27a 100644\n--- a/src/main/java/com/faforever/client/chat/ChatController.java\n+++ b/src/main/java/com/faforever/client/chat/ChatController.java\n", "chunk": "@@ -163,120 +159,26 @@ public class ChatController extends AbstractViewController<AnchorPane> {\n     }\n   }\n \n-  @Subscribe\n-  public void onChatMessage(ChatMessageEvent event) {\n-    ChatMessage message = event.message();\n-    if (isMatchmakerPartyMessage(message)) {\n-      return;\n-    }\n-    JavaFxUtil.runLater(() -> {\n-      if (!message.isPrivate()) {\n-        getOrCreateChannelTab(message.source()).onChatMessage(message);\n-      } else {\n-        addAndGetPrivateMessageTab(message.source()).onChatMessage(message);\n-      }\n-    });\n-  }\n-\n-  private boolean isMatchmakerPartyMessage(ChatMessage message) {\n-    return message.source() != null && isMatchmakerPartyMessage(message.source());\n-  }\n-\n-  private boolean isMatchmakerPartyMessage(String channelName) {\n-    return channelName.endsWith(PARTY_CHANNEL_SUFFIX);\n-  }\n-\n-  private AbstractChatTabController addAndGetPrivateMessageTab(String username) {\n-    JavaFxUtil.assertApplicationThread();\n-    if (!nameToChatTabController.containsKey(username)) {\n-      PrivateChatTabController tab = uiService.loadFxml(\"theme/chat/private_chat_tab.fxml\");\n-      tab.setReceiver(username);\n-      addTab(username, tab);\n-    }\n-\n-    return nameToChatTabController.get(username);\n-  }\n-\n   public AnchorPane getRoot() {\n     return chatRoot;\n   }\n \n-  @Subscribe\n-  public void onInitiatePrivateChatEvent(InitiatePrivateChatEvent event) {\n-    JavaFxUtil.runLater(() -> openPrivateMessageTabForUser(event.username()));\n-  }\n-\n-  private void openPrivateMessageTabForUser(String username) {\n-    JavaFxUtil.assertApplicationThread();\n-    if (username.equalsIgnoreCase(userService.getUsername())) {\n-      return;\n-    }\n-    AbstractChatTabController controller = addAndGetPrivateMessageTab(username);\n-    Tab tab = controller.getRoot();\n-    eventBus.post(new NavigateEvent(NavigationItem.CHAT));\n-    tabPane.getSelectionModel().select(tab);\n-    nameToChatTabController.get(tab.getId()).onDisplay();\n-  }\n-\n   public void onJoinChannelButtonClicked() {\n     String channelName = channelNameTextField.getText();\n-    channelNameTextField.clear();\n     if (!channelName.startsWith(\"#\")) {\n       channelName = \"#\" + channelName;\n     }\n \n-    joinChannel(channelName);\n-  }\n-\n-  private void joinChannel(String channelName) {\n     chatService.joinChannel(channelName);\n-  }\n-\n-  private void onChatUserLeftChannel(ChatChannelUser chatUser, String channelName) {\n-    if (isCurrentUser(chatUser)) {\n-      AbstractChatTabController chatTab = nameToChatTabController.remove(channelName);\n-      if (chatTab != null) {\n-        JavaFxUtil.runLater(() -> tabPane.getTabs().remove(chatTab.getRoot()));\n-      }\n-    }\n-  }\n-\n-  private void onUserJoinedChannel(ChatChannelUser chatUser, String channelName) {\n-    if (isCurrentUser(chatUser)) {\n-      JavaFxUtil.runLater(() -> {\n-        AbstractChatTabController tabController = getOrCreateChannelTab(channelName);\n-        onConnected();\n-        if (chatService.isDefaultChannel(channelName)) {\n-          Tab tab = tabController.getRoot();\n-          tabPane.getSelectionModel().select(tab);\n-          nameToChatTabController.get(tab.getId()).onDisplay();\n-        }\n-      });\n-    }\n-  }\n-\n-  private boolean isCurrentUser(ChatChannelUser chatUser) {\n-    return userService.getOwnUser() != null && chatUser.getUsername().equalsIgnoreCase(userService.getUsername());\n+    channelNameTextField.clear();\n   }\n \n   @Override\n   protected void onDisplay(NavigateEvent navigateEvent) {\n-    if (navigateEvent instanceof JoinChannelEvent joinChannelEvent) {\n-      chatService.joinChannel(joinChannelEvent.getChannel());\n-      return;\n-    }\n-    if (!tabPane.getTabs().isEmpty()) {\n-      Tab tab = tabPane.getSelectionModel().getSelectedItem();\n-      Optional.ofNullable(nameToChatTabController.get(tab.getId())).ifPresent(AbstractChatTabController::onDisplay);\n-    }\n-  }\n-\n-  @Override\n-  public void onHide() {\n-    super.onHide();\n-    if (!tabPane.getTabs().isEmpty()) {\n+    if (tabPane.getTabs().size() > 1) {\n       Tab tab = tabPane.getSelectionModel().getSelectedItem();\n-      Optional.ofNullable(nameToChatTabController.get(tab.getId())).ifPresent(AbstractChatTabController::onHide);\n+      Optional.ofNullable(channelToChatTabController.get((ChatChannel) tab.getUserData()))\n+          .ifPresent(AbstractChatTabController::onDisplay);\n     }\n   }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "c02ce5878ae5c82e865f33bf7f3fc7f251d8c4b6", "committedDate": "2021-02-03 22:41:53 -0500", "message": "Clean Chat State Code (#2133)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "1831f2a39e73fe66f2332d01282f98b3883be148", "committedDate": "2022-04-10 09:08:56 -0400", "message": "Redesign chat user list & add show/hide categories (#2609)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "8eb4a9ec25810a70c965c28d20594fb453344217", "committedDate": "2023-04-02 13:57:17 -0400", "message": "Small cleanup"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"oid": "13248e0b78ebc057e5672d703678134e1fa9e2f5", "url": "https://github.com/FAForever/downlords-faf-client/commit/13248e0b78ebc057e5672d703678134e1fa9e2f5", "message": "Use constant for party channels", "committedDate": "2020-12-29T15:31:23Z", "type": "commit"}, {"oid": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "url": "https://github.com/FAForever/downlords-faf-client/commit/6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "message": "Include leaderboard in queue api call", "committedDate": "2020-12-29T15:41:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MzAzNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763036", "body": "why would that be synchronized? I mean it just executes in site PlatformRun.later ... That make is synchronized because there is only one UI Thread !!! ", "bodyText": "why would that be synchronized? I mean it just executes in site PlatformRun.later ... That make is synchronized because there is only one UI Thread !!!", "bodyHTML": "<p dir=\"auto\">why would that be synchronized? I mean it just executes in site PlatformRun.later ... That make is synchronized because there is only one UI Thread !!!</p>", "author": "1-alex98", "createdAt": "2020-12-29T16:15:55Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.sendFactionSelection(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+        matchmakingChatController.onChatMessage(message);\n+      }\n+    });\n+  }\n+\n+  private synchronized void renderQueues() {", "originalCommit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5MTQ2MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549791461", "bodyText": "That is leftover from my attempts to fix a bug with concurrent access to the queue list. Using the synchronized list should fix it. I'll delete it", "author": "BlackYps", "createdAt": "2020-12-29T17:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MzAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "44cbd2c344ab20ed407c72e43b129e48a828f368", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 127b337c..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -300,15 +299,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n-    Platform.runLater(() -> {\n-      ChatMessage message = event.getMessage();\n-      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n-        matchmakingChatController.onChatMessage(message);\n-      }\n-    });\n+    ChatMessage message = event.getMessage();\n+    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+      Platform.runLater(() -> matchmakingChatController.onChatMessage(message));\n+    }\n   }\n \n-  private synchronized void renderQueues() {\n+  private void renderQueues() {\n     Platform.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 127b337c..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -300,15 +299,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n-    Platform.runLater(() -> {\n-      ChatMessage message = event.getMessage();\n-      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n-        matchmakingChatController.onChatMessage(message);\n-      }\n-    });\n+    ChatMessage message = event.getMessage();\n+    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+      Platform.runLater(() -> matchmakingChatController.onChatMessage(message));\n+    }\n   }\n \n-  private synchronized void renderQueues() {\n+  private void renderQueues() {\n     Platform.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fbafe994..0bb9235d 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -301,12 +311,12 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public void onChatMessage(ChatMessageEvent event) {\n     ChatMessage message = event.getMessage();\n     if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n-      Platform.runLater(() -> matchmakingChatController.onChatMessage(message));\n+      matchmakingChatController.onChatMessage(message);\n     }\n   }\n \n   private void renderQueues() {\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n         queueBox.getChildren().clear();\n", "next_change": {"commit": "8d66f9a7f480f5003041e59147024e5d27c385d2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0bb9235d..a529f5f5 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -319,12 +318,12 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     JavaFxUtil.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n-        queueBox.getChildren().clear();\n+        queuePane.getChildren().clear();\n         queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n         queues.forEach(queue -> {\n           MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n           controller.setQueue(queue);\n-          queueBox.getChildren().add(controller.getRoot());\n+          queuePane.getChildren().add(controller.getRoot());\n         });\n       }\n     });\n", "next_change": {"commit": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex a529f5f5..a2051e0f 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -317,12 +318,14 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   private void renderQueues() {\n     JavaFxUtil.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n+      int queuesPerRow = Math.min(queues.size(), 4);\n       synchronized (queues) {\n         queuePane.getChildren().clear();\n         queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n         queues.forEach(queue -> {\n           MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n           controller.setQueue(queue);\n+          controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n           queuePane.getChildren().add(controller.getRoot());\n         });\n       }\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex a2051e0f..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -315,20 +323,16 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     }\n   }\n \n-  private void renderQueues() {\n-    JavaFxUtil.runLater(() -> {\n-      List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n-      int queuesPerRow = Math.min(queues.size(), 4);\n-      synchronized (queues) {\n-        queuePane.getChildren().clear();\n-        queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n-        queues.forEach(queue -> {\n-          MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n-          controller.setQueue(queue);\n-          controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n-          queuePane.getChildren().add(controller.getRoot());\n-        });\n-      }\n-    });\n+  private synchronized void renderQueues() {\n+    List<MatchmakingQueue> queues = new ArrayList<>(teamMatchmakingService.getMatchmakingQueues());\n+    queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+    int queuesPerRow = Math.min(queues.size(), 4);\n+    List<VBox> queueCards = queues.stream().map(queue -> {\n+      MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n+      controller.setQueue(queue);\n+      controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n+      return controller.getRoot();\n+    }).collect(Collectors.toList());\n+    JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n   }\n }\n", "next_change": {"commit": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..f49035ec 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -318,19 +336,19 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n     ChatMessage message = event.getMessage();\n-    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n       JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n     }\n   }\n \n   private synchronized void renderQueues() {\n-    List<MatchmakingQueue> queues = new ArrayList<>(teamMatchmakingService.getMatchmakingQueues());\n-    queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n+      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex f49035ec..4e72f938 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -320,37 +348,41 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void selectFactions(List<Faction> factions) {\n-    factionsToButtons.forEach((faction, toggleButton) ->\n-        toggleButton.setSelected(factions.contains(faction)));\n+    factionsToButtons.forEach((faction, toggleButton) -> toggleButton.setSelected(factions.contains(faction)));\n   }\n \n   private void createChannelTab(String channelName) {\n+    chatService.joinChannel(channelName);\n+    ChatChannel chatChannel = chatService.getOrCreateChannel(channelName);\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChatChannel(chatChannel);\n     JavaFxUtil.runLater(() -> {\n-      matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n-      matchmakingChatController.setChannel(channelName);\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n   }\n \n-  @Subscribe\n-  public void onChatMessage(ChatMessageEvent event) {\n-    ChatMessage message = event.getMessage();\n-    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n-      JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n-    }\n-  }\n-\n   private synchronized void renderQueues() {\n-    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n-    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getTeamSize).thenComparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n+      controller.getRoot()\n+          .prefWidthProperty()\n+          .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n   }\n+\n+  public void onSearchButtonClicked() {\n+    if (searchButton.isSelected()) {\n+      teamMatchmakingService.joinQueues()\n+          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+    } else {\n+      teamMatchmakingService.leaveQueues();\n+    }\n+  }\n }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 4e72f938..a1c06dc1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -374,13 +376,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n           .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n-    JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n+    fxApplicationThreadExecutor.execute(() -> queuePane.getChildren().setAll(queueCards));\n   }\n \n   public void onSearchButtonClicked() {\n     if (searchButton.isSelected()) {\n       teamMatchmakingService.joinQueues()\n-          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+          .thenAcceptAsync(searchButton::setSelected, fxApplicationThreadExecutor);\n     } else {\n       teamMatchmakingService.leaveQueues();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2Mzc2Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763762", "body": "Since there might be a lot of messages received here. Only execute this very line on the UI  Thread no need to switch to the UI thread to check if the message is releavnt => 99% less execution on the UI thread for this action", "bodyText": "Since there might be a lot of messages received here. Only execute this very line on the UI  Thread no need to switch to the UI thread to check if the message is releavnt => 99% less execution on the UI thread for this action", "bodyHTML": "<p dir=\"auto\">Since there might be a lot of messages received here. Only execute this very line on the UI  Thread no need to switch to the UI thread to check if the message is releavnt =&gt; 99% less execution on the UI thread for this action</p>", "author": "1-alex98", "createdAt": "2020-12-29T16:17:49Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+\n+    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+      selectFactionsBasedOnParty();\n+      return;\n+    }\n+\n+    List<Faction> factions = new ArrayList<>();\n+    if (uefButton.isSelected()) {\n+      factions.add(Faction.UEF);\n+    }\n+    if (aeonButton.isSelected()) {\n+      factions.add(Faction.AEON);\n+    }\n+    if (cybranButton.isSelected()) {\n+      factions.add(Faction.CYBRAN);\n+    }\n+    if (seraphimButton.isSelected()) {\n+      factions.add(Faction.SERAPHIM);\n+    }\n+\n+    teamMatchmakingService.sendFactionSelection(factions);\n+\n+    refreshingLabel.setVisible(true);\n+  }\n+\n+  private void selectFactionsBasedOnParty() {\n+    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n+    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n+    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n+    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+  }\n+\n+  private boolean isFactionSelectedInParty(Faction faction) {\n+    return teamMatchmakingService.getParty().getMembers().stream()\n+        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  }\n+\n+  private void createChannelTab(String channelName) {\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChannel(channelName);\n+    Platform.runLater(() -> {\n+      chatTabPane.getTabs().clear();\n+      chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n+    });\n+  }\n+\n+  @Subscribe\n+  public void onChatMessage(ChatMessageEvent event) {\n+    Platform.runLater(() -> {\n+      ChatMessage message = event.getMessage();\n+      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+        matchmakingChatController.onChatMessage(message);", "originalCommit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44cbd2c344ab20ed407c72e43b129e48a828f368", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 127b337c..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -300,15 +299,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n-    Platform.runLater(() -> {\n-      ChatMessage message = event.getMessage();\n-      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n-        matchmakingChatController.onChatMessage(message);\n-      }\n-    });\n+    ChatMessage message = event.getMessage();\n+    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+      Platform.runLater(() -> matchmakingChatController.onChatMessage(message));\n+    }\n   }\n \n-  private synchronized void renderQueues() {\n+  private void renderQueues() {\n     Platform.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 127b337c..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -300,15 +299,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n \n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n-    Platform.runLater(() -> {\n-      ChatMessage message = event.getMessage();\n-      if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n-        matchmakingChatController.onChatMessage(message);\n-      }\n-    });\n+    ChatMessage message = event.getMessage();\n+    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+      Platform.runLater(() -> matchmakingChatController.onChatMessage(message));\n+    }\n   }\n \n-  private synchronized void renderQueues() {\n+  private void renderQueues() {\n     Platform.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fbafe994..0bb9235d 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -301,12 +311,12 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   public void onChatMessage(ChatMessageEvent event) {\n     ChatMessage message = event.getMessage();\n     if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n-      Platform.runLater(() -> matchmakingChatController.onChatMessage(message));\n+      matchmakingChatController.onChatMessage(message);\n     }\n   }\n \n   private void renderQueues() {\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n         queueBox.getChildren().clear();\n", "next_change": {"commit": "8d66f9a7f480f5003041e59147024e5d27c385d2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0bb9235d..a529f5f5 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -319,12 +318,12 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     JavaFxUtil.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n       synchronized (queues) {\n-        queueBox.getChildren().clear();\n+        queuePane.getChildren().clear();\n         queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n         queues.forEach(queue -> {\n           MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n           controller.setQueue(queue);\n-          queueBox.getChildren().add(controller.getRoot());\n+          queuePane.getChildren().add(controller.getRoot());\n         });\n       }\n     });\n", "next_change": {"commit": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex a529f5f5..a2051e0f 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -317,12 +318,14 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   private void renderQueues() {\n     JavaFxUtil.runLater(() -> {\n       List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n+      int queuesPerRow = Math.min(queues.size(), 4);\n       synchronized (queues) {\n         queuePane.getChildren().clear();\n         queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n         queues.forEach(queue -> {\n           MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n           controller.setQueue(queue);\n+          controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n           queuePane.getChildren().add(controller.getRoot());\n         });\n       }\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex a2051e0f..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -315,20 +323,16 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     }\n   }\n \n-  private void renderQueues() {\n-    JavaFxUtil.runLater(() -> {\n-      List<MatchmakingQueue> queues = Collections.synchronizedList(teamMatchmakingService.getMatchmakingQueues());\n-      int queuesPerRow = Math.min(queues.size(), 4);\n-      synchronized (queues) {\n-        queuePane.getChildren().clear();\n-        queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n-        queues.forEach(queue -> {\n-          MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n-          controller.setQueue(queue);\n-          controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n-          queuePane.getChildren().add(controller.getRoot());\n-        });\n-      }\n-    });\n+  private synchronized void renderQueues() {\n+    List<MatchmakingQueue> queues = new ArrayList<>(teamMatchmakingService.getMatchmakingQueues());\n+    queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+    int queuesPerRow = Math.min(queues.size(), 4);\n+    List<VBox> queueCards = queues.stream().map(queue -> {\n+      MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n+      controller.setQueue(queue);\n+      controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n+      return controller.getRoot();\n+    }).collect(Collectors.toList());\n+    JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n   }\n }\n", "next_change": {"commit": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..f49035ec 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -318,19 +336,19 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n     ChatMessage message = event.getMessage();\n-    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n       JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n     }\n   }\n \n   private synchronized void renderQueues() {\n-    List<MatchmakingQueue> queues = new ArrayList<>(teamMatchmakingService.getMatchmakingQueues());\n-    queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n+      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex f49035ec..4e72f938 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -320,37 +348,41 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void selectFactions(List<Faction> factions) {\n-    factionsToButtons.forEach((faction, toggleButton) ->\n-        toggleButton.setSelected(factions.contains(faction)));\n+    factionsToButtons.forEach((faction, toggleButton) -> toggleButton.setSelected(factions.contains(faction)));\n   }\n \n   private void createChannelTab(String channelName) {\n+    chatService.joinChannel(channelName);\n+    ChatChannel chatChannel = chatService.getOrCreateChannel(channelName);\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChatChannel(chatChannel);\n     JavaFxUtil.runLater(() -> {\n-      matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n-      matchmakingChatController.setChannel(channelName);\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n   }\n \n-  @Subscribe\n-  public void onChatMessage(ChatMessageEvent event) {\n-    ChatMessage message = event.getMessage();\n-    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n-      JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n-    }\n-  }\n-\n   private synchronized void renderQueues() {\n-    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n-    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getTeamSize).thenComparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n+      controller.getRoot()\n+          .prefWidthProperty()\n+          .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n   }\n+\n+  public void onSearchButtonClicked() {\n+    if (searchButton.isSelected()) {\n+      teamMatchmakingService.joinQueues()\n+          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+    } else {\n+      teamMatchmakingService.leaveQueues();\n+    }\n+  }\n }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 4e72f938..a1c06dc1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -374,13 +376,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n           .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n-    JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n+    fxApplicationThreadExecutor.execute(() -> queuePane.getChildren().setAll(queueCards));\n   }\n \n   public void onSearchButtonClicked() {\n     if (searchButton.isSelected()) {\n       teamMatchmakingService.joinQueues()\n-          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+          .thenAcceptAsync(searchButton::setSelected, fxApplicationThreadExecutor);\n     } else {\n       teamMatchmakingService.leaveQueues();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2Mzk5NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549763994", "body": "remove new line", "bodyText": "remove new line", "bodyHTML": "<p dir=\"auto\">remove new line</p>", "author": "1-alex98", "createdAt": "2020-12-29T16:18:28Z", "path": "src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.ChatMessage;\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.MatchmakingChatController;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.chat.event.ChatMessageEvent;\n+import com.faforever.client.fx.AbstractViewController;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.remote.FafService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.google.common.base.Strings;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.layout.ColumnConstraints;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.RowConstraints;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jetbrains.annotations.VisibleForTesting;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static com.faforever.client.chat.ChatService.PARTY_CHANNEL_SUFFIX;\n+import static javafx.beans.binding.Bindings.createBooleanBinding;\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@RequiredArgsConstructor\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@Slf4j\n+public class TeamMatchmakingController extends AbstractViewController<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass CHAT_AT_BOTTOM_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"bottom\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final I18n i18n;\n+  private final UiService uiService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final FafService fafService;\n+  private final EventBus eventBus;\n+\n+  public StackPane teamMatchmakingRoot;\n+  public Button invitePlayerButton;\n+  public Button leavePartyButton;\n+  public Label refreshingLabel;\n+  public ToggleButton uefButton;\n+  public ToggleButton cybranButton;\n+  public ToggleButton aeonButton;\n+  public ToggleButton seraphimButton;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label gameCountLabel;\n+  public Label leagueLabel;\n+  public HBox queueBox;\n+  public GridPane partyMemberPane;\n+  public VBox preparationArea;\n+  public ImageView leagueImageView;\n+  public Label matchmakerHeadingLabel;\n+  public Label partyHeadingLabel;\n+  public Label queueHeadingLabel;\n+  public ScrollPane scrollPane;\n+  public HBox playerCard;\n+  public Label crownLabel;\n+  public TabPane chatTabPane;\n+  public GridPane contentPane;\n+  public ColumnConstraints column2;\n+  public RowConstraints row2;\n+  private Player player;\n+  @VisibleForTesting\n+  protected MatchmakingChatController matchmakingChatController;\n+\n+  @Override\n+  public void initialize() {\n+    eventBus.register(this);\n+    JavaFxUtil.fixScrollSpeed(scrollPane);\n+    initializeDynamicChatPosition();\n+    player = playerService.getCurrentPlayer().get();\n+    initializeUppercaseText();\n+    initializeBindings();\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((Observable o) -> renderPartyMembers());\n+    if (teamMatchmakingService.isQueuesReadyForUpdate()) {\n+      renderQueues(); // The teamMatchmakingService may already have all queues collected\n+    }                 // so we won't get any updates on the following change listener\n+    teamMatchmakingService.queuesReadyForUpdateProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue) {\n+        renderQueues();\n+      }\n+    });\n+\n+    player.statusProperty().addListener((observable, oldValue, newValue) -> {\n+      if (newValue != PlayerStatus.IDLE) {\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      } else {\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      }\n+    });\n+\n+    teamMatchmakingService.getParty().getMembers().addListener((InvalidationListener) c -> {\n+      refreshingLabel.setVisible(false);\n+      selectFactionsBasedOnParty();\n+    });\n+\n+    JavaFxUtil.addListener(teamMatchmakingService.getParty().ownerProperty(), (observable, oldValue, newValue) -> {\n+      if (matchmakingChatController != null) {\n+        matchmakingChatController.closeChannel();\n+      }\n+      createChannelTab(\"#\" + newValue.getUsername() + PARTY_CHANNEL_SUFFIX);\n+    });\n+    createChannelTab(\"#\" + teamMatchmakingService.getParty().getOwner().getUsername() + PARTY_CHANNEL_SUFFIX);\n+\n+    fafService.requestMatchmakerInfo();\n+  }\n+\n+  private void initializeDynamicChatPosition() {\n+    contentPane.widthProperty().addListener((observable, oldValue, newValue) -> {\n+      if ((double) newValue < 1115.0) {\n+        GridPane.setColumnIndex(chatTabPane, 0);\n+        GridPane.setRowIndex(chatTabPane, 1);\n+        GridPane.setColumnSpan(chatTabPane, 2);\n+        GridPane.setColumnSpan(scrollPane, 2);\n+        column2.setMinWidth(0);\n+        row2.setMinHeight(200);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, true);\n+      } else {\n+        GridPane.setColumnIndex(chatTabPane, 1);\n+        GridPane.setRowIndex(chatTabPane, 0);\n+        GridPane.setColumnSpan(chatTabPane, 1);\n+        GridPane.setColumnSpan(scrollPane, 1);\n+        column2.setMinWidth(400);\n+        row2.setMinHeight(0);\n+        chatTabPane.pseudoClassStateChanged(CHAT_AT_BOTTOM_PSEUDO_CLASS, false);\n+      }\n+    });\n+  }\n+\n+  private void initializeUppercaseText() {\n+    matchmakerHeadingLabel.setText(i18n.get(\"teammatchmaking.playerTitle\").toUpperCase());\n+    partyHeadingLabel.setText(i18n.get(\"teammatchmaking.partyTitle\").toUpperCase());\n+    invitePlayerButton.setText(i18n.get(\"teammatchmaking.invitePlayer\").toUpperCase());\n+    leavePartyButton.setText(i18n.get(\"teammatchmaking.leaveParty\").toUpperCase());\n+\n+    leagueLabel.textProperty().bind(createStringBinding(() -> i18n.get(\"leaderboard.divisionName\").toUpperCase(),\n+        player.globalRatingMeanProperty())); // This should actually be a divisionProperty once that is available\n+    gameCountLabel.textProperty().bind(createStringBinding(() ->\n+        i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(), player.numberOfGamesProperty()));\n+    queueHeadingLabel.textProperty().bind(createStringBinding(() -> {\n+      if (teamMatchmakingService.isCurrentlyInQueue())\n+        return i18n.get(\"teammatchmaking.queueTitle.inQueue\").toUpperCase();\n+      else if (!teamMatchmakingService.getParty().getOwner().equals(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inParty\").toUpperCase();\n+      else if (teamMatchmakingService.getPlayersInGame().contains(player))\n+        return i18n.get(\"teammatchmaking.queueTitle.inGame\").toUpperCase();\n+      else if (!teamMatchmakingService.getPlayersInGame().isEmpty())\n+        return i18n.get(\"teammatchmaking.queueTitle.memberInGame\").toUpperCase();\n+      else\n+        return i18n.get(\"teammatchmaking.queueTitle\").toUpperCase();\n+    },  teamMatchmakingService.currentlyInQueueProperty(),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        teamMatchmakingService.getPlayersInGame()));\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() ->\n+        Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    crownLabel.visibleProperty().bind(createBooleanBinding(() ->\n+            teamMatchmakingService.getParty().getMembers().size() > 1 && teamMatchmakingService.getParty().getOwner().equals(player),\n+        teamMatchmakingService.getParty().ownerProperty(), teamMatchmakingService.getParty().getMembers()));\n+\n+    invitePlayerButton.disableProperty().bind(createBooleanBinding(\n+        () -> teamMatchmakingService.getParty().getOwner().getId() != playerService.getCurrentPlayer().map(Player::getId).orElse(-1),\n+        teamMatchmakingService.getParty().ownerProperty(),\n+        playerService.currentPlayerProperty()\n+    ));\n+    leavePartyButton.disableProperty().bind(createBooleanBinding(() -> teamMatchmakingService.getParty().getMembers().size() <= 1, teamMatchmakingService.getParty().getMembers()));\n+  }\n+\n+  private void renderPartyMembers() {\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS,\n+        (teamMatchmakingService.getParty().getOwner().equals(player) && teamMatchmakingService.getParty().getMembers().size() > 1));\n+    List<PartyMember> members = new ArrayList<>(teamMatchmakingService.getParty().getMembers());\n+    partyMemberPane.getChildren().clear();\n+    members.removeIf(partyMember -> partyMember.getPlayer().equals(player));\n+    for(int i = 0; i < members.size(); i++) {\n+      PartyMemberItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_member_card.fxml\");\n+      controller.setMember(members.get(i));\n+      if (members.size() == 1) {\n+        partyMemberPane.add(controller.getRoot(), 0, 0, 2, 1);\n+      } else {\n+        partyMemberPane.add(controller.getRoot(), i % 2, i / 2);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return teamMatchmakingRoot;\n+  }\n+\n+  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+    InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n+    Pane root = invitePlayerController.getRoot();\n+    uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n+  }\n+\n+  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+    teamMatchmakingService.leaveParty();\n+  }\n+\n+  public void onFactionButtonClicked(ActionEvent actionEvent) {\n+", "originalCommit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44cbd2c344ab20ed407c72e43b129e48a828f368", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 127b337c..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -252,7 +252,6 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   public void onFactionButtonClicked(ActionEvent actionEvent) {\n-\n     if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n       selectFactionsBasedOnParty();\n       return;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "a4893b100c644ff3887cee20464bdcead44550c3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 127b337c..fbafe994 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -252,7 +252,6 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   public void onFactionButtonClicked(ActionEvent actionEvent) {\n-\n     if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n       selectFactionsBasedOnParty();\n       return;\n", "next_change": {"commit": "51a3f02a375abe5df258a764d0538e620a067eb5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex fbafe994..577f58c8 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -241,51 +257,44 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     return teamMatchmakingRoot;\n   }\n \n-  public void onInvitePlayerButtonClicked(ActionEvent actionEvent) {\n+  public void onInvitePlayerButtonClicked() {\n     InvitePlayerController invitePlayerController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_invite_player.fxml\");\n     Pane root = invitePlayerController.getRoot();\n     uiService.showInDialog(teamMatchmakingRoot, root, i18n.get(\"teammatchmaking.invitePlayer\"));\n   }\n \n-  public void onLeavePartyButtonClicked(ActionEvent actionEvent) {\n+  public void onLeavePartyButtonClicked() {\n     teamMatchmakingService.leaveParty();\n   }\n \n-  public void onFactionButtonClicked(ActionEvent actionEvent) {\n-    if (!uefButton.isSelected() && !aeonButton.isSelected() && !cybranButton.isSelected() && !seraphimButton.isSelected()) {\n+  public void onFactionButtonClicked() {\n+    List<Faction> factions = factionsToButtons.entrySet().stream()\n+        .filter(entry -> entry.getValue().isSelected())\n+        .map(Map.Entry::getKey)\n+        .collect(Collectors.toList());\n+    if (factions.isEmpty()) {\n       selectFactionsBasedOnParty();\n       return;\n     }\n-\n-    List<Faction> factions = new ArrayList<>();\n-    if (uefButton.isSelected()) {\n-      factions.add(Faction.UEF);\n-    }\n-    if (aeonButton.isSelected()) {\n-      factions.add(Faction.AEON);\n-    }\n-    if (cybranButton.isSelected()) {\n-      factions.add(Faction.CYBRAN);\n-    }\n-    if (seraphimButton.isSelected()) {\n-      factions.add(Faction.SERAPHIM);\n-    }\n+    preferencesService.getPreferences().getMatchmaker().getFactions().setAll(factions);\n+    preferencesService.storeInBackground();\n \n     teamMatchmakingService.sendFactionSelection(factions);\n-\n     refreshingLabel.setVisible(true);\n   }\n \n   private void selectFactionsBasedOnParty() {\n-    uefButton.setSelected(isFactionSelectedInParty(Faction.UEF));\n-    aeonButton.setSelected(isFactionSelectedInParty(Faction.AEON));\n-    cybranButton.setSelected(isFactionSelectedInParty(Faction.CYBRAN));\n-    seraphimButton.setSelected(isFactionSelectedInParty(Faction.SERAPHIM));\n+    List<Faction> factions = teamMatchmakingService.getParty().getMembers().stream()\n+        .filter(m -> m.getPlayer().getId() == player.getId())\n+        .findFirst()\n+        .map(PartyMember::getFactions)\n+        .orElse(List.of());\n+    selectFactions(factions);\n   }\n \n-  private boolean isFactionSelectedInParty(Faction faction) {\n-    return teamMatchmakingService.getParty().getMembers().stream()\n-        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+  private void selectFactions(List<Faction> factions) {\n+    factionsToButtons.forEach((faction, toggleButton) ->\n+        toggleButton.setSelected(factions.contains(faction)));\n   }\n \n   private void createChannelTab(String channelName) {\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 577f58c8..0bb9235d 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -300,7 +301,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   private void createChannelTab(String channelName) {\n     matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n     matchmakingChatController.setChannel(channelName);\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 0bb9235d..da4a3870 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -299,9 +307,9 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void createChannelTab(String channelName) {\n-    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n-    matchmakingChatController.setChannel(channelName);\n     JavaFxUtil.runLater(() -> {\n+      matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+      matchmakingChatController.setChannel(channelName);\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n", "next_change": {"commit": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex da4a3870..3459df5a 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -318,7 +320,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   @Subscribe\n   public void onChatMessage(ChatMessageEvent event) {\n     ChatMessage message = event.getMessage();\n-    if (message.getSource().equals(matchmakingChatController.getReceiver())) {\n+    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n       JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n     }\n   }\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 3459df5a..298b1efa 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -326,8 +327,8 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private synchronized void renderQueues() {\n-    List<MatchmakingQueue> queues = new ArrayList<>(teamMatchmakingService.getMatchmakingQueues());\n-    queues.sort(Comparator.comparing(MatchmakingQueue::getQueueId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n", "next_change": {"commit": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 298b1efa..f49035ec 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -333,7 +348,7 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(Bindings.createDoubleBinding(() -> queuePane.getWidth() / queuesPerRow - queuePane.getHgap(), queuePane.widthProperty()));\n+      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n", "next_change": {"commit": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex f49035ec..4e72f938 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -320,37 +348,41 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n   }\n \n   private void selectFactions(List<Faction> factions) {\n-    factionsToButtons.forEach((faction, toggleButton) ->\n-        toggleButton.setSelected(factions.contains(faction)));\n+    factionsToButtons.forEach((faction, toggleButton) -> toggleButton.setSelected(factions.contains(faction)));\n   }\n \n   private void createChannelTab(String channelName) {\n+    chatService.joinChannel(channelName);\n+    ChatChannel chatChannel = chatService.getOrCreateChannel(channelName);\n+    matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n+    matchmakingChatController.setChatChannel(chatChannel);\n     JavaFxUtil.runLater(() -> {\n-      matchmakingChatController = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_chat.fxml\");\n-      matchmakingChatController.setChannel(channelName);\n       chatTabPane.getTabs().clear();\n       chatTabPane.getTabs().add(matchmakingChatController.getRoot());\n     });\n   }\n \n-  @Subscribe\n-  public void onChatMessage(ChatMessageEvent event) {\n-    ChatMessage message = event.getMessage();\n-    if (matchmakingChatController != null && message.getSource().equals(matchmakingChatController.getReceiver())) {\n-      JavaFxUtil.runLater(() -> matchmakingChatController.onChatMessage(message));\n-    }\n-  }\n-\n   private synchronized void renderQueues() {\n-    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getMatchmakerQueues());\n-    queues.sort(Comparator.comparing(MatchmakerQueueBean::getId));\n+    List<MatchmakerQueueBean> queues = new ArrayList<>(teamMatchmakingService.getQueues());\n+    queues.sort(Comparator.comparing(MatchmakerQueueBean::getTeamSize).thenComparing(MatchmakerQueueBean::getId));\n     int queuesPerRow = Math.min(queues.size(), 4);\n     List<VBox> queueCards = queues.stream().map(queue -> {\n       MatchmakingQueueItemController controller = uiService.loadFxml(\"theme/play/teammatchmaking/matchmaking_queue_card.fxml\");\n       controller.setQueue(queue);\n-      controller.getRoot().prefWidthProperty().bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n+      controller.getRoot()\n+          .prefWidthProperty()\n+          .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n     JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n   }\n+\n+  public void onSearchButtonClicked() {\n+    if (searchButton.isSelected()) {\n+      teamMatchmakingService.joinQueues()\n+          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+    } else {\n+      teamMatchmakingService.leaveQueues();\n+    }\n+  }\n }\n", "next_change": {"commit": "550b34f19bfc083e97fca094875c169966d4cdb1", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\nindex 4e72f938..a1c06dc1 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/TeamMatchmakingController.java\n", "chunk": "@@ -374,13 +376,13 @@ public class TeamMatchmakingController extends AbstractViewController<Node> {\n           .bind(queuePane.widthProperty().divide(queuesPerRow).subtract(queuePane.getHgap()));\n       return controller.getRoot();\n     }).collect(Collectors.toList());\n-    JavaFxUtil.runLater(() -> queuePane.getChildren().setAll(queueCards));\n+    fxApplicationThreadExecutor.execute(() -> queuePane.getChildren().setAll(queueCards));\n   }\n \n   public void onSearchButtonClicked() {\n     if (searchButton.isSelected()) {\n       teamMatchmakingService.joinQueues()\n-          .thenAccept(success -> JavaFxUtil.runLater(() -> searchButton.setSelected(success)));\n+          .thenAcceptAsync(searchButton::setSelected, fxApplicationThreadExecutor);\n     } else {\n       teamMatchmakingService.leaveQueues();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "51a3f02a375abe5df258a764d0538e620a067eb5", "committedDate": "2021-01-12 20:29:51 -0500", "message": "Store faction selection in preferences (#2112)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "8d66f9a7f480f5003041e59147024e5d27c385d2", "committedDate": "2021-05-12 19:26:35 -0400", "message": "Add default of queueName for translation of queue (#2240)"}, {"oid": "ea4a3d591a1e3d2b80a0f8d2d9ab7765cb8b2853", "committedDate": "2021-05-23 09:09:05 -0400", "message": "Scale queue width dynamically"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "cda9b14e4b24dfb55fa3febd450be2cf95ef3b97", "committedDate": "2021-06-20 14:58:18 -0400", "message": "Fix leaveButton not being set when in other players"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "e0718a10c6bcf381c6a1ed7146c2d9d4fe486968", "committedDate": "2021-07-17 10:26:09 -0400", "message": "Add null check for matchmakingChatController"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "768785769a2d23357a1f91fe9b5f462b0b09627f", "committedDate": "2021-11-21 08:06:44 -0500", "message": "Clean up setting player status from game status (#2419)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "09d88f7599f827553f70d419e15fb7b34989c77d", "committedDate": "2022-11-12 18:23:09 -0500", "message": "Add active games to matchmaker queue (#2845)"}, {"oid": "f9a613831b545997290a4acbd8dfd153d52f0bdc", "committedDate": "2023-01-14 21:20:00 -0500", "message": "Upgrade to javafx 19 (#2890)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "4df48045c0fc0b21fe2f8fc565441ed2ac650b4c", "committedDate": "2023-02-19 23:40:50 -0500", "message": "Use bindings for the teammatchmaker controllers (#2919)"}, {"oid": "1139d8d4b67a84843c8a17f36f99938b125edd6a", "committedDate": "2023-03-04 14:41:31 -0500", "message": "Fix race condition of matchmaker state (#2932)"}, {"oid": "6231023c95538d7187adcd3e3c3c9417600cbb8e", "committedDate": "2023-03-11 20:00:32 -0500", "message": "Convert events to records where possible (#2940)"}, {"oid": "ac8669087b7b29ade57a46217f70a569716d17fe", "committedDate": "2023-04-21 22:30:29 -0400", "message": "Use properties for chat channel controller and ensure it can be collected (#2960)"}, {"oid": "b86f5c8e62200ff540330a38577f87f3aa678f42", "committedDate": "2023-04-22 14:47:29 +0000", "message": "Move message handling to ChatChannel and out of ChatController (#2961)"}, {"oid": "8a72c8ff6f92b6b06a5090279ea3ad32dda7c68b", "committedDate": "2023-04-22 23:49:15 -0400", "message": "Add single button for starting search (#2942)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NDY4OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549764688", "body": "Create an issue and reference it", "bodyText": "Create an issue and reference it", "bodyHTML": "<p dir=\"auto\">Create an issue and reference it</p>", "author": "1-alex98", "createdAt": "2020-12-29T16:20:29Z", "path": "src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.faforever.client.teammatchmaking;\n+\n+import com.faforever.client.chat.CountryFlagService;\n+import com.faforever.client.chat.avatar.AvatarService;\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.game.Faction;\n+import com.faforever.client.game.PlayerStatus;\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.player.Player;\n+import com.faforever.client.player.PlayerService;\n+import com.faforever.client.teammatchmaking.Party.PartyMember;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.RatingUtil;\n+import com.google.common.base.Strings;\n+import javafx.application.Platform;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.beans.value.WeakChangeListener;\n+import javafx.css.PseudoClass;\n+import javafx.event.ActionEvent;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.HBox;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static javafx.beans.binding.Bindings.createObjectBinding;\n+import static javafx.beans.binding.Bindings.createStringBinding;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class PartyMemberItemController implements Controller<Node> {\n+\n+  private static final PseudoClass LEADER_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"leader\");\n+  private static final PseudoClass PLAYING_PSEUDO_CLASS = PseudoClass.getPseudoClass(\"playing\");\n+\n+  private final CountryFlagService countryFlagService;\n+  private final AvatarService avatarService;\n+  private final PlayerService playerService;\n+  private final TeamMatchmakingService teamMatchmakingService;\n+  private final UiService uiService;\n+  private final I18n i18n;\n+\n+  public Node playerItemRoot;\n+  public ImageView avatarImageView;\n+  public ImageView countryImageView;\n+  public ImageView leagueImageView;\n+  public Button kickPlayerButton;\n+  public Label clanLabel;\n+  public Label usernameLabel;\n+  public Label leagueLabel;\n+  public Label gameCountLabel;\n+  public Label uefLabel;\n+  public Label cybranLabel;\n+  public Label aeonLabel;\n+  public Label seraphimLabel;\n+  public Label crownLabel;\n+  public HBox playerCard;\n+  public ImageView playerStatusImageView;\n+\n+  private Player player;\n+  private WeakReference<PartyMemberContextMenuController> contextMenuController = null;\n+\n+  @Override\n+  public void initialize() {\n+    clanLabel.managedProperty().bind(clanLabel.visibleProperty());\n+  }\n+\n+  @Override\n+  public Node getRoot() {\n+    return playerItemRoot;\n+  }\n+\n+  public void setMember(PartyMember member) {\n+    this.player = member.getPlayer();\n+\n+    initializeBindings();\n+    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+\n+    playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n+    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n+    markMemberBusy(player.statusProperty().get());\n+\n+    selectFactionsBasedOnParty();\n+  }\n+\n+  private void markMemberBusy(PlayerStatus status) {\n+    if (status != PlayerStatus.IDLE) {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(true);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n+        teamMatchmakingService.getPlayersInGame().add(player);\n+      });\n+    } else {\n+      Platform.runLater(() -> {\n+        playerStatusImageView.setVisible(false);\n+        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n+        teamMatchmakingService.getPlayersInGame().remove(player);\n+      });\n+    }\n+  }\n+\n+  private void initializeBindings() {\n+    countryImageView.imageProperty().bind(createObjectBinding(() ->\n+        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n+    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n+    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n+    leagueImageView.setManaged(false);\n+    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n+\n+    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n+    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n+    usernameLabel.textProperty().bind(player.usernameProperty());\n+    leagueLabel.textProperty().bind(createStringBinding(\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n+        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available", "originalCommit": "6b73bd3a2def2bce452cc87f4eb3fb4dccde1504", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5NTgzNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/2059#discussion_r549795836", "bodyText": "The leagueservice has already been merged into faf stack. I think it is just a matter of time for deployment now. Or maybe there needs to be extra work done to create the api endpoints. I am not sure.", "author": "BlackYps", "createdAt": "2020-12-29T17:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NDY4OA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0bb28821..aa508f5c 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -120,8 +120,8 @@ public class PartyMemberItemController implements Controller<Node> {\n     clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n     usernameLabel.textProperty().bind(player.usernameProperty());\n     leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player)).toUpperCase(),\n-        player.globalRatingMeanProperty())); // TODO: replace this with divisionproperty once it is available\n+        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player, \"\")).toUpperCase(),\n+        player.leaderboardRatingMapProperty())); // TODO: replace this with divisionproperty once it is available\n     gameCountLabel.textProperty().bind(createStringBinding(\n         () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n         player.numberOfGamesProperty()));\n", "next_change": {"commit": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex aa508f5c..0b62f17e 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -80,72 +81,80 @@ public class PartyMemberItemController implements Controller<Node> {\n   }\n \n   public void setMember(PartyMember member) {\n-    this.player = member.getPlayer();\n-\n-    initializeBindings();\n-    playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, teamMatchmakingService.getParty().getOwner().equals(player));\n+    Assert.checkNotNullIllegalState(player, \"Party member already set\");\n+    player = member.getPlayer();\n \n+    // TODO: replace this with divisionproperty once it is available\n+    leagueImageView.setVisible(false);\n+    leagueLabel.setText(i18n.get(\"leaderboard.divisionName\").toUpperCase());\n     playerStatusImageView.setImage(uiService.getThemeImage(UiService.CHAT_LIST_STATUS_PLAYING));\n-    player.statusProperty().addListener(new WeakChangeListener<>((observable, oldValue, newValue) -> markMemberBusy(newValue)));\n-    markMemberBusy(player.statusProperty().get());\n \n+    addListeners();\n     selectFactionsBasedOnParty();\n   }\n \n-  private void markMemberBusy(PlayerStatus status) {\n-    if (status != PlayerStatus.IDLE) {\n-      Platform.runLater(() -> {\n-        playerStatusImageView.setVisible(true);\n-        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, true);\n-        teamMatchmakingService.getPlayersInGame().add(player);\n-      });\n-    } else {\n-      Platform.runLater(() -> {\n-        playerStatusImageView.setVisible(false);\n-        playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, false);\n-        teamMatchmakingService.getPlayersInGame().remove(player);\n-      });\n-    }\n+  private void initializeListeners() {\n+    playerStatusInvalidationListener = observable -> setMemberGameStatus();\n+    playerPropertiesInvalidationListener = observable -> setPlayerProperties();\n+    partyOwnerInvalidationListener = observable -> setPartyOwnerProperties();\n+  }\n+\n+  private void setMemberGameStatus() {\n+    boolean inGame = player.getStatus() != PlayerStatus.IDLE;\n+    JavaFxUtil.runLater(() -> {\n+      playerStatusImageView.setVisible(inGame);\n+      playerCard.pseudoClassStateChanged(PLAYING_PSEUDO_CLASS, inGame);\n+    });\n+  }\n+\n+  private void setPartyOwnerProperties() {\n+    Player currentPlayer = playerService.getCurrentPlayer().orElseThrow(() -> new IllegalStateException(\"Current Player not set\"));\n+    Player owner = teamMatchmakingService.getParty().getOwner();\n+    JavaFxUtil.runLater(() -> {\n+      crownLabel.setVisible(owner == player);\n+      kickPlayerButton.setVisible(owner == currentPlayer && player != currentPlayer);\n+      playerCard.pseudoClassStateChanged(LEADER_PSEUDO_CLASS, owner == player);\n+    });\n+  }\n+\n+  private void setPlayerProperties() {\n+    Image countryFlag = countryFlagService.loadCountryFlag(player.getCountry()).orElse(null);\n+    Image avatarImage = Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl());\n+    String clanTag = Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan());\n+    JavaFxUtil.runLater(() -> {\n+      countryImageView.setImage(countryFlag);\n+      avatarImageView.setImage(avatarImage);\n+      clanLabel.setVisible(!Strings.isNullOrEmpty(player.getClan()));\n+      clanLabel.setText(clanTag);\n+      gameCountLabel.setText(i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase());\n+      usernameLabel.setText(player.getUsername());\n+    });\n   }\n \n-  private void initializeBindings() {\n-    countryImageView.imageProperty().bind(createObjectBinding(() ->\n-        countryFlagService.loadCountryFlag(player.getCountry()).orElse(null), player.countryProperty()));\n-    avatarImageView.visibleProperty().bind(player.avatarUrlProperty().isNotNull().and(player.avatarUrlProperty().isNotEmpty()));\n-    avatarImageView.imageProperty().bind(createObjectBinding(() -> Strings.isNullOrEmpty(player.getAvatarUrl()) ? null : avatarService.loadAvatar(player.getAvatarUrl()), player.avatarUrlProperty()));\n-    leagueImageView.setManaged(false);\n-    JavaFxUtil.bindManagedToVisible(clanLabel, avatarImageView, playerStatusImageView);\n-\n-    clanLabel.visibleProperty().bind(player.clanProperty().isNotEmpty().and(player.clanProperty().isNotNull()));\n-    clanLabel.textProperty().bind(createStringBinding(() -> Strings.isNullOrEmpty(player.getClan()) ? \"\" : String.format(\"[%s]\", player.getClan()), player.clanProperty()));\n-    usernameLabel.textProperty().bind(player.usernameProperty());\n-    leagueLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"leaderboard.divisionName\", RatingUtil.getLeaderboardRating(player, \"\")).toUpperCase(),\n-        player.leaderboardRatingMapProperty())); // TODO: replace this with divisionproperty once it is available\n-    gameCountLabel.textProperty().bind(createStringBinding(\n-        () -> i18n.get(\"teammatchmaking.gameCount\", player.getNumberOfGames()).toUpperCase(),\n-        player.numberOfGamesProperty()));\n-    crownLabel.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(player));\n-\n-    BooleanBinding isDifferentPlayerBinding = playerService.currentPlayerProperty().isNotEqualTo(player);\n-    kickPlayerButton.visibleProperty().bind(teamMatchmakingService.getParty().ownerProperty().isEqualTo(playerService.currentPlayerProperty()).and(isDifferentPlayerBinding));\n-    JavaFxUtil.bindManagedToVisible(kickPlayerButton);\n+  private void addListeners() {\n+    JavaFxUtil.addAndTriggerListener(player.clanProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.avatarUrlProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.countryProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.numberOfGamesProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addListener(player.usernameProperty(), new WeakInvalidationListener(playerPropertiesInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(player.statusProperty(), new WeakInvalidationListener(playerStatusInvalidationListener));\n+    JavaFxUtil.addAndTriggerListener(teamMatchmakingService.getParty().ownerProperty(), new WeakInvalidationListener(partyOwnerInvalidationListener));\n   }\n \n   private void selectFactionsBasedOnParty() {\n-    uefLabel.setDisable(!isFactionSelectedInParty(Faction.UEF));\n-    aeonLabel.setDisable(!isFactionSelectedInParty(Faction.AEON));\n-    cybranLabel.setDisable(!isFactionSelectedInParty(Faction.CYBRAN));\n-    seraphimLabel.setDisable(!isFactionSelectedInParty(Faction.SERAPHIM));\n+    uefLabel.setDisable(factionIsNotSelected(Faction.UEF));\n+    aeonLabel.setDisable(factionIsNotSelected(Faction.AEON));\n+    cybranLabel.setDisable(factionIsNotSelected(Faction.CYBRAN));\n+    seraphimLabel.setDisable(factionIsNotSelected(Faction.SERAPHIM));\n   }\n \n-  private boolean isFactionSelectedInParty(Faction faction) {\n+  private boolean factionIsNotSelected(Faction faction) {\n     return teamMatchmakingService.getParty().getMembers().stream()\n-        .anyMatch(m -> m.getPlayer().getId() == player.getId() && m.getFactions().contains(faction));\n+        .noneMatch(member -> member.getPlayer() == player && member.getFactions().contains(faction));\n   }\n \n   public void onKickPlayerButtonClicked(ActionEvent actionEvent) {\n-    teamMatchmakingService.kickPlayerFromParty(this.player);\n+    teamMatchmakingService.kickPlayerFromParty(player);\n   }\n \n   public void onContextMenuRequested(ContextMenuEvent event) {\n", "next_change": {"commit": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\nindex 0b62f17e..ade773e9 100644\n--- a/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n+++ b/src/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n", "chunk": "@@ -153,23 +182,20 @@ public class PartyMemberItemController implements Controller<Node> {\n         .noneMatch(member -> member.getPlayer() == player && member.getFactions().contains(faction));\n   }\n \n-  public void onKickPlayerButtonClicked(ActionEvent actionEvent) {\n+  public void onKickPlayerButtonClicked() {\n     teamMatchmakingService.kickPlayerFromParty(player);\n   }\n \n   public void onContextMenuRequested(ContextMenuEvent event) {\n-    if (contextMenuController != null) {\n-      PartyMemberContextMenuController controller = contextMenuController.get();\n-      if (controller != null) {\n-        controller.getContextMenu().show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n-        return;\n-      }\n-    }\n-\n-    PartyMemberContextMenuController controller = uiService.loadFxml(\"theme/play/teammatchmaking/party_member_context_menu.fxml\");\n-    controller.setPlayer(player);\n-    controller.getContextMenu().show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n-\n-    contextMenuController = new WeakReference<>(controller);\n+    ContextMenuBuilder.newBuilder(context)\n+        .addItem(ShowPlayerInfoMenuItem.class, player)\n+        .addItem(SendPrivateMessageMenuItem.class, player.getUsername())\n+        .addItem(CopyUsernameMenuItem.class, player.getUsername())\n+        .addSeparator()\n+        .addItem(ReportPlayerMenuItem.class, player)\n+        .addSeparator()\n+        .addItem(ViewReplaysMenuItem.class, player)\n+        .build()\n+        .show(playerItemRoot.getScene().getWindow(), event.getScreenX(), event.getScreenY());\n   }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "a4893b100c644ff3887cee20464bdcead44550c3", "message": "Merge commit", "committedDate": null}, {"oid": "fc4e3bc6baa7a78adae2089ac175f80a9836b47f", "committedDate": "2021-01-07 20:06:21 -0500", "message": "Convert to using leaderboards over hardcoded ratings (#2080)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "49f764d249aa8437651bba64e19df5ea336c4873", "committedDate": "2021-04-24 14:45:16 -0400", "message": "Remove client based dtos and use java-commons-dtos (#2211)"}, {"oid": "714a7b90a4d9b532f1ddb3de65330456ad88e229", "committedDate": "2021-06-19 11:12:05 -0400", "message": "Clean up matchmaker logic (#2276)"}, {"oid": "960c35199420dc3b6401624b5dac9dbeff8bcc08", "committedDate": "2021-07-05 09:50:06 -0400", "message": "Change team and sim mods to object properties containing unmodifiable maps (#2297)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "07664c7dd5648f33a37ce21526d834f9853d90d5", "committedDate": "2021-07-25 16:45:23 -0400", "message": "Remove number of games from player and compute from leaderboard Ratings (#2314)"}, {"oid": "38384c97542720dee36f5807225e4fb898fb3276", "committedDate": "2021-07-26 12:49:55 -0400", "message": "Rework location of user info and avatar classes (#2315)"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "5773f3816d7f58c1acf9f708ec89710319fabe3d", "committedDate": "2021-10-23 08:51:24 -0400", "message": "Utilize inheritance for context menus (#2381)"}, {"oid": "aaf0165e5ce7f86cbc693f59e3634218b2417b45", "committedDate": "2021-12-09 18:56:49 -0500", "message": "Add league leaderboards (#1973)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "80c4b8f0ebaddb71a6609e710a9072d15b7b6114", "committedDate": "2022-02-06 08:40:18 -0500", "message": "Show avatar next to the player's name (#2544)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "ea42551c3c3d52da73da14bcc0d30ada2ef2c714", "committedDate": "2022-04-04 18:48:12 -0400", "message": "Add league info to player info window (#2633)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"oid": "44cbd2c344ab20ed407c72e43b129e48a828f368", "url": "https://github.com/FAForever/downlords-faf-client/commit/44cbd2c344ab20ed407c72e43b129e48a828f368", "message": "Code cleanup", "committedDate": "2020-12-30T13:43:13Z", "type": "commit"}, {"oid": "2aeaeaa018276a4cc0ab98a66b932007c4f62de1", "url": "https://github.com/FAForever/downlords-faf-client/commit/2aeaeaa018276a4cc0ab98a66b932007c4f62de1", "message": "Delete leftover message", "committedDate": "2020-12-30T21:53:42Z", "type": "commit"}, {"oid": "61867f41510a108db36f7e449ef960aaa6cabf18", "url": "https://github.com/FAForever/downlords-faf-client/commit/61867f41510a108db36f7e449ef960aaa6cabf18", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "c48e14ac3dcdf670bb65381adf252885adacc2c7", "url": "https://github.com/FAForever/downlords-faf-client/commit/c48e14ac3dcdf670bb65381adf252885adacc2c7", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "17357f52afc7dc315d84eea536ee8c8433f88b61", "url": "https://github.com/FAForever/downlords-faf-client/commit/17357f52afc7dc315d84eea536ee8c8433f88b61", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "e7d29568cbd60339c4c1277362b9ceaf067d01c9", "url": "https://github.com/FAForever/downlords-faf-client/commit/e7d29568cbd60339c4c1277362b9ceaf067d01c9", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "66cc15ed79e9e22ba47a30369dbad120c369837f", "url": "https://github.com/FAForever/downlords-faf-client/commit/66cc15ed79e9e22ba47a30369dbad120c369837f", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "52f5f1e95f06d5e98894d6b4fccc2b9d1810161c", "url": "https://github.com/FAForever/downlords-faf-client/commit/52f5f1e95f06d5e98894d6b4fccc2b9d1810161c", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "907e22c5aeb515dc1a6bd7d640b847d1f79c2b7a", "url": "https://github.com/FAForever/downlords-faf-client/commit/907e22c5aeb515dc1a6bd7d640b847d1f79c2b7a", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "7b28e0df51e74afc6af10801e1ade9a2b7e8fb49", "url": "https://github.com/FAForever/downlords-faf-client/commit/7b28e0df51e74afc6af10801e1ade9a2b7e8fb49", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "0fd85819a3377dbff56b2236d8de875948dd9a61", "url": "https://github.com/FAForever/downlords-faf-client/commit/0fd85819a3377dbff56b2236d8de875948dd9a61", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "f58a5dd717b6339c54ae831ca17e8d34d3c03726", "url": "https://github.com/FAForever/downlords-faf-client/commit/f58a5dd717b6339c54ae831ca17e8d34d3c03726", "message": "team matchmaking WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "e964573811f1b05a013b9aa956eb4764bdbe7cd3", "url": "https://github.com/FAForever/downlords-faf-client/commit/e964573811f1b05a013b9aa956eb4764bdbe7cd3", "message": "party ready system", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "6818fb4069f850c9834442938b59b0a72d1d26fd", "url": "https://github.com/FAForever/downlords-faf-client/commit/6818fb4069f850c9834442938b59b0a72d1d26fd", "message": "party structure rework, factions WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "7081bde3cc70d046f1da292df70dd09de570a646", "url": "https://github.com/FAForever/downlords-faf-client/commit/7081bde3cc70d046f1da292df70dd09de570a646", "message": "party factions UI, UI restructure", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "0da93f46dd019d56aed12354a61764c58c6eca9a", "url": "https://github.com/FAForever/downlords-faf-client/commit/0da93f46dd019d56aed12354a61764c58c6eca9a", "message": "party system WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "470a5653f8471fe245601c29709007761b2d52e9", "url": "https://github.com/FAForever/downlords-faf-client/commit/470a5653f8471fe245601c29709007761b2d52e9", "message": "party system FACTIONS WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "4ec75df643767fe5bb71afc3faacceb4e1bf27e8", "url": "https://github.com/FAForever/downlords-faf-client/commit/4ec75df643767fe5bb71afc3faacceb4e1bf27e8", "message": "party system factions", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "f772b8c5308c7b2ab7252445315b86d45d918869", "url": "https://github.com/FAForever/downlords-faf-client/commit/f772b8c5308c7b2ab7252445315b86d45d918869", "message": "do not show faction buttons on disable", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "d7f4f7325ddf05a0ec1d6cc90f9799a8df5ed2ae", "url": "https://github.com/FAForever/downlords-faf-client/commit/d7f4f7325ddf05a0ec1d6cc90f9799a8df5ed2ae", "message": "Clean up and Exception fixes", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "2f88f4c60c32dad14bc773b7fab48857d22b9a22", "url": "https://github.com/FAForever/downlords-faf-client/commit/2f88f4c60c32dad14bc773b7fab48857d22b9a22", "message": "WIP", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "a214cbdfa20c6d2399a436ec5f36978f07b5ff19", "url": "https://github.com/FAForever/downlords-faf-client/commit/a214cbdfa20c6d2399a436ec5f36978f07b5ff19", "message": "add context menu to party", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "37bddf609453806fbefadb89e16da22a50054628", "url": "https://github.com/FAForever/downlords-faf-client/commit/37bddf609453806fbefadb89e16da22a50054628", "message": "player card ui", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "f067be152e3392a2efeb03de60d4ffc9b3e34a01", "url": "https://github.com/FAForever/downlords-faf-client/commit/f067be152e3392a2efeb03de60d4ffc9b3e34a01", "message": "restructure TMM ui", "committedDate": "2020-06-03T21:19:30Z", "type": "commit"}, {"oid": "806d815f06c5999b5dcfa6e1995021a3ce95a308", "url": "https://github.com/FAForever/downlords-faf-client/commit/806d815f06c5999b5dcfa6e1995021a3ce95a308", "message": "TMM queue list display", "committedDate": "2020-06-03T22:48:34Z", "type": "commit"}, {"oid": "d9e096352968ee65d47e15784be4ed9a6a5c39ca", "url": "https://github.com/FAForever/downlords-faf-client/commit/d9e096352968ee65d47e15784be4ed9a6a5c39ca", "message": "tmm queue UI, timer", "committedDate": "2020-06-04T11:29:39Z", "type": "commit"}, {"oid": "94359c2841f2678fd9b29d53db43fe12d11a8d35", "url": "https://github.com/FAForever/downlords-faf-client/commit/94359c2841f2678fd9b29d53db43fe12d11a8d35", "message": "tmm queue - business logic", "committedDate": "2020-06-27T22:46:43Z", "type": "commit"}, {"oid": "da1c07992e59f1c0acbbbb0494dfad0fc989b116", "url": "https://github.com/FAForever/downlords-faf-client/commit/da1c07992e59f1c0acbbbb0494dfad0fc989b116", "message": "ensure game path is valid before sending invite", "committedDate": "2020-07-20T11:34:40Z", "type": "commit"}, {"oid": "fdba3592ec773cb221790054300840178393434e", "url": "https://github.com/FAForever/downlords-faf-client/commit/fdba3592ec773cb221790054300840178393434e", "message": "Integrate new matchmaker ui", "committedDate": "2020-08-11T11:26:21Z", "type": "commit"}, {"oid": "4c960de0fe4306d51341352b30caec9b497f0ad8", "url": "https://github.com/FAForever/downlords-faf-client/commit/4c960de0fe4306d51341352b30caec9b497f0ad8", "message": "Use i18n instead of hardcoded text", "committedDate": "2020-08-11T21:01:56Z", "type": "commit"}, {"oid": "515fb3db9c76635fc77c8f9490252c59695f67fd", "url": "https://github.com/FAForever/downlords-faf-client/commit/515fb3db9c76635fc77c8f9490252c59695f67fd", "message": "Filter player out of party", "committedDate": "2020-08-11T21:30:57Z", "type": "commit"}, {"oid": "f269f7f7b622580b1980d71f5c5a5cd61557f0ce", "url": "https://github.com/FAForever/downlords-faf-client/commit/f269f7f7b622580b1980d71f5c5a5cd61557f0ce", "message": "Refactor country flag loading", "committedDate": "2020-08-20T07:51:08Z", "type": "commit"}, {"oid": "2b568e3639873e84a3d088fc7ea458e22422af40", "url": "https://github.com/FAForever/downlords-faf-client/commit/2b568e3639873e84a3d088fc7ea458e22422af40", "message": "Change ready button to play button", "committedDate": "2020-08-20T19:38:17Z", "type": "commit"}, {"oid": "07d08bcdc1c23f1142a1891ea9c1178976424e29", "url": "https://github.com/FAForever/downlords-faf-client/commit/07d08bcdc1c23f1142a1891ea9c1178976424e29", "message": "hide ready button, disable join queue buttons based on party size and ownership, hide invite player button", "committedDate": "2020-08-23T16:49:26Z", "type": "commit"}, {"oid": "8e62e2a898e4023192672b8f6f3f492d1b03b4b5", "url": "https://github.com/FAForever/downlords-faf-client/commit/8e62e2a898e4023192672b8f6f3f492d1b03b4b5", "message": "fix tests", "committedDate": "2020-08-23T16:56:55Z", "type": "commit"}, {"oid": "7241dd3335c42d0ce8b4b4b066533a85b939419a", "url": "https://github.com/FAForever/downlords-faf-client/commit/7241dd3335c42d0ce8b4b4b066533a85b939419a", "message": "TESTS DISABLED, REVERT!", "committedDate": "2020-08-23T17:07:53Z", "type": "commit"}, {"oid": "99c4d1d0f563d7f67840d1ffcebbb10a6ccacecf", "url": "https://github.com/FAForever/downlords-faf-client/commit/99c4d1d0f563d7f67840d1ffcebbb10a6ccacecf", "message": "WIP remove faction from matchmaker queue join, faction order fix, temporary ugly GameLaunchMessage parsing fix, temporary matchmaker game launch", "committedDate": "2020-08-24T10:00:17Z", "type": "commit"}, {"oid": "57f51d1c358b3c36f8f733aee6974d0b69f125a5", "url": "https://github.com/FAForever/downlords-faf-client/commit/57f51d1c358b3c36f8f733aee6974d0b69f125a5", "message": "switch faction buttons, fix flag on faction select, force faction selection", "committedDate": "2020-08-24T11:01:28Z", "type": "commit"}, {"oid": "debad00bc0e54c28c848129257ba2965f0721dba", "url": "https://github.com/FAForever/downlords-faf-client/commit/debad00bc0e54c28c848129257ba2965f0721dba", "message": "tmm - display matching status", "committedDate": "2020-08-24T12:20:36Z", "type": "commit"}, {"oid": "efb81171aa7f80372ac61749074e3b4a9ccc7995", "url": "https://github.com/FAForever/downlords-faf-client/commit/efb81171aa7f80372ac61749074e3b4a9ccc7995", "message": "i18n queue name", "committedDate": "2020-09-06T10:37:25Z", "type": "commit"}, {"oid": "39b9c92012f764196275200b7c6b803ae2875e48", "url": "https://github.com/FAForever/downlords-faf-client/commit/39b9c92012f764196275200b7c6b803ae2875e48", "message": "matchmaking - use faction ids instead of boolean array", "committedDate": "2020-09-06T11:03:31Z", "type": "commit"}, {"oid": "5ff6a29c95ac2c03f2d494920e8d2be73d162b36", "url": "https://github.com/FAForever/downlords-faf-client/commit/5ff6a29c95ac2c03f2d494920e8d2be73d162b36", "message": "notify and block party invite / join when in queue", "committedDate": "2020-09-06T11:21:01Z", "type": "commit"}, {"oid": "17296248dd8b6f3a8db144ad21e5bc4cefede375", "url": "https://github.com/FAForever/downlords-faf-client/commit/17296248dd8b6f3a8db144ad21e5bc4cefede375", "message": "sanity checks, game launch cleanup", "committedDate": "2020-09-06T11:48:45Z", "type": "commit"}, {"oid": "aa2ef7991287a5ea8bc3af6f4c008ad106a47877", "url": "https://github.com/FAForever/downlords-faf-client/commit/aa2ef7991287a5ea8bc3af6f4c008ad106a47877", "message": "Uppercase now controlled by styleclass to enable override by themes", "committedDate": "2020-09-14T20:52:05Z", "type": "commit"}, {"oid": "025c079e23af590c6cc5bc2efa861ce1d9bed5e6", "url": "https://github.com/FAForever/downlords-faf-client/commit/025c079e23af590c6cc5bc2efa861ce1d9bed5e6", "message": "Delete obsolete play button", "committedDate": "2020-09-14T21:09:49Z", "type": "commit"}, {"oid": "5bafdd3ad1297c83496c7ca0abf75517aa8e8858", "url": "https://github.com/FAForever/downlords-faf-client/commit/5bafdd3ad1297c83496c7ca0abf75517aa8e8858", "message": "Enable resizing of the UI", "committedDate": "2020-09-14T21:27:10Z", "type": "commit"}, {"oid": "9095afa78644b12a7d4b6944d9cbeed51dc142a3", "url": "https://github.com/FAForever/downlords-faf-client/commit/9095afa78644b12a7d4b6944d9cbeed51dc142a3", "message": "Add new heading for queue area", "committedDate": "2020-09-14T21:37:13Z", "type": "commit"}, {"oid": "16f097866d6212844750291dbd0ce8bd62e9aa7d", "url": "https://github.com/FAForever/downlords-faf-client/commit/16f097866d6212844750291dbd0ce8bd62e9aa7d", "message": "Fix some bugs", "committedDate": "2020-09-15T08:41:13Z", "type": "commit"}, {"oid": "d46a7d81f8186b86bdc8c441b1df95b39def2be4", "url": "https://github.com/FAForever/downlords-faf-client/commit/d46a7d81f8186b86bdc8c441b1df95b39def2be4", "message": "Restyle queue cards", "committedDate": "2020-09-16T11:41:42Z", "type": "commit"}, {"oid": "b3358fc5f331eac0f611754a97985e3d4cd9300b", "url": "https://github.com/FAForever/downlords-faf-client/commit/b3358fc5f331eac0f611754a97985e3d4cd9300b", "message": "Implement queue name lookup and shortening", "committedDate": "2020-09-16T19:33:55Z", "type": "commit"}, {"oid": "bdcda34f4138e621619798380583f670d4b6c977", "url": "https://github.com/FAForever/downlords-faf-client/commit/bdcda34f4138e621619798380583f670d4b6c977", "message": "Replace rating labels with league icon + label", "committedDate": "2020-09-22T11:11:58Z", "type": "commit"}, {"oid": "6c86a3515238234eeee8a925122692310336ff8f", "url": "https://github.com/FAForever/downlords-faf-client/commit/6c86a3515238234eeee8a925122692310336ff8f", "message": "Layout changes and playercard grows properly", "committedDate": "2020-10-01T17:28:09Z", "type": "commit"}, {"oid": "202c6e6bbb2d65f844bab8d76b71bf6a368763c8", "url": "https://github.com/FAForever/downlords-faf-client/commit/202c6e6bbb2d65f844bab8d76b71bf6a368763c8", "message": "Use proper string formatting", "committedDate": "2020-10-01T22:20:03Z", "type": "commit"}, {"oid": "b79ddae4528000a3bc2940be5c78cc2481b3010b", "url": "https://github.com/FAForever/downlords-faf-client/commit/b79ddae4528000a3bc2940be5c78cc2481b3010b", "message": "Add matching status labels", "committedDate": "2020-10-01T22:38:27Z", "type": "commit"}, {"oid": "157b65757c99f782f8258e3abbded272e2731c3e", "url": "https://github.com/FAForever/downlords-faf-client/commit/157b65757c99f782f8258e3abbded272e2731c3e", "message": "Merge branch 'feature/team-matchmaking' into feature/new-tmm-ui\n\n# Conflicts:\n#\tsrc/main/java/com/faforever/client/teammatchmaking/MatchmakingQueueItemController.java\n#\tsrc/main/java/com/faforever/client/teammatchmaking/PartyMemberItemController.java\n#\tsrc/main/resources/i18n/messages.properties\n#\tsrc/main/resources/theme/play/team_matchmaking.fxml\n#\tsrc/main/resources/theme/play/teammatchmaking/matchmaking_member_card.fxml\n#\tsrc/main/resources/theme/play/teammatchmaking/matchmaking_queue_card.fxml", "committedDate": "2020-10-01T23:20:57Z", "type": "commit"}, {"oid": "65b6b81e6e648bc55c083eb158e5d0dd4720f72e", "url": "https://github.com/FAForever/downlords-faf-client/commit/65b6b81e6e648bc55c083eb158e5d0dd4720f72e", "message": "Fix merge errors", "committedDate": "2020-10-02T15:02:06Z", "type": "commit"}, {"oid": "cffc66e6cba2f2b8a89c7a0773451a5d88d432f0", "url": "https://github.com/FAForever/downlords-faf-client/commit/cffc66e6cba2f2b8a89c7a0773451a5d88d432f0", "message": "tmm: parse factions as string, fix status indicators for own faction selection", "committedDate": "2020-10-04T11:31:07Z", "type": "commit"}, {"oid": "c99d1e32ac5b0913dc1741de7813b357de8030f5", "url": "https://github.com/FAForever/downlords-faf-client/commit/c99d1e32ac5b0913dc1741de7813b357de8030f5", "message": "fix queue join race condition, set queue joined button state based on server state", "committedDate": "2020-10-04T11:52:43Z", "type": "commit"}, {"oid": "9ea96bb8e2b33731f7bd73bcf2fa439017665911", "url": "https://github.com/FAForever/downlords-faf-client/commit/9ea96bb8e2b33731f7bd73bcf2fa439017665911", "message": "fix faction parsing for game launch message", "committedDate": "2020-10-04T12:19:28Z", "type": "commit"}, {"oid": "6935b4f8981e1f193ccd2da0d9a446a397633555", "url": "https://github.com/FAForever/downlords-faf-client/commit/6935b4f8981e1f193ccd2da0d9a446a397633555", "message": "fix install4j github release url", "committedDate": "2020-10-04T15:12:17Z", "type": "commit"}, {"oid": "03d6558bd115c5560fa808587d8030c1ad590c1d", "url": "https://github.com/FAForever/downlords-faf-client/commit/03d6558bd115c5560fa808587d8030c1ad590c1d", "message": "remove / disable ladder1v1 tests", "committedDate": "2020-10-04T15:17:34Z", "type": "commit"}, {"oid": "5719cae773864a15b9b16419b4528d37fe953e42", "url": "https://github.com/FAForever/downlords-faf-client/commit/5719cae773864a15b9b16419b4528d37fe953e42", "message": "bump install4j version WIP", "committedDate": "2020-10-04T16:02:28Z", "type": "commit"}, {"oid": "54792c6e301c042d8ba184962b29e2537fa1b362", "url": "https://github.com/FAForever/downlords-faf-client/commit/54792c6e301c042d8ba184962b29e2537fa1b362", "message": "unbump install4j version (to 7, use different key)", "committedDate": "2020-10-04T17:03:27Z", "type": "commit"}, {"oid": "9c09d8e3dfea2d6cc8a795f681af16484d7677fb", "url": "https://github.com/FAForever/downlords-faf-client/commit/9c09d8e3dfea2d6cc8a795f681af16484d7677fb", "message": "send own factions to server upon entering queue", "committedDate": "2020-10-04T19:23:40Z", "type": "commit"}, {"oid": "ec2f619e39d36454b9102e07e9490f15a92680a7", "url": "https://github.com/FAForever/downlords-faf-client/commit/ec2f619e39d36454b9102e07e9490f15a92680a7", "message": "select all factions in an empty party", "committedDate": "2020-10-04T19:31:35Z", "type": "commit"}, {"oid": "40b5351b8812af56bf4443337de013675a289019", "url": "https://github.com/FAForever/downlords-faf-client/commit/40b5351b8812af56bf4443337de013675a289019", "message": "Fix empty slot in party member pane", "committedDate": "2020-10-04T21:18:40Z", "type": "commit"}, {"oid": "bdfbc454eae43c391df3b9144f4a8e737fa46467", "url": "https://github.com/FAForever/downlords-faf-client/commit/bdfbc454eae43c391df3b9144f4a8e737fa46467", "message": "Highlight party owner", "committedDate": "2020-10-04T23:28:06Z", "type": "commit"}, {"oid": "7e30329c55de3a3fb84cdeb00364a21b4e85bf7f", "url": "https://github.com/FAForever/downlords-faf-client/commit/7e30329c55de3a3fb84cdeb00364a21b4e85bf7f", "message": "Align kick button to the right", "committedDate": "2020-10-05T11:09:56Z", "type": "commit"}, {"oid": "85d51945a2d42b04a3ff4e7d9717e5cebd28021f", "url": "https://github.com/FAForever/downlords-faf-client/commit/85d51945a2d42b04a3ff4e7d9717e5cebd28021f", "message": "Change queues heading text when player is not the party owner", "committedDate": "2020-10-05T13:20:02Z", "type": "commit"}, {"oid": "b8617d2d562b805fc4d0aa3a91efb05587e1d78d", "url": "https://github.com/FAForever/downlords-faf-client/commit/b8617d2d562b805fc4d0aa3a91efb05587e1d78d", "message": "Show invited players in invite dialog", "committedDate": "2020-10-05T13:20:02Z", "type": "commit"}, {"oid": "f32bb9a23af9727452912ff93926c10bfde75c77", "url": "https://github.com/FAForever/downlords-faf-client/commit/f32bb9a23af9727452912ff93926c10bfde75c77", "message": "Add scrollpane to matchmaker ui", "committedDate": "2020-10-05T20:50:57Z", "type": "commit"}, {"oid": "bfde76af4c7874e0438d09c133124769321792d1", "url": "https://github.com/FAForever/downlords-faf-client/commit/bfde76af4c7874e0438d09c133124769321792d1", "message": "fix disabled queue on startup", "committedDate": "2020-10-11T18:48:05Z", "type": "commit"}, {"oid": "120dfcb35c01812ff2d64eb5c159fce9183f40e5", "url": "https://github.com/FAForever/downlords-faf-client/commit/120dfcb35c01812ff2d64eb5c159fce9183f40e5", "message": "catch game cancel during launch when multiqueueing", "committedDate": "2020-10-11T19:40:25Z", "type": "commit"}, {"oid": "6a219424334ad7cd81480e4230f0a4abf1644932", "url": "https://github.com/FAForever/downlords-faf-client/commit/6a219424334ad7cd81480e4230f0a4abf1644932", "message": "fix already in queue when starting a custom game", "committedDate": "2020-10-11T20:23:41Z", "type": "commit"}, {"oid": "420fa805ec969632d186923559ce6a588b765124", "url": "https://github.com/FAForever/downlords-faf-client/commit/420fa805ec969632d186923559ce6a588b765124", "message": "uncheck queue button when launch failed due to being in game", "committedDate": "2020-10-11T20:35:54Z", "type": "commit"}, {"oid": "c17f47ef825d1948588b11e57b91a0e5091d2202", "url": "https://github.com/FAForever/downlords-faf-client/commit/c17f47ef825d1948588b11e57b91a0e5091d2202", "message": "Add leader highlight for own player", "committedDate": "2020-10-13T09:30:38Z", "type": "commit"}, {"oid": "d690ff8ba0f685e1c57d3ec8709ff6b82e4caf13", "url": "https://github.com/FAForever/downlords-faf-client/commit/d690ff8ba0f685e1c57d3ec8709ff6b82e4caf13", "message": "Move splitPane divider to 0.7", "committedDate": "2020-10-13T09:30:38Z", "type": "commit"}, {"oid": "60226c6db603c66a365feeb068406c4dabf7e490", "url": "https://github.com/FAForever/downlords-faf-client/commit/60226c6db603c66a365feeb068406c4dabf7e490", "message": "Add VCS config", "committedDate": "2020-10-13T09:49:30Z", "type": "commit"}, {"oid": "827ee919f6d889335bea269e0555500d0453cdb5", "url": "https://github.com/FAForever/downlords-faf-client/commit/827ee919f6d889335bea269e0555500d0453cdb5", "message": "Merge branch 'develop' into feature/team-matchmaking\n\n# Conflicts:\n#\tci/github-release.sh\n#\tsrc/main/java/com/faforever/client/game/GameService.java\n#\tsrc/main/java/com/faforever/client/play/PlayController.java\n#\tsrc/main/java/com/faforever/client/remote/domain/GameInfoMessage.java\n#\tsrc/main/resources/font/dfc-icons.ttf\n#\tsrc/main/resources/i18n/messages.properties\n#\tsrc/main/resources/theme/style.css\n#\tsrc/test/java/com/faforever/client/game/GameInfoMessageBuilder.java\n#\tsrc/test/java/com/faforever/client/rankedmatch/Ladder1V1ControllerTest.java", "committedDate": "2020-10-13T10:12:27Z", "type": "commit"}, {"oid": "d41a984f28535e817ddea4f133d1a8d4b64b81d6", "url": "https://github.com/FAForever/downlords-faf-client/commit/d41a984f28535e817ddea4f133d1a8d4b64b81d6", "message": "tmm merge fixes", "committedDate": "2020-10-13T10:49:06Z", "type": "commit"}, {"oid": "9a9bf624d74092ef1dfc732570d665186471a5d7", "url": "https://github.com/FAForever/downlords-faf-client/commit/9a9bf624d74092ef1dfc732570d665186471a5d7", "message": "Adapt icons to new workflow", "committedDate": "2020-10-14T12:14:24Z", "type": "commit"}, {"oid": "3fb27ee02c112a1c64bc9e4ad7a4aa6787ce2210", "url": "https://github.com/FAForever/downlords-faf-client/commit/3fb27ee02c112a1c64bc9e4ad7a4aa6787ce2210", "message": "Load division icon instead of avatar", "committedDate": "2020-10-30T23:02:40Z", "type": "commit"}, {"oid": "a8426a794910522b840e06b09c0a6832e24e1fcb", "url": "https://github.com/FAForever/downlords-faf-client/commit/a8426a794910522b840e06b09c0a6832e24e1fcb", "message": "Add chat functionality WIP", "committedDate": "2020-10-31T17:47:54Z", "type": "commit"}, {"oid": "e126af2e8eff3c030fd9da3b164c1d48d5c3b9b5", "url": "https://github.com/FAForever/downlords-faf-client/commit/e126af2e8eff3c030fd9da3b164c1d48d5c3b9b5", "message": "Spawn new chat tabs only when necessary", "committedDate": "2020-10-31T19:58:00Z", "type": "commit"}, {"oid": "52529ec5b71cbf68d48c39a393502542ba739964", "url": "https://github.com/FAForever/downlords-faf-client/commit/52529ec5b71cbf68d48c39a393502542ba739964", "message": "Add chat functionality", "committedDate": "2020-11-01T11:42:17Z", "type": "commit"}, {"oid": "477a29086c477db8e22c6327b0647037baaa50db", "url": "https://github.com/FAForever/downlords-faf-client/commit/477a29086c477db8e22c6327b0647037baaa50db", "message": "Make code cleaner by removing checks for uppercase style class", "committedDate": "2020-11-05T16:23:57Z", "type": "commit"}, {"oid": "f1d7838d2ef6ee9c08b2b9dd32b21631f081d4b4", "url": "https://github.com/FAForever/downlords-faf-client/commit/f1d7838d2ef6ee9c08b2b9dd32b21631f081d4b4", "message": "Fix bug in PartyMemberItemController", "committedDate": "2020-11-11T17:30:18Z", "type": "commit"}, {"oid": "7ff32a6b73497839be0c1ebea2884a90ed2d98d6", "url": "https://github.com/FAForever/downlords-faf-client/commit/7ff32a6b73497839be0c1ebea2884a90ed2d98d6", "message": "Code cleanup (mostly deleting of redundant code)", "committedDate": "2020-11-15T13:25:03Z", "type": "commit"}, {"oid": "82825c944858f5cd0bc7c59f41c26538f1738157", "url": "https://github.com/FAForever/downlords-faf-client/commit/82825c944858f5cd0bc7c59f41c26538f1738157", "message": "Remove ladder tab", "committedDate": "2020-11-15T13:25:03Z", "type": "commit"}, {"oid": "ec177f1c0ff0c9f540d4e8f9d7244b2b19214144", "url": "https://github.com/FAForever/downlords-faf-client/commit/ec177f1c0ff0c9f540d4e8f9d7244b2b19214144", "message": "Remove logic for ladder searches", "committedDate": "2020-11-15T13:25:03Z", "type": "commit"}, {"oid": "7b164c69f193943e26f575f4afa5759fd61a1df9", "url": "https://github.com/FAForever/downlords-faf-client/commit/7b164c69f193943e26f575f4afa5759fd61a1df9", "message": "Remove notification for match available", "committedDate": "2020-11-15T13:25:03Z", "type": "commit"}, {"oid": "5ce4670c2686e69536fdfffe6390ad3756e0cfcd", "url": "https://github.com/FAForever/downlords-faf-client/commit/5ce4670c2686e69536fdfffe6390ad3756e0cfcd", "message": "Disable chat tab highlight on party message", "committedDate": "2020-11-15T17:05:22Z", "type": "commit"}, {"oid": "4b617b812cfad2c4314622bbc5bddb2d6271a3cb", "url": "https://github.com/FAForever/downlords-faf-client/commit/4b617b812cfad2c4314622bbc5bddb2d6271a3cb", "message": "Merge branch 'develop' into feature/team-matchmaking\n\n# Conflicts:\n#\tsrc/main/java/com/faforever/client/game/GameService.java\n#\tsrc/main/java/com/faforever/client/rankedmatch/Ladder1v1Controller.java\n#\tsrc/main/resources/theme/settings/settings.fxml\n#\tsrc/test/java/com/faforever/client/game/GameServiceTest.java", "committedDate": "2020-11-15T18:02:21Z", "type": "commit"}, {"oid": "9e68bf9dd00d48958735c8baf31b24be7ff2be03", "url": "https://github.com/FAForever/downlords-faf-client/commit/9e68bf9dd00d48958735c8baf31b24be7ff2be03", "message": "Make chat position dynamic", "committedDate": "2020-11-17T18:17:32Z", "type": "commit"}, {"oid": "acbf51b7ee29a25f2eef7a3021af72f18c164b8c", "url": "https://github.com/FAForever/downlords-faf-client/commit/acbf51b7ee29a25f2eef7a3021af72f18c164b8c", "message": "Show team matchmaker map pools (#2032)", "committedDate": "2020-11-19T10:58:22Z", "type": "commit"}, {"oid": "3a13fadd4378d28dab39c092adc37f64218fb4a2", "url": "https://github.com/FAForever/downlords-faf-client/commit/3a13fadd4378d28dab39c092adc37f64218fb4a2", "message": "UI adjustments", "committedDate": "2020-11-20T22:32:18Z", "type": "commit"}, {"oid": "eba597c886bcbcf6c70a2b5d054d36994001dda6", "url": "https://github.com/FAForever/downlords-faf-client/commit/eba597c886bcbcf6c70a2b5d054d36994001dda6", "message": "Fix failing tests", "committedDate": "2020-11-21T15:51:25Z", "type": "commit"}, {"oid": "d7c9e8a13c93492013a9646539c7248c75ffb883", "url": "https://github.com/FAForever/downlords-faf-client/commit/d7c9e8a13c93492013a9646539c7248c75ffb883", "message": "Only highlight tab on new messages", "committedDate": "2020-11-23T16:54:11Z", "type": "commit"}, {"oid": "df717712e60a6e9d3d6d8b939141acd7df664a94", "url": "https://github.com/FAForever/downlords-faf-client/commit/df717712e60a6e9d3d6d8b939141acd7df664a94", "message": "Fix error in log on queue deselect", "committedDate": "2020-11-23T16:54:43Z", "type": "commit"}, {"oid": "f363aab283a057be1bc69b5d9cb67374ff06f4e6", "url": "https://github.com/FAForever/downlords-faf-client/commit/f363aab283a057be1bc69b5d9cb67374ff06f4e6", "message": "Add indication when partyMember is in a game", "committedDate": "2020-12-04T12:26:20Z", "type": "commit"}, {"oid": "aa67c37c1bd548879850f6abda2ebdda964adb27", "url": "https://github.com/FAForever/downlords-faf-client/commit/aa67c37c1bd548879850f6abda2ebdda964adb27", "message": "Add tests for TeamMatchmakingService", "committedDate": "2020-12-04T12:48:48Z", "type": "commit"}, {"oid": "337361dcca0b4598577e8db9761cf76d3eb7c6af", "url": "https://github.com/FAForever/downlords-faf-client/commit/337361dcca0b4598577e8db9761cf76d3eb7c6af", "message": "Merge branch 'develop' into feature/team-matchmaking\n\n# Conflicts:\n#\tsrc/main/java/com/faforever/client/api/FafApiAccessorImpl.java\n#\tsrc/main/java/com/faforever/client/main/MainController.java\n#\tsrc/main/resources/theme/play/ranked_1v1.fxml", "committedDate": "2020-12-04T13:28:22Z", "type": "commit"}]}