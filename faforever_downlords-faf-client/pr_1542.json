{"pr_number": 1542, "pr_title": "Properly handle futures when the local replay directory has changed", "pr_author": "andreasley", "pr_createdAt": "2020-01-01T20:19:32Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/1542", "merge_commit": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk1Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362349953", "body": "thenRun", "bodyText": "thenRun", "bodyHTML": "<p dir=\"auto\">thenRun</p>", "author": "1-alex98", "createdAt": "2020-01-01T23:41:57Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -201,8 +200,21 @@ private void onLocalReplaysWatchEvent(WatchKey key) {\n       }\n     }\n \n-    localReplays.addAll(newReplays);\n-    publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n+    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n+    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n+        .thenApply(ignoredVoid ->", "originalCommit": "2fdd64866bdb1c9f2637b02627f884f3b22c1dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ2MjgyOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362462828", "bodyText": "Why?", "author": "andreasley", "createdAt": "2020-01-02T12:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3OTUxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362579510", "bodyText": "Sorry i am wrong... but there is a method that takes a lambda without the parameter ignoredVoid. Use this method instead not totally sure whats it called thenCombine maybe", "author": "1-alex98", "createdAt": "2020-01-02T18:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU5NjM5NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362596395", "bodyText": "ok whatever ignore me", "author": "1-alex98", "createdAt": "2020-01-02T19:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cae1a594d941600e0d8ca6b18a17a0b722500b5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 800b5fdf..cfc76764 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +203,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex cfc76764..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -203,8 +204,7 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n+                .map(future -> future.join())\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 800b5fdf..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 5a6e9b90..74339fb2 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -207,7 +216,7 @@ public class ReplayService {\n                 .map(CompletableFuture::join)\n                 .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n-    );\n+        );\n \n     try {\n       List<Replay> newReplays = newReplaysFuture.get();\n", "next_change": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 74339fb2..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -135,97 +125,8 @@ public class ReplayService {\n   private final FafService fafService;\n   private final ModService modService;\n   private final MapService mapService;\n-  private final ApplicationEventPublisher publisher;\n-  private final MapGeneratorService mapGeneratorService;\n-  private final ExecutorService executorService;\n-  private Thread directoryWatcherThread;\n-  private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n-\n-  public void startLoadingAndWatchingLocalReplays() {\n-    Path replaysDirectory = preferencesService.getReplaysDirectory();\n-    if (Files.notExists(replaysDirectory)) {\n-      noCatch(() -> createDirectories(replaysDirectory));\n-    }\n-\n-    LoadLocalReplaysTask loadLocalReplaysTask = applicationContext.getBean(LoadLocalReplaysTask.class);\n-    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept(replays -> {\n-      localReplays.clear();\n-      localReplays.addAll(replays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<Replay>()));\n-    });\n-\n-    try {\n-      Optional.ofNullable(directoryWatcherThread).ifPresent(Thread::interrupt);\n-      directoryWatcherThread = startDirectoryWatcher(replaysDirectory);\n-    } catch (IOException e) {\n-      logger.warn(\"Failed to start watching the local replays directory\");\n-    }\n-  }\n-\n-  public Collection<Replay> getLocalReplays() {\n-    return localReplays;\n-  }\n-\n-  protected Thread startDirectoryWatcher(Path replaysDirectory) throws IOException {\n-    Thread thread = new Thread(() -> noCatch(() -> {\n-      try (WatchService watcher = replaysDirectory.getFileSystem().newWatchService()) {\n-        replaysDirectory.register(watcher, ENTRY_CREATE, ENTRY_MODIFY, ENTRY_DELETE);\n-        while (!Thread.interrupted()) {\n-          WatchKey key = watcher.take();\n-          onLocalReplaysWatchEvent(key);\n-          key.reset();\n-        }\n-      } catch (InterruptedException e) {\n-        logger.debug(\"Local replay directory watcher terminated ({})\", e.getMessage());\n-      }\n-    }));\n-    thread.setDaemon(true);\n-    thread.start();\n-    return thread;\n-  }\n-\n-  @VisibleForTesting\n-  protected void onLocalReplaysWatchEvent(WatchKey key) {\n-    List<CompletableFuture<Replay>> newReplaysFutures = new ArrayList<CompletableFuture<Replay>>();\n-    Collection<Replay> deletedReplays = new ArrayList<Replay>();\n-    for (WatchEvent<?> watchEvent : key.pollEvents()) {\n-      Path path = (Path) watchEvent.context();\n-      Path fullPathToReplay = preferencesService.getReplaysDirectory().resolve(path);\n-\n-      if (watchEvent.kind() == ENTRY_CREATE) {\n-        newReplaysFutures.add(tryLoadingLocalReplay(fullPathToReplay));\n-      } else if (watchEvent.kind() == ENTRY_DELETE) {\n-        Optional<Replay> existingReplay = localReplays\n-            .stream()\n-            .filter(replay -> replay.getReplayFile().compareTo(fullPathToReplay) == 0)\n-            .findFirst();\n-\n-        if (existingReplay.isPresent()) {\n-          Replay deletedReplay = existingReplay.get();\n-          deletedReplays.add(deletedReplay);\n-          localReplays.remove(deletedReplay);\n-        }\n-      }\n-    }\n-\n-    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n-    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n-        .thenApply(ignoredVoid ->\n-            newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList())\n-        );\n-\n-    try {\n-      List<Replay> newReplays = newReplaysFuture.get();\n-      localReplays.addAll(newReplays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n-    } catch (Exception e) {\n-      logger.warn(\"Failed to load new local replays ({})\", e.getMessage());\n-    }\n-  }\n+  private final EventBus eventBus;\n+  protected List<Replay> localReplays = new ArrayList<>();\n \n   @VisibleForTesting\n   static Integer parseSupComVersion(byte[] rawReplayBytes) {\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -129,15 +124,15 @@ public class ReplayService {\n   protected List<Replay> localReplays = new ArrayList<>();\n \n   @VisibleForTesting\n-  static Integer parseSupComVersion(byte[] rawReplayBytes) {\n-    int versionDelimiterIndex = Bytes.indexOf(rawReplayBytes, (byte) 0x00);\n-    return Integer.parseInt(new String(rawReplayBytes, VERSION_OFFSET, versionDelimiterIndex - VERSION_OFFSET, US_ASCII));\n+  static Integer parseSupComVersion(ReplayDataParser parser) {\n+    String[] versionParts = parser.getReplayPatchFieldId().split(\"\\\\.\");\n+    return Integer.parseInt(versionParts[versionParts.length - 1]);\n   }\n \n   @VisibleForTesting\n-  static String parseMapName(byte[] rawReplayBytes) {\n-    int mapDelimiterIndex = Bytes.indexOf(rawReplayBytes, new byte[]{0x00, 0x0D, 0x0A, 0x1A});\n-    String mapPath = new String(rawReplayBytes, MAP_NAME_OFFSET, mapDelimiterIndex - MAP_NAME_OFFSET, US_ASCII);\n+  static String parseMapFolderName(ReplayDataParser parser) {\n+    String mapPath = parser.getMap();\n+    //mapPath looks like /maps/my_awesome_map.v008/my_awesome_map.lua\n     Matcher matcher = invalidCharacters.matcher(mapPath);\n     if (matcher.find()) {\n       throw new IllegalArgumentException(\"Map Name Contains Invalid Characters\");\n", "next_change": {"commit": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..5b8ade36 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -131,7 +113,15 @@ public class ReplayService {\n \n   @VisibleForTesting\n   static String parseMapFolderName(ReplayDataParser parser) {\n-    String mapPath = parser.getMap();\n+    // Prefer the scenario file path as that contains all the information to actually launch the map. The map in the\n+    // parser is just the scmap which may have a different folder and will not contain all the info to launch the map\n+    // or even may not be a map in the vault like in the case of any coop map.\n+    String mapPath = parser.getGameOptions()\n+        .stream()\n+        .filter(gameOption -> \"ScenarioFile\".equals(gameOption.getKey()))\n+        .findFirst()\n+        .map(gameOption -> (String) gameOption.getValue())\n+        .orElse(parser.getMap());\n     //mapPath looks like /maps/my_awesome_map.v008/my_awesome_map.lua\n     Matcher matcher = invalidCharacters.matcher(mapPath);\n     if (matcher.find()) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362349971", "body": "CompletableFuture\r\n        .allOf", "bodyText": "CompletableFuture\n.allOf", "bodyHTML": "<p dir=\"auto\">CompletableFuture<br>\n.allOf</p>", "author": "1-alex98", "createdAt": "2020-01-01T23:42:49Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -201,8 +200,21 @@ private void onLocalReplaysWatchEvent(WatchKey key) {\n       }\n     }\n \n-    localReplays.addAll(newReplays);\n-    publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n+    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n+    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n+        .thenApply(ignoredVoid ->\n+            newReplaysFutures.stream()\n+                .map(future -> future.join())", "originalCommit": "2fdd64866bdb1c9f2637b02627f884f3b22c1dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ2MjgzNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362462836", "bodyText": "What?", "author": "andreasley", "createdAt": "2020-01-02T12:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3ODkwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362578908", "bodyText": "To join CompletedFutures use CompletableFuture.allOf()", "author": "1-alex98", "createdAt": "2020-01-02T18:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYzMzE2Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362633167", "bodyText": "Which is exactly what I'm doing. Hence my confusion. :)", "author": "andreasley", "createdAt": "2020-01-02T21:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY1Njg0MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362656840", "bodyText": "Should read the code closer sorry lemme check again", "author": "1-alex98", "createdAt": "2020-01-02T22:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cae1a594d941600e0d8ca6b18a17a0b722500b5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 800b5fdf..cfc76764 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +203,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex cfc76764..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -203,8 +204,7 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n+                .map(future -> future.join())\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 800b5fdf..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 5a6e9b90..74339fb2 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -207,7 +216,7 @@ public class ReplayService {\n                 .map(CompletableFuture::join)\n                 .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n-    );\n+        );\n \n     try {\n       List<Replay> newReplays = newReplaysFuture.get();\n", "next_change": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 74339fb2..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -135,97 +125,8 @@ public class ReplayService {\n   private final FafService fafService;\n   private final ModService modService;\n   private final MapService mapService;\n-  private final ApplicationEventPublisher publisher;\n-  private final MapGeneratorService mapGeneratorService;\n-  private final ExecutorService executorService;\n-  private Thread directoryWatcherThread;\n-  private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n-\n-  public void startLoadingAndWatchingLocalReplays() {\n-    Path replaysDirectory = preferencesService.getReplaysDirectory();\n-    if (Files.notExists(replaysDirectory)) {\n-      noCatch(() -> createDirectories(replaysDirectory));\n-    }\n-\n-    LoadLocalReplaysTask loadLocalReplaysTask = applicationContext.getBean(LoadLocalReplaysTask.class);\n-    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept(replays -> {\n-      localReplays.clear();\n-      localReplays.addAll(replays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<Replay>()));\n-    });\n-\n-    try {\n-      Optional.ofNullable(directoryWatcherThread).ifPresent(Thread::interrupt);\n-      directoryWatcherThread = startDirectoryWatcher(replaysDirectory);\n-    } catch (IOException e) {\n-      logger.warn(\"Failed to start watching the local replays directory\");\n-    }\n-  }\n-\n-  public Collection<Replay> getLocalReplays() {\n-    return localReplays;\n-  }\n-\n-  protected Thread startDirectoryWatcher(Path replaysDirectory) throws IOException {\n-    Thread thread = new Thread(() -> noCatch(() -> {\n-      try (WatchService watcher = replaysDirectory.getFileSystem().newWatchService()) {\n-        replaysDirectory.register(watcher, ENTRY_CREATE, ENTRY_MODIFY, ENTRY_DELETE);\n-        while (!Thread.interrupted()) {\n-          WatchKey key = watcher.take();\n-          onLocalReplaysWatchEvent(key);\n-          key.reset();\n-        }\n-      } catch (InterruptedException e) {\n-        logger.debug(\"Local replay directory watcher terminated ({})\", e.getMessage());\n-      }\n-    }));\n-    thread.setDaemon(true);\n-    thread.start();\n-    return thread;\n-  }\n-\n-  @VisibleForTesting\n-  protected void onLocalReplaysWatchEvent(WatchKey key) {\n-    List<CompletableFuture<Replay>> newReplaysFutures = new ArrayList<CompletableFuture<Replay>>();\n-    Collection<Replay> deletedReplays = new ArrayList<Replay>();\n-    for (WatchEvent<?> watchEvent : key.pollEvents()) {\n-      Path path = (Path) watchEvent.context();\n-      Path fullPathToReplay = preferencesService.getReplaysDirectory().resolve(path);\n-\n-      if (watchEvent.kind() == ENTRY_CREATE) {\n-        newReplaysFutures.add(tryLoadingLocalReplay(fullPathToReplay));\n-      } else if (watchEvent.kind() == ENTRY_DELETE) {\n-        Optional<Replay> existingReplay = localReplays\n-            .stream()\n-            .filter(replay -> replay.getReplayFile().compareTo(fullPathToReplay) == 0)\n-            .findFirst();\n-\n-        if (existingReplay.isPresent()) {\n-          Replay deletedReplay = existingReplay.get();\n-          deletedReplays.add(deletedReplay);\n-          localReplays.remove(deletedReplay);\n-        }\n-      }\n-    }\n-\n-    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n-    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n-        .thenApply(ignoredVoid ->\n-            newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList())\n-        );\n-\n-    try {\n-      List<Replay> newReplays = newReplaysFuture.get();\n-      localReplays.addAll(newReplays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n-    } catch (Exception e) {\n-      logger.warn(\"Failed to load new local replays ({})\", e.getMessage());\n-    }\n-  }\n+  private final EventBus eventBus;\n+  protected List<Replay> localReplays = new ArrayList<>();\n \n   @VisibleForTesting\n   static Integer parseSupComVersion(byte[] rawReplayBytes) {\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -129,15 +124,15 @@ public class ReplayService {\n   protected List<Replay> localReplays = new ArrayList<>();\n \n   @VisibleForTesting\n-  static Integer parseSupComVersion(byte[] rawReplayBytes) {\n-    int versionDelimiterIndex = Bytes.indexOf(rawReplayBytes, (byte) 0x00);\n-    return Integer.parseInt(new String(rawReplayBytes, VERSION_OFFSET, versionDelimiterIndex - VERSION_OFFSET, US_ASCII));\n+  static Integer parseSupComVersion(ReplayDataParser parser) {\n+    String[] versionParts = parser.getReplayPatchFieldId().split(\"\\\\.\");\n+    return Integer.parseInt(versionParts[versionParts.length - 1]);\n   }\n \n   @VisibleForTesting\n-  static String parseMapName(byte[] rawReplayBytes) {\n-    int mapDelimiterIndex = Bytes.indexOf(rawReplayBytes, new byte[]{0x00, 0x0D, 0x0A, 0x1A});\n-    String mapPath = new String(rawReplayBytes, MAP_NAME_OFFSET, mapDelimiterIndex - MAP_NAME_OFFSET, US_ASCII);\n+  static String parseMapFolderName(ReplayDataParser parser) {\n+    String mapPath = parser.getMap();\n+    //mapPath looks like /maps/my_awesome_map.v008/my_awesome_map.lua\n     Matcher matcher = invalidCharacters.matcher(mapPath);\n     if (matcher.find()) {\n       throw new IllegalArgumentException(\"Map Name Contains Invalid Characters\");\n", "next_change": {"commit": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..5b8ade36 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -131,7 +113,15 @@ public class ReplayService {\n \n   @VisibleForTesting\n   static String parseMapFolderName(ReplayDataParser parser) {\n-    String mapPath = parser.getMap();\n+    // Prefer the scenario file path as that contains all the information to actually launch the map. The map in the\n+    // parser is just the scmap which may have a different folder and will not contain all the info to launch the map\n+    // or even may not be a map in the vault like in the case of any coop map.\n+    String mapPath = parser.getGameOptions()\n+        .stream()\n+        .filter(gameOption -> \"ScenarioFile\".equals(gameOption.getKey()))\n+        .findFirst()\n+        .map(gameOption -> (String) gameOption.getValue())\n+        .orElse(parser.getMap());\n     //mapPath looks like /maps/my_awesome_map.v008/my_awesome_map.lua\n     Matcher matcher = invalidCharacters.matcher(mapPath);\n     if (matcher.find()) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MDU5NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363060595", "body": "use method reference\r\n```suggestion\r\n                CompletableFuture::join\r\n```", "bodyText": "use method reference\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .map(future -> future.join())\n          \n          \n            \n                            CompletableFuture::join", "bodyHTML": "<p dir=\"auto\">use method reference</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"x x-first\">.map(future </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> future</span><span class=\"pl-k x x-last\">.</span>join<span class=\"x x-first x-last\">())</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi x x-first\">CompletableFuture</span><span class=\"pl-k x x-last\">::</span>join</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "1-alex98", "createdAt": "2020-01-04T23:36:15Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -201,8 +201,21 @@ private void onLocalReplaysWatchEvent(WatchKey key) {\n       }\n     }\n \n-    localReplays.addAll(newReplays);\n-    publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n+    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n+    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n+        .thenApply(ignoredVoid ->\n+            newReplaysFutures.stream()\n+                .map(future -> future.join())", "originalCommit": "9bd706aa5a0d7f2c207ece86b6f8ad02033570ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cae1a594d941600e0d8ca6b18a17a0b722500b5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex b06001c4..cfc76764 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -205,7 +203,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex cfc76764..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -203,8 +204,7 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n+                .map(future -> future.join())\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex b06001c4..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -205,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 5a6e9b90..74339fb2 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -207,7 +216,7 @@ public class ReplayService {\n                 .map(CompletableFuture::join)\n                 .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n-    );\n+        );\n \n     try {\n       List<Replay> newReplays = newReplaysFuture.get();\n", "next_change": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 74339fb2..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -135,97 +125,8 @@ public class ReplayService {\n   private final FafService fafService;\n   private final ModService modService;\n   private final MapService mapService;\n-  private final ApplicationEventPublisher publisher;\n-  private final MapGeneratorService mapGeneratorService;\n-  private final ExecutorService executorService;\n-  private Thread directoryWatcherThread;\n-  private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n-\n-  public void startLoadingAndWatchingLocalReplays() {\n-    Path replaysDirectory = preferencesService.getReplaysDirectory();\n-    if (Files.notExists(replaysDirectory)) {\n-      noCatch(() -> createDirectories(replaysDirectory));\n-    }\n-\n-    LoadLocalReplaysTask loadLocalReplaysTask = applicationContext.getBean(LoadLocalReplaysTask.class);\n-    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept(replays -> {\n-      localReplays.clear();\n-      localReplays.addAll(replays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<Replay>()));\n-    });\n-\n-    try {\n-      Optional.ofNullable(directoryWatcherThread).ifPresent(Thread::interrupt);\n-      directoryWatcherThread = startDirectoryWatcher(replaysDirectory);\n-    } catch (IOException e) {\n-      logger.warn(\"Failed to start watching the local replays directory\");\n-    }\n-  }\n-\n-  public Collection<Replay> getLocalReplays() {\n-    return localReplays;\n-  }\n-\n-  protected Thread startDirectoryWatcher(Path replaysDirectory) throws IOException {\n-    Thread thread = new Thread(() -> noCatch(() -> {\n-      try (WatchService watcher = replaysDirectory.getFileSystem().newWatchService()) {\n-        replaysDirectory.register(watcher, ENTRY_CREATE, ENTRY_MODIFY, ENTRY_DELETE);\n-        while (!Thread.interrupted()) {\n-          WatchKey key = watcher.take();\n-          onLocalReplaysWatchEvent(key);\n-          key.reset();\n-        }\n-      } catch (InterruptedException e) {\n-        logger.debug(\"Local replay directory watcher terminated ({})\", e.getMessage());\n-      }\n-    }));\n-    thread.setDaemon(true);\n-    thread.start();\n-    return thread;\n-  }\n-\n-  @VisibleForTesting\n-  protected void onLocalReplaysWatchEvent(WatchKey key) {\n-    List<CompletableFuture<Replay>> newReplaysFutures = new ArrayList<CompletableFuture<Replay>>();\n-    Collection<Replay> deletedReplays = new ArrayList<Replay>();\n-    for (WatchEvent<?> watchEvent : key.pollEvents()) {\n-      Path path = (Path) watchEvent.context();\n-      Path fullPathToReplay = preferencesService.getReplaysDirectory().resolve(path);\n-\n-      if (watchEvent.kind() == ENTRY_CREATE) {\n-        newReplaysFutures.add(tryLoadingLocalReplay(fullPathToReplay));\n-      } else if (watchEvent.kind() == ENTRY_DELETE) {\n-        Optional<Replay> existingReplay = localReplays\n-            .stream()\n-            .filter(replay -> replay.getReplayFile().compareTo(fullPathToReplay) == 0)\n-            .findFirst();\n-\n-        if (existingReplay.isPresent()) {\n-          Replay deletedReplay = existingReplay.get();\n-          deletedReplays.add(deletedReplay);\n-          localReplays.remove(deletedReplay);\n-        }\n-      }\n-    }\n-\n-    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n-    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n-        .thenApply(ignoredVoid ->\n-            newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList())\n-        );\n-\n-    try {\n-      List<Replay> newReplays = newReplaysFuture.get();\n-      localReplays.addAll(newReplays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n-    } catch (Exception e) {\n-      logger.warn(\"Failed to load new local replays ({})\", e.getMessage());\n-    }\n-  }\n+  private final EventBus eventBus;\n+  protected List<Replay> localReplays = new ArrayList<>();\n \n   @VisibleForTesting\n   static Integer parseSupComVersion(byte[] rawReplayBytes) {\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -129,15 +124,15 @@ public class ReplayService {\n   protected List<Replay> localReplays = new ArrayList<>();\n \n   @VisibleForTesting\n-  static Integer parseSupComVersion(byte[] rawReplayBytes) {\n-    int versionDelimiterIndex = Bytes.indexOf(rawReplayBytes, (byte) 0x00);\n-    return Integer.parseInt(new String(rawReplayBytes, VERSION_OFFSET, versionDelimiterIndex - VERSION_OFFSET, US_ASCII));\n+  static Integer parseSupComVersion(ReplayDataParser parser) {\n+    String[] versionParts = parser.getReplayPatchFieldId().split(\"\\\\.\");\n+    return Integer.parseInt(versionParts[versionParts.length - 1]);\n   }\n \n   @VisibleForTesting\n-  static String parseMapName(byte[] rawReplayBytes) {\n-    int mapDelimiterIndex = Bytes.indexOf(rawReplayBytes, new byte[]{0x00, 0x0D, 0x0A, 0x1A});\n-    String mapPath = new String(rawReplayBytes, MAP_NAME_OFFSET, mapDelimiterIndex - MAP_NAME_OFFSET, US_ASCII);\n+  static String parseMapFolderName(ReplayDataParser parser) {\n+    String mapPath = parser.getMap();\n+    //mapPath looks like /maps/my_awesome_map.v008/my_awesome_map.lua\n     Matcher matcher = invalidCharacters.matcher(mapPath);\n     if (matcher.find()) {\n       throw new IllegalArgumentException(\"Map Name Contains Invalid Characters\");\n", "next_change": {"commit": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..5b8ade36 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -131,7 +113,15 @@ public class ReplayService {\n \n   @VisibleForTesting\n   static String parseMapFolderName(ReplayDataParser parser) {\n-    String mapPath = parser.getMap();\n+    // Prefer the scenario file path as that contains all the information to actually launch the map. The map in the\n+    // parser is just the scmap which may have a different folder and will not contain all the info to launch the map\n+    // or even may not be a map in the vault like in the case of any coop map.\n+    String mapPath = parser.getGameOptions()\n+        .stream()\n+        .filter(gameOption -> \"ScenarioFile\".equals(gameOption.getKey()))\n+        .findFirst()\n+        .map(gameOption -> (String) gameOption.getValue())\n+        .orElse(parser.getMap());\n     //mapPath looks like /maps/my_awesome_map.v008/my_awesome_map.lua\n     Matcher matcher = invalidCharacters.matcher(mapPath);\n     if (matcher.find()) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjAzNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062036", "body": "Well we wanna avoid having null objects in list because it crashes UI", "bodyText": "Well we wanna avoid having null objects in list because it crashes UI", "bodyHTML": "<p dir=\"auto\">Well we wanna avoid having null objects in list because it crashes UI</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:21:26Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -205,7 +202,8 @@ protected void onLocalReplaysWatchEvent(WatchKey key) {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -202,8 +204,7 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n+                .map(future -> future.join())\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..74339fb2 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -205,7 +216,7 @@ public class ReplayService {\n                 .map(CompletableFuture::join)\n                 .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n-    );\n+        );\n \n     try {\n       List<Replay> newReplays = newReplaysFuture.get();\n", "next_change": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 74339fb2..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -135,97 +125,8 @@ public class ReplayService {\n   private final FafService fafService;\n   private final ModService modService;\n   private final MapService mapService;\n-  private final ApplicationEventPublisher publisher;\n-  private final MapGeneratorService mapGeneratorService;\n-  private final ExecutorService executorService;\n-  private Thread directoryWatcherThread;\n-  private WatchService watchService;\n-  protected List<Replay> localReplays = new ArrayList<Replay>();\n-\n-  public void startLoadingAndWatchingLocalReplays() {\n-    Path replaysDirectory = preferencesService.getReplaysDirectory();\n-    if (Files.notExists(replaysDirectory)) {\n-      noCatch(() -> createDirectories(replaysDirectory));\n-    }\n-\n-    LoadLocalReplaysTask loadLocalReplaysTask = applicationContext.getBean(LoadLocalReplaysTask.class);\n-    taskService.submitTask(loadLocalReplaysTask).getFuture().thenAccept(replays -> {\n-      localReplays.clear();\n-      localReplays.addAll(replays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, replays, new ArrayList<Replay>()));\n-    });\n-\n-    try {\n-      Optional.ofNullable(directoryWatcherThread).ifPresent(Thread::interrupt);\n-      directoryWatcherThread = startDirectoryWatcher(replaysDirectory);\n-    } catch (IOException e) {\n-      logger.warn(\"Failed to start watching the local replays directory\");\n-    }\n-  }\n-\n-  public Collection<Replay> getLocalReplays() {\n-    return localReplays;\n-  }\n-\n-  protected Thread startDirectoryWatcher(Path replaysDirectory) throws IOException {\n-    Thread thread = new Thread(() -> noCatch(() -> {\n-      try (WatchService watcher = replaysDirectory.getFileSystem().newWatchService()) {\n-        replaysDirectory.register(watcher, ENTRY_CREATE, ENTRY_MODIFY, ENTRY_DELETE);\n-        while (!Thread.interrupted()) {\n-          WatchKey key = watcher.take();\n-          onLocalReplaysWatchEvent(key);\n-          key.reset();\n-        }\n-      } catch (InterruptedException e) {\n-        logger.debug(\"Local replay directory watcher terminated ({})\", e.getMessage());\n-      }\n-    }));\n-    thread.setDaemon(true);\n-    thread.start();\n-    return thread;\n-  }\n-\n-  @VisibleForTesting\n-  protected void onLocalReplaysWatchEvent(WatchKey key) {\n-    List<CompletableFuture<Replay>> newReplaysFutures = new ArrayList<CompletableFuture<Replay>>();\n-    Collection<Replay> deletedReplays = new ArrayList<Replay>();\n-    for (WatchEvent<?> watchEvent : key.pollEvents()) {\n-      Path path = (Path) watchEvent.context();\n-      Path fullPathToReplay = preferencesService.getReplaysDirectory().resolve(path);\n-\n-      if (watchEvent.kind() == ENTRY_CREATE) {\n-        newReplaysFutures.add(tryLoadingLocalReplay(fullPathToReplay));\n-      } else if (watchEvent.kind() == ENTRY_DELETE) {\n-        Optional<Replay> existingReplay = localReplays\n-            .stream()\n-            .filter(replay -> replay.getReplayFile().compareTo(fullPathToReplay) == 0)\n-            .findFirst();\n-\n-        if (existingReplay.isPresent()) {\n-          Replay deletedReplay = existingReplay.get();\n-          deletedReplays.add(deletedReplay);\n-          localReplays.remove(deletedReplay);\n-        }\n-      }\n-    }\n-\n-    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n-    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n-        .thenApply(ignoredVoid ->\n-            newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList())\n-        );\n-\n-    try {\n-      List<Replay> newReplays = newReplaysFuture.get();\n-      localReplays.addAll(newReplays);\n-      publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n-    } catch (Exception e) {\n-      logger.warn(\"Failed to load new local replays ({})\", e.getMessage());\n-    }\n-  }\n+  private final EventBus eventBus;\n+  protected List<Replay> localReplays = new ArrayList<>();\n \n   @VisibleForTesting\n   static Integer parseSupComVersion(byte[] rawReplayBytes) {\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -129,15 +124,15 @@ public class ReplayService {\n   protected List<Replay> localReplays = new ArrayList<>();\n \n   @VisibleForTesting\n-  static Integer parseSupComVersion(byte[] rawReplayBytes) {\n-    int versionDelimiterIndex = Bytes.indexOf(rawReplayBytes, (byte) 0x00);\n-    return Integer.parseInt(new String(rawReplayBytes, VERSION_OFFSET, versionDelimiterIndex - VERSION_OFFSET, US_ASCII));\n+  static Integer parseSupComVersion(ReplayDataParser parser) {\n+    String[] versionParts = parser.getReplayPatchFieldId().split(\"\\\\.\");\n+    return Integer.parseInt(versionParts[versionParts.length - 1]);\n   }\n \n   @VisibleForTesting\n-  static String parseMapName(byte[] rawReplayBytes) {\n-    int mapDelimiterIndex = Bytes.indexOf(rawReplayBytes, new byte[]{0x00, 0x0D, 0x0A, 0x1A});\n-    String mapPath = new String(rawReplayBytes, MAP_NAME_OFFSET, mapDelimiterIndex - MAP_NAME_OFFSET, US_ASCII);\n+  static String parseMapFolderName(ReplayDataParser parser) {\n+    String mapPath = parser.getMap();\n+    //mapPath looks like /maps/my_awesome_map.v008/my_awesome_map.lua\n     Matcher matcher = invalidCharacters.matcher(mapPath);\n     if (matcher.find()) {\n       throw new IllegalArgumentException(\"Map Name Contains Invalid Characters\");\n", "next_change": {"commit": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..5b8ade36 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -131,7 +113,15 @@ public class ReplayService {\n \n   @VisibleForTesting\n   static String parseMapFolderName(ReplayDataParser parser) {\n-    String mapPath = parser.getMap();\n+    // Prefer the scenario file path as that contains all the information to actually launch the map. The map in the\n+    // parser is just the scmap which may have a different folder and will not contain all the info to launch the map\n+    // or even may not be a map in the vault like in the case of any coop map.\n+    String mapPath = parser.getGameOptions()\n+        .stream()\n+        .filter(gameOption -> \"ScenarioFile\".equals(gameOption.getKey()))\n+        .findFirst()\n+        .map(gameOption -> (String) gameOption.getValue())\n+        .orElse(parser.getMap());\n     //mapPath looks like /maps/my_awesome_map.v008/my_awesome_map.lua\n     Matcher matcher = invalidCharacters.matcher(mapPath);\n     if (matcher.find()) {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjA0Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062046", "body": "Just a quick way of writting it", "bodyText": "Just a quick way of writting it", "bodyHTML": "<p dir=\"auto\">Just a quick way of writting it</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:21:42Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -275,21 +273,21 @@ static String guessModByFileName(String fileName) {\n       List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n           .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n           .limit(MAX_REPLAYS)\n-          .map( replayFile -> tryLoadingLocalReplay(replayFile))\n+          .map(this::tryLoadingLocalReplay)", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -273,7 +274,7 @@ public class ReplayService {\n       List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n           .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n           .limit(MAX_REPLAYS)\n-          .map(this::tryLoadingLocalReplay)\n+          .map( replayFile -> tryLoadingLocalReplay(replayFile))\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -274,7 +275,7 @@ public class ReplayService {\n       List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n           .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n           .limit(MAX_REPLAYS)\n-          .map( replayFile -> tryLoadingLocalReplay(replayFile))\n+          .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n", "next_change": null}, {"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -282,13 +283,13 @@ public class ReplayService {\n       return CompletableFuture.allOf(replayFuturesArray)\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n-                  .map(future -> future.join())\n+                  .map(CompletableFuture::join)\n+                  .filter(Objects::nonNull)\n                   .collect(Collectors.toList()));\n \n     }\n   }\n \n-  @Async\n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -268,36 +185,43 @@ public class ReplayService {\n       noCatch(() -> createDirectories(replaysDirectory));\n     }\n \n+    int skippedReplays = pageSize * (page - 1);\n \n     try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(replaysDirectory, replayFileGlob)) {\n-      List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n-          .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n-          .limit(MAX_REPLAYS)\n+      Stream<Path> filesStream = StreamSupport.stream(directoryStream.spliterator(), false)\n+          .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed());\n+\n+      List<Path> filesList = filesStream.collect(Collectors.toList());\n+      int numPages = filesList.size() / pageSize;\n+\n+      List<CompletableFuture<Replay>> replayFutures = filesList.stream()\n+          .skip(skippedReplays)\n+          .limit(pageSize)\n           .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n-      CompletableFuture[] replayFuturesArray = replayFutures.toArray(new CompletableFuture[replayFutures.size()]);\n-      return CompletableFuture.allOf(replayFuturesArray)\n+      return CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n                   .map(CompletableFuture::join)\n                   .filter(Objects::nonNull)\n-                  .collect(Collectors.toList()));\n-\n+                  .collect(Collectors.toList()))\n+          .thenApply(replays -> new Tuple<>(replays, numPages));\n     }\n   }\n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n+\n+  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n \n       CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n       CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n+      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (!mapBean.isPresent()) {\n+        if (mapBean.isEmpty()) {\n           logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n", "next_change": {"commit": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..619d7f91 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -222,12 +218,12 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n-      logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 619d7f91..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,17 +195,18 @@ public class ReplayService {\n \n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n-      LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n+      ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n+      ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n+      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..249d22bf 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -175,38 +187,39 @@ public class ReplayService {\n       List<Path> filesList = filesStream.collect(Collectors.toList());\n       int numPages = filesList.size() / pageSize;\n \n-      List<CompletableFuture<Replay>> replayFutures = filesList.stream()\n+      List<CompletableFuture<ReplayBean>> replayFutures = filesList.stream()\n           .skip(skippedReplays)\n           .limit(pageSize)\n           .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n-      return CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n+      return Mono.fromFuture(CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n                   .map(CompletableFuture::join)\n                   .filter(Objects::nonNull)\n                   .collect(Collectors.toList()))\n-          .thenApply(replays -> new Tuple<>(replays, numPages));\n+      ).zipWith(Mono.just(numPages)).toFuture();\n     }\n   }\n \n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n+  private CompletableFuture<ReplayBean> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n       ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n+      CompletableFuture<FeaturedModBean> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapVersionBean>> mapVersionFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n-        Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (mapBean.isEmpty()) {\n+      return CompletableFuture.allOf(featuredModFuture, mapVersionFuture).thenApply(ignoredVoid -> {\n+        MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n+        FeaturedModBean featuredMod = featuredModFuture.join();\n+        if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 249d22bf..4ea68826 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +219,7 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "be92585c797d9532b8290a66adfd5e00626b1194", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 4ea68826..f592df12 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +196,11 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n+        return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n+      }).exceptionally(throwable -> {\n+        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        moveCorruptedReplayFile(replayFile);\n+        return null;\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex f592df12..959bcdef 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -194,16 +194,16 @@ public class ReplayService {\n         MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n         FeaturedModBean featuredMod = featuredModFuture.join();\n         if (mapVersion == null) {\n-          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file `{}`\", replayFile);\n         }\n         return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n       }).exceptionally(throwable -> {\n-        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        log.warn(\"Could not read replay file `{}`\", replayFile, throwable);\n         moveCorruptedReplayFile(replayFile);\n         return null;\n       });\n     } catch (Exception e) {\n-      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file `{}`\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 959bcdef..bbbe76df 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,7 +218,7 @@ public class ReplayService {\n   }\n \n   private void moveCorruptedReplayFile(Path replayFile) {\n-    Path corruptedReplaysDirectory = preferencesService.getPreferences().getData().getCorruptedReplaysDirectory();\n+    Path corruptedReplaysDirectory = dataPrefs.getCorruptedReplaysDirectory();\n     try {\n       Files.createDirectories(corruptedReplaysDirectory);\n     } catch (IOException e) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjA0OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062049", "body": "again see top", "bodyText": "again see top", "bodyHTML": "<p dir=\"auto\">again see top</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:21:51Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -275,21 +273,21 @@ static String guessModByFileName(String fileName) {\n       List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n           .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n           .limit(MAX_REPLAYS)\n-          .map( replayFile -> tryLoadingLocalReplay(replayFile))\n+          .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n       CompletableFuture[] replayFuturesArray = replayFutures.toArray(new CompletableFuture[replayFutures.size()]);\n       return CompletableFuture.allOf(replayFuturesArray)\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n-                  .map(future -> future.join())\n+                  .map(CompletableFuture::join)\n+                  .filter(Objects::nonNull)", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -281,13 +282,13 @@ public class ReplayService {\n       return CompletableFuture.allOf(replayFuturesArray)\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n-                  .map(CompletableFuture::join)\n-                  .filter(Objects::nonNull)\n+                  .map(future -> future.join())\n                   .collect(Collectors.toList()));\n \n     }\n   }\n \n+  @Async\n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -282,13 +283,13 @@ public class ReplayService {\n       return CompletableFuture.allOf(replayFuturesArray)\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n-                  .map(future -> future.join())\n+                  .map(CompletableFuture::join)\n+                  .filter(Objects::nonNull)\n                   .collect(Collectors.toList()));\n \n     }\n   }\n \n-  @Async\n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -268,36 +185,43 @@ public class ReplayService {\n       noCatch(() -> createDirectories(replaysDirectory));\n     }\n \n+    int skippedReplays = pageSize * (page - 1);\n \n     try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(replaysDirectory, replayFileGlob)) {\n-      List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n-          .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n-          .limit(MAX_REPLAYS)\n+      Stream<Path> filesStream = StreamSupport.stream(directoryStream.spliterator(), false)\n+          .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed());\n+\n+      List<Path> filesList = filesStream.collect(Collectors.toList());\n+      int numPages = filesList.size() / pageSize;\n+\n+      List<CompletableFuture<Replay>> replayFutures = filesList.stream()\n+          .skip(skippedReplays)\n+          .limit(pageSize)\n           .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n-      CompletableFuture[] replayFuturesArray = replayFutures.toArray(new CompletableFuture[replayFutures.size()]);\n-      return CompletableFuture.allOf(replayFuturesArray)\n+      return CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n                   .map(CompletableFuture::join)\n                   .filter(Objects::nonNull)\n-                  .collect(Collectors.toList()));\n-\n+                  .collect(Collectors.toList()))\n+          .thenApply(replays -> new Tuple<>(replays, numPages));\n     }\n   }\n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n+\n+  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n \n       CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n       CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n+      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (!mapBean.isPresent()) {\n+        if (mapBean.isEmpty()) {\n           logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n", "next_change": {"commit": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..619d7f91 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -222,12 +218,12 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n-      logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 619d7f91..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,17 +195,18 @@ public class ReplayService {\n \n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n-      LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n+      ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n+      ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n+      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..249d22bf 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -175,38 +187,39 @@ public class ReplayService {\n       List<Path> filesList = filesStream.collect(Collectors.toList());\n       int numPages = filesList.size() / pageSize;\n \n-      List<CompletableFuture<Replay>> replayFutures = filesList.stream()\n+      List<CompletableFuture<ReplayBean>> replayFutures = filesList.stream()\n           .skip(skippedReplays)\n           .limit(pageSize)\n           .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n-      return CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n+      return Mono.fromFuture(CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n                   .map(CompletableFuture::join)\n                   .filter(Objects::nonNull)\n                   .collect(Collectors.toList()))\n-          .thenApply(replays -> new Tuple<>(replays, numPages));\n+      ).zipWith(Mono.just(numPages)).toFuture();\n     }\n   }\n \n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n+  private CompletableFuture<ReplayBean> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n       ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n+      CompletableFuture<FeaturedModBean> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapVersionBean>> mapVersionFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n-        Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (mapBean.isEmpty()) {\n+      return CompletableFuture.allOf(featuredModFuture, mapVersionFuture).thenApply(ignoredVoid -> {\n+        MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n+        FeaturedModBean featuredMod = featuredModFuture.join();\n+        if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 249d22bf..4ea68826 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +219,7 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "be92585c797d9532b8290a66adfd5e00626b1194", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 4ea68826..f592df12 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +196,11 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n+        return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n+      }).exceptionally(throwable -> {\n+        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        moveCorruptedReplayFile(replayFile);\n+        return null;\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex f592df12..959bcdef 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -194,16 +194,16 @@ public class ReplayService {\n         MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n         FeaturedModBean featuredMod = featuredModFuture.join();\n         if (mapVersion == null) {\n-          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file `{}`\", replayFile);\n         }\n         return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n       }).exceptionally(throwable -> {\n-        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        log.warn(\"Could not read replay file `{}`\", replayFile, throwable);\n         moveCorruptedReplayFile(replayFile);\n         return null;\n       });\n     } catch (Exception e) {\n-      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file `{}`\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 959bcdef..bbbe76df 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,7 +218,7 @@ public class ReplayService {\n   }\n \n   private void moveCorruptedReplayFile(Path replayFile) {\n-    Path corruptedReplaysDirectory = preferencesService.getPreferences().getData().getCorruptedReplaysDirectory();\n+    Path corruptedReplaysDirectory = dataPrefs.getCorruptedReplaysDirectory();\n     try {\n       Files.createDirectories(corruptedReplaysDirectory);\n     } catch (IOException e) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjA4Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062083", "body": "We certainly dont wanna throw here if we do then the whole loacl replay vault breaks, also there are legimit cases where a replay has no map. One is coop the maps are part of the game mod and hence are not found locally nor on the server", "bodyText": "We certainly dont wanna throw here if we do then the whole loacl replay vault breaks, also there are legimit cases where a replay has no map. One is coop the maps are part of the game mod and hence are not found locally nor on the server", "bodyHTML": "<p dir=\"auto\">We certainly dont wanna throw here if we do then the whole loacl replay vault breaks, also there are legimit cases where a replay has no map. One is coop the maps are part of the game mod and hence are not found locally nor on the server</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:23:00Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -300,14 +298,14 @@ static String guessModByFileName(String fileName) {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -298,14 +299,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          throw new CompletionException(new FileNotFoundException());\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.completedFuture(null);\n+      return CompletableFuture.failedFuture(e);\n     }\n   }\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -299,14 +300,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.failedFuture(e);\n+      return CompletableFuture.completedFuture(null);\n     }\n   }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..74339fb2 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -288,14 +307,14 @@ public class ReplayService {\n     }\n   }\n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n+  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n \n       CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n       CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n+      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n           logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n", "next_change": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 74339fb2..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -316,7 +221,7 @@ public class ReplayService {\n \n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (!mapBean.isPresent()) {\n+        if (mapBean.isEmpty()) {\n           logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n", "next_change": {"commit": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..619d7f91 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -222,12 +218,12 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n-      logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 619d7f91..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,17 +195,18 @@ public class ReplayService {\n \n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n-      LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n+      ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n+      ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n+      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..249d22bf 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -175,38 +187,39 @@ public class ReplayService {\n       List<Path> filesList = filesStream.collect(Collectors.toList());\n       int numPages = filesList.size() / pageSize;\n \n-      List<CompletableFuture<Replay>> replayFutures = filesList.stream()\n+      List<CompletableFuture<ReplayBean>> replayFutures = filesList.stream()\n           .skip(skippedReplays)\n           .limit(pageSize)\n           .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n-      return CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n+      return Mono.fromFuture(CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n                   .map(CompletableFuture::join)\n                   .filter(Objects::nonNull)\n                   .collect(Collectors.toList()))\n-          .thenApply(replays -> new Tuple<>(replays, numPages));\n+      ).zipWith(Mono.just(numPages)).toFuture();\n     }\n   }\n \n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n+  private CompletableFuture<ReplayBean> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n       ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n+      CompletableFuture<FeaturedModBean> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapVersionBean>> mapVersionFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n-        Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (mapBean.isEmpty()) {\n+      return CompletableFuture.allOf(featuredModFuture, mapVersionFuture).thenApply(ignoredVoid -> {\n+        MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n+        FeaturedModBean featuredMod = featuredModFuture.join();\n+        if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 249d22bf..4ea68826 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +219,7 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "be92585c797d9532b8290a66adfd5e00626b1194", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 4ea68826..f592df12 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +196,11 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n+        return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n+      }).exceptionally(throwable -> {\n+        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        moveCorruptedReplayFile(replayFile);\n+        return null;\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex f592df12..959bcdef 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -194,16 +194,16 @@ public class ReplayService {\n         MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n         FeaturedModBean featuredMod = featuredModFuture.join();\n         if (mapVersion == null) {\n-          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file `{}`\", replayFile);\n         }\n         return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n       }).exceptionally(throwable -> {\n-        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        log.warn(\"Could not read replay file `{}`\", replayFile, throwable);\n         moveCorruptedReplayFile(replayFile);\n         return null;\n       });\n     } catch (Exception e) {\n-      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file `{}`\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 959bcdef..bbbe76df 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,7 +218,7 @@ public class ReplayService {\n   }\n \n   private void moveCorruptedReplayFile(Path replayFile) {\n-    Path corruptedReplaysDirectory = preferencesService.getPreferences().getData().getCorruptedReplaysDirectory();\n+    Path corruptedReplaysDirectory = dataPrefs.getCorruptedReplaysDirectory();\n     try {\n       Files.createDirectories(corruptedReplaysDirectory);\n     } catch (IOException e) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjA5Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062097", "body": "Let's just say the map is null", "bodyText": "Let's just say the map is null", "bodyHTML": "<p dir=\"auto\">Let's just say the map is null</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:23:14Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -300,14 +298,14 @@ static String guessModByFileName(String fileName) {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -298,14 +299,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          throw new CompletionException(new FileNotFoundException());\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.completedFuture(null);\n+      return CompletableFuture.failedFuture(e);\n     }\n   }\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -299,14 +300,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.failedFuture(e);\n+      return CompletableFuture.completedFuture(null);\n     }\n   }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..74339fb2 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -288,14 +307,14 @@ public class ReplayService {\n     }\n   }\n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n+  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n \n       CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n       CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n+      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n           logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n", "next_change": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 74339fb2..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -316,7 +221,7 @@ public class ReplayService {\n \n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (!mapBean.isPresent()) {\n+        if (mapBean.isEmpty()) {\n           logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n", "next_change": {"commit": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..619d7f91 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -222,12 +218,12 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n-      logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 619d7f91..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,17 +195,18 @@ public class ReplayService {\n \n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n-      LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n+      ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n+      ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n+      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..249d22bf 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -175,38 +187,39 @@ public class ReplayService {\n       List<Path> filesList = filesStream.collect(Collectors.toList());\n       int numPages = filesList.size() / pageSize;\n \n-      List<CompletableFuture<Replay>> replayFutures = filesList.stream()\n+      List<CompletableFuture<ReplayBean>> replayFutures = filesList.stream()\n           .skip(skippedReplays)\n           .limit(pageSize)\n           .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n-      return CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n+      return Mono.fromFuture(CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n                   .map(CompletableFuture::join)\n                   .filter(Objects::nonNull)\n                   .collect(Collectors.toList()))\n-          .thenApply(replays -> new Tuple<>(replays, numPages));\n+      ).zipWith(Mono.just(numPages)).toFuture();\n     }\n   }\n \n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n+  private CompletableFuture<ReplayBean> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n       ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n+      CompletableFuture<FeaturedModBean> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapVersionBean>> mapVersionFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n-        Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (mapBean.isEmpty()) {\n+      return CompletableFuture.allOf(featuredModFuture, mapVersionFuture).thenApply(ignoredVoid -> {\n+        MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n+        FeaturedModBean featuredMod = featuredModFuture.join();\n+        if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 249d22bf..4ea68826 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +219,7 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "be92585c797d9532b8290a66adfd5e00626b1194", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 4ea68826..f592df12 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +196,11 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n+        return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n+      }).exceptionally(throwable -> {\n+        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        moveCorruptedReplayFile(replayFile);\n+        return null;\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex f592df12..959bcdef 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -194,16 +194,16 @@ public class ReplayService {\n         MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n         FeaturedModBean featuredMod = featuredModFuture.join();\n         if (mapVersion == null) {\n-          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file `{}`\", replayFile);\n         }\n         return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n       }).exceptionally(throwable -> {\n-        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        log.warn(\"Could not read replay file `{}`\", replayFile, throwable);\n         moveCorruptedReplayFile(replayFile);\n         return null;\n       });\n     } catch (Exception e) {\n-      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file `{}`\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 959bcdef..bbbe76df 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,7 +218,7 @@ public class ReplayService {\n   }\n \n   private void moveCorruptedReplayFile(Path replayFile) {\n-    Path corruptedReplaysDirectory = preferencesService.getPreferences().getData().getCorruptedReplaysDirectory();\n+    Path corruptedReplaysDirectory = dataPrefs.getCorruptedReplaysDirectory();\n     try {\n       Files.createDirectories(corruptedReplaysDirectory);\n     } catch (IOException e) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjExOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062118", "body": "Don't throw others wise replay vault stays empty, return null which is gonna be filtered out", "bodyText": "Don't throw others wise replay vault stays empty, return null which is gonna be filtered out", "bodyHTML": "<p dir=\"auto\">Don't throw others wise replay vault stays empty, return null which is gonna be filtered out</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:23:52Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -300,14 +298,14 @@ static String guessModByFileName(String fileName) {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.failedFuture(e);\n+      return CompletableFuture.completedFuture(null);", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..11d90abc 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -298,14 +299,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          throw new CompletionException(new FileNotFoundException());\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.completedFuture(null);\n+      return CompletableFuture.failedFuture(e);\n     }\n   }\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc..5a6e9b90 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -299,14 +300,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.failedFuture(e);\n+      return CompletableFuture.completedFuture(null);\n     }\n   }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c4..450db313 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -268,36 +185,43 @@ public class ReplayService {\n       noCatch(() -> createDirectories(replaysDirectory));\n     }\n \n+    int skippedReplays = pageSize * (page - 1);\n \n     try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(replaysDirectory, replayFileGlob)) {\n-      List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n-          .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n-          .limit(MAX_REPLAYS)\n+      Stream<Path> filesStream = StreamSupport.stream(directoryStream.spliterator(), false)\n+          .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed());\n+\n+      List<Path> filesList = filesStream.collect(Collectors.toList());\n+      int numPages = filesList.size() / pageSize;\n+\n+      List<CompletableFuture<Replay>> replayFutures = filesList.stream()\n+          .skip(skippedReplays)\n+          .limit(pageSize)\n           .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n-      CompletableFuture[] replayFuturesArray = replayFutures.toArray(new CompletableFuture[replayFutures.size()]);\n-      return CompletableFuture.allOf(replayFuturesArray)\n+      return CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n                   .map(CompletableFuture::join)\n                   .filter(Objects::nonNull)\n-                  .collect(Collectors.toList()));\n-\n+                  .collect(Collectors.toList()))\n+          .thenApply(replays -> new Tuple<>(replays, numPages));\n     }\n   }\n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n+\n+  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n \n       CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n       CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n+      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (!mapBean.isPresent()) {\n+        if (mapBean.isEmpty()) {\n           logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n", "next_change": {"commit": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 450db313..619d7f91 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -222,12 +218,12 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n         return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n-      logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 619d7f91..12d6286a 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,17 +195,18 @@ public class ReplayService {\n \n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n     try {\n-      LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n+      ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n+      ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayInfo.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayInfo.getMapname());\n+      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (mapBean.isEmpty()) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 12d6286a..249d22bf 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -175,38 +187,39 @@ public class ReplayService {\n       List<Path> filesList = filesStream.collect(Collectors.toList());\n       int numPages = filesList.size() / pageSize;\n \n-      List<CompletableFuture<Replay>> replayFutures = filesList.stream()\n+      List<CompletableFuture<ReplayBean>> replayFutures = filesList.stream()\n           .skip(skippedReplays)\n           .limit(pageSize)\n           .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n-      return CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n+      return Mono.fromFuture(CompletableFuture.allOf(replayFutures.toArray(new CompletableFuture[0]))\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n                   .map(CompletableFuture::join)\n                   .filter(Objects::nonNull)\n                   .collect(Collectors.toList()))\n-          .thenApply(replays -> new Tuple<>(replays, numPages));\n+      ).zipWith(Mono.just(numPages)).toFuture();\n     }\n   }\n \n \n-  private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile) {\n+  private CompletableFuture<ReplayBean> tryLoadingLocalReplay(Path replayFile) {\n     try {\n       ReplayDataParser replayData = replayFileReader.parseReplay(replayFile);\n       ReplayMetadata replayMetadata = replayData.getMetadata();\n \n-      CompletableFuture<FeaturedMod> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n-      CompletableFuture<Optional<MapBean>> mapBeanFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n+      CompletableFuture<FeaturedModBean> featuredModFuture = modService.getFeaturedMod(replayMetadata.getFeaturedMod());\n+      CompletableFuture<Optional<MapVersionBean>> mapVersionFuture = mapService.findByMapFolderName(replayMetadata.getMapname());\n \n-      return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid -> {\n-        Optional<MapBean> mapBean = mapBeanFuture.join();\n-        if (mapBean.isEmpty()) {\n+      return CompletableFuture.allOf(featuredModFuture, mapVersionFuture).thenApply(ignoredVoid -> {\n+        MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n+        FeaturedModBean featuredMod = featuredModFuture.join();\n+        if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayMetadata, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 249d22bf..4ea68826 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +219,7 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion, new CycleAvoidingMappingContext());\n+        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "be92585c797d9532b8290a66adfd5e00626b1194", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 4ea68826..f592df12 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -219,7 +196,11 @@ public class ReplayService {\n         if (mapVersion == null) {\n           log.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return replayMapper.map(replayMetadata, replayFile, featuredMod, mapVersion);\n+        return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n+      }).exceptionally(throwable -> {\n+        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        moveCorruptedReplayFile(replayFile);\n+        return null;\n       });\n     } catch (Exception e) {\n       log.warn(\"Could not read replay file '{}'\", replayFile, e);\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex f592df12..959bcdef 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -194,16 +194,16 @@ public class ReplayService {\n         MapVersionBean mapVersion = mapVersionFuture.join().orElse(null);\n         FeaturedModBean featuredMod = featuredModFuture.join();\n         if (mapVersion == null) {\n-          log.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          log.warn(\"Could not find map for replay file `{}`\", replayFile);\n         }\n         return replayMapper.map(replayData, replayFile, featuredMod, mapVersion);\n       }).exceptionally(throwable -> {\n-        log.warn(\"Could not read replay file '{}'\", replayFile, throwable);\n+        log.warn(\"Could not read replay file `{}`\", replayFile, throwable);\n         moveCorruptedReplayFile(replayFile);\n         return null;\n       });\n     } catch (Exception e) {\n-      log.warn(\"Could not read replay file '{}'\", replayFile, e);\n+      log.warn(\"Could not read replay file `{}`\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n       return CompletableFuture.completedFuture(null);\n     }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 959bcdef..bbbe76df 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -210,7 +218,7 @@ public class ReplayService {\n   }\n \n   private void moveCorruptedReplayFile(Path replayFile) {\n-    Path corruptedReplaysDirectory = preferencesService.getPreferences().getData().getCorruptedReplaysDirectory();\n+    Path corruptedReplaysDirectory = dataPrefs.getCorruptedReplaysDirectory();\n     try {\n       Files.createDirectories(corruptedReplaysDirectory);\n     } catch (IOException e) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "24a61cbf812cf6b987724a7e0f9339bb1c833191", "committedDate": "2020-03-10 16:18:07 +0100", "message": "Add own Replays (#1603)"}, {"oid": "ea3578ad1fcbbf6855228bb290a2a540f56e67b8", "committedDate": "2020-07-05 19:47:42 +0200", "message": "Fix \"None\" map name retrieved for generated maps (#1788)"}, {"oid": "b43e29bac920fdcc098d67ee0f6747aa8ade42e0", "committedDate": "2020-07-25 23:30:53 +0200", "message": "online replays pagination"}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "9b094faa8b4a5d40245ba353475c69c7d8c7aff5", "committedDate": "2020-10-04 21:45:20 +0200", "message": "Fix coop replay parsing"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "d9ed101ff096fcfcde1925bc9eaac1f16fac85b2", "committedDate": "2021-04-08 15:47:15 -0400", "message": "Use Slf4j for default loggers (#2203)"}, {"oid": "cd0d2dced984dce886f4f0442c79a3c8a552cd25", "committedDate": "2021-05-09 11:47:31 -0400", "message": "Use updated java commons replay parser (#2229)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "a7484c1b754af4d67ba9611a139bdfbe14dfbf0a", "committedDate": "2021-10-21 07:22:51 -0400", "message": "Remove unneeded mapping context"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "d98d8259e93f77b5b60247dd8986136c290bd98b", "committedDate": "2022-02-05 10:26:23 -0500", "message": "Allow deleting local replay file from disk. (#2490)"}, {"oid": "4f8e464a856ee042a62c9f9415d929089726e80a", "committedDate": "2022-02-14 08:20:06 -0500", "message": "Add game version to replay as game option (#2562)"}, {"oid": "be92585c797d9532b8290a66adfd5e00626b1194", "committedDate": "2022-02-19 21:49:20 -0500", "message": "Add player data from parsed replay for local replays (#2569)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "725d9ce909816bcb8c42716f6ae5d2d7f6fc0f9d", "committedDate": "2022-07-30 12:19:01 -0400", "message": "Use proper version for featured mod updates and use scenario file as primary source for map folder path (#2760)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6752359a7963bd449e1f028414e2b7ad433478e3", "committedDate": "2023-02-21 20:03:09 -0500", "message": "Use bindings for game controllers (#2922"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "52a32170a4f0fdcb9b9ee844792dc85231da0779", "committedDate": "2023-05-08 17:30:00 -0400", "message": "Don't load reviews for every vault object (#2966)"}, {"oid": "8cab3e4f23fb32a0facbee6c03a20eb12d90f558", "committedDate": "2023-05-09 22:22:55 -0400", "message": "Make properties sortable (#2972)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjEyMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062123", "body": "Let's tell te user we don't have this map", "bodyText": "Let's tell te user we don't have this map", "bodyHTML": "<p dir=\"auto\">Let's tell te user we don't have this map</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:24:13Z", "path": "src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java", "diffHunk": "@@ -183,9 +177,12 @@ public OffsetDateTime fromString(String string) {\n       protected void updateItem(MapBean map, boolean empty) {\n         super.updateItem(map, empty);\n \n-        if (empty || map == null) {\n+        if (empty) {\n           setText(null);\n           setGraphic(null);\n+        } else if (map == null) {\n+          setGraphic(null);\n+          setText(i18n.get(\"map.unknown\"));", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\nindex 9a1f9fd9..7903ffdf 100644\n--- a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n+++ b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n", "chunk": "@@ -177,12 +183,9 @@ public class ReplayVaultController extends AbstractViewController<Node> {\n       protected void updateItem(MapBean map, boolean empty) {\n         super.updateItem(map, empty);\n \n-        if (empty) {\n+        if (empty || map == null) {\n           setText(null);\n           setGraphic(null);\n-        } else if (map == null) {\n-          setGraphic(null);\n-          setText(i18n.get(\"map.unknown\"));\n         } else {\n           imageView.setImage(mapService.loadPreview(map.getFolderName(), PreviewSize.SMALL));\n           setGraphic(imageView);\n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\nindex 7903ffdf..9a1f9fd9 100644\n--- a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n+++ b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n", "chunk": "@@ -183,9 +177,12 @@ public class ReplayVaultController extends AbstractViewController<Node> {\n       protected void updateItem(MapBean map, boolean empty) {\n         super.updateItem(map, empty);\n \n-        if (empty || map == null) {\n+        if (empty) {\n           setText(null);\n           setGraphic(null);\n+        } else if (map == null) {\n+          setGraphic(null);\n+          setText(i18n.get(\"map.unknown\"));\n         } else {\n           imageView.setImage(mapService.loadPreview(map.getFolderName(), PreviewSize.SMALL));\n           setGraphic(imageView);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\ndeleted file mode 100644\nindex 9a1f9fd9..00000000\n--- a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n+++ /dev/null\n", "chunk": "@@ -1,263 +0,0 @@\n-package com.faforever.client.vault.replay;\n-\n-import com.faforever.client.fx.AbstractViewController;\n-import com.faforever.client.i18n.I18n;\n-import com.faforever.client.main.event.LocalReplaysChangedEvent;\n-import com.faforever.client.main.event.NavigateEvent;\n-import com.faforever.client.map.MapBean;\n-import com.faforever.client.map.MapService;\n-import com.faforever.client.map.MapService.PreviewSize;\n-import com.faforever.client.notification.NotificationService;\n-import com.faforever.client.replay.Replay;\n-import com.faforever.client.replay.ReplayService;\n-import com.faforever.client.reporting.ReportingService;\n-import com.faforever.client.task.TaskService;\n-import com.faforever.client.theme.UiService;\n-import com.faforever.client.util.TimeService;\n-import com.faforever.client.vault.map.MapPreviewTableCellController;\n-import com.google.common.base.Joiner;\n-import javafx.beans.binding.StringBinding;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.beans.value.ObservableValue;\n-import javafx.collections.ObservableMap;\n-import javafx.scene.Node;\n-import javafx.scene.control.TableCell;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableRow;\n-import javafx.scene.control.TableView;\n-import javafx.scene.control.cell.TextFieldTableCell;\n-import javafx.scene.image.ImageView;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.layout.VBox;\n-import javafx.util.StringConverter;\n-import lombok.RequiredArgsConstructor;\n-import org.jetbrains.annotations.NotNull;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.event.EventListener;\n-import org.springframework.stereotype.Component;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.time.Duration;\n-import java.time.OffsetDateTime;\n-import java.time.temporal.Temporal;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-\n-@Component\n-@RequiredArgsConstructor\n-// TODO reduce dependencies\n-public class ReplayVaultController extends AbstractViewController<Node> {\n-\n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n-  private final NotificationService notificationService;\n-  private final ReplayService replayService;\n-  private final MapService mapService;\n-  private final TaskService taskService;\n-  private final I18n i18n;\n-  private final TimeService timeService;\n-  private final ReportingService reportingService;\n-  private final ApplicationContext applicationContext;\n-  private final UiService uiService;\n-\n-  public Pane replayVaultRoot;\n-  public VBox loadingPane;\n-  public TableView<Replay> replayTableView;\n-  public TableColumn<Replay, Number> idColumn;\n-  public TableColumn<Replay, String> titleColumn;\n-  public TableColumn<Replay, String> playersColumn;\n-  public TableColumn<Replay, Temporal> timeColumn;\n-  public TableColumn<Replay, Duration> durationColumn;\n-  public TableColumn<Replay, String> gameTypeColumn;\n-  public TableColumn<Replay, MapBean> mapColumn;\n-\n-  private Boolean isDisplayingForFirstTime = true;\n-\n-  @SuppressWarnings(\"unchecked\")\n-  public void initialize() {\n-\n-    replayTableView.setRowFactory(param -> replayRowFactory());\n-    replayTableView.getSortOrder().setAll(Collections.singletonList(timeColumn));\n-\n-    idColumn.setCellValueFactory(param -> param.getValue().idProperty());\n-    idColumn.setCellFactory(this::idCellFactory);\n-\n-    titleColumn.setCellValueFactory(param -> param.getValue().titleProperty());\n-\n-    timeColumn.setCellValueFactory(param -> param.getValue().startTimeProperty());\n-    timeColumn.setCellFactory(this::timeCellFactory);\n-    timeColumn.setSortType(TableColumn.SortType.DESCENDING);\n-\n-    gameTypeColumn.setCellValueFactory(param -> param.getValue().getFeaturedMod().displayNameProperty());\n-\n-    mapColumn.setCellValueFactory(param -> param.getValue().mapProperty());\n-    mapColumn.setCellFactory(this::mapCellFactory);\n-\n-    playersColumn.setCellValueFactory(this::playersValueFactory);\n-\n-    durationColumn.setCellValueFactory(this::durationCellValueFactory);\n-    durationColumn.setCellFactory(this::durationCellFactory);\n-  }\n-\n-  @Override\n-  protected void onDisplay(NavigateEvent navigateEvent) {\n-    if (isDisplayingForFirstTime) {\n-      replayTableView.setVisible(false);\n-      loadLocalReplaysInBackground();\n-      isDisplayingForFirstTime = false;\n-    }\n-\n-    super.onDisplay(navigateEvent);\n-  }\n-\n-  protected void loadLocalReplaysInBackground() {\n-    replayService.startLoadingAndWatchingLocalReplays();\n-  }\n-\n-  @NotNull\n-  private TableRow<Replay> replayRowFactory() {\n-    TableRow<Replay> row = new TableRow<>();\n-    row.setOnMouseClicked(event -> {\n-      // If ID == 0, this isn't an entry but root node\n-      if (event.getClickCount() == 2 && !row.isEmpty() && row.getItem().getId() != 0) {\n-        replayService.runReplay(row.getItem());\n-      }\n-    });\n-    return row;\n-  }\n-\n-  private ObservableValue<String> playersValueFactory(TableColumn.CellDataFeatures<Replay, String> features) {\n-    return new StringBinding() {\n-      @Override\n-      protected String computeValue() {\n-        Replay replay = features.getValue();\n-\n-        ObservableMap<String, List<String>> teams = replay.getTeams();\n-        if (teams.isEmpty()) {\n-          return \"\";\n-        }\n-\n-        ArrayList<String> teamsAsStrings = new ArrayList<>();\n-        for (List<String> playerNames : teams.values()) {\n-          Collections.sort(playerNames);\n-          teamsAsStrings.add(Joiner.on(i18n.get(\"textSeparator\")).join(playerNames));\n-        }\n-\n-        return Joiner.on(i18n.get(\"vsSeparator\")).join(teamsAsStrings);\n-      }\n-    };\n-  }\n-\n-  private TableCell<Replay, Temporal> timeCellFactory(TableColumn<Replay, Temporal> column) {\n-    TextFieldTableCell<Replay, Temporal> cell = new TextFieldTableCell<>();\n-    cell.setConverter(new StringConverter<Temporal>() {\n-      @Override\n-      public String toString(Temporal object) {\n-        return timeService.lessThanOneDayAgo(object);\n-      }\n-\n-      @Override\n-      public OffsetDateTime fromString(String string) {\n-        return null;\n-      }\n-    });\n-    return cell;\n-  }\n-\n-  private TableCell<Replay, MapBean> mapCellFactory(TableColumn<Replay, MapBean> column) {\n-    MapPreviewTableCellController controller = uiService.loadFxml(\"theme/vault/map/map_preview_table_cell.fxml\");\n-    final ImageView imageView = controller.getRoot();\n-\n-    TableCell<Replay, MapBean> cell = new TableCell<Replay, MapBean>() {\n-\n-      @Override\n-      protected void updateItem(MapBean map, boolean empty) {\n-        super.updateItem(map, empty);\n-\n-        if (empty) {\n-          setText(null);\n-          setGraphic(null);\n-        } else if (map == null) {\n-          setGraphic(null);\n-          setText(i18n.get(\"map.unknown\"));\n-        } else {\n-          imageView.setImage(mapService.loadPreview(map.getFolderName(), PreviewSize.SMALL));\n-          setGraphic(imageView);\n-          setText(map.getDisplayName());\n-        }\n-      }\n-    };\n-    cell.setGraphic(imageView);\n-\n-    return cell;\n-  }\n-\n-  private TableCell<Replay, Number> idCellFactory(TableColumn<Replay, Number> column) {\n-    TextFieldTableCell<Replay, Number> cell = new TextFieldTableCell<>();\n-    cell.setConverter(new StringConverter<Number>() {\n-      @Override\n-      public String toString(Number object) {\n-        if (object.intValue() == 0) {\n-          return \"\";\n-        }\n-        return i18n.number(object.intValue());\n-      }\n-\n-      @Override\n-      public Number fromString(String string) {\n-        return null;\n-      }\n-    });\n-    return cell;\n-  }\n-\n-  private TableCell<Replay, Duration> durationCellFactory(TableColumn<Replay, Duration> column) {\n-    TextFieldTableCell<Replay, Duration> cell = new TextFieldTableCell<>();\n-    cell.setConverter(new StringConverter<Duration>() {\n-      @Override\n-      public String toString(Duration object) {\n-        if (object == null) {\n-          return \"\";\n-        }\n-        return timeService.shortDuration(object);\n-      }\n-\n-      @Override\n-      public Duration fromString(String string) {\n-        return null;\n-      }\n-    });\n-    return cell;\n-  }\n-\n-  @NotNull\n-  private ObservableValue<Duration> durationCellValueFactory(TableColumn.CellDataFeatures<Replay, Duration> param) {\n-    Replay replay = param.getValue();\n-    Temporal startTime = replay.getStartTime();\n-    Temporal endTime = replay.getEndTime();\n-\n-    if (startTime == null || endTime == null) {\n-      return new SimpleObjectProperty<>(null);\n-    }\n-\n-    return new SimpleObjectProperty<>(Duration.between(startTime, endTime));\n-  }\n-\n-  @EventListener\n-  public void onLocalReplaysChanged(LocalReplaysChangedEvent event) {\n-    Collection<Replay> newReplays = event.getNewReplays();\n-    Collection<Replay> deletedReplays = event.getDeletedReplays();\n-    replayTableView.getItems().addAll(newReplays);\n-    replayTableView.getItems().removeAll(deletedReplays);\n-    replayTableView.sort();\n-    replayTableView.setVisible(true);\n-    loadingPane.setVisible(false);\n-  }\n-  \n-  public Node getRoot() {\n-    return replayVaultRoot;\n-  }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "8d2fd5307bade2ccaffbaacf8290cc0ae7173551", "message": "Merge commit", "committedDate": null}, {"oid": "c832e871e2d369cd0c6b670e98ada428ebd4941e", "committedDate": "2020-08-18 23:20:03 +0200", "message": "Create Abstract Vault Controller"}, {"oid": "8462efc32a15b56c6a0e209330ae249e5b2d2956", "committedDate": "2020-09-17 11:25:44 +0200", "message": "Copy local replay info to clipboard"}, {"oid": "505e5f2a98b10a0a8bb9fb0a91118b8966dedf34", "committedDate": "2020-11-13 09:19:05 -0500", "message": "Add default vault pagination to local replays (#1820)"}]}, {"oid": "cae1a594d941600e0d8ca6b18a17a0b722500b5c", "url": "https://github.com/FAForever/downlords-faf-client/commit/cae1a594d941600e0d8ca6b18a17a0b722500b5c", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-01-05T00:28:38Z", "type": "forcePushed"}, {"oid": "ce8c22405567df6b451b87bddbe11893daa42228", "url": "https://github.com/FAForever/downlords-faf-client/commit/ce8c22405567df6b451b87bddbe11893daa42228", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-01-05T00:30:35Z", "type": "forcePushed"}, {"oid": "c9d1f114e47bde1425a6b83e3b78067f66f30c0a", "url": "https://github.com/FAForever/downlords-faf-client/commit/c9d1f114e47bde1425a6b83e3b78067f66f30c0a", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-02-08T23:33:27Z", "type": "forcePushed"}, {"oid": "9a2bb3da7816bc6941c644ad28e77946e642c924", "url": "https://github.com/FAForever/downlords-faf-client/commit/9a2bb3da7816bc6941c644ad28e77946e642c924", "message": "#1541: Properly handle futures when the local replay directory has changed", "committedDate": "2020-02-08T23:38:40Z", "type": "commit"}, {"oid": "9c7cbca33c1f7ef007299823662c24d0995ed6d0", "url": "https://github.com/FAForever/downlords-faf-client/commit/9c7cbca33c1f7ef007299823662c24d0995ed6d0", "message": "Added unit test for `onLocalReplaysWatchEvent`", "committedDate": "2020-02-08T23:38:41Z", "type": "commit"}, {"oid": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "url": "https://github.com/FAForever/downlords-faf-client/commit/2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-02-08T23:38:48Z", "type": "commit"}, {"oid": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "url": "https://github.com/FAForever/downlords-faf-client/commit/2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-02-08T23:38:48Z", "type": "forcePushed"}]}