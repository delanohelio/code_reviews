{"pr_number": 1542, "pr_title": "Properly handle futures when the local replay directory has changed", "pr_author": "andreasley", "pr_createdAt": "2020-01-01T20:19:32Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/1542", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk1Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362349953", "body": "thenRun", "bodyText": "thenRun", "bodyHTML": "<p dir=\"auto\">thenRun</p>", "author": "1-alex98", "createdAt": "2020-01-01T23:41:57Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -201,8 +200,21 @@ private void onLocalReplaysWatchEvent(WatchKey key) {\n       }\n     }\n \n-    localReplays.addAll(newReplays);\n-    publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n+    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n+    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n+        .thenApply(ignoredVoid ->", "originalCommit": "2fdd64866bdb1c9f2637b02627f884f3b22c1dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ2MjgyOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362462828", "bodyText": "Why?", "author": "andreasley", "createdAt": "2020-01-02T12:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3OTUxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362579510", "bodyText": "Sorry i am wrong... but there is a method that takes a lambda without the parameter ignoredVoid. Use this method instead not totally sure whats it called thenCombine maybe", "author": "1-alex98", "createdAt": "2020-01-02T18:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU5NjM5NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362596395", "bodyText": "ok whatever ignore me", "author": "1-alex98", "createdAt": "2020-01-02T19:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cae1a594d941600e0d8ca6b18a17a0b722500b5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 800b5fdf8..cfc767646 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +203,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex cfc767646..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -203,8 +204,7 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n+                .map(future -> future.join())\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362349971", "body": "CompletableFuture\r\n        .allOf", "bodyText": "CompletableFuture\n.allOf", "bodyHTML": "<p dir=\"auto\">CompletableFuture<br>\n.allOf</p>", "author": "1-alex98", "createdAt": "2020-01-01T23:42:49Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -201,8 +200,21 @@ private void onLocalReplaysWatchEvent(WatchKey key) {\n       }\n     }\n \n-    localReplays.addAll(newReplays);\n-    publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n+    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n+    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n+        .thenApply(ignoredVoid ->\n+            newReplaysFutures.stream()\n+                .map(future -> future.join())", "originalCommit": "2fdd64866bdb1c9f2637b02627f884f3b22c1dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ2MjgzNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362462836", "bodyText": "What?", "author": "andreasley", "createdAt": "2020-01-02T12:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU3ODkwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362578908", "bodyText": "To join CompletedFutures use CompletableFuture.allOf()", "author": "1-alex98", "createdAt": "2020-01-02T18:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYzMzE2Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362633167", "bodyText": "Which is exactly what I'm doing. Hence my confusion. :)", "author": "andreasley", "createdAt": "2020-01-02T21:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY1Njg0MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r362656840", "bodyText": "Should read the code closer sorry lemme check again", "author": "1-alex98", "createdAt": "2020-01-02T22:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM0OTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cae1a594d941600e0d8ca6b18a17a0b722500b5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 800b5fdf8..cfc767646 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +203,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex cfc767646..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -203,8 +204,7 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n+                .map(future -> future.join())\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MDU5NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363060595", "body": "use method reference\r\n```suggestion\r\n                CompletableFuture::join\r\n```", "bodyText": "use method reference\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .map(future -> future.join())\n          \n          \n            \n                            CompletableFuture::join", "bodyHTML": "<p dir=\"auto\">use method reference</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"x x-first\">.map(future </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> future</span><span class=\"pl-k x x-last\">.</span>join<span class=\"x x-first x-last\">())</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi x x-first\">CompletableFuture</span><span class=\"pl-k x x-last\">::</span>join</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "1-alex98", "createdAt": "2020-01-04T23:36:15Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -201,8 +201,21 @@ private void onLocalReplaysWatchEvent(WatchKey key) {\n       }\n     }\n \n-    localReplays.addAll(newReplays);\n-    publisher.publishEvent(new LocalReplaysChangedEvent(this, newReplays, deletedReplays));\n+    CompletableFuture[] replayFuturesArray = newReplaysFutures.toArray(new CompletableFuture[newReplaysFutures.size()]);\n+    CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n+        .thenApply(ignoredVoid ->\n+            newReplaysFutures.stream()\n+                .map(future -> future.join())", "originalCommit": "9bd706aa5a0d7f2c207ece86b6f8ad02033570ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cae1a594d941600e0d8ca6b18a17a0b722500b5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex b06001c48..cfc767646 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -205,7 +203,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex cfc767646..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -203,8 +204,7 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n+                .map(future -> future.join())\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjAzNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062036", "body": "Well we wanna avoid having null objects in list because it crashes UI", "bodyText": "Well we wanna avoid having null objects in list because it crashes UI", "bodyHTML": "<p dir=\"auto\">Well we wanna avoid having null objects in list because it crashes UI</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:21:26Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -205,7 +202,8 @@ protected void onLocalReplaysWatchEvent(WatchKey key) {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c47..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -202,8 +204,7 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(CompletableFuture::join)\n-                .filter(Objects::nonNull)\n+                .map(future -> future.join())\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -204,7 +204,8 @@ public class ReplayService {\n     CompletableFuture<List<Replay>> newReplaysFuture = CompletableFuture.allOf(replayFuturesArray)\n         .thenApply(ignoredVoid ->\n             newReplaysFutures.stream()\n-                .map(future -> future.join())\n+                .map(CompletableFuture::join)\n+                .filter(Objects::nonNull)\n                 .collect(Collectors.toList())\n     );\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjA0Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062046", "body": "Just a quick way of writting it", "bodyText": "Just a quick way of writting it", "bodyHTML": "<p dir=\"auto\">Just a quick way of writting it</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:21:42Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -275,21 +273,21 @@ static String guessModByFileName(String fileName) {\n       List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n           .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n           .limit(MAX_REPLAYS)\n-          .map( replayFile -> tryLoadingLocalReplay(replayFile))\n+          .map(this::tryLoadingLocalReplay)", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c47..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -273,7 +274,7 @@ public class ReplayService {\n       List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n           .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n           .limit(MAX_REPLAYS)\n-          .map(this::tryLoadingLocalReplay)\n+          .map( replayFile -> tryLoadingLocalReplay(replayFile))\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -274,7 +275,7 @@ public class ReplayService {\n       List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n           .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n           .limit(MAX_REPLAYS)\n-          .map( replayFile -> tryLoadingLocalReplay(replayFile))\n+          .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n", "next_change": null}, {"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -282,13 +283,13 @@ public class ReplayService {\n       return CompletableFuture.allOf(replayFuturesArray)\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n-                  .map(future -> future.join())\n+                  .map(CompletableFuture::join)\n+                  .filter(Objects::nonNull)\n                   .collect(Collectors.toList()));\n \n     }\n   }\n \n-  @Async\n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjA0OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062049", "body": "again see top", "bodyText": "again see top", "bodyHTML": "<p dir=\"auto\">again see top</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:21:51Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -275,21 +273,21 @@ static String guessModByFileName(String fileName) {\n       List<CompletableFuture<Replay>> replayFutures = StreamSupport.stream(directoryStream.spliterator(), false)\n           .sorted(Comparator.comparing(path -> noCatch(() -> Files.getLastModifiedTime((Path) path))).reversed())\n           .limit(MAX_REPLAYS)\n-          .map( replayFile -> tryLoadingLocalReplay(replayFile))\n+          .map(this::tryLoadingLocalReplay)\n           .filter(e -> !e.isCompletedExceptionally())\n           .collect(Collectors.toList());\n \n       CompletableFuture[] replayFuturesArray = replayFutures.toArray(new CompletableFuture[replayFutures.size()]);\n       return CompletableFuture.allOf(replayFuturesArray)\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n-                  .map(future -> future.join())\n+                  .map(CompletableFuture::join)\n+                  .filter(Objects::nonNull)", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c47..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -281,13 +282,13 @@ public class ReplayService {\n       return CompletableFuture.allOf(replayFuturesArray)\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n-                  .map(CompletableFuture::join)\n-                  .filter(Objects::nonNull)\n+                  .map(future -> future.join())\n                   .collect(Collectors.toList()));\n \n     }\n   }\n \n+  @Async\n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -282,13 +283,13 @@ public class ReplayService {\n       return CompletableFuture.allOf(replayFuturesArray)\n           .thenApply(ignoredVoid ->\n               replayFutures.stream()\n-                  .map(future -> future.join())\n+                  .map(CompletableFuture::join)\n+                  .filter(Objects::nonNull)\n                   .collect(Collectors.toList()));\n \n     }\n   }\n \n-  @Async\n   private CompletableFuture<Replay> tryLoadingLocalReplay(Path replayFile)  {\n     try {\n       LocalReplayInfo replayInfo = replayFileReader.parseMetaData(replayFile);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjA4Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062083", "body": "We certainly dont wanna throw here if we do then the whole loacl replay vault breaks, also there are legimit cases where a replay has no map. One is coop the maps are part of the game mod and hence are not found locally nor on the server", "bodyText": "We certainly dont wanna throw here if we do then the whole loacl replay vault breaks, also there are legimit cases where a replay has no map. One is coop the maps are part of the game mod and hence are not found locally nor on the server", "bodyHTML": "<p dir=\"auto\">We certainly dont wanna throw here if we do then the whole loacl replay vault breaks, also there are legimit cases where a replay has no map. One is coop the maps are part of the game mod and hence are not found locally nor on the server</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:23:00Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -300,14 +298,14 @@ static String guessModByFileName(String fileName) {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c47..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -298,14 +299,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          throw new CompletionException(new FileNotFoundException());\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.completedFuture(null);\n+      return CompletableFuture.failedFuture(e);\n     }\n   }\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -299,14 +300,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.failedFuture(e);\n+      return CompletableFuture.completedFuture(null);\n     }\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjA5Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062097", "body": "Let's just say the map is null", "bodyText": "Let's just say the map is null", "bodyHTML": "<p dir=\"auto\">Let's just say the map is null</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:23:14Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -300,14 +298,14 @@ static String guessModByFileName(String fileName) {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c47..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -298,14 +299,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          throw new CompletionException(new FileNotFoundException());\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.completedFuture(null);\n+      return CompletableFuture.failedFuture(e);\n     }\n   }\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -299,14 +300,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.failedFuture(e);\n+      return CompletableFuture.completedFuture(null);\n     }\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjExOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062118", "body": "Don't throw others wise replay vault stays empty, return null which is gonna be filtered out", "bodyText": "Don't throw others wise replay vault stays empty, return null which is gonna be filtered out", "bodyHTML": "<p dir=\"auto\">Don't throw others wise replay vault stays empty, return null which is gonna be filtered out</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:23:52Z", "path": "src/main/java/com/faforever/client/replay/ReplayService.java", "diffHunk": "@@ -300,14 +298,14 @@ static String guessModByFileName(String fileName) {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.failedFuture(e);\n+      return CompletableFuture.completedFuture(null);", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 50cea6c47..11d90abc5 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -298,14 +299,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n+          throw new CompletionException(new FileNotFoundException());\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.completedFuture(null);\n+      return CompletableFuture.failedFuture(e);\n     }\n   }\n \n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/replay/ReplayService.java b/src/main/java/com/faforever/client/replay/ReplayService.java\nindex 11d90abc5..5a6e9b90f 100644\n--- a/src/main/java/com/faforever/client/replay/ReplayService.java\n+++ b/src/main/java/com/faforever/client/replay/ReplayService.java\n", "chunk": "@@ -299,14 +300,14 @@ public class ReplayService {\n       return CompletableFuture.allOf(featuredModFuture, mapBeanFuture).thenApply(ignoredVoid  -> {\n         Optional<MapBean> mapBean = mapBeanFuture.join();\n         if (!mapBean.isPresent()) {\n-          throw new CompletionException(new FileNotFoundException());\n+          logger.warn(\"Could not find map for replay file '{}'\", replayFile);\n         }\n-        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.get());\n+        return new Replay(replayInfo, replayFile, featuredModFuture.join(), mapBean.orElse(null));\n       });\n     } catch (Exception e) {\n       logger.warn(\"Could not read replay file '{}'\", replayFile, e);\n       moveCorruptedReplayFile(replayFile);\n-      return CompletableFuture.failedFuture(e);\n+      return CompletableFuture.completedFuture(null);\n     }\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MjEyMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1542#discussion_r363062123", "body": "Let's tell te user we don't have this map", "bodyText": "Let's tell te user we don't have this map", "bodyHTML": "<p dir=\"auto\">Let's tell te user we don't have this map</p>", "author": "1-alex98", "createdAt": "2020-01-05T00:24:13Z", "path": "src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java", "diffHunk": "@@ -183,9 +177,12 @@ public OffsetDateTime fromString(String string) {\n       protected void updateItem(MapBean map, boolean empty) {\n         super.updateItem(map, empty);\n \n-        if (empty || map == null) {\n+        if (empty) {\n           setText(null);\n           setGraphic(null);\n+        } else if (map == null) {\n+          setGraphic(null);\n+          setText(i18n.get(\"map.unknown\"));", "originalCommit": "108e07a5adb577284f37bec08216336270dce26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a2bb3da7816bc6941c644ad28e77946e642c924", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\nindex 9a1f9fd97..7903ffdf6 100644\n--- a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n+++ b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n", "chunk": "@@ -177,12 +183,9 @@ public class ReplayVaultController extends AbstractViewController<Node> {\n       protected void updateItem(MapBean map, boolean empty) {\n         super.updateItem(map, empty);\n \n-        if (empty) {\n+        if (empty || map == null) {\n           setText(null);\n           setGraphic(null);\n-        } else if (map == null) {\n-          setGraphic(null);\n-          setText(i18n.get(\"map.unknown\"));\n         } else {\n           imageView.setImage(mapService.loadPreview(map.getFolderName(), PreviewSize.SMALL));\n           setGraphic(imageView);\n", "next_change": {"commit": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\nindex 7903ffdf6..9a1f9fd97 100644\n--- a/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n+++ b/src/main/java/com/faforever/client/vault/replay/ReplayVaultController.java\n", "chunk": "@@ -183,9 +177,12 @@ public class ReplayVaultController extends AbstractViewController<Node> {\n       protected void updateItem(MapBean map, boolean empty) {\n         super.updateItem(map, empty);\n \n-        if (empty || map == null) {\n+        if (empty) {\n           setText(null);\n           setGraphic(null);\n+        } else if (map == null) {\n+          setGraphic(null);\n+          setText(i18n.get(\"map.unknown\"));\n         } else {\n           imageView.setImage(mapService.loadPreview(map.getFolderName(), PreviewSize.SMALL));\n           setGraphic(imageView);\n", "next_change": null}]}}]}}, {"oid": "cae1a594d941600e0d8ca6b18a17a0b722500b5c", "url": "https://github.com/FAForever/downlords-faf-client/commit/cae1a594d941600e0d8ca6b18a17a0b722500b5c", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-01-05T00:28:38Z", "type": "forcePushed"}, {"oid": "ce8c22405567df6b451b87bddbe11893daa42228", "url": "https://github.com/FAForever/downlords-faf-client/commit/ce8c22405567df6b451b87bddbe11893daa42228", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-01-05T00:30:35Z", "type": "forcePushed"}, {"oid": "c9d1f114e47bde1425a6b83e3b78067f66f30c0a", "url": "https://github.com/FAForever/downlords-faf-client/commit/c9d1f114e47bde1425a6b83e3b78067f66f30c0a", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-02-08T23:33:27Z", "type": "forcePushed"}, {"oid": "9a2bb3da7816bc6941c644ad28e77946e642c924", "url": "https://github.com/FAForever/downlords-faf-client/commit/9a2bb3da7816bc6941c644ad28e77946e642c924", "message": "#1541: Properly handle futures when the local replay directory has changed", "committedDate": "2020-02-08T23:38:40Z", "type": "commit"}, {"oid": "9c7cbca33c1f7ef007299823662c24d0995ed6d0", "url": "https://github.com/FAForever/downlords-faf-client/commit/9c7cbca33c1f7ef007299823662c24d0995ed6d0", "message": "Added unit test for `onLocalReplaysWatchEvent`", "committedDate": "2020-02-08T23:38:41Z", "type": "commit"}, {"oid": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "url": "https://github.com/FAForever/downlords-faf-client/commit/2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-02-08T23:38:48Z", "type": "commit"}, {"oid": "2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "url": "https://github.com/FAForever/downlords-faf-client/commit/2fdcd9b39702674ffdc01eeb3ea438f2361178ff", "message": "Improvements and fixes to local replay vault", "committedDate": "2020-02-08T23:38:48Z", "type": "forcePushed"}]}