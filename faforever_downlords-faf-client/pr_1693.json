{"pr_number": 1693, "pr_title": "Map generator button #1321", "pr_author": "Katharsas", "pr_createdAt": "2020-05-09T02:58:50Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/1693", "merge_commit": "383d5d3167faf064420a03ec9722666b1779132a", "timeline": [{"oid": "fe8fd6ff9dd1b29450b2b24da28028d5332fbd56", "url": "https://github.com/FAForever/downlords-faf-client/commit/fe8fd6ff9dd1b29450b2b24da28028d5332fbd56", "message": "Implement #1321 first iteration map generator button\n\n- rearranged buttons in create game dialog\n- removed default button, instead is shown in list\n- map generator button \"new\" label and color", "committedDate": "2020-05-09T02:47:36Z", "type": "commit"}, {"oid": "2868950143184e588faf2a72532cf0c7a81376ed", "url": "https://github.com/FAForever/downlords-faf-client/commit/2868950143184e588faf2a72532cf0c7a81376ed", "message": "Finish #1321\n\n- Convert generator button code to fxml\n- Orange color for NEW tag", "committedDate": "2020-05-09T23:06:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4NDA2Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1693#discussion_r424284066", "body": "Try avoid UI style set in java code at all costs, use Pseudoclass", "bodyText": "Try avoid UI style set in java code at all costs, use Pseudoclass", "bodyHTML": "<p dir=\"auto\">Try avoid UI style set in java code at all costs, use Pseudoclass</p>", "author": "1-alex98", "createdAt": "2020-05-13T09:01:41Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -140,8 +148,19 @@ public void initialize() {\n       selectionModel.select(newMapIndex);\n       mapListView.scrollTo(newMapIndex);\n     });\n-\n-    featuredModListView.setCellFactory(param -> new StringListCell<>(FeaturedMod::getDisplayName));\n+    \n+    Function<FeaturedMod, String> isDefaultModString = mod ->\n+      Objects.equals(mod.getTechnicalName(), KnownFeaturedMod.DEFAULT.getTechnicalName()) ?\n+      \" \" + i18n.get(\"game.create.defaultGameTypeMarker\") : null;\n+    \n+    featuredModListView.setCellFactory(param ->\n+        new DualStringListCell<FeaturedMod>(FeaturedMod::getDisplayName, isDefaultModString, false) {\n+      @Override\n+      protected void init() {\n+        // use bind to overwrite updates from css\n+        right.textFillProperty().bind(new SimpleObjectProperty<Paint>(Color.GREY));", "originalCommit": "2868950143184e588faf2a72532cf0c7a81376ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNjc3Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1693#discussion_r424526776", "bodyText": "I can try but it might not be possible due to how DualStringListCell works.", "author": "Katharsas", "createdAt": "2020-05-13T15:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4NDA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1OTMwNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1693#discussion_r427159306", "bodyText": "it is just give it a style class(possibly in code) and set this style class in css", "author": "1-alex98", "createdAt": "2020-05-19T09:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4NDA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwOTc5OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1693#discussion_r427509798", "bodyText": "Ok problem was that (default) ended up with other font/size than the other cell. Need to check when i have time.", "author": "Katharsas", "createdAt": "2020-05-19T18:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4NDA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1ef426e703f5f2db2988af9b866ff108dc7827d9", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 06368ea1..0b73a643 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -152,15 +151,10 @@ public class CreateGameController implements Controller<Pane> {\n     Function<FeaturedMod, String> isDefaultModString = mod ->\n       Objects.equals(mod.getTechnicalName(), KnownFeaturedMod.DEFAULT.getTechnicalName()) ?\n       \" \" + i18n.get(\"game.create.defaultGameTypeMarker\") : null;\n-    \n+\n     featuredModListView.setCellFactory(param ->\n-        new DualStringListCell<FeaturedMod>(FeaturedMod::getDisplayName, isDefaultModString, false) {\n-      @Override\n-      protected void init() {\n-        // use bind to overwrite updates from css\n-        right.textFillProperty().bind(new SimpleObjectProperty<Paint>(Color.GREY));\n-      }\n-    });\n+        new DualStringListCell<>(FeaturedMod::getDisplayName, isDefaultModString, STYLE_CLASS_DUAL_LIST_CELL, uiService)\n+    );\n \n     JavaFxUtil.makeNumericTextField(minRankingTextField, MAX_RATING_LENGTH);\n     JavaFxUtil.makeNumericTextField(maxRankingTextField, MAX_RATING_LENGTH);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "383d5d3167faf064420a03ec9722666b1779132a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 06368ea1..0b73a643 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -152,15 +151,10 @@ public class CreateGameController implements Controller<Pane> {\n     Function<FeaturedMod, String> isDefaultModString = mod ->\n       Objects.equals(mod.getTechnicalName(), KnownFeaturedMod.DEFAULT.getTechnicalName()) ?\n       \" \" + i18n.get(\"game.create.defaultGameTypeMarker\") : null;\n-    \n+\n     featuredModListView.setCellFactory(param ->\n-        new DualStringListCell<FeaturedMod>(FeaturedMod::getDisplayName, isDefaultModString, false) {\n-      @Override\n-      protected void init() {\n-        // use bind to overwrite updates from css\n-        right.textFillProperty().bind(new SimpleObjectProperty<Paint>(Color.GREY));\n-      }\n-    });\n+        new DualStringListCell<>(FeaturedMod::getDisplayName, isDefaultModString, STYLE_CLASS_DUAL_LIST_CELL, uiService)\n+    );\n \n     JavaFxUtil.makeNumericTextField(minRankingTextField, MAX_RATING_LENGTH);\n     JavaFxUtil.makeNumericTextField(maxRankingTextField, MAX_RATING_LENGTH);\n", "next_change": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 0b73a643..48993953 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -147,10 +149,10 @@ public class CreateGameController implements Controller<Pane> {\n       selectionModel.select(newMapIndex);\n       mapListView.scrollTo(newMapIndex);\n     });\n-    \n+\n     Function<FeaturedMod, String> isDefaultModString = mod ->\n-      Objects.equals(mod.getTechnicalName(), KnownFeaturedMod.DEFAULT.getTechnicalName()) ?\n-      \" \" + i18n.get(\"game.create.defaultGameTypeMarker\") : null;\n+        Objects.equals(mod.getTechnicalName(), KnownFeaturedMod.DEFAULT.getTechnicalName()) ?\n+            \" \" + i18n.get(\"game.create.defaultGameTypeMarker\") : null;\n \n     featuredModListView.setCellFactory(param ->\n         new DualStringListCell<>(FeaturedMod::getDisplayName, isDefaultModString, STYLE_CLASS_DUAL_LIST_CELL, uiService)\n", "next_change": {"commit": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 48993953..31570a48 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -155,7 +149,12 @@ public class CreateGameController implements Controller<Pane> {\n             \" \" + i18n.get(\"game.create.defaultGameTypeMarker\") : null;\n \n     featuredModListView.setCellFactory(param ->\n-        new DualStringListCell<>(FeaturedMod::getDisplayName, isDefaultModString, STYLE_CLASS_DUAL_LIST_CELL, uiService)\n+        new DualStringListCell<>(\n+            FeaturedMod::getDisplayName,\n+            isDefaultModString,\n+            FeaturedMod::getDescription,\n+            STYLE_CLASS_DUAL_LIST_CELL, uiService\n+        )\n     );\n \n     JavaFxUtil.makeNumericTextField(minRankingTextField, MAX_RATING_LENGTH);\n", "next_change": {"commit": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 31570a48..e43aa35d 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -157,8 +157,8 @@ public class CreateGameController implements Controller<Pane> {\n         )\n     );\n \n-    JavaFxUtil.makeNumericTextField(minRankingTextField, MAX_RATING_LENGTH);\n-    JavaFxUtil.makeNumericTextField(maxRankingTextField, MAX_RATING_LENGTH);\n+    JavaFxUtil.makeNumericTextField(minRankingTextField, MAX_RATING_LENGTH, true);\n+    JavaFxUtil.makeNumericTextField(maxRankingTextField, MAX_RATING_LENGTH, true);\n \n     modService.getFeaturedMods().thenAccept(featuredModBeans -> Platform.runLater(() -> {\n       featuredModListView.setItems(FXCollections.observableList(featuredModBeans).filtered(FeaturedMod::isVisible));\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e43aa35d..8767929c 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -160,7 +160,7 @@ public class CreateGameController implements Controller<Pane> {\n     JavaFxUtil.makeNumericTextField(minRankingTextField, MAX_RATING_LENGTH, true);\n     JavaFxUtil.makeNumericTextField(maxRankingTextField, MAX_RATING_LENGTH, true);\n \n-    modService.getFeaturedMods().thenAccept(featuredModBeans -> Platform.runLater(() -> {\n+    modService.getFeaturedMods().thenAccept(featuredModBeans -> JavaFxUtil.runLater(() -> {\n       featuredModListView.setItems(FXCollections.observableList(featuredModBeans).filtered(FeaturedMod::isVisible));\n       selectLastOrDefaultGameType();\n     }));\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 8767929c..f5d89181 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -161,7 +164,7 @@ public class CreateGameController implements Controller<Pane> {\n     JavaFxUtil.makeNumericTextField(maxRankingTextField, MAX_RATING_LENGTH, true);\n \n     modService.getFeaturedMods().thenAccept(featuredModBeans -> JavaFxUtil.runLater(() -> {\n-      featuredModListView.setItems(FXCollections.observableList(featuredModBeans).filtered(FeaturedMod::isVisible));\n+      featuredModListView.setItems(FXCollections.observableList(featuredModBeans).filtered(FeaturedModBean::getVisible));\n       selectLastOrDefaultGameType();\n     }));\n \n", "next_change": {"commit": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f5d89181..230f5b5a 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -168,26 +164,6 @@ public class CreateGameController implements Controller<Pane> {\n       selectLastOrDefaultGameType();\n     }));\n \n-    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n-      preferenceUpdateListener = preferences -> {\n-        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n-          initialized = true;\n-\n-          JavaFxUtil.runLater(this::init);\n-        }\n-      };\n-      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n-    } else {\n-      init();\n-    }\n-  }\n-\n-  public void onCloseButtonClicked() {\n-    onCloseButtonClickedListener.run();\n-  }\n-\n-\n-  private void init() {\n     bindGameVisibility();\n     initMapSelection();\n     initFeaturedModList();\n", "next_change": {"commit": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 230f5b5a..99434177 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -160,7 +169,8 @@ public class CreateGameController implements Controller<Pane> {\n     JavaFxUtil.makeNumericTextField(maxRankingTextField, MAX_RATING_LENGTH, true);\n \n     modService.getFeaturedMods().thenAccept(featuredModBeans -> JavaFxUtil.runLater(() -> {\n-      featuredModListView.setItems(FXCollections.observableList(featuredModBeans).filtered(FeaturedModBean::getVisible));\n+      featuredModListView.setItems(FXCollections.observableList(featuredModBeans)\n+          .filtered(FeaturedModBean::getVisible));\n       selectLastOrDefaultGameType();\n     }));\n \n", "next_change": {"commit": "f93867d674a32a139f5829d6150696d4f350a83c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 99434177..3848fe48 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -176,6 +177,7 @@ public class CreateGameController implements Controller<Pane> {\n \n     bindGameVisibility();\n     initMapSelection();\n+    initMapFilterPopup();\n     initFeaturedModList();\n     initRatingBoundaries();\n     selectLastMap();\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 3848fe48..c82956ec 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -184,14 +175,13 @@ public class CreateGameController implements Controller<Pane> {\n     setLastGameTitle();\n     initPassword();\n     JavaFxUtil.addAndTriggerListener(titleTextField.textProperty(), (observable, oldValue, newValue) -> {\n-      preferencesService.getPreferences().getLastGame().setLastGameTitle(newValue);\n-      preferencesService.storeInBackground();\n+      lastGamePrefs.setLastGameTitle(newValue);\n       validateTitle(newValue);\n     });\n \n     JavaFxUtil.addAndTriggerListener(userService.connectionStateProperty(), new WeakInvalidationListener(createButtonStateListener));\n-    JavaFxUtil.addListener(titleTextField.textProperty(), new WeakInvalidationListener(createButtonStateListener));\n-    JavaFxUtil.addListener(passwordTextField.textProperty(), new WeakInvalidationListener(createButtonStateListener));\n+    JavaFxUtil.addListener(titleTextField.textProperty(), createButtonStateListener);\n+    JavaFxUtil.addListener(passwordTextField.textProperty(), createButtonStateListener);\n     JavaFxUtil.addListener(featuredModListView.getSelectionModel()\n         .selectedItemProperty(), new WeakInvalidationListener(createButtonStateListener));\n   }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "383d5d3167faf064420a03ec9722666b1779132a", "message": "Merge commit", "committedDate": null}, {"oid": "0ff1e7a5e4e12cc12eedb6bd8e1fdf4acb77968a", "committedDate": "2020-07-17 15:45:46 +0200", "message": "Warn m issing game title"}, {"oid": "f47737eccb45180c54d5d346f156d23421d63851", "committedDate": "2020-07-19 17:43:03 +0200", "message": "Generate maps with options"}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MTEwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1693#discussion_r427161108", "body": "This should lso be done in fxm", "bodyText": "This should lso be done in fxm", "bodyHTML": "<p dir=\"auto\">This should lso be done in fxm</p>", "author": "1-alex98", "createdAt": "2020-05-19T09:28:20Z", "path": "src/main/java/com/faforever/client/fx/DualStringListCell.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.faforever.client.fx;\n+\n+import java.util.function.Function;\n+\n+import javafx.application.Platform;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ListCell;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n+\n+/**\n+ * Alternative to {@link StringListCell} that allows to display to differently styled strings in each cell.\n+ */\n+public class DualStringListCell<T> extends ListCell<T> {\n+  protected Label left = new Label();\n+  protected Label right = new Label();\n+  protected Region spacer = new Region();\n+  \n+  private HBox container = new HBox(left, spacer, right);", "originalCommit": "2868950143184e588faf2a72532cf0c7a81376ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ef426e703f5f2db2988af9b866ff108dc7827d9", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/fx/DualStringListCell.java b/src/main/java/com/faforever/client/fx/DualStringListCell.java\nindex effdab74..5d0d3c1b 100644\n--- a/src/main/java/com/faforever/client/fx/DualStringListCell.java\n+++ b/src/main/java/com/faforever/client/fx/DualStringListCell.java\n", "chunk": "@@ -1,44 +1,22 @@\n package com.faforever.client.fx;\n \n-import java.util.function.Function;\n-\n+import com.faforever.client.theme.UiService;\n import javafx.application.Platform;\n-import javafx.scene.control.Label;\n import javafx.scene.control.ListCell;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Priority;\n-import javafx.scene.layout.Region;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.function.Function;\n \n /**\n  * Alternative to {@link StringListCell} that allows to display to differently styled strings in each cell.\n  */\n+@RequiredArgsConstructor\n public class DualStringListCell<T> extends ListCell<T> {\n-  protected Label left = new Label();\n-  protected Label right = new Label();\n-  protected Region spacer = new Region();\n-  \n-  private HBox container = new HBox(left, spacer, right);\n-\n-  private Function<T, String> functionLeft;\n-  private Function<T, String> functionRight;\n-  \n-  /**\n-   * @param growSpacer - If true, space between left and right string will be maximized.\n-   */\n-  public DualStringListCell(Function<T, String> functionLeft, Function<T, String> functionRight, boolean growSpacer) {\n-    super();\n-    this.functionLeft = functionLeft;\n-    this.functionRight = functionRight;\n-    if (growSpacer) {\n-      HBox.setHgrow(spacer, Priority.ALWAYS);\n-    }\n-    init();\n-  }\n-  \n-  /**\n-   * Customize {@link #left}, {@link #right}, {@link #spacer}.\n-   */\n-  protected void init() {}\n+  private final Function<T, String> functionLeft;\n+  private final Function<T, String> functionRight;\n+  private final String styleClasses;\n+  private final UiService uiService;\n+  public DualStringListCellController dualStringListCellController;\n \n   @Override\n   protected void updateItem(T item, boolean empty) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "383d5d3167faf064420a03ec9722666b1779132a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/fx/DualStringListCell.java b/src/main/java/com/faforever/client/fx/DualStringListCell.java\nindex effdab74..5d0d3c1b 100644\n--- a/src/main/java/com/faforever/client/fx/DualStringListCell.java\n+++ b/src/main/java/com/faforever/client/fx/DualStringListCell.java\n", "chunk": "@@ -1,44 +1,22 @@\n package com.faforever.client.fx;\n \n-import java.util.function.Function;\n-\n+import com.faforever.client.theme.UiService;\n import javafx.application.Platform;\n-import javafx.scene.control.Label;\n import javafx.scene.control.ListCell;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Priority;\n-import javafx.scene.layout.Region;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.function.Function;\n \n /**\n  * Alternative to {@link StringListCell} that allows to display to differently styled strings in each cell.\n  */\n+@RequiredArgsConstructor\n public class DualStringListCell<T> extends ListCell<T> {\n-  protected Label left = new Label();\n-  protected Label right = new Label();\n-  protected Region spacer = new Region();\n-  \n-  private HBox container = new HBox(left, spacer, right);\n-\n-  private Function<T, String> functionLeft;\n-  private Function<T, String> functionRight;\n-  \n-  /**\n-   * @param growSpacer - If true, space between left and right string will be maximized.\n-   */\n-  public DualStringListCell(Function<T, String> functionLeft, Function<T, String> functionRight, boolean growSpacer) {\n-    super();\n-    this.functionLeft = functionLeft;\n-    this.functionRight = functionRight;\n-    if (growSpacer) {\n-      HBox.setHgrow(spacer, Priority.ALWAYS);\n-    }\n-    init();\n-  }\n-  \n-  /**\n-   * Customize {@link #left}, {@link #right}, {@link #spacer}.\n-   */\n-  protected void init() {}\n+  private final Function<T, String> functionLeft;\n+  private final Function<T, String> functionRight;\n+  private final String styleClasses;\n+  private final UiService uiService;\n+  public DualStringListCellController dualStringListCellController;\n \n   @Override\n   protected void updateItem(T item, boolean empty) {\n", "next_change": {"commit": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/fx/DualStringListCell.java b/src/main/java/com/faforever/client/fx/DualStringListCell.java\nindex 5d0d3c1b..9e1d20c6 100644\n--- a/src/main/java/com/faforever/client/fx/DualStringListCell.java\n+++ b/src/main/java/com/faforever/client/fx/DualStringListCell.java\n", "chunk": "@@ -14,6 +14,7 @@ import java.util.function.Function;\n public class DualStringListCell<T> extends ListCell<T> {\n   private final Function<T, String> functionLeft;\n   private final Function<T, String> functionRight;\n+  private final Function<T, String> functionWebViewToolTip;\n   private final String styleClasses;\n   private final UiService uiService;\n   public DualStringListCellController dualStringListCellController;\n", "next_change": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/fx/DualStringListCell.java b/src/main/java/com/faforever/client/fx/DualStringListCell.java\nindex 9e1d20c6..b2751eb6 100644\n--- a/src/main/java/com/faforever/client/fx/DualStringListCell.java\n+++ b/src/main/java/com/faforever/client/fx/DualStringListCell.java\n", "chunk": "@@ -22,7 +21,7 @@ public class DualStringListCell<T> extends ListCell<T> {\n   @Override\n   protected void updateItem(T item, boolean empty) {\n     super.updateItem(item, empty);\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       if (empty || item == null) {\n         setText(null);\n         setGraphic(null);\n", "next_change": {"commit": "ab30d2e3bc9bf702daf06a9fb22f26aa72be3147", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/fx/DualStringListCell.java b/src/main/java/com/faforever/client/fx/DualStringListCell.java\nindex b2751eb6..6ede1501 100644\n--- a/src/main/java/com/faforever/client/fx/DualStringListCell.java\n+++ b/src/main/java/com/faforever/client/fx/DualStringListCell.java\n", "chunk": "@@ -28,13 +28,13 @@ public class DualStringListCell<T> extends ListCell<T> {\n       } else {\n         if (dualStringListCellController == null) {\n           dualStringListCellController = uiService.loadFxml(\"theme/dual_string_list_cell.fxml\");\n+          // copy font styles\n+          dualStringListCellController.applyFont(getFont());\n+          dualStringListCellController.applyStyleClass(styleClasses);\n         }\n         dualStringListCellController.setLeftText(functionLeft.apply(item));\n         dualStringListCellController.setWebViewToolTip(functionWebViewToolTip.apply(item));\n         dualStringListCellController.setRightText(functionRight.apply(item));\n-        // copy font styles\n-        dualStringListCellController.applyFont(getFont());\n-        dualStringListCellController.applyStyleClass(styleClasses);\n         setGraphic(dualStringListCellController.getRoot());\n       }\n     });\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "383d5d3167faf064420a03ec9722666b1779132a", "message": "Merge commit", "committedDate": null}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "ab30d2e3bc9bf702daf06a9fb22f26aa72be3147", "committedDate": "2022-01-20 19:12:33 -0500", "message": "Fix possible memory leak in CSS Classes of cells (#2524)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}, {"oid": "1ef426e703f5f2db2988af9b866ff108dc7827d9", "url": "https://github.com/FAForever/downlords-faf-client/commit/1ef426e703f5f2db2988af9b866ff108dc7827d9", "message": "Neatly done in fxml and css", "committedDate": "2020-05-19T10:08:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxMjAyMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1693#discussion_r427512023", "body": "~~This is not very performance friendly.\r\nThe JavaFX documentation (in some parent class) explicitely states that updateItem should ONLY reuse ui elements not create or recreate them.~~\r\n\r\nEdit: Ok maybe i got this wrong, this usually only happens once per object right?", "bodyText": "This is not very performance friendly.\nThe JavaFX documentation (in some parent class) explicitely states that updateItem should ONLY reuse ui elements not create or recreate them.\nEdit: Ok maybe i got this wrong, this usually only happens once per object right?", "bodyHTML": "<p dir=\"auto\"><del>This is not very performance friendly.<br>\nThe JavaFX documentation (in some parent class) explicitely states that updateItem should ONLY reuse ui elements not create or recreate them.</del></p>\n<p dir=\"auto\">Edit: Ok maybe i got this wrong, this usually only happens once per object right?</p>", "author": "Katharsas", "createdAt": "2020-05-19T18:27:32Z", "path": "src/main/java/com/faforever/client/fx/DualStringListCell.java", "diffHunk": "@@ -48,12 +26,15 @@ protected void updateItem(T item, boolean empty) {\n         setText(null);\n         setGraphic(null);\n       } else {\n-        left.setText(functionLeft.apply(item));\n-        right.setText(functionRight.apply(item));\n+        if (dualStringListCellController == null) {\n+          dualStringListCellController = uiService.loadFxml(\"theme/dual_string_list_cell.fxml\");", "originalCommit": "1ef426e703f5f2db2988af9b866ff108dc7827d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NzU4Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1693#discussion_r427867582", "bodyText": "yes, this is essentially the same as u did...", "author": "1-alex98", "createdAt": "2020-05-20T09:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxMjAyMw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/fx/DualStringListCell.java b/src/main/java/com/faforever/client/fx/DualStringListCell.java\nindex 5d0d3c1b..9e1d20c6 100644\n--- a/src/main/java/com/faforever/client/fx/DualStringListCell.java\n+++ b/src/main/java/com/faforever/client/fx/DualStringListCell.java\n", "chunk": "@@ -30,6 +31,7 @@ public class DualStringListCell<T> extends ListCell<T> {\n           dualStringListCellController = uiService.loadFxml(\"theme/dual_string_list_cell.fxml\");\n         }\n         dualStringListCellController.setLeftText(functionLeft.apply(item));\n+        dualStringListCellController.setWebViewToolTip(functionWebViewToolTip.apply(item));\n         dualStringListCellController.setRightText(functionRight.apply(item));\n         // copy font styles\n         dualStringListCellController.applyFont(getFont());\n", "next_change": {"commit": "ab30d2e3bc9bf702daf06a9fb22f26aa72be3147", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/fx/DualStringListCell.java b/src/main/java/com/faforever/client/fx/DualStringListCell.java\nindex 9e1d20c6..6ede1501 100644\n--- a/src/main/java/com/faforever/client/fx/DualStringListCell.java\n+++ b/src/main/java/com/faforever/client/fx/DualStringListCell.java\n", "chunk": "@@ -22,20 +21,20 @@ public class DualStringListCell<T> extends ListCell<T> {\n   @Override\n   protected void updateItem(T item, boolean empty) {\n     super.updateItem(item, empty);\n-    Platform.runLater(() -> {\n+    JavaFxUtil.runLater(() -> {\n       if (empty || item == null) {\n         setText(null);\n         setGraphic(null);\n       } else {\n         if (dualStringListCellController == null) {\n           dualStringListCellController = uiService.loadFxml(\"theme/dual_string_list_cell.fxml\");\n+          // copy font styles\n+          dualStringListCellController.applyFont(getFont());\n+          dualStringListCellController.applyStyleClass(styleClasses);\n         }\n         dualStringListCellController.setLeftText(functionLeft.apply(item));\n         dualStringListCellController.setWebViewToolTip(functionWebViewToolTip.apply(item));\n         dualStringListCellController.setRightText(functionRight.apply(item));\n-        // copy font styles\n-        dualStringListCellController.applyFont(getFont());\n-        dualStringListCellController.applyStyleClass(styleClasses);\n         setGraphic(dualStringListCellController.getRoot());\n       }\n     });\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "383d5d3167faf064420a03ec9722666b1779132a", "message": "Merge commit", "committedDate": null}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "ab30d2e3bc9bf702daf06a9fb22f26aa72be3147", "committedDate": "2022-01-20 19:12:33 -0500", "message": "Fix possible memory leak in CSS Classes of cells (#2524)"}, {"oid": "550b34f19bfc083e97fca094875c169966d4cdb1", "committedDate": "2023-05-28 13:17:11 -0400", "message": "Rework javafxutil static calls (#2982)"}]}]}