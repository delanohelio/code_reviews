{"pr_number": 1803, "pr_title": "Feature/#1781 map gen options ui", "pr_author": "Sheikah45", "pr_createdAt": "2020-06-26T02:04:44Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/1803", "merge_commit": "f47737eccb45180c54d5d346f156d23421d63851", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NjExOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446346119", "body": "I would remove \"minSupportedMajorVersion\" (we have to have basic support all old versions forever to keep replays playable and even if we did we could build that in later) and all the corresponding checks.", "bodyText": "I would remove \"minSupportedMajorVersion\" (we have to have basic support all old versions forever to keep replays playable and even if we did we could build that in later) and all the corresponding checks.", "bodyHTML": "<p dir=\"auto\">I would remove \"minSupportedMajorVersion\" (we have to have basic support all old versions forever to keep replays playable and even if we did we could build that in later) and all the corresponding checks.</p>", "author": "Katharsas", "createdAt": "2020-06-26T18:32:40Z", "path": "src/main/java/com/faforever/client/config/ClientProperties.java", "diffHunk": "@@ -150,6 +150,9 @@\n     private String downloadUrlFormat;\n     private String repoAndOwnerName;\n     private String queryLatestVersionUrl;\n+    private String queryVersionsUrl;\n+    private int maxSupportedMajorVersion;\n+    private int minSupportedMajorVersion;", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzU0NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503544", "bodyText": "Well I think some time in the future old replays will break. I personally thnk that is ok even if it should be avoided", "author": "1-alex98", "createdAt": "2020-06-27T08:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDIyMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446510220", "bodyText": "minSupportedMajorVersion is there as a just in case but never gets triggered since it is set to 0 it is there in case it ever would need to be used..", "author": "Sheikah45", "createdAt": "2020-06-27T10:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NjExOQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "2ed92b26d35186f57197f5912326b4acb1e6ef10", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/config/ClientProperties.java b/src/main/java/com/faforever/client/config/ClientProperties.java\nindex f0667d565..174ba8061 100644\n--- a/src/main/java/com/faforever/client/config/ClientProperties.java\n+++ b/src/main/java/com/faforever/client/config/ClientProperties.java\n", "chunk": "@@ -155,11 +193,33 @@ public class ClientProperties {\n     private int minSupportedMajorVersion;\n   }\n \n+  @Data\n+  public static class FAFDebugger {\n+    private String downloadUrlFormat;\n+    private String repoAndOwnerName;\n+    private String queryLatestVersionUrl;\n+  }\n+\n   @Data\n   public static class Discord {\n     private String applicationId;\n     private String smallImageKey;\n     private String bigImageKey;\n     private String discordPrereleaseFeedbackChannelUrl;\n+    /** URL to join the FAF Discord server. */\n+    private String joinUrl;\n+  }\n+\n+  @Data\n+  public static class Statping {\n+    private String apiRoot;\n+  }\n+\n+  @Data\n+  public static class Oauth {\n+    private String baseUrl;\n+    private String redirectUrl;\n+    private String clientId;\n+    private String scopes;\n   }\n }\n", "next_change": {"commit": "fb1a7dcc58b10241195bd8c590a8d29ec5ae89b2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/config/ClientProperties.java b/src/main/java/com/faforever/client/config/ClientProperties.java\nindex 174ba8061..1de3fd173 100644\n--- a/src/main/java/com/faforever/client/config/ClientProperties.java\n+++ b/src/main/java/com/faforever/client/config/ClientProperties.java\n", "chunk": "@@ -218,7 +220,8 @@ public class ClientProperties {\n   @Data\n   public static class Oauth {\n     private String baseUrl;\n-    private String redirectUrl;\n+    /** The redirect URI to use instead of the ones provided by remote preferences. */\n+    private URI redirectUri = URI.create(\"\");\n     private String clientId;\n     private String scopes;\n   }\n", "next_change": {"commit": "a9e84a9f68878d57386ae84c5c8befe765e9e2c8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/config/ClientProperties.java b/src/main/java/com/faforever/client/config/ClientProperties.java\nindex 1de3fd173..cd05ec8cf 100644\n--- a/src/main/java/com/faforever/client/config/ClientProperties.java\n+++ b/src/main/java/com/faforever/client/config/ClientProperties.java\n", "chunk": "@@ -224,5 +224,6 @@ public class ClientProperties {\n     private URI redirectUri = URI.create(\"\");\n     private String clientId;\n     private String scopes;\n+    private int timeoutMilliseconds;\n   }\n }\n", "next_change": {"commit": "23258c2581f16ace422cd94f4fb65d4b656b805d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/config/ClientProperties.java b/src/main/java/com/faforever/client/config/ClientProperties.java\nindex cd05ec8cf..e2a9bb0e5 100644\n--- a/src/main/java/com/faforever/client/config/ClientProperties.java\n+++ b/src/main/java/com/faforever/client/config/ClientProperties.java\n", "chunk": "@@ -224,6 +223,5 @@ public class ClientProperties {\n     private URI redirectUri = URI.create(\"\");\n     private String clientId;\n     private String scopes;\n-    private int timeoutMilliseconds;\n   }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "55e9126262d9dd0e39ce0b37c96478638888ec7f", "committedDate": "2020-09-14 11:14:09 +0200", "message": "Update download urls"}, {"oid": "380f0e0872bf8e9772af03c5e509be61ddc7aaf5", "committedDate": "2020-09-14 11:50:09 +0200", "message": "Add report button to player context menu"}, {"oid": "5b29289e64c4f5fe80a59bf9f18da2c4749abc00", "committedDate": "2020-09-22 18:54:02 +0200", "message": "join discord button"}, {"oid": "535bc671466b809ba6041f214304a80e4098d27e", "committedDate": "2020-12-01 18:54:24 -0500", "message": "Add mod rules button and update urls (#2048)"}, {"oid": "b66517cb03bb60f6c566e341fd6b9e15b0b14bd7", "committedDate": "2021-04-11 10:40:37 -0400", "message": "Ensure remote config used on auto login (#2206)"}, {"oid": "9653a226f9b0238b7692400162268b46bfa257f5", "committedDate": "2021-07-08 09:17:06 -0400", "message": "Use hydra user service to login (#2175)"}, {"oid": "f0355f64a7c1d1d5feecc1ed15b87679ba03007e", "committedDate": "2021-08-18 07:42:41 -0400", "message": "Remove server status link (#2331)"}, {"oid": "a09c272399c9868fd2e8196a417c0e8a08345d3d", "committedDate": "2021-08-21 07:41:58 -0400", "message": "Use reactive webclient for Api calls (#2329)"}, {"oid": "84d36a92905e2466d5adcde341b956ee9fbce9ce", "committedDate": "2021-09-13 07:23:23 -0400", "message": "Feature/#2333 status indicator (#2334)"}, {"oid": "297d2aab08f267d5377604a609d6c9a0ee0459f3", "committedDate": "2021-10-12 12:20:40 -0400", "message": "Remove mentions of Downlord from the client"}, {"oid": "95f076684874487d6664e711d38cd6bb5dc1dc89", "committedDate": "2021-10-12 12:20:40 -0400", "message": "Remove more downlord"}, {"oid": "a533a83a05718466c0fa1153f60b227bce6564f7", "committedDate": "2021-10-14 22:59:52 -0400", "message": "Add retry to 503 api status and map errors properly (#2385)"}, {"oid": "2ed92b26d35186f57197f5912326b4acb1e6ef10", "committedDate": "2022-01-21 22:45:00 -0500", "message": "Add option to run with the FAFDebugger (#2532)"}, {"oid": "fb1a7dcc58b10241195bd8c590a8d29ec5ae89b2", "committedDate": "2022-02-11 16:53:33 -0500", "message": "Replace embedded login web view with login via browser (#2338)"}, {"oid": "a9e84a9f68878d57386ae84c5c8befe765e9e2c8", "committedDate": "2022-02-17 22:13:01 -0500", "message": "Close login ports and send failure html (#2565)"}, {"oid": "273a82ba05b7926d3983674d97605ceebaedc076", "committedDate": "2022-03-01 23:19:16 +0100", "message": "ICE adapter debug window (#2580)"}, {"oid": "23258c2581f16ace422cd94f4fb65d4b656b805d", "committedDate": "2022-04-06 22:23:47 -0400", "message": "Only use one redirect uri per login (#2644)"}, {"oid": "d1bda0c6960e6ad884c89f1fa9ec3485d4401334", "committedDate": "2022-04-30 18:36:19 -0400", "message": "Restore Game Session and Lobby connection properly (#2681)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0ODM3MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446348371", "body": "Doesnt this imply that this code needs to be adjusted whenever the major version changes? Why not check for 0 and then do the old way, so we dont need to adjust this on version 2,3 etc. ?", "bodyText": "Doesnt this imply that this code needs to be adjusted whenever the major version changes? Why not check for 0 and then do the old way, so we dont need to adjust this on version 2,3 etc. ?", "bodyHTML": "<p dir=\"auto\">Doesnt this imply that this code needs to be adjusted whenever the major version changes? Why not check for 0 and then do the old way, so we dont need to adjust this on version 2,3 etc. ?</p>", "author": "Katharsas", "createdAt": "2020-06-26T18:37:39Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n+      if (majorVersion.equals(\"1\")) {", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDYwNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446510606", "bodyText": "Makes sense done", "author": "Sheikah45", "createdAt": "2020-06-27T10:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0ODM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3944e033d992d0f59cf00fcf0d25162457230414", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 894d5185..135ed7ee 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -385,18 +386,8 @@ public class CreateGameController implements Controller<Pane> {\n \n   private void onGenerateMap() {\n     try {\n-      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n-      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n-      if (majorVersion.equals(\"1\")) {\n-        GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n-\n-        Pane root = generateMapController.getRoot();\n-        generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n-        generateMapController.setOnCloseButtonClickedListener(dialog::close);\n-\n-        root.requestFocus();\n-      } else {\n+      ComparableVersion generatorVersion = mapGeneratorService.getGeneratorVersion();\n+      if (generatorVersion.compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n", "next_change": {"commit": "73693dce16a21a72c922930d6928c0cae6087a5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 135ed7ee7..688f3543f 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -386,8 +386,8 @@ public class CreateGameController implements Controller<Pane> {\n \n   private void onGenerateMap() {\n     try {\n-      ComparableVersion generatorVersion = mapGeneratorService.getGeneratorVersion();\n-      if (generatorVersion.compareTo(new ComparableVersion(\"1\")) < 0) {\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n", "next_change": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 688f3543f..365347191 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -380,24 +376,26 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n       mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n       if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n             mapListView.getItems().stream()\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 894d51850..489939536 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -379,15 +388,29 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n-      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n-      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n-      if (majorVersion.equals(\"1\")) {\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n+          });\n+        });\n+      } else {\n         GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n \n         Pane root = generateMapController.getRoot();\n", "next_change": {"commit": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 489939536..f0641b6e9 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -415,7 +370,7 @@ public class CreateGameController implements Controller<Pane> {\n \n         Pane root = generateMapController.getRoot();\n         generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n+        Dialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generateMap.dialog\"));\n         generateMapController.setOnCloseButtonClickedListener(dialog::close);\n \n         root.requestFocus();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f0641b6e9..52d009762 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,8 +380,8 @@ public class CreateGameController implements Controller<Pane> {\n         root.requestFocus();\n       }\n     } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.error(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 52d009762..e43aa35d8 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -390,13 +405,30 @@ public class CreateGameController implements Controller<Pane> {\n         .map(ModVersion::getUid)\n         .collect(Collectors.toSet());\n \n+    Integer minRating = null;\n+    Integer maxRating = null;\n+    boolean enforceRating;\n+\n+    if (!minRankingTextField.getText().isEmpty()) {\n+      minRating = Integer.parseInt(minRankingTextField.getText());\n+    }\n+\n+    if(!maxRankingTextField.getText().isEmpty()) {\n+      maxRating = Integer.parseInt(maxRankingTextField.getText());\n+    }\n+\n+    enforceRating = enforceRankingCheckBox.isSelected();\n+\n     NewGameInfo newGameInfo = new NewGameInfo(\n         titleTextField.getText(),\n         Strings.emptyToNull(passwordTextField.getText()),\n         featuredModListView.getSelectionModel().getSelectedItem(),\n         mapListView.getSelectionModel().getSelectedItem().getFolderName(),\n         mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC);\n+        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n+        minRating,\n+        maxRating,\n+        enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n       log.warn(\"Game could not be hosted\", throwable);\n", "next_change": {"commit": "a99d0a4f294dc25d60995684c232ddcf3567211c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e43aa35d8..24649c91a 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -435,8 +444,6 @@ public class CreateGameController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n-\n-    onCloseButtonClicked();\n   }\n \n   public Pane getRoot() {\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 24649c91a..e91f62a57 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -440,7 +479,7 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      log.warn(\"Game could not be hosted\", throwable);\n+      log.error(\"Game could not be hosted\", throwable);\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e91f62a57..96c446e17 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -479,8 +492,13 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n+      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      if (throwable instanceof NotifiableException) {\n+        notificationService.addErrorNotification((NotifiableException) throwable);\n+      } else {\n+        notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      }\n       return null;\n     });\n   }\n", "next_change": {"commit": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 96c446e17..77426f0de 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -480,22 +462,15 @@ public class CreateGameController implements Controller<Pane> {\n \n     enforceRating = enforceRankingCheckBox.isSelected();\n \n-    NewGameInfo newGameInfo = new NewGameInfo(\n-        titleTextField.getText().trim(),\n-        Strings.emptyToNull(passwordTextField.getText()),\n-        featuredModListView.getSelectionModel().getSelectedItem(),\n-        mapVersion.getFolderName(),\n-        mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n-        minRating,\n-        maxRating,\n-        enforceRating);\n+    NewGameInfo newGameInfo = new NewGameInfo(titleTextField.getText()\n+        .trim(), Strings.emptyToNull(passwordTextField.getText()), featuredModListView.getSelectionModel()\n+        .getSelectedItem(), mapVersion.getFolderName(), mods, onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC, minRating, maxRating, enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+      throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      if (throwable instanceof NotifiableException) {\n-        notificationService.addErrorNotification((NotifiableException) throwable);\n+      if (throwable instanceof NotifiableException notifiableException) {\n+        notificationService.addErrorNotification(notifiableException);\n       } else {\n         notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDc0MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446350740", "body": "Are you sure this check is not already made by the game and replay services? It should be imo. Have you tried removing this and removing the installation setting and the trying to play?", "bodyText": "Are you sure this check is not already made by the game and replay services? It should be imo. Have you tried removing this and removing the installation setting and the trying to play?", "bodyHTML": "<p dir=\"auto\">Are you sure this check is not already made by the game and replay services? It should be imo. Have you tried removing this and removing the installation setting and the trying to play?</p>", "author": "Katharsas", "createdAt": "2020-06-26T18:43:04Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n+      preferenceUpdateListener = preferences -> {\n+        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NDA1NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446544055", "bodyText": "Removed", "author": "Sheikah45", "createdAt": "2020-06-27T16:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "3944e033d992d0f59cf00fcf0d25162457230414", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12e8808d..71e0fe40 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -71,21 +74,10 @@ public class GenerateMapController implements Controller<Pane> {\n   private boolean initialized;\n \n   public void initialize() {\n-    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n-      preferenceUpdateListener = preferences -> {\n-        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n-          initialized = true;\n-\n-          Platform.runLater(this::init);\n-        }\n-      };\n-      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n-    } else {\n-      init();\n-    }\n+    init();\n   }\n \n-  public void init() {\n+  private void init() {\n     initSpawnCountSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n", "next_change": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -57,27 +43,19 @@ public class GenerateMapController implements Controller<Pane> {\n   public Spinner<Integer> spawnCountSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n \n   public void initialize() {\n-    init();\n-  }\n-\n-  private void init() {\n     initSpawnCountSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n", "next_change": {"commit": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex ebdde210e..7615184a5 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -54,9 +58,12 @@ public class GenerateMapController implements Controller<Pane> {\n   public CheckBox rampRandom;\n   public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "5e3e526df2481369493481e684879926b9c96fb2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 7615184a5..2abcb07ef 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -72,33 +72,17 @@ public class GenerateMapController implements Controller<Pane> {\n \n   private void initSpawnCountSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty;\n-    if (mapSizeProperty.equals(\"5km\")) {\n-      spawnCountProperty = 2;\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, spawnCountProperty, 2));\n-    } else {\n-      spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n-    }\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n     generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n   }\n \n   private void initMapSizeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n     String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<String>(validMapSizes));\n+    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n-    mapSizeSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, 2, 2));\n-      } else if (oldValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountSpinner.getValue(), 2));\n-      }\n-      generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n-    });\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": {"commit": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 2abcb07ef..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -83,6 +89,7 @@ public class GenerateMapController implements Controller<Pane> {\n     mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n+    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12e8808db..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -1,92 +1,74 @@\n package com.faforever.client.game;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.DualStringListCell;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.map.MapBean;\n import com.faforever.client.map.generator.MapGeneratorService;\n-import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.map.generator.OutdatedVersionException;\n+import com.faforever.client.map.generator.UnsupportedVersionException;\n import com.faforever.client.notification.NotificationService;\n import com.faforever.client.preferences.GeneratorPrefs;\n-import com.faforever.client.preferences.PreferenceUpdateListener;\n import com.faforever.client.preferences.PreferencesService;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.jfoenix.controls.JFXButton;\n-import com.jfoenix.controls.JFXTextField;\n import javafx.application.Platform;\n+import javafx.beans.binding.Bindings;\n import javafx.collections.FXCollections;\n-import javafx.collections.transformation.FilteredList;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.Button;\n import javafx.scene.control.CheckBox;\n-import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.Spinner;\n import javafx.scene.control.Slider;\n-import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Spinner;\n import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n-import javafx.scene.input.KeyCode;\n+import javafx.scene.control.SpinnerValueFactory.ListSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n import javafx.scene.layout.Pane;\n import javafx.util.StringConverter;\n import lombok.RequiredArgsConstructor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.lang.invoke.MethodHandles;\n-import java.lang.ref.WeakReference;\n-import java.util.Objects;\n+import java.security.InvalidParameterException;\n import java.util.Random;\n-import java.util.function.Function;\n+import java.util.concurrent.CompletableFuture;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @RequiredArgsConstructor\n+@Slf4j\n public class GenerateMapController implements Controller<Pane> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private final PreferencesService preferencesService;\n   private final NotificationService notificationService;\n   private final MapGeneratorService mapGeneratorService;\n   public CreateGameController createGameController;\n   public Pane generateMapRoot;\n-  public JFXButton generateMapButton;\n-  public JFXTextField previousMapName;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n   public Spinner<Integer> spawnCountSpinner;\n+  public Spinner<String> mapSizeSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterSliderBox;\n+  public HBox waterRandomBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainSliderBox;\n+  public HBox mountainRandomBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauSliderBox;\n+  public HBox plateauRandomBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampSliderBox;\n+  public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n-    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n-      preferenceUpdateListener = preferences -> {\n-        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n-          initialized = true;\n-\n-          Platform.runLater(this::init);\n-        }\n-      };\n-      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n-    } else {\n-      init();\n-    }\n-  }\n-\n-  public void init() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -63,8 +63,8 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox rampSliderBox;\n   public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..3d8026cab 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -67,6 +73,7 @@ public class GenerateMapController implements Controller<Pane> {\n   private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n+    initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n     initWaterSlider();\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 3d8026cab..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -76,10 +79,15 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initWaterSlider();\n-    initPlateauSlider();\n-    initMountainSlider();\n-    initRampSlider();\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..613aa52ee 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -79,14 +79,14 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n+    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 613aa52ee..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -88,6 +96,10 @@ public class GenerateMapController implements Controller<Pane> {\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n     initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -80,25 +96,34 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox reclaimSliderBox;\n   public HBox reclaimRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private final int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<Integer> validTeamSizes = FXCollections.observableList(IntStream.range(0, 17)\n+      .filter(value -> value != 1)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableTeamSizes = new FilteredList<>(validTeamSizes);\n+  private final ObservableList<Integer> validSpawnCount = FXCollections.observableList(IntStream.range(2, 17)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableSpawnCounts = new FilteredList<>(validSpawnCount);\n+  public Spinner<Integer> numTeamsSpinner;\n \n   public void initialize() {\n-    initGenerationTypeSpinner();\n+    JavaFxUtil.bindManagedToVisible(commandLineLabel, commandLineArgsText, mapStyleComboBox, mapStyleLabel);\n+    initCommandlineArgs();\n+    initGenerationTypeComboBox();\n+    initMapStyleComboBox();\n+    initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n-    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n         mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n         reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n", "next_change": {"commit": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 318081216..528613ac4 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -113,18 +114,12 @@ public class GenerateMapController implements Controller<Pane> {\n     initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n-        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n-        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n-        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n-        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n-        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n-        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(), waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(), plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(), mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(), rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(), mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(), reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDkwNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446350905", "body": "private", "bodyText": "private", "bodyHTML": "<p dir=\"auto\">private</p>", "author": "Katharsas", "createdAt": "2020-06-26T18:43:29Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n+      preferenceUpdateListener = preferences -> {\n+        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n+          initialized = true;\n+\n+          Platform.runLater(this::init);\n+        }\n+      };\n+      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n+    } else {\n+      init();\n+    }\n+  }\n+\n+  public void init() {", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODM3NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446508374", "bodyText": "Will do", "author": "Sheikah45", "createdAt": "2020-06-27T10:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3944e033d992d0f59cf00fcf0d25162457230414", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12e8808d..71e0fe40 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -71,21 +74,10 @@ public class GenerateMapController implements Controller<Pane> {\n   private boolean initialized;\n \n   public void initialize() {\n-    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n-      preferenceUpdateListener = preferences -> {\n-        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n-          initialized = true;\n-\n-          Platform.runLater(this::init);\n-        }\n-      };\n-      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n-    } else {\n-      init();\n-    }\n+    init();\n   }\n \n-  public void init() {\n+  private void init() {\n     initSpawnCountSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n", "next_change": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -57,27 +43,19 @@ public class GenerateMapController implements Controller<Pane> {\n   public Spinner<Integer> spawnCountSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n \n   public void initialize() {\n-    init();\n-  }\n-\n-  private void init() {\n     initSpawnCountSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n", "next_change": {"commit": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex ebdde210e..7615184a5 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -54,9 +58,12 @@ public class GenerateMapController implements Controller<Pane> {\n   public CheckBox rampRandom;\n   public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "5e3e526df2481369493481e684879926b9c96fb2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 7615184a5..2abcb07ef 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -72,33 +72,17 @@ public class GenerateMapController implements Controller<Pane> {\n \n   private void initSpawnCountSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty;\n-    if (mapSizeProperty.equals(\"5km\")) {\n-      spawnCountProperty = 2;\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, spawnCountProperty, 2));\n-    } else {\n-      spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n-    }\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n     generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n   }\n \n   private void initMapSizeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n     String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<String>(validMapSizes));\n+    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n-    mapSizeSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, 2, 2));\n-      } else if (oldValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountSpinner.getValue(), 2));\n-      }\n-      generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n-    });\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": {"commit": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 2abcb07ef..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -83,6 +89,7 @@ public class GenerateMapController implements Controller<Pane> {\n     mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n+    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12e8808db..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -1,92 +1,74 @@\n package com.faforever.client.game;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.DualStringListCell;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.map.MapBean;\n import com.faforever.client.map.generator.MapGeneratorService;\n-import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.map.generator.OutdatedVersionException;\n+import com.faforever.client.map.generator.UnsupportedVersionException;\n import com.faforever.client.notification.NotificationService;\n import com.faforever.client.preferences.GeneratorPrefs;\n-import com.faforever.client.preferences.PreferenceUpdateListener;\n import com.faforever.client.preferences.PreferencesService;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.jfoenix.controls.JFXButton;\n-import com.jfoenix.controls.JFXTextField;\n import javafx.application.Platform;\n+import javafx.beans.binding.Bindings;\n import javafx.collections.FXCollections;\n-import javafx.collections.transformation.FilteredList;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.Button;\n import javafx.scene.control.CheckBox;\n-import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.Spinner;\n import javafx.scene.control.Slider;\n-import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Spinner;\n import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n-import javafx.scene.input.KeyCode;\n+import javafx.scene.control.SpinnerValueFactory.ListSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n import javafx.scene.layout.Pane;\n import javafx.util.StringConverter;\n import lombok.RequiredArgsConstructor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.lang.invoke.MethodHandles;\n-import java.lang.ref.WeakReference;\n-import java.util.Objects;\n+import java.security.InvalidParameterException;\n import java.util.Random;\n-import java.util.function.Function;\n+import java.util.concurrent.CompletableFuture;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @RequiredArgsConstructor\n+@Slf4j\n public class GenerateMapController implements Controller<Pane> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private final PreferencesService preferencesService;\n   private final NotificationService notificationService;\n   private final MapGeneratorService mapGeneratorService;\n   public CreateGameController createGameController;\n   public Pane generateMapRoot;\n-  public JFXButton generateMapButton;\n-  public JFXTextField previousMapName;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n   public Spinner<Integer> spawnCountSpinner;\n+  public Spinner<String> mapSizeSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterSliderBox;\n+  public HBox waterRandomBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainSliderBox;\n+  public HBox mountainRandomBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauSliderBox;\n+  public HBox plateauRandomBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampSliderBox;\n+  public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n-    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n-      preferenceUpdateListener = preferences -> {\n-        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n-          initialized = true;\n-\n-          Platform.runLater(this::init);\n-        }\n-      };\n-      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n-    } else {\n-      init();\n-    }\n-  }\n-\n-  public void init() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -63,8 +63,8 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox rampSliderBox;\n   public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..3d8026cab 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -67,6 +73,7 @@ public class GenerateMapController implements Controller<Pane> {\n   private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n+    initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n     initWaterSlider();\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 3d8026cab..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -76,10 +79,15 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initWaterSlider();\n-    initPlateauSlider();\n-    initMountainSlider();\n-    initRampSlider();\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..613aa52ee 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -79,14 +79,14 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n+    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 613aa52ee..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -88,6 +96,10 @@ public class GenerateMapController implements Controller<Pane> {\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n     initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -80,25 +96,34 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox reclaimSliderBox;\n   public HBox reclaimRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private final int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<Integer> validTeamSizes = FXCollections.observableList(IntStream.range(0, 17)\n+      .filter(value -> value != 1)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableTeamSizes = new FilteredList<>(validTeamSizes);\n+  private final ObservableList<Integer> validSpawnCount = FXCollections.observableList(IntStream.range(2, 17)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableSpawnCounts = new FilteredList<>(validSpawnCount);\n+  public Spinner<Integer> numTeamsSpinner;\n \n   public void initialize() {\n-    initGenerationTypeSpinner();\n+    JavaFxUtil.bindManagedToVisible(commandLineLabel, commandLineArgsText, mapStyleComboBox, mapStyleLabel);\n+    initCommandlineArgs();\n+    initGenerationTypeComboBox();\n+    initMapStyleComboBox();\n+    initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n-    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n         mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n         reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n", "next_change": {"commit": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 318081216..528613ac4 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -113,18 +114,12 @@ public class GenerateMapController implements Controller<Pane> {\n     initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n-        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n-        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n-        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n-        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n-        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n-        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(), waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(), plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(), mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(), rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(), mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(), reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MzM2MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446353361", "body": "space around \">\", same below", "bodyText": "space around \">\", same below", "bodyHTML": "<p dir=\"auto\">space around \"&gt;\", same below</p>", "author": "Katharsas", "createdAt": "2020-06-26T18:48:57Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -127,17 +144,53 @@ protected String queryNewestVersion() {\n     return mainObject.get(\"tag_name\").getAsString();\n   }\n \n+  @VisibleForTesting\n+  public String queryMaxSupportedVersion() {\n+    String version = queryNewestVersion();\n+    String majorVersion = version.split(\"\\\\.\")[0];\n+    if (Integer.parseInt(majorVersion)>clientProperties.getMapGenerator().getMaxSupportedMajorVersion() ||", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzA3NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446523075", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-27T12:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MzM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3944e033d992d0f59cf00fcf0d25162457230414", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 651f6d37..f768a29a 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -126,49 +142,58 @@ public class MapGeneratorService implements InitializingBean {\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n     String optionString = Base64.getEncoder().encodeToString(optionArray);\n-    return generateMap(queryMaxSupportedVersion(),seedString+'_'+optionString);\n+    return generateMap(generatorVersion,seedString+'_'+optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  protected ComparableVersion queryNewestVersion() {\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n+    headers.add(\"If-Modified-Since\", getLatestLastModified());\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n     ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n+    setLatestLastModified(dateFormat.format(new Date(response.getHeaders().getLastModified())));\n+    if (response.hasBody()) {\n+      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n+      JsonObject mainObject = jsonElement.getAsJsonObject();\n \n-    return mainObject.get(\"tag_name\").getAsString();\n+      return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n+    }\n+    return generatorVersion;\n   }\n \n   @VisibleForTesting\n-  public String queryMaxSupportedVersion() {\n-    String version = queryNewestVersion();\n-    String majorVersion = version.split(\"\\\\.\")[0];\n-    if (Integer.parseInt(majorVersion)>clientProperties.getMapGenerator().getMaxSupportedMajorVersion() ||\n-        Integer.parseInt(majorVersion)<clientProperties.getMapGenerator().getMinSupportedMajorVersion()) {\n+  public ComparableVersion queryMaxSupportedVersion() {\n+\n+    ComparableVersion version = queryNewestVersion();\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion()+1));\n+\n+    if (maxVersion.compareTo(version) < 0 || version.compareTo(minVersion) < 0) {\n \n       RestTemplate restTemplate = new RestTemplate();\n \n       LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n       headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n+      headers.add(\"If-Modified-Since\", getReleasesLastModified());\n       HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n       ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-      for(JsonElement element: jsonElement.getAsJsonArray()) {\n-        JsonObject mainObject = element.getAsJsonObject();\n-        version = mainObject.get(\"tag_name\").getAsString();\n-        majorVersion = version.split(\"\\\\.\")[0];\n-        if (Integer.parseInt(majorVersion)<clientProperties.getMapGenerator().getMaxSupportedMajorVersion() &&\n-            Integer.parseInt(majorVersion)>clientProperties.getMapGenerator().getMinSupportedMajorVersion()) {\n-          return version;\n+      setReleasesLastModified(dateFormat.format(new Date(response.getHeaders().getLastModified())));\n+      if(response.hasBody()){\n+        JsonElement jsonElement = new JsonParser().parse(response.getBody());\n+        for (JsonElement element : jsonElement.getAsJsonArray()) {\n+          JsonObject mainObject = element.getAsJsonObject();\n+          version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n+          if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+            return version;\n+          }\n         }\n+        throw new RuntimeException(\"No Valid Generator Version Found\");\n       }\n-      throw new RuntimeException(\"No Valid Generator Version Found\");\n     }\n     return version;\n   }\n", "next_change": {"commit": "73693dce16a21a72c922930d6928c0cae6087a5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex f768a29ae..6918c6ed3 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -178,22 +180,18 @@ public class MapGeneratorService implements InitializingBean {\n \n       LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n       headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-      headers.add(\"If-Modified-Since\", getReleasesLastModified());\n       HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n       ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-      setReleasesLastModified(dateFormat.format(new Date(response.getHeaders().getLastModified())));\n-      if(response.hasBody()){\n-        JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-        for (JsonElement element : jsonElement.getAsJsonArray()) {\n-          JsonObject mainObject = element.getAsJsonObject();\n-          version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n-          if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n-            return version;\n-          }\n+      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n+      for(JsonElement element: jsonElement.getAsJsonArray()) {\n+        JsonObject mainObject = element.getAsJsonObject();\n+        version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n+        if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+          return version;\n         }\n-        throw new RuntimeException(\"No Valid Generator Version Found\");\n       }\n+      throw new RuntimeException(\"No Valid Generator Version Found\");\n     }\n     return version;\n   }\n", "next_change": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6918c6ed3..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -147,59 +136,38 @@ public class MapGeneratorService implements InitializingBean {\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n     String optionString = Base64.getEncoder().encodeToString(optionArray);\n-    return generateMap(version,seedString+'_'+optionString);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n   @Cacheable(CacheNames.MAP_GENERATOR)\n-  protected ComparableVersion queryNewestVersion() {\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n-  }\n-\n-  @VisibleForTesting\n-  @Cacheable(CacheNames.MAP_GENERATOR)\n-  public ComparableVersion queryMaxSupportedVersion() {\n-\n-    ComparableVersion version = queryNewestVersion();\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion()+1));\n-\n-    if (maxVersion.compareTo(version) < 0 || version.compareTo(minVersion) < 0) {\n-\n-      RestTemplate restTemplate = new RestTemplate();\n-\n-      LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-      headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-      HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-      ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-      for(JsonElement element: jsonElement.getAsJsonArray()) {\n-        JsonObject mainObject = element.getAsJsonObject();\n-        version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n-        if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n-          return version;\n-        }\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTagName());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n       }\n-      throw new RuntimeException(\"No Valid Generator Version Found\");\n     }\n-    return version;\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 651f6d373..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -118,94 +120,85 @@ public class MapGeneratorService implements InitializingBean {\n     ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n-    return generateMap(queryMaxSupportedVersion(),seedString);\n+    return generateMap(generatorVersion, seedString);\n   }\n \n   public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n     ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n     String optionString = Base64.getEncoder().encodeToString(optionArray);\n-    return generateMap(queryMaxSupportedVersion(),seedString+'_'+optionString);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n-  }\n-\n-  @VisibleForTesting\n-  public String queryMaxSupportedVersion() {\n-    String version = queryNewestVersion();\n-    String majorVersion = version.split(\"\\\\.\")[0];\n-    if (Integer.parseInt(majorVersion)>clientProperties.getMapGenerator().getMaxSupportedMajorVersion() ||\n-        Integer.parseInt(majorVersion)<clientProperties.getMapGenerator().getMinSupportedMajorVersion()) {\n-\n-      RestTemplate restTemplate = new RestTemplate();\n-\n-      LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-      headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-      HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-      ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-      for(JsonElement element: jsonElement.getAsJsonArray()) {\n-        JsonObject mainObject = element.getAsJsonObject();\n-        version = mainObject.get(\"tag_name\").getAsString();\n-        majorVersion = version.split(\"\\\\.\")[0];\n-        if (Integer.parseInt(majorVersion)<clientProperties.getMapGenerator().getMaxSupportedMajorVersion() &&\n-            Integer.parseInt(majorVersion)>clientProperties.getMapGenerator().getMinSupportedMajorVersion()) {\n-          return version;\n-        }\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTagName());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n       }\n-      throw new RuntimeException(\"No Valid Generator Version Found\");\n     }\n-    return version;\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n-\n   public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n-    String majorVersion = version.split(\"\\\\.\")[0];\n-    if (Integer.parseInt(majorVersion)>clientProperties.getMapGenerator().getMaxSupportedMajorVersion()){\n-      notificationService.addImmediateErrorNotification(new IllegalArgumentException(\"Map Version Not Supported\"), \"mapGenerator.tooNewVersion\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n-    if (Integer.parseInt(majorVersion)<clientProperties.getMapGenerator().getMinSupportedMajorVersion()) {\n-      notificationService.addImmediateErrorNotification(new IllegalArgumentException(\"Map Version Not supported\"), \"mapGenerator.tooOldVersion\");\n+    if (version.compareTo(minVersion) < 0) {\n+      return CompletableFuture.failedFuture(new OutdatedVersionException(\"Old Version not supported\"));\n     }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + version));\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version);\n+      downloadMapGeneratorTask.setVersion(version.toString());\n       downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -199,47 +221,13 @@ public class MapGeneratorService implements InitializingBean {\n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n       downloadMapGeneratorTask.setVersion(version.toString());\n-      downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n+      return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n-      downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n+      return CompletableFuture.completedFuture(null);\n     }\n-\n-    String[] seedParts = seedAndOptions.split(\"_\");\n-    String seedString = seedParts[0];\n-\n-    String mapFilename;\n-    String seed;\n-\n-    try {\n-      seed = Long.toString(Long.parseLong(seedString));\n-    } catch (NumberFormatException nfe) {\n-      byte[] seedBytes = Base64.getDecoder().decode(seedString);\n-      ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n-      seed = Long.toString(seedWrapper.getLong());\n-    }\n-\n-    // Check if major version 0 which requires numeric seed\n-    if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/', '^');\n-    } else {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seedAndOptions).replace('/', '^');\n-    }\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(version.toString());\n-    generateMapTask.setSeed(seed);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    generateMapTask.setMapFilename(mapFilename);\n-\n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<Void> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      generateMapFuture.join();\n-      return mapFilename;\n-    });\n   }\n \n-\n   public boolean isGeneratedMap(String mapName) {\n     return GENERATED_MAP_PATTERN.matcher(mapName).matches();\n   }\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -228,6 +259,34 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n+  public CompletableFuture<List<String>> getGeneratorStyles() {\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadTask;\n+\n+    if (!Files.exists(generatorExecutablePath)) {\n+      if (!VERSION_PATTERN.matcher(generatorVersion.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", generatorVersion);\n+        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + generatorVersion));\n+      }\n+\n+      log.info(\"Downloading MapGenerator version: {}\", generatorVersion);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      downloadMapGeneratorTask.setVersion(generatorVersion.toString());\n+      downloadTask = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n+    } else {\n+      downloadTask = CompletableFuture.completedFuture(null);\n+    }\n+    return downloadTask.thenCompose(aVoid -> {\n+      GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n+      generatorOptionsTask.setVersion(generatorVersion);\n+      generatorOptionsTask.setQuery(\"--styles\");\n+      generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n+      return taskService.submitTask(generatorOptionsTask).getFuture();\n+    });\n+  }\n+\n   public boolean isGeneratedMap(String mapName) {\n     return GENERATED_MAP_PATTERN.matcher(mapName).matches();\n   }\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -259,32 +184,26 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n-  public CompletableFuture<List<String>> getGeneratorStyles() {\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadTask;\n+  @Cacheable(value = CacheNames.MAP_GENERATOR, sync = true)\n+  public CompletableFuture<Void> getNewestGenerator() {\n+    return queryMaxSupportedVersion()\n+        .thenAccept(newVersion -> defaultGeneratorVersion = newVersion)\n+        .thenCompose(aVoid -> downloadGeneratorIfNecessary(defaultGeneratorVersion));\n+  }\n \n-    if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(generatorVersion.toString()).matches()) {\n-        log.warn(\"Unsupported generator version: {}\", generatorVersion);\n-        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + generatorVersion));\n-      }\n+  public CompletableFuture<List<String>> getGeneratorStyles() {\n+    Assert.checkNullIllegalState(defaultGeneratorVersion, \"Generator version not set\");\n+    GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n+    generatorOptionsTask.setVersion(defaultGeneratorVersion);\n+    generatorOptionsTask.setQuery(\"--styles\");\n+    generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    return taskService.submitTask(generatorOptionsTask).getFuture();\n+  }\n \n-      log.info(\"Downloading MapGenerator version: {}\", generatorVersion);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(generatorVersion.toString());\n-      downloadTask = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n-    } else {\n-      downloadTask = CompletableFuture.completedFuture(null);\n-    }\n-    return downloadTask.thenCompose(aVoid -> {\n-      GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n-      generatorOptionsTask.setVersion(generatorVersion);\n-      generatorOptionsTask.setQuery(\"--styles\");\n-      generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n-      return taskService.submitTask(generatorOptionsTask).getFuture();\n-    });\n+  @NotNull\n+  public Path getGeneratorExecutablePath(ComparableVersion defaultGeneratorVersion) {\n+    return preferencesService.getPreferences().getData().getMapGeneratorDirectory().resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n   }\n \n   public boolean isGeneratedMap(String mapName) {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -203,7 +197,8 @@ public class MapGeneratorService implements DisposableBean {\n \n   @NotNull\n   public Path getGeneratorExecutablePath(ComparableVersion defaultGeneratorVersion) {\n-    return preferencesService.getPreferences().getData().getMapGeneratorDirectory().resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n+    return dataPrefs.getMapGeneratorDirectory()\n+        .resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n   }\n \n   public boolean isGeneratedMap(String mapName) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzcxOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503719", "body": "I think we have a class that can parse semantic versions... If we do, which I think use that", "bodyText": "I think we have a class that can parse semantic versions... If we do, which I think use that", "bodyHTML": "<p dir=\"auto\">I think we have a class that can parse semantic versions... If we do, which I think use that</p>", "author": "1-alex98", "createdAt": "2020-06-27T09:00:48Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzE2OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446523168", "bodyText": "Used ComparableVersion", "author": "Sheikah45", "createdAt": "2020-06-27T12:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3944e033d992d0f59cf00fcf0d25162457230414", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 894d5185..135ed7ee 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -385,18 +386,8 @@ public class CreateGameController implements Controller<Pane> {\n \n   private void onGenerateMap() {\n     try {\n-      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n-      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n-      if (majorVersion.equals(\"1\")) {\n-        GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n-\n-        Pane root = generateMapController.getRoot();\n-        generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n-        generateMapController.setOnCloseButtonClickedListener(dialog::close);\n-\n-        root.requestFocus();\n-      } else {\n+      ComparableVersion generatorVersion = mapGeneratorService.getGeneratorVersion();\n+      if (generatorVersion.compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n", "next_change": {"commit": "73693dce16a21a72c922930d6928c0cae6087a5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 135ed7ee7..688f3543f 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -386,8 +386,8 @@ public class CreateGameController implements Controller<Pane> {\n \n   private void onGenerateMap() {\n     try {\n-      ComparableVersion generatorVersion = mapGeneratorService.getGeneratorVersion();\n-      if (generatorVersion.compareTo(new ComparableVersion(\"1\")) < 0) {\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n", "next_change": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 688f3543f..365347191 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -380,24 +376,26 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n       mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n       if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n             mapListView.getItems().stream()\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 894d51850..489939536 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -379,15 +388,29 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n-      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n-      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n-      if (majorVersion.equals(\"1\")) {\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n+          });\n+        });\n+      } else {\n         GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n \n         Pane root = generateMapController.getRoot();\n", "next_change": {"commit": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 489939536..f0641b6e9 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -415,7 +370,7 @@ public class CreateGameController implements Controller<Pane> {\n \n         Pane root = generateMapController.getRoot();\n         generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n+        Dialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generateMap.dialog\"));\n         generateMapController.setOnCloseButtonClickedListener(dialog::close);\n \n         root.requestFocus();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f0641b6e9..52d009762 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,8 +380,8 @@ public class CreateGameController implements Controller<Pane> {\n         root.requestFocus();\n       }\n     } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.error(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 52d009762..e43aa35d8 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -390,13 +405,30 @@ public class CreateGameController implements Controller<Pane> {\n         .map(ModVersion::getUid)\n         .collect(Collectors.toSet());\n \n+    Integer minRating = null;\n+    Integer maxRating = null;\n+    boolean enforceRating;\n+\n+    if (!minRankingTextField.getText().isEmpty()) {\n+      minRating = Integer.parseInt(minRankingTextField.getText());\n+    }\n+\n+    if(!maxRankingTextField.getText().isEmpty()) {\n+      maxRating = Integer.parseInt(maxRankingTextField.getText());\n+    }\n+\n+    enforceRating = enforceRankingCheckBox.isSelected();\n+\n     NewGameInfo newGameInfo = new NewGameInfo(\n         titleTextField.getText(),\n         Strings.emptyToNull(passwordTextField.getText()),\n         featuredModListView.getSelectionModel().getSelectedItem(),\n         mapListView.getSelectionModel().getSelectedItem().getFolderName(),\n         mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC);\n+        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n+        minRating,\n+        maxRating,\n+        enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n       log.warn(\"Game could not be hosted\", throwable);\n", "next_change": {"commit": "a99d0a4f294dc25d60995684c232ddcf3567211c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e43aa35d8..24649c91a 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -435,8 +444,6 @@ public class CreateGameController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n-\n-    onCloseButtonClicked();\n   }\n \n   public Pane getRoot() {\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 24649c91a..e91f62a57 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -440,7 +479,7 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      log.warn(\"Game could not be hosted\", throwable);\n+      log.error(\"Game could not be hosted\", throwable);\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e91f62a57..96c446e17 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -479,8 +492,13 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n+      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      if (throwable instanceof NotifiableException) {\n+        notificationService.addErrorNotification((NotifiableException) throwable);\n+      } else {\n+        notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      }\n       return null;\n     });\n   }\n", "next_change": {"commit": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 96c446e17..77426f0de 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -480,22 +462,15 @@ public class CreateGameController implements Controller<Pane> {\n \n     enforceRating = enforceRankingCheckBox.isSelected();\n \n-    NewGameInfo newGameInfo = new NewGameInfo(\n-        titleTextField.getText().trim(),\n-        Strings.emptyToNull(passwordTextField.getText()),\n-        featuredModListView.getSelectionModel().getSelectedItem(),\n-        mapVersion.getFolderName(),\n-        mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n-        minRating,\n-        maxRating,\n-        enforceRating);\n+    NewGameInfo newGameInfo = new NewGameInfo(titleTextField.getText()\n+        .trim(), Strings.emptyToNull(passwordTextField.getText()), featuredModListView.getSelectionModel()\n+        .getSelectedItem(), mapVersion.getFolderName(), mods, onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC, minRating, maxRating, enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+      throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      if (throwable instanceof NotifiableException) {\n-        notificationService.addErrorNotification((NotifiableException) throwable);\n+      if (throwable instanceof NotifiableException notifiableException) {\n+        notificationService.addErrorNotification(notifiableException);\n       } else {\n         notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzgwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503808", "body": "We are trying to get away from JFX since a few weeks. Can u use the notification and a Immediate notification with custom UI. @micheljung what should he do?", "bodyText": "We are trying to get away from JFX since a few weeks. Can u use the notification and a Immediate notification with custom UI. @micheljung what should he do?", "bodyHTML": "<p dir=\"auto\">We are trying to get away from JFX since a few weeks. Can u use the notification and a Immediate notification with custom UI. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/micheljung/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/micheljung\">@micheljung</a> what should he do?</p>", "author": "1-alex98", "createdAt": "2020-06-27T09:02:21Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n+      if (majorVersion.equals(\"1\")) {\n+        GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n+\n+        Pane root = generateMapController.getRoot();\n+        generateMapController.setCreateGameController(this);\n+        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzE5NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446523194", "bodyText": "Decided to keep JFXDialog for now.", "author": "Sheikah45", "createdAt": "2020-06-27T12:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "3944e033d992d0f59cf00fcf0d25162457230414", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 894d5185..135ed7ee 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -385,18 +386,8 @@ public class CreateGameController implements Controller<Pane> {\n \n   private void onGenerateMap() {\n     try {\n-      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n-      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n-      if (majorVersion.equals(\"1\")) {\n-        GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n-\n-        Pane root = generateMapController.getRoot();\n-        generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n-        generateMapController.setOnCloseButtonClickedListener(dialog::close);\n-\n-        root.requestFocus();\n-      } else {\n+      ComparableVersion generatorVersion = mapGeneratorService.getGeneratorVersion();\n+      if (generatorVersion.compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n", "next_change": {"commit": "73693dce16a21a72c922930d6928c0cae6087a5c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 135ed7ee7..688f3543f 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -386,8 +386,8 @@ public class CreateGameController implements Controller<Pane> {\n \n   private void onGenerateMap() {\n     try {\n-      ComparableVersion generatorVersion = mapGeneratorService.getGeneratorVersion();\n-      if (generatorVersion.compareTo(new ComparableVersion(\"1\")) < 0) {\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n", "next_change": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 688f3543f..365347191 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -380,24 +376,26 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n       mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n       if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n             mapListView.getItems().stream()\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 894d51850..489939536 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -379,15 +388,29 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n-      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n-      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n-      if (majorVersion.equals(\"1\")) {\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n+          });\n+        });\n+      } else {\n         GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n \n         Pane root = generateMapController.getRoot();\n", "next_change": {"commit": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 489939536..f0641b6e9 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -415,7 +370,7 @@ public class CreateGameController implements Controller<Pane> {\n \n         Pane root = generateMapController.getRoot();\n         generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n+        Dialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generateMap.dialog\"));\n         generateMapController.setOnCloseButtonClickedListener(dialog::close);\n \n         root.requestFocus();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f0641b6e9..52d009762 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,8 +380,8 @@ public class CreateGameController implements Controller<Pane> {\n         root.requestFocus();\n       }\n     } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.error(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 52d009762..e43aa35d8 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -390,13 +405,30 @@ public class CreateGameController implements Controller<Pane> {\n         .map(ModVersion::getUid)\n         .collect(Collectors.toSet());\n \n+    Integer minRating = null;\n+    Integer maxRating = null;\n+    boolean enforceRating;\n+\n+    if (!minRankingTextField.getText().isEmpty()) {\n+      minRating = Integer.parseInt(minRankingTextField.getText());\n+    }\n+\n+    if(!maxRankingTextField.getText().isEmpty()) {\n+      maxRating = Integer.parseInt(maxRankingTextField.getText());\n+    }\n+\n+    enforceRating = enforceRankingCheckBox.isSelected();\n+\n     NewGameInfo newGameInfo = new NewGameInfo(\n         titleTextField.getText(),\n         Strings.emptyToNull(passwordTextField.getText()),\n         featuredModListView.getSelectionModel().getSelectedItem(),\n         mapListView.getSelectionModel().getSelectedItem().getFolderName(),\n         mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC);\n+        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n+        minRating,\n+        maxRating,\n+        enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n       log.warn(\"Game could not be hosted\", throwable);\n", "next_change": {"commit": "a99d0a4f294dc25d60995684c232ddcf3567211c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e43aa35d8..24649c91a 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -435,8 +444,6 @@ public class CreateGameController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n-\n-    onCloseButtonClicked();\n   }\n \n   public Pane getRoot() {\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 24649c91a..e91f62a57 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -440,7 +479,7 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      log.warn(\"Game could not be hosted\", throwable);\n+      log.error(\"Game could not be hosted\", throwable);\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e91f62a57..96c446e17 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -479,8 +492,13 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n+      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      if (throwable instanceof NotifiableException) {\n+        notificationService.addErrorNotification((NotifiableException) throwable);\n+      } else {\n+        notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      }\n       return null;\n     });\n   }\n", "next_change": {"commit": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 96c446e17..77426f0de 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -480,22 +462,15 @@ public class CreateGameController implements Controller<Pane> {\n \n     enforceRating = enforceRankingCheckBox.isSelected();\n \n-    NewGameInfo newGameInfo = new NewGameInfo(\n-        titleTextField.getText().trim(),\n-        Strings.emptyToNull(passwordTextField.getText()),\n-        featuredModListView.getSelectionModel().getSelectedItem(),\n-        mapVersion.getFolderName(),\n-        mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n-        minRating,\n-        maxRating,\n-        enforceRating);\n+    NewGameInfo newGameInfo = new NewGameInfo(titleTextField.getText()\n+        .trim(), Strings.emptyToNull(passwordTextField.getText()), featuredModListView.getSelectionModel()\n+        .getSelectedItem(), mapVersion.getFolderName(), mods, onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC, minRating, maxRating, enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+      throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      if (throwable instanceof NotifiableException) {\n-        notificationService.addErrorNotification((NotifiableException) throwable);\n+      if (throwable instanceof NotifiableException notifiableException) {\n+        notificationService.addErrorNotification(notifiableException);\n       } else {\n         notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 894d51850..489939536 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -396,23 +419,10 @@ public class CreateGameController implements Controller<Pane> {\n         generateMapController.setOnCloseButtonClickedListener(dialog::close);\n \n         root.requestFocus();\n-      } else {\n-        mapGeneratorService.generateMap().thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            initMapSelection();\n-            mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n       }\n     } catch (Exception e) {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      logger.error(\"Map generation failed\", e);\n+      log.error(\"Map generation failed\", e);\n     }\n   }\n \n", "next_change": {"commit": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 489939536..101da0159 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -427,15 +383,7 @@ public class CreateGameController implements Controller<Pane> {\n   }\n \n   public void onCreateButtonClicked() {\n-    ObservableList<ModVersion> selectedModVersions = modListView.getSelectionModel().getSelectedItems();\n-\n-    try {\n-      modService.overrideActivatedMods(modListView.getSelectionModel().getSelectedItems());\n-    } catch (IOException e) {\n-      log.warn(\"Activated mods could not be updated\", e);\n-    }\n-\n-    Set<String> simMods = selectedModVersions.stream()\n+    Set<String> mods = modManagerController.apply().stream()\n         .map(ModVersion::getUid)\n         .collect(Collectors.toSet());\n \n", "next_change": {"commit": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 101da0159..e43aa35d8 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -387,23 +405,34 @@ public class CreateGameController implements Controller<Pane> {\n         .map(ModVersion::getUid)\n         .collect(Collectors.toSet());\n \n+    Integer minRating = null;\n+    Integer maxRating = null;\n+    boolean enforceRating;\n+\n+    if (!minRankingTextField.getText().isEmpty()) {\n+      minRating = Integer.parseInt(minRankingTextField.getText());\n+    }\n+\n+    if(!maxRankingTextField.getText().isEmpty()) {\n+      maxRating = Integer.parseInt(maxRankingTextField.getText());\n+    }\n+\n+    enforceRating = enforceRankingCheckBox.isSelected();\n+\n     NewGameInfo newGameInfo = new NewGameInfo(\n         titleTextField.getText(),\n         Strings.emptyToNull(passwordTextField.getText()),\n         featuredModListView.getSelectionModel().getSelectedItem(),\n         mapListView.getSelectionModel().getSelectedItem().getFolderName(),\n         mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC);\n+        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n+        minRating,\n+        maxRating,\n+        enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n       log.warn(\"Game could not be hosted\", throwable);\n-      notificationService.addNotification(\n-          new ImmediateErrorNotification(\n-              i18n.get(\"errorTitle\"),\n-              i18n.get(\"game.create.failed\"),\n-              throwable,\n-              i18n, reportingService\n-          ));\n+      notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n \n", "next_change": {"commit": "a99d0a4f294dc25d60995684c232ddcf3567211c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e43aa35d8..24649c91a 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -435,8 +444,6 @@ public class CreateGameController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n-\n-    onCloseButtonClicked();\n   }\n \n   public Pane getRoot() {\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 24649c91a..e91f62a57 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -440,7 +479,7 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      log.warn(\"Game could not be hosted\", throwable);\n+      log.error(\"Game could not be hosted\", throwable);\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e91f62a57..96c446e17 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -479,8 +492,13 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n+      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      if (throwable instanceof NotifiableException) {\n+        notificationService.addErrorNotification((NotifiableException) throwable);\n+      } else {\n+        notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      }\n       return null;\n     });\n   }\n", "next_change": {"commit": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 96c446e17..77426f0de 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -480,22 +462,15 @@ public class CreateGameController implements Controller<Pane> {\n \n     enforceRating = enforceRankingCheckBox.isSelected();\n \n-    NewGameInfo newGameInfo = new NewGameInfo(\n-        titleTextField.getText().trim(),\n-        Strings.emptyToNull(passwordTextField.getText()),\n-        featuredModListView.getSelectionModel().getSelectedItem(),\n-        mapVersion.getFolderName(),\n-        mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n-        minRating,\n-        maxRating,\n-        enforceRating);\n+    NewGameInfo newGameInfo = new NewGameInfo(titleTextField.getText()\n+        .trim(), Strings.emptyToNull(passwordTextField.getText()), featuredModListView.getSelectionModel()\n+        .getSelectedItem(), mapVersion.getFolderName(), mods, onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC, minRating, maxRating, enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+      throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      if (throwable instanceof NotifiableException) {\n-        notificationService.addErrorNotification((NotifiableException) throwable);\n+      if (throwable instanceof NotifiableException notifiableException) {\n+        notificationService.addErrorNotification(notifiableException);\n       } else {\n         notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503846", "body": "Use @Slf4j annotation instead", "bodyText": "Use @slf4j annotation instead", "bodyHTML": "<p dir=\"auto\">Use <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/slf4j/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/slf4j\">@slf4j</a> annotation instead</p>", "author": "1-alex98", "createdAt": "2020-06-27T09:02:55Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTc5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446509792", "bodyText": "I am unclear what using @slf4j should replace if I remove the logger then what should be used on line 227?", "author": "Sheikah45", "createdAt": "2020-06-27T10:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMTYxNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446511617", "bodyText": "https://projectlombok.org/api/lombok/extern/slf4j/Slf4j.html", "author": "1-alex98", "createdAt": "2020-06-27T10:43:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0MzQzOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446543439", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-27T16:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3944e033d992d0f59cf00fcf0d25162457230414", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12e8808d..71e0fe40 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -41,16 +44,16 @@ import java.util.function.Function;\n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @RequiredArgsConstructor\n+@Slf4j\n public class GenerateMapController implements Controller<Pane> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private final PreferencesService preferencesService;\n   private final NotificationService notificationService;\n   private final MapGeneratorService mapGeneratorService;\n   public CreateGameController createGameController;\n   public Pane generateMapRoot;\n-  public JFXButton generateMapButton;\n-  public JFXTextField previousMapName;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n   public Spinner<Integer> spawnCountSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n", "next_change": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -57,27 +43,19 @@ public class GenerateMapController implements Controller<Pane> {\n   public Spinner<Integer> spawnCountSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n \n   public void initialize() {\n-    init();\n-  }\n-\n-  private void init() {\n     initSpawnCountSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n", "next_change": {"commit": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex ebdde210e..7615184a5 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -54,9 +58,12 @@ public class GenerateMapController implements Controller<Pane> {\n   public CheckBox rampRandom;\n   public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "5e3e526df2481369493481e684879926b9c96fb2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 7615184a5..2abcb07ef 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -72,33 +72,17 @@ public class GenerateMapController implements Controller<Pane> {\n \n   private void initSpawnCountSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty;\n-    if (mapSizeProperty.equals(\"5km\")) {\n-      spawnCountProperty = 2;\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, spawnCountProperty, 2));\n-    } else {\n-      spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n-    }\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n     generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n   }\n \n   private void initMapSizeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n     String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<String>(validMapSizes));\n+    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n-    mapSizeSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, 2, 2));\n-      } else if (oldValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountSpinner.getValue(), 2));\n-      }\n-      generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n-    });\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": {"commit": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 2abcb07ef..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -83,6 +89,7 @@ public class GenerateMapController implements Controller<Pane> {\n     mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n+    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12e8808db..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -1,92 +1,74 @@\n package com.faforever.client.game;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.DualStringListCell;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.map.MapBean;\n import com.faforever.client.map.generator.MapGeneratorService;\n-import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.map.generator.OutdatedVersionException;\n+import com.faforever.client.map.generator.UnsupportedVersionException;\n import com.faforever.client.notification.NotificationService;\n import com.faforever.client.preferences.GeneratorPrefs;\n-import com.faforever.client.preferences.PreferenceUpdateListener;\n import com.faforever.client.preferences.PreferencesService;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.jfoenix.controls.JFXButton;\n-import com.jfoenix.controls.JFXTextField;\n import javafx.application.Platform;\n+import javafx.beans.binding.Bindings;\n import javafx.collections.FXCollections;\n-import javafx.collections.transformation.FilteredList;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.Button;\n import javafx.scene.control.CheckBox;\n-import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.Spinner;\n import javafx.scene.control.Slider;\n-import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Spinner;\n import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n-import javafx.scene.input.KeyCode;\n+import javafx.scene.control.SpinnerValueFactory.ListSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n import javafx.scene.layout.Pane;\n import javafx.util.StringConverter;\n import lombok.RequiredArgsConstructor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.lang.invoke.MethodHandles;\n-import java.lang.ref.WeakReference;\n-import java.util.Objects;\n+import java.security.InvalidParameterException;\n import java.util.Random;\n-import java.util.function.Function;\n+import java.util.concurrent.CompletableFuture;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @RequiredArgsConstructor\n+@Slf4j\n public class GenerateMapController implements Controller<Pane> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private final PreferencesService preferencesService;\n   private final NotificationService notificationService;\n   private final MapGeneratorService mapGeneratorService;\n   public CreateGameController createGameController;\n   public Pane generateMapRoot;\n-  public JFXButton generateMapButton;\n-  public JFXTextField previousMapName;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n   public Spinner<Integer> spawnCountSpinner;\n+  public Spinner<String> mapSizeSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterSliderBox;\n+  public HBox waterRandomBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainSliderBox;\n+  public HBox mountainRandomBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauSliderBox;\n+  public HBox plateauRandomBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampSliderBox;\n+  public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n-    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n-      preferenceUpdateListener = preferences -> {\n-        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n-          initialized = true;\n-\n-          Platform.runLater(this::init);\n-        }\n-      };\n-      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n-    } else {\n-      init();\n-    }\n-  }\n-\n-  public void init() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -63,8 +63,8 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox rampSliderBox;\n   public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..3d8026cab 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -67,6 +73,7 @@ public class GenerateMapController implements Controller<Pane> {\n   private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n+    initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n     initWaterSlider();\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 3d8026cab..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -76,10 +79,15 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initWaterSlider();\n-    initPlateauSlider();\n-    initMountainSlider();\n-    initRampSlider();\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..613aa52ee 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -79,14 +79,14 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n+    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 613aa52ee..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -88,6 +96,10 @@ public class GenerateMapController implements Controller<Pane> {\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n     initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -80,25 +96,34 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox reclaimSliderBox;\n   public HBox reclaimRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private final int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<Integer> validTeamSizes = FXCollections.observableList(IntStream.range(0, 17)\n+      .filter(value -> value != 1)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableTeamSizes = new FilteredList<>(validTeamSizes);\n+  private final ObservableList<Integer> validSpawnCount = FXCollections.observableList(IntStream.range(2, 17)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableSpawnCounts = new FilteredList<>(validSpawnCount);\n+  public Spinner<Integer> numTeamsSpinner;\n \n   public void initialize() {\n-    initGenerationTypeSpinner();\n+    JavaFxUtil.bindManagedToVisible(commandLineLabel, commandLineArgsText, mapStyleComboBox, mapStyleLabel);\n+    initCommandlineArgs();\n+    initGenerationTypeComboBox();\n+    initMapStyleComboBox();\n+    initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n-    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n         mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n         reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n", "next_change": {"commit": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 318081216..528613ac4 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -113,18 +114,12 @@ public class GenerateMapController implements Controller<Pane> {\n     initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n-        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n-        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n-        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n-        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n-        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n-        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(), waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(), plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(), mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(), rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(), mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(), reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg4NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503884", "body": "Use Button and TextField. At least in the Controller", "bodyText": "Use Button and TextField. At least in the Controller", "bodyHTML": "<p dir=\"auto\">Use Button and TextField. At least in the Controller</p>", "author": "1-alex98", "createdAt": "2020-06-27T09:03:20Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTY4MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446509681", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-27T10:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "3944e033d992d0f59cf00fcf0d25162457230414", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12e8808d..71e0fe40 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -41,16 +44,16 @@ import java.util.function.Function;\n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @RequiredArgsConstructor\n+@Slf4j\n public class GenerateMapController implements Controller<Pane> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private final PreferencesService preferencesService;\n   private final NotificationService notificationService;\n   private final MapGeneratorService mapGeneratorService;\n   public CreateGameController createGameController;\n   public Pane generateMapRoot;\n-  public JFXButton generateMapButton;\n-  public JFXTextField previousMapName;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n   public Spinner<Integer> spawnCountSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n", "next_change": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -57,27 +43,19 @@ public class GenerateMapController implements Controller<Pane> {\n   public Spinner<Integer> spawnCountSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n \n   public void initialize() {\n-    init();\n-  }\n-\n-  private void init() {\n     initSpawnCountSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n", "next_change": {"commit": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex ebdde210e..7615184a5 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -54,9 +58,12 @@ public class GenerateMapController implements Controller<Pane> {\n   public CheckBox rampRandom;\n   public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "5e3e526df2481369493481e684879926b9c96fb2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 7615184a5..2abcb07ef 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -72,33 +72,17 @@ public class GenerateMapController implements Controller<Pane> {\n \n   private void initSpawnCountSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty;\n-    if (mapSizeProperty.equals(\"5km\")) {\n-      spawnCountProperty = 2;\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, spawnCountProperty, 2));\n-    } else {\n-      spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n-    }\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n     generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n   }\n \n   private void initMapSizeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n     String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<String>(validMapSizes));\n+    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n-    mapSizeSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, 2, 2));\n-      } else if (oldValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountSpinner.getValue(), 2));\n-      }\n-      generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n-    });\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": {"commit": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 2abcb07ef..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -83,6 +89,7 @@ public class GenerateMapController implements Controller<Pane> {\n     mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n+    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12e8808db..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -1,92 +1,74 @@\n package com.faforever.client.game;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.DualStringListCell;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.map.MapBean;\n import com.faforever.client.map.generator.MapGeneratorService;\n-import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.map.generator.OutdatedVersionException;\n+import com.faforever.client.map.generator.UnsupportedVersionException;\n import com.faforever.client.notification.NotificationService;\n import com.faforever.client.preferences.GeneratorPrefs;\n-import com.faforever.client.preferences.PreferenceUpdateListener;\n import com.faforever.client.preferences.PreferencesService;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.jfoenix.controls.JFXButton;\n-import com.jfoenix.controls.JFXTextField;\n import javafx.application.Platform;\n+import javafx.beans.binding.Bindings;\n import javafx.collections.FXCollections;\n-import javafx.collections.transformation.FilteredList;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.Button;\n import javafx.scene.control.CheckBox;\n-import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.Spinner;\n import javafx.scene.control.Slider;\n-import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Spinner;\n import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n-import javafx.scene.input.KeyCode;\n+import javafx.scene.control.SpinnerValueFactory.ListSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n import javafx.scene.layout.Pane;\n import javafx.util.StringConverter;\n import lombok.RequiredArgsConstructor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.lang.invoke.MethodHandles;\n-import java.lang.ref.WeakReference;\n-import java.util.Objects;\n+import java.security.InvalidParameterException;\n import java.util.Random;\n-import java.util.function.Function;\n+import java.util.concurrent.CompletableFuture;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @RequiredArgsConstructor\n+@Slf4j\n public class GenerateMapController implements Controller<Pane> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private final PreferencesService preferencesService;\n   private final NotificationService notificationService;\n   private final MapGeneratorService mapGeneratorService;\n   public CreateGameController createGameController;\n   public Pane generateMapRoot;\n-  public JFXButton generateMapButton;\n-  public JFXTextField previousMapName;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n   public Spinner<Integer> spawnCountSpinner;\n+  public Spinner<String> mapSizeSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterSliderBox;\n+  public HBox waterRandomBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainSliderBox;\n+  public HBox mountainRandomBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauSliderBox;\n+  public HBox plateauRandomBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampSliderBox;\n+  public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n-    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n-      preferenceUpdateListener = preferences -> {\n-        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n-          initialized = true;\n-\n-          Platform.runLater(this::init);\n-        }\n-      };\n-      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n-    } else {\n-      init();\n-    }\n-  }\n-\n-  public void init() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -63,8 +63,8 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox rampSliderBox;\n   public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..3d8026cab 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -67,6 +73,7 @@ public class GenerateMapController implements Controller<Pane> {\n   private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n+    initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n     initWaterSlider();\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 3d8026cab..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -76,10 +79,15 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initWaterSlider();\n-    initPlateauSlider();\n-    initMountainSlider();\n-    initRampSlider();\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..613aa52ee 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -79,14 +79,14 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n+    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 613aa52ee..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -88,6 +96,10 @@ public class GenerateMapController implements Controller<Pane> {\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n     initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -80,25 +96,34 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox reclaimSliderBox;\n   public HBox reclaimRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private final int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<Integer> validTeamSizes = FXCollections.observableList(IntStream.range(0, 17)\n+      .filter(value -> value != 1)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableTeamSizes = new FilteredList<>(validTeamSizes);\n+  private final ObservableList<Integer> validSpawnCount = FXCollections.observableList(IntStream.range(2, 17)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableSpawnCounts = new FilteredList<>(validSpawnCount);\n+  public Spinner<Integer> numTeamsSpinner;\n \n   public void initialize() {\n-    initGenerationTypeSpinner();\n+    JavaFxUtil.bindManagedToVisible(commandLineLabel, commandLineArgsText, mapStyleComboBox, mapStyleLabel);\n+    initCommandlineArgs();\n+    initGenerationTypeComboBox();\n+    initMapStyleComboBox();\n+    initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n-    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n         mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n         reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n", "next_change": {"commit": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 318081216..528613ac4 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -113,18 +114,12 @@ public class GenerateMapController implements Controller<Pane> {\n     initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n-        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n-        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n-        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n-        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n-        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n-        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(), waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(), plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(), mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(), rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(), mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(), reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"oid": "3944e033d992d0f59cf00fcf0d25162457230414", "url": "https://github.com/FAForever/downlords-faf-client/commit/3944e033d992d0f59cf00fcf0d25162457230414", "message": "Add promptText in map Name field", "committedDate": "2020-06-27T16:45:38Z", "type": "forcePushed"}, {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c", "url": "https://github.com/FAForever/downlords-faf-client/commit/73693dce16a21a72c922930d6928c0cae6087a5c", "message": "Remove unused default values", "committedDate": "2020-06-28T12:47:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446649635", "body": "unused, try turning on the option when commiting that removes unused imports", "bodyText": "unused, try turning on the option when commiting that removes unused imports", "bodyHTML": "<p dir=\"auto\">unused, try turning on the option when commiting that removes unused imports</p>", "author": "1-alex98", "createdAt": "2020-06-28T13:14:07Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -26,6 +26,7 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXDialog;", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mzg3MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653871", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTEwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r448219108", "bodyText": "Not done", "author": "1-alex98", "createdAt": "2020-07-01T08:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5NTA0Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r448295043", "bodyText": "The JFXDialog is used by uiService.showInDialog on line 406 which I thought we were going to leave in if not I can try to find a way to remove it.", "author": "Sheikah45", "createdAt": "2020-07-01T11:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 688f3543f..101da0159 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -30,39 +31,29 @@ import com.jfoenix.controls.JFXDialog;\n import javafx.application.Platform;\n import javafx.beans.binding.Bindings;\n import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n import javafx.collections.transformation.FilteredList;\n+import javafx.css.PseudoClass;\n import javafx.scene.control.Button;\n import javafx.scene.control.CheckBox;\n import javafx.scene.control.Label;\n-import javafx.scene.control.ListCell;\n import javafx.scene.control.ListView;\n import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.SelectionMode;\n import javafx.scene.control.TextField;\n import javafx.scene.image.Image;\n import javafx.scene.input.KeyCode;\n-import javafx.scene.input.MouseEvent;\n import javafx.scene.layout.Background;\n import javafx.scene.layout.BackgroundImage;\n import javafx.scene.layout.BackgroundSize;\n import javafx.scene.layout.Pane;\n import javafx.scene.layout.StackPane;\n-import javafx.util.Callback;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.maven.artifact.versioning.ComparableVersion;\n-import org.jetbrains.annotations.NotNull;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n import java.lang.ref.WeakReference;\n-import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n", "next_change": {"commit": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 101da0159..e0b915e50 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -46,14 +44,18 @@ import javafx.scene.layout.BackgroundImage;\n import javafx.scene.layout.BackgroundSize;\n import javafx.scene.layout.Pane;\n import javafx.scene.layout.StackPane;\n+import javafx.stage.Popup;\n+import javafx.stage.PopupWindow.AnchorLocation;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.jetbrains.annotations.NotNull;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n import java.lang.ref.WeakReference;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e0b915e50..f5d891810 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -55,6 +58,7 @@ import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n import java.lang.ref.WeakReference;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n", "next_change": {"commit": "726b641c46b5bda3a528885bef8e42439a650c11", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f5d891810..d8116c178 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -58,6 +60,7 @@ import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n import java.lang.ref.WeakReference;\n+import java.nio.charset.StandardCharsets;\n import java.util.Comparator;\n import java.util.List;\n import java.util.Objects;\n", "next_change": {"commit": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex d8116c178..230f5b5a3 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -53,13 +52,13 @@ import javafx.stage.Popup;\n import javafx.stage.PopupWindow.AnchorLocation;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.jetbrains.annotations.NotNull;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.lang.ref.WeakReference;\n import java.nio.charset.StandardCharsets;\n import java.util.Comparator;\n import java.util.List;\n", "next_change": {"commit": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 230f5b5a3..a0bc1d354 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -59,6 +59,7 @@ import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n+import java.nio.charset.CharsetEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.Comparator;\n import java.util.List;\n", "next_change": {"commit": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex a0bc1d354..7ac57d2b0 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -56,6 +56,7 @@ import org.apache.commons.lang3.StringUtils;\n import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.jetbrains.annotations.NotNull;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n", "next_change": {"commit": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 7ac57d2b0..d8d360d9b 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -56,7 +57,6 @@ import org.apache.commons.lang3.StringUtils;\n import org.apache.maven.artifact.versioning.ComparableVersion;\n import org.jetbrains.annotations.NotNull;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n-import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n", "next_change": {"commit": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex d8d360d9b..3576e766c 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -62,8 +69,8 @@ import org.springframework.stereotype.Component;\n \n import java.nio.charset.CharsetEncoder;\n import java.nio.charset.StandardCharsets;\n+import java.util.Collection;\n import java.util.Comparator;\n-import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f5d891810..d8116c178 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -66,7 +69,6 @@ import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n-import static com.faforever.client.net.ConnectionState.CONNECTED;\n import static javafx.scene.layout.BackgroundPosition.CENTER;\n import static javafx.scene.layout.BackgroundRepeat.NO_REPEAT;\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTk1MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446649950", "body": "remove", "bodyText": "remove", "bodyHTML": "<p dir=\"auto\">remove</p>", "author": "1-alex98", "createdAt": "2020-06-28T13:16:45Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mzg1NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653854", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -1,45 +1,31 @@\n package com.faforever.client.game;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.DualStringListCell;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.map.MapBean;\n import com.faforever.client.map.generator.MapGeneratorService;\n-import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.map.generator.OutdatedVersionException;\n+import com.faforever.client.map.generator.UnsupportedVersionException;\n import com.faforever.client.notification.NotificationService;\n import com.faforever.client.preferences.GeneratorPrefs;\n-import com.faforever.client.preferences.PreferenceUpdateListener;\n import com.faforever.client.preferences.PreferencesService;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.jfoenix.controls.JFXButton;\n-import com.jfoenix.controls.JFXTextField;\n import javafx.application.Platform;\n-import javafx.collections.FXCollections;\n-import javafx.collections.transformation.FilteredList;\n import javafx.scene.control.Button;\n import javafx.scene.control.CheckBox;\n-import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.Spinner;\n import javafx.scene.control.Slider;\n-import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Spinner;\n import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n import javafx.scene.control.TextField;\n-import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.HBox;\n import javafx.scene.layout.Pane;\n import javafx.util.StringConverter;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.lang.invoke.MethodHandles;\n-import java.lang.ref.WeakReference;\n-import java.util.Objects;\n+import java.security.InvalidParameterException;\n import java.util.Random;\n-import java.util.function.Function;\n+import java.util.concurrent.CompletableFuture;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -1,45 +1,35 @@\n package com.faforever.client.game;\n \n import com.faforever.client.fx.Controller;\n-import com.faforever.client.fx.DualStringListCell;\n-import com.faforever.client.fx.JavaFxUtil;\n-import com.faforever.client.map.MapBean;\n import com.faforever.client.map.generator.MapGeneratorService;\n-import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.map.generator.OutdatedVersionException;\n+import com.faforever.client.map.generator.UnsupportedVersionException;\n import com.faforever.client.notification.NotificationService;\n import com.faforever.client.preferences.GeneratorPrefs;\n-import com.faforever.client.preferences.PreferenceUpdateListener;\n import com.faforever.client.preferences.PreferencesService;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.jfoenix.controls.JFXButton;\n-import com.jfoenix.controls.JFXTextField;\n import javafx.application.Platform;\n+import javafx.beans.binding.Bindings;\n import javafx.collections.FXCollections;\n-import javafx.collections.transformation.FilteredList;\n+import javafx.collections.ObservableList;\n import javafx.scene.control.Button;\n import javafx.scene.control.CheckBox;\n-import javafx.scene.control.MultipleSelectionModel;\n-import javafx.scene.control.Spinner;\n import javafx.scene.control.Slider;\n-import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Spinner;\n import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.SpinnerValueFactory.ListSpinnerValueFactory;\n import javafx.scene.control.TextField;\n-import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.HBox;\n import javafx.scene.layout.Pane;\n import javafx.util.StringConverter;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n-import java.lang.invoke.MethodHandles;\n-import java.lang.ref.WeakReference;\n-import java.util.Objects;\n+import java.security.InvalidParameterException;\n import java.util.Random;\n-import java.util.function.Function;\n+import java.util.concurrent.CompletableFuture;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..3d8026cab 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -28,6 +31,7 @@ import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n import java.security.InvalidParameterException;\n+import java.util.BitSet;\n import java.util.Random;\n import java.util.concurrent.CompletableFuture;\n \n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 3d8026cab..a00c37b3f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -31,8 +31,9 @@ import org.springframework.context.annotation.Scope;\n import org.springframework.stereotype.Component;\n \n import java.security.InvalidParameterException;\n-import java.util.BitSet;\n-import java.util.Random;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n \n @Component\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a00c37b3f..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -32,6 +38,7 @@ import org.springframework.stereotype.Component;\n \n import java.security.InvalidParameterException;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n", "next_change": {"commit": "67d64740d9c7ce00614443b9098eedb8178d5f18", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex b6fa5c898..839c9aec2 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -42,6 +42,8 @@ import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n", "next_change": {"commit": "8a4859733e77e568cbb04c4f4390977be27d2066", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 839c9aec2..5ab692dc0 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -51,6 +52,8 @@ import java.util.stream.IntStream;\n @Slf4j\n public class GenerateMapController implements Controller<Pane> {\n \n+  public static final double MIN_MAP_SIZE_STEP = 1.25;\n+  public static final double KM_TO_PIXEL_FACTOR = 51.2;\n   private final PreferencesService preferencesService;\n   private final NotificationService notificationService;\n   private final MapGeneratorService mapGeneratorService;\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 5ab692dc0..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -54,10 +54,12 @@ public class GenerateMapController implements Controller<Pane> {\n \n   public static final double MIN_MAP_SIZE_STEP = 1.25;\n   public static final double KM_TO_PIXEL_FACTOR = 51.2;\n-  private final PreferencesService preferencesService;\n+\n   private final NotificationService notificationService;\n   private final MapGeneratorService mapGeneratorService;\n   private final I18n i18n;\n+  private final GeneratorPrefs generatorPrefs;\n+\n   public CreateGameController createGameController;\n   public Pane generateMapRoot;\n   public Button generateMapButton;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDExOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650119", "body": "ident", "bodyText": "ident", "bodyHTML": "<p dir=\"auto\">ident</p>", "author": "1-alex98", "createdAt": "2020-06-28T13:18:25Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MzgxOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653819", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -158,68 +132,79 @@ public class GenerateMapController implements Controller<Pane> {\n     boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n     rampSlider.setLabelFormatter(getLabelConverter());\n     rampRandom.setSelected(rampRandomProperty);\n-    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n-      rampSlider.setVisible(!newValue);}));\n-    rampSlider.setVisible(!rampRandomProperty);\n     rampSlider.setValue(rampDensityProperty);\n-    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n-      preferencesService.storeInBackground();}));\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n   }\n \n   private byte getSliderValue(Slider slider, CheckBox checkBox) {\n-    if (checkBox.isSelected()){\n+    if (checkBox.isSelected()) {\n       return (byte) new Random().nextInt(127);\n     }\n     return (byte) slider.getValue();\n   }\n \n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n   public void onCloseButtonClicked() {\n     onCloseButtonClickedListener.run();\n   }\n \n   public void onGenerateMapButtonClicked() {\n-    try {\n-      if (!previousMapName.getText().isEmpty()){\n-        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n-      } else {\n-        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n-        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n-        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n         });\n-      }\n-    } catch (Exception e) {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      log.warn(\"Map generation failed\", e);\n     }\n-    onCloseButtonClickedListener.run();\n   }\n \n-  public void setCreateGameController(CreateGameController controller) {\n+  protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -158,68 +157,87 @@ public class GenerateMapController implements Controller<Pane> {\n     boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n     rampSlider.setLabelFormatter(getLabelConverter());\n     rampRandom.setSelected(rampRandomProperty);\n-    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n-      rampSlider.setVisible(!newValue);}));\n-    rampSlider.setVisible(!rampRandomProperty);\n     rampSlider.setValue(rampDensityProperty);\n-    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n-      preferencesService.storeInBackground();}));\n+    rampSliderBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+    rampSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    rampRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private byte getSliderValue(Slider slider, CheckBox checkBox) {\n-    if (checkBox.isSelected()){\n+    if (checkBox.isSelected()) {\n       return (byte) new Random().nextInt(127);\n     }\n     return (byte) slider.getValue();\n   }\n \n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte mapSize = (byte) (mapValues[validMapSizes.indexOf(mapSizeSpinner.getValue())] / 64);\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, mapSize, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n   public void onCloseButtonClicked() {\n     onCloseButtonClickedListener.run();\n   }\n \n   public void onGenerateMapButtonClicked() {\n-    try {\n-      if (!previousMapName.getText().isEmpty()){\n-        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n-      } else {\n-        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n-        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n-        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n+        notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"mapGenerator.invalidName\");\n+        log.warn(\"Invalid Generated Map Name\", new IllegalArgumentException());\n+        return;\n       }\n-    } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n     }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n-  public void setCreateGameController(CreateGameController controller) {\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.warn(\"Map generation failed\", e);\n+    }\n+  }\n+\n+  protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -223,17 +223,17 @@ public class GenerateMapController implements Controller<Pane> {\n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n     if (cause instanceof InvalidParameterException) {\n+      log.warn(\"Map generation failed due to invalid parameter\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof UnsupportedVersionException) {\n+      log.warn(\"Map generation failed due to unsupported version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof OutdatedVersionException) {\n+      log.warn(\"Map generation failed due to outdated version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..a3372a898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -227,10 +222,10 @@ public class GenerateMapController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n     } else if (cause instanceof UnsupportedVersionException) {\n       log.warn(\"Map generation failed due to unsupported version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooNewVersion\");\n     } else if (cause instanceof OutdatedVersionException) {\n       log.warn(\"Map generation failed due to outdated version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooOldVersion\");\n     } else {\n       log.warn(\"Map generation failed\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a3372a898..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -232,10 +280,37 @@ public class GenerateMapController implements Controller<Pane> {\n     }\n   }\n \n+  @VisibleForTesting\n+  void toggleCommandlineInput() {\n+    commandLineLabel.setVisible(!commandLineLabel.isVisible());\n+    commandLineArgsText.setVisible(!commandLineArgsText.isVisible());\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n+  protected void setStyles(List<String> styles) {\n+    styles.add(0, MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    mapStyleComboBox.setItems(FXCollections.observableList(styles));\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGenerator();\n+    String mapStyle = generatorPrefs.getMapStyle();\n+    if (mapStyleComboBox.getItems().contains(mapStyle)) {\n+      mapStyleComboBox.getSelectionModel().select(mapStyle);\n+    } else {\n+      mapStyleComboBox.getSelectionModel().select(MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    }\n+    generatorPrefs.mapStyleProperty().bind(mapStyleComboBox.valueProperty());\n+    mapStyleComboBox.setVisible(true);\n+    mapStyleLabel.setVisible(true);\n+  }\n+\n+  public void onNewLabelClicked(MouseEvent mouseEvent) {\n+    if (mouseEvent.getButton().equals(MouseButton.PRIMARY) && mouseEvent.getClickCount() == 2) {\n+      toggleCommandlineInput();\n+    }\n+  }\n+\n   public Pane getRoot() {\n     return generateMapRoot;\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDE1NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650155", "body": "Byte.MAX_VALUE that exists right?", "bodyText": "Byte.MAX_VALUE that exists right?", "bodyHTML": "<p dir=\"auto\">Byte.MAX_VALUE that exists right?</p>", "author": "1-alex98", "createdAt": "2020-06-28T13:18:50Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });\n+          });\n+        });\n+      } else {\n+        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MzgwMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653800", "bodyText": "Changed", "author": "Sheikah45", "createdAt": "2020-06-28T13:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDE1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -158,68 +132,79 @@ public class GenerateMapController implements Controller<Pane> {\n     boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n     rampSlider.setLabelFormatter(getLabelConverter());\n     rampRandom.setSelected(rampRandomProperty);\n-    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n-      rampSlider.setVisible(!newValue);}));\n-    rampSlider.setVisible(!rampRandomProperty);\n     rampSlider.setValue(rampDensityProperty);\n-    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n-      preferencesService.storeInBackground();}));\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n   }\n \n   private byte getSliderValue(Slider slider, CheckBox checkBox) {\n-    if (checkBox.isSelected()){\n+    if (checkBox.isSelected()) {\n       return (byte) new Random().nextInt(127);\n     }\n     return (byte) slider.getValue();\n   }\n \n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n   public void onCloseButtonClicked() {\n     onCloseButtonClickedListener.run();\n   }\n \n   public void onGenerateMapButtonClicked() {\n-    try {\n-      if (!previousMapName.getText().isEmpty()){\n-        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n-      } else {\n-        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n-        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n-        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n         });\n-      }\n-    } catch (Exception e) {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      log.warn(\"Map generation failed\", e);\n     }\n-    onCloseButtonClickedListener.run();\n   }\n \n-  public void setCreateGameController(CreateGameController controller) {\n+  protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -158,68 +157,87 @@ public class GenerateMapController implements Controller<Pane> {\n     boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n     rampSlider.setLabelFormatter(getLabelConverter());\n     rampRandom.setSelected(rampRandomProperty);\n-    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n-      rampSlider.setVisible(!newValue);}));\n-    rampSlider.setVisible(!rampRandomProperty);\n     rampSlider.setValue(rampDensityProperty);\n-    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n-      preferencesService.storeInBackground();}));\n+    rampSliderBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+    rampSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    rampRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private byte getSliderValue(Slider slider, CheckBox checkBox) {\n-    if (checkBox.isSelected()){\n+    if (checkBox.isSelected()) {\n       return (byte) new Random().nextInt(127);\n     }\n     return (byte) slider.getValue();\n   }\n \n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte mapSize = (byte) (mapValues[validMapSizes.indexOf(mapSizeSpinner.getValue())] / 64);\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, mapSize, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n   public void onCloseButtonClicked() {\n     onCloseButtonClickedListener.run();\n   }\n \n   public void onGenerateMapButtonClicked() {\n-    try {\n-      if (!previousMapName.getText().isEmpty()){\n-        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n-      } else {\n-        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n-        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n-        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n+        notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"mapGenerator.invalidName\");\n+        log.warn(\"Invalid Generated Map Name\", new IllegalArgumentException());\n+        return;\n       }\n-    } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n     }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n-  public void setCreateGameController(CreateGameController controller) {\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.warn(\"Map generation failed\", e);\n+    }\n+  }\n+\n+  protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -223,17 +223,17 @@ public class GenerateMapController implements Controller<Pane> {\n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n     if (cause instanceof InvalidParameterException) {\n+      log.warn(\"Map generation failed due to invalid parameter\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof UnsupportedVersionException) {\n+      log.warn(\"Map generation failed due to unsupported version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof OutdatedVersionException) {\n+      log.warn(\"Map generation failed due to outdated version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..a3372a898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -227,10 +222,10 @@ public class GenerateMapController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n     } else if (cause instanceof UnsupportedVersionException) {\n       log.warn(\"Map generation failed due to unsupported version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooNewVersion\");\n     } else if (cause instanceof OutdatedVersionException) {\n       log.warn(\"Map generation failed due to outdated version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooOldVersion\");\n     } else {\n       log.warn(\"Map generation failed\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a3372a898..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -232,10 +280,37 @@ public class GenerateMapController implements Controller<Pane> {\n     }\n   }\n \n+  @VisibleForTesting\n+  void toggleCommandlineInput() {\n+    commandLineLabel.setVisible(!commandLineLabel.isVisible());\n+    commandLineArgsText.setVisible(!commandLineArgsText.isVisible());\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n+  protected void setStyles(List<String> styles) {\n+    styles.add(0, MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    mapStyleComboBox.setItems(FXCollections.observableList(styles));\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGenerator();\n+    String mapStyle = generatorPrefs.getMapStyle();\n+    if (mapStyleComboBox.getItems().contains(mapStyle)) {\n+      mapStyleComboBox.getSelectionModel().select(mapStyle);\n+    } else {\n+      mapStyleComboBox.getSelectionModel().select(MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    }\n+    generatorPrefs.mapStyleProperty().bind(mapStyleComboBox.valueProperty());\n+    mapStyleComboBox.setVisible(true);\n+    mapStyleLabel.setVisible(true);\n+  }\n+\n+  public void onNewLabelClicked(MouseEvent mouseEvent) {\n+    if (mouseEvent.getButton().equals(MouseButton.PRIMARY) && mouseEvent.getClickCount() == 2) {\n+      toggleCommandlineInput();\n+    }\n+  }\n+\n   public Pane getRoot() {\n     return generateMapRoot;\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDIzNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650237", "body": "indent", "bodyText": "indent", "bodyHTML": "<p dir=\"auto\">indent</p>", "author": "1-alex98", "createdAt": "2020-06-28T13:19:30Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });\n+          });\n+        });\n+      } else {\n+        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n+        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDI0Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650247", "bodyText": "ctrl+alt+L", "author": "1-alex98", "createdAt": "2020-06-28T13:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1NDE5Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446654196", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -158,68 +132,79 @@ public class GenerateMapController implements Controller<Pane> {\n     boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n     rampSlider.setLabelFormatter(getLabelConverter());\n     rampRandom.setSelected(rampRandomProperty);\n-    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n-      rampSlider.setVisible(!newValue);}));\n-    rampSlider.setVisible(!rampRandomProperty);\n     rampSlider.setValue(rampDensityProperty);\n-    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n-      preferencesService.storeInBackground();}));\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n   }\n \n   private byte getSliderValue(Slider slider, CheckBox checkBox) {\n-    if (checkBox.isSelected()){\n+    if (checkBox.isSelected()) {\n       return (byte) new Random().nextInt(127);\n     }\n     return (byte) slider.getValue();\n   }\n \n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n   public void onCloseButtonClicked() {\n     onCloseButtonClickedListener.run();\n   }\n \n   public void onGenerateMapButtonClicked() {\n-    try {\n-      if (!previousMapName.getText().isEmpty()){\n-        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n-      } else {\n-        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n-        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n-        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n         });\n-      }\n-    } catch (Exception e) {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      log.warn(\"Map generation failed\", e);\n     }\n-    onCloseButtonClickedListener.run();\n   }\n \n-  public void setCreateGameController(CreateGameController controller) {\n+  protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 71e0fe407..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -158,68 +157,87 @@ public class GenerateMapController implements Controller<Pane> {\n     boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n     rampSlider.setLabelFormatter(getLabelConverter());\n     rampRandom.setSelected(rampRandomProperty);\n-    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n-      rampSlider.setVisible(!newValue);}));\n-    rampSlider.setVisible(!rampRandomProperty);\n     rampSlider.setValue(rampDensityProperty);\n-    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n-      preferencesService.storeInBackground();}));\n+    rampSliderBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+    rampSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    rampRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private byte getSliderValue(Slider slider, CheckBox checkBox) {\n-    if (checkBox.isSelected()){\n+    if (checkBox.isSelected()) {\n       return (byte) new Random().nextInt(127);\n     }\n     return (byte) slider.getValue();\n   }\n \n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte mapSize = (byte) (mapValues[validMapSizes.indexOf(mapSizeSpinner.getValue())] / 64);\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, mapSize, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n   public void onCloseButtonClicked() {\n     onCloseButtonClickedListener.run();\n   }\n \n   public void onGenerateMapButtonClicked() {\n-    try {\n-      if (!previousMapName.getText().isEmpty()){\n-        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n-      } else {\n-        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n-        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n-        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n-          Platform.runLater(() -> {\n-            createGameController.initMapSelection();\n-            createGameController.mapListView.getItems().stream()\n-                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              createGameController.mapListView.getSelectionModel().select(mapBean);\n-              createGameController.mapListView.scrollTo(mapBean);\n-              createGameController.setSelectedMap(mapBean);\n-            });\n-          });\n-        });\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n+        notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"mapGenerator.invalidName\");\n+        log.warn(\"Invalid Generated Map Name\", new IllegalArgumentException());\n+        return;\n       }\n-    } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n     }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n-  public void setCreateGameController(CreateGameController controller) {\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.warn(\"Map generation failed\", e);\n+    }\n+  }\n+\n+  protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -223,17 +223,17 @@ public class GenerateMapController implements Controller<Pane> {\n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n     if (cause instanceof InvalidParameterException) {\n+      log.warn(\"Map generation failed due to invalid parameter\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof UnsupportedVersionException) {\n+      log.warn(\"Map generation failed due to unsupported version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof OutdatedVersionException) {\n+      log.warn(\"Map generation failed due to outdated version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..a3372a898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -227,10 +222,10 @@ public class GenerateMapController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n     } else if (cause instanceof UnsupportedVersionException) {\n       log.warn(\"Map generation failed due to unsupported version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooNewVersion\");\n     } else if (cause instanceof OutdatedVersionException) {\n       log.warn(\"Map generation failed due to outdated version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooOldVersion\");\n     } else {\n       log.warn(\"Map generation failed\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a3372a898..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -232,10 +280,37 @@ public class GenerateMapController implements Controller<Pane> {\n     }\n   }\n \n+  @VisibleForTesting\n+  void toggleCommandlineInput() {\n+    commandLineLabel.setVisible(!commandLineLabel.isVisible());\n+    commandLineArgsText.setVisible(!commandLineArgsText.isVisible());\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n+  protected void setStyles(List<String> styles) {\n+    styles.add(0, MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    mapStyleComboBox.setItems(FXCollections.observableList(styles));\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGenerator();\n+    String mapStyle = generatorPrefs.getMapStyle();\n+    if (mapStyleComboBox.getItems().contains(mapStyle)) {\n+      mapStyleComboBox.getSelectionModel().select(mapStyle);\n+    } else {\n+      mapStyleComboBox.getSelectionModel().select(MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    }\n+    generatorPrefs.mapStyleProperty().bind(mapStyleComboBox.valueProperty());\n+    mapStyleComboBox.setVisible(true);\n+    mapStyleLabel.setVisible(true);\n+  }\n+\n+  public void onNewLabelClicked(MouseEvent mouseEvent) {\n+    if (mouseEvent.getButton().equals(MouseButton.PRIMARY) && mouseEvent.getClickCount() == 2) {\n+      toggleCommandlineInput();\n+    }\n+  }\n+\n   public Pane getRoot() {\n     return generateMapRoot;\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDM4MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650380", "body": "Make them call each other and avoid code duplication", "bodyText": "Make them call each other and avoid code duplication", "bodyHTML": "<p dir=\"auto\">Make them call each other and avoid code duplication</p>", "author": "1-alex98", "createdAt": "2020-06-28T13:20:54Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,13 +119,40 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion,seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(generatorVersion,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n   }", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mzc4NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653784", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6918c6ed3..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -147,59 +136,38 @@ public class MapGeneratorService implements InitializingBean {\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n     String optionString = Base64.getEncoder().encodeToString(optionArray);\n-    return generateMap(version,seedString+'_'+optionString);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n   @Cacheable(CacheNames.MAP_GENERATOR)\n-  protected ComparableVersion queryNewestVersion() {\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n-  }\n-\n-  @VisibleForTesting\n-  @Cacheable(CacheNames.MAP_GENERATOR)\n-  public ComparableVersion queryMaxSupportedVersion() {\n-\n-    ComparableVersion version = queryNewestVersion();\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion()+1));\n-\n-    if (maxVersion.compareTo(version) < 0 || version.compareTo(minVersion) < 0) {\n-\n-      RestTemplate restTemplate = new RestTemplate();\n-\n-      LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-      headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-      HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-      ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-      for(JsonElement element: jsonElement.getAsJsonArray()) {\n-        JsonObject mainObject = element.getAsJsonObject();\n-        version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n-        if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n-          return version;\n-        }\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTagName());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n       }\n-      throw new RuntimeException(\"No Valid Generator Version Found\");\n     }\n-    return version;\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6918c6ed3..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -147,59 +136,38 @@ public class MapGeneratorService implements InitializingBean {\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n     String optionString = Base64.getEncoder().encodeToString(optionArray);\n-    return generateMap(version,seedString+'_'+optionString);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n   @Cacheable(CacheNames.MAP_GENERATOR)\n-  protected ComparableVersion queryNewestVersion() {\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n-  }\n-\n-  @VisibleForTesting\n-  @Cacheable(CacheNames.MAP_GENERATOR)\n-  public ComparableVersion queryMaxSupportedVersion() {\n-\n-    ComparableVersion version = queryNewestVersion();\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion()+1));\n-\n-    if (maxVersion.compareTo(version) < 0 || version.compareTo(minVersion) < 0) {\n-\n-      RestTemplate restTemplate = new RestTemplate();\n-\n-      LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-      headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-      HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-      ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-      for(JsonElement element: jsonElement.getAsJsonArray()) {\n-        JsonObject mainObject = element.getAsJsonObject();\n-        version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n-        if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n-          return version;\n-        }\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTagName());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n       }\n-      throw new RuntimeException(\"No Valid Generator Version Found\");\n     }\n-    return version;\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..a65973761 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -169,11 +170,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(matcher.group(1), matcher.group(2));\n-  }\n-\n-  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n-    return generateMap(new ComparableVersion(version), seedAndOptions);\n+    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n   }\n \n   public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex a65973761..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -170,11 +147,60 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n+\n+    ComparableVersion version = new ComparableVersion(matcher.group(1));\n+    String seed = matcher.group(2);\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(version);\n+    generateMapTask.setSeed(seed);\n+    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n   }\n \n-  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n \n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setGenerationType(generationType);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    if (optionMap.containsKey(\"landDensity\")) {\n+      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n+    }\n+    if (optionMap.containsKey(\"plateauDensity\")) {\n+      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n+    }\n+    if (optionMap.containsKey(\"mountainDensity\")) {\n+      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n+    }\n+    if (optionMap.containsKey(\"rampDensity\")) {\n+      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n+    }\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n+  }\n+\n+  public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -193,11 +189,46 @@ public class MapGeneratorService implements InitializingBean {\n     if (optionMap.containsKey(\"rampDensity\")) {\n       generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n     }\n+    if (optionMap.containsKey(\"mexDensity\")) {\n+      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n+    }\n+    if (optionMap.containsKey(\"reclaimDensity\")) {\n+      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n+    }\n \n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      return generateMapFuture.join();\n-    });\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setStyle(style);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -150,83 +131,28 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion version = new ComparableVersion(matcher.group(1));\n     String seed = matcher.group(2);\n \n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n     generateMapTask.setVersion(version);\n     generateMapTask.setSeed(seed);\n-    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setMapName(mapName);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+  public CompletableFuture<String> generateMap(GeneratorOptions generatorOptions) {\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n \n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(defaultGeneratorVersion);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setGenerationType(generationType);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    if (optionMap.containsKey(\"landDensity\")) {\n-      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n-    }\n-    if (optionMap.containsKey(\"plateauDensity\")) {\n-      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mountainDensity\")) {\n-      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n-    }\n-    if (optionMap.containsKey(\"rampDensity\")) {\n-      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mexDensity\")) {\n-      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n-    }\n-    if (optionMap.containsKey(\"reclaimDensity\")) {\n-      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n-    }\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setStyle(style);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setVersion(defaultGeneratorVersion);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    generateMapTask.setGeneratorOptions(generatorOptions);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -158,8 +151,10 @@ public class MapGeneratorService implements DisposableBean {\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n       return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDQ0NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650445", "body": "Make sue this is only ever called via a Spring Proxy", "bodyText": "Make sue this is only ever called via a Spring Proxy", "bodyHTML": "<p dir=\"auto\">Make sue this is only ever called via a Spring Proxy</p>", "author": "1-alex98", "createdAt": "2020-06-28T13:21:39Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,13 +119,40 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion,seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(generatorVersion,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mzc3Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653776", "bodyText": "Should only be called by the bean", "author": "Sheikah45", "createdAt": "2020-06-28T13:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6918c6ed3..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -147,59 +136,38 @@ public class MapGeneratorService implements InitializingBean {\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n     String optionString = Base64.getEncoder().encodeToString(optionArray);\n-    return generateMap(version,seedString+'_'+optionString);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n   @Cacheable(CacheNames.MAP_GENERATOR)\n-  protected ComparableVersion queryNewestVersion() {\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n-  }\n-\n-  @VisibleForTesting\n-  @Cacheable(CacheNames.MAP_GENERATOR)\n-  public ComparableVersion queryMaxSupportedVersion() {\n-\n-    ComparableVersion version = queryNewestVersion();\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion()+1));\n-\n-    if (maxVersion.compareTo(version) < 0 || version.compareTo(minVersion) < 0) {\n-\n-      RestTemplate restTemplate = new RestTemplate();\n-\n-      LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-      headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-      HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-      ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-      for(JsonElement element: jsonElement.getAsJsonArray()) {\n-        JsonObject mainObject = element.getAsJsonObject();\n-        version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n-        if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n-          return version;\n-        }\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTagName());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n       }\n-      throw new RuntimeException(\"No Valid Generator Version Found\");\n     }\n-    return version;\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6918c6ed3..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -147,59 +136,38 @@ public class MapGeneratorService implements InitializingBean {\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n     String optionString = Base64.getEncoder().encodeToString(optionArray);\n-    return generateMap(version,seedString+'_'+optionString);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n   @Cacheable(CacheNames.MAP_GENERATOR)\n-  protected ComparableVersion queryNewestVersion() {\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n-  }\n-\n-  @VisibleForTesting\n-  @Cacheable(CacheNames.MAP_GENERATOR)\n-  public ComparableVersion queryMaxSupportedVersion() {\n-\n-    ComparableVersion version = queryNewestVersion();\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion()+1));\n-\n-    if (maxVersion.compareTo(version) < 0 || version.compareTo(minVersion) < 0) {\n-\n-      RestTemplate restTemplate = new RestTemplate();\n-\n-      LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-      headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-      HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-      ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-      JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-      for(JsonElement element: jsonElement.getAsJsonArray()) {\n-        JsonObject mainObject = element.getAsJsonObject();\n-        version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n-        if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n-          return version;\n-        }\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTagName());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n       }\n-      throw new RuntimeException(\"No Valid Generator Version Found\");\n     }\n-    return version;\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..a65973761 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -169,11 +170,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(matcher.group(1), matcher.group(2));\n-  }\n-\n-  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n-    return generateMap(new ComparableVersion(version), seedAndOptions);\n+    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n   }\n \n   public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex a65973761..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -170,11 +147,60 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n+\n+    ComparableVersion version = new ComparableVersion(matcher.group(1));\n+    String seed = matcher.group(2);\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(version);\n+    generateMapTask.setSeed(seed);\n+    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n   }\n \n-  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n \n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setGenerationType(generationType);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    if (optionMap.containsKey(\"landDensity\")) {\n+      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n+    }\n+    if (optionMap.containsKey(\"plateauDensity\")) {\n+      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n+    }\n+    if (optionMap.containsKey(\"mountainDensity\")) {\n+      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n+    }\n+    if (optionMap.containsKey(\"rampDensity\")) {\n+      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n+    }\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n+  }\n+\n+  public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -193,11 +189,46 @@ public class MapGeneratorService implements InitializingBean {\n     if (optionMap.containsKey(\"rampDensity\")) {\n       generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n     }\n+    if (optionMap.containsKey(\"mexDensity\")) {\n+      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n+    }\n+    if (optionMap.containsKey(\"reclaimDensity\")) {\n+      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n+    }\n \n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      return generateMapFuture.join();\n-    });\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setStyle(style);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -150,83 +131,28 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion version = new ComparableVersion(matcher.group(1));\n     String seed = matcher.group(2);\n \n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n     generateMapTask.setVersion(version);\n     generateMapTask.setSeed(seed);\n-    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setMapName(mapName);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+  public CompletableFuture<String> generateMap(GeneratorOptions generatorOptions) {\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n \n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(defaultGeneratorVersion);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setGenerationType(generationType);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    if (optionMap.containsKey(\"landDensity\")) {\n-      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n-    }\n-    if (optionMap.containsKey(\"plateauDensity\")) {\n-      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mountainDensity\")) {\n-      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n-    }\n-    if (optionMap.containsKey(\"rampDensity\")) {\n-      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mexDensity\")) {\n-      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n-    }\n-    if (optionMap.containsKey(\"reclaimDensity\")) {\n-      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n-    }\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setStyle(style);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setVersion(defaultGeneratorVersion);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    generateMapTask.setGeneratorOptions(generatorOptions);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -158,8 +151,10 @@ public class MapGeneratorService implements DisposableBean {\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n       return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg2MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446688861", "body": "The hardcoded \"1\" needs at least a comment what is happening here.", "bodyText": "The hardcoded \"1\" needs at least a comment what is happening here.", "bodyHTML": "<p dir=\"auto\">The hardcoded \"1\" needs at least a comment what is happening here.</p>", "author": "Brutus5000", "createdAt": "2020-06-28T19:31:03Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,39 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NTQ3Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446695472", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T20:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 4af2d2e73..365347191 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,24 +376,26 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n       mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n       if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n             mapListView.getItems().stream()\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 4af2d2e73..489939536 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,24 +388,26 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n       mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n       if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n             mapListView.getItems().stream()\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": {"commit": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 489939536..f0641b6e9 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -415,7 +370,7 @@ public class CreateGameController implements Controller<Pane> {\n \n         Pane root = generateMapController.getRoot();\n         generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n+        Dialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generateMap.dialog\"));\n         generateMapController.setOnCloseButtonClickedListener(dialog::close);\n \n         root.requestFocus();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f0641b6e9..52d009762 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,8 +380,8 @@ public class CreateGameController implements Controller<Pane> {\n         root.requestFocus();\n       }\n     } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.error(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 52d009762..e43aa35d8 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -390,13 +405,30 @@ public class CreateGameController implements Controller<Pane> {\n         .map(ModVersion::getUid)\n         .collect(Collectors.toSet());\n \n+    Integer minRating = null;\n+    Integer maxRating = null;\n+    boolean enforceRating;\n+\n+    if (!minRankingTextField.getText().isEmpty()) {\n+      minRating = Integer.parseInt(minRankingTextField.getText());\n+    }\n+\n+    if(!maxRankingTextField.getText().isEmpty()) {\n+      maxRating = Integer.parseInt(maxRankingTextField.getText());\n+    }\n+\n+    enforceRating = enforceRankingCheckBox.isSelected();\n+\n     NewGameInfo newGameInfo = new NewGameInfo(\n         titleTextField.getText(),\n         Strings.emptyToNull(passwordTextField.getText()),\n         featuredModListView.getSelectionModel().getSelectedItem(),\n         mapListView.getSelectionModel().getSelectedItem().getFolderName(),\n         mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC);\n+        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n+        minRating,\n+        maxRating,\n+        enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n       log.warn(\"Game could not be hosted\", throwable);\n", "next_change": {"commit": "a99d0a4f294dc25d60995684c232ddcf3567211c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e43aa35d8..24649c91a 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -435,8 +444,6 @@ public class CreateGameController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n-\n-    onCloseButtonClicked();\n   }\n \n   public Pane getRoot() {\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 24649c91a..e91f62a57 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -440,7 +479,7 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      log.warn(\"Game could not be hosted\", throwable);\n+      log.error(\"Game could not be hosted\", throwable);\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e91f62a57..96c446e17 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -479,8 +492,13 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n+      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      if (throwable instanceof NotifiableException) {\n+        notificationService.addErrorNotification((NotifiableException) throwable);\n+      } else {\n+        notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      }\n       return null;\n     });\n   }\n", "next_change": {"commit": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 96c446e17..77426f0de 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -480,22 +462,15 @@ public class CreateGameController implements Controller<Pane> {\n \n     enforceRating = enforceRankingCheckBox.isSelected();\n \n-    NewGameInfo newGameInfo = new NewGameInfo(\n-        titleTextField.getText().trim(),\n-        Strings.emptyToNull(passwordTextField.getText()),\n-        featuredModListView.getSelectionModel().getSelectedItem(),\n-        mapVersion.getFolderName(),\n-        mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n-        minRating,\n-        maxRating,\n-        enforceRating);\n+    NewGameInfo newGameInfo = new NewGameInfo(titleTextField.getText()\n+        .trim(), Strings.emptyToNull(passwordTextField.getText()), featuredModListView.getSelectionModel()\n+        .getSelectedItem(), mapVersion.getFolderName(), mods, onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC, minRating, maxRating, enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+      throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      if (throwable instanceof NotifiableException) {\n-        notificationService.addErrorNotification((NotifiableException) throwable);\n+      if (throwable instanceof NotifiableException notifiableException) {\n+        notificationService.addErrorNotification(notifiableException);\n       } else {\n         notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg4Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446688882", "body": "linebreak after .findAny()", "bodyText": "linebreak after .findAny()", "bodyHTML": "<p dir=\"auto\">linebreak after .findAny()</p>", "author": "Brutus5000", "createdAt": "2020-06-28T19:31:20Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,39 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMjc3OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446712779", "bodyText": "Added", "author": "Sheikah45", "createdAt": "2020-06-28T23:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 4af2d2e73..365347191 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,24 +376,26 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n       mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n       if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n             mapListView.getItems().stream()\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 4af2d2e73..489939536 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,24 +388,26 @@ public class CreateGameController implements Controller<Pane> {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked(){\n+  public void onGenerateMapButtonClicked() {\n     onGenerateMap();\n   }\n \n   private void onGenerateMap() {\n     try {\n       mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n       if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n         mapGeneratorService.generateMap().thenAccept(mapName -> {\n           Platform.runLater(() -> {\n             initMapSelection();\n             mapListView.getItems().stream()\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                .findAny().ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": {"commit": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 489939536..f0641b6e9 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -415,7 +370,7 @@ public class CreateGameController implements Controller<Pane> {\n \n         Pane root = generateMapController.getRoot();\n         generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n+        Dialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generateMap.dialog\"));\n         generateMapController.setOnCloseButtonClickedListener(dialog::close);\n \n         root.requestFocus();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f0641b6e9..52d009762 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,8 +380,8 @@ public class CreateGameController implements Controller<Pane> {\n         root.requestFocus();\n       }\n     } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.error(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 52d009762..e43aa35d8 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -390,13 +405,30 @@ public class CreateGameController implements Controller<Pane> {\n         .map(ModVersion::getUid)\n         .collect(Collectors.toSet());\n \n+    Integer minRating = null;\n+    Integer maxRating = null;\n+    boolean enforceRating;\n+\n+    if (!minRankingTextField.getText().isEmpty()) {\n+      minRating = Integer.parseInt(minRankingTextField.getText());\n+    }\n+\n+    if(!maxRankingTextField.getText().isEmpty()) {\n+      maxRating = Integer.parseInt(maxRankingTextField.getText());\n+    }\n+\n+    enforceRating = enforceRankingCheckBox.isSelected();\n+\n     NewGameInfo newGameInfo = new NewGameInfo(\n         titleTextField.getText(),\n         Strings.emptyToNull(passwordTextField.getText()),\n         featuredModListView.getSelectionModel().getSelectedItem(),\n         mapListView.getSelectionModel().getSelectedItem().getFolderName(),\n         mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC);\n+        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n+        minRating,\n+        maxRating,\n+        enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n       log.warn(\"Game could not be hosted\", throwable);\n", "next_change": {"commit": "a99d0a4f294dc25d60995684c232ddcf3567211c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e43aa35d8..24649c91a 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -435,8 +444,6 @@ public class CreateGameController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n-\n-    onCloseButtonClicked();\n   }\n \n   public Pane getRoot() {\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 24649c91a..e91f62a57 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -440,7 +479,7 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      log.warn(\"Game could not be hosted\", throwable);\n+      log.error(\"Game could not be hosted\", throwable);\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e91f62a57..96c446e17 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -479,8 +492,13 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n+      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      if (throwable instanceof NotifiableException) {\n+        notificationService.addErrorNotification((NotifiableException) throwable);\n+      } else {\n+        notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      }\n       return null;\n     });\n   }\n", "next_change": {"commit": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 96c446e17..77426f0de 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -480,22 +462,15 @@ public class CreateGameController implements Controller<Pane> {\n \n     enforceRating = enforceRankingCheckBox.isSelected();\n \n-    NewGameInfo newGameInfo = new NewGameInfo(\n-        titleTextField.getText().trim(),\n-        Strings.emptyToNull(passwordTextField.getText()),\n-        featuredModListView.getSelectionModel().getSelectedItem(),\n-        mapVersion.getFolderName(),\n-        mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n-        minRating,\n-        maxRating,\n-        enforceRating);\n+    NewGameInfo newGameInfo = new NewGameInfo(titleTextField.getText()\n+        .trim(), Strings.emptyToNull(passwordTextField.getText()), featuredModListView.getSelectionModel()\n+        .getSelectedItem(), mapVersion.getFolderName(), mods, onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC, minRating, maxRating, enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+      throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      if (throwable instanceof NotifiableException) {\n-        notificationService.addErrorNotification((NotifiableException) throwable);\n+      if (throwable instanceof NotifiableException notifiableException) {\n+        notificationService.addErrorNotification(notifiableException);\n       } else {\n         notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTI5NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689295", "body": "This is never used?", "bodyText": "This is never used?", "bodyHTML": "<p dir=\"auto\">This is never used?</p>", "author": "Brutus5000", "createdAt": "2020-06-28T19:35:33Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,257 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.application.Platform;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMjgwNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446712804", "bodyText": "Removed", "author": "Sheikah45", "createdAt": "2020-06-28T23:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a07025a9a..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -42,27 +43,19 @@ public class GenerateMapController implements Controller<Pane> {\n   public Spinner<Integer> spawnCountSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n \n   public void initialize() {\n-    init();\n-  }\n-\n-  private void init() {\n     initSpawnCountSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n", "next_change": {"commit": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex ebdde210e..7615184a5 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -54,9 +58,12 @@ public class GenerateMapController implements Controller<Pane> {\n   public CheckBox rampRandom;\n   public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "5e3e526df2481369493481e684879926b9c96fb2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 7615184a5..2abcb07ef 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -72,33 +72,17 @@ public class GenerateMapController implements Controller<Pane> {\n \n   private void initSpawnCountSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty;\n-    if (mapSizeProperty.equals(\"5km\")) {\n-      spawnCountProperty = 2;\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, spawnCountProperty, 2));\n-    } else {\n-      spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n-    }\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n     generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n   }\n \n   private void initMapSizeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n     String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<String>(validMapSizes));\n+    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n-    mapSizeSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, 2, 2));\n-      } else if (oldValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountSpinner.getValue(), 2));\n-      }\n-      generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n-    });\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": {"commit": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 2abcb07ef..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -83,6 +89,7 @@ public class GenerateMapController implements Controller<Pane> {\n     mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n+    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a07025a9a..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -40,30 +45,30 @@ public class GenerateMapController implements Controller<Pane> {\n   public Button generateMapButton;\n   public TextField previousMapName;\n   public Spinner<Integer> spawnCountSpinner;\n+  public Spinner<String> mapSizeSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n+  public HBox waterSliderBox;\n+  public HBox waterRandomBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n+  public HBox mountainSliderBox;\n+  public HBox mountainRandomBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n+  public HBox plateauSliderBox;\n+  public HBox plateauRandomBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  @VisibleForTesting\n-  FilteredList<MapBean> filteredMapBeans;\n+  public HBox rampSliderBox;\n+  public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private PreferenceUpdateListener preferenceUpdateListener;\n-\n-  /**\n-   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n-   */\n-  private boolean initialized;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n-    init();\n-  }\n-\n-  private void init() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -63,8 +63,8 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox rampSliderBox;\n   public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..3d8026cab 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -67,6 +73,7 @@ public class GenerateMapController implements Controller<Pane> {\n   private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n+    initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n     initWaterSlider();\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 3d8026cab..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -76,10 +79,15 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initWaterSlider();\n-    initPlateauSlider();\n-    initMountainSlider();\n-    initRampSlider();\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..613aa52ee 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -79,14 +79,14 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n+    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 613aa52ee..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -88,6 +96,10 @@ public class GenerateMapController implements Controller<Pane> {\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n     initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -80,25 +96,34 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox reclaimSliderBox;\n   public HBox reclaimRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private final int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<Integer> validTeamSizes = FXCollections.observableList(IntStream.range(0, 17)\n+      .filter(value -> value != 1)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableTeamSizes = new FilteredList<>(validTeamSizes);\n+  private final ObservableList<Integer> validSpawnCount = FXCollections.observableList(IntStream.range(2, 17)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableSpawnCounts = new FilteredList<>(validSpawnCount);\n+  public Spinner<Integer> numTeamsSpinner;\n \n   public void initialize() {\n-    initGenerationTypeSpinner();\n+    JavaFxUtil.bindManagedToVisible(commandLineLabel, commandLineArgsText, mapStyleComboBox, mapStyleLabel);\n+    initCommandlineArgs();\n+    initGenerationTypeComboBox();\n+    initMapStyleComboBox();\n+    initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n-    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n         mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n         reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n", "next_change": {"commit": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 318081216..528613ac4 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -113,18 +114,12 @@ public class GenerateMapController implements Controller<Pane> {\n     initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n-        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n-        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n-        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n-        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n-        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n-        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(), waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(), plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(), mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(), rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(), mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(), reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689659", "body": "Is there a reason not to use jackson? You can configure a pojo to ignore unknown fields.", "bodyText": "Is there a reason not to use jackson? You can configure a pojo to ignore unknown fields.", "bodyHTML": "<p dir=\"auto\">Is there a reason not to use jackson? You can configure a pojo to ignore unknown fields.</p>", "author": "Brutus5000", "createdAt": "2020-06-28T19:39:16Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -124,26 +152,62 @@ protected String queryNewestVersion() {\n     JsonElement jsonElement = new JsonParser().parse(response.getBody());\n     JsonObject mainObject = jsonElement.getAsJsonObject();\n \n-    return mainObject.get(\"tag_name\").getAsString();\n+    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n+  }\n+\n+  @VisibleForTesting\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n+    RestTemplate restTemplate = new RestTemplate();\n+\n+    LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n+    headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n+    HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+\n+    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n+    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n+    for (JsonElement element : jsonElement.getAsJsonArray()) {\n+      JsonObject mainObject = element.getAsJsonObject();\n+      version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg3OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446694879", "bodyText": "Yeah I am going to say the reason is that I have no idea what a jackson is.", "author": "Sheikah45", "createdAt": "2020-06-28T20:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2NjY3Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446766676", "bodyText": "Oh. Jackson is the json de/serializer in Spring (https://github.com/FasterXML/jackson). Spring uses it by default e.g. if you call a RestTemplate, you tell Spring it needs to return a type T and Jackson will convert it to type T.\n(The client also uses Gson which is another json de/serializer by Google, but in the long run, everything should use Jackson).\nYou can get it via Dependency Injection. The class you need to ask for is an ObjectMapper.", "author": "Brutus5000", "createdAt": "2020-06-29T04:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2ODA5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446768092", "bodyText": "Alternatively you can ask the RestTemplate directly to return you the pojo you need. If it fails during runtime because it get more values than expected than put this as annotation on the pojo: @JsonIgnoreProperties(ignoreUnknown = true)", "author": "Brutus5000", "createdAt": "2020-06-29T04:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MjU4Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r447272582", "bodyText": "Have it return from RestTemplate directly", "author": "Sheikah45", "createdAt": "2020-06-29T21:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 786315b52..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -168,22 +152,22 @@ public class MapGeneratorService implements InitializingBean {\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    for (JsonElement element : jsonElement.getAsJsonArray()) {\n-      JsonObject mainObject = element.getAsJsonObject();\n-      version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTagName());\n       if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n         return version;\n       }\n     }\n-    throw new RuntimeException(\"No Valid Generator Version Found\");\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 786315b52..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -168,22 +152,22 @@ public class MapGeneratorService implements InitializingBean {\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    for (JsonElement element : jsonElement.getAsJsonArray()) {\n-      JsonObject mainObject = element.getAsJsonObject();\n-      version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTagName());\n       if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n         return version;\n       }\n     }\n-    throw new RuntimeException(\"No Valid Generator Version Found\");\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..a65973761 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -169,11 +170,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(matcher.group(1), matcher.group(2));\n-  }\n-\n-  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n-    return generateMap(new ComparableVersion(version), seedAndOptions);\n+    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n   }\n \n   public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex a65973761..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -170,11 +147,60 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n+\n+    ComparableVersion version = new ComparableVersion(matcher.group(1));\n+    String seed = matcher.group(2);\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(version);\n+    generateMapTask.setSeed(seed);\n+    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n   }\n \n-  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n \n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setGenerationType(generationType);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    if (optionMap.containsKey(\"landDensity\")) {\n+      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n+    }\n+    if (optionMap.containsKey(\"plateauDensity\")) {\n+      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n+    }\n+    if (optionMap.containsKey(\"mountainDensity\")) {\n+      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n+    }\n+    if (optionMap.containsKey(\"rampDensity\")) {\n+      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n+    }\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n+  }\n+\n+  public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -193,11 +189,46 @@ public class MapGeneratorService implements InitializingBean {\n     if (optionMap.containsKey(\"rampDensity\")) {\n       generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n     }\n+    if (optionMap.containsKey(\"mexDensity\")) {\n+      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n+    }\n+    if (optionMap.containsKey(\"reclaimDensity\")) {\n+      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n+    }\n \n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      return generateMapFuture.join();\n-    });\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setStyle(style);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -150,83 +131,28 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion version = new ComparableVersion(matcher.group(1));\n     String seed = matcher.group(2);\n \n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n     generateMapTask.setVersion(version);\n     generateMapTask.setSeed(seed);\n-    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setMapName(mapName);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+  public CompletableFuture<String> generateMap(GeneratorOptions generatorOptions) {\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n \n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(defaultGeneratorVersion);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setGenerationType(generationType);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    if (optionMap.containsKey(\"landDensity\")) {\n-      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n-    }\n-    if (optionMap.containsKey(\"plateauDensity\")) {\n-      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mountainDensity\")) {\n-      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n-    }\n-    if (optionMap.containsKey(\"rampDensity\")) {\n-      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mexDensity\")) {\n-      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n-    }\n-    if (optionMap.containsKey(\"reclaimDensity\")) {\n-      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n-    }\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setStyle(style);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setVersion(defaultGeneratorVersion);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    generateMapTask.setGeneratorOptions(generatorOptions);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -158,8 +151,10 @@ public class MapGeneratorService implements DisposableBean {\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n       return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTc3NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689775", "body": "I'm not entirely sure what happens if you use the cache twice for the same type as the method has no arguments?!", "bodyText": "I'm not entirely sure what happens if you use the cache twice for the same type as the method has no arguments?!", "bodyHTML": "<p dir=\"auto\">I'm not entirely sure what happens if you use the cache twice for the same type as the method has no arguments?!</p>", "author": "Brutus5000", "createdAt": "2020-06-28T19:40:17Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -124,26 +152,62 @@ protected String queryNewestVersion() {\n     JsonElement jsonElement = new JsonParser().parse(response.getBody());\n     JsonObject mainObject = jsonElement.getAsJsonObject();\n \n-    return mainObject.get(\"tag_name\").getAsString();\n+    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n+  }\n+\n+  @VisibleForTesting\n+  @Cacheable(CacheNames.MAP_GENERATOR)", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NzQwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446697408", "bodyText": "Alright well I had left in the query newest version in case it could be used elsewhere but it is not used anywhere else so I removed it.", "author": "Sheikah45", "createdAt": "2020-06-28T20:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 786315b52..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -139,22 +139,6 @@ public class MapGeneratorService implements InitializingBean {\n     return generateMap(version, seedString + '_' + optionString);\n   }\n \n-  @VisibleForTesting\n-  @Cacheable(CacheNames.MAP_GENERATOR)\n-  protected ComparableVersion queryNewestVersion() {\n-    RestTemplate restTemplate = new RestTemplate();\n-\n-    LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-    headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-    HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n-  }\n-\n   @VisibleForTesting\n   @Cacheable(CacheNames.MAP_GENERATOR)\n   public ComparableVersion queryMaxSupportedVersion() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 786315b52..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -139,22 +139,6 @@ public class MapGeneratorService implements InitializingBean {\n     return generateMap(version, seedString + '_' + optionString);\n   }\n \n-  @VisibleForTesting\n-  @Cacheable(CacheNames.MAP_GENERATOR)\n-  protected ComparableVersion queryNewestVersion() {\n-    RestTemplate restTemplate = new RestTemplate();\n-\n-    LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-    headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-    HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n-  }\n-\n   @VisibleForTesting\n   @Cacheable(CacheNames.MAP_GENERATOR)\n   public ComparableVersion queryMaxSupportedVersion() {\n", "next_change": {"commit": "501d69d53ad94adf6571ca4bb1e97c988825c652", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..86179d727 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -134,8 +135,8 @@ public class MapGeneratorService implements InitializingBean {\n   public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n     ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n     seedBuffer.putLong(seedGenerator.nextLong());\n-    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n-    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    String seedString = NAME_ENCODER.encode(seedBuffer.array());\n+    String optionString = NAME_ENCODER.encode(optionArray);\n     return generateMap(version, seedString + '_' + optionString);\n   }\n \n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 86179d727..a65973761 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -124,20 +128,16 @@ public class MapGeneratorService implements InitializingBean {\n     return generateMap(generatorVersion, seedString);\n   }\n \n-  public CompletableFuture<String> generateMap(byte[] optionArray) {\n-    return generateMap(generatorVersion, optionArray);\n-  }\n-\n-  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n-    return generateMap(new ComparableVersion(version), optionArray);\n-  }\n-\n-  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+  public CompletableFuture<String> generateMap(byte[] optionArray, BitSet parameters) {\n     ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n     seedBuffer.putLong(seedGenerator.nextLong());\n     String seedString = NAME_ENCODER.encode(seedBuffer.array());\n-    String optionString = NAME_ENCODER.encode(optionArray);\n-    return generateMap(version, seedString + '_' + optionString);\n+    String optionString = NAME_ENCODER.encode(optionArray) + \"_\" + NAME_ENCODER.encode(parameters.toByteArray());\n+    if (parameters.get(0)) {\n+      String timeString = NAME_ENCODER.encode(ByteBuffer.allocate(8).putLong(Instant.now().getEpochSecond()).array());\n+      optionString += \"_\" + timeString;\n+    }\n+    return generateMap(generatorVersion, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n", "next_change": {"commit": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex a65973761..68d01d1d8 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -141,7 +141,7 @@ public class MapGeneratorService implements InitializingBean {\n   }\n \n   @VisibleForTesting\n-  @Cacheable(CacheNames.MAP_GENERATOR)\n+  @Cacheable(value = CacheNames.MAP_GENERATOR, sync = true)\n   public ComparableVersion queryMaxSupportedVersion() {\n     ComparableVersion version = new ComparableVersion(\"\");\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 68d01d1d8..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -121,25 +117,6 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n-  public CompletableFuture<String> generateMap() {\n-    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n-    seedBuffer.putLong(seedGenerator.nextLong());\n-    String seedString = NAME_ENCODER.encode(seedBuffer.array());\n-    return generateMap(generatorVersion, seedString);\n-  }\n-\n-  public CompletableFuture<String> generateMap(byte[] optionArray, BitSet parameters) {\n-    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n-    seedBuffer.putLong(seedGenerator.nextLong());\n-    String seedString = NAME_ENCODER.encode(seedBuffer.array());\n-    String optionString = NAME_ENCODER.encode(optionArray) + \"_\" + NAME_ENCODER.encode(parameters.toByteArray());\n-    if (parameters.get(0)) {\n-      String timeString = NAME_ENCODER.encode(ByteBuffer.allocate(8).putLong(Instant.now().getEpochSecond()).array());\n-      optionString += \"_\" + timeString;\n-    }\n-    return generateMap(generatorVersion, seedString + '_' + optionString);\n-  }\n-\n   @VisibleForTesting\n   @Cacheable(value = CacheNames.MAP_GENERATOR, sync = true)\n   public ComparableVersion queryMaxSupportedVersion() {\n", "next_change": {"commit": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..760532bf2 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -120,26 +117,20 @@ public class MapGeneratorService implements InitializingBean {\n   @VisibleForTesting\n   @Cacheable(value = CacheNames.MAP_GENERATOR, sync = true)\n   public ComparableVersion queryMaxSupportedVersion() {\n-    ComparableVersion version = new ComparableVersion(\"\");\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n \n-    RestTemplate restTemplate = new RestTemplate();\n-\n-    LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n-    headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n-    HttpEntity<String> entity = new HttpEntity<>(null, headers);\n-\n-    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n-    });\n-    List<GithubGeneratorRelease> releases = response.getBody();\n-    for (GithubGeneratorRelease release : releases) {\n-      version.parseVersion(release.getTagName());\n-      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n-        return version;\n-      }\n-    }\n-    throw new RuntimeException(\"No valid generator version found\");\n+    return webClient.get()\n+        .uri(clientProperties.getMapGenerator().getQueryVersionsUrl())\n+        .accept(MediaType.parseMediaType(\"application/vnd.github.v3+json\"))\n+        .retrieve()\n+        .bodyToFlux(GitHubRelease.class)\n+        .map(release -> new ComparableVersion(release.getTagName()))\n+        .filter(version -> version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0)\n+        .sort(Comparator.naturalOrder())\n+        .last()\n+        .switchIfEmpty(Mono.error(new RuntimeException(\"No valid generator version found\")))\n+        .block();\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 760532bf2..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -130,7 +119,7 @@ public class MapGeneratorService implements InitializingBean {\n         .sort(Comparator.naturalOrder())\n         .last()\n         .switchIfEmpty(Mono.error(new RuntimeException(\"No valid generator version found\")))\n-        .block();\n+        .toFuture();\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjIwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449902208", "body": "Could have used Bindings here :D", "bodyText": "Could have used Bindings here :D", "bodyHTML": "<p dir=\"auto\">Could have used Bindings here :D</p>", "author": "1-alex98", "createdAt": "2020-07-05T17:50:20Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,246 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterRandomProperty(newValue);\n+      waterBox.setVisible(!newValue);\n+    }));\n+    waterBox.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauBox.setVisible(!newValue);\n+    }));", "originalCommit": "ca413c506cf54beac9dc92a45c68aa5a199200e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjI2OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449902268", "bodyText": "https://www.youtube.com/watch?v=6Zi2L0kHSx4", "author": "1-alex98", "createdAt": "2020-07-05T17:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTYzMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449911630", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-05T19:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 29b56b694..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -117,16 +108,10 @@ public class GenerateMapController implements Controller<Pane> {\n     boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n     plateauSlider.setLabelFormatter(getLabelConverter());\n     plateauRandom.setSelected(plateauRandomProperty);\n-    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n-      generatorPrefs.setPlateauRandomProperty(newValue);\n-      plateauBox.setVisible(!newValue);\n-    }));\n-    plateauBox.setVisible(!plateauRandomProperty);\n     plateauSlider.setValue(plateauDensityProperty);\n-    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n-      generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n-      preferencesService.storeInBackground();\n-    }));\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n   }\n \n   private void initMountainSlider() {\n", "next_change": {"commit": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex ebdde210e..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -109,9 +130,11 @@ public class GenerateMapController implements Controller<Pane> {\n     plateauSlider.setLabelFormatter(getLabelConverter());\n     plateauRandom.setSelected(plateauRandomProperty);\n     plateauSlider.setValue(plateauDensityProperty);\n-    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    plateauSliderBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n     generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n     generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+    plateauSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    plateauRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private void initMountainSlider() {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 29b56b694..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -117,16 +129,12 @@ public class GenerateMapController implements Controller<Pane> {\n     boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n     plateauSlider.setLabelFormatter(getLabelConverter());\n     plateauRandom.setSelected(plateauRandomProperty);\n-    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n-      generatorPrefs.setPlateauRandomProperty(newValue);\n-      plateauBox.setVisible(!newValue);\n-    }));\n-    plateauBox.setVisible(!plateauRandomProperty);\n     plateauSlider.setValue(plateauDensityProperty);\n-    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n-      generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n-      preferencesService.storeInBackground();\n-    }));\n+    plateauSliderBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+    plateauSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    plateauRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private void initMountainSlider() {\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..3d8026cab 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -133,8 +164,8 @@ public class GenerateMapController implements Controller<Pane> {\n     plateauSliderBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n     generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n     generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n-    plateauSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    plateauRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    plateauSliderBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n+    plateauRandomBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n   }\n \n   private void initMountainSlider() {\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 3d8026cab..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -123,105 +131,33 @@ public class GenerateMapController implements Controller<Pane> {\n     mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n-  private StringConverter<Double> getLabelConverter() {\n-    return new StringConverter<>() {\n-      @Override\n-      public String toString(Double n) {\n-        if (n < 127) {\n-          return \"%game.generate.none\";\n-        }\n-        return \"%game.generate.lots\";\n-      }\n-\n-      @Override\n-      public Double fromString(String s) {\n-        throw new UnsupportedOperationException();\n-      }\n-    };\n-  }\n-\n-  private void initWaterSlider() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n-    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n-    waterSlider.setLabelFormatter(getLabelConverter());\n-    waterRandom.setSelected(waterRandomProperty);\n-    waterSlider.setValue(waterDensityProperty);\n-    waterSliderBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n-    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n-    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n-    waterSliderBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n-    waterRandomBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n+  private void initOptionSlider(IntegerProperty valueProperty, BooleanProperty randomProperty,\n+                                Slider slider, HBox sliderContainer, CheckBox randomBox, HBox randomContainer) {\n+    sliderContainer.visibleProperty().bind(randomBox.selectedProperty().not());\n+    slider.setValue(valueProperty.getValue());\n+    randomBox.setSelected(randomProperty.getValue());\n+    slider.valueProperty().bindBidirectional(valueProperty);\n+    randomBox.selectedProperty().bindBidirectional(randomProperty);\n+    sliderContainer.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n+    randomContainer.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n   }\n \n-  private void initPlateauSlider() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n-    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n-    plateauSlider.setLabelFormatter(getLabelConverter());\n-    plateauRandom.setSelected(plateauRandomProperty);\n-    plateauSlider.setValue(plateauDensityProperty);\n-    plateauSliderBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n-    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n-    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n-    plateauSliderBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n-    plateauRandomBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n-  }\n-\n-  private void initMountainSlider() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n-    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n-    mountainSlider.setLabelFormatter(getLabelConverter());\n-    mountainRandom.setSelected(mountainRandomProperty);\n-    mountainSlider.setValue(mountainDensityProperty);\n-    mountainSliderBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n-    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n-    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n-    mountainSliderBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n-    mountainRandomBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n-  }\n-\n-  private void initRampSlider() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n-    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n-    rampSlider.setLabelFormatter(getLabelConverter());\n-    rampRandom.setSelected(rampRandomProperty);\n-    rampSlider.setValue(rampDensityProperty);\n-    rampSliderBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n-    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n-    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n-    rampSliderBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n-    rampRandomBox.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n-  }\n-\n-  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+  private Optional<Float> getSliderValue(Slider slider, CheckBox checkBox) {\n     if (checkBox.isSelected() || generationTypeComboBox.getValue() != GenerationType.CASUAL) {\n-      return (byte) new Random().nextInt(127);\n+      return Optional.empty();\n     }\n-    return (byte) slider.getValue();\n+    return Optional.of(((byte) slider.getValue()) / 127f);\n   }\n \n-  protected byte[] getOptionArray() {\n-    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-    byte mapSize = (byte) (mapValues[validMapSizes.indexOf(mapSizeSpinner.getValue())] / 64);\n-    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n-    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-    if (generationTypeComboBox.getValue() == GenerationType.BLIND || generationTypeComboBox.getValue() == GenerationType.TOURNAMENT) {\n-      return new byte[]{spawnCount, mapSize};\n-    } else {\n-      return new byte[]{spawnCount, mapSize, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  protected Map<String, Float> getOptionMap() {\n+    Map<String, Float> optionMap = new HashMap<>();\n+    if (generationTypeComboBox.getValue() == GenerationType.CASUAL) {\n+      getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionMap.put(\"landDensity\", 1 - value));\n+      getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n+      getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n+      getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n     }\n-  }\n-\n-  protected BitSet getParameters() {\n-    BitSet parameters = new BitSet();\n-    parameters.set(0, generationTypeComboBox.getValue() == GenerationType.BLIND || generationTypeComboBox.getValue() == GenerationType.TOURNAMENT);\n-    parameters.set(1, generationTypeComboBox.getValue() == GenerationType.BLIND);\n-    return parameters;\n+    return optionMap;\n   }\n \n   public void onCloseButtonClicked() {\n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -156,6 +168,8 @@ public class GenerateMapController implements Controller<Pane> {\n       getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n       getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n       getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n+      getSliderValue(mexSlider, mexRandom).ifPresent(value -> optionMap.put(\"mexDensity\", value));\n+      getSliderValue(reclaimSlider, reclaimRandom).ifPresent(value -> optionMap.put(\"reclaimDensity\", value));\n     }\n     return optionMap;\n   }\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..360e44084 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -161,21 +269,30 @@ public class GenerateMapController implements Controller<Pane> {\n     return Optional.of(((byte) slider.getValue()) / 127f);\n   }\n \n-  protected Map<String, Float> getOptionMap() {\n-    Map<String, Float> optionMap = new HashMap<>();\n-    if (generationTypeComboBox.getValue() == GenerationType.CASUAL) {\n-      getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionMap.put(\"landDensity\", 1 - value));\n-      getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n-      getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n-      getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n-      getSliderValue(mexSlider, mexRandom).ifPresent(value -> optionMap.put(\"mexDensity\", value));\n-      getSliderValue(reclaimSlider, reclaimRandom).ifPresent(value -> optionMap.put(\"reclaimDensity\", value));\n+  private GeneratorOptions getGeneratorOptions() {\n+    GeneratorOptions.GeneratorOptionsBuilder optionsBuilder = GeneratorOptions.builder();\n+    if (!commandLineArgsText.getText().isBlank()) {\n+      optionsBuilder.commandLineArgs(commandLineArgsText.getText());\n     }\n-    return optionMap;\n+\n+    optionsBuilder.spawnCount(spawnCountSpinner.getValue());\n+    optionsBuilder.mapSize((int) (mapSizeSpinner.getValue() * KM_TO_PIXEL_FACTOR));\n+    optionsBuilder.numTeams(numTeamsSpinner.getValue());\n+    optionsBuilder.generationType(generationTypeComboBox.getValue());\n+    optionsBuilder.style(mapStyleComboBox.getValue());\n+    getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionsBuilder.landDensity(1 - value));\n+    getSliderValue(plateauSlider, plateauRandom).ifPresent(optionsBuilder::plateauDensity);\n+    getSliderValue(mountainSlider, mountainRandom).ifPresent(optionsBuilder::mountainDensity);\n+    getSliderValue(rampSlider, rampRandom).ifPresent(optionsBuilder::rampDensity);\n+    getSliderValue(mexSlider, mexRandom).ifPresent(optionsBuilder::mexDensity);\n+    getSliderValue(reclaimSlider, reclaimRandom).ifPresent(optionsBuilder::reclaimDensity);\n+    return optionsBuilder.build();\n   }\n \n   public void onCloseButtonClicked() {\n-    onCloseButtonClickedListener.run();\n+    if (onCloseButtonClickedListener != null) {\n+      onCloseButtonClickedListener.run();\n+    }\n   }\n \n   public void onGenerateMapButtonClicked() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 360e44084..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -300,7 +295,6 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-    preferencesService.storeInBackground();\n     CompletableFuture<String> generateFuture;\n     if (!previousMapName.getText().isEmpty()) {\n       if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449902472", "body": "I doubt that is is ever called. You probably need to do this in .excpetionally() on the Completable Future. https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/completion-stages-exception-handling.html", "bodyText": "I doubt that is is ever called. You probably need to do this in .excpetionally() on the Completable Future. https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/completion-stages-exception-handling.html", "bodyHTML": "<p dir=\"auto\">I doubt that is is ever called. You probably need to do this in .excpetionally() on the Completable Future. <a href=\"https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/completion-stages-exception-handling.html\" rel=\"nofollow\">https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/completion-stages-exception-handling.html</a></p>", "author": "1-alex98", "createdAt": "2020-07-05T17:52:51Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,246 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterRandomProperty(newValue);\n+      waterBox.setVisible(!newValue);\n+    }));\n+    waterBox.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauBox.setVisible(!newValue);\n+    }));\n+    plateauBox.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainBox.setVisible(!newValue);\n+    }));\n+    mountainBox.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setRampRandomProperty(newValue);\n+      rampBox.setVisible(!newValue);\n+    }));\n+    rampBox.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> Platform.runLater(() -> {\n+          createGameController.initMapSelection();\n+          createGameController.mapListView.getItems().stream()\n+              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+              .findAny().ifPresent(mapBean -> {\n+            createGameController.mapListView.getSelectionModel().select(mapBean);\n+            createGameController.mapListView.scrollTo(mapBean);\n+            createGameController.setSelectedMap(mapBean);\n+          });\n+        }));\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> Platform.runLater(() -> {\n+          createGameController.initMapSelection();\n+          createGameController.mapListView.getItems().stream()\n+              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+              .findAny().ifPresent(mapBean -> {\n+            createGameController.mapListView.getSelectionModel().select(mapBean);\n+            createGameController.mapListView.scrollTo(mapBean);\n+            createGameController.setSelectedMap(mapBean);\n+          });\n+        }));\n+      }\n+    } catch (IllegalArgumentException e) {\n+      String msg = e.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooNewVersion\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+      if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooOldVersion\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+    } catch (Exception e) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.error(\"Map generation failed\", e);\n+    }", "originalCommit": "ca413c506cf54beac9dc92a45c68aa5a199200e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwNjQzMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449906433", "bodyText": "I tested it and .exceptionally doesnt work because it is not a completable future that throws the exception rather it is the generatemap function which when it throws the exception never hands back a completable future which is the reason for the try catch but if there is another way it could be structured to use the .exceptionally let me know", "author": "Sheikah45", "createdAt": "2020-07-05T18:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwNzExOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449907118", "bodyText": "Nevermind I got it and changed the map generator service to return a completable future that throws an exception", "author": "Sheikah45", "createdAt": "2020-07-05T18:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwODcxNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449908717", "bodyText": "Done and let me know if you meant something different", "author": "Sheikah45", "createdAt": "2020-07-05T19:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NTk5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450045992", "bodyText": "Well ok maybe I was wrong then. I just expected it to be thrown inside the CompletableFuture", "author": "1-alex98", "createdAt": "2020-07-06T07:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjQzNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450046437", "bodyText": "It also should be because otherwise u are doing stuff on the ui thread that u should not do. Lemme see what u did...", "author": "1-alex98", "createdAt": "2020-07-06T07:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 29b56b694..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -190,48 +163,47 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-    try {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> Platform.runLater(() -> {\n-          createGameController.initMapSelection();\n-          createGameController.mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            createGameController.mapListView.getSelectionModel().select(mapBean);\n-            createGameController.mapListView.scrollTo(mapBean);\n-            createGameController.setSelectedMap(mapBean);\n-          });\n-        }));\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> Platform.runLater(() -> {\n-          createGameController.initMapSelection();\n-          createGameController.mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            createGameController.mapListView.getSelectionModel().select(mapBean);\n-            createGameController.mapListView.scrollTo(mapBean);\n-            createGameController.setSelectedMap(mapBean);\n-          });\n-        }));\n-      }\n-    } catch (IllegalArgumentException e) {\n-      String msg = e.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooNewVersion\");\n-        log.error(\"Map generation failed\", e);\n-      }\n-      if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooOldVersion\");\n-        log.error(\"Map generation failed\", e);\n-      }\n-    } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n     }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.warn(\"Map generation failed\", e);\n+    }\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 29b56b694..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -190,48 +191,52 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-    try {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> Platform.runLater(() -> {\n-          createGameController.initMapSelection();\n-          createGameController.mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            createGameController.mapListView.getSelectionModel().select(mapBean);\n-            createGameController.mapListView.scrollTo(mapBean);\n-            createGameController.setSelectedMap(mapBean);\n-          });\n-        }));\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> Platform.runLater(() -> {\n-          createGameController.initMapSelection();\n-          createGameController.mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            createGameController.mapListView.getSelectionModel().select(mapBean);\n-            createGameController.mapListView.scrollTo(mapBean);\n-            createGameController.setSelectedMap(mapBean);\n-          });\n-        }));\n-      }\n-    } catch (IllegalArgumentException e) {\n-      String msg = e.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooNewVersion\");\n-        log.error(\"Map generation failed\", e);\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n+        notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"mapGenerator.invalidName\");\n+        log.warn(\"Invalid Generated Map Name\", new IllegalArgumentException());\n+        return;\n       }\n-      if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooOldVersion\");\n-        log.error(\"Map generation failed\", e);\n-      }\n-    } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n     }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.warn(\"Map generation failed\", e);\n+    }\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -223,17 +223,17 @@ public class GenerateMapController implements Controller<Pane> {\n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n     if (cause instanceof InvalidParameterException) {\n+      log.warn(\"Map generation failed due to invalid parameter\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof UnsupportedVersionException) {\n+      log.warn(\"Map generation failed due to unsupported version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof OutdatedVersionException) {\n+      log.warn(\"Map generation failed due to outdated version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..a3372a898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -227,10 +222,10 @@ public class GenerateMapController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n     } else if (cause instanceof UnsupportedVersionException) {\n       log.warn(\"Map generation failed due to unsupported version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooNewVersion\");\n     } else if (cause instanceof OutdatedVersionException) {\n       log.warn(\"Map generation failed due to outdated version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooOldVersion\");\n     } else {\n       log.warn(\"Map generation failed\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a3372a898..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -232,10 +280,37 @@ public class GenerateMapController implements Controller<Pane> {\n     }\n   }\n \n+  @VisibleForTesting\n+  void toggleCommandlineInput() {\n+    commandLineLabel.setVisible(!commandLineLabel.isVisible());\n+    commandLineArgsText.setVisible(!commandLineArgsText.isVisible());\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n+  protected void setStyles(List<String> styles) {\n+    styles.add(0, MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    mapStyleComboBox.setItems(FXCollections.observableList(styles));\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGenerator();\n+    String mapStyle = generatorPrefs.getMapStyle();\n+    if (mapStyleComboBox.getItems().contains(mapStyle)) {\n+      mapStyleComboBox.getSelectionModel().select(mapStyle);\n+    } else {\n+      mapStyleComboBox.getSelectionModel().select(MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    }\n+    generatorPrefs.mapStyleProperty().bind(mapStyleComboBox.valueProperty());\n+    mapStyleComboBox.setVisible(true);\n+    mapStyleLabel.setVisible(true);\n+  }\n+\n+  public void onNewLabelClicked(MouseEvent mouseEvent) {\n+    if (mouseEvent.getButton().equals(MouseButton.PRIMARY) && mouseEvent.getClickCount() == 2) {\n+      toggleCommandlineInput();\n+    }\n+  }\n+\n   public Pane getRoot() {\n     return generateMapRoot;\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048087", "body": "If this return null then there is gonna be a nullpointer Exception following in the thenAccept part right XD Also createGameController.initMapSelection(); is called", "bodyText": "If this return null then there is gonna be a nullpointer Exception following in the thenAccept part right XD Also createGameController.initMapSelection(); is called", "bodyHTML": "<p dir=\"auto\">If this return null then there is gonna be a nullpointer Exception following in the thenAccept part right XD Also createGameController.initMapSelection(); is called</p>", "author": "1-alex98", "createdAt": "2020-07-06T07:58:58Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;", "originalCommit": "50bc6d15cabc20ac6a502d664221efe7e72b2f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODMwMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048302", "bodyText": "Maybe not just maybe see how it behaves.", "author": "1-alex98", "createdAt": "2020-07-06T07:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0Mjk3MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450142970", "bodyText": "I tested this and it just errored with the illegalArgument Exception but could also just move the .exceptionally to the end.", "author": "Sheikah45", "createdAt": "2020-07-06T10:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NDQ0Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450784446", "bodyText": "Moved it to the end of the futures", "author": "Sheikah45", "createdAt": "2020-07-07T11:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 18a64b9a1..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -166,60 +163,44 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText())\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            })\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }));\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray)\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            })\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }));\n-      }\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n-    if (cause instanceof IllegalArgumentException) {\n-      String msg = cause.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-        log.error(\"Map generation failed\", cause);\n-      } else if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-        log.error(\"Map generation failed\", cause);\n-      } else {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-        log.error(\"Map generation failed\", e);\n-      }\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n     } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      log.warn(\"Map generation failed\", e);\n     }\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 18a64b9a1..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -166,60 +191,49 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText())\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            })\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }));\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray)\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            })\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }));\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n+        notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"mapGenerator.invalidName\");\n+        log.warn(\"Invalid Generated Map Name\", new IllegalArgumentException());\n+        return;\n       }\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n-    if (cause instanceof IllegalArgumentException) {\n-      String msg = cause.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-        log.error(\"Map generation failed\", cause);\n-      } else if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-        log.error(\"Map generation failed\", cause);\n-      } else {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-        log.error(\"Map generation failed\", e);\n-      }\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n     } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      log.warn(\"Map generation failed\", e);\n     }\n   }\n \n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -223,17 +223,17 @@ public class GenerateMapController implements Controller<Pane> {\n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n     if (cause instanceof InvalidParameterException) {\n+      log.warn(\"Map generation failed due to invalid parameter\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof UnsupportedVersionException) {\n+      log.warn(\"Map generation failed due to unsupported version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof OutdatedVersionException) {\n+      log.warn(\"Map generation failed due to outdated version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..a3372a898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -227,10 +222,10 @@ public class GenerateMapController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n     } else if (cause instanceof UnsupportedVersionException) {\n       log.warn(\"Map generation failed due to unsupported version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooNewVersion\");\n     } else if (cause instanceof OutdatedVersionException) {\n       log.warn(\"Map generation failed due to outdated version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooOldVersion\");\n     } else {\n       log.warn(\"Map generation failed\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a3372a898..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -232,10 +280,37 @@ public class GenerateMapController implements Controller<Pane> {\n     }\n   }\n \n+  @VisibleForTesting\n+  void toggleCommandlineInput() {\n+    commandLineLabel.setVisible(!commandLineLabel.isVisible());\n+    commandLineArgsText.setVisible(!commandLineArgsText.isVisible());\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n+  protected void setStyles(List<String> styles) {\n+    styles.add(0, MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    mapStyleComboBox.setItems(FXCollections.observableList(styles));\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGenerator();\n+    String mapStyle = generatorPrefs.getMapStyle();\n+    if (mapStyleComboBox.getItems().contains(mapStyle)) {\n+      mapStyleComboBox.getSelectionModel().select(mapStyle);\n+    } else {\n+      mapStyleComboBox.getSelectionModel().select(MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    }\n+    generatorPrefs.mapStyleProperty().bind(mapStyleComboBox.valueProperty());\n+    mapStyleComboBox.setVisible(true);\n+    mapStyleLabel.setVisible(true);\n+  }\n+\n+  public void onNewLabelClicked(MouseEvent mouseEvent) {\n+    if (mouseEvent.getButton().equals(MouseButton.PRIMARY) && mouseEvent.getClickCount() == 2) {\n+      toggleCommandlineInput();\n+    }\n+  }\n+\n   public Pane getRoot() {\n     return generateMapRoot;\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048675", "body": "Should they not all be warn", "bodyText": "Should they not all be warn", "bodyHTML": "<p dir=\"auto\">Should they not all be warn</p>", "author": "1-alex98", "createdAt": "2020-07-06T08:00:08Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            })\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }));\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            })\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }));\n+      }\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof IllegalArgumentException) {\n+      String msg = cause.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+        log.error(\"Map generation failed\", cause);\n+      } else if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+        log.error(\"Map generation failed\", cause);\n+      } else {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+    } else {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.error(\"Map generation failed\", e);", "originalCommit": "50bc6d15cabc20ac6a502d664221efe7e72b2f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NTE3OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450145178", "bodyText": "I am not sure what you me by all of them being warn? is there another function to the notification service?", "author": "Sheikah45", "createdAt": "2020-07-06T11:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NjE1Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450676153", "bodyText": "log.warn(....)", "author": "1-alex98", "createdAt": "2020-07-07T07:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MDIxNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450770215", "bodyText": "Ah got it", "author": "Sheikah45", "createdAt": "2020-07-07T10:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4Mzc3Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450783773", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-07T11:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 18a64b9a1..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -166,60 +163,44 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText())\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            })\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }));\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray)\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            })\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }));\n-      }\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n-    if (cause instanceof IllegalArgumentException) {\n-      String msg = cause.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-        log.error(\"Map generation failed\", cause);\n-      } else if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-        log.error(\"Map generation failed\", cause);\n-      } else {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-        log.error(\"Map generation failed\", e);\n-      }\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n     } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      log.warn(\"Map generation failed\", e);\n     }\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 18a64b9a1..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -166,60 +191,49 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText())\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            })\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }));\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray)\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            })\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }));\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n+        notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"mapGenerator.invalidName\");\n+        log.warn(\"Invalid Generated Map Name\", new IllegalArgumentException());\n+        return;\n       }\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n-    if (cause instanceof IllegalArgumentException) {\n-      String msg = cause.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-        log.error(\"Map generation failed\", cause);\n-      } else if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-        log.error(\"Map generation failed\", cause);\n-      } else {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-        log.error(\"Map generation failed\", e);\n-      }\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n     } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-      log.error(\"Map generation failed\", e);\n+      log.warn(\"Map generation failed\", e);\n     }\n   }\n \n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -223,17 +223,17 @@ public class GenerateMapController implements Controller<Pane> {\n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n     if (cause instanceof InvalidParameterException) {\n+      log.warn(\"Map generation failed due to invalid parameter\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof UnsupportedVersionException) {\n+      log.warn(\"Map generation failed due to unsupported version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof OutdatedVersionException) {\n+      log.warn(\"Map generation failed due to outdated version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..a3372a898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -227,10 +222,10 @@ public class GenerateMapController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n     } else if (cause instanceof UnsupportedVersionException) {\n       log.warn(\"Map generation failed due to unsupported version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooNewVersion\");\n     } else if (cause instanceof OutdatedVersionException) {\n       log.warn(\"Map generation failed due to outdated version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooOldVersion\");\n     } else {\n       log.warn(\"Map generation failed\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a3372a898..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -232,10 +280,37 @@ public class GenerateMapController implements Controller<Pane> {\n     }\n   }\n \n+  @VisibleForTesting\n+  void toggleCommandlineInput() {\n+    commandLineLabel.setVisible(!commandLineLabel.isVisible());\n+    commandLineArgsText.setVisible(!commandLineArgsText.isVisible());\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n+  protected void setStyles(List<String> styles) {\n+    styles.add(0, MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    mapStyleComboBox.setItems(FXCollections.observableList(styles));\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGenerator();\n+    String mapStyle = generatorPrefs.getMapStyle();\n+    if (mapStyleComboBox.getItems().contains(mapStyle)) {\n+      mapStyleComboBox.getSelectionModel().select(mapStyle);\n+    } else {\n+      mapStyleComboBox.getSelectionModel().select(MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    }\n+    generatorPrefs.mapStyleProperty().bind(mapStyleComboBox.valueProperty());\n+    mapStyleComboBox.setVisible(true);\n+    mapStyleLabel.setVisible(true);\n+  }\n+\n+  public void onNewLabelClicked(MouseEvent mouseEvent) {\n+    if (mouseEvent.getButton().equals(MouseButton.PRIMARY) && mouseEvent.getClickCount() == 2) {\n+      toggleCommandlineInput();\n+    }\n+  }\n+\n   public Pane getRoot() {\n     return generateMapRoot;\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTQzNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450049434", "body": "I think there is a static Method on the CompletableFuture class that does exactly that", "bodyText": "I think there is a static Method on the CompletableFuture class that does exactly that", "bodyHTML": "<p dir=\"auto\">I think there is a static Method on the CompletableFuture class that does exactly that</p>", "author": "1-alex98", "createdAt": "2020-07-06T08:01:30Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,43 +115,87 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<List<GithubGeneratorRelease>>(){});\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.supplyAsync(() -> {", "originalCommit": "50bc6d15cabc20ac6a502d664221efe7e72b2f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MzcwMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450783702", "bodyText": "Used", "author": "Sheikah45", "createdAt": "2020-07-07T11:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex d60b8bd7d..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -151,23 +152,22 @@ public class MapGeneratorService implements InitializingBean {\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<List<GithubGeneratorRelease>>(){});\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n     List<GithubGeneratorRelease> releases = response.getBody();\n     for (GithubGeneratorRelease release : releases) {\n-      version.parseVersion(release.getTag_name());\n+      version.parseVersion(release.getTagName());\n       if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n         return version;\n       }\n     }\n-    throw new RuntimeException(\"No Valid Generator Version Found\");\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      return CompletableFuture.supplyAsync(() -> {\n-        throw new IllegalArgumentException(\"Map name is not a generated map\");\n-      });\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex d60b8bd7d..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -151,23 +152,22 @@ public class MapGeneratorService implements InitializingBean {\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<List<GithubGeneratorRelease>>(){});\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n     List<GithubGeneratorRelease> releases = response.getBody();\n     for (GithubGeneratorRelease release : releases) {\n-      version.parseVersion(release.getTag_name());\n+      version.parseVersion(release.getTagName());\n       if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n         return version;\n       }\n     }\n-    throw new RuntimeException(\"No Valid Generator Version Found\");\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      return CompletableFuture.supplyAsync(() -> {\n-        throw new IllegalArgumentException(\"Map name is not a generated map\");\n-      });\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..a65973761 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -169,11 +170,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(matcher.group(1), matcher.group(2));\n-  }\n-\n-  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n-    return generateMap(new ComparableVersion(version), seedAndOptions);\n+    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n   }\n \n   public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex a65973761..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -170,11 +147,60 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n+\n+    ComparableVersion version = new ComparableVersion(matcher.group(1));\n+    String seed = matcher.group(2);\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(version);\n+    generateMapTask.setSeed(seed);\n+    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n   }\n \n-  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n \n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setGenerationType(generationType);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    if (optionMap.containsKey(\"landDensity\")) {\n+      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n+    }\n+    if (optionMap.containsKey(\"plateauDensity\")) {\n+      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n+    }\n+    if (optionMap.containsKey(\"mountainDensity\")) {\n+      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n+    }\n+    if (optionMap.containsKey(\"rampDensity\")) {\n+      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n+    }\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n+  }\n+\n+  public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -193,11 +189,46 @@ public class MapGeneratorService implements InitializingBean {\n     if (optionMap.containsKey(\"rampDensity\")) {\n       generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n     }\n+    if (optionMap.containsKey(\"mexDensity\")) {\n+      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n+    }\n+    if (optionMap.containsKey(\"reclaimDensity\")) {\n+      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n+    }\n \n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      return generateMapFuture.join();\n-    });\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setStyle(style);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -150,83 +131,28 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion version = new ComparableVersion(matcher.group(1));\n     String seed = matcher.group(2);\n \n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n     generateMapTask.setVersion(version);\n     generateMapTask.setSeed(seed);\n-    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setMapName(mapName);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+  public CompletableFuture<String> generateMap(GeneratorOptions generatorOptions) {\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n \n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(defaultGeneratorVersion);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setGenerationType(generationType);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    if (optionMap.containsKey(\"landDensity\")) {\n-      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n-    }\n-    if (optionMap.containsKey(\"plateauDensity\")) {\n-      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mountainDensity\")) {\n-      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n-    }\n-    if (optionMap.containsKey(\"rampDensity\")) {\n-      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mexDensity\")) {\n-      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n-    }\n-    if (optionMap.containsKey(\"reclaimDensity\")) {\n-      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n-    }\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setStyle(style);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setVersion(defaultGeneratorVersion);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    generateMapTask.setGeneratorOptions(generatorOptions);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -158,8 +151,10 @@ public class MapGeneratorService implements DisposableBean {\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n       return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczODk5Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452738993", "body": "This code doesn't seem properly formatted; please use/enable IntelliJ's auto formatting", "bodyText": "This code doesn't seem properly formatted; please use/enable IntelliJ's auto formatting", "bodyHTML": "<p dir=\"auto\">This code doesn't seem properly formatted; please use/enable IntelliJ's auto formatting</p>", "author": "micheljung", "createdAt": "2020-07-10T09:42:24Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,41 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+              mapListView.getSelectionModel().select(mapBean);\n+              mapListView.scrollTo(mapBean);\n+              setSelectedMap(mapBean);", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzUwNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793504", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczODk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 74ba4ca11..365347191 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -392,10 +392,10 @@ public class CreateGameController implements Controller<Pane> {\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n                 .findAny()\n                 .ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 74ba4ca11..489939536 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -392,10 +404,10 @@ public class CreateGameController implements Controller<Pane> {\n                 .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n                 .findAny()\n                 .ifPresent(mapBean -> {\n-              mapListView.getSelectionModel().select(mapBean);\n-              mapListView.scrollTo(mapBean);\n-              setSelectedMap(mapBean);\n-            });\n+                  mapListView.getSelectionModel().select(mapBean);\n+                  mapListView.scrollTo(mapBean);\n+                  setSelectedMap(mapBean);\n+                });\n           });\n         });\n       } else {\n", "next_change": {"commit": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 489939536..f0641b6e9 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -415,7 +370,7 @@ public class CreateGameController implements Controller<Pane> {\n \n         Pane root = generateMapController.getRoot();\n         generateMapController.setCreateGameController(this);\n-        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));\n+        Dialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generateMap.dialog\"));\n         generateMapController.setOnCloseButtonClickedListener(dialog::close);\n \n         root.requestFocus();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f0641b6e9..52d009762 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -376,8 +380,8 @@ public class CreateGameController implements Controller<Pane> {\n         root.requestFocus();\n       }\n     } catch (Exception e) {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.error(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 52d009762..e43aa35d8 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -390,13 +405,30 @@ public class CreateGameController implements Controller<Pane> {\n         .map(ModVersion::getUid)\n         .collect(Collectors.toSet());\n \n+    Integer minRating = null;\n+    Integer maxRating = null;\n+    boolean enforceRating;\n+\n+    if (!minRankingTextField.getText().isEmpty()) {\n+      minRating = Integer.parseInt(minRankingTextField.getText());\n+    }\n+\n+    if(!maxRankingTextField.getText().isEmpty()) {\n+      maxRating = Integer.parseInt(maxRankingTextField.getText());\n+    }\n+\n+    enforceRating = enforceRankingCheckBox.isSelected();\n+\n     NewGameInfo newGameInfo = new NewGameInfo(\n         titleTextField.getText(),\n         Strings.emptyToNull(passwordTextField.getText()),\n         featuredModListView.getSelectionModel().getSelectedItem(),\n         mapListView.getSelectionModel().getSelectedItem().getFolderName(),\n         mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC);\n+        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n+        minRating,\n+        maxRating,\n+        enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n       log.warn(\"Game could not be hosted\", throwable);\n", "next_change": {"commit": "a99d0a4f294dc25d60995684c232ddcf3567211c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e43aa35d8..24649c91a 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -435,8 +444,6 @@ public class CreateGameController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n-\n-    onCloseButtonClicked();\n   }\n \n   public Pane getRoot() {\n", "next_change": {"commit": "29cfe484403e9a5f0c133ade10f640b18a957f74", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 24649c91a..e91f62a57 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -440,7 +479,7 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      log.warn(\"Game could not be hosted\", throwable);\n+      log.error(\"Game could not be hosted\", throwable);\n       notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       return null;\n     });\n", "next_change": {"commit": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex e91f62a57..96c446e17 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -479,8 +492,13 @@ public class CreateGameController implements Controller<Pane> {\n         enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n+      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      if (throwable instanceof NotifiableException) {\n+        notificationService.addErrorNotification((NotifiableException) throwable);\n+      } else {\n+        notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n+      }\n       return null;\n     });\n   }\n", "next_change": {"commit": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 96c446e17..77426f0de 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -480,22 +462,15 @@ public class CreateGameController implements Controller<Pane> {\n \n     enforceRating = enforceRankingCheckBox.isSelected();\n \n-    NewGameInfo newGameInfo = new NewGameInfo(\n-        titleTextField.getText().trim(),\n-        Strings.emptyToNull(passwordTextField.getText()),\n-        featuredModListView.getSelectionModel().getSelectedItem(),\n-        mapVersion.getFolderName(),\n-        mods,\n-        onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC,\n-        minRating,\n-        maxRating,\n-        enforceRating);\n+    NewGameInfo newGameInfo = new NewGameInfo(titleTextField.getText()\n+        .trim(), Strings.emptyToNull(passwordTextField.getText()), featuredModListView.getSelectionModel()\n+        .getSelectedItem(), mapVersion.getFolderName(), mods, onlyForFriendsCheckBox.isSelected() ? GameVisibility.PRIVATE : GameVisibility.PUBLIC, minRating, maxRating, enforceRating);\n \n     gameService.hostGame(newGameInfo).exceptionally(throwable -> {\n-      throwable  = ConcurrentUtil.unwrapIfCompletionException(throwable);\n+      throwable = ConcurrentUtil.unwrapIfCompletionException(throwable);\n       log.error(\"Game could not be hosted\", throwable);\n-      if (throwable instanceof NotifiableException) {\n-        notificationService.addErrorNotification((NotifiableException) throwable);\n+      if (throwable instanceof NotifiableException notifiableException) {\n+        notificationService.addErrorNotification(notifiableException);\n       } else {\n         notificationService.addImmediateErrorNotification(throwable, \"game.create.failed\");\n       }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczOTczNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452739735", "body": "This is redundant; inline `init()`", "bodyText": "This is redundant; inline init()", "bodyHTML": "<p dir=\"auto\">This is redundant; inline <code>init()</code></p>", "author": "micheljung", "createdAt": "2020-07-10T09:43:51Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzQ4Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793486", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczOTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -52,10 +56,6 @@ public class GenerateMapController implements Controller<Pane> {\n   private Runnable onCloseButtonClickedListener;\n \n   public void initialize() {\n-    init();\n-  }\n-\n-  private void init() {\n     initSpawnCountSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n", "next_change": {"commit": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex ebdde210e..7615184a5 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -54,9 +58,12 @@ public class GenerateMapController implements Controller<Pane> {\n   public CheckBox rampRandom;\n   public HBox rampBox;\n   private Runnable onCloseButtonClickedListener;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "5e3e526df2481369493481e684879926b9c96fb2", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 7615184a5..2abcb07ef 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -72,33 +72,17 @@ public class GenerateMapController implements Controller<Pane> {\n \n   private void initSpawnCountSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty;\n-    if (mapSizeProperty.equals(\"5km\")) {\n-      spawnCountProperty = 2;\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, spawnCountProperty, 2));\n-    } else {\n-      spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-      spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n-    }\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n     generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n   }\n \n   private void initMapSizeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n     String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<String>(validMapSizes));\n+    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n-    mapSizeSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n-      if (newValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 4, 2, 2));\n-      } else if (oldValue.equals(\"5km\")) {\n-        spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountSpinner.getValue(), 2));\n-      }\n-      generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n-    });\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": {"commit": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 2abcb07ef..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -83,6 +89,7 @@ public class GenerateMapController implements Controller<Pane> {\n     mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n     mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n     generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n+    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n   private StringConverter<Double> getLabelConverter() {\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -37,26 +45,30 @@ public class GenerateMapController implements Controller<Pane> {\n   public Button generateMapButton;\n   public TextField previousMapName;\n   public Spinner<Integer> spawnCountSpinner;\n+  public Spinner<String> mapSizeSpinner;\n   public Slider waterSlider;\n   public CheckBox waterRandom;\n-  public HBox waterBox;\n+  public HBox waterSliderBox;\n+  public HBox waterRandomBox;\n   public Slider mountainSlider;\n   public CheckBox mountainRandom;\n-  public HBox mountainBox;\n+  public HBox mountainSliderBox;\n+  public HBox mountainRandomBox;\n   public Slider plateauSlider;\n   public CheckBox plateauRandom;\n-  public HBox plateauBox;\n+  public HBox plateauSliderBox;\n+  public HBox plateauRandomBox;\n   public Slider rampSlider;\n   public CheckBox rampRandom;\n-  public HBox rampBox;\n+  public HBox rampSliderBox;\n+  public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n+  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n-    init();\n-  }\n-\n-  private void init() {\n     initSpawnCountSpinner();\n+    initMapSizeSpinner();\n     initWaterSlider();\n     initPlateauSlider();\n     initMountainSlider();\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -63,8 +63,8 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox rampSliderBox;\n   public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n     initSpawnCountSpinner();\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..3d8026cab 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -67,6 +73,7 @@ public class GenerateMapController implements Controller<Pane> {\n   private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n+    initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n     initWaterSlider();\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 3d8026cab..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -76,10 +79,15 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initWaterSlider();\n-    initPlateauSlider();\n-    initMountainSlider();\n-    initRampSlider();\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..613aa52ee 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -79,14 +79,14 @@ public class GenerateMapController implements Controller<Pane> {\n     initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n+    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n   }\n \n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 613aa52ee..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -88,6 +96,10 @@ public class GenerateMapController implements Controller<Pane> {\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n     initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -80,25 +96,34 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox reclaimSliderBox;\n   public HBox reclaimRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private final int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<Integer> validTeamSizes = FXCollections.observableList(IntStream.range(0, 17)\n+      .filter(value -> value != 1)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableTeamSizes = new FilteredList<>(validTeamSizes);\n+  private final ObservableList<Integer> validSpawnCount = FXCollections.observableList(IntStream.range(2, 17)\n+      .boxed().collect(Collectors.toList()));\n+  private final FilteredList<Integer> selectableSpawnCounts = new FilteredList<>(validSpawnCount);\n+  public Spinner<Integer> numTeamsSpinner;\n \n   public void initialize() {\n-    initGenerationTypeSpinner();\n+    JavaFxUtil.bindManagedToVisible(commandLineLabel, commandLineArgsText, mapStyleComboBox, mapStyleLabel);\n+    initCommandlineArgs();\n+    initGenerationTypeComboBox();\n+    initMapStyleComboBox();\n+    initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGenerator();\n-    initOptionSlider(genPrefs.waterDensityProperty(), genPrefs.waterRandomProperty(),\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n         waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(genPrefs.plateauDensityProperty(), genPrefs.plateauRandomProperty(),\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n         plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(genPrefs.mountainDensityProperty(), genPrefs.mountainRandomProperty(),\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n         mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(genPrefs.rampDensityProperty(), genPrefs.rampRandomProperty(),\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n         rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(genPrefs.mexDensityProperty(), genPrefs.mexRandomProperty(),\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n         mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(genPrefs.reclaimDensityProperty(), genPrefs.reclaimRandomProperty(),\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n         reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n", "next_change": {"commit": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 318081216..528613ac4 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -113,18 +114,12 @@ public class GenerateMapController implements Controller<Pane> {\n     initNumTeamsSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(),\n-        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n-    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(),\n-        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n-    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(),\n-        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n-    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(),\n-        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n-    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(),\n-        mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n-    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(),\n-        reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n+    initOptionSlider(generatorPrefs.waterDensityProperty(), generatorPrefs.waterRandomProperty(), waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(generatorPrefs.plateauDensityProperty(), generatorPrefs.plateauRandomProperty(), plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(generatorPrefs.mountainDensityProperty(), generatorPrefs.mountainRandomProperty(), mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(generatorPrefs.rampDensityProperty(), generatorPrefs.rampRandomProperty(), rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+    initOptionSlider(generatorPrefs.mexDensityProperty(), generatorPrefs.mexRandomProperty(), mexSlider, mexSliderBox, mexRandom, mexRandomBox);\n+    initOptionSlider(generatorPrefs.reclaimDensityProperty(), generatorPrefs.reclaimRandomProperty(), reclaimSlider, reclaimSliderBox, reclaimRandom, reclaimRandomBox);\n   }\n \n   private StringConverter<GenerationType> getGenerationTypeConverter() {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDI1OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452740259", "body": "Use `I18n` and message keys.", "bodyText": "Use I18n and message keys.", "bodyHTML": "<p dir=\"auto\">Use <code>I18n</code> and message keys.</p>", "author": "micheljung", "createdAt": "2020-07-10T09:44:52Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzQzNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793437", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -78,17 +78,14 @@ public class GenerateMapController implements Controller<Pane> {\n       @Override\n       public String toString(Double n) {\n         if (n < 127) {\n-          return \"None\";\n+          return \"%game.generate.none\";\n         }\n-        return \"Lots\";\n+        return \"%game.generate.lots\";\n       }\n \n       @Override\n       public Double fromString(String s) {\n-        if (s.equals(\"None\")) {\n-          return 0d;\n-        }\n-        return 127d;\n+        throw new UnsupportedOperationException();\n       }\n     };\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -78,17 +97,14 @@ public class GenerateMapController implements Controller<Pane> {\n       @Override\n       public String toString(Double n) {\n         if (n < 127) {\n-          return \"None\";\n+          return \"%game.generate.none\";\n         }\n-        return \"Lots\";\n+        return \"%game.generate.lots\";\n       }\n \n       @Override\n       public Double fromString(String s) {\n-        if (s.equals(\"None\")) {\n-          return 0d;\n-        }\n-        return 127d;\n+        throw new UnsupportedOperationException();\n       }\n     };\n   }\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -63,123 +72,92 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox rampSliderBox;\n   public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n+    initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initWaterSlider();\n-    initPlateauSlider();\n-    initMountainSlider();\n-    initRampSlider();\n-  }\n-\n-  private void initSpawnCountSpinner() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n-    generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n-    spawnCountSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-  }\n-\n-  private void initMapSizeSpinner() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n-    mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n-    generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n-    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-  }\n-\n-  private StringConverter<Double> getLabelConverter() {\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+  }\n+\n+  private StringConverter<GenerationType> getGenerationTypeConverter() {\n     return new StringConverter<>() {\n       @Override\n-      public String toString(Double n) {\n-        if (n < 127) {\n-          return \"%game.generate.none\";\n-        }\n-        return \"%game.generate.lots\";\n+      public String toString(GenerationType generationType) {\n+        return i18n.get(generationType.getI18nKey());\n       }\n \n       @Override\n-      public Double fromString(String s) {\n+      public GenerationType fromString(String s) {\n         throw new UnsupportedOperationException();\n       }\n     };\n   }\n \n-  private void initWaterSlider() {\n+  private void initGenerationTypeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n-    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n-    waterSlider.setLabelFormatter(getLabelConverter());\n-    waterRandom.setSelected(waterRandomProperty);\n-    waterSlider.setValue(waterDensityProperty);\n-    waterSliderBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n-    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n-    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n-    waterSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    waterRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    GenerationType generationTypeProperty = generatorPrefs.getGenerationTypeProperty();\n+    generationTypeComboBox.setItems(FXCollections.observableArrayList(GenerationType.values()));\n+    generationTypeComboBox.setConverter(getGenerationTypeConverter());\n+    generationTypeComboBox.setValue(generationTypeProperty);\n+    generatorPrefs.generationTypePropertyProperty().bind(generationTypeComboBox.valueProperty());\n+    generationTypeComboBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n-  private void initPlateauSlider() {\n+  private void initSpawnCountSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n-    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n-    plateauSlider.setLabelFormatter(getLabelConverter());\n-    plateauRandom.setSelected(plateauRandomProperty);\n-    plateauSlider.setValue(plateauDensityProperty);\n-    plateauSliderBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n-    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n-    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n-    plateauSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    plateauRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n+    spawnCountSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n-  private void initMountainSlider() {\n+  private void initMapSizeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n-    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n-    mountainSlider.setLabelFormatter(getLabelConverter());\n-    mountainRandom.setSelected(mountainRandomProperty);\n-    mountainSlider.setValue(mountainDensityProperty);\n-    mountainSliderBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n-    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n-    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n-    mountainSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    mountainRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n+    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n+    mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n+    generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n+    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n-  private void initRampSlider() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n-    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n-    rampSlider.setLabelFormatter(getLabelConverter());\n-    rampRandom.setSelected(rampRandomProperty);\n-    rampSlider.setValue(rampDensityProperty);\n-    rampSliderBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n-    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n-    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n-    rampSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    rampRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+  private void initOptionSlider(IntegerProperty valueProperty, BooleanProperty randomProperty,\n+                                Slider slider, HBox sliderContainer, CheckBox randomBox, HBox randomContainer) {\n+    sliderContainer.visibleProperty().bind(randomBox.selectedProperty().not());\n+    slider.setValue(valueProperty.getValue());\n+    randomBox.setSelected(randomProperty.getValue());\n+    slider.valueProperty().bindBidirectional(valueProperty);\n+    randomBox.selectedProperty().bindBidirectional(randomProperty);\n+    sliderContainer.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n+    randomContainer.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n   }\n \n-  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n-    if (checkBox.isSelected()) {\n-      return (byte) new Random().nextInt(127);\n+  private Optional<Float> getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected() || generationTypeComboBox.getValue() != GenerationType.CASUAL) {\n+      return Optional.empty();\n     }\n-    return (byte) slider.getValue();\n+    return Optional.of(((byte) slider.getValue()) / 127f);\n   }\n \n-  protected byte[] getOptionArray() {\n-    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-    byte mapSize = (byte) (mapValues[validMapSizes.indexOf(mapSizeSpinner.getValue())] / 64);\n-    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n-    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-    return new byte[]{spawnCount, mapSize, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  protected Map<String, Float> getOptionMap() {\n+    Map<String, Float> optionMap = new HashMap<>();\n+    if (generationTypeComboBox.getValue() == GenerationType.CASUAL) {\n+      getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionMap.put(\"landDensity\", 1 - value));\n+      getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n+      getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n+      getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n+    }\n+    return optionMap;\n   }\n \n   public void onCloseButtonClicked() {\n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -156,6 +168,8 @@ public class GenerateMapController implements Controller<Pane> {\n       getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n       getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n       getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n+      getSliderValue(mexSlider, mexRandom).ifPresent(value -> optionMap.put(\"mexDensity\", value));\n+      getSliderValue(reclaimSlider, reclaimRandom).ifPresent(value -> optionMap.put(\"reclaimDensity\", value));\n     }\n     return optionMap;\n   }\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..360e44084 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -161,21 +269,30 @@ public class GenerateMapController implements Controller<Pane> {\n     return Optional.of(((byte) slider.getValue()) / 127f);\n   }\n \n-  protected Map<String, Float> getOptionMap() {\n-    Map<String, Float> optionMap = new HashMap<>();\n-    if (generationTypeComboBox.getValue() == GenerationType.CASUAL) {\n-      getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionMap.put(\"landDensity\", 1 - value));\n-      getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n-      getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n-      getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n-      getSliderValue(mexSlider, mexRandom).ifPresent(value -> optionMap.put(\"mexDensity\", value));\n-      getSliderValue(reclaimSlider, reclaimRandom).ifPresent(value -> optionMap.put(\"reclaimDensity\", value));\n+  private GeneratorOptions getGeneratorOptions() {\n+    GeneratorOptions.GeneratorOptionsBuilder optionsBuilder = GeneratorOptions.builder();\n+    if (!commandLineArgsText.getText().isBlank()) {\n+      optionsBuilder.commandLineArgs(commandLineArgsText.getText());\n     }\n-    return optionMap;\n+\n+    optionsBuilder.spawnCount(spawnCountSpinner.getValue());\n+    optionsBuilder.mapSize((int) (mapSizeSpinner.getValue() * KM_TO_PIXEL_FACTOR));\n+    optionsBuilder.numTeams(numTeamsSpinner.getValue());\n+    optionsBuilder.generationType(generationTypeComboBox.getValue());\n+    optionsBuilder.style(mapStyleComboBox.getValue());\n+    getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionsBuilder.landDensity(1 - value));\n+    getSliderValue(plateauSlider, plateauRandom).ifPresent(optionsBuilder::plateauDensity);\n+    getSliderValue(mountainSlider, mountainRandom).ifPresent(optionsBuilder::mountainDensity);\n+    getSliderValue(rampSlider, rampRandom).ifPresent(optionsBuilder::rampDensity);\n+    getSliderValue(mexSlider, mexRandom).ifPresent(optionsBuilder::mexDensity);\n+    getSliderValue(reclaimSlider, reclaimRandom).ifPresent(optionsBuilder::reclaimDensity);\n+    return optionsBuilder.build();\n   }\n \n   public void onCloseButtonClicked() {\n-    onCloseButtonClickedListener.run();\n+    if (onCloseButtonClickedListener != null) {\n+      onCloseButtonClickedListener.run();\n+    }\n   }\n \n   public void onGenerateMapButtonClicked() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 360e44084..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -300,7 +295,6 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-    preferencesService.storeInBackground();\n     CompletableFuture<String> generateFuture;\n     if (!previousMapName.getText().isEmpty()) {\n       if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDY2Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452740662", "body": "Conversion from String to a number is most likely never used; just throw an UnsupportedOperationException", "bodyText": "Conversion from String to a number is most likely never used; just throw an UnsupportedOperationException", "bodyHTML": "<p dir=\"auto\">Conversion from String to a number is most likely never used; just throw an UnsupportedOperationException</p>", "author": "micheljung", "createdAt": "2020-07-10T09:45:36Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzM5MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793390", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -78,17 +78,14 @@ public class GenerateMapController implements Controller<Pane> {\n       @Override\n       public String toString(Double n) {\n         if (n < 127) {\n-          return \"None\";\n+          return \"%game.generate.none\";\n         }\n-        return \"Lots\";\n+        return \"%game.generate.lots\";\n       }\n \n       @Override\n       public Double fromString(String s) {\n-        if (s.equals(\"None\")) {\n-          return 0d;\n-        }\n-        return 127d;\n+        throw new UnsupportedOperationException();\n       }\n     };\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -78,17 +97,14 @@ public class GenerateMapController implements Controller<Pane> {\n       @Override\n       public String toString(Double n) {\n         if (n < 127) {\n-          return \"None\";\n+          return \"%game.generate.none\";\n         }\n-        return \"Lots\";\n+        return \"%game.generate.lots\";\n       }\n \n       @Override\n       public Double fromString(String s) {\n-        if (s.equals(\"None\")) {\n-          return 0d;\n-        }\n-        return 127d;\n+        throw new UnsupportedOperationException();\n       }\n     };\n   }\n", "next_change": {"commit": "be4cf17351c661e95ecd01225d97960804e472a8", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..fa452cf79 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -63,123 +72,92 @@ public class GenerateMapController implements Controller<Pane> {\n   public HBox rampSliderBox;\n   public HBox rampRandomBox;\n   private Runnable onCloseButtonClickedListener;\n-  private ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n-  private int[] mapValues = new int[]{256, 512, 1024};\n+  private final ObservableList<String> validMapSizes = FXCollections.observableArrayList(\"5km\", \"10km\", \"20km\");\n+  private final int[] mapValues = new int[]{256, 512, 1024};\n \n   public void initialize() {\n+    initGenerationTypeSpinner();\n     initSpawnCountSpinner();\n     initMapSizeSpinner();\n-    initWaterSlider();\n-    initPlateauSlider();\n-    initMountainSlider();\n-    initRampSlider();\n-  }\n-\n-  private void initSpawnCountSpinner() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n-    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n-    generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n-    spawnCountSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-  }\n-\n-  private void initMapSizeSpinner() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n-    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n-    mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n-    generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n-    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-  }\n-\n-  private StringConverter<Double> getLabelConverter() {\n+    GeneratorPrefs genPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    initOptionSlider(genPrefs.waterDensityPropertyProperty(), genPrefs.waterRandomPropertyProperty(),\n+        waterSlider, waterSliderBox, waterRandom, waterRandomBox);\n+    initOptionSlider(genPrefs.plateauDensityPropertyProperty(), genPrefs.plateauRandomPropertyProperty(),\n+        plateauSlider, plateauSliderBox, plateauRandom, plateauRandomBox);\n+    initOptionSlider(genPrefs.mountainDensityPropertyProperty(), genPrefs.mountainRandomPropertyProperty(),\n+        mountainSlider, mountainSliderBox, mountainRandom, mountainRandomBox);\n+    initOptionSlider(genPrefs.rampDensityPropertyProperty(), genPrefs.rampRandomPropertyProperty(),\n+        rampSlider, rampSliderBox, rampRandom, rampRandomBox);\n+  }\n+\n+  private StringConverter<GenerationType> getGenerationTypeConverter() {\n     return new StringConverter<>() {\n       @Override\n-      public String toString(Double n) {\n-        if (n < 127) {\n-          return \"%game.generate.none\";\n-        }\n-        return \"%game.generate.lots\";\n+      public String toString(GenerationType generationType) {\n+        return i18n.get(generationType.getI18nKey());\n       }\n \n       @Override\n-      public Double fromString(String s) {\n+      public GenerationType fromString(String s) {\n         throw new UnsupportedOperationException();\n       }\n     };\n   }\n \n-  private void initWaterSlider() {\n+  private void initGenerationTypeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n-    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n-    waterSlider.setLabelFormatter(getLabelConverter());\n-    waterRandom.setSelected(waterRandomProperty);\n-    waterSlider.setValue(waterDensityProperty);\n-    waterSliderBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n-    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n-    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n-    waterSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    waterRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    GenerationType generationTypeProperty = generatorPrefs.getGenerationTypeProperty();\n+    generationTypeComboBox.setItems(FXCollections.observableArrayList(GenerationType.values()));\n+    generationTypeComboBox.setConverter(getGenerationTypeConverter());\n+    generationTypeComboBox.setValue(generationTypeProperty);\n+    generatorPrefs.generationTypePropertyProperty().bind(generationTypeComboBox.valueProperty());\n+    generationTypeComboBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n-  private void initPlateauSlider() {\n+  private void initSpawnCountSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n-    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n-    plateauSlider.setLabelFormatter(getLabelConverter());\n-    plateauRandom.setSelected(plateauRandomProperty);\n-    plateauSlider.setValue(plateauDensityProperty);\n-    plateauSliderBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n-    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n-    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n-    plateauSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    plateauRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    generatorPrefs.spawnCountPropertyProperty().bind(spawnCountSpinner.getValueFactory().valueProperty());\n+    spawnCountSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n-  private void initMountainSlider() {\n+  private void initMapSizeSpinner() {\n     GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n-    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n-    mountainSlider.setLabelFormatter(getLabelConverter());\n-    mountainRandom.setSelected(mountainRandomProperty);\n-    mountainSlider.setValue(mountainDensityProperty);\n-    mountainSliderBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n-    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n-    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n-    mountainSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    mountainRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+    String mapSizeProperty = generatorPrefs.getMapSizeProperty();\n+    mapSizeSpinner.setValueFactory(new ListSpinnerValueFactory<>(validMapSizes));\n+    mapSizeSpinner.increment(validMapSizes.indexOf(mapSizeProperty));\n+    generatorPrefs.mapSizePropertyProperty().bind(mapSizeSpinner.getValueFactory().valueProperty());\n+    mapSizeSpinner.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n   }\n \n-  private void initRampSlider() {\n-    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n-    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n-    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n-    rampSlider.setLabelFormatter(getLabelConverter());\n-    rampRandom.setSelected(rampRandomProperty);\n-    rampSlider.setValue(rampDensityProperty);\n-    rampSliderBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n-    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n-    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n-    rampSliderBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n-    rampRandomBox.disableProperty().bind(Bindings.isNotEmpty(previousMapName.textProperty()));\n+  private void initOptionSlider(IntegerProperty valueProperty, BooleanProperty randomProperty,\n+                                Slider slider, HBox sliderContainer, CheckBox randomBox, HBox randomContainer) {\n+    sliderContainer.visibleProperty().bind(randomBox.selectedProperty().not());\n+    slider.setValue(valueProperty.getValue());\n+    randomBox.setSelected(randomProperty.getValue());\n+    slider.valueProperty().bindBidirectional(valueProperty);\n+    randomBox.selectedProperty().bindBidirectional(randomProperty);\n+    sliderContainer.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n+    randomContainer.disableProperty().bind(Bindings.or(Bindings.isNotEmpty(previousMapName.textProperty()), Bindings.notEqual(generationTypeComboBox.valueProperty(), GenerationType.CASUAL)));\n   }\n \n-  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n-    if (checkBox.isSelected()) {\n-      return (byte) new Random().nextInt(127);\n+  private Optional<Float> getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected() || generationTypeComboBox.getValue() != GenerationType.CASUAL) {\n+      return Optional.empty();\n     }\n-    return (byte) slider.getValue();\n+    return Optional.of(((byte) slider.getValue()) / 127f);\n   }\n \n-  protected byte[] getOptionArray() {\n-    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n-    byte mapSize = (byte) (mapValues[validMapSizes.indexOf(mapSizeSpinner.getValue())] / 64);\n-    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n-    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n-    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n-    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n-    return new byte[]{spawnCount, mapSize, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  protected Map<String, Float> getOptionMap() {\n+    Map<String, Float> optionMap = new HashMap<>();\n+    if (generationTypeComboBox.getValue() == GenerationType.CASUAL) {\n+      getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionMap.put(\"landDensity\", 1 - value));\n+      getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n+      getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n+      getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n+    }\n+    return optionMap;\n   }\n \n   public void onCloseButtonClicked() {\n", "next_change": {"commit": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex fa452cf79..6aebdada7 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -156,6 +168,8 @@ public class GenerateMapController implements Controller<Pane> {\n       getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n       getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n       getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n+      getSliderValue(mexSlider, mexRandom).ifPresent(value -> optionMap.put(\"mexDensity\", value));\n+      getSliderValue(reclaimSlider, reclaimRandom).ifPresent(value -> optionMap.put(\"reclaimDensity\", value));\n     }\n     return optionMap;\n   }\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 6aebdada7..360e44084 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -161,21 +269,30 @@ public class GenerateMapController implements Controller<Pane> {\n     return Optional.of(((byte) slider.getValue()) / 127f);\n   }\n \n-  protected Map<String, Float> getOptionMap() {\n-    Map<String, Float> optionMap = new HashMap<>();\n-    if (generationTypeComboBox.getValue() == GenerationType.CASUAL) {\n-      getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionMap.put(\"landDensity\", 1 - value));\n-      getSliderValue(plateauSlider, plateauRandom).ifPresent(value -> optionMap.put(\"plateauDensity\", value));\n-      getSliderValue(mountainSlider, mountainRandom).ifPresent(value -> optionMap.put(\"mountainDensity\", value));\n-      getSliderValue(rampSlider, rampRandom).ifPresent(value -> optionMap.put(\"rampDensity\", value));\n-      getSliderValue(mexSlider, mexRandom).ifPresent(value -> optionMap.put(\"mexDensity\", value));\n-      getSliderValue(reclaimSlider, reclaimRandom).ifPresent(value -> optionMap.put(\"reclaimDensity\", value));\n+  private GeneratorOptions getGeneratorOptions() {\n+    GeneratorOptions.GeneratorOptionsBuilder optionsBuilder = GeneratorOptions.builder();\n+    if (!commandLineArgsText.getText().isBlank()) {\n+      optionsBuilder.commandLineArgs(commandLineArgsText.getText());\n     }\n-    return optionMap;\n+\n+    optionsBuilder.spawnCount(spawnCountSpinner.getValue());\n+    optionsBuilder.mapSize((int) (mapSizeSpinner.getValue() * KM_TO_PIXEL_FACTOR));\n+    optionsBuilder.numTeams(numTeamsSpinner.getValue());\n+    optionsBuilder.generationType(generationTypeComboBox.getValue());\n+    optionsBuilder.style(mapStyleComboBox.getValue());\n+    getSliderValue(waterSlider, waterRandom).ifPresent(value -> optionsBuilder.landDensity(1 - value));\n+    getSliderValue(plateauSlider, plateauRandom).ifPresent(optionsBuilder::plateauDensity);\n+    getSliderValue(mountainSlider, mountainRandom).ifPresent(optionsBuilder::mountainDensity);\n+    getSliderValue(rampSlider, rampRandom).ifPresent(optionsBuilder::rampDensity);\n+    getSliderValue(mexSlider, mexRandom).ifPresent(optionsBuilder::mexDensity);\n+    getSliderValue(reclaimSlider, reclaimRandom).ifPresent(optionsBuilder::reclaimDensity);\n+    return optionsBuilder.build();\n   }\n \n   public void onCloseButtonClicked() {\n-    onCloseButtonClickedListener.run();\n+    if (onCloseButtonClickedListener != null) {\n+      onCloseButtonClickedListener.run();\n+    }\n   }\n \n   public void onGenerateMapButtonClicked() {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 360e44084..318081216 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -300,7 +295,6 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-    preferencesService.storeInBackground();\n     CompletableFuture<String> generateFuture;\n     if (!previousMapName.getText().isEmpty()) {\n       if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mjg5NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452742894", "body": "Reduce code duplication", "bodyText": "Reduce code duplication", "bodyHTML": "<p dir=\"auto\">Reduce code duplication</p>", "author": "micheljung", "createdAt": "2020-07-10T09:49:49Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjg4Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792886", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mjg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -166,57 +163,41 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText())\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }))\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            });\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray)\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }))\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            });\n-      }\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n-    if (cause instanceof IllegalArgumentException) {\n-      String msg = cause.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-        log.warn(\"Map generation failed\", cause);\n-      } else if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-        log.warn(\"Map generation failed\", cause);\n-      } else {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-        log.warn(\"Map generation failed\", e);\n-      }\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n     } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -166,57 +191,46 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText())\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }))\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            });\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray)\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }))\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            });\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n+        notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"mapGenerator.invalidName\");\n+        log.warn(\"Invalid Generated Map Name\", new IllegalArgumentException());\n+        return;\n       }\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n-    if (cause instanceof IllegalArgumentException) {\n-      String msg = cause.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-        log.warn(\"Map generation failed\", cause);\n-      } else if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-        log.warn(\"Map generation failed\", cause);\n-      } else {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-        log.warn(\"Map generation failed\", e);\n-      }\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n     } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -223,17 +223,17 @@ public class GenerateMapController implements Controller<Pane> {\n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n     if (cause instanceof InvalidParameterException) {\n+      log.warn(\"Map generation failed due to invalid parameter\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof UnsupportedVersionException) {\n+      log.warn(\"Map generation failed due to unsupported version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof OutdatedVersionException) {\n+      log.warn(\"Map generation failed due to outdated version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..a3372a898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -227,10 +222,10 @@ public class GenerateMapController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n     } else if (cause instanceof UnsupportedVersionException) {\n       log.warn(\"Map generation failed due to unsupported version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooNewVersion\");\n     } else if (cause instanceof OutdatedVersionException) {\n       log.warn(\"Map generation failed due to outdated version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooOldVersion\");\n     } else {\n       log.warn(\"Map generation failed\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a3372a898..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -232,10 +280,37 @@ public class GenerateMapController implements Controller<Pane> {\n     }\n   }\n \n+  @VisibleForTesting\n+  void toggleCommandlineInput() {\n+    commandLineLabel.setVisible(!commandLineLabel.isVisible());\n+    commandLineArgsText.setVisible(!commandLineArgsText.isVisible());\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n+  protected void setStyles(List<String> styles) {\n+    styles.add(0, MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    mapStyleComboBox.setItems(FXCollections.observableList(styles));\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGenerator();\n+    String mapStyle = generatorPrefs.getMapStyle();\n+    if (mapStyleComboBox.getItems().contains(mapStyle)) {\n+      mapStyleComboBox.getSelectionModel().select(mapStyle);\n+    } else {\n+      mapStyleComboBox.getSelectionModel().select(MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    }\n+    generatorPrefs.mapStyleProperty().bind(mapStyleComboBox.valueProperty());\n+    mapStyleComboBox.setVisible(true);\n+    mapStyleLabel.setVisible(true);\n+  }\n+\n+  public void onNewLabelClicked(MouseEvent mouseEvent) {\n+    if (mouseEvent.getButton().equals(MouseButton.PRIMARY) && mouseEvent.getClickCount() == 2) {\n+      toggleCommandlineInput();\n+    }\n+  }\n+\n   public Pane getRoot() {\n     return generateMapRoot;\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mzk0Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452743947", "body": "Relying on the exception message is quite fragile; it's not part of an API and may change at any time, staying unnoticed. Instead, the map generator should either throw concrete exceptions or its exception should contain some sort of reason code.", "bodyText": "Relying on the exception message is quite fragile; it's not part of an API and may change at any time, staying unnoticed. Instead, the map generator should either throw concrete exceptions or its exception should contain some sort of reason code.", "bodyHTML": "<p dir=\"auto\">Relying on the exception message is quite fragile; it's not part of an API and may change at any time, staying unnoticed. Instead, the map generator should either throw concrete exceptions or its exception should contain some sort of reason code.</p>", "author": "micheljung", "createdAt": "2020-07-10T09:51:51Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      }\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof IllegalArgumentException) {\n+      String msg = cause.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+        log.warn(\"Map generation failed\", cause);\n+      } else if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+        log.warn(\"Map generation failed\", cause);\n+      } else {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+        log.warn(\"Map generation failed\", e);\n+      }", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzAxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793010", "bodyText": "Done. Used concrete exceptions.", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mzk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..ebdde210e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -166,57 +163,41 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText())\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }))\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            });\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray)\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }))\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            });\n-      }\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n-    if (cause instanceof IllegalArgumentException) {\n-      String msg = cause.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-        log.warn(\"Map generation failed\", cause);\n-      } else if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-        log.warn(\"Map generation failed\", cause);\n-      } else {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-        log.warn(\"Map generation failed\", e);\n-      }\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n     } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 24f8a1cc0..12ee2614f 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -166,57 +191,46 @@ public class GenerateMapController implements Controller<Pane> {\n   }\n \n   public void onGenerateMap() {\n-      if (!previousMapName.getText().isEmpty()) {\n-        mapGeneratorService.generateMap(previousMapName.getText())\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }))\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            });\n-      } else {\n-        byte[] optionArray = getOptionArray();\n-        mapGeneratorService.generateMap(optionArray)\n-            .thenAccept(mapName -> Platform.runLater(() -> {\n-              createGameController.initMapSelection();\n-              createGameController.mapListView.getItems().stream()\n-                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-                  .findAny().ifPresent(mapBean -> {\n-                createGameController.mapListView.getSelectionModel().select(mapBean);\n-                createGameController.mapListView.scrollTo(mapBean);\n-                createGameController.setSelectedMap(mapBean);\n-              });\n-            }))\n-            .exceptionally(throwable -> {\n-              handleGenerationException(throwable);\n-              return null;\n-            });\n+    CompletableFuture<String> generateFuture;\n+    if (!previousMapName.getText().isEmpty()) {\n+      if (!mapGeneratorService.isGeneratedMap(previousMapName.getText())) {\n+        notificationService.addImmediateErrorNotification(new IllegalArgumentException(), \"mapGenerator.invalidName\");\n+        log.warn(\"Invalid Generated Map Name\", new IllegalArgumentException());\n+        return;\n       }\n+      generateFuture = mapGeneratorService.generateMap(previousMapName.getText());\n+    } else {\n+      byte[] optionArray = getOptionArray();\n+      generateFuture = mapGeneratorService.generateMap(optionArray);\n+    }\n+    generateFuture.thenAccept(mapName -> Platform.runLater(() -> {\n+      createGameController.initMapSelection();\n+      createGameController.mapListView.getItems().stream()\n+          .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+          .findAny().ifPresent(mapBean -> {\n+        createGameController.mapListView.getSelectionModel().select(mapBean);\n+        createGameController.mapListView.scrollTo(mapBean);\n+        createGameController.setSelectedMap(mapBean);\n+      });\n+    }))\n+        .exceptionally(throwable -> {\n+          handleGenerationException(throwable);\n+          return null;\n+        });\n     onCloseButtonClickedListener.run();\n   }\n \n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n-    if (cause instanceof IllegalArgumentException) {\n-      String msg = cause.getMessage();\n-      if (msg.startsWith(\"New Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-        log.warn(\"Map generation failed\", cause);\n-      } else if (msg.startsWith(\"Old Version\")) {\n-        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-        log.warn(\"Map generation failed\", cause);\n-      } else {\n-        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n-        log.warn(\"Map generation failed\", e);\n-      }\n+    if (cause instanceof InvalidParameterException) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof UnsupportedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      log.warn(\"Map generation failed\", e);\n+    } else if (cause instanceof OutdatedVersionException) {\n+      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      log.warn(\"Map generation failed\", e);\n     } else {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n", "next_change": {"commit": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex 12ee2614f..e8030c28e 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -223,17 +223,17 @@ public class GenerateMapController implements Controller<Pane> {\n   private void handleGenerationException(Throwable e) {\n     Throwable cause = e.getCause();\n     if (cause instanceof InvalidParameterException) {\n+      log.warn(\"Map generation failed due to invalid parameter\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof UnsupportedVersionException) {\n+      log.warn(\"Map generation failed due to unsupported version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else if (cause instanceof OutdatedVersionException) {\n+      log.warn(\"Map generation failed due to outdated version\", e);\n       notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n-      log.warn(\"Map generation failed\", e);\n     } else {\n-      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n       log.warn(\"Map generation failed\", e);\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n     }\n   }\n \n", "next_change": {"commit": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex e8030c28e..a3372a898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -227,10 +222,10 @@ public class GenerateMapController implements Controller<Pane> {\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.invalidName\");\n     } else if (cause instanceof UnsupportedVersionException) {\n       log.warn(\"Map generation failed due to unsupported version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooNewVersion\");\n     } else if (cause instanceof OutdatedVersionException) {\n       log.warn(\"Map generation failed due to outdated version\", e);\n-      notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+      notificationService.addImmediateWarnNotification(\"mapGenerator.tooOldVersion\");\n     } else {\n       log.warn(\"Map generation failed\", e);\n       notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/GenerateMapController.java b/src/main/java/com/faforever/client/game/GenerateMapController.java\nindex a3372a898..b6fa5c898 100644\n--- a/src/main/java/com/faforever/client/game/GenerateMapController.java\n+++ b/src/main/java/com/faforever/client/game/GenerateMapController.java\n", "chunk": "@@ -232,10 +280,37 @@ public class GenerateMapController implements Controller<Pane> {\n     }\n   }\n \n+  @VisibleForTesting\n+  void toggleCommandlineInput() {\n+    commandLineLabel.setVisible(!commandLineLabel.isVisible());\n+    commandLineArgsText.setVisible(!commandLineArgsText.isVisible());\n+  }\n+\n   protected void setCreateGameController(CreateGameController controller) {\n     createGameController = controller;\n   }\n \n+  protected void setStyles(List<String> styles) {\n+    styles.add(0, MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    mapStyleComboBox.setItems(FXCollections.observableList(styles));\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGenerator();\n+    String mapStyle = generatorPrefs.getMapStyle();\n+    if (mapStyleComboBox.getItems().contains(mapStyle)) {\n+      mapStyleComboBox.getSelectionModel().select(mapStyle);\n+    } else {\n+      mapStyleComboBox.getSelectionModel().select(MapGeneratorService.GENERATOR_RANDOM_STYLE);\n+    }\n+    generatorPrefs.mapStyleProperty().bind(mapStyleComboBox.valueProperty());\n+    mapStyleComboBox.setVisible(true);\n+    mapStyleLabel.setVisible(true);\n+  }\n+\n+  public void onNewLabelClicked(MouseEvent mouseEvent) {\n+    if (mouseEvent.getButton().equals(MouseButton.PRIMARY) && mouseEvent.getClickCount() == 2) {\n+      toggleCommandlineInput();\n+    }\n+  }\n+\n   public Pane getRoot() {\n     return generateMapRoot;\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "be4cf17351c661e95ecd01225d97960804e472a8", "committedDate": "2020-12-14 08:56:31 -0500", "message": "Add function for intializing MapGen Sliders"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "c0f5b51e099d4d2918c6bf2c1401bbb93416a615", "committedDate": "2021-02-21 09:10:46 -0500", "message": "Issue/#2019 notification UI (#2153)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "c982bba19671e8cf42ac860a1ed2c90187167b14", "committedDate": "2021-05-31 22:42:22 -0400", "message": "Filter num teams on opening GenerateMapController"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "ea192fc4f8bdca05382992d47f3651637038e8b5", "committedDate": "2021-10-19 07:51:40 -0400", "message": "Use number format to parse mapsize according to user locale"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDQyMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452744420", "body": "Don't break the Java naming convention\r\n\r\n```suggestion\r\n  @JsonProperty(\"tag_name\")\r\n  private String tagName;\r\n```", "bodyText": "Don't break the Java naming convention\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String tag_name;\n          \n          \n            \n              @JsonProperty(\"tag_name\")\n          \n          \n            \n              private String tagName;", "bodyHTML": "<p dir=\"auto\">Don't break the Java naming convention</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k x x-first\">private</span><span class=\"x\"> </span><span class=\"pl-smi x\">String</span><span class=\"x x-last\"> </span>tag_name<span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k x x-first\">@JsonProperty</span><span class=\"x\">(</span><span class=\"pl-s\"><span class=\"pl-pds x x-last\">\"</span>tag_name<span class=\"pl-pds x x-first\">\"</span></span><span class=\"x x-last\">)</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> tagName;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "micheljung", "createdAt": "2020-07-10T09:52:55Z", "path": "src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.faforever.client.map.generator;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import lombok.Data;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@Data\n+public class GithubGeneratorRelease {\n+  private String tag_name;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzA0NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793045", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java b/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java\nindex 351f6f6dd..367ca5509 100644\n--- a/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java\n+++ b/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java\n", "chunk": "@@ -1,13 +1,16 @@\n package com.faforever.client.map.generator;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Data;\n \n @JsonIgnoreProperties(ignoreUnknown = true)\n @Data\n public class GithubGeneratorRelease {\n-  private String tag_name;\n+  @JsonProperty(\"tag_name\")\n+  private String tagName;\n   private String name;\n-  private String prerelease;\n+  @JsonProperty(\"prerelease\")\n+  private String preRelease;\n   private String url;\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java b/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java\nindex 351f6f6dd..367ca5509 100644\n--- a/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java\n+++ b/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java\n", "chunk": "@@ -1,13 +1,16 @@\n package com.faforever.client.map.generator;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Data;\n \n @JsonIgnoreProperties(ignoreUnknown = true)\n @Data\n public class GithubGeneratorRelease {\n-  private String tag_name;\n+  @JsonProperty(\"tag_name\")\n+  private String tagName;\n   private String name;\n-  private String prerelease;\n+  @JsonProperty(\"prerelease\")\n+  private String preRelease;\n   private String url;\n }\n", "next_change": {"commit": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java b/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java\ndeleted file mode 100644\nindex 367ca5509..000000000\n--- a/src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java\n+++ /dev/null\n", "chunk": "@@ -1,16 +0,0 @@\n-package com.faforever.client.map.generator;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import lombok.Data;\n-\n-@JsonIgnoreProperties(ignoreUnknown = true)\n-@Data\n-public class GithubGeneratorRelease {\n-  @JsonProperty(\"tag_name\")\n-  private String tagName;\n-  private String name;\n-  @JsonProperty(\"prerelease\")\n-  private String preRelease;\n-  private String url;\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NTIxOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452745218", "body": "```suggestion\r\n    throw new RuntimeException(\"No valid generator version found\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                throw new RuntimeException(\"No Valid Generator Version Found\");\n          \n          \n            \n                throw new RuntimeException(\"No valid generator version found\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No <span class=\"x x-first x-last\">Valid Generator Version Found</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No <span class=\"x x-first x-last\">valid generator version found</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "micheljung", "createdAt": "2020-07-10T09:54:32Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzA5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793092", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NTIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -155,20 +156,18 @@ public class MapGeneratorService implements InitializingBean {\n     });\n     List<GithubGeneratorRelease> releases = response.getBody();\n     for (GithubGeneratorRelease release : releases) {\n-      version.parseVersion(release.getTag_name());\n+      version.parseVersion(release.getTagName());\n       if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n         return version;\n       }\n     }\n-    throw new RuntimeException(\"No Valid Generator Version Found\");\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n-      return errorFuture;\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -155,20 +156,18 @@ public class MapGeneratorService implements InitializingBean {\n     });\n     List<GithubGeneratorRelease> releases = response.getBody();\n     for (GithubGeneratorRelease release : releases) {\n-      version.parseVersion(release.getTag_name());\n+      version.parseVersion(release.getTagName());\n       if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n         return version;\n       }\n     }\n-    throw new RuntimeException(\"No Valid Generator Version Found\");\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n-      return errorFuture;\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..a65973761 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -169,11 +170,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(matcher.group(1), matcher.group(2));\n-  }\n-\n-  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n-    return generateMap(new ComparableVersion(version), seedAndOptions);\n+    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n   }\n \n   public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex a65973761..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -170,11 +147,60 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n+\n+    ComparableVersion version = new ComparableVersion(matcher.group(1));\n+    String seed = matcher.group(2);\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(version);\n+    generateMapTask.setSeed(seed);\n+    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n   }\n \n-  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n \n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setGenerationType(generationType);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    if (optionMap.containsKey(\"landDensity\")) {\n+      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n+    }\n+    if (optionMap.containsKey(\"plateauDensity\")) {\n+      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n+    }\n+    if (optionMap.containsKey(\"mountainDensity\")) {\n+      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n+    }\n+    if (optionMap.containsKey(\"rampDensity\")) {\n+      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n+    }\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n+  }\n+\n+  public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -193,11 +189,46 @@ public class MapGeneratorService implements InitializingBean {\n     if (optionMap.containsKey(\"rampDensity\")) {\n       generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n     }\n+    if (optionMap.containsKey(\"mexDensity\")) {\n+      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n+    }\n+    if (optionMap.containsKey(\"reclaimDensity\")) {\n+      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n+    }\n \n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      return generateMapFuture.join();\n-    });\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setStyle(style);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -150,83 +131,28 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion version = new ComparableVersion(matcher.group(1));\n     String seed = matcher.group(2);\n \n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n     generateMapTask.setVersion(version);\n     generateMapTask.setSeed(seed);\n-    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setMapName(mapName);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+  public CompletableFuture<String> generateMap(GeneratorOptions generatorOptions) {\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n \n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(defaultGeneratorVersion);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setGenerationType(generationType);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    if (optionMap.containsKey(\"landDensity\")) {\n-      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n-    }\n-    if (optionMap.containsKey(\"plateauDensity\")) {\n-      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mountainDensity\")) {\n-      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n-    }\n-    if (optionMap.containsKey(\"rampDensity\")) {\n-      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mexDensity\")) {\n-      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n-    }\n-    if (optionMap.containsKey(\"reclaimDensity\")) {\n-      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n-    }\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setStyle(style);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setVersion(defaultGeneratorVersion);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    generateMapTask.setGeneratorOptions(generatorOptions);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -158,8 +151,10 @@ public class MapGeneratorService implements DisposableBean {\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n       return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjI1Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746252", "body": "```suggestion\r\n      return CompletableFuture.failedFuture(new IllegalArgumentException(\"Map name is not a generated map\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                  errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n          \n          \n            \n                  return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"Map name is not a generated map\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">CompletableFuture&lt;<span class=\"pl-smi\">String</span>&gt;</span> errorFuture <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">CompletableFuture&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      errorFuture<span class=\"pl-k\">.</span>completeExceptionally(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Map name is not a generated map<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">return</span> errorFuture;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">return</span> <span class=\"pl-smi\">CompletableFuture</span><span class=\"pl-k\">.</span>failedFuture(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Map name is not a generated map<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "micheljung", "createdAt": "2020-07-10T09:56:32Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzE0Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793142", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -155,20 +156,18 @@ public class MapGeneratorService implements InitializingBean {\n     });\n     List<GithubGeneratorRelease> releases = response.getBody();\n     for (GithubGeneratorRelease release : releases) {\n-      version.parseVersion(release.getTag_name());\n+      version.parseVersion(release.getTagName());\n       if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n         return version;\n       }\n     }\n-    throw new RuntimeException(\"No Valid Generator Version Found\");\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n-      return errorFuture;\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -155,20 +156,18 @@ public class MapGeneratorService implements InitializingBean {\n     });\n     List<GithubGeneratorRelease> releases = response.getBody();\n     for (GithubGeneratorRelease release : releases) {\n-      version.parseVersion(release.getTag_name());\n+      version.parseVersion(release.getTagName());\n       if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n         return version;\n       }\n     }\n-    throw new RuntimeException(\"No Valid Generator Version Found\");\n+    throw new RuntimeException(\"No valid generator version found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n-      return errorFuture;\n+      return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n     return generateMap(matcher.group(1), matcher.group(2));\n   }\n", "next_change": {"commit": "3a29953011867b17ae92263b03df55164ec4550b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..a65973761 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -169,11 +170,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(matcher.group(1), matcher.group(2));\n-  }\n-\n-  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n-    return generateMap(new ComparableVersion(version), seedAndOptions);\n+    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n   }\n \n   public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex a65973761..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -170,11 +147,60 @@ public class MapGeneratorService implements InitializingBean {\n     if (!matcher.find()) {\n       return CompletableFuture.failedFuture(new InvalidParameterException(\"Map name is not a generated map\"));\n     }\n-    return generateMap(new ComparableVersion(matcher.group(1)), matcher.group(2));\n+\n+    ComparableVersion version = new ComparableVersion(matcher.group(1));\n+    String seed = matcher.group(2);\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(version);\n+    generateMapTask.setSeed(seed);\n+    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n   }\n \n-  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n \n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setGenerationType(generationType);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    if (optionMap.containsKey(\"landDensity\")) {\n+      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n+    }\n+    if (optionMap.containsKey(\"plateauDensity\")) {\n+      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n+    }\n+    if (optionMap.containsKey(\"mountainDensity\")) {\n+      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n+    }\n+    if (optionMap.containsKey(\"rampDensity\")) {\n+      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n+    }\n+\n+    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n+      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n+      return generateMapFuture.join();\n+    });\n+  }\n+\n+  public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -193,11 +189,46 @@ public class MapGeneratorService implements InitializingBean {\n     if (optionMap.containsKey(\"rampDensity\")) {\n       generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n     }\n+    if (optionMap.containsKey(\"mexDensity\")) {\n+      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n+    }\n+    if (optionMap.containsKey(\"reclaimDensity\")) {\n+      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n+    }\n \n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<String> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      return generateMapFuture.join();\n-    });\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setSpawnCount(spawnCount);\n+    generateMapTask.setMapSize(mapSize);\n+    generateMapTask.setStyle(style);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n+  }\n+\n+  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n+\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+\n+    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n+    generateMapTask.setVersion(generatorVersion);\n+    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+\n+    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -150,83 +131,28 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion version = new ComparableVersion(matcher.group(1));\n     String seed = matcher.group(2);\n \n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(version);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n     generateMapTask.setVersion(version);\n     generateMapTask.setSeed(seed);\n-    generateMapTask.setMapFilename(mapName);\n+    generateMapTask.setMapName(mapName);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n \n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, Map<String, Float> optionMap, GenerationType generationType) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+  public CompletableFuture<String> generateMap(GeneratorOptions generatorOptions) {\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n \n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n+    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(defaultGeneratorVersion);\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setGenerationType(generationType);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    if (optionMap.containsKey(\"landDensity\")) {\n-      generateMapTask.setLandDensity(optionMap.get(\"landDensity\"));\n-    }\n-    if (optionMap.containsKey(\"plateauDensity\")) {\n-      generateMapTask.setPlateauDensity(optionMap.get(\"plateauDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mountainDensity\")) {\n-      generateMapTask.setMountainDensity(optionMap.get(\"mountainDensity\"));\n-    }\n-    if (optionMap.containsKey(\"rampDensity\")) {\n-      generateMapTask.setRampDensity(optionMap.get(\"rampDensity\"));\n-    }\n-    if (optionMap.containsKey(\"mexDensity\")) {\n-      generateMapTask.setMexDensity(optionMap.get(\"mexDensity\"));\n-    }\n-    if (optionMap.containsKey(\"reclaimDensity\")) {\n-      generateMapTask.setReclaimDensity(optionMap.get(\"reclaimDensity\"));\n-    }\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMap(int spawnCount, int mapSize, String style) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setSpawnCount(spawnCount);\n-    generateMapTask.setMapSize(mapSize);\n-    generateMapTask.setStyle(style);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-\n-    return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n-  }\n-\n-  public CompletableFuture<String> generateMapWithArgs(String commandLineArgs) {\n-\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadGeneratorFuture = downloadGeneratorIfNecessary(generatorVersion);\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(generatorVersion);\n-    generateMapTask.setCommandLineArgs(commandLineArgs);\n+    generateMapTask.setVersion(defaultGeneratorVersion);\n     generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    generateMapTask.setGeneratorOptions(generatorOptions);\n \n     return downloadGeneratorFuture.thenCompose((aVoid) -> taskService.submitTask(generateMapTask).getFuture());\n   }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -158,8 +151,10 @@ public class MapGeneratorService implements DisposableBean {\n   }\n \n   public CompletableFuture<Void> downloadGeneratorIfNecessary(ComparableVersion version) {\n-    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n-    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator()\n+        .getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n       return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjUzMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746533", "body": "```suggestion\r\n      return CompletableFuture.failedFuture(new IllegalArgumentException(\"New version not supported\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                  errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n          \n          \n            \n                  return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"New version not supported\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">CompletableFuture&lt;<span class=\"pl-smi\">String</span>&gt;</span> errorFuture <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">CompletableFuture&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      errorFuture<span class=\"pl-k\">.</span>completeExceptionally(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>New Version not supported<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">return</span> errorFuture;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">return</span> <span class=\"pl-smi\">CompletableFuture</span><span class=\"pl-k\">.</span>failedFuture(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>New version not supported<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "micheljung", "createdAt": "2020-07-10T09:57:10Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzE5OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793198", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -182,14 +181,10 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n-      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n-      return errorFuture;\n+      return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n     if (version.compareTo(minVersion) < 0) {\n-       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n-       return errorFuture;\n+      return CompletableFuture.failedFuture(new OutdatedVersionException(\"Old Version not supported\"));\n     }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -182,14 +181,10 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n-      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n-      return errorFuture;\n+      return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n     if (version.compareTo(minVersion) < 0) {\n-       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n-       return errorFuture;\n+      return CompletableFuture.failedFuture(new OutdatedVersionException(\"Old Version not supported\"));\n     }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -189,7 +212,6 @@ public class MapGeneratorService implements InitializingBean {\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n-    CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n       if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n         log.warn(\"Unsupported generator version: {}\", version);\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -209,8 +166,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (version.compareTo(minVersion) < 0) {\n       return CompletableFuture.failedFuture(new OutdatedVersionException(\"Old Version not supported\"));\n     }\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     if (!Files.exists(generatorExecutablePath)) {\n       if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n", "next_change": {"commit": "769458a511ee673b5bfc9d37f97b1004c3144c41", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..2308aa105 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -175,7 +177,7 @@ public class MapGeneratorService implements DisposableBean {\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = downloadMapGeneratorTaskFactory.getObject();\n       downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -220,7 +176,7 @@ public class MapGeneratorService implements InitializingBean {\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version.toString());\n+      downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n", "next_change": {"commit": "769458a511ee673b5bfc9d37f97b1004c3144c41", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..2308aa105 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -175,7 +177,7 @@ public class MapGeneratorService implements DisposableBean {\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = downloadMapGeneratorTaskFactory.getObject();\n       downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjcxOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746718", "body": "```suggestion\r\n      return CompletableFuture.failedFuture(new IllegalArgumentException(\"Old Version not supported\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                   errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n          \n          \n            \n                   return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"Old Version not supported\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">       <span class=\"pl-k\">CompletableFuture&lt;<span class=\"pl-smi\">String</span>&gt;</span> errorFuture <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">CompletableFuture&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">       errorFuture<span class=\"pl-k\">.</span>completeExceptionally(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Old Version not supported<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">       <span class=\"pl-k\">return</span> errorFuture;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">return</span> <span class=\"pl-smi\">CompletableFuture</span><span class=\"pl-k\">.</span>failedFuture(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Old Version not supported<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "micheljung", "createdAt": "2020-07-10T09:57:31Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjg2OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792869", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -182,14 +181,10 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n-      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n-      return errorFuture;\n+      return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n     if (version.compareTo(minVersion) < 0) {\n-       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n-       return errorFuture;\n+      return CompletableFuture.failedFuture(new OutdatedVersionException(\"Old Version not supported\"));\n     }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -182,14 +181,10 @@ public class MapGeneratorService implements InitializingBean {\n     ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n     ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n     if (version.compareTo(maxVersion) >= 0) {\n-      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n-      return errorFuture;\n+      return CompletableFuture.failedFuture(new UnsupportedVersionException(\"New version not supported\"));\n     }\n     if (version.compareTo(minVersion) < 0) {\n-       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n-       return errorFuture;\n+      return CompletableFuture.failedFuture(new OutdatedVersionException(\"Old Version not supported\"));\n     }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -189,7 +212,6 @@ public class MapGeneratorService implements InitializingBean {\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n-    CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n       if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n         log.warn(\"Unsupported generator version: {}\", version);\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -209,8 +166,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (version.compareTo(minVersion) < 0) {\n       return CompletableFuture.failedFuture(new OutdatedVersionException(\"Old Version not supported\"));\n     }\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     if (!Files.exists(generatorExecutablePath)) {\n       if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n", "next_change": {"commit": "769458a511ee673b5bfc9d37f97b1004c3144c41", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..2308aa105 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -175,7 +177,7 @@ public class MapGeneratorService implements DisposableBean {\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = downloadMapGeneratorTaskFactory.getObject();\n       downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -220,7 +176,7 @@ public class MapGeneratorService implements InitializingBean {\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version.toString());\n+      downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n", "next_change": {"commit": "769458a511ee673b5bfc9d37f97b1004c3144c41", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..2308aa105 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -175,7 +177,7 @@ public class MapGeneratorService implements DisposableBean {\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = downloadMapGeneratorTaskFactory.getObject();\n       downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzE4OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747189", "body": "```suggestion\r\n        return CompletableFuture.failedFuture(new RuntimeException(\"Unsupported generator version: \" + version));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                    errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n          \n          \n            \n                    return errorFuture;\n          \n          \n            \n                    return CompletableFuture.failedFuture(new RuntimeException(\"Unsupported generator version: \" + version));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">CompletableFuture&lt;<span class=\"pl-smi\">String</span>&gt;</span> errorFuture <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">CompletableFuture&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        errorFuture<span class=\"pl-k\">.</span>completeExceptionally(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unsupported generator version: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> version));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> errorFuture;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">CompletableFuture</span><span class=\"pl-k\">.</span>failedFuture(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unsupported generator version: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> version));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "micheljung", "createdAt": "2020-07-10T09:58:28Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjg1MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792851", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -198,9 +193,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (!Files.exists(generatorExecutablePath)) {\n       if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n         log.warn(\"Unsupported generator version: {}\", version);\n-        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n-        return errorFuture;\n+        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + version));\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -198,9 +193,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (!Files.exists(generatorExecutablePath)) {\n       if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n         log.warn(\"Unsupported generator version: {}\", version);\n-        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n-        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n-        return errorFuture;\n+        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + version));\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -189,7 +212,6 @@ public class MapGeneratorService implements InitializingBean {\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n-    CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n       if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n         log.warn(\"Unsupported generator version: {}\", version);\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -209,8 +166,7 @@ public class MapGeneratorService implements InitializingBean {\n     if (version.compareTo(minVersion) < 0) {\n       return CompletableFuture.failedFuture(new OutdatedVersionException(\"Old Version not supported\"));\n     }\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(version);\n \n     if (!Files.exists(generatorExecutablePath)) {\n       if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n", "next_change": {"commit": "769458a511ee673b5bfc9d37f97b1004c3144c41", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..2308aa105 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -175,7 +177,7 @@ public class MapGeneratorService implements DisposableBean {\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = downloadMapGeneratorTaskFactory.getObject();\n       downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -220,7 +176,7 @@ public class MapGeneratorService implements InitializingBean {\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version.toString());\n+      downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n", "next_change": {"commit": "769458a511ee673b5bfc9d37f97b1004c3144c41", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..2308aa105 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -175,7 +177,7 @@ public class MapGeneratorService implements DisposableBean {\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = downloadMapGeneratorTaskFactory.getObject();\n       downloadMapGeneratorTask.setVersion(version);\n       return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -199,47 +221,13 @@ public class MapGeneratorService implements InitializingBean {\n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n       downloadMapGeneratorTask.setVersion(version.toString());\n-      downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n+      return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n-      downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n+      return CompletableFuture.completedFuture(null);\n     }\n-\n-    String[] seedParts = seedAndOptions.split(\"_\");\n-    String seedString = seedParts[0];\n-\n-    String mapFilename;\n-    String seed;\n-\n-    try {\n-      seed = Long.toString(Long.parseLong(seedString));\n-    } catch (NumberFormatException nfe) {\n-      byte[] seedBytes = Base64.getDecoder().decode(seedString);\n-      ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n-      seed = Long.toString(seedWrapper.getLong());\n-    }\n-\n-    // Check if major version 0 which requires numeric seed\n-    if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/', '^');\n-    } else {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seedAndOptions).replace('/', '^');\n-    }\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(version.toString());\n-    generateMapTask.setSeed(seed);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    generateMapTask.setMapFilename(mapFilename);\n-\n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<Void> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      generateMapFuture.join();\n-      return mapFilename;\n-    });\n   }\n \n-\n   public boolean isGeneratedMap(String mapName) {\n     return GENERATED_MAP_PATTERN.matcher(mapName).matches();\n   }\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -228,6 +259,34 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n+  public CompletableFuture<List<String>> getGeneratorStyles() {\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadTask;\n+\n+    if (!Files.exists(generatorExecutablePath)) {\n+      if (!VERSION_PATTERN.matcher(generatorVersion.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", generatorVersion);\n+        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + generatorVersion));\n+      }\n+\n+      log.info(\"Downloading MapGenerator version: {}\", generatorVersion);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      downloadMapGeneratorTask.setVersion(generatorVersion.toString());\n+      downloadTask = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n+    } else {\n+      downloadTask = CompletableFuture.completedFuture(null);\n+    }\n+    return downloadTask.thenCompose(aVoid -> {\n+      GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n+      generatorOptionsTask.setVersion(generatorVersion);\n+      generatorOptionsTask.setQuery(\"--styles\");\n+      generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n+      return taskService.submitTask(generatorOptionsTask).getFuture();\n+    });\n+  }\n+\n   public boolean isGeneratedMap(String mapName) {\n     return GENERATED_MAP_PATTERN.matcher(mapName).matches();\n   }\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -259,32 +184,26 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n-  public CompletableFuture<List<String>> getGeneratorStyles() {\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadTask;\n+  @Cacheable(value = CacheNames.MAP_GENERATOR, sync = true)\n+  public CompletableFuture<Void> getNewestGenerator() {\n+    return queryMaxSupportedVersion()\n+        .thenAccept(newVersion -> defaultGeneratorVersion = newVersion)\n+        .thenCompose(aVoid -> downloadGeneratorIfNecessary(defaultGeneratorVersion));\n+  }\n \n-    if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(generatorVersion.toString()).matches()) {\n-        log.warn(\"Unsupported generator version: {}\", generatorVersion);\n-        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + generatorVersion));\n-      }\n+  public CompletableFuture<List<String>> getGeneratorStyles() {\n+    Assert.checkNullIllegalState(defaultGeneratorVersion, \"Generator version not set\");\n+    GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n+    generatorOptionsTask.setVersion(defaultGeneratorVersion);\n+    generatorOptionsTask.setQuery(\"--styles\");\n+    generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    return taskService.submitTask(generatorOptionsTask).getFuture();\n+  }\n \n-      log.info(\"Downloading MapGenerator version: {}\", generatorVersion);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(generatorVersion.toString());\n-      downloadTask = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n-    } else {\n-      downloadTask = CompletableFuture.completedFuture(null);\n-    }\n-    return downloadTask.thenCompose(aVoid -> {\n-      GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n-      generatorOptionsTask.setVersion(generatorVersion);\n-      generatorOptionsTask.setQuery(\"--styles\");\n-      generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n-      return taskService.submitTask(generatorOptionsTask).getFuture();\n-    });\n+  @NotNull\n+  public Path getGeneratorExecutablePath(ComparableVersion defaultGeneratorVersion) {\n+    return preferencesService.getPreferences().getData().getMapGeneratorDirectory().resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n   }\n \n   public boolean isGeneratedMap(String mapName) {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -203,7 +197,8 @@ public class MapGeneratorService implements DisposableBean {\n \n   @NotNull\n   public Path getGeneratorExecutablePath(ComparableVersion defaultGeneratorVersion) {\n-    return preferencesService.getPreferences().getData().getMapGeneratorDirectory().resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n+    return dataPrefs.getMapGeneratorDirectory()\n+        .resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n   }\n \n   public boolean isGeneratedMap(String mapName) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzQxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747410", "body": "```suggestion\r\n    } catch (NumberFormatException nfe) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                catch (NumberFormatException nfe) {\n          \n          \n            \n                } catch (NumberFormatException nfe) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">NumberFormatException</span> nfe) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">NumberFormatException</span> nfe) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "micheljung", "createdAt": "2020-07-10T09:59:00Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version);\n+      downloadMapGeneratorTask.setVersion(version.toString());\n       downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n       downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n     }\n \n-    String mapFilename = String.format(GENERATED_MAP_NAME, version, seed);\n+    String[] seedParts = seedAndOptions.split(\"_\");\n+    String seedString = seedParts[0];\n+\n+    String mapFilename;\n+    String seed;\n+\n+    try {\n+      seed = Long.toString(Long.parseLong(seedString));\n+    }\n+    catch (NumberFormatException nfe) {", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MjgxMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792812", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -220,8 +213,7 @@ public class MapGeneratorService implements InitializingBean {\n \n     try {\n       seed = Long.toString(Long.parseLong(seedString));\n-    }\n-    catch (NumberFormatException nfe) {\n+    } catch (NumberFormatException nfe) {\n       byte[] seedBytes = Base64.getDecoder().decode(seedString);\n       ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n       seed = Long.toString(seedWrapper.getLong());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -220,8 +213,7 @@ public class MapGeneratorService implements InitializingBean {\n \n     try {\n       seed = Long.toString(Long.parseLong(seedString));\n-    }\n-    catch (NumberFormatException nfe) {\n+    } catch (NumberFormatException nfe) {\n       byte[] seedBytes = Base64.getDecoder().decode(seedString);\n       ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n       seed = Long.toString(seedWrapper.getLong());\n", "next_change": {"commit": "501d69d53ad94adf6571ca4bb1e97c988825c652", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..86179d727 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -214,7 +215,7 @@ public class MapGeneratorService implements InitializingBean {\n     try {\n       seed = Long.toString(Long.parseLong(seedString));\n     } catch (NumberFormatException nfe) {\n-      byte[] seedBytes = Base64.getDecoder().decode(seedString);\n+      byte[] seedBytes = NAME_ENCODER.decode(seedString);\n       ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n       seed = Long.toString(seedWrapper.getLong());\n     }\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 86179d727..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -200,47 +221,13 @@ public class MapGeneratorService implements InitializingBean {\n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n       downloadMapGeneratorTask.setVersion(version.toString());\n-      downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n+      return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n-      downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n+      return CompletableFuture.completedFuture(null);\n     }\n-\n-    String[] seedParts = seedAndOptions.split(\"_\");\n-    String seedString = seedParts[0];\n-\n-    String mapFilename;\n-    String seed;\n-\n-    try {\n-      seed = Long.toString(Long.parseLong(seedString));\n-    } catch (NumberFormatException nfe) {\n-      byte[] seedBytes = NAME_ENCODER.decode(seedString);\n-      ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n-      seed = Long.toString(seedWrapper.getLong());\n-    }\n-\n-    // Check if major version 0 which requires numeric seed\n-    if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/', '^');\n-    } else {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seedAndOptions).replace('/', '^');\n-    }\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(version.toString());\n-    generateMapTask.setSeed(seed);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    generateMapTask.setMapFilename(mapFilename);\n-\n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<Void> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      generateMapFuture.join();\n-      return mapFilename;\n-    });\n   }\n \n-\n   public boolean isGeneratedMap(String mapName) {\n     return GENERATED_MAP_PATTERN.matcher(mapName).matches();\n   }\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -228,6 +259,34 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n+  public CompletableFuture<List<String>> getGeneratorStyles() {\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadTask;\n+\n+    if (!Files.exists(generatorExecutablePath)) {\n+      if (!VERSION_PATTERN.matcher(generatorVersion.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", generatorVersion);\n+        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + generatorVersion));\n+      }\n+\n+      log.info(\"Downloading MapGenerator version: {}\", generatorVersion);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      downloadMapGeneratorTask.setVersion(generatorVersion.toString());\n+      downloadTask = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n+    } else {\n+      downloadTask = CompletableFuture.completedFuture(null);\n+    }\n+    return downloadTask.thenCompose(aVoid -> {\n+      GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n+      generatorOptionsTask.setVersion(generatorVersion);\n+      generatorOptionsTask.setQuery(\"--styles\");\n+      generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n+      return taskService.submitTask(generatorOptionsTask).getFuture();\n+    });\n+  }\n+\n   public boolean isGeneratedMap(String mapName) {\n     return GENERATED_MAP_PATTERN.matcher(mapName).matches();\n   }\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -259,32 +184,26 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n-  public CompletableFuture<List<String>> getGeneratorStyles() {\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadTask;\n+  @Cacheable(value = CacheNames.MAP_GENERATOR, sync = true)\n+  public CompletableFuture<Void> getNewestGenerator() {\n+    return queryMaxSupportedVersion()\n+        .thenAccept(newVersion -> defaultGeneratorVersion = newVersion)\n+        .thenCompose(aVoid -> downloadGeneratorIfNecessary(defaultGeneratorVersion));\n+  }\n \n-    if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(generatorVersion.toString()).matches()) {\n-        log.warn(\"Unsupported generator version: {}\", generatorVersion);\n-        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + generatorVersion));\n-      }\n+  public CompletableFuture<List<String>> getGeneratorStyles() {\n+    Assert.checkNullIllegalState(defaultGeneratorVersion, \"Generator version not set\");\n+    GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n+    generatorOptionsTask.setVersion(defaultGeneratorVersion);\n+    generatorOptionsTask.setQuery(\"--styles\");\n+    generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    return taskService.submitTask(generatorOptionsTask).getFuture();\n+  }\n \n-      log.info(\"Downloading MapGenerator version: {}\", generatorVersion);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(generatorVersion.toString());\n-      downloadTask = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n-    } else {\n-      downloadTask = CompletableFuture.completedFuture(null);\n-    }\n-    return downloadTask.thenCompose(aVoid -> {\n-      GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n-      generatorOptionsTask.setVersion(generatorVersion);\n-      generatorOptionsTask.setQuery(\"--styles\");\n-      generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n-      return taskService.submitTask(generatorOptionsTask).getFuture();\n-    });\n+  @NotNull\n+  public Path getGeneratorExecutablePath(ComparableVersion defaultGeneratorVersion) {\n+    return preferencesService.getPreferences().getData().getMapGeneratorDirectory().resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n   }\n \n   public boolean isGeneratedMap(String mapName) {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -203,7 +197,8 @@ public class MapGeneratorService implements DisposableBean {\n \n   @NotNull\n   public Path getGeneratorExecutablePath(ComparableVersion defaultGeneratorVersion) {\n-    return preferencesService.getPreferences().getData().getMapGeneratorDirectory().resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n+    return dataPrefs.getMapGeneratorDirectory()\n+        .resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n   }\n \n   public boolean isGeneratedMap(String mapName) {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzY2Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747666", "body": "```suggestion\r\n    } else {\r\n```\r\n\r\nPlease make sure that auto-formatting is enabled", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                else {\n          \n          \n            \n                } else {\n          \n      \n    \n    \n  \n\nPlease make sure that auto-formatting is enabled", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Please make sure that auto-formatting is enabled</p>", "author": "micheljung", "createdAt": "2020-07-10T09:59:29Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version);\n+      downloadMapGeneratorTask.setVersion(version.toString());\n       downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n       downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n     }\n \n-    String mapFilename = String.format(GENERATED_MAP_NAME, version, seed);\n+    String[] seedParts = seedAndOptions.split(\"_\");\n+    String seedString = seedParts[0];\n+\n+    String mapFilename;\n+    String seed;\n+\n+    try {\n+      seed = Long.toString(Long.parseLong(seedString));\n+    }\n+    catch (NumberFormatException nfe) {\n+      byte[] seedBytes = Base64.getDecoder().decode(seedString);\n+      ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n+      seed = Long.toString(seedWrapper.getLong());\n+    }\n+\n+    // Check if major version 0 which requires numeric seed\n+    if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n+      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/','^');\n+    }\n+    else {", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjc5Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792796", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -229,10 +221,9 @@ public class MapGeneratorService implements InitializingBean {\n \n     // Check if major version 0 which requires numeric seed\n     if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/','^');\n-    }\n-    else {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seedAndOptions).replace('/','^');\n+      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/', '^');\n+    } else {\n+      mapFilename = String.format(GENERATED_MAP_NAME, version, seedAndOptions).replace('/', '^');\n     }\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f47737eccb45180c54d5d346f156d23421d63851", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 9f1eb5634..6ab6b9af9 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -229,10 +221,9 @@ public class MapGeneratorService implements InitializingBean {\n \n     // Check if major version 0 which requires numeric seed\n     if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/','^');\n-    }\n-    else {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seedAndOptions).replace('/','^');\n+      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/', '^');\n+    } else {\n+      mapFilename = String.format(GENERATED_MAP_NAME, version, seedAndOptions).replace('/', '^');\n     }\n \n     GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n", "next_change": {"commit": "64d115ee97a4183fb0a20ea31286b136eae39cce", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 6ab6b9af9..628131bff 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -199,47 +221,13 @@ public class MapGeneratorService implements InitializingBean {\n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n       downloadMapGeneratorTask.setVersion(version.toString());\n-      downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n+      return taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n-      downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n+      return CompletableFuture.completedFuture(null);\n     }\n-\n-    String[] seedParts = seedAndOptions.split(\"_\");\n-    String seedString = seedParts[0];\n-\n-    String mapFilename;\n-    String seed;\n-\n-    try {\n-      seed = Long.toString(Long.parseLong(seedString));\n-    } catch (NumberFormatException nfe) {\n-      byte[] seedBytes = Base64.getDecoder().decode(seedString);\n-      ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n-      seed = Long.toString(seedWrapper.getLong());\n-    }\n-\n-    // Check if major version 0 which requires numeric seed\n-    if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/', '^');\n-    } else {\n-      mapFilename = String.format(GENERATED_MAP_NAME, version, seedAndOptions).replace('/', '^');\n-    }\n-\n-    GenerateMapTask generateMapTask = applicationContext.getBean(GenerateMapTask.class);\n-    generateMapTask.setVersion(version.toString());\n-    generateMapTask.setSeed(seed);\n-    generateMapTask.setGeneratorExecutableFile(generatorExecutablePath);\n-    generateMapTask.setMapFilename(mapFilename);\n-\n-    return downloadGeneratorFuture.thenApplyAsync((aVoid) -> {\n-      CompletableFuture<Void> generateMapFuture = taskService.submitTask(generateMapTask).getFuture();\n-      generateMapFuture.join();\n-      return mapFilename;\n-    });\n   }\n \n-\n   public boolean isGeneratedMap(String mapName) {\n     return GENERATED_MAP_PATTERN.matcher(mapName).matches();\n   }\n", "next_change": {"commit": "52904558701ac85fc7363f85408a97f3325c336b", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 628131bff..2bf227e83 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -228,6 +259,34 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n+  public CompletableFuture<List<String>> getGeneratorStyles() {\n+    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n+    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n+\n+    CompletableFuture<Void> downloadTask;\n+\n+    if (!Files.exists(generatorExecutablePath)) {\n+      if (!VERSION_PATTERN.matcher(generatorVersion.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", generatorVersion);\n+        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + generatorVersion));\n+      }\n+\n+      log.info(\"Downloading MapGenerator version: {}\", generatorVersion);\n+      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n+      downloadMapGeneratorTask.setVersion(generatorVersion.toString());\n+      downloadTask = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n+    } else {\n+      downloadTask = CompletableFuture.completedFuture(null);\n+    }\n+    return downloadTask.thenCompose(aVoid -> {\n+      GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n+      generatorOptionsTask.setVersion(generatorVersion);\n+      generatorOptionsTask.setQuery(\"--styles\");\n+      generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n+      return taskService.submitTask(generatorOptionsTask).getFuture();\n+    });\n+  }\n+\n   public boolean isGeneratedMap(String mapName) {\n     return GENERATED_MAP_PATTERN.matcher(mapName).matches();\n   }\n", "next_change": {"commit": "c22f7d13987398d028432665f33750fd953ee67e", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 2bf227e83..1f331a004 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -259,32 +184,26 @@ public class MapGeneratorService implements InitializingBean {\n     }\n   }\n \n-  public CompletableFuture<List<String>> getGeneratorStyles() {\n-    String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, generatorVersion);\n-    Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n-\n-    CompletableFuture<Void> downloadTask;\n+  @Cacheable(value = CacheNames.MAP_GENERATOR, sync = true)\n+  public CompletableFuture<Void> getNewestGenerator() {\n+    return queryMaxSupportedVersion()\n+        .thenAccept(newVersion -> defaultGeneratorVersion = newVersion)\n+        .thenCompose(aVoid -> downloadGeneratorIfNecessary(defaultGeneratorVersion));\n+  }\n \n-    if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(generatorVersion.toString()).matches()) {\n-        log.warn(\"Unsupported generator version: {}\", generatorVersion);\n-        return CompletableFuture.failedFuture(new UnsupportedVersionException(\"Unsupported generator version: \" + generatorVersion));\n-      }\n+  public CompletableFuture<List<String>> getGeneratorStyles() {\n+    Assert.checkNullIllegalState(defaultGeneratorVersion, \"Generator version not set\");\n+    GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n+    Path generatorExecutablePath = getGeneratorExecutablePath(defaultGeneratorVersion);\n+    generatorOptionsTask.setVersion(defaultGeneratorVersion);\n+    generatorOptionsTask.setQuery(\"--styles\");\n+    generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n+    return taskService.submitTask(generatorOptionsTask).getFuture();\n+  }\n \n-      log.info(\"Downloading MapGenerator version: {}\", generatorVersion);\n-      DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(generatorVersion.toString());\n-      downloadTask = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n-    } else {\n-      downloadTask = CompletableFuture.completedFuture(null);\n-    }\n-    return downloadTask.thenCompose(aVoid -> {\n-      GeneratorOptionsTask generatorOptionsTask = applicationContext.getBean(GeneratorOptionsTask.class);\n-      generatorOptionsTask.setVersion(generatorVersion);\n-      generatorOptionsTask.setQuery(\"--styles\");\n-      generatorOptionsTask.setGeneratorExecutableFile(generatorExecutablePath);\n-      return taskService.submitTask(generatorOptionsTask).getFuture();\n-    });\n+  @NotNull\n+  public Path getGeneratorExecutablePath(ComparableVersion defaultGeneratorVersion) {\n+    return preferencesService.getPreferences().getData().getMapGeneratorDirectory().resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n   }\n \n   public boolean isGeneratedMap(String mapName) {\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\nindex 1f331a004..5a6e589fb 100644\n--- a/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n+++ b/src/main/java/com/faforever/client/map/generator/MapGeneratorService.java\n", "chunk": "@@ -203,7 +197,8 @@ public class MapGeneratorService implements DisposableBean {\n \n   @NotNull\n   public Path getGeneratorExecutablePath(ComparableVersion defaultGeneratorVersion) {\n-    return preferencesService.getPreferences().getData().getMapGeneratorDirectory().resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n+    return dataPrefs.getMapGeneratorDirectory()\n+        .resolve(String.format(GENERATOR_EXECUTABLE_FILENAME, defaultGeneratorVersion));\n   }\n \n   public boolean isGeneratedMap(String mapName) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "501d69d53ad94adf6571ca4bb1e97c988825c652", "committedDate": "2020-07-21 15:45:30 +0200", "message": "Use Base32 Encoding for generated map names"}, {"oid": "d403771941f20ccbf9a4270504f7a12e739f2384", "committedDate": "2020-10-18 17:02:37 +0200", "message": "Catch runtime exception in generated map folder deletion"}, {"oid": "3697265d3270d3e5d0fc83f874ff465dfaf670d9", "committedDate": "2020-10-18 18:08:51 +0200", "message": "Increase mapGen time out to 3 minutes"}, {"oid": "3a29953011867b17ae92263b03df55164ec4550b", "committedDate": "2020-11-04 19:07:57 -0500", "message": "Add parameters for generationType (#2005)"}, {"oid": "c46061751854e65172a1e4cc9b4c6d19d610f7dd", "committedDate": "2020-11-08 16:47:22 -0500", "message": "Synchronize caches (#2023)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "e96a23a83aea9e79d605a2b85891398ec6cd091d", "committedDate": "2021-01-05 08:53:32 -0500", "message": "Add unexplored, mex, and reclaim options (#2093)"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "67d64740d9c7ce00614443b9098eedb8178d5f18", "committedDate": "2021-05-28 12:00:35 -0400", "message": "Add number of teams option to map generation (#2251)"}, {"oid": "cf5fb2ddd48d654871217de26244252de16d1fb2", "committedDate": "2021-07-11 20:58:55 -0400", "message": "Split tests into ui and service and allow parallel execution on service"}, {"oid": "2e34a8cb781059bd98c3606c059e549bedcc8b0b", "committedDate": "2021-10-15 08:32:58 -0400", "message": "Use WebClient in place of RestTemplate everywhere (#2393)"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "c01b848d92f74dc7ee07be44dd2f5209a2b4c389", "committedDate": "2022-01-02 14:44:05 -0500", "message": "Use lombok and set defaults at declaration for preferences (#2498)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "33f3a3d0d45ac66c027eb386b6189b6603253583", "committedDate": "2022-09-30 17:37:00 -0400", "message": "Closes #1253"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "769458a511ee673b5bfc9d37f97b1004c3144c41", "committedDate": "2023-03-24 23:01:02 -0400", "message": "Use ObjectFactory over ApplicationContext"}, {"oid": "105ef8cd3a70c122e12a788fcca2564b123a6d94", "committedDate": "2023-04-29 11:26:27 -0400", "message": "Don't use deprecated spring security and share webclient (#2965)"}]}, {"oid": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "url": "https://github.com/FAForever/downlords-faf-client/commit/c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "message": "Add explicit error types for map generator service", "committedDate": "2020-07-10T11:43:06Z", "type": "forcePushed"}, {"oid": "ab84c401a60d7ad5e3f1c5a4326677af3cc45878", "url": "https://github.com/FAForever/downlords-faf-client/commit/ab84c401a60d7ad5e3f1c5a4326677af3cc45878", "message": "Update existing unit tests with new generator parsing\n\nAdd additional Unit Tests for Map Gen Service\n\nAdd Unit Tests for GenerateMapController\n\nAdd Unit Tests for GenerateMapController\n\nCorrect formatting\n\nRemove unused variables and format issues\n\nRemove unused queryNewestVersion Function\n\nAdd line break\n\nAdd comments on Major Version check\n\nFix capitalization in comment\n\nUse fixed template to return releases list\n\nAdd unit tests for generateMap methods\n\nAdd comment on major version check\n\nRemove redundant character in Generated Map Pattern\n\nStrengthen Map Generator Unit Tests\n\nChange Map Generation UI Layout\n\nAdd filename safe B64 character replacement\n\nUpdate Generator UI Unit Tests\n\nAdd File Safe Base64 Character Change\n\nChange exception handling to use .exceptionally on Future\n\nUse bind for Map Generator UI properties\n\nUse log.warn over log.error\n\nUse static method completeExceptionally for generator errors.\n\nChange code formatting\n\nAdd explicit error types for map generator service", "committedDate": "2020-07-10T11:49:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTQzMQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r453171431", "body": "If you do this to be able to test this. Make it package private instead and annotate with @VisibleForTesting", "bodyText": "If you do this to be able to test this. Make it package private instead and annotate with @VisibleForTesting", "bodyHTML": "<p dir=\"auto\">If you do this to be able to test this. Make it package private instead and annotate with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/VisibleForTesting/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/VisibleForTesting\">@VisibleForTesting</a></p>", "author": "1-alex98", "createdAt": "2020-07-11T08:21:00Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -259,7 +260,7 @@ private void initMapSelection() {\n     mapListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> Platform.runLater(() -> setSelectedMap(newValue)));\n   }\n \n-  private void setSelectedMap(MapBean newValue) {\n+  protected void setSelectedMap(MapBean newValue) {", "originalCommit": "ab84c401a60d7ad5e3f1c5a4326677af3cc45878", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MjEzMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r453182132", "bodyText": "It was changed to protected so that GenerateMapController could set the map selection after generating the map in its futures.", "author": "Sheikah45", "createdAt": "2020-07-11T10:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTQzMQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 365347191..8767929c5 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -257,67 +252,88 @@ public class CreateGameController implements Controller<Pane> {\n \n     mapListView.setItems(filteredMapBeans);\n     mapListView.setCellFactory(param -> new StringListCell<>(MapBean::getDisplayName));\n-    mapListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> Platform.runLater(() -> setSelectedMap(newValue)));\n+    mapListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> setSelectedMap(newValue));\n   }\n \n   protected void setSelectedMap(MapBean newValue) {\n-    JavaFxUtil.assertApplicationThread();\n-\n     if (newValue == null) {\n-      mapNameLabel.setText(\"\");\n+      JavaFxUtil.runLater(() -> mapNameLabel.setText(\"\"));\n       return;\n     }\n \n-    preferencesService.getPreferences().getLastGamePrefs().setLastMap(newValue.getFolderName());\n+    preferencesService.getPreferences().getLastGame().setLastMap(newValue.getFolderName());\n     preferencesService.storeInBackground();\n \n     Image largePreview = mapService.loadPreview(newValue.getFolderName(), PreviewSize.LARGE);\n-    mapPreviewPane.setBackground(new Background(new BackgroundImage(largePreview, NO_REPEAT, NO_REPEAT, CENTER,\n-        new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, false, false, true, false))));\n-\n     MapSize mapSize = newValue.getSize();\n-    mapSizeLabel.setText(i18n.get(\"mapPreview.size\", mapSize.getWidthInKm(), mapSize.getHeightInKm()));\n-    mapNameLabel.setText(newValue.getDisplayName());\n-    mapPlayersLabel.setText(i18n.number(newValue.getPlayers()));\n-    mapDescriptionLabel.setText(Optional.ofNullable(newValue.getDescription())\n-        .map(Strings::emptyToNull)\n-        .map(FaStrings::removeLocalizationTag)\n-        .orElseGet(() -> i18n.get(\"map.noDescriptionAvailable\")));\n-\n     ComparableVersion mapVersion = newValue.getVersion();\n-    if (mapVersion == null) {\n-      versionLabel.setVisible(false);\n-    } else {\n-      versionLabel.setText(i18n.get(\"map.versionFormat\", mapVersion));\n-    }\n+\n+    JavaFxUtil.runLater(() -> {\n+      mapPreviewPane.setBackground(new Background(new BackgroundImage(largePreview, NO_REPEAT, NO_REPEAT, CENTER,\n+          new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, false, false, true, false))));\n+\n+      mapSizeLabel.setText(i18n.get(\"mapPreview.size\", mapSize.getWidthInKm(), mapSize.getHeightInKm()));\n+      mapNameLabel.setText(newValue.getDisplayName());\n+      mapPlayersLabel.setText(i18n.number(newValue.getPlayers()));\n+      mapDescriptionLabel.setText(Optional.ofNullable(newValue.getDescription())\n+          .map(Strings::emptyToNull)\n+          .map(FaStrings::removeLocalizationTag)\n+          .orElseGet(() -> i18n.get(\"map.noDescriptionAvailable\")));\n+\n+      if (mapVersion == null) {\n+        versionLabel.setVisible(false);\n+      } else {\n+        versionLabel.setVisible(true);\n+        versionLabel.setText(i18n.get(\"map.versionFormat\", mapVersion));\n+      }\n+    });\n   }\n \n   private void initFeaturedModList() {\n     featuredModListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\n-      preferencesService.getPreferences().getLastGamePrefs().setLastGameType(newValue.getTechnicalName());\n+      preferencesService.getPreferences().getLastGame().setLastGameType(newValue.getTechnicalName());\n       preferencesService.storeInBackground();\n     });\n   }\n \n   private void initRatingBoundaries() {\n-    int lastGameMinRating = preferencesService.getPreferences().getLastGamePrefs().getLastGameMinRating();\n-    int lastGameMaxRating = preferencesService.getPreferences().getLastGamePrefs().getLastGameMaxRating();\n+    Integer lastGameMinRating = preferencesService.getPreferences().getLastGame().getLastGameMinRating();\n+    Integer lastGameMaxRating = preferencesService.getPreferences().getLastGame().getLastGameMaxRating();\n+\n+    if (lastGameMinRating != null) {\n+      minRankingTextField.setText(i18n.number(lastGameMinRating));\n+    }\n \n-    minRankingTextField.setText(i18n.number(lastGameMinRating));\n-    maxRankingTextField.setText(i18n.number(lastGameMaxRating));\n+    if (lastGameMaxRating != null) {\n+      maxRankingTextField.setText(i18n.number(lastGameMaxRating));\n+    }\n \n     minRankingTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      preferencesService.getPreferences().getLastGamePrefs().setLastGameMinRating(Integer.parseInt(newValue));\n+      Integer minRating = null;\n+      if (!newValue.isEmpty()) {\n+        minRating = Integer.parseInt(newValue);\n+      }\n+\n+      preferencesService.getPreferences().getLastGame().setLastGameMinRating(minRating);\n       preferencesService.storeInBackground();\n     });\n+\n     maxRankingTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n-      preferencesService.getPreferences().getLastGamePrefs().setLastGameMaxRating(Integer.parseInt(newValue));\n+      Integer maxRating = null;\n+      if (!newValue.isEmpty()) {\n+        maxRating = Integer.parseInt(newValue);\n+      }\n+      preferencesService.getPreferences().getLastGame().setLastGameMaxRating(maxRating);\n       preferencesService.storeInBackground();\n     });\n+\n+    enforceRankingCheckBox.selectedProperty()\n+        .bindBidirectional(preferencesService.getPreferences().getLastGame().lastGameEnforceRatingProperty());\n+    enforceRankingCheckBox.selectedProperty().addListener(observable -> preferencesService.storeInBackground());\n   }\n \n   private void selectLastMap() {\n-    String lastMap = preferencesService.getPreferences().getLastGamePrefs().getLastMap();\n+    String lastMap = preferencesService.getPreferences().getLastGame().getLastMap();\n     for (MapBean mapBean : mapListView.getItems()) {\n       if (mapBean.getFolderName().equalsIgnoreCase(lastMap)) {\n         mapListView.getSelectionModel().select(mapBean);\n", "next_change": {"commit": "937b7d148a907784b9daf98ee4b0221d92939458", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex 8767929c5..f5d891810 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -334,10 +359,10 @@ public class CreateGameController implements Controller<Pane> {\n \n   private void selectLastMap() {\n     String lastMap = preferencesService.getPreferences().getLastGame().getLastMap();\n-    for (MapBean mapBean : mapListView.getItems()) {\n-      if (mapBean.getFolderName().equalsIgnoreCase(lastMap)) {\n-        mapListView.getSelectionModel().select(mapBean);\n-        mapListView.scrollTo(mapBean);\n+    for (MapVersionBean mapVersion : mapListView.getItems()) {\n+      if (mapVersion.getFolderName().equalsIgnoreCase(lastMap)) {\n+        mapListView.getSelectionModel().select(mapVersion);\n+        mapListView.scrollTo(mapVersion);\n         return;\n       }\n     }\n", "next_change": {"commit": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "changed_code": [{"header": "diff --git a/src/main/java/com/faforever/client/game/CreateGameController.java b/src/main/java/com/faforever/client/game/CreateGameController.java\nindex f5d891810..c82956ec7 100644\n--- a/src/main/java/com/faforever/client/game/CreateGameController.java\n+++ b/src/main/java/com/faforever/client/game/CreateGameController.java\n", "chunk": "@@ -348,17 +328,14 @@ public class CreateGameController implements Controller<Pane> {\n       if (!newValue.isEmpty()) {\n         maxRating = Integer.parseInt(newValue);\n       }\n-      preferencesService.getPreferences().getLastGame().setLastGameMaxRating(maxRating);\n-      preferencesService.storeInBackground();\n+      lastGamePrefs.setLastGameMaxRating(maxRating);\n     });\n \n-    enforceRankingCheckBox.selectedProperty()\n-        .bindBidirectional(preferencesService.getPreferences().getLastGame().lastGameEnforceRatingProperty());\n-    enforceRankingCheckBox.selectedProperty().addListener(observable -> preferencesService.storeInBackground());\n+    enforceRankingCheckBox.selectedProperty().bindBidirectional(lastGamePrefs.lastGameEnforceRatingProperty());\n   }\n \n   private void selectLastMap() {\n-    String lastMap = preferencesService.getPreferences().getLastGame().getLastMap();\n+    String lastMap = lastGamePrefs.getLastMap();\n     for (MapVersionBean mapVersion : mapListView.getItems()) {\n       if (mapVersion.getFolderName().equalsIgnoreCase(lastMap)) {\n         mapListView.getSelectionModel().select(mapVersion);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f47737eccb45180c54d5d346f156d23421d63851", "message": "Merge commit", "committedDate": null}, {"oid": "d790c39bf8886bb82446c2a7ec76a85ffb894f4d", "committedDate": "2020-07-25 21:40:03 +0200", "message": "Mod Manager"}, {"oid": "a6722688b8eca8d9f6f7cb5679f93421b3ac8781", "committedDate": "2020-08-27 20:32:15 +0200", "message": "Native window behavior and design brush-up (#1818)"}, {"oid": "57a4d96e9ebb0483a02ff70e0259ef15236ca7dc", "committedDate": "2020-10-11 22:14:59 +0200", "message": "Add game type description"}, {"oid": "6cab2b3d3e6fb55283c6f32134eb36a714a55313", "committedDate": "2020-10-16 18:25:32 +0200", "message": "Use addImmediateErrorNotification"}, {"oid": "d9e27c75d9fb61cf221825e89c31c174be991d7f", "committedDate": "2020-10-18 21:11:47 +0200", "message": "Limit ratings via server"}, {"oid": "424512424a9821f99a2d6bd48f1f94669238d109", "committedDate": "2020-10-18 21:27:36 +0200", "message": "Remember enforce rating"}, {"oid": "99254b42f6800f5bd8630c9f8029e35317a4f998", "committedDate": "2020-11-10 21:10:33 -0500", "message": "Add label context menu (#2031)"}, {"oid": "64d115ee97a4183fb0a20ea31286b136eae39cce", "committedDate": "2020-12-13 13:09:39 -0500", "message": "Remove mapName parsing from client (#2064)"}, {"oid": "98db90dbc392c0aa16f623623e02a9f8d6ee300c", "committedDate": "2021-01-03 23:03:14 -0500", "message": "Add PreferencesBuilder and rename prefs variables (#2074)"}, {"oid": "9f1e07966edc0f08512a09593df2c4c2c579748d", "committedDate": "2021-01-06 19:25:51 -0500", "message": "Remember only friends (#2097)"}, {"oid": "a99d0a4f294dc25d60995684c232ddcf3567211c", "committedDate": "2021-01-17 16:10:12 -0500", "message": "Automatically update map when hosting a game (#2114)"}, {"oid": "3418820d07232c0e85a7f6b49d363a5011eac6ba", "committedDate": "2021-01-19 19:05:17 -0500", "message": "Clean up updateMap futures and make tests deterministic (#2123)"}, {"oid": "6e6393f39f60aff4b23e290d12fa986e2b13c597", "committedDate": "2021-02-13 10:10:53 -0500", "message": "Refactor and remove unnecessary functions from runLater calls (#2136)"}, {"oid": "f3f4efa76c49522de8118aae3ae37f4f0d380e42", "committedDate": "2021-02-17 20:43:37 -0500", "message": "Revert select Platform.runLater placement changes"}, {"oid": "52904558701ac85fc7363f85408a97f3325c336b", "committedDate": "2021-03-15 07:48:48 -0400", "message": "Add map style ui element (#2185)"}, {"oid": "b978c1f3668ae3a834266bf74a9fd949c1c19f29", "committedDate": "2021-05-05 17:15:51 -0400", "message": "#2219 - Add additional filters at \"Create game\" window (#2220)"}, {"oid": "ef27f6cca7ae0cc88cdd8ed84bcaaae36d5ea895", "committedDate": "2021-05-28 08:52:31 -0400", "message": "Add close button to mod manager in the vault (#2247)"}, {"oid": "0fb142cf3a480dfd4bf3c90a1ae2b3336e2e33a3", "committedDate": "2021-05-31 13:43:41 -0400", "message": "Update Mods before hosting (#2255)"}, {"oid": "76394d8b1296276d51a4e8433d3365024db80e80", "committedDate": "2021-07-25 16:06:42 -0400", "message": "Use new token every time on login to faf server"}, {"oid": "221e3fb2309212167304c3977087bb652337b890", "committedDate": "2021-08-18 19:24:26 -0400", "message": "Use reactive lobby client and utf-8 server port (#2317)"}, {"oid": "937b7d148a907784b9daf98ee4b0221d92939458", "committedDate": "2021-09-16 19:16:26 -0400", "message": "Remove FafService and Implement Mapstruct and ElideNavigator"}, {"oid": "8a4859733e77e568cbb04c4f4390977be27d2066", "committedDate": "2021-09-29 16:02:12 -0400", "message": "Add ability to set generator map size in increments of 1.25km"}, {"oid": "95184da3c4ca330a38dc864ed8527d8b2aa15443", "committedDate": "2021-11-06 09:07:37 -0400", "message": "Implement improved error logging and user notifications (#2373)"}, {"oid": "726b641c46b5bda3a528885bef8e42439a650c11", "committedDate": "2021-11-11 06:57:23 -0500", "message": "Add detection of non ascii title (#2417)"}, {"oid": "611fce5ac72c9692abd09e078950de6de60b4574", "committedDate": "2021-11-21 07:44:35 -0500", "message": "#2420 - Do not create a game with empty title (#2424)"}, {"oid": "9cfbb16abae87fc45fde309b9b55d5208d48b114", "committedDate": "2022-01-09 16:40:05 -0500", "message": "Allow vault and data directories to be set by user (#2512)"}, {"oid": "04c4f563d146bd04405a9ec0427580cff1a6ada4", "committedDate": "2022-01-10 20:18:48 -0500", "message": "Check if password is ascii (#2521)"}, {"oid": "c22f7d13987398d028432665f33750fd953ee67e", "committedDate": "2022-01-21 17:56:10 -0500", "message": "Rework MapGeneratorService and ensure generator directory set correctly (#2531)"}, {"oid": "25705e067c65bd82291ce44685a0f1b4e9f9058e", "committedDate": "2022-01-27 17:05:08 -0500", "message": "Use `ContextMenuBuilder` instead of `AbstractPlayerContextMenuController` (#2513)"}, {"oid": "185be83304a6ed707ad6eed4691480bb7d33c550", "committedDate": "2022-02-05 10:16:48 -0500", "message": "Add Smart live replays (#2529)"}, {"oid": "36d07d46ebcaa5642bc4a8181ff5e7a1f029adbf", "committedDate": "2022-02-17 21:30:49 -0500", "message": "Add detection for steam error and add version to error dialogs (#2568)"}, {"oid": "29cfe484403e9a5f0c133ade10f640b18a957f74", "committedDate": "2022-02-21 08:12:57 -0500", "message": "Allow user to specify logging level and use trace logging (#2573)"}, {"oid": "9ed86623556d1d2a7818865a8936ef85dfddde22", "committedDate": "2022-04-06 22:25:05 -0400", "message": "Add click to zoom to create game map preview (#2641)"}, {"oid": "470c019169f5b2e4321d342032a6cfd30d1f3e13", "committedDate": "2022-05-08 14:01:45 -0400", "message": "fix copy map name on create game window (#2691)"}, {"oid": "78e1c46da9a02b88c186854b44ce0b82ca129e24", "committedDate": "2022-08-13 18:37:42 -0400", "message": "Use case insensitive sorting for map names (#2772)"}, {"oid": "7aded572a51198c3a4e4a633998127e0bf5a0c68", "committedDate": "2022-08-14 09:16:12 -0400", "message": "Update game before queue and add better game start error logging (#2773)"}, {"oid": "f93867d674a32a139f5829d6150696d4f350a83c", "committedDate": "2022-10-22 08:39:17 -0400", "message": "New filter system (#2769)"}, {"oid": "12d922a6a91144ebc5aa4de7ac78167a255c3e25", "committedDate": "2022-11-12 07:36:27 -0500", "message": "Make map name search case-insensitive (#2840)"}, {"oid": "3da797727c467a2b4d74a0f667beb8f918bf8dd0", "committedDate": "2022-11-19 14:58:54 -0500", "message": "Use set for active mods (#2849)"}, {"oid": "1fe834d3ff2af2c5b2a73d71452a8d5975a6cf65", "committedDate": "2023-02-14 18:44:25 -0500", "message": "Use javafx mapping for player, game, and chat user properties (#2913)"}, {"oid": "4170bc7dbc9e4afb7afb4fd4531a44193f463596", "committedDate": "2023-02-19 09:09:26 -0500", "message": "Use separate config for preferences and make each a separate bean (#2916)"}, {"oid": "6514d8b81e604babbeec3ba60031ba81a9f1a3e0", "committedDate": "2023-02-19 10:11:32 -0500", "message": "Add simple listener interfaces (#2917)"}, {"oid": "f4ba9b4c4ef7fbe0983423776d2fe3b953c62a60", "committedDate": "2023-03-05 04:06:40 +0000", "message": "Use bindings for vault cards (#2928)"}, {"oid": "7aa6dcbbe2d8544c0f2315537f8c763e610c8d12", "committedDate": "2023-03-11 22:48:08 -0500", "message": "Use pattern matching where possible (#2941)"}]}, {"oid": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "url": "https://github.com/FAForever/downlords-faf-client/commit/42ed82984dd0325d3839bf7dfa9126e55b7c172c", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options", "committedDate": "2020-07-15T02:59:02Z", "type": "forcePushed"}, {"oid": "5e3e526df2481369493481e684879926b9c96fb2", "url": "https://github.com/FAForever/downlords-faf-client/commit/5e3e526df2481369493481e684879926b9c96fb2", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nMake Spinners uniform size\n\nRemove Map Size limits", "committedDate": "2020-07-16T04:45:12Z", "type": "forcePushed"}, {"oid": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "url": "https://github.com/FAForever/downlords-faf-client/commit/6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nDisable options when map name given", "committedDate": "2020-07-17T23:03:15Z", "type": "commit"}, {"oid": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "url": "https://github.com/FAForever/downlords-faf-client/commit/6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nDisable options when map name given", "committedDate": "2020-07-17T23:03:15Z", "type": "forcePushed"}, {"oid": "b0b31a72e49a7e0970f639001bc728f3782ff648", "url": "https://github.com/FAForever/downlords-faf-client/commit/b0b31a72e49a7e0970f639001bc728f3782ff648", "message": "Merge branch 'develop' into feature/#1781-map-gen-options-UI", "committedDate": "2020-07-18T21:57:39Z", "type": "commit"}]}