{"pr_number": 3081, "pr_title": "Do not collect metrics of the requests to `TransientService` by default", "pr_author": "minwoox", "pr_createdAt": "2020-09-24T04:32:08Z", "pr_url": "https://github.com/line/armeria/pull/3081", "timeline": [{"oid": "b50d2dc28dd5a2cf570010ec54f0be68295a7663", "url": "https://github.com/line/armeria/commit/b50d2dc28dd5a2cf570010ec54f0be68295a7663", "message": "Do not log the request and response to/from `TransientService`\nMotivation:\nRelated #3061\nIt will be nice if the request and response to/from `TransientService` are not logged by server side.\n\nModifications:\n- Add defualt `shouldLogRequest` method to `Service`\n  - `TransientService` returns `false` by default\n- `PrometheusExpositionService` now implments `TransientService`\n- Requests and responses to/from `TransientService` are not logged and recored by `LoggingService`, `AccessLogWriter` and `MetricCollectingService` anymore.\n  - You should set `shouldLogRequest` to `true` to log them.\n\nResult:\n- Healtch check requests are not logged and recorded by `LoggingService`, `AccessLogWriter` and `MetricCollectingService` anymore .\n- Close #3061\n- (Deprecated) `new PrometheusExpositionService(CollectorRegistry)` is now deprecated.\n  - Use `PrometheusExpositionService.of(CollectorRegistry)` instead.", "committedDate": "2020-09-24T04:04:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MTk0MA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r494071940", "body": "How about: \r\n... whether the request and response handled by this {@link PrometheusExpositionService} are logged ...?", "bodyText": "How about:\n... whether the request and response handled by this {@link PrometheusExpositionService} are logged ...?", "bodyHTML": "<p dir=\"auto\">How about:<br>\n... whether the request and response handled by this {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> PrometheusExpositionService} are logged ...?</p>", "author": "ikhoon", "createdAt": "2020-09-24T06:39:52Z", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java", "diffHunk": "@@ -35,20 +38,50 @@\n  * Exposes Prometheus metrics in <a href=\"https://prometheus.io/docs/instrumenting/exposition_formats/\">text\n  * format 0.0.4</a>.\n  */\n-public final class PrometheusExpositionService extends AbstractHttpService {\n+public final class PrometheusExpositionService extends AbstractHttpService implements TransientHttpService {\n \n     private static final MediaType CONTENT_TYPE_004 = MediaType.parse(TextFormat.CONTENT_TYPE_004);\n \n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionService of(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionService(collectorRegistry, false);\n+    }\n+\n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     *\n+     * @param shouldLogRequest tells whether the request and response are logged or recorded by", "originalCommit": "b50d2dc28dd5a2cf570010ec54f0be68295a7663", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3NTM4Mw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r494075383", "body": "How about removing this method and checking by?:\r\n```java\r\nif (service instanceof TransientService && ((TransientService) service).shouldLogRequest()) {\r\n   ...\r\n  \r\n}\r\n```", "bodyText": "How about removing this method and checking by?:\nif (service instanceof TransientService && ((TransientService) service).shouldLogRequest()) {\n   ...\n  \n}", "bodyHTML": "<p dir=\"auto\">How about removing this method and checking by?:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (service instanceof TransientService &amp;&amp; ((TransientService) service).shouldLogRequest()) {\n   ...\n  \n}\"><pre><span class=\"pl-k\">if</span> (service <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">TransientService</span> <span class=\"pl-k\">&amp;&amp;</span> ((<span class=\"pl-smi\">TransientService</span>) service)<span class=\"pl-k\">.</span>shouldLogRequest()) {\n   <span class=\"pl-c1\">...</span>\n  \n}</pre></div>", "author": "ikhoon", "createdAt": "2020-09-24T06:47:14Z", "path": "core/src/main/java/com/linecorp/armeria/server/Service.java", "diffHunk": "@@ -103,4 +106,12 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}\n     default boolean shouldCachePath(String path, @Nullable String query, Route route) {\n         return route.pathType() == RoutePathType.EXACT && query == null;\n     }\n+\n+    /**\n+     * Returns whether the request and response are logged or recorded by\n+     * {@link LoggingService}, {@link MetricCollectingService} and {@link AccessLogWriter}.\n+     */\n+    default boolean shouldLogRequest() {", "originalCommit": "b50d2dc28dd5a2cf570010ec54f0be68295a7663", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "91f69a93bf01defc8065ce1fe0142c2243eae322", "url": "https://github.com/line/armeria/commit/91f69a93bf01defc8065ce1fe0142c2243eae322", "message": "Address the comments by @trustin and @ikhoon", "committedDate": "2020-09-25T03:49:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MjQ4Mg==", "url": "https://github.com/line/armeria/pull/3081#discussion_r494772482", "body": "We should only check `ServiceConfig.transientService()` and set `true` to it when `service.as(TransientService.class) != null` *and* a user did not override it with `transientService(false)`.", "bodyText": "We should only check ServiceConfig.transientService() and set true to it when service.as(TransientService.class) != null and a user did not override it with transientService(false).", "bodyHTML": "<p dir=\"auto\">We should only check <code>ServiceConfig.transientService()</code> and set <code>true</code> to it when <code>service.as(TransientService.class) != null</code> <em>and</em> a user did not override it with <code>transientService(false)</code>.</p>", "author": "trustin", "createdAt": "2020-09-25T06:24:58Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "diffHunk": "@@ -405,7 +405,8 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th\n \n             // Keep track of the number of unfinished requests and\n             // clean up the request stream when response stream ends.\n-            final boolean isTransient = service.as(TransientService.class) != null;\n+            final boolean isTransient = service.as(TransientService.class) != null ||\n+                                        serviceCfg.transientService();", "originalCommit": "91f69a93bf01defc8065ce1fe0142c2243eae322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2c778131fc1b04f971450830df7a85dfd40e985", "url": "https://github.com/line/armeria/commit/a2c778131fc1b04f971450830df7a85dfd40e985", "message": "Merge branch 'master' into doNoLog_transient", "committedDate": "2020-11-02T08:27:22Z", "type": "commit"}, {"oid": "f3c09fd87b92083ffdf7fe913af129cee45f14a2", "url": "https://github.com/line/armeria/commit/f3c09fd87b92083ffdf7fe913af129cee45f14a2", "message": "Add TransientService.countFor(ActionType)", "committedDate": "2020-11-02T09:01:00Z", "type": "commit"}, {"oid": "8d8de53e8ca059770872e0c631a874b50b9a518c", "url": "https://github.com/line/armeria/commit/8d8de53e8ca059770872e0c631a874b50b9a518c", "message": "Use static factory method", "committedDate": "2020-11-02T09:07:07Z", "type": "commit"}, {"oid": "2e949d768098cd72a52257aebb24f4774a23af04", "url": "https://github.com/line/armeria/commit/2e949d768098cd72a52257aebb24f4774a23af04", "message": "Add comments", "committedDate": "2020-11-03T01:49:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDM4OQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r517164389", "body": "Can use varags by removing `enable` from parameters?\r\n```java\r\nenableTransientServiceAction(ActionType... actionTypes);\r\n```", "bodyText": "Can use varags by removing enable from parameters?\nenableTransientServiceAction(ActionType... actionTypes);", "bodyHTML": "<p dir=\"auto\">Can use varags by removing <code>enable</code> from parameters?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"enableTransientServiceAction(ActionType... actionTypes);\"><pre>enableTransientServiceAction(<span class=\"pl-smi\">ActionType</span><span class=\"pl-k\">.</span><span class=\"pl-c1\">..</span> actionTypes);</pre></div>", "author": "ikhoon", "createdAt": "2020-11-04T08:18:30Z", "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {", "originalCommit": "2e949d768098cd72a52257aebb24f4774a23af04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgwMjQ0OQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r517802449", "bodyText": "Had a chat with @ikhoon and we decided to leave it as it is because the default value might be changed in the future.", "author": "minwoox", "createdAt": "2020-11-05T05:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDM4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NzMxNA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r519647314", "bodyText": "How about this:\n\nIf transientServiceActions() is not invoked at all, use the default settings.\nIf invoked at least once, use the specified ones.", "author": "trustin", "createdAt": "2020-11-09T09:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NTMxMw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r517165313", "body": "nit: Merge two `if` conditions?", "bodyText": "nit: Merge two if conditions?", "bodyHTML": "<p dir=\"auto\">nit: Merge two <code>if</code> conditions?</p>", "author": "ikhoon", "createdAt": "2020-11-04T08:20:14Z", "path": "core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java", "diffHunk": "@@ -121,8 +123,10 @@ public static LoggingServiceBuilder builder() {\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n-        if (sampler.isSampled(ctx)) {\n-            logWhenComplete(logger, ctx, requestLogger, responseLogger);\n+        if (TransientServiceUtil.countFor(ctx, ActionType.LOGGING)) {\n+            if (sampler.isSampled(ctx)) {", "originalCommit": "2e949d768098cd72a52257aebb24f4774a23af04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgwMzAwNw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r517803007", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-11-05T05:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NTMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NjU5Mw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r517166593", "body": "Ditto.", "bodyText": "Ditto.", "bodyHTML": "<p dir=\"auto\">Ditto.</p>", "author": "ikhoon", "createdAt": "2020-11-04T08:22:43Z", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static com.linecorp.armeria.internal.server.TransientServiceUtil.defaultTransientServiceActions;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    private final EnumMap<ActionType, Boolean> transientServiceActions;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        transientServiceActions = new EnumMap<>(ActionType.class);\n+        transientServiceActions.putAll(defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() PrometheusExpositionService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public PrometheusExpositionServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {", "originalCommit": "2e949d768098cd72a52257aebb24f4774a23af04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b", "url": "https://github.com/line/armeria/commit/b114177aee0677d7a49acfae4a9822271c94f18b", "message": "Address the comment by @ikhoon", "committedDate": "2020-11-05T05:37:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxODk2MQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r517818961", "body": "Could use `Maps.immutableEnumMap(...)`?\r\n```suggestion\r\n                                      Maps.immutableEnumMap(transientServiceActions));\r\n```", "bodyText": "Could use Maps.immutableEnumMap(...)?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));\n          \n          \n            \n                                                  Maps.immutableEnumMap(transientServiceActions));", "bodyHTML": "<p dir=\"auto\">Could use <code>Maps.immutableEnumMap(...)</code>?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                      <span class=\"pl-smi\">Maps</span><span class=\"pl-k\">.</span><span class=\"x x-first\">newEnumMap(</span><span class=\"pl-smi x\">ImmutableMap</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">copyOf(</span>transientServiceActions<span class=\"x x-first x-last\">)</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                      <span class=\"pl-smi\">Maps</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">immutableEnumMap(</span>transientServiceActions));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-11-05T06:31:37Z", "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {\n+        transientServiceActions.put(requireNonNull(actionType, \"actionType\"), enable);\n+        return this;\n+    }\n+\n     /**\n      * Returns a newly created {@link HealthCheckService} built from the properties specified so far.\n      */\n     public HealthCheckService build() {\n         return new HealthCheckService(healthCheckers.build(),\n                                       healthyResponse, unhealthyResponse,\n                                       maxLongPollingTimeoutMillis, longPollingTimeoutJitterRate,\n-                                      pingIntervalMillis, updateHandler);\n+                                      pingIntervalMillis, updateHandler,\n+                                      Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));", "originalCommit": "b114177aee0677d7a49acfae4a9822271c94f18b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNzAwNQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r519617005", "bodyText": "This is only used for the builder. It doesn't create many objects. You can ignore this review. :-)", "author": "ikhoon", "createdAt": "2020-11-09T08:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxODk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxOTg5NQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r517819895", "body": "Could use `Maps.immutableEnumMap()` to avoid addtional copies?\r\nhttps://github.com/google/guava/blob/7ef9f97cad23efee4cc18c63b5f3c90ca320f131/guava/src/com/google/common/collect/Maps.java#L148-L152", "bodyText": "Could use Maps.immutableEnumMap() to avoid addtional copies?\nhttps://github.com/google/guava/blob/7ef9f97cad23efee4cc18c63b5f3c90ca320f131/guava/src/com/google/common/collect/Maps.java#L148-L152", "bodyHTML": "<p dir=\"auto\">Could use <code>Maps.immutableEnumMap()</code> to avoid addtional copies?<br>\n<a href=\"https://github.com/google/guava/blob/7ef9f97cad23efee4cc18c63b5f3c90ca320f131/guava/src/com/google/common/collect/Maps.java#L148-L152\">https://github.com/google/guava/blob/7ef9f97cad23efee4cc18c63b5f3c90ca320f131/guava/src/com/google/common/collect/Maps.java#L148-L152</a></p>", "author": "ikhoon", "createdAt": "2020-11-05T06:34:38Z", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java", "diffHunk": "@@ -35,20 +41,45 @@\n  * Exposes Prometheus metrics in <a href=\"https://prometheus.io/docs/instrumenting/exposition_formats/\">text\n  * format 0.0.4</a>.\n  */\n-public final class PrometheusExpositionService extends AbstractHttpService {\n+public final class PrometheusExpositionService extends AbstractHttpService implements TransientHttpService {\n \n     private static final MediaType CONTENT_TYPE_004 = MediaType.parse(TextFormat.CONTENT_TYPE_004);\n \n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionService of(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionService(collectorRegistry, defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Returns a new {@link PrometheusExpositionServiceBuilder} created with the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionServiceBuilder builder(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionServiceBuilder(collectorRegistry);\n+    }\n+\n     private final CollectorRegistry collectorRegistry;\n+    private final Map<ActionType, Boolean> transientServiceActions;\n \n     /**\n      * Creates a new instance.\n      *\n      * @param collectorRegistry Prometheus registry\n+     *\n+     * @deprecated Use {@link #of(CollectorRegistry)}.\n      */\n+    @Deprecated\n     public PrometheusExpositionService(CollectorRegistry collectorRegistry) {\n-        requireNonNull(collectorRegistry, \"collectorRegistry\");\n-        this.collectorRegistry = collectorRegistry;\n+        this(collectorRegistry, defaultTransientServiceActions());\n+    }\n+\n+    PrometheusExpositionService(CollectorRegistry collectorRegistry,\n+                                EnumMap<ActionType, Boolean> transientServiceActions) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        this.transientServiceActions = ImmutableMap.copyOf(transientServiceActions);", "originalCommit": "b114177aee0677d7a49acfae4a9822271c94f18b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxOTk5Nw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r517819997", "body": "Ditto", "bodyText": "Ditto", "bodyHTML": "<p dir=\"auto\">Ditto</p>", "author": "ikhoon", "createdAt": "2020-11-05T06:34:56Z", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static com.linecorp.armeria.internal.server.TransientServiceUtil.defaultTransientServiceActions;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    private final EnumMap<ActionType, Boolean> transientServiceActions;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        transientServiceActions = new EnumMap<>(ActionType.class);\n+        transientServiceActions.putAll(defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() PrometheusExpositionService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public PrometheusExpositionServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {\n+        transientServiceActions.put(requireNonNull(actionType, \"actionType\"), enable);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link PrometheusExpositionService} based on the properties of this builder.\n+     */\n+    public PrometheusExpositionService build() {\n+        return new PrometheusExpositionService(collectorRegistry,\n+                                               Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));", "originalCommit": "b114177aee0677d7a49acfae4a9822271c94f18b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjMwMA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r519642300", "body": "G -> g", "bodyText": "G -> g", "bodyHTML": "<p dir=\"auto\">G -&gt; g</p>", "author": "trustin", "createdAt": "2020-11-09T08:52:55Z", "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,41 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Tells whether the specified {@link ActionType} is enabled for this {@link TransientService}.\n+     */\n+    default boolean countFor(ActionType type) {\n+        return false;\n+    }\n+\n+    /**\n+     * The type of actions that is used in {@link TransientService#countFor(ActionType)}.\n+     */\n+    enum ActionType {\n+\n+        /**\n+         * Whether Graceful shutdown counts the requests to the {@link TransientService} as processing requests.", "originalCommit": "b114177aee0677d7a49acfae4a9822271c94f18b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MzM3MA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r519643370", "body": "Should this be dynamic or static? If static, I guess we can just have this:\r\n\r\n```java\r\ndefault Set<ActionType> countedActionTypes() {\r\n    return ALL_ACTION_TYPES;\r\n}\r\n```\r\n\r\n.. and expose it in `ServiceConfig` for faster retrieval, because it will be queried very often.", "bodyText": "Should this be dynamic or static? If static, I guess we can just have this:\ndefault Set<ActionType> countedActionTypes() {\n    return ALL_ACTION_TYPES;\n}\n.. and expose it in ServiceConfig for faster retrieval, because it will be queried very often.", "bodyHTML": "<p dir=\"auto\">Should this be dynamic or static? If static, I guess we can just have this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"default Set&lt;ActionType&gt; countedActionTypes() {\n    return ALL_ACTION_TYPES;\n}\"><pre><span class=\"pl-k\">default</span> <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">ActionType</span>&gt;</span> countedActionTypes() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">ALL_ACTION_TYPES</span>;\n}</pre></div>\n<p dir=\"auto\">.. and expose it in <code>ServiceConfig</code> for faster retrieval, because it will be queried very often.</p>", "author": "trustin", "createdAt": "2020-11-09T08:54:43Z", "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,41 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Tells whether the specified {@link ActionType} is enabled for this {@link TransientService}.\n+     */\n+    default boolean countFor(ActionType type) {\n+        return false;\n+    }", "originalCommit": "b114177aee0677d7a49acfae4a9822271c94f18b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDA4Mw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r519644083", "body": "- Could use an immutable `EnumSet` and `EnumSet.contains()`? It's O(1) anyways.\r\n- `Flags`?", "bodyText": "Could use an immutable EnumSet and EnumSet.contains()? It's O(1) anyways.\nFlags?", "bodyHTML": "<ul dir=\"auto\">\n<li>Could use an immutable <code>EnumSet</code> and <code>EnumSet.contains()</code>? It's O(1) anyways.</li>\n<li><code>Flags</code>?</li>\n</ul>", "author": "trustin", "createdAt": "2020-11-09T08:55:59Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/TransientServiceUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static com.linecorp.armeria.server.TransientService.ActionType.ACCESS_LOGGING;\n+import static com.linecorp.armeria.server.TransientService.ActionType.GRACEFUL_SHUTDOWN;\n+import static com.linecorp.armeria.server.TransientService.ActionType.LOGGING;\n+import static com.linecorp.armeria.server.TransientService.ActionType.METRIC_COLLECTION;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.TransientService;\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+public final class TransientServiceUtil {\n+\n+    private static final EnumMap<ActionType, Boolean> defaultTransientServiceActions =\n+            Maps.newEnumMap(ImmutableMap.of(GRACEFUL_SHUTDOWN, false,\n+                                            METRIC_COLLECTION, false,\n+                                            LOGGING, false,\n+                                            ACCESS_LOGGING, false));", "originalCommit": "b114177aee0677d7a49acfae4a9822271c94f18b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "919f120c74599c5bba1ae998393f0185b0bd5f3b", "url": "https://github.com/line/armeria/commit/919f120c74599c5bba1ae998393f0185b0bd5f3b", "message": "Add OptOutFeature", "committedDate": "2020-11-10T10:44:13Z", "type": "commit"}, {"oid": "1a7ecabb30fb4465ea270416c05a9996a8ae3476", "url": "https://github.com/line/armeria/commit/1a7ecabb30fb4465ea270416c05a9996a8ae3476", "message": "Fix", "committedDate": "2020-11-10T10:51:37Z", "type": "commit"}, {"oid": "219df81c5fbde35d2980b05c9a6319c989f8fd90", "url": "https://github.com/line/armeria/commit/219df81c5fbde35d2980b05c9a6319c989f8fd90", "message": "Add default to flags", "committedDate": "2020-11-10T11:50:46Z", "type": "commit"}, {"oid": "6d997c83db5d17a3eb8c05964304182188a8f3fd", "url": "https://github.com/line/armeria/commit/6d997c83db5d17a3eb8c05964304182188a8f3fd", "message": "Merge branch 'master' into doNoLog_transient", "committedDate": "2020-11-10T12:21:24Z", "type": "commit"}, {"oid": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be", "url": "https://github.com/line/armeria/commit/c76e1f39a49df5fc9fa0acdd1eedc8e4577994be", "message": "Add private", "committedDate": "2020-11-10T12:23:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMDgwNg==", "url": "https://github.com/line/armeria/pull/3081#discussion_r521920806", "body": "requireNonNull?", "bodyText": "requireNonNull?", "bodyHTML": "<p dir=\"auto\">requireNonNull?</p>", "author": "ikhoon", "createdAt": "2020-11-12T08:25:46Z", "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +258,34 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    @Override\n+    public HealthCheckServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public HealthCheckServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(optOutFeatures));", "originalCommit": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4NjMxMQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r522586311", "bodyText": "Oops thanks fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-11-13T03:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMDgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDE5Mg==", "url": "https://github.com/line/armeria/pull/3081#discussion_r521924192", "body": "requireNonNull?", "bodyText": "requireNonNull?", "bodyHTML": "<p dir=\"auto\">requireNonNull?</p>", "author": "ikhoon", "createdAt": "2020-11-12T08:31:10Z", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder implements TransientServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        requireNonNull(optOutFeatures, \"optOutFeatures\");\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(optOutFeatures));", "originalCommit": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e", "url": "https://github.com/line/armeria/commit/1ba15981d85c4ac4f6daf290c04e580fd433b25e", "message": "Address comments by @ikhoon", "committedDate": "2020-11-13T03:09:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4NjQ1MA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r523986450", "body": "`Ascii.toUpperCase()`?", "bodyText": "Ascii.toUpperCase()?", "bodyHTML": "<p dir=\"auto\"><code>Ascii.toUpperCase()</code>?</p>", "author": "trustin", "createdAt": "2020-11-16T08:56:57Z", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -372,6 +377,19 @@\n \n     private static final boolean VALIDATE_HEADERS = getBoolean(\"validateHeaders\", true);\n \n+    private static final String DEFAULT_OPT_OUT_FEATURES =\n+            \"GRACEFUL_SHUTDOWN,METRIC_COLLECTION,LOGGING,ACCESS_LOGGING\";\n+    private static final Set<OptOutFeature> OPT_OUT_FEATURES =\n+            Streams.stream(CSV_SPLITTER.split(getNormalized(\"optOutFeatures\", DEFAULT_OPT_OUT_FEATURES, val -> {\n+                try {\n+                    Streams.stream(CSV_SPLITTER.split(val))\n+                           .forEach(feature -> OptOutFeature.valueOf(feature.toUpperCase()));\n+                    return true;\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+            }))).map(feature -> OptOutFeature.valueOf(feature.toUpperCase())).collect(toImmutableSet());", "originalCommit": "1ba15981d85c4ac4f6daf290c04e580fd433b25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4ODM2NQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r523988365", "body": "Global nit: Extract `reqCtx.config()` into a local variable?", "bodyText": "Global nit: Extract reqCtx.config() into a local variable?", "bodyHTML": "<p dir=\"auto\">Global nit: Extract <code>reqCtx.config()</code> into a local variable?</p>", "author": "trustin", "createdAt": "2020-11-16T08:58:45Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -328,7 +328,9 @@ private void fail(Throwable cause) {\n         if (tryComplete()) {\n             setDone(true);\n             logBuilder().endResponse(cause);\n-            reqCtx.log().whenComplete().thenAccept(reqCtx.config().accessLogWriter()::log);\n+            if (!reqCtx.config().optOutFeatures().contains(OptOutFeature.ACCESS_LOGGING)) {\n+                reqCtx.log().whenComplete().thenAccept(reqCtx.config().accessLogWriter()::log);", "originalCommit": "1ba15981d85c4ac4f6daf290c04e580fd433b25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5MDE4Nw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r523990187", "body": "How about:\r\n\r\n    Specifies which feature should be disabled for a {@link TransientService}.\r\n\r\n..?\r\n\r\nCould we also add a simple example that involves a builder?", "bodyText": "How about:\nSpecifies which feature should be disabled for a {@link TransientService}.\n\n..?\nCould we also add a simple example that involves a builder?", "bodyHTML": "<p dir=\"auto\">How about:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Specifies which feature should be disabled for a {@link TransientService}.\"><pre><code>Specifies which feature should be disabled for a {@link TransientService}.\n</code></pre></div>\n<p dir=\"auto\">..?</p>\n<p dir=\"auto\">Could we also add a simple example that involves a builder?</p>", "author": "trustin", "createdAt": "2020-11-16T09:00:20Z", "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * The opt-out features that are disabled for a {@link TransientService}.", "originalCommit": "1ba15981d85c4ac4f6daf290c04e580fd433b25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5MTg5OQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r523991899", "body": "For all enum values: The Javadoc needs an update. For example:\r\n\r\n    Prevents a {@link Server} from counting the requests to ...", "bodyText": "For all enum values: The Javadoc needs an update. For example:\nPrevents a {@link Server} from counting the requests to ...", "bodyHTML": "<p dir=\"auto\">For all enum values: The Javadoc needs an update. For example:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Prevents a {@link Server} from counting the requests to ...\"><pre><code>Prevents a {@link Server} from counting the requests to ...\n</code></pre></div>", "author": "trustin", "createdAt": "2020-11-16T09:01:58Z", "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * The opt-out features that are disabled for a {@link TransientService}.\n+ */\n+public enum OptOutFeature {\n+\n+    /**\n+     * Whether graceful shutdown counts the requests to the {@link TransientService} as processing requests.", "originalCommit": "1ba15981d85c4ac4f6daf290c04e580fd433b25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NTc4Mg==", "url": "https://github.com/line/armeria/pull/3081#discussion_r523995782", "body": "Could we also add:\r\n\r\n    This method always returns an empty {@link Set} for a non-{@link TransientService},\r\n    because only a {@link TransientService} can opt out from {@link OptOutFeature}s.", "bodyText": "Could we also add:\nThis method always returns an empty {@link Set} for a non-{@link TransientService},\nbecause only a {@link TransientService} can opt out from {@link OptOutFeature}s.", "bodyHTML": "<p dir=\"auto\">Could we also add:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"This method always returns an empty {@link Set} for a non-{@link TransientService},\nbecause only a {@link TransientService} can opt out from {@link OptOutFeature}s.\"><pre><code>This method always returns an empty {@link Set} for a non-{@link TransientService},\nbecause only a {@link TransientService} can opt out from {@link OptOutFeature}s.\n</code></pre></div>", "author": "trustin", "createdAt": "2020-11-16T09:05:28Z", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java", "diffHunk": "@@ -230,6 +248,13 @@ public boolean shutdownAccessLogWriterOnStop() {\n         return shutdownAccessLogWriterOnStop;\n     }\n \n+    /**\n+     * Returns the {@link Set} of {@link OptOutFeature}s that are disabled for the {@link #service()}.", "originalCommit": "1ba15981d85c4ac4f6daf290c04e580fd433b25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NzUwMw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r523997503", "body": "Could we deduplicate this, perhaps extracting to an internal utility?\r\n\r\ne.g.\r\n\r\n```java\r\npublic final class MyBuilder implements TransientServiceBuilder {\r\n    private final OptOutFeaturesBuilder optOutFeaturesBuilder = new OptOutFeaturesBuilder();\r\n\r\n    public MyBuilder optOutFeatures(...) {\r\n        optOutFeaturesBuilder.add(...);\r\n        return this;\r\n    }\r\n\r\n    public MySomething build() {\r\n        Set<OptOutFeature> optOutFeatures = optOutFeaturesBuilder.build();\r\n        ...\r\n    }\r\n}\r\n```", "bodyText": "Could we deduplicate this, perhaps extracting to an internal utility?\ne.g.\npublic final class MyBuilder implements TransientServiceBuilder {\n    private final OptOutFeaturesBuilder optOutFeaturesBuilder = new OptOutFeaturesBuilder();\n\n    public MyBuilder optOutFeatures(...) {\n        optOutFeaturesBuilder.add(...);\n        return this;\n    }\n\n    public MySomething build() {\n        Set<OptOutFeature> optOutFeatures = optOutFeaturesBuilder.build();\n        ...\n    }\n}", "bodyHTML": "<p dir=\"auto\">Could we deduplicate this, perhaps extracting to an internal utility?</p>\n<p dir=\"auto\">e.g.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public final class MyBuilder implements TransientServiceBuilder {\n    private final OptOutFeaturesBuilder optOutFeaturesBuilder = new OptOutFeaturesBuilder();\n\n    public MyBuilder optOutFeatures(...) {\n        optOutFeaturesBuilder.add(...);\n        return this;\n    }\n\n    public MySomething build() {\n        Set&lt;OptOutFeature&gt; optOutFeatures = optOutFeaturesBuilder.build();\n        ...\n    }\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyBuilder</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">TransientServiceBuilder</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">OptOutFeaturesBuilder</span> optOutFeaturesBuilder <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">OptOutFeaturesBuilder</span>();\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyBuilder</span> <span class=\"pl-en\">optOutFeatures</span>(...) {\n        optOutFeaturesBuilder<span class=\"pl-k\">.</span>add(<span class=\"pl-c1\">...</span>);\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>;\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MySomething</span> <span class=\"pl-en\">build</span>() {\n        <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">OptOutFeature</span>&gt;</span> optOutFeatures <span class=\"pl-k\">=</span> optOutFeaturesBuilder<span class=\"pl-k\">.</span>build();\n        <span class=\"pl-c1\">...</span>\n    }\n}</pre></div>", "author": "trustin", "createdAt": "2020-11-16T09:07:07Z", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder implements TransientServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        requireNonNull(optOutFeatures, \"optOutFeatures\");\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link PrometheusExpositionService} based on the properties of this builder.\n+     */\n+    public PrometheusExpositionService build() {\n+        final Set<OptOutFeature> optOutFeatures;\n+        if (this.optOutFeatures == null) {\n+            optOutFeatures = Flags.optOutFeatures();\n+        } else {\n+            optOutFeatures = ImmutableSet.copyOf(this.optOutFeatures);\n+        }", "originalCommit": "1ba15981d85c4ac4f6daf290c04e580fd433b25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2cf5828e97ee16a85da816eed9d8f6f256538a4e", "url": "https://github.com/line/armeria/commit/2cf5828e97ee16a85da816eed9d8f6f256538a4e", "message": "Merge branch 'master' into doNoLog_transient", "committedDate": "2020-11-17T05:28:10Z", "type": "commit"}, {"oid": "12643b692be2062a63fa73be7779ce2e9f235516", "url": "https://github.com/line/armeria/commit/12643b692be2062a63fa73be7779ce2e9f235516", "message": "Address comments by @trustin", "committedDate": "2020-11-17T06:17:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDQzMw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r524910433", "body": "HealthCheckService or LoggingService? \ud83d\ude06 ", "bodyText": "HealthCheckService or LoggingService? \ud83d\ude06", "bodyHTML": "<p dir=\"auto\">HealthCheckService or LoggingService? <g-emoji class=\"g-emoji\" alias=\"laughing\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f606.png\">\ud83d\ude06</g-emoji></p>", "author": "trustin", "createdAt": "2020-11-17T06:26:43Z", "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -20,30 +20,41 @@\n import com.linecorp.armeria.server.metric.MetricCollectingService;\n \n /**\n- * The opt-out features that are disabled for a {@link TransientService}.\n+ * Specifies which features should be disabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .optOutFeatures(OptOutFeature.GRACEFUL_SHUTDOWN,\n+ *                                                         OptOutFeature.ACCESS_LOGGING,\n+ *                                                         OptOutFeature.METRIC_COLLECTION)\n+ *                                         .build());\n+ * }</pre>\n+ * then, every feature is opted out except logging from {@link LoggingService}.", "originalCommit": "12643b692be2062a63fa73be7779ce2e9f235516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMzQ3Mg==", "url": "https://github.com/line/armeria/pull/3081#discussion_r524913472", "bodyText": "Fixed. \ud83d\ude06", "author": "minwoox", "createdAt": "2020-11-17T06:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDc0MA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r524910740", "body": "Maybe just `build()`?", "bodyText": "Maybe just build()?", "bodyHTML": "<p dir=\"auto\">Maybe just <code>build()</code>?</p>", "author": "trustin", "createdAt": "2020-11-17T06:27:33Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/OptOutFeaturesBuilder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+/**\n+ * A Builder for {@link OptOutFeature}.\n+ */\n+public final class OptOutFeaturesBuilder implements TransientServiceBuilder {\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    @Override\n+    public OptOutFeaturesBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public OptOutFeaturesBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the {@link Set} of {@link OptOutFeature}s set so far. {@link Flags#optOutFeatures()} if not set.\n+     */\n+    public Set<OptOutFeature> optOutFeatures() {", "originalCommit": "12643b692be2062a63fa73be7779ce2e9f235516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMjE4NA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r524912184", "bodyText": "That's a good idea. \ud83d\udc4d", "author": "minwoox", "createdAt": "2020-11-17T06:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDc0MA=="}], "type": "inlineReview"}, {"oid": "2b66f6b979875b1c58eaa5bd9f03d8905f773e2b", "url": "https://github.com/line/armeria/commit/2b66f6b979875b1c58eaa5bd9f03d8905f773e2b", "message": "Address comments by @trustin", "committedDate": "2020-11-17T06:35:05Z", "type": "commit"}, {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda", "url": "https://github.com/line/armeria/commit/6a2de6400088f3e8f8f2c307171fcd9da0f13cda", "message": "Use TransientServiceOption", "committedDate": "2020-11-17T09:31:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMDY1Nw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r526630657", "body": "```suggestion\r\n        requireNonNull(transientServiceOptions, \"transientServiceOptions\");\r\n        if (this.transientServiceOptions == null) {\r\n            this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\r\n        }\r\n        transientServiceOptions.forEach(this.transientServiceOptions::add);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.transientServiceOptions == null) {\n          \n          \n            \n                        this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n          \n          \n            \n                    }\n          \n          \n            \n                    this.transientServiceOptions.addAll(\n          \n          \n            \n                            ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));\n          \n          \n            \n                    requireNonNull(transientServiceOptions, \"transientServiceOptions\");\n          \n          \n            \n                    if (this.transientServiceOptions == null) {\n          \n          \n            \n                        this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n          \n          \n            \n                    }\n          \n          \n            \n                    transientServiceOptions.forEach(this.transientServiceOptions::add);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k x x-first\">if</span><span class=\"x\"> (</span><span class=\"pl-c1 x\">this</span><span class=\"pl-k x x-last\">.</span>transientServiceOptions<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x\">null</span><span class=\"x x-last\">) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">    </span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>transientServiceOptions <span class=\"pl-k\">=</span><span class=\"x x-first\"> </span><span class=\"pl-smi x\">EnumSet</span><span class=\"pl-k x\">.</span><span class=\"x\">noneOf(</span><span class=\"pl-smi x\">TransientServiceOption</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">class);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">}</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x\">.</span><span class=\"x\">transientServiceOptions</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">addAll(</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">        </span><span class=\"pl-smi x\">ImmutableSet</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">copyOf(requireNonNull(</span>transientServiceOptions<span class=\"x x-first\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">transientServiceOptions</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">))</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">requireNonNull(</span>transientServiceOptions<span class=\"x x-first\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">transientServiceOptions</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">if</span><span class=\"x x-last\"> (</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>transientServiceOptions <span class=\"pl-k\">=<span class=\"x x-first\">=</span></span><span class=\"x\"> </span><span class=\"pl-c1 x\">null</span><span class=\"x x-last\">) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first\">    </span><span class=\"pl-c1 x\">this</span><span class=\"pl-k x\">.</span><span class=\"x\">transientServiceOptions </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-smi x\">EnumSet</span><span class=\"pl-k x\">.</span><span class=\"x\">noneOf(</span><span class=\"pl-smi x\">TransientServiceOption</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">class);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">}</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first\">transientServiceOptions</span><span class=\"pl-k x\">.</span><span class=\"x\">forEach(</span><span class=\"pl-c1 x\">this</span><span class=\"pl-k x x-last\">.</span>transientServiceOptions<span class=\"pl-k x x-first\">::</span><span class=\"x x-last\">add</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "trustin", "createdAt": "2020-11-19T06:51:42Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/TransientServiceOptionsBuilder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+import com.linecorp.armeria.server.TransientServiceOption;\n+\n+/**\n+ * A Builder for {@link TransientServiceOption}.\n+ */\n+public final class TransientServiceOptionsBuilder implements TransientServiceBuilder {\n+\n+    @Nullable\n+    private Set<TransientServiceOption> transientServiceOptions;\n+\n+    @Override\n+    public TransientServiceOptionsBuilder transientServiceOptions(\n+            TransientServiceOption... transientServiceOptions) {\n+        return transientServiceOptions(\n+                ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));\n+    }\n+\n+    @Override\n+    public TransientServiceOptionsBuilder transientServiceOptions(\n+            Iterable<TransientServiceOption> transientServiceOptions) {\n+        if (this.transientServiceOptions == null) {\n+            this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n+        }\n+        this.transientServiceOptions.addAll(\n+                ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));", "originalCommit": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMDk3Ng==", "url": "https://github.com/line/armeria/pull/3081#discussion_r526630976", "body": "Could we make this an immutable enum set? Otherwise, `TransientServiceOptionsBuilder.build()` will sometimes return an immutable enum set and sometimes not.", "bodyText": "Could we make this an immutable enum set? Otherwise, TransientServiceOptionsBuilder.build() will sometimes return an immutable enum set and sometimes not.", "bodyHTML": "<p dir=\"auto\">Could we make this an immutable enum set? Otherwise, <code>TransientServiceOptionsBuilder.build()</code> will sometimes return an immutable enum set and sometimes not.</p>", "author": "trustin", "createdAt": "2020-11-19T06:52:35Z", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -372,6 +377,18 @@\n \n     private static final boolean VALIDATE_HEADERS = getBoolean(\"validateHeaders\", true);\n \n+    private static final Set<TransientServiceOption> TRANSIENT_SERVICE_OPTIONS =\n+            Streams.stream(CSV_SPLITTER.split(getNormalized(\"transientServiceOptions\", \"\", val -> {\n+                try {\n+                    Streams.stream(CSV_SPLITTER.split(val))\n+                           .forEach(feature -> TransientServiceOption.valueOf(Ascii.toUpperCase(feature)));\n+                    return true;\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+            }))).map(feature -> TransientServiceOption.valueOf(Ascii.toUpperCase(feature)))\n+                   .collect(toImmutableSet());", "originalCommit": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjI2OA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r526792268", "bodyText": "That's a good suggestion. Fixed \ud83d\ude09", "author": "minwoox", "createdAt": "2020-11-19T11:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMDk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMjI3OA==", "url": "https://github.com/line/armeria/pull/3081#discussion_r526632278", "body": "Ditto - use an immutable enum set.", "bodyText": "Ditto - use an immutable enum set.", "bodyHTML": "<p dir=\"auto\">Ditto - use an immutable enum set.</p>", "author": "trustin", "createdAt": "2020-11-19T06:56:24Z", "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * Specifies which features should be enabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .transientServiceOptions(\n+ *                                                 TransientServiceOption.WITH_METRIC_COLLECTION,\n+ *                                                 TransientServiceOption.WITH_ACCESS_LOGGING)\n+ *                                         .build());\n+ * }</pre>\n+ * then, the metric is collected by {@link MetricCollectingService} and access logs are produced by\n+ * {@link AccessLogWriter} for the {@link HealthCheckService}.\n+ */\n+public enum TransientServiceOption {\n+\n+    /**\n+     * Enables {@link MetricCollectingService} to collect the metrics of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_METRIC_COLLECTION,\n+\n+    /**\n+     * Enables {@link LoggingService} to log the requests to the {@link TransientService}.\n+     */\n+    WITH_LOGGING,\n+\n+    /**\n+     * Enables {@link AccessLogWriter} to produce the access logs of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_ACCESS_LOGGING;\n+\n+    private static final Set<TransientServiceOption> allOf = ImmutableSet.of(WITH_METRIC_COLLECTION,", "originalCommit": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b5bfe9b7ca3b96ad92b6b3cd94c969bb87ad09f", "url": "https://github.com/line/armeria/commit/4b5bfe9b7ca3b96ad92b6b3cd94c969bb87ad09f", "message": "Merge branch 'master' into doNoLog_transient", "committedDate": "2020-11-19T09:50:15Z", "type": "commit"}, {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084", "url": "https://github.com/line/armeria/commit/b4e5e5f7e32c759a6e56db943c6b490f6077a084", "message": "Address comments by @trustin", "committedDate": "2020-11-19T10:58:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzE4Mg==", "url": "https://github.com/line/armeria/pull/3081#discussion_r526807182", "body": "Should we rename this to `transientServiceOptions()`, just in case a user wants to use the method name `option`, since it's fairly generic?", "bodyText": "Should we rename this to transientServiceOptions(), just in case a user wants to use the method name option, since it's fairly generic?", "bodyHTML": "<p dir=\"auto\">Should we rename this to <code>transientServiceOptions()</code>, just in case a user wants to use the method name <code>option</code>, since it's fairly generic?</p>", "author": "trustin", "createdAt": "2020-11-19T11:50:35Z", "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,15 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Returns the {@link Set} of {@link TransientServiceOption}s that are enabled for this\n+     * {@link TransientService}. This returns {@link Flags#transientServiceOptions()} if you didn't\n+     * specify any {@link TransientServiceOption}s using\n+     * {@link TransientServiceBuilder#transientServiceOptions(TransientServiceOption...)} when you create\n+     * this {@link TransientService}.\n+     */\n+    default Set<TransientServiceOption> options() {", "originalCommit": "b4e5e5f7e32c759a6e56db943c6b490f6077a084", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NjY2Nw==", "url": "https://github.com/line/armeria/pull/3081#discussion_r526886667", "bodyText": "No objection. \ud83d\udc4d", "author": "minwoox", "createdAt": "2020-11-19T13:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzY2NQ==", "url": "https://github.com/line/armeria/pull/3081#discussion_r526807665", "body": "Would `WITH_SERVICE_LOGGING` be better? \ud83e\udd14 ", "bodyText": "Would WITH_SERVICE_LOGGING be better? \ud83e\udd14", "bodyHTML": "<p dir=\"auto\">Would <code>WITH_SERVICE_LOGGING</code> be better? <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji></p>", "author": "trustin", "createdAt": "2020-11-19T11:51:27Z", "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * Specifies which features should be enabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .transientServiceOptions(\n+ *                                                 TransientServiceOption.WITH_METRIC_COLLECTION,\n+ *                                                 TransientServiceOption.WITH_ACCESS_LOGGING)\n+ *                                         .build());\n+ * }</pre>\n+ * then, the metric is collected by {@link MetricCollectingService} and access logs are produced by\n+ * {@link AccessLogWriter} for the {@link HealthCheckService}.\n+ */\n+public enum TransientServiceOption {\n+\n+    /**\n+     * Enables {@link MetricCollectingService} to collect the metrics of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_METRIC_COLLECTION,\n+\n+    /**\n+     * Enables {@link LoggingService} to log the requests to the {@link TransientService}.\n+     */\n+    WITH_LOGGING,", "originalCommit": "b4e5e5f7e32c759a6e56db943c6b490f6077a084", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NjQ1Mg==", "url": "https://github.com/line/armeria/pull/3081#discussion_r526886452", "bodyText": "That's better. \ud83d\udc4d", "author": "minwoox", "createdAt": "2020-11-19T13:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzY2NQ=="}], "type": "inlineReview"}, {"oid": "3ac403b411e5a15862f09aad1569864808b7515a", "url": "https://github.com/line/armeria/commit/3ac403b411e5a15862f09aad1569864808b7515a", "message": "Use WITH_SERVICE_LOGGING", "committedDate": "2020-11-19T13:35:59Z", "type": "commit"}]}