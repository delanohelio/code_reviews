{"pr_number": 2591, "pr_title": "Reimplement `RequestContext.toString()`", "pr_author": "trustin", "pr_createdAt": "2020-03-16T08:54:18Z", "pr_url": "https://github.com/line/armeria/pull/2591", "timeline": [{"oid": "75bb2f5d2c0c0f1ea32e34002fa597ba265dd0a4", "url": "https://github.com/line/armeria/commit/75bb2f5d2c0c0f1ea32e34002fa597ba265dd0a4", "message": "Reimplement `RequestContext.toString()`\n\n- Use `TemporaryThreadLocals` to reduce `StringBuilder` reallocation.\n- Add `RequestId`s\n- Move the slow path to a separate method so that fast path can be\n  inlined.\n- Add `TextFormatter.socketAddress()` and `inetAddress()`\n- Miscellaneous:\n  - Fix method ordering.\n  - Fix indentation\n  - Fix for a potential `NPE` on Windows in\n    `DefaultServiceRequestContext.{local,remote}Address()`", "committedDate": "2020-03-16T08:51:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM5MA==", "url": "https://github.com/line/armeria/pull/2591#discussion_r392866390", "body": "```suggestion\r\n        // to follow our convention of not calling other methods while appending to TemporaryThreadLocals.\r\n```\r\n\r\nWasn't sure what the comment means, this might be clearer.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // so we do not have any chance of nesting the use of TemporaryThreadLocals.\n          \n          \n            \n                    // to follow our convention of not calling other methods while appending to TemporaryThreadLocals.\n          \n      \n    \n    \n  \n\nWasn't sure what the comment means, this might be clearer.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> <span class=\"x x-first x-last\">so we do not have any chance of nesting the use of</span> TemporaryThreadLocals.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> <span class=\"x x-first x-last\">to follow our convention of not calling other methods while appending to</span> TemporaryThreadLocals.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Wasn't sure what the comment means, this might be clearer.</p>", "author": "anuraaga", "createdAt": "2020-03-16T08:58:17Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -548,42 +556,46 @@ public RequestLogBuilder logBuilder() {\n \n     @Override\n     public String toString() {\n-        String strVal = this.strVal;\n         if (strVal != null) {\n             return strVal;\n         }\n+        return toStringSlow();\n \n-        final StringBuilder buf = new StringBuilder(107);\n-        buf.append(\"[C]\");\n+    }\n \n-        // Prepend the current channel information if available.\n+    private String toStringSlow() {\n+        // Prepare all properties required for building a string representation,\n+        // so we do not have any chance of nesting the use of TemporaryThreadLocals.", "originalCommit": "75bb2f5d2c0c0f1ea32e34002fa597ba265dd0a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MzA2NQ==", "url": "https://github.com/line/armeria/pull/2591#discussion_r392893065", "bodyText": "Hmm, I meant not using TemporaryThreadLocals while using it in nested toString()s.", "author": "trustin", "createdAt": "2020-03-16T09:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MDkzMQ==", "url": "https://github.com/line/armeria/pull/2591#discussion_r392870931", "body": "Use JDK `Objects.equals()`", "bodyText": "Use JDK Objects.equals()", "bodyHTML": "<p dir=\"auto\">Use JDK <code>Objects.equals()</code></p>", "author": "anuraaga", "createdAt": "2020-03-16T09:07:36Z", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -485,48 +488,45 @@ void setRequestTimeoutController(TimeoutController requestTimeoutController) {\n \n     @Override\n     public String toString() {\n-        String strVal = this.strVal;\n         if (strVal != null) {\n             return strVal;\n+        } else {\n+            return toStringSlow();\n         }\n \n-        final StringBuilder buf = new StringBuilder(108);\n-        buf.append(\"[S]\");\n-\n-        // Prepend the current channel information if available.\n-        final Channel ch = channel();\n-        final boolean hasChannel = ch != null;\n-        if (hasChannel) {\n-            buf.append(ch);\n-\n-            final InetAddress remote = ((InetSocketAddress) remoteAddress()).getAddress();\n-            final InetAddress client = clientAddress();\n-            if (remote != null && !remote.equals(client)) {\n-                buf.append(\"[C:\").append(client.getHostAddress()).append(']');\n-            }\n-        }\n-\n-        buf.append('[')\n-           .append(sessionProtocol().uriText())\n-           .append(\"://\")\n-           .append(virtualHost().defaultHostname());\n+    }\n \n+    private String toStringSlow() {\n+        // Prepare all properties required for building a string representation,\n+        // so we do not have any chance of nesting the use of TemporaryThreadLocals.\n+        final String sreqId = id().shortText();\n+        final String chanId = ch.id().asShortText();\n+        final InetSocketAddress raddr = remoteAddress();\n         final InetSocketAddress laddr = localAddress();\n-        if (laddr != null) {\n-            buf.append(':').append(laddr.getPort());\n-        } else {\n-            buf.append(\":-1\"); // Port unknown.\n+        final InetAddress caddr = clientAddress();\n+        final String proto = sessionProtocol().uriText();\n+        final String authority = virtualHost().defaultHostname();\n+        final String path = path();\n+        final String method = method().name();\n+\n+        // Build the string representation.\n+        final StringBuilder buf = TemporaryThreadLocals.get().stringBuilder();\n+        buf.append(\"[sreqId=\").append(sreqId)\n+           .append(\", chanId=\").append(chanId);\n+\n+        if (!Objects.equal(caddr, raddr.getAddress())) {", "originalCommit": "75bb2f5d2c0c0f1ea32e34002fa597ba265dd0a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2aba881075df84cf4df6375fb937f3cec8b2df8d", "url": "https://github.com/line/armeria/commit/2aba881075df84cf4df6375fb937f3cec8b2df8d", "message": "Update core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java\n\nCo-Authored-By: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-03-16T09:44:22Z", "type": "commit"}, {"oid": "a4e5df51d4edc654bccf2b9caf829a1254bf6ffa", "url": "https://github.com/line/armeria/commit/a4e5df51d4edc654bccf2b9caf829a1254bf6ffa", "message": "Address the comments from @anuraaga", "committedDate": "2020-03-16T09:45:44Z", "type": "commit"}, {"oid": "73ada8635d676a40452052a970bafaac79b6d4bd", "url": "https://github.com/line/armeria/commit/73ada8635d676a40452052a970bafaac79b6d4bd", "message": "Update comments", "committedDate": "2020-03-16T09:50:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwMDk4Mw==", "url": "https://github.com/line/armeria/pull/2591#discussion_r392900983", "body": "This is less clear again. I think we have a convention of not calling any methods during thread local building because it's not clear whether that method may reinitialize the buffer or not. toString is of course a common culprit but not necessarily the only one.\r\n\r\nActually the javadoc rule of thumb doesn't seem strong enough, it's not really an issue of recursion and just about whether other methods may initialize a buffer so the general rule of thumb is to call no other methods unless they accept a `StringBuilder` as a parameter.\r\nhttps://github.com/line/armeria/blob/9061e241961c806951dd855be65fd871131a1835/core/src/main/java/com/linecorp/armeria/internal/common/util/TemporaryThreadLocals.java#L47", "bodyText": "This is less clear again. I think we have a convention of not calling any methods during thread local building because it's not clear whether that method may reinitialize the buffer or not. toString is of course a common culprit but not necessarily the only one.\nActually the javadoc rule of thumb doesn't seem strong enough, it's not really an issue of recursion and just about whether other methods may initialize a buffer so the general rule of thumb is to call no other methods unless they accept a StringBuilder as a parameter.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/internal/common/util/TemporaryThreadLocals.java\n    \n    \n         Line 47\n      in\n      9061e24\n    \n    \n    \n    \n\n        \n          \n            * <p>A rule of thumb is to use the thread-local variables provided by this class in a narrow scope", "bodyHTML": "<p dir=\"auto\">This is less clear again. I think we have a convention of not calling any methods during thread local building because it's not clear whether that method may reinitialize the buffer or not. toString is of course a common culprit but not necessarily the only one.</p>\n<p dir=\"auto\">Actually the javadoc rule of thumb doesn't seem strong enough, it's not really an issue of recursion and just about whether other methods may initialize a buffer so the general rule of thumb is to call no other methods unless they accept a <code>StringBuilder</code> as a parameter.<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/line/armeria/blob/9061e241961c806951dd855be65fd871131a1835/core/src/main/java/com/linecorp/armeria/internal/common/util/TemporaryThreadLocals.java#L47\">armeria/core/src/main/java/com/linecorp/armeria/internal/common/util/TemporaryThreadLocals.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 47\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/line/armeria/commit/9061e241961c806951dd855be65fd871131a1835\">9061e24</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L47\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"47\"></td>\n          <td id=\"LC47\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"> * &lt;<span class=\"pl-ent\">p</span>&gt;A rule of thumb is to use the thread-local variables provided by this class in a narrow scope</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "anuraaga", "createdAt": "2020-03-16T10:01:35Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -548,42 +556,47 @@ public RequestLogBuilder logBuilder() {\n \n     @Override\n     public String toString() {\n-        String strVal = this.strVal;\n         if (strVal != null) {\n             return strVal;\n         }\n+        return toStringSlow();\n \n-        final StringBuilder buf = new StringBuilder(107);\n-        buf.append(\"[C]\");\n+    }\n \n-        // Prepend the current channel information if available.\n+    private String toStringSlow() {\n+        // Prepare all properties required for building a string representation,", "originalCommit": "73ada8635d676a40452052a970bafaac79b6d4bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxNDM1NA==", "url": "https://github.com/line/armeria/pull/2591#discussion_r392914354", "bodyText": "Updated again, this time TemporaryThreadLocals as well.", "author": "trustin", "createdAt": "2020-03-16T10:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwMDk4Mw=="}], "type": "inlineReview"}, {"oid": "d8bbf10908c316af1ec3695d54007252b0986c33", "url": "https://github.com/line/armeria/commit/d8bbf10908c316af1ec3695d54007252b0986c33", "message": "Checkstyle", "committedDate": "2020-03-16T10:06:39Z", "type": "commit"}, {"oid": "1cf13ff8ed540d10ac822e8926164d2f30b648bb", "url": "https://github.com/line/armeria/commit/1cf13ff8ed540d10ac822e8926164d2f30b648bb", "message": "Update the comments again", "committedDate": "2020-03-16T10:16:42Z", "type": "commit"}, {"oid": "e4b99983bb3a713d90d7ed3f506cdad3401e1893", "url": "https://github.com/line/armeria/commit/e4b99983bb3a713d90d7ed3f506cdad3401e1893", "message": "More comment updates", "committedDate": "2020-03-16T10:26:32Z", "type": "commit"}]}