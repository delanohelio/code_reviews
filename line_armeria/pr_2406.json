{"pr_number": 2406, "pr_title": "Add more useful methods to `AsyncCloseable`", "pr_author": "trustin", "pr_createdAt": "2020-01-16T15:35:43Z", "pr_url": "https://github.com/line/armeria/pull/2406", "timeline": [{"oid": "9abd4883ca58ed507977cc2ef3f735626b0e158b", "url": "https://github.com/line/armeria/commit/9abd4883ca58ed507977cc2ef3f735626b0e158b", "message": "More non-blocking thread handling", "committedDate": "2020-01-16T17:46:40Z", "type": "forcePushed"}, {"oid": "673bfb71e7c77a7c919de01c442a15dba131d831", "url": "https://github.com/line/armeria/commit/673bfb71e7c77a7c919de01c442a15dba131d831", "message": "More non-blocking thread handling", "committedDate": "2020-01-16T17:47:09Z", "type": "forcePushed"}, {"oid": "0823879c0696c012ff216e5965536f5150e8bffa", "url": "https://github.com/line/armeria/commit/0823879c0696c012ff216e5965536f5150e8bffa", "message": "Take periodic thread dump to see what's going on", "committedDate": "2020-01-16T18:13:03Z", "type": "forcePushed"}, {"oid": "d29554451ccec32a290642051fed59064a3c6a40", "url": "https://github.com/line/armeria/commit/d29554451ccec32a290642051fed59064a3c6a40", "message": "Add more useful methods to `AsyncCloseable`\n\nMotivation:\n\nWhen a user closes something asynchronously, it is likely that he or she\nwants the following functionalities:\n\n- Getting notified when it is closed, sometimes even without closing it.\n- Using with `try`-with-resources.\n\nModifications:\n\n- Make `AsyncCloseable` extend `AutoCloseable`.\n- Add `AsyncCloseable.closeFuture()` which allows a user to get the\n  close future without closing.\n- Add `AsyncCloseableSupport` which helps a user implement `AsyncCloseable`.\n- Made the following classes implement `AsyncCloseable`:\n  - `ClientFactory`\n  - `HttpChannelPool`\n  - `Server`\n  - `StartStopSupport`\n- Stopped using `Mockito.spy()` in `StartStopSupportTest` because can't\n  test with spies.\n- Fixed a dead lock in `HealthCheckedEndpointGroupTest.delegateUpdateCandidatesWhileCreatingHealthCheckedEndpointGroup()`\n\nResult:\n\n- `ClientFactory` and `Server` can be closed asynchronously.\n- A user can do something when a `ClientFactory` closes, which will be\n  useful for https://github.com/line/armeria/issues/1084#issuecomment-572481160", "committedDate": "2020-01-16T18:46:13Z", "type": "forcePushed"}, {"oid": "3c86298a14675516912954ab871e7e5a0bc8096b", "url": "https://github.com/line/armeria/commit/3c86298a14675516912954ab871e7e5a0bc8096b", "message": "Add more useful methods to `AsyncCloseable`\n\nMotivation:\n\nWhen a user closes something asynchronously, it is likely that he or she\nwants the following functionalities:\n\n- Getting notified when it is closed, sometimes even without closing it.\n- Using with `try`-with-resources.\n\nModifications:\n\n- Make `AsyncCloseable` extend `AutoCloseable`.\n- Add `AsyncCloseable.closeFuture()` which allows a user to get the\n  close future without closing.\n- Add `AsyncCloseableSupport` which helps a user implement `AsyncCloseable`.\n- Made the following classes implement `AsyncCloseable`:\n  - `ClientFactory`\n  - `HttpChannelPool`\n  - `Server`\n  - `StartStopSupport`\n- Stopped using `Mockito.spy()` in `StartStopSupportTest` because can't\n  test with spies.\n- Fixed a dead lock in `HealthCheckedEndpointGroupTest.delegateUpdateCandidatesWhileCreatingHealthCheckedEndpointGroup()`\n\nResult:\n\n- `ClientFactory` and `Server` can be closed asynchronously.\n- A user can do something when a `ClientFactory` closes, which will be\n  useful for https://github.com/line/armeria/issues/1084#issuecomment-572481160", "committedDate": "2020-01-16T18:46:40Z", "type": "commit"}, {"oid": "3c86298a14675516912954ab871e7e5a0bc8096b", "url": "https://github.com/line/armeria/commit/3c86298a14675516912954ab871e7e5a0bc8096b", "message": "Add more useful methods to `AsyncCloseable`\n\nMotivation:\n\nWhen a user closes something asynchronously, it is likely that he or she\nwants the following functionalities:\n\n- Getting notified when it is closed, sometimes even without closing it.\n- Using with `try`-with-resources.\n\nModifications:\n\n- Make `AsyncCloseable` extend `AutoCloseable`.\n- Add `AsyncCloseable.closeFuture()` which allows a user to get the\n  close future without closing.\n- Add `AsyncCloseableSupport` which helps a user implement `AsyncCloseable`.\n- Made the following classes implement `AsyncCloseable`:\n  - `ClientFactory`\n  - `HttpChannelPool`\n  - `Server`\n  - `StartStopSupport`\n- Stopped using `Mockito.spy()` in `StartStopSupportTest` because can't\n  test with spies.\n- Fixed a dead lock in `HealthCheckedEndpointGroupTest.delegateUpdateCandidatesWhileCreatingHealthCheckedEndpointGroup()`\n\nResult:\n\n- `ClientFactory` and `Server` can be closed asynchronously.\n- A user can do something when a `ClientFactory` closes, which will be\n  useful for https://github.com/line/armeria/issues/1084#issuecomment-572481160", "committedDate": "2020-01-16T18:46:40Z", "type": "forcePushed"}, {"oid": "5329f4cb5216bf2a1e7eddc4a0b25e163b883ef8", "url": "https://github.com/line/armeria/commit/5329f4cb5216bf2a1e7eddc4a0b25e163b883ef8", "message": "Disallow starting after closing / Return unupdatable future", "committedDate": "2020-01-17T08:04:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg0MzA1Ng==", "url": "https://github.com/line/armeria/pull/2406#discussion_r367843056", "body": "~Shouldn't we use `CompletableFutures.succesfulAsList(...)` (log the cause using `defaultValueMapper`) because we have to wait for all futures to be complete?~ never mind this. \ud83d\ude05 ", "bodyText": "Shouldn't we use CompletableFutures.succesfulAsList(...) (log the cause using defaultValueMapper) because we have to wait for all futures to be complete? never mind this. \ud83d\ude05", "bodyHTML": "<p dir=\"auto\"><del>Shouldn't we use <code>CompletableFutures.succesfulAsList(...)</code> (log the cause using <code>defaultValueMapper</code>) because we have to wait for all futures to be complete?</del> never mind this. <g-emoji class=\"g-emoji\" alias=\"sweat_smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f605.png\">\ud83d\ude05</g-emoji></p>", "author": "minwoox", "createdAt": "2020-01-17T09:35:03Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java", "diffHunk": "@@ -96,12 +103,38 @@ static ClientFactoryBuilder builder() {\n      * Closes the default {@link ClientFactory}.\n      */\n     static void closeDefault() {\n-        LoggerFactory.getLogger(ClientFactory.class).debug(\n-                \"Closing the default {}\", ClientFactory.class.getSimpleName());\n-        try {\n-            DefaultClientFactory.DEFAULT.doClose();\n-        } finally {\n-            DefaultClientFactory.INSECURE.doClose();\n+        final Logger logger = LoggerFactory.getLogger(ClientFactory.class);\n+        logger.debug(\"Closing the default client factories\");\n+        final CompletableFuture<Void> closeFuture = CompletableFuture.allOf(", "originalCommit": "5329f4cb5216bf2a1e7eddc4a0b25e163b883ef8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg0NzAwNw==", "url": "https://github.com/line/armeria/pull/2406#discussion_r367847007", "body": "need to change the doc a little bit?\r\nUnlike {@link AutoCloseable}, -> In addition to the funcationality of closing synchronously with {@link AutoCloseable},", "bodyText": "need to change the doc a little bit?\nUnlike {@link AutoCloseable}, -> In addition to the funcationality of closing synchronously with {@link AutoCloseable},", "bodyHTML": "<p dir=\"auto\">need to change the doc a little bit?<br>\nUnlike {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> AutoCloseable}, -&gt; In addition to the funcationality of closing synchronously with {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> AutoCloseable},</p>", "author": "minwoox", "createdAt": "2020-01-17T09:43:43Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/AsyncCloseable.java", "diffHunk": "@@ -22,12 +22,24 @@\n  * method releases the resources asynchronously, returning the {@link CompletableFuture} which is completed", "originalCommit": "5329f4cb5216bf2a1e7eddc4a0b25e163b883ef8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg0OTQzNA==", "url": "https://github.com/line/armeria/pull/2406#discussion_r367849434", "body": "Not sure if we need this method, but if we do, how about making a static variable for this?", "bodyText": "Not sure if we need this method, but if we do, how about making a static variable for this?", "bodyHTML": "<p dir=\"auto\">Not sure if we need this method, but if we do, how about making a static variable for this?</p>", "author": "minwoox", "createdAt": "2020-01-17T09:48:51Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/AsyncCloseableSupport.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides support for implementing {@link AsyncCloseable}.\n+ */\n+public final class AsyncCloseableSupport implements AsyncCloseable {\n+\n+    private static final AtomicIntegerFieldUpdater<AsyncCloseableSupport> closingUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(AsyncCloseableSupport.class, \"closing\");\n+\n+    /**\n+     * Returns a new {@link AsyncCloseableSupport} that will be completed immediately on {@link #close()} or\n+     * {@link #closeAsync()}. This method is useful when you don't have any resources to release.\n+     * <pre>{@code\n+     * > public class MyClass {\n+     * >     final AsyncCloseableSupport closeableSupport = AsyncCloseableSupport.of();\n+     * >\n+     * >     public void doSomething() {\n+     * >         if (closeableSupport.isClosing()) {\n+     * >             throw new IllegalStateException(\"Closed already\");\n+     * >         }\n+     * >         ...\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeFuture() {\n+     * >         return closeableSupport.closeFuture();\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeAsync() {\n+     * >         return closeableSupport.closeAsync();\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> close() {\n+     * >         return closeableSupport.close();\n+     * >     }\n+     * > }\n+     * }</pre>\n+     */\n+    public static AsyncCloseableSupport of() {\n+        return of(f -> f.complete(null));\n+    }\n+\n+    /**\n+     * Returns a new {@link AsyncCloseableSupport} which calls the specified {@link Consumer} on\n+     * {@link #close()} or {@link #closeAsync()}.\n+     * <pre>{@code\n+     * > class MyClass implements AutoCloseable {\n+     * >     final AsyncCloseableSupport closeableSupport = AsyncCloseableSupport.of(f -> {\n+     * >         // Release resources here.\n+     * >         ...\n+     * >         f.complete(null);\n+     * >     });\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeFuture() {\n+     * >         return closeableSupport.closeFuture();\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeAsync() {\n+     * >         return closeableSupport.closeAsync();\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> close() {\n+     * >         return closeableSupport.close();\n+     * >     }\n+     * > }\n+     * }</pre>\n+     *\n+     * @param closeAction the {@link Consumer} which performs the task that release the resources and\n+     *                    completes the given {@link CompletableFuture}.\n+     */\n+    public static AsyncCloseableSupport of(Consumer<CompletableFuture<?>> closeAction) {\n+        return new AsyncCloseableSupport(requireNonNull(closeAction, \"closeAction\"));\n+    }\n+\n+    /**\n+     * Returns the {@link AsyncCloseableSupport} which has been closed already.\n+     */\n+    public static AsyncCloseableSupport closed() {", "originalCommit": "5329f4cb5216bf2a1e7eddc4a0b25e163b883ef8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1ceadfb714cc7d8cf9dee8e948edf16718c4fe69", "url": "https://github.com/line/armeria/commit/1ceadfb714cc7d8cf9dee8e948edf16718c4fe69", "message": "Address the comments from @minwoox", "committedDate": "2020-01-17T11:09:08Z", "type": "commit"}, {"oid": "e390778e8f731da65dfadc951e1b4c4c95c2faef", "url": "https://github.com/line/armeria/commit/e390778e8f731da65dfadc951e1b4c4c95c2faef", "message": "Make `EndpointGroup` extend `AsyncCloseable`", "committedDate": "2020-01-18T03:00:52Z", "type": "commit"}, {"oid": "e390778e8f731da65dfadc951e1b4c4c95c2faef", "url": "https://github.com/line/armeria/commit/e390778e8f731da65dfadc951e1b4c4c95c2faef", "message": "Make `EndpointGroup` extend `AsyncCloseable`", "committedDate": "2020-01-18T03:00:52Z", "type": "forcePushed"}, {"oid": "930446cc6fc74ac65bd62bea43a246c28b06ad6d", "url": "https://github.com/line/armeria/commit/930446cc6fc74ac65bd62bea43a246c28b06ad6d", "message": "UnupdatableCompletableFuture -> UnmodifiableFuture", "committedDate": "2020-01-18T03:35:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxODI0Mg==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368218242", "body": "```suggestion\r\n     * > public class MyClass implements AsyncCloseable {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * > public class MyClass {\n          \n          \n            \n                 * > public class MyClass implements AsyncCloseable {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyClass</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyClass</span> <span class=\"pl-k x x-first\">implements</span><span class=\"x\"> </span><span class=\"pl-e x\">AsyncCloseable</span><span class=\"x x-last\"> </span>{</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-01-18T09:49:04Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/AsyncCloseableSupport.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.Consumer;\n+\n+import com.linecorp.armeria.internal.UnmodifiableFuture;\n+\n+/**\n+ * Provides support for implementing {@link AsyncCloseable}.\n+ */\n+public final class AsyncCloseableSupport implements AsyncCloseable {\n+\n+    private static final AtomicIntegerFieldUpdater<AsyncCloseableSupport> closingUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(AsyncCloseableSupport.class, \"closing\");\n+\n+    private static final AsyncCloseableSupport CLOSED;\n+\n+    static {\n+        CLOSED = of();\n+        CLOSED.closeAsync();\n+    }\n+\n+    /**\n+     * Returns a new {@link AsyncCloseableSupport} that will be completed immediately on {@link #close()} or\n+     * {@link #closeAsync()}. This method is useful when you don't have any resources to release.\n+     * <pre>{@code\n+     * > public class MyClass {", "originalCommit": "930446cc6fc74ac65bd62bea43a246c28b06ad6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1NDQ4NA==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368354484", "body": "nit: Use singleton `EMPTY_FUTURES` like `HttpClientFactory`?", "bodyText": "nit: Use singleton EMPTY_FUTURES like HttpClientFactory?", "bodyHTML": "<p dir=\"auto\">nit: Use singleton <code>EMPTY_FUTURES</code> like <code>HttpClientFactory</code>?</p>", "author": "ikhoon", "createdAt": "2020-01-20T03:05:02Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java", "diffHunk": "@@ -162,20 +165,55 @@ public Object newClient(ClientBuilderParams params) {\n         return null;\n     }\n \n+    @Override\n+    public CompletableFuture<?> closeFuture() {\n+        return closeable.closeFuture();\n+    }\n+\n+    @Override\n+    public CompletableFuture<?> closeAsync() {\n+        return closeAsync(true);\n+    }\n+\n+    CompletableFuture<?> closeAsync(boolean checkDefault) {\n+        if (checkDefault && checkDefault()) {\n+            return closeFuture();\n+        }\n+        return closeable.closeAsync();\n+    }\n+\n+    private void closeAsync(CompletableFuture<?> future) {\n+        final CompletableFuture<?>[] delegateCloseFutures =\n+                clientFactoriesToClose.stream()\n+                                      .map(ClientFactory::closeAsync)\n+                                      .toArray(CompletableFuture[]::new);", "originalCommit": "930446cc6fc74ac65bd62bea43a246c28b06ad6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDA2MQ==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368400061", "bodyText": "Steam.toArray() does not accept it", "author": "trustin", "createdAt": "2020-01-20T07:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1NDQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQyNDk5NQ==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368424995", "bodyText": "Oops! Thanks.", "author": "ikhoon", "createdAt": "2020-01-20T08:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1NDQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1ODE1Nw==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368358157", "body": "nit: Don't we need to add the `breaking-change` label? \ud83e\uddd0 ", "bodyText": "nit: Don't we need to add the breaking-change label? \ud83e\uddd0", "bodyHTML": "<p dir=\"auto\">nit: Don't we need to add the <code>breaking-change</code> label? <g-emoji class=\"g-emoji\" alias=\"monocle_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f9d0.png\">\ud83e\uddd0</g-emoji></p>", "author": "ikhoon", "createdAt": "2020-01-20T03:29:03Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/AsyncCloseable.java", "diffHunk": "@@ -18,16 +18,28 @@\n import java.util.concurrent.CompletableFuture;\n \n /**\n- * An object that may hold resources until it is closed. Unlike {@link AutoCloseable}, the {@link #closeAsync()}\n- * method releases the resources asynchronously, returning the {@link CompletableFuture} which is completed\n- * after the resources are released.\n+ * An object that may hold resources until it is closed. In addition to {@link AutoCloseable#close()},\n+ * this interface provides {@link #closeAsync()} which releases the resources asynchronously, returning\n+ * a {@link CompletableFuture} which is completed after the resources are released.\n  */\n-@FunctionalInterface\n-public interface AsyncCloseable {\n+public interface AsyncCloseable extends AutoCloseable {", "originalCommit": "930446cc6fc74ac65bd62bea43a246c28b06ad6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDE4OA==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368400188", "bodyText": "Added the label.", "author": "trustin", "createdAt": "2020-01-20T07:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1ODE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2MDYwNQ==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368360605", "body": "nit\r\n```suggestion\r\n    public static AsyncCloseableSupport of(Consumer<? super CompletableFuture<?>> closeAction) {\r\n```", "bodyText": "nit\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static AsyncCloseableSupport of(Consumer<CompletableFuture<?>> closeAction) {\n          \n          \n            \n                public static AsyncCloseableSupport of(Consumer<? super CompletableFuture<?>> closeAction) {", "bodyHTML": "<p dir=\"auto\">nit</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"102\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AsyncCloseableSupport</span> of(<span class=\"pl-k\">Consumer&lt;<span class=\"pl-k\">CompletableFuture&lt;?&gt;</span>&gt;</span> closeAction) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"102\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">AsyncCloseableSupport</span> of(<span class=\"pl-k\">Consumer&lt;<span class=\"x x-first x-last\">? super </span><span class=\"pl-k\">CompletableFuture&lt;?&gt;</span>&gt;</span> closeAction) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-01-20T03:46:48Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/AsyncCloseableSupport.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.Consumer;\n+\n+import com.linecorp.armeria.internal.UnmodifiableFuture;\n+\n+/**\n+ * Provides support for implementing {@link AsyncCloseable}.\n+ */\n+public final class AsyncCloseableSupport implements AsyncCloseable {\n+\n+    private static final AtomicIntegerFieldUpdater<AsyncCloseableSupport> closingUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(AsyncCloseableSupport.class, \"closing\");\n+\n+    private static final AsyncCloseableSupport CLOSED;\n+\n+    static {\n+        CLOSED = of();\n+        CLOSED.closeAsync();\n+    }\n+\n+    /**\n+     * Returns a new {@link AsyncCloseableSupport} that will be completed immediately on {@link #close()} or\n+     * {@link #closeAsync()}. This method is useful when you don't have any resources to release.\n+     * <pre>{@code\n+     * > public class MyClass {\n+     * >     final AsyncCloseableSupport closeableSupport = AsyncCloseableSupport.of();\n+     * >\n+     * >     public void doSomething() {\n+     * >         if (closeableSupport.isClosing()) {\n+     * >             throw new IllegalStateException(\"Closed already\");\n+     * >         }\n+     * >         ...\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeFuture() {\n+     * >         return closeableSupport.closeFuture();\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeAsync() {\n+     * >         return closeableSupport.closeAsync();\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> close() {\n+     * >         return closeableSupport.close();\n+     * >     }\n+     * > }\n+     * }</pre>\n+     */\n+    public static AsyncCloseableSupport of() {\n+        return of(f -> f.complete(null));\n+    }\n+\n+    /**\n+     * Returns a new {@link AsyncCloseableSupport} which calls the specified {@link Consumer} on\n+     * {@link #close()} or {@link #closeAsync()}.\n+     * <pre>{@code\n+     * > class MyClass implements AutoCloseable {\n+     * >     final AsyncCloseableSupport closeableSupport = AsyncCloseableSupport.of(f -> {\n+     * >         // Release resources here.\n+     * >         ...\n+     * >         f.complete(null);\n+     * >     });\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeFuture() {\n+     * >         return closeableSupport.closeFuture();\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeAsync() {\n+     * >         return closeableSupport.closeAsync();\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> close() {\n+     * >         return closeableSupport.close();\n+     * >     }\n+     * > }\n+     * }</pre>\n+     *\n+     * @param closeAction the {@link Consumer} which performs the task that release the resources and\n+     *                    completes the given {@link CompletableFuture}.\n+     */\n+    public static AsyncCloseableSupport of(Consumer<CompletableFuture<?>> closeAction) {", "originalCommit": "930446cc6fc74ac65bd62bea43a246c28b06ad6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMDU2OQ==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368400569", "bodyText": "Thought about it, but ? super does not make sense here, because the consumer must call CompletableFuture.complete*(). A consumer that accepts a CompletionStage or Object cannot do that.", "author": "trustin", "createdAt": "2020-01-20T07:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2MDYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQyNDYwNg==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368424606", "bodyText": "Either way is fine. Sometimes contravariance makes me confused.\ud83e\udd2a\nBecause we can call CompletableFuture.complete*() even it is defined with Consumer<? super CompletableFuture<?>>. \ud83e\uddd0\n// Compiles\nConsumer<? super CompletableFuture<Integer>> consumerSuper = x -> x.complete(10);", "author": "ikhoon", "createdAt": "2020-01-20T08:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2MDYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzODg4NQ==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368438885", "bodyText": "Yeah it compiles, but what I'm saying is this doesn't make sense:\nConsumer<CompletionStage<?>> consumer = stage -> ...; // Can't call complete()\nAsyncCloseableSupport.of(consumer); // This doesn't make sense. Consumer must call .complete().", "author": "trustin", "createdAt": "2020-01-20T09:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2MDYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1MDExNQ==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368450115", "bodyText": "Consumer must call .complete().\n\nI understood. You may want to constrain consumer implementation. It makes sense to me. \ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-01-20T09:42:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2MDYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2MjM1OA==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368362358", "body": "nit: `requireNonNull(future)`?", "bodyText": "nit: requireNonNull(future)?", "bodyHTML": "<p dir=\"auto\">nit: <code>requireNonNull(future)</code>?</p>", "author": "ikhoon", "createdAt": "2020-01-20T04:00:07Z", "path": "core/src/main/java/com/linecorp/armeria/internal/UnmodifiableFuture.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A {@link CompletableFuture} which prevents the caller from completing it.\n+ */\n+public final class UnmodifiableFuture<T> extends CompletableFuture<T> {\n+\n+    private static final UnmodifiableFuture<?> NIL;\n+\n+    static {\n+        NIL = new UnmodifiableFuture<>();\n+        NIL.doComplete(null);\n+    }\n+\n+    public static <U> UnmodifiableFuture<U> completedFuture(@Nullable U value) {\n+        if (value == null) {\n+            @SuppressWarnings(\"unchecked\")\n+            final UnmodifiableFuture<U> cast = (UnmodifiableFuture<U>) NIL;\n+            return cast;\n+        }\n+\n+        final UnmodifiableFuture<U> future = new UnmodifiableFuture<>();\n+        future.doComplete(value);\n+        return future;\n+    }\n+\n+    public static <U> UnmodifiableFuture<U> exceptionallyCompletedFuture(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        final UnmodifiableFuture<U> future = new UnmodifiableFuture<>();\n+        future.doCompleteExceptionally(cause);\n+        return future;\n+    }\n+\n+    public static <U> UnmodifiableFuture<U> wrap(CompletableFuture<U> future) {", "originalCommit": "930446cc6fc74ac65bd62bea43a246c28b06ad6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4MTAxOA==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368381018", "body": "Can you add a comment why we don't use `join()` here? I think this is basically only called from a shutdown hook ever, so interruption probably doesn't matter so much but not sure.", "bodyText": "Can you add a comment why we don't use join() here? I think this is basically only called from a shutdown hook ever, so interruption probably doesn't matter so much but not sure.", "bodyHTML": "<p dir=\"auto\">Can you add a comment why we don't use <code>join()</code> here? I think this is basically only called from a shutdown hook ever, so interruption probably doesn't matter so much but not sure.</p>", "author": "anuraaga", "createdAt": "2020-01-20T06:05:48Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java", "diffHunk": "@@ -96,12 +103,38 @@ static ClientFactoryBuilder builder() {\n      * Closes the default {@link ClientFactory}.\n      */\n     static void closeDefault() {\n-        LoggerFactory.getLogger(ClientFactory.class).debug(\n-                \"Closing the default {}\", ClientFactory.class.getSimpleName());\n-        try {\n-            DefaultClientFactory.DEFAULT.doClose();\n-        } finally {\n-            DefaultClientFactory.INSECURE.doClose();\n+        final Logger logger = LoggerFactory.getLogger(ClientFactory.class);\n+        logger.debug(\"Closing the default client factories\");\n+        final CompletableFuture<Void> closeFuture = CompletableFuture.allOf(\n+                DefaultClientFactory.DEFAULT.closeAsync(false),\n+                DefaultClientFactory.INSECURE.closeAsync(false)).handle((unused1, cause) -> {\n+            if (cause == null) {\n+                logger.debug(\"Closed the default client factories\");\n+            } else {\n+                logger.warn(\"Failed to close the default client factories:\", Exceptions.peel(cause));\n+            }\n+            return null;\n+        });\n+\n+        if (!(Thread.currentThread() instanceof NonBlocking)) {\n+            boolean interrupted = false;\n+            try {\n+                for (;;) {", "originalCommit": "930446cc6fc74ac65bd62bea43a246c28b06ad6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMTAxMg==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368401012", "bodyText": "It's because it may not be invoked from a shutdown hook? Nothing stops a user from calling this method manually (or automatically via some framework).", "author": "trustin", "createdAt": "2020-01-20T07:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4MTAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4MTkxNg==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368381916", "body": "Having two similar names with same return type is making me scratch my head a little. It looks like future is a way of closing out of these three\r\n\r\n- (Implicitly implied) Blocking close\r\n- Async close\r\n- Future close\r\n\r\nI know this matches our general pattern, but shall we consider renaming all `fooFuture` to `whenFoo`? `ctx.log().whenComplete().thenAccept()` reads like English and seems quite nice to me.", "bodyText": "Having two similar names with same return type is making me scratch my head a little. It looks like future is a way of closing out of these three\n\n(Implicitly implied) Blocking close\nAsync close\nFuture close\n\nI know this matches our general pattern, but shall we consider renaming all fooFuture to whenFoo? ctx.log().whenComplete().thenAccept() reads like English and seems quite nice to me.", "bodyHTML": "<p dir=\"auto\">Having two similar names with same return type is making me scratch my head a little. It looks like future is a way of closing out of these three</p>\n<ul dir=\"auto\">\n<li>(Implicitly implied) Blocking close</li>\n<li>Async close</li>\n<li>Future close</li>\n</ul>\n<p dir=\"auto\">I know this matches our general pattern, but shall we consider renaming all <code>fooFuture</code> to <code>whenFoo</code>? <code>ctx.log().whenComplete().thenAccept()</code> reads like English and seems quite nice to me.</p>", "author": "anuraaga", "createdAt": "2020-01-20T06:10:33Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/AsyncCloseable.java", "diffHunk": "@@ -18,16 +18,28 @@\n import java.util.concurrent.CompletableFuture;\n \n /**\n- * An object that may hold resources until it is closed. Unlike {@link AutoCloseable}, the {@link #closeAsync()}\n- * method releases the resources asynchronously, returning the {@link CompletableFuture} which is completed\n- * after the resources are released.\n+ * An object that may hold resources until it is closed. In addition to {@link AutoCloseable#close()},\n+ * this interface provides {@link #closeAsync()} which releases the resources asynchronously, returning\n+ * a {@link CompletableFuture} which is completed after the resources are released.\n  */\n-@FunctionalInterface\n-public interface AsyncCloseable {\n+public interface AsyncCloseable extends AutoCloseable {\n     /**\n-     * Releases the resources held by this object asynchronously.\n+     * Returns the {@link CompletableFuture} which is completed after the resources are released. Note that\n+     * you must use {@link #close()} or {@link #closeAsync()} to release the resources actually. This method\n+     * merely returns the {@link CompletableFuture}.\n+     */\n+    CompletableFuture<?> closeFuture();", "originalCommit": "930446cc6fc74ac65bd62bea43a246c28b06ad6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMTIwOQ==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368401209", "bodyText": "That's a good idea. Let me rename. whenClosed(), then?", "author": "trustin", "createdAt": "2020-01-20T07:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4MTkxNg=="}], "type": "inlineReview"}, {"oid": "0c2834ed45ad98e4bcace17cacc4628611ba8b2c", "url": "https://github.com/line/armeria/commit/0c2834ed45ad98e4bcace17cacc4628611ba8b2c", "message": "Address the comments from @minwoox, @ikhoon, @anuraaga\n\n- Added `ListenableAsyncCloseable`", "committedDate": "2020-01-20T08:01:33Z", "type": "commit"}, {"oid": "05fc9441f8cf3f7d3a4aeef4e76fad36382bde3c", "url": "https://github.com/line/armeria/commit/05fc9441f8cf3f7d3a4aeef4e76fad36382bde3c", "message": "Made UnmodifiableFuture an EventLoopCheckingCompletableFuture", "committedDate": "2020-01-20T08:03:30Z", "type": "commit"}, {"oid": "493e868e28bcaa51861f0a166a03ec6eb28a0ba8", "url": "https://github.com/line/armeria/commit/493e868e28bcaa51861f0a166a03ec6eb28a0ba8", "message": "Make `UnmodifiableFuture` a part of the public API\n\n.. because it's so useful", "committedDate": "2020-01-20T08:13:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzMDMyMA==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368430320", "body": "nit: This one should be `ListenableAsyncCloseable` as well.", "bodyText": "nit: This one should be ListenableAsyncCloseable as well.", "bodyHTML": "<p dir=\"auto\">nit: This one should be <code>ListenableAsyncCloseable</code> as well.</p>", "author": "minwoox", "createdAt": "2020-01-20T09:00:58Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/AsyncCloseableSupport.java", "diffHunk": "@@ -80,27 +77,24 @@ public static AsyncCloseableSupport of() {\n      * Returns a new {@link AsyncCloseableSupport} which calls the specified {@link Consumer} on\n      * {@link #close()} or {@link #closeAsync()}.\n      * <pre>{@code\n-     * > class MyClass implements AutoCloseable {\n-     * >     final AsyncCloseableSupport closeableSupport = AsyncCloseableSupport.of(f -> {\n+     * > class MyClass implements AsyncCloseable {", "originalCommit": "0c2834ed45ad98e4bcace17cacc4628611ba8b2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzMTY1Mw==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368431653", "body": "nit: unmodifiable?", "bodyText": "nit: unmodifiable?", "bodyHTML": "<p dir=\"auto\">nit: unmodifiable?</p>", "author": "minwoox", "createdAt": "2020-01-20T09:03:51Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/AsyncCloseableSupport.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides support for implementing {@link AsyncCloseable} or {@link ListenableAsyncCloseable}.\n+ */\n+public final class AsyncCloseableSupport implements ListenableAsyncCloseable {\n+\n+    private static final AtomicIntegerFieldUpdater<AsyncCloseableSupport> closingUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(AsyncCloseableSupport.class, \"closing\");\n+\n+    private static final AsyncCloseableSupport CLOSED;\n+\n+    static {\n+        CLOSED = of();\n+        CLOSED.closeAsync();\n+    }\n+\n+    /**\n+     * Returns a new {@link AsyncCloseableSupport} that will be completed immediately on {@link #close()} or\n+     * {@link #closeAsync()}. This method is useful when you don't have any resources to release.\n+     * <pre>{@code\n+     * > public class MyClass implements ListenableAsyncCloseable {\n+     * >     final AsyncCloseableSupport closeable = AsyncCloseableSupport.of();\n+     * >\n+     * >     public void doSomething() {\n+     * >         if (closeable.isClosing()) {\n+     * >             throw new IllegalStateException(\"Closed already\");\n+     * >         }\n+     * >         ...\n+     * >     }\n+     * >\n+     * >     @Override\n+     * >     public boolean isClosing() { return closeable.isClosing(); }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> whenClosed() { return closeable.whenClosed(); }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeAsync() { return closeable.closeAsync(); }\n+     * >\n+     * >     @Override\n+     * >     public void close() { closeable.close(); }\n+     * > }\n+     * }</pre>\n+     */\n+    public static AsyncCloseableSupport of() {\n+        return of(f -> f.complete(null));\n+    }\n+\n+    /**\n+     * Returns a new {@link AsyncCloseableSupport} which calls the specified {@link Consumer} on\n+     * {@link #close()} or {@link #closeAsync()}.\n+     * <pre>{@code\n+     * > class MyClass implements AsyncCloseable {\n+     * >     final AsyncCloseableSupport closeable = AsyncCloseableSupport.of(f -> {\n+     * >         // Release resources here.\n+     * >         ...\n+     * >         f.complete(null);\n+     * >     });\n+     * >\n+     * >     @Override\n+     * >     public boolean isClosing() { return closeable.isClosing(); }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> whenClosed() { return closeable.whenClosed(); }\n+     * >\n+     * >     @Override\n+     * >     public CompletableFuture<?> closeAsync() { return closeable.closeAsync(); }\n+     * >\n+     * >     @Override\n+     * >     public void close() { closeable.close(); }\n+     * > }\n+     * }</pre>\n+     *\n+     * @param closeAction the {@link Consumer} which performs the task that release the resources and\n+     *                    completes the given {@link CompletableFuture}.\n+     */\n+    public static AsyncCloseableSupport of(Consumer<CompletableFuture<?>> closeAction) {\n+        return new AsyncCloseableSupport(requireNonNull(closeAction, \"closeAction\"));\n+    }\n+\n+    /**\n+     * Returns the {@link AsyncCloseableSupport} which has been closed already.\n+     */\n+    public static AsyncCloseableSupport closed() {\n+        return CLOSED;\n+    }\n+\n+    private final Consumer<CompletableFuture<?>> closeAction;\n+    private final CompletableFuture<?> closeFuture = new CompletableFuture<>();\n+    private final UnmodifiableFuture<?> unupdatableCloseFuture =", "originalCommit": "493e868e28bcaa51861f0a166a03ec6eb28a0ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MTA1Mw==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368441053", "body": "Shouldn't this return `CompletableFuture`?", "bodyText": "Shouldn't this return CompletableFuture?", "bodyHTML": "<p dir=\"auto\">Shouldn't this return <code>CompletableFuture</code>?</p>", "author": "minwoox", "createdAt": "2020-01-20T09:24:14Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/UnmodifiableFuture.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.internal.eventloop.EventLoopCheckingCompletableFuture;\n+\n+/**\n+ * A {@link CompletableFuture} which prevents the caller from completing it. An attempt to call any of\n+ * the following methods will trigger an {@link UnsupportedOperationException}:\n+ * <ul>\n+ *   <li>{@link #complete(Object)}</li>\n+ *   <li>{@link #completeExceptionally(Throwable)}</li>\n+ *   <li>{@link #obtrudeValue(Object)}</li>\n+ *   <li>{@link #obtrudeException(Throwable)}</li>\n+ * </ul>\n+ * Also, {@link #cancel(boolean)} will do nothing but returning whether cancelled or not.\n+ */\n+public final class UnmodifiableFuture<T> extends EventLoopCheckingCompletableFuture<T> {\n+\n+    private static final UnmodifiableFuture<?> NIL;\n+\n+    static {\n+        NIL = new UnmodifiableFuture<>();\n+        NIL.doComplete(null);\n+    }\n+\n+    /**\n+     * Returns an {@link UnmodifiableFuture} which has been completed with the specified {@code value}.\n+     */\n+    public static <U> UnmodifiableFuture<U> completedFuture(@Nullable U value) {", "originalCommit": "493e868e28bcaa51861f0a166a03ec6eb28a0ba8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1NDY2MA==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368454660", "bodyText": "On second thought, it's better to return UnmodifiableFuture. \ud83d\ude09 Sorry about the noise.", "author": "minwoox", "createdAt": "2020-01-20T09:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1NDkwOA==", "url": "https://github.com/line/armeria/pull/2406#discussion_r368454908", "bodyText": "I'm not sure. It's like ImmutableList.of() returns an ImmutableList instead of a List. We might add more public API to it later as well.", "author": "trustin", "createdAt": "2020-01-20T09:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MTA1Mw=="}], "type": "inlineReview"}, {"oid": "181f009dad3715e4f2d0707f8ea538c82bfb0150", "url": "https://github.com/line/armeria/commit/181f009dad3715e4f2d0707f8ea538c82bfb0150", "message": "Address the comments from @minwoox", "committedDate": "2020-01-20T09:43:21Z", "type": "commit"}, {"oid": "4b6dcdddb2abfb3b718c316f1ab77812d36cdd5e", "url": "https://github.com/line/armeria/commit/4b6dcdddb2abfb3b718c316f1ab77812d36cdd5e", "message": "Make `EventLoopCheckingCompletableFuture` public", "committedDate": "2020-01-20T09:50:42Z", "type": "commit"}, {"oid": "9108a377c3f348ff40c1415b598e27af89bb57b1", "url": "https://github.com/line/armeria/commit/9108a377c3f348ff40c1415b598e27af89bb57b1", "message": "Merge branch 'master' into richer_async_closeable", "committedDate": "2020-01-20T09:53:02Z", "type": "commit"}, {"oid": "0c72cb5f7c7c723033e154a72bc7c3b799301475", "url": "https://github.com/line/armeria/commit/0c72cb5f7c7c723033e154a72bc7c3b799301475", "message": "Checkstyle", "committedDate": "2020-01-20T09:55:27Z", "type": "commit"}, {"oid": "eb4f648d32829a29716a84a1dae8fb55d10a2dc0", "url": "https://github.com/line/armeria/commit/eb4f648d32829a29716a84a1dae8fb55d10a2dc0", "message": "More Checkstyle", "committedDate": "2020-01-20T09:57:26Z", "type": "commit"}, {"oid": "55b2d8deec88ad8d10a349ec7a5cb57aedf1ba9a", "url": "https://github.com/line/armeria/commit/55b2d8deec88ad8d10a349ec7a5cb57aedf1ba9a", "message": "EventLoopCheckingCompletableFuture -> EventLoopCheckingFuture", "committedDate": "2020-01-20T10:02:56Z", "type": "commit"}, {"oid": "2b13ea8b0c094299bca39576abf706688fd168ff", "url": "https://github.com/line/armeria/commit/2b13ea8b0c094299bca39576abf706688fd168ff", "message": "Remove `Completable` from all `CompletableFuture` subclasses for brevity, as suggested by @minwoox", "committedDate": "2020-01-20T13:05:02Z", "type": "commit"}, {"oid": "d96d6e692f70787a9b08a477df5a30d6e3c4a3ab", "url": "https://github.com/line/armeria/commit/d96d6e692f70787a9b08a477df5a30d6e3c4a3ab", "message": "2020", "committedDate": "2020-01-20T13:10:11Z", "type": "commit"}, {"oid": "3ca3ead6e300a2234ff70a2f16bdb4cae0e5e804", "url": "https://github.com/line/armeria/commit/3ca3ead6e300a2234ff70a2f16bdb4cae0e5e804", "message": "No public", "committedDate": "2020-01-20T13:12:59Z", "type": "commit"}]}