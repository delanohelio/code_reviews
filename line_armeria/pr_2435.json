{"pr_number": 2435, "pr_title": "Add HttpStatus.isSuccess() and other boolean getters", "pr_author": "mercanil", "pr_createdAt": "2020-01-31T12:08:06Z", "pr_url": "https://github.com/line/armeria/pull/2435", "timeline": [{"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c", "url": "https://github.com/line/armeria/commit/1b67f987f6f974784c6e9288e2af5edfa04b7a2c", "message": "Add HttpStatus.isSuccess line #2434\n\nThis changeset added shortcut methods to HttpStatus class", "committedDate": "2020-01-31T12:07:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373452535", "body": "As I mentioned in the issue I don't find a lot of use in specifying client vs server, or convenience for information, which is so rare. But this is non-blocking and happy with what others think", "bodyText": "As I mentioned in the issue I don't find a lot of use in specifying client vs server, or convenience for information, which is so rare. But this is non-blocking and happy with what others think", "bodyHTML": "<p dir=\"auto\">As I mentioned in the issue I don't find a lot of use in specifying client vs server, or convenience for information, which is so rare. But this is non-blocking and happy with what others think</p>", "author": "anuraaga", "createdAt": "2020-01-31T12:17:54Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a success, with a status code of 2XX. */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX. */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX. */\n+    public boolean isClientError() {", "originalCommit": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1OTY1Ng==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373459656", "bodyText": "I think it's OK to have all of is{Error,ServerError,ClientError}.", "author": "trustin", "createdAt": "2020-01-31T12:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNTUyNw==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373525527", "bodyText": "@mercanil I think you omitted the isError method. It could be\nboolean isError() {\n\treturn isClientError() || isServerError();\n}", "author": "ikhoon", "createdAt": "2020-01-31T15:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUzMjc2Nw==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373532767", "bodyText": "Thank you for suggestion @ikhoon but being more specific would be better. I prefer to keep as is.", "author": "mercanil", "createdAt": "2020-01-31T15:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTgxMw==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373755813", "bodyText": "I'd prefer to have isError() for convenience. \ud83d\ude4f", "author": "trustin", "createdAt": "2020-02-01T03:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwNDExNg==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373804116", "bodyText": "added isError() method. Thanks for advice.", "author": "mercanil", "createdAt": "2020-02-01T21:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1NDI4NA==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373454284", "body": "Could you use multiple line comments?\r\n```java\r\n/**\r\n * Returns whether ...\r\n */\r\n```", "bodyText": "Could you use multiple line comments?\n/**\n * Returns whether ...\n */", "bodyHTML": "<p dir=\"auto\">Could you use multiple line comments?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/**\n * Returns whether ...\n */\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * Returns whether ...</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span></pre></div>", "author": "ikhoon", "createdAt": "2020-01-31T12:22:58Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */", "originalCommit": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1OTc5NA==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373459794", "body": "`isInformational`", "bodyText": "isInformational", "bodyHTML": "<p dir=\"auto\"><code>isInformational</code></p>", "author": "trustin", "createdAt": "2020-01-31T12:39:17Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {", "originalCommit": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "528c98180926aa15bbb6cf8199e1212d31fd55a7", "url": "https://github.com/line/armeria/commit/528c98180926aa15bbb6cf8199e1212d31fd55a7", "message": "Add HttpStatus.isSuccess line #2434\n\nThis changeset added shortcut methods to HttpStatus class", "committedDate": "2020-01-31T13:20:53Z", "type": "commit"}, {"oid": "a3ebdf8d608e38c03fba20b6fa1b3c3592a1575c", "url": "https://github.com/line/armeria/commit/a3ebdf8d608e38c03fba20b6fa1b3c3592a1575c", "message": "Merge remote-tracking branch 'origin/master'\n\n# Conflicts:\n#\tcore/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "committedDate": "2020-01-31T13:21:50Z", "type": "commit"}, {"oid": "cd5a6a6a531f7b9ab7376f63cd7ff4265685b36c", "url": "https://github.com/line/armeria/commit/cd5a6a6a531f7b9ab7376f63cd7ff4265685b36c", "message": "Add HttpStatus.isSuccess line #2434\nThis changeset added shortcut methods to HttpStatus class", "committedDate": "2020-02-01T21:42:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMjY0Nw==", "url": "https://github.com/line/armeria/pull/2435#discussion_r373822647", "body": "```suggestion\r\n        return isClientError() || isServerError();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return isClientError() || isClientError();\n          \n          \n            \n                    return isClientError() || isServerError();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> isClientError() <span class=\"pl-k\">||</span> <span class=\"x x-first x-last\">isClientError</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> isClientError() <span class=\"pl-k\">||</span> <span class=\"x x-first x-last\">isServerError</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-02-02T06:25:59Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,48 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /**\n+     * Returns whether the {@link HttpStatus} is an information, with a status code of 1XX.\n+     */\n+    public boolean isInformational() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /**\n+     * Returns whether the {@link HttpStatus} is a success, with a status code of 2XX.\n+     */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /**\n+     * Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX.\n+     */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /**\n+     *  Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX.\n+     */\n+    public boolean isClientError() {\n+        return codeClass().equals(HttpStatusClass.CLIENT_ERROR);\n+    }\n+\n+    /**\n+     * Returns whether the {@link HttpStatus} is a server error, with a status code of 5XX.\n+     */\n+    public boolean isServerError() {\n+        return codeClass().equals(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Returns whether the {@link HttpStatus} is an error\n+     */\n+    public boolean isError(){\n+        return isClientError() || isClientError();", "originalCommit": "cd5a6a6a531f7b9ab7376f63cd7ff4265685b36c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "574423d2a0fe2aec2d5063c682a8c46eb2fe3086", "url": "https://github.com/line/armeria/commit/574423d2a0fe2aec2d5063c682a8c46eb2fe3086", "message": "Add HttpStatus.isSuccess line #2434\n\nThis changeset added shortcut methods to HttpStatus class", "committedDate": "2020-02-03T08:51:00Z", "type": "commit"}, {"oid": "f34bec6a02989b717cc7a5a9713677a0e581b297", "url": "https://github.com/line/armeria/commit/f34bec6a02989b717cc7a5a9713677a0e581b297", "message": "Fix checkstyle", "committedDate": "2020-02-04T05:49:59Z", "type": "commit"}, {"oid": "41fb3437f632c9bb96985d7300df3919b3bb4112", "url": "https://github.com/line/armeria/commit/41fb3437f632c9bb96985d7300df3919b3bb4112", "message": "Add HttpStatus.isSuccess line #2434\n\nThis changeset added shortcut methods to HttpStatus class", "committedDate": "2020-02-05T11:39:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjYyNQ==", "url": "https://github.com/line/armeria/pull/2435#discussion_r375232625", "body": "I don't think you really need a real server to test the behavior of the methods you added. How about removing this `ServerExtension` and just adding some simple tests like the following?\r\n\r\n```java\r\n@Test\r\nvoid isSuccess() {\r\n    assertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();\r\n    assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\r\n    assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\r\n    assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\r\n}\r\n\r\n...\r\n```", "bodyText": "I don't think you really need a real server to test the behavior of the methods you added. How about removing this ServerExtension and just adding some simple tests like the following?\n@Test\nvoid isSuccess() {\n    assertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();\n    assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n    assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n    assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n}\n\n...", "bodyHTML": "<p dir=\"auto\">I don't think you really need a real server to test the behavior of the methods you added. How about removing this <code>ServerExtension</code> and just adding some simple tests like the following?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test\nvoid isSuccess() {\n    assertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();\n    assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n    assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n    assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n}\n\n...\"><pre><span class=\"pl-k\">@Test</span>\n<span class=\"pl-k\">void</span> isSuccess() {\n    assertThat(<span class=\"pl-smi\">HttpStatus</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-c1\">199</span>)<span class=\"pl-k\">.</span>isSuccess())<span class=\"pl-k\">.</span>isFalse();\n    assertThat(<span class=\"pl-smi\">HttpStatus</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-c1\">200</span>)<span class=\"pl-k\">.</span>isSuccess())<span class=\"pl-k\">.</span>isTrue();\n    assertThat(<span class=\"pl-smi\">HttpStatus</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-c1\">299</span>)<span class=\"pl-k\">.</span>isSuccess())<span class=\"pl-k\">.</span>isTrue();\n    assertThat(<span class=\"pl-smi\">HttpStatus</span><span class=\"pl-k\">.</span>valueOf(<span class=\"pl-c1\">300</span>)<span class=\"pl-k\">.</span>isSuccess())<span class=\"pl-k\">.</span>isFalse();\n}\n\n<span class=\"pl-c1\">...</span></pre></div>", "author": "trustin", "createdAt": "2020-02-05T12:42:21Z", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+class HttpStatusTest {\n+\n+    @RegisterExtension\n+    public static final ServerExtension server = new ServerExtension() {", "originalCommit": "41fb3437f632c9bb96985d7300df3919b3bb4112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2MTIzMQ==", "url": "https://github.com/line/armeria/pull/2435#discussion_r375261231", "bodyText": "Hi Trustin. Simple and better. I will update my PR. Thanks for suggestion", "author": "mercanil", "createdAt": "2020-02-05T13:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjYyNQ=="}], "type": "inlineReview"}, {"oid": "9df367acf9c0be3470deae71d6d843e9728cee90", "url": "https://github.com/line/armeria/commit/9df367acf9c0be3470deae71d6d843e9728cee90", "message": "Add HttpStatus.isSuccess line #2434\n\nThis changeset added shortcut methods to HttpStatus class", "committedDate": "2020-02-05T13:53:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjM0NQ==", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626345", "body": "This may be more efficient:\r\n\r\n    return HttpStatusClass.INFORMATIONAL.contains(code);", "bodyText": "This may be more efficient:\nreturn HttpStatusClass.INFORMATIONAL.contains(code);", "bodyHTML": "<p dir=\"auto\">This may be more efficient:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return HttpStatusClass.INFORMATIONAL.contains(code);\"><pre><code>return HttpStatusClass.INFORMATIONAL.contains(code);\n</code></pre></div>", "author": "trustin", "createdAt": "2020-02-06T03:37:17Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +492,48 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /**\n+     * Returns whether the {@link HttpStatus} is an information, with a status code of 1XX.\n+     */\n+    public boolean isInformational() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);", "originalCommit": "9df367acf9c0be3470deae71d6d843e9728cee90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjU2OQ==", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626569", "body": "Could also add the following to ensure off-by-one cases:\r\n\r\n    assertThat(HttpStatus.valueOf(99).isInformational()).isFalse();", "bodyText": "Could also add the following to ensure off-by-one cases:\nassertThat(HttpStatus.valueOf(99).isInformational()).isFalse();", "bodyHTML": "<p dir=\"auto\">Could also add the following to ensure off-by-one cases:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(HttpStatus.valueOf(99).isInformational()).isFalse();\"><pre><code>assertThat(HttpStatus.valueOf(99).isInformational()).isFalse();\n</code></pre></div>", "author": "trustin", "createdAt": "2020-02-06T03:38:37Z", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();", "originalCommit": "9df367acf9c0be3470deae71d6d843e9728cee90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjYwNQ==", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626605", "body": "Could also add the following to ensure off-by-one cases:\r\n\r\n    assertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();", "bodyText": "Could also add the following to ensure off-by-one cases:\nassertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();", "bodyHTML": "<p dir=\"auto\">Could also add the following to ensure off-by-one cases:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();\"><pre><code>assertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();\n</code></pre></div>", "author": "trustin", "createdAt": "2020-02-06T03:38:55Z", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(199).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(200).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isInformational()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsSuccessIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isSuccess()).isFalse();", "originalCommit": "9df367acf9c0be3470deae71d6d843e9728cee90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjY2NA==", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626664", "body": "Could also add the following to ensure off-by-one cases:\r\n\r\n    assertThat(HttpStatus.valueOf(299).isRedirection()).isFalse();", "bodyText": "Could also add the following to ensure off-by-one cases:\nassertThat(HttpStatus.valueOf(299).isRedirection()).isFalse();", "bodyHTML": "<p dir=\"auto\">Could also add the following to ensure off-by-one cases:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(HttpStatus.valueOf(299).isRedirection()).isFalse();\"><pre><code>assertThat(HttpStatus.valueOf(299).isRedirection()).isFalse();\n</code></pre></div>", "author": "trustin", "createdAt": "2020-02-06T03:39:12Z", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(199).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(200).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isInformational()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsSuccessIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isSuccess()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsRedirectionIfStatusCode3XX() {\n+        assertThat(HttpStatus.valueOf(100).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isRedirection()).isFalse();", "originalCommit": "9df367acf9c0be3470deae71d6d843e9728cee90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjcyMw==", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626723", "body": "Could also add the following to ensure off-by-one cases:\r\n\r\n    assertThat(HttpStatus.valueOf(399).isClientError()).isFalse();\r\n    assertThat(HttpStatus.valueOf(500).isClientError()).isFalse();\r\n\r\nAnd please use `isClientError()` for this tese case.", "bodyText": "Could also add the following to ensure off-by-one cases:\nassertThat(HttpStatus.valueOf(399).isClientError()).isFalse();\nassertThat(HttpStatus.valueOf(500).isClientError()).isFalse();\n\nAnd please use isClientError() for this tese case.", "bodyHTML": "<p dir=\"auto\">Could also add the following to ensure off-by-one cases:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(HttpStatus.valueOf(399).isClientError()).isFalse();\nassertThat(HttpStatus.valueOf(500).isClientError()).isFalse();\"><pre><code>assertThat(HttpStatus.valueOf(399).isClientError()).isFalse();\nassertThat(HttpStatus.valueOf(500).isClientError()).isFalse();\n</code></pre></div>\n<p dir=\"auto\">And please use <code>isClientError()</code> for this tese case.</p>", "author": "trustin", "createdAt": "2020-02-06T03:39:40Z", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(199).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(200).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isInformational()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsSuccessIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isSuccess()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsRedirectionIfStatusCode3XX() {\n+        assertThat(HttpStatus.valueOf(100).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isRedirection()).isTrue();\n+        assertThat(HttpStatus.valueOf(399).isRedirection()).isTrue();\n+        assertThat(HttpStatus.valueOf(400).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isRedirection()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsErrorIfStatusCode4XX() {\n+        assertThat(HttpStatus.valueOf(100).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isError()).isFalse();", "originalCommit": "9df367acf9c0be3470deae71d6d843e9728cee90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjkzOA==", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626938", "body": "Ditto:\r\n\r\n- please handle off-by-one errors\r\n- please use `isServerError()`", "bodyText": "Ditto:\n\nplease handle off-by-one errors\nplease use isServerError()", "bodyHTML": "<p dir=\"auto\">Ditto:</p>\n<ul dir=\"auto\">\n<li>please handle off-by-one errors</li>\n<li>please use <code>isServerError()</code></li>\n</ul>", "author": "trustin", "createdAt": "2020-02-06T03:40:52Z", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(199).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(200).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isInformational()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsSuccessIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isSuccess()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsRedirectionIfStatusCode3XX() {\n+        assertThat(HttpStatus.valueOf(100).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isRedirection()).isTrue();\n+        assertThat(HttpStatus.valueOf(399).isRedirection()).isTrue();\n+        assertThat(HttpStatus.valueOf(400).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isRedirection()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsErrorIfStatusCode4XX() {\n+        assertThat(HttpStatus.valueOf(100).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isError()).isTrue();\n+        assertThat(HttpStatus.valueOf(499).isError()).isTrue();\n+    }\n+\n+    @Test\n+    void statusIsErrorIfStatusCode5XX() {\n+        assertThat(HttpStatus.valueOf(100).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isError()).isTrue();\n+        assertThat(HttpStatus.valueOf(599).isError()).isTrue();", "originalCommit": "9df367acf9c0be3470deae71d6d843e9728cee90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}