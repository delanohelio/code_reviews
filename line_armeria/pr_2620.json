{"pr_number": 2620, "pr_title": "Fix the ResponseHeaders log to contain additional headers", "pr_author": "minwoox", "pr_createdAt": "2020-03-24T06:52:10Z", "pr_url": "https://github.com/line/armeria/pull/2620", "timeline": [{"oid": "0bb5ba6996351bcaca79b09c634650d2fb77554d", "url": "https://github.com/line/armeria/commit/0bb5ba6996351bcaca79b09c634650d2fb77554d", "message": "Fix the ResponseHeaders log to contain additional headers\nMotivation:\nAfter #2372 merged, the additional headers are not contained to the `ResponseHeaders` of the log.\nWe should fix it to contain.\n\nModifications:\n- Split `HttpObjectEncoder.writeHeaders()` to `writeHeaders()` and `writeTrailers()`.\n- Interface `HttpObjectEncoder`.\n  - Add `ClientHttpObjectEncoder` and `ServerHttpObjectEncoder`.\n- Fix a bug where an exception is not wrapped with `UnprocessedRequestException` when fails to write a `RequestHeaders`.\n- Fix a bug where additional headers is added to informational headers.\n- Fix a bug where `ResponseHeaders` log does not contain additional headers.\n- Fix a bug where response trailers is not logged\n- Refactor `HttpResponseSubscriber` and `HttpObjectEncoder`\n\nResult:\n- You now can see the additional headers in `RequestLog`.\n\nTo-do:\n- Introduce `CompositeHeaders` to reduce performance overhead.", "committedDate": "2020-03-24T06:51:13Z", "type": "commit"}, {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4", "url": "https://github.com/line/armeria/commit/ab018403bfef8b9a350e30872a848b4a332c5bb4", "message": "Change to close channel", "committedDate": "2020-03-24T07:06:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjQxMA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397402410", "body": "Can we remove this empty check? :thinking: \r\nIt seems `additionalHeaders` is always not empty here.", "bodyText": "Can we remove this empty check? \ud83e\udd14\nIt seems additionalHeaders is always not empty here.", "bodyHTML": "<p dir=\"auto\">Can we remove this empty check? <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji><br>\nIt seems <code>additionalHeaders</code> is always not empty here.</p>", "author": "jyblue", "createdAt": "2020-03-24T19:19:02Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {", "originalCommit": "ab018403bfef8b9a350e30872a848b4a332c5bb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDgwMA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397544800", "bodyText": "Yes, we can. \ud83d\ude04 Thanks!", "author": "minwoox", "createdAt": "2020-03-25T00:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjczNw==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397402737", "body": "ditto : Can we remove this empty check? :thinking: \r\nIt seems `additionalHeaders` is always not empty here.", "bodyText": "ditto : Can we remove this empty check? \ud83e\udd14\nIt seems additionalHeaders is always not empty here.", "bodyHTML": "<p dir=\"auto\">ditto : Can we remove this empty check? <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji><br>\nIt seems <code>additionalHeaders</code> is always not empty here.</p>", "author": "jyblue", "createdAt": "2020-03-24T19:19:34Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_RESPONSE_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static RequestHeaders composeRequestHeaders(RequestHeaders headers,\n+                                                       HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final RequestHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {", "originalCommit": "ab018403bfef8b9a350e30872a848b4a332c5bb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTgxNQ==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397409815", "body": "Question :\r\n`an` is correct? This is so confusing to me :thinking: ", "bodyText": "Question :\nan is correct? This is so confusing to me \ud83e\udd14", "bodyHTML": "<p dir=\"auto\">Question :<br>\n<code>an</code> is correct? This is so confusing to me <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji></p>", "author": "jyblue", "createdAt": "2020-03-24T19:32:22Z", "path": "core/src/main/java/com/linecorp/armeria/internal/client/ClientHttpObjectEncoder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.ClosedSessionException;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.internal.common.HttpObjectEncoder;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+\n+/**\n+ * Converts an {@link HttpObject} into a protocol-specific object and writes it into a {@link Channel}.\n+ */\n+public interface ClientHttpObjectEncoder extends HttpObjectEncoder {\n+\n+    /**\n+     * Writes an {@link RequestHeaders}.", "originalCommit": "ab018403bfef8b9a350e30872a848b4a332c5bb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDcwOQ==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397544709", "bodyText": "It's a. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-03-25T00:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjY4NQ==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397422685", "body": "what about `additionalHeaders` to `additionalTrailers` :thinking: ", "bodyText": "what about additionalHeaders to additionalTrailers \ud83e\udd14", "bodyHTML": "<p dir=\"auto\">what about <code>additionalHeaders</code> to <code>additionalTrailers</code> <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji></p>", "author": "jyblue", "createdAt": "2020-03-24T19:55:57Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_RESPONSE_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static RequestHeaders composeRequestHeaders(RequestHeaders headers,\n+                                                       HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final RequestHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_REQUEST_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static HttpHeaders composeTrailers(HttpHeaders headers, HttpHeaders additionalHeaders) {", "originalCommit": "ab018403bfef8b9a350e30872a848b4a332c5bb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDg3Nw==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397544877", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-25T00:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjY4NQ=="}], "type": "inlineReview"}, {"oid": "e6cac696de3cbb107b5a3d30d5a1e770416ac633", "url": "https://github.com/line/armeria/commit/e6cac696de3cbb107b5a3d30d5a1e770416ac633", "message": "Address comments by @jyblue", "committedDate": "2020-03-25T00:39:27Z", "type": "commit"}, {"oid": "efd7738b673baac68d7f790c5d592e14660238d2", "url": "https://github.com/line/armeria/commit/efd7738b673baac68d7f790c5d592e14660238d2", "message": "Fix test", "committedDate": "2020-03-25T01:05:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NjQwNA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397556404", "body": "nit: `// TODO(minwoox): Replace this class with CompositeHeaders.`", "bodyText": "nit: // TODO(minwoox): Replace this class with CompositeHeaders.", "bodyHTML": "<p dir=\"auto\">nit: <code>// TODO(minwoox): Replace this class with CompositeHeaders.</code></p>", "author": "trustin", "createdAt": "2020-03-25T01:20:08Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.", "originalCommit": "efd7738b673baac68d7f790c5d592e14660238d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NjUxMA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397556510", "body": "compose -> merge?", "bodyText": "compose -> merge?", "bodyHTML": "<p dir=\"auto\">compose -&gt; merge?</p>", "author": "trustin", "createdAt": "2020-03-25T01:20:32Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,", "originalCommit": "efd7738b673baac68d7f790c5d592e14660238d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MDM3Ng==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397570376", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-25T02:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NjUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzIzMA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397557230", "body": "Probably better reusing a single instance for the case where `endOfStream` is `false`?", "bodyText": "Probably better reusing a single instance for the case where endOfStream is false?", "bodyHTML": "<p dir=\"auto\">Probably better reusing a single instance for the case where <code>endOfStream</code> is <code>false</code>?</p>", "author": "trustin", "createdAt": "2020-03-25T01:23:20Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -135,20 +144,33 @@ public void onNext(HttpObject o) {\n \n                 final ResponseHeaders headers = (ResponseHeaders) o;\n                 final HttpStatus status = headers.status();\n+                final ResponseHeaders composedHeaders;\n                 if (status.isInformational()) {\n-                    // Needs non-informational headers.\n-                    break;\n-                }\n-\n-                if (req.method() == HttpMethod.HEAD) {\n-                    endOfStream = true;\n-                } else if (status.isContentAlwaysEmpty()) {\n-                    state = State.NEEDS_TRAILERS;\n+                    if (endOfStream) {\n+                        failAndRespond(new IllegalStateException(\n+                                \"published an informational headers whose endOfStream is true: \" + o +\n+                                \" (service: \" + service() + ')'));\n+                        return;\n+                    }\n+                    composedHeaders = headers;\n                 } else {\n-                    state = State.NEEDS_DATA_OR_TRAILERS;\n+                    if (req.method() == HttpMethod.HEAD) {\n+                        endOfStream = true;\n+                    } else if (status.isContentAlwaysEmpty()) {\n+                        state = State.NEEDS_TRAILERS;\n+                    } else {\n+                        state = State.NEEDS_DATA_OR_TRAILERS;\n+                    }\n+                    if (endOfStream) {\n+                        setDone();\n+                    }\n+                    composedHeaders = composeResponseHeaders(headers, reqCtx.additionalResponseHeaders());\n+                    logBuilder().responseHeaders(composedHeaders);\n                 }\n \n-                logBuilder().responseHeaders(headers);\n+                responseEncoder.writeHeaders(req.id(), req.streamId(), composedHeaders, endOfStream,\n+                                             reqCtx.additionalResponseTrailers().isEmpty())\n+                               .addListener(new WriteHeadersFutureListener(endOfStream));", "originalCommit": "efd7738b673baac68d7f790c5d592e14660238d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzMwNw==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397557307", "bodyText": "(.. because a user can send many informational headers)", "author": "trustin", "createdAt": "2020-03-25T01:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MDMxOA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397570318", "bodyText": "Yeah, I think it's better too. Also, added for streaming data.", "author": "minwoox", "createdAt": "2020-03-25T02:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1ODM0OA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397558348", "body": "Would it be possible to piggy-bag this into `addCallbackAndFlush()`, so that we keep the number of listeners minimal?", "bodyText": "Would it be possible to piggy-bag this into addCallbackAndFlush(), so that we keep the number of listeners minimal?", "bodyHTML": "<p dir=\"auto\">Would it be possible to piggy-bag this into <code>addCallbackAndFlush()</code>, so that we keep the number of listeners minimal?</p>", "author": "trustin", "createdAt": "2020-03-25T01:27:28Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -389,9 +371,28 @@ private void failAndRespond(Throwable cause, AggregatedHttpResponse res, Http2Er\n         addCallbackAndFlush(cause, oldState, future);\n     }\n \n+    private void maybeLogFirstResponseBytesTransferred(ChannelFuture future) {\n+        future.addListener((ChannelFuture f) -> {\n+            if (f.isSuccess()) {\n+                maybeLogFirstResponseBytesTransferred();\n+            }\n+        });", "originalCommit": "efd7738b673baac68d7f790c5d592e14660238d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NzM1MA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397567350", "bodyText": "Ah that's a good idea. I didn't put this logic in addCallbackAndFlush because this shouldn't be called after writing reset.\nBut, if it's resetting that means that loggedResponseHeadersFirstBytesTransferred is already set, so I didn't have to worry about it.", "author": "minwoox", "createdAt": "2020-03-25T02:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1ODM0OA=="}], "type": "inlineReview"}, {"oid": "431599894a79742cdd45a8ba776d2261e0781c2d", "url": "https://github.com/line/armeria/commit/431599894a79742cdd45a8ba776d2261e0781c2d", "message": "Address comments by @trustin", "committedDate": "2020-03-25T02:12:00Z", "type": "commit"}, {"oid": "eede2ebd48086a8644d99e4fa63e41667caf989b", "url": "https://github.com/line/armeria/commit/eede2ebd48086a8644d99e4fa63e41667caf989b", "message": "Fix checkstyle", "committedDate": "2020-03-25T02:19:24Z", "type": "commit"}, {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57", "url": "https://github.com/line/armeria/commit/8fd2a759f61efd3f82aaaff1910049b0f0f56c57", "message": "Fix reset", "committedDate": "2020-03-25T02:42:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NzQxOA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397577418", "body": "nit\r\n```suggestion\r\n        final RequestHeaders merged = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());\r\n```", "bodyText": "nit\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final RequestHeaders composed = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());\n          \n          \n            \n                    final RequestHeaders merged = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());", "bodyHTML": "<p dir=\"auto\">nit</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">RequestHeaders</span> <span class=\"x x-first x-last\">composed</span> <span class=\"pl-k\">=</span> mergeRequestHeaders(firstHeaders, ctx<span class=\"pl-k\">.</span>additionalRequestHeaders());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">RequestHeaders</span> <span class=\"x x-first x-last\">merged</span> <span class=\"pl-k\">=</span> mergeRequestHeaders(firstHeaders, ctx<span class=\"pl-k\">.</span>additionalRequestHeaders());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-03-25T02:40:13Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -192,16 +158,16 @@ private void writeFirstHeader(HttpSession session) {\n \n         final SessionProtocol protocol = session.protocol();\n         assert protocol != null;\n-        logBuilder.requestHeaders(firstHeaders);\n-\n         if (request.isEmpty()) {\n             state = State.DONE;\n         } else {\n             state = State.NEEDS_DATA_OR_TRAILERS;\n         }\n-        final ChannelFuture future = encoder.writeHeaders(id, streamId(), firstHeaders, request.isEmpty(),\n-                                                          ctx.additionalRequestHeaders(), HttpHeaders.of());\n-        future.addListener(this);\n+\n+        final RequestHeaders composed = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());", "originalCommit": "eede2ebd48086a8644d99e4fa63e41667caf989b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MDE3Mw==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397590173", "body": "Couldn't we use `loggedRequestFirstBytesTransferred` for `UnprocessedRequestException`?", "bodyText": "Couldn't we use loggedRequestFirstBytesTransferred for UnprocessedRequestException?", "bodyHTML": "<p dir=\"auto\">Couldn't we use <code>loggedRequestFirstBytesTransferred</code> for <code>UnprocessedRequestException</code>?</p>", "author": "ikhoon", "createdAt": "2020-03-25T03:28:53Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -370,4 +334,68 @@ private boolean cancelTimeout() {\n         this.timeoutFuture = null;\n         return timeoutFuture.cancel(false);\n     }\n+\n+    private WriteFutureListener writeFutureListener(boolean isRequestHeadersFuture) {\n+        if (!isRequestHeadersFuture) {\n+            // Reuse in case sending streaming requests.\n+            if (cachedWriteFutureListener == null) {\n+                cachedWriteFutureListener = new WriteFutureListener(false);\n+            }\n+            return cachedWriteFutureListener;\n+        }\n+        return new WriteFutureListener(true);\n+    }\n+\n+    private class WriteFutureListener implements ChannelFutureListener {\n+\n+        private final boolean isRequestHeadersFuture;\n+\n+        WriteFutureListener(boolean isRequestHeadersFuture) {\n+            this.isRequestHeadersFuture = isRequestHeadersFuture;\n+        }\n+\n+        @Override\n+        public void operationComplete(ChannelFuture future) throws Exception {\n+            // If a message has been sent out, cancel the timeout for starting a request.\n+            cancelTimeout();\n+\n+            try (SafeCloseable ignored = RequestContextUtil.pop()) {\n+                if (future.isSuccess()) {\n+                    // The first write is always the first headers, so log that we finished our first transfer\n+                    // over the wire.\n+                    if (!loggedRequestFirstBytesTransferred) {\n+                        logBuilder.requestFirstBytesTransferred();\n+                        loggedRequestFirstBytesTransferred = true;\n+                    }\n+\n+                    if (state == State.DONE) {\n+                        logBuilder.endRequest();\n+                        // Successfully sent the request; schedule the response timeout.\n+                        assert responseWrapper != null;\n+                        responseWrapper.initTimeout();\n+                    }\n+\n+                    // Request more messages regardless whether the state is DONE. It makes the producer have\n+                    // a chance to produce the last call such as 'onComplete' and 'onError' when there are\n+                    // no more messages it can produce.\n+                    if (!isSubscriptionCompleted) {\n+                        assert subscription != null;\n+                        subscription.request(1);\n+                    }\n+                    return;\n+                }\n+\n+                if (isRequestHeadersFuture) {", "originalCommit": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMTg5Ng==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397621896", "bodyText": "Oops, thanks for finding this.", "author": "minwoox", "createdAt": "2020-03-25T05:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MDE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDE5Mg==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397594192", "body": "nit:\r\n```suggestion\r\n                final ResponseHeaders mergedHeaders;\r\n```", "bodyText": "nit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            final ResponseHeaders composedHeaders;\n          \n          \n            \n                            final ResponseHeaders mergedHeaders;", "bodyHTML": "<p dir=\"auto\">nit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ResponseHeaders</span> <span class=\"x x-first x-last\">composedHeaders</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ResponseHeaders</span> <span class=\"x x-first x-last\">mergedHeaders</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-03-25T03:46:17Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -135,20 +150,33 @@ public void onNext(HttpObject o) {\n \n                 final ResponseHeaders headers = (ResponseHeaders) o;\n                 final HttpStatus status = headers.status();\n+                final ResponseHeaders composedHeaders;", "originalCommit": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDM4OA==", "url": "https://github.com/line/armeria/pull/2620#discussion_r397594388", "body": "nit:\r\n```suggestion\r\n                    final HttpHeaders merged = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());\r\n```", "bodyText": "nit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                final HttpHeaders composed = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());\n          \n          \n            \n                                final HttpHeaders merged = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());", "bodyHTML": "<p dir=\"auto\">nit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">HttpHeaders</span> <span class=\"x x-first x-last\">composed</span> <span class=\"pl-k\">=</span> mergeTrailers(trailers, reqCtx<span class=\"pl-k\">.</span>additionalResponseTrailers());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">HttpHeaders</span> <span class=\"x x-first x-last\">merged</span> <span class=\"pl-k\">=</span> mergeTrailers(trailers, reqCtx<span class=\"pl-k\">.</span>additionalResponseTrailers());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-03-25T03:47:10Z", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -169,14 +197,29 @@ public void onNext(HttpObject o) {\n                                 \" (service: \" + service() + ')'));\n                         return;\n                     }\n-                    logBuilder().responseTrailers(trailers);\n-\n-                    // Trailers always end the stream even if not explicitly set.\n-                    endOfStream = true;\n-                } else if (endOfStream) { // Last DATA frame\n-                    if (!additionalTrailers.isEmpty()) {\n-                        write(o, false);\n-                        o = HttpHeaders.of();\n+                    setDone();\n+                    final HttpHeaders composed = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());", "originalCommit": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cb7635705379bbb5ece1f3f5905076b7f7d90bda", "url": "https://github.com/line/armeria/commit/cb7635705379bbb5ece1f3f5905076b7f7d90bda", "message": "Address comments by @ikhoon", "committedDate": "2020-03-25T05:50:37Z", "type": "commit"}]}