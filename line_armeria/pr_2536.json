{"pr_number": 2536, "pr_title": "Update Brave from 5.9.5 to 5.10.1", "pr_author": "codefromthecrypt", "pr_createdAt": "2020-02-26T11:16:35Z", "pr_url": "https://github.com/line/armeria/pull/2536", "timeline": [{"oid": "39792112c2ed187d0329f3874cb71c1ed5092eec", "url": "https://github.com/line/armeria/commit/39792112c2ed187d0329f3874cb71c1ed5092eec", "message": "Moves to new Brave parser types", "committedDate": "2020-02-26T11:15:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyOTE0Nw==", "url": "https://github.com/line/armeria/pull/2536#discussion_r384429147", "body": "when serving the request from the response side. I'm thinking we ignore header mutations..", "bodyText": "when serving the request from the response side. I'm thinking we ignore header mutations..", "bodyHTML": "<p dir=\"auto\">when serving the request from the response side. I'm thinking we ignore header mutations..</p>", "author": "codefromthecrypt", "createdAt": "2020-02-26T11:17:21Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/ClientRequestContextAdapter.java", "diffHunk": "@@ -89,7 +89,9 @@ public String header(String name) {\n \n         @Override\n         public void header(String name, String value) {\n-            headersBuilder.set(name, value);\n+            if (headersBuilder != null) {", "originalCommit": "39792112c2ed187d0329f3874cb71c1ed5092eec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDUyMg==", "url": "https://github.com/line/armeria/pull/2536#discussion_r384850522", "bodyText": "we could before, just htis will make that more explicit openzipkin/brave#1103", "author": "codefromthecrypt", "createdAt": "2020-02-27T00:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyOTE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyOTQwNQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r384429405", "body": "is being lazy here (and in server) over-optimization from POV of armeria?", "bodyText": "is being lazy here (and in server) over-optimization from POV of armeria?", "bodyHTML": "<p dir=\"auto\">is being lazy here (and in server) over-optimization from POV of armeria?</p>", "author": "codefromthecrypt", "createdAt": "2020-02-26T11:17:50Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/ClientRequestContextAdapter.java", "diffHunk": "@@ -113,6 +115,7 @@ public long startTimestamp() {\n     @SuppressWarnings(\"ClassNameSameAsAncestorName\")\n     private static final class HttpClientResponse extends brave.http.HttpClientResponse {\n         private final RequestLog log;\n+        private brave.http.HttpClientRequest request;", "originalCommit": "39792112c2ed187d0329f3874cb71c1ed5092eec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNjU0NA==", "url": "https://github.com/line/armeria/pull/2536#discussion_r384926544", "bodyText": "Think it's good.", "author": "anuraaga", "createdAt": "2020-02-27T05:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyOTQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNjUwOQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r384926509", "body": "I was sort of expecting this to accept `HttpClientRequest` as a parameter and passed in when initializing here\r\n\r\nhttps://github.com/line/armeria/blob/master/brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java#L162\r\n\r\nI guess it does mean mutations would be present but is it a problem either way?\r\n\r\nBut anyways, reexposing, with the lazy instantiation, seems fine to me too.", "bodyText": "I was sort of expecting this to accept HttpClientRequest as a parameter and passed in when initializing here\nhttps://github.com/line/armeria/blob/master/brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java#L162\nI guess it does mean mutations would be present but is it a problem either way?\nBut anyways, reexposing, with the lazy instantiation, seems fine to me too.", "bodyHTML": "<p dir=\"auto\">I was sort of expecting this to accept <code>HttpClientRequest</code> as a parameter and passed in when initializing here</p>\n<p dir=\"auto\"><a href=\"https://github.com/line/armeria/blob/master/brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java#L162\">https://github.com/line/armeria/blob/master/brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java#L162</a></p>\n<p dir=\"auto\">I guess it does mean mutations would be present but is it a problem either way?</p>\n<p dir=\"auto\">But anyways, reexposing, with the lazy instantiation, seems fine to me too.</p>", "author": "anuraaga", "createdAt": "2020-02-27T05:56:42Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/ClientRequestContextAdapter.java", "diffHunk": "@@ -113,6 +115,7 @@ public long startTimestamp() {\n     @SuppressWarnings(\"ClassNameSameAsAncestorName\")\n     private static final class HttpClientResponse extends brave.http.HttpClientResponse {\n         private final RequestLog log;\n+        private brave.http.HttpClientRequest request;\n \n         HttpClientResponse(RequestLog log) {", "originalCommit": "39792112c2ed187d0329f3874cb71c1ed5092eec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTk3OQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r384931979", "bodyText": "this is part of me not knowing the lifecycle. I'm not sure if the instance could be different by the time we reach response time. is that something we cam know?", "author": "codefromthecrypt", "createdAt": "2020-02-27T06:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNjUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjYzMA==", "url": "https://github.com/line/armeria/pull/2536#discussion_r384932630", "bodyText": "Instance is the same. In other words, the only difference between passing the originally created HttpClientRequest here or recreating it here is the value of headersBuilder, everything else should be exactly the same since it's the same ClientRequestContext.", "author": "anuraaga", "createdAt": "2020-02-27T06:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNjUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDU3NQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r384934575", "bodyText": "ok in that case, let's reuse it. thanks!", "author": "codefromthecrypt", "createdAt": "2020-02-27T06:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNjUwOQ=="}], "type": "inlineReview"}, {"oid": "62f20f696adce1ae0d2163aef14125588738efc3", "url": "https://github.com/line/armeria/commit/62f20f696adce1ae0d2163aef14125588738efc3", "message": "finishes things", "committedDate": "2020-02-27T11:01:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1Nzk3OA==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385057978", "body": "Unrelated to this PR so just food for thought / another PR but just noticed it - since we pass the span to the handler, do we need to push the context (e.g. mount the scope)?", "bodyText": "Unrelated to this PR so just food for thought / another PR but just noticed it - since we pass the span to the handler, do we need to push the context (e.g. mount the scope)?", "bodyHTML": "<p dir=\"auto\">Unrelated to this PR so just food for thought / another PR but just noticed it - since we pass the span to the handler, do we need to push the context (e.g. mount the scope)?</p>", "author": "anuraaga", "createdAt": "2020-02-27T11:04:53Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java", "diffHunk": "@@ -159,9 +160,9 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex\n                 }\n             }\n \n-            final HttpClientResponse response = ClientRequestContextAdapter.asHttpClientResponse(log);\n+            final HttpClientResponse response = ClientRequestContextAdapter.asHttpClientResponse(log, request);\n             try (SafeCloseable ignored = ctx.push()) {\n-                handler.handleReceive(response, log.responseCause(), span);\n+                handler.handleReceive(response, response.error(), span);", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMDg4NQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385430885", "bodyText": "brave 5.11 doesn't mount the scope anymore intentionally, to improve performance (as scope handlers dangling off a thread local can cost a bit). instead the parsers get an arg for the context. the old implementation of the parser will indeed scope, but as handleSend/handleReceive are callbacks (iotw cul-de-sacs, not interceptors which would surround user code), we don't have any use case for scoping anymore internally.", "author": "codefromthecrypt", "createdAt": "2020-02-27T23:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1Nzk3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTkzMw==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385469933", "bodyText": "Cool - yeah I think that means we can remove the request context push around the callbacks too that is there to allow brave to scope off the threadlocal but if it's not doing that it should be unnecessary.", "author": "anuraaga", "createdAt": "2020-02-28T01:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1Nzk3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5MDQxMw==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385490413", "bodyText": "great idea", "author": "codefromthecrypt", "createdAt": "2020-02-28T03:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1Nzk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1ODU3Ng==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385058576", "body": "I think we can revert the headers related changes now that we just serve the same request object", "bodyText": "I think we can revert the headers related changes now that we just serve the same request object", "bodyHTML": "<p dir=\"auto\">I think we can revert the headers related changes now that we just serve the same request object</p>", "author": "anuraaga", "createdAt": "2020-02-27T11:06:04Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/ClientRequestContextAdapter.java", "diffHunk": "@@ -44,9 +44,9 @@\n     @SuppressWarnings(\"ClassNameSameAsAncestorName\")\n     private static final class HttpClientRequest extends brave.http.HttpClientRequest {\n         private final ClientRequestContext ctx;\n-        private final RequestHeadersBuilder headersBuilder;\n+        @Nullable private final RequestHeadersBuilder headersBuilder;", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMDA1Mg==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385430052", "bodyText": "agreed", "author": "codefromthecrypt", "createdAt": "2020-02-27T23:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1ODU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1ODg0OQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385058849", "body": "Ditto", "bodyText": "Ditto", "bodyHTML": "<p dir=\"auto\">Ditto</p>", "author": "anuraaga", "createdAt": "2020-02-27T11:06:46Z", "path": "brave/src/main/java/com/linecorp/armeria/server/brave/BraveService.java", "diffHunk": "@@ -98,9 +100,9 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc\n                 // If the client timed-out the request, we will have never sent any response data at all.\n             }\n \n-            final HttpServerResponse response = ServiceRequestContextAdapter.asHttpServerResponse(log);\n+            final HttpServerResponse response = ServiceRequestContextAdapter.asHttpServerResponse(log, request);\n             try (SafeCloseable ignored = ctx.push()) {", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1OTU1OQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385059559", "body": "I guess neither 3 nor 1 mean much to me. We probably should add a comment explaining what this is actually asserting semantically.", "bodyText": "I guess neither 3 nor 1 mean much to me. We probably should add a comment explaining what this is actually asserting semantically.", "bodyHTML": "<p dir=\"auto\">I guess neither 3 nor 1 mean much to me. We probably should add a comment explaining what this is actually asserting semantically.</p>", "author": "anuraaga", "createdAt": "2020-02-27T11:08:23Z", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceTest.java", "diffHunk": "@@ -148,7 +148,7 @@ void scopeDecorator() throws Exception {\n \n         // check service name\n         assertThat(span.localServiceName()).isEqualTo(TEST_SERVICE);\n-        assertThat(scopeDecoratorCallingCounter.get()).isEqualTo(3);\n+        assertThat(scopeDecoratorCallingCounter.get()).isEqualTo(1);", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2Mzg2Nw==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385063867", "bodyText": "Or we can remove if it's too strongly tied to implementation details to be helpful.", "author": "anuraaga", "createdAt": "2020-02-27T11:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1OTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyOTkyNg==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385429926", "bodyText": "yeah good point.. the reduction by two is not scoping during parsing :) I'll make a comment that the presence of 1 is for downstream handlers. usually I check some interceptor can read the context vs counting, though in this case counting was a good thing as it shows the better performance we should expect", "author": "codefromthecrypt", "createdAt": "2020-02-27T23:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1OTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5NjE1Mg==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385496152", "bodyText": "Maybe .isGreaterThanZero() then?", "author": "trustin", "createdAt": "2020-02-28T03:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1OTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5ODg5NA==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385498894", "bodyText": "added isOne as incrementing would be a bug unless intentional", "author": "codefromthecrypt", "createdAt": "2020-02-28T04:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1OTU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MjA5OA==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385072098", "body": "nit: `span` could be renamed back to `customizer` or `spanCustomizer`?", "bodyText": "nit: span could be renamed back to customizer or spanCustomizer?", "bodyHTML": "<p dir=\"auto\">nit: <code>span</code> could be renamed back to <code>customizer</code> or <code>spanCustomizer</code>?</p>", "author": "trustin", "createdAt": "2020-02-27T11:36:00Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/ArmeriaHttpClientParser.java", "diffHunk": "@@ -53,8 +55,10 @@ static ArmeriaHttpClientParser get() {\n     private ArmeriaHttpClientParser() {}\n \n     @Override\n-    public <T> void request(HttpAdapter<T, ?> rawAdapter, T req, SpanCustomizer customizer) {\n-        super.request(rawAdapter, req, customizer);\n+    public void parse(brave.http.HttpRequest request, TraceContext context, SpanCustomizer span) {", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTQwMA==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385081400", "bodyText": "Personally good with span, Span, MutableSpan, and SpanCustomizer are basically the same concept.", "author": "anuraaga", "createdAt": "2020-02-27T11:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MjA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5NTg3OQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385495879", "bodyText": "OK. No need to rename, then. :-)", "author": "trustin", "createdAt": "2020-02-28T03:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MjA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5NzAyOQ==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385497029", "bodyText": "yeah we fixed the name to span upstream. naming parameter based on type was laborious", "author": "codefromthecrypt", "createdAt": "2020-02-28T03:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MjA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MjQwNg==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385072406", "body": "nit: `res` -> `unwrapped`?", "bodyText": "nit: res -> unwrapped?", "bodyHTML": "<p dir=\"auto\">nit: <code>res</code> -&gt; <code>unwrapped</code>?</p>", "author": "trustin", "createdAt": "2020-02-27T11:36:39Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/ArmeriaHttpClientParser.java", "diffHunk": "@@ -66,39 +70,41 @@ private ArmeriaHttpClientParser() {}\n             return;\n         }\n \n-        customizer.tag(SpanTags.TAG_HTTP_HOST, httpReq.authority())\n-                  .tag(SpanTags.TAG_HTTP_URL, httpReq.uri().toString());\n+        span.tag(SpanTags.TAG_HTTP_HOST, httpReq.authority())\n+            .tag(SpanTags.TAG_HTTP_URL, httpReq.uri().toString());\n     }\n \n     @Override\n-    public <T> void response(HttpAdapter<?, T> rawAdapter, T res, Throwable error, SpanCustomizer customizer) {\n-        super.response(rawAdapter, res, error, customizer);\n+    public void parse(HttpResponse response, TraceContext context, SpanCustomizer span) {\n+        HttpResponseParser.DEFAULT.parse(response, context, span);\n+\n+        final Object res = response.unwrap();", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MzU5MA==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385073590", "body": "nit: `req` -> `unwrapped`", "bodyText": "nit: req -> unwrapped", "bodyHTML": "<p dir=\"auto\">nit: <code>req</code> -&gt; <code>unwrapped</code></p>", "author": "trustin", "createdAt": "2020-02-27T11:39:19Z", "path": "brave/src/main/java/com/linecorp/armeria/server/brave/ArmeriaHttpServerParser.java", "diffHunk": "@@ -51,23 +53,27 @@ private ArmeriaHttpServerParser() {\n     }\n \n     @Override\n-    public <T> void request(HttpAdapter<T, ?> rawAdapter, T req, SpanCustomizer customizer) {\n-        super.request(rawAdapter, req, customizer);\n+    public void parse(brave.http.HttpRequest request, TraceContext context, SpanCustomizer span) {\n+        HttpRequestParser.DEFAULT.parse(request, context, span);\n+\n+        final Object req = request.unwrap();", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MzcwMw==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385073703", "body": "nit: `span` -> `customizer` or `spanCustomizer`", "bodyText": "nit: span -> customizer or spanCustomizer", "bodyHTML": "<p dir=\"auto\">nit: <code>span</code> -&gt; <code>customizer</code> or <code>spanCustomizer</code></p>", "author": "trustin", "createdAt": "2020-02-27T11:39:33Z", "path": "brave/src/main/java/com/linecorp/armeria/server/brave/ArmeriaHttpServerParser.java", "diffHunk": "@@ -51,23 +53,27 @@ private ArmeriaHttpServerParser() {\n     }\n \n     @Override\n-    public <T> void request(HttpAdapter<T, ?> rawAdapter, T req, SpanCustomizer customizer) {\n-        super.request(rawAdapter, req, customizer);\n+    public void parse(brave.http.HttpRequest request, TraceContext context, SpanCustomizer span) {", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5NzUyOA==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385497528", "bodyText": "choosing not to unless you think this is very important", "author": "codefromthecrypt", "createdAt": "2020-02-28T04:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MzcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5ODc5Mw==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385498793", "bodyText": "ditto on opting out, but if you really really want it to I can change it", "author": "codefromthecrypt", "createdAt": "2020-02-28T04:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MzcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3Mzk1Mw==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385073953", "body": "`request` -> `braveReq` to avoid confusion?", "bodyText": "request -> braveReq to avoid confusion?", "bodyHTML": "<p dir=\"auto\"><code>request</code> -&gt; <code>braveReq</code> to avoid confusion?</p>", "author": "trustin", "createdAt": "2020-02-27T11:40:09Z", "path": "brave/src/main/java/com/linecorp/armeria/server/brave/BraveService.java", "diffHunk": "@@ -75,7 +76,8 @@ private BraveService(HttpService delegate, HttpTracing httpTracing) {\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n-        final Span span = handler.handleReceive(ServiceRequestContextAdapter.asHttpServerRequest(ctx));\n+        final HttpServerRequest request = ServiceRequestContextAdapter.asHttpServerRequest(ctx);", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3NDM3Mw==", "url": "https://github.com/line/armeria/pull/2536#discussion_r385074373", "body": "nit: `request` -> `braveReq` and `response` -> `braveRes` to avoid confusion", "bodyText": "nit: request -> braveReq and response -> braveRes to avoid confusion", "bodyHTML": "<p dir=\"auto\">nit: <code>request</code> -&gt; <code>braveReq</code> and <code>response</code> -&gt; <code>braveRes</code> to avoid confusion</p>", "author": "trustin", "createdAt": "2020-02-27T11:41:04Z", "path": "brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java", "diffHunk": "@@ -159,9 +160,9 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex\n                 }\n             }\n \n-            final HttpClientResponse response = ClientRequestContextAdapter.asHttpClientResponse(log);\n+            final HttpClientResponse response = ClientRequestContextAdapter.asHttpClientResponse(log, request);", "originalCommit": "62f20f696adce1ae0d2163aef14125588738efc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92e0a1459c9158617152b9ad59d42e2e3027dd57", "url": "https://github.com/line/armeria/commit/92e0a1459c9158617152b9ad59d42e2e3027dd57", "message": "latest", "committedDate": "2020-02-28T03:49:25Z", "type": "commit"}, {"oid": "f5f20e75cb6658090628a5ae71f71ae3caff5154", "url": "https://github.com/line/armeria/commit/f5f20e75cb6658090628a5ae71f71ae3caff5154", "message": "review", "committedDate": "2020-02-28T04:06:25Z", "type": "commit"}]}