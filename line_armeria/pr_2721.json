{"pr_number": 2721, "pr_title": "Regex based sanitizer implementation for logging client and service", "pr_author": "amitvc", "pr_createdAt": "2020-05-18T03:54:24Z", "pr_url": "https://github.com/line/armeria/pull/2721", "timeline": [{"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "url": "https://github.com/line/armeria/commit/4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "message": "Regex based sanitizer implementation", "committedDate": "2020-05-18T03:47:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyODMyMA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427128320", "body": "I guess we don't really need this type. Could you remove this class and just call `toString()` in `RegexBasedSanitizer`?", "bodyText": "I guess we don't really need this type. Could you remove this class and just call toString() in RegexBasedSanitizer?", "bodyHTML": "<p dir=\"auto\">I guess we don't really need this type. Could you remove this class and just call <code>toString()</code> in <code>RegexBasedSanitizer</code>?</p>", "author": "trustin", "createdAt": "2020-05-19T08:38:20Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+import java.util.function.Function;\n+\n+/**\n+ * Base class.\n+ */\n+public class AbstractSanitizerBase implements Function<Object, Object> {", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDU5Mw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720593", "bodyText": "I removed it.", "author": "amitvc", "createdAt": "2020-05-20T03:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyODMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTA4NA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427129084", "body": "- `final`\r\n- `Function<Object, String>` ?", "bodyText": "final\nFunction<Object, String> ?", "bodyHTML": "<ul dir=\"auto\">\n<li><code>final</code></li>\n<li><code>Function&lt;Object, String&gt;</code> ?</li>\n</ul>", "author": "trustin", "createdAt": "2020-05-19T08:39:32Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDU1Nw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720557", "bodyText": "Made adjustments.", "author": "amitvc", "createdAt": "2020-05-20T03:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTg2OA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427129868", "body": "If `List<Pattern>` is the only parameter, how about removing this and adding `RegexBasedSanitizer.of(Pattern...)` and `of(Iterable<Pattern>)` ?", "bodyText": "If List<Pattern> is the only parameter, how about removing this and adding RegexBasedSanitizer.of(Pattern...) and of(Iterable<Pattern>) ?", "bodyHTML": "<p dir=\"auto\">If <code>List&lt;Pattern&gt;</code> is the only parameter, how about removing this and adding <code>RegexBasedSanitizer.of(Pattern...)</code> and <code>of(Iterable&lt;Pattern&gt;)</code> ?</p>", "author": "trustin", "createdAt": "2020-05-19T08:40:42Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public Object apply(Object input) {\n+        String rawData = (String)super.apply(input);\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Builder facilitates building regexsanitizer.\n+     */\n+    public static class RegexBasedSanitizerBuilder {", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDQ2Mg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720462", "bodyText": "Good point. done.", "author": "amitvc", "createdAt": "2020-05-20T03:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMDc0OQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427130749", "body": "Sorry, but we use AssertJ for assertions. Could you convert to AssertJ? e.g.\r\n\r\n    assertThat(ctx.logBuilder().toString()).contains(\"trustin\");\r\n    ...\r\n    assertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");", "bodyText": "Sorry, but we use AssertJ for assertions. Could you convert to AssertJ? e.g.\nassertThat(ctx.logBuilder().toString()).contains(\"trustin\");\n...\nassertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");", "bodyHTML": "<p dir=\"auto\">Sorry, but we use AssertJ for assertions. Could you convert to AssertJ? e.g.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(ctx.logBuilder().toString()).contains(&quot;trustin&quot;);\n...\nassertThat(ctx.logBuilder().toString()).doesNotContain(&quot;trustin&quot;);\"><pre><code>assertThat(ctx.logBuilder().toString()).contains(\"trustin\");\n...\nassertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");\n</code></pre></div>", "author": "trustin", "createdAt": "2020-05-19T08:42:06Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,59 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                              .pattern(\"trustin\")\n+                                                              .pattern(\"com\")\n+                                                              .build())\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDM5Nw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720397", "bodyText": "Done", "author": "amitvc", "createdAt": "2020-05-20T03:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMDc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTAwMg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427131002", "body": "Ditto - AssertJ", "bodyText": "Ditto - AssertJ", "bodyHTML": "<p dir=\"auto\">Ditto - AssertJ</p>", "author": "trustin", "createdAt": "2020-05-19T08:42:30Z", "path": "core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java", "diffHunk": "@@ -349,6 +352,64 @@ void sanitizeExceptionIntoString() throws Exception {\n                             same(sanitizedResponseCause));\n     }\n \n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(req);\n+        ctx.logBuilder().endResponse(new Exception(\"not sanitized\"));\n+        final Logger logger = LoggingTestUtil.newMockLogger(ctx, capturedCause);\n+        when(logger.isInfoEnabled()).thenReturn(true);\n+        when(logger.isWarnEnabled()).thenReturn(true);\n+\n+        final LoggingService service =\n+                LoggingService.builder()\n+                              .logger(logger)\n+                              .requestLogLevel(LogLevel.INFO)\n+                              .successfulResponseLogLevel(LogLevel.INFO)\n+                              .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                               .pattern(\"trustin\")\n+                                                               .pattern(\"com\")\n+                                                               .build())\n+                              .newDecorator().apply(delegate);\n+\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDQyNA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720424", "bodyText": "Done", "author": "amitvc", "createdAt": "2020-05-20T03:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTAwMg=="}], "type": "inlineReview"}, {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "url": "https://github.com/line/armeria/commit/bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "message": "Removed AbstractSanitizerBase, fixed unit tests", "committedDate": "2020-05-20T03:25:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726879", "body": "nit: please check not-null\r\n```suggestion\r\n    public static RegexBasedSanitizer of(Pattern... patterns) {\r\n        requireNonNull(\"patterns\", patterns);   \r\n```", "bodyText": "nit: please check not-null\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RegexBasedSanitizer of(Pattern...p) {\n          \n          \n            \n                public static RegexBasedSanitizer of(Pattern... patterns) {\n          \n          \n            \n                    requireNonNull(\"patterns\", patterns);", "bodyHTML": "<p dir=\"auto\">nit: please check not-null</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">RegexBasedSanitizer</span> of(<span class=\"pl-smi\">Pattern</span><span class=\"pl-k\">.</span><span class=\"pl-c1\">.</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">p</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">RegexBasedSanitizer</span> of(<span class=\"pl-smi\">Pattern</span><span class=\"pl-k\">.</span><span class=\"pl-c1\">..</span><span class=\"x x-first x-last\"> patterns</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        requireNonNull(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>patterns<span class=\"pl-pds\">\"</span></span>, patterns);   </td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-05-20T03:55:10Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzI3OQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727279", "bodyText": "Could you add an additaional factory method for Iterable<? extends Pattern> patterns)\npublic static RegexBasedSanitizer of(Iterable<? extends Pattern> patterns);", "author": "ikhoon", "createdAt": "2020-05-20T03:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTU2NQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729565", "bodyText": "Pattern is a final class, so Iterable<Pattern> would be enough.", "author": "trustin", "createdAt": "2020-05-20T04:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzg5Ng==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727896", "body": "Could remove two lines.", "bodyText": "Could remove two lines.", "bodyHTML": "<p dir=\"auto\">Could remove two lines.</p>", "author": "ikhoon", "createdAt": "2020-05-20T03:59:28Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTM1OA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r428411358", "bodyText": "Done", "author": "amitvc", "createdAt": "2020-05-21T02:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTQyNw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729427", "body": "```suggestion\r\n        assertThat(ctx.logBuilder().toString()).contains(\"333-490-4499\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));\n          \n          \n            \n                    assertThat(ctx.logBuilder().toString()).contains(\"333-490-4499\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(ctx<span class=\"pl-k\">.</span>logBuilder()<span class=\"pl-k\">.</span>toString()<span class=\"pl-k\">.</span>contains(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>333-490-4499<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertThat(ctx<span class=\"pl-k\">.</span>logBuilder()<span class=\"pl-k\">.</span>toString()<span class=\"x x-first x-last\">)</span><span class=\"pl-k\">.</span>contains(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>333-490-4499<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-05-20T04:06:34Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // After the sanitize\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+    }\n+\n+    @Test\n+    void sanitizeRequestContent() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+        ctx.logBuilder().requestContent(\"Virginia 333-490-4499\", \"Virginia 333-490-4499\");\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestContentSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"\\\\d{3}[-\\\\.\\\\s]\\\\d{3}[-\\\\.\\\\s]\\\\d{4}\")))\n+                             .build(delegate);\n+\n+        // Before sanitize content\n+        assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTc1OA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729758", "body": "```suggestion\r\n        assertThat(ctx.logBuilder().toString()).doesNotContain(\"333-490-4499\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(!ctx.logBuilder().toString().contains(\"333-490-4499\"));\n          \n          \n            \n                    assertThat(ctx.logBuilder().toString()).doesNotContain(\"333-490-4499\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(<span class=\"pl-k x x-first x-last\">!</span>ctx<span class=\"pl-k\">.</span>logBuilder()<span class=\"pl-k\">.</span>toString()<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">contains</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>333-490-4499<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertThat(ctx<span class=\"pl-k\">.</span>logBuilder()<span class=\"pl-k\">.</span>toString()<span class=\"x x-first\">)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">doesNotContain</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>333-490-4499<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-05-20T04:07:53Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // After the sanitize\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+    }\n+\n+    @Test\n+    void sanitizeRequestContent() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+        ctx.logBuilder().requestContent(\"Virginia 333-490-4499\", \"Virginia 333-490-4499\");\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestContentSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"\\\\d{3}[-\\\\.\\\\s]\\\\d{3}[-\\\\.\\\\s]\\\\d{4}\")))\n+                             .build(delegate);\n+\n+        // Before sanitize content\n+        assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // Ensure sanitize the request content of the phone number 333-490-4499\n+        assertThat(!ctx.logBuilder().toString().contains(\"333-490-4499\"));", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzODcwMg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427138702", "body": "nit: 2020", "bodyText": "nit: 2020", "bodyHTML": "<p dir=\"auto\">nit: 2020</p>", "author": "minwoox", "createdAt": "2020-05-19T08:53:34Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation", "originalCommit": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjQ5MA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726490", "body": "`Pattern...p` -> `Pattern... patterns` (need an empty space before `p`)\r\n", "bodyText": "Pattern...p -> Pattern... patterns (need an empty space before p)", "bodyHTML": "<p dir=\"auto\"><code>Pattern...p</code> -&gt; <code>Pattern... patterns</code> (need an empty space before <code>p</code>)</p>", "author": "minwoox", "createdAt": "2020-05-20T03:53:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjYyOA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726628", "body": "return new RegexBasedSanitizer(ImmutableList.copyOf(requireNonNull(patterns, \"patterns\")));", "bodyText": "return new RegexBasedSanitizer(ImmutableList.copyOf(requireNonNull(patterns, \"patterns\")));", "bodyHTML": "<p dir=\"auto\">return new RegexBasedSanitizer(ImmutableList.copyOf(requireNonNull(patterns, \"patterns\")));</p>", "author": "minwoox", "createdAt": "2020-05-20T03:54:02Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {\n+        return new RegexBasedSanitizer(Arrays.asList(p));", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjcxMA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726710", "body": "Can remove `@return` because it doesn't say anything.", "bodyText": "Can remove @return because it doesn't say anything.", "bodyHTML": "<p dir=\"auto\">Can remove <code>@return</code> because it doesn't say anything.</p>", "author": "minwoox", "createdAt": "2020-05-20T03:54:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjkwMQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726901", "body": "@param patterns the {@link Pattern}s", "bodyText": "@param patterns the {@link Pattern}s", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/param/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/param\">@param</a> patterns the {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/link/hovercard\" href=\"https://github.com/link\">@link</a> Pattern}s</p>", "author": "minwoox", "createdAt": "2020-05-20T03:55:16Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzIxMw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727213", "body": "Can remove `this` of we can change to\r\n```\r\nRegexBasedSanitizer(List<Pattern> patterns) {\r\n    this.patterns = patterns;\r\n```", "bodyText": "Can remove this of we can change to\nRegexBasedSanitizer(List<Pattern> patterns) {\n    this.patterns = patterns;", "bodyHTML": "<p dir=\"auto\">Can remove <code>this</code> of we can change to</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"RegexBasedSanitizer(List&lt;Pattern&gt; patterns) {\n    this.patterns = patterns;\"><pre><code>RegexBasedSanitizer(List&lt;Pattern&gt; patterns) {\n    this.patterns = patterns;\n</code></pre></div>", "author": "minwoox", "createdAt": "2020-05-20T03:56:37Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzczOQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727739", "body": "Creates a new instance.", "bodyText": "Creates a new instance.", "bodyHTML": "<p dir=\"auto\">Creates a new instance.</p>", "author": "minwoox", "createdAt": "2020-05-20T03:58:45Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729180", "body": "`Function<Object, String>` -> `Function<HttpHeaders, String>`?", "bodyText": "Function<Object, String> -> Function<HttpHeaders, String>?", "bodyHTML": "<p dir=\"auto\"><code>Function&lt;Object, String&gt;</code> -&gt; <code>Function&lt;HttpHeaders, String&gt;</code>?</p>", "author": "minwoox", "createdAt": "2020-05-20T04:05:24Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNTQ0Mg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r428405442", "bodyText": "I think we want to be able to use the sanitizers on either httpheader or request content.", "author": "amitvc", "createdAt": "2020-05-21T02:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTc1Mg==", "url": "https://github.com/line/armeria/pull/2721#discussion_r428411752", "bodyText": "Ah, right. Sorry about the comment. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-05-21T02:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMDc1NQ==", "url": "https://github.com/line/armeria/pull/2721#discussion_r427730755", "body": "`assertThat(ctx.logBuilder().toString()).contains(\"trustin\");`", "bodyText": "assertThat(ctx.logBuilder().toString()).contains(\"trustin\");", "bodyHTML": "<p dir=\"auto\"><code>assertThat(ctx.logBuilder().toString()).contains(\"trustin\");</code></p>", "author": "minwoox", "createdAt": "2020-05-20T04:12:21Z", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));", "originalCommit": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "url": "https://github.com/line/armeria/commit/a141b50ca52cf0f28296c7b0414c48996c889b0b", "message": "Fix unit tests and address other code review comments", "committedDate": "2020-05-21T02:28:04Z", "type": "commit"}, {"oid": "10759e3f73a93aff4234902b610756d49a50e3a9", "url": "https://github.com/line/armeria/commit/10759e3f73a93aff4234902b610756d49a50e3a9", "message": "Some minor clean-up", "committedDate": "2020-05-21T04:47:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjEwMw==", "url": "https://github.com/line/armeria/pull/2721#discussion_r429016103", "body": "`replaceAll` calls `find` internally so I think we can remove this, or it has to run the regex from the beginning again.", "bodyText": "replaceAll calls find internally so I think we can remove this, or it has to run the regex from the beginning again.", "bodyHTML": "<p dir=\"auto\"><code>replaceAll</code> calls <code>find</code> internally so I think we can remove this, or it has to run the regex from the beginning again.</p>", "author": "anuraaga", "createdAt": "2020-05-22T02:50:18Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    /**\n+     * Returns a new instance created from the specified {@link Pattern}s.\n+     */\n+    public static RegexBasedSanitizer of(Pattern... patterns) {\n+        requireNonNull(patterns, \"patterns\");\n+        return new RegexBasedSanitizer(ImmutableList.copyOf(patterns));\n+    }\n+\n+    /**\n+     * Returns a new instance created from the specified {@link Pattern}s.\n+     */\n+    public static RegexBasedSanitizer of(Iterable<Pattern> patterns) {\n+        requireNonNull(patterns, \"patterns\");\n+        return new RegexBasedSanitizer(ImmutableList.copyOf(patterns));\n+    }\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Creates a new instance.\n+     * @param patterns {@link Pattern}.\n+     */\n+    RegexBasedSanitizer(List<Pattern> patterns) {\n+        this.patterns = patterns;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String apply(@Nullable Object input) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {", "originalCommit": "10759e3f73a93aff4234902b610756d49a50e3a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28cec3cfaccd741d6159ccd9521c41edf31fbd21", "url": "https://github.com/line/armeria/commit/28cec3cfaccd741d6159ccd9521c41edf31fbd21", "message": "Removed unnecessary check", "committedDate": "2020-05-22T12:28:46Z", "type": "commit"}, {"oid": "a89bbce5ce45e374748dccafa750c051c172baa2", "url": "https://github.com/line/armeria/commit/a89bbce5ce45e374748dccafa750c051c172baa2", "message": "Merge branch 'header_content_sanitizer' of https://github.com/amitvc/armeria into header_content_sanitizer", "committedDate": "2020-05-22T12:28:58Z", "type": "commit"}]}