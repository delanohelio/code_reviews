{"pr_number": 2623, "pr_title": "Fix a bug where DNS resolution is not timed out", "pr_author": "minwoox", "pr_createdAt": "2020-03-24T12:18:40Z", "pr_url": "https://github.com/line/armeria/pull/2623", "timeline": [{"oid": "5260955ca4380143ce38127efb5b9e954bcb5f86", "url": "https://github.com/line/armeria/commit/5260955ca4380143ce38127efb5b9e954bcb5f86", "message": "Fix a bug where DNS resolution is not timed out\nMotivation:\nDNS resoultion could take longer when there's more than one `DnsServerAddressStream`.\n\nModifications:\n- DNS resolution is timed out after `queryTimeoutMillis`.\n\nResult:\n- DNS resolution is timed out after `queryTimeoutMillis`.\n- Close #2621", "committedDate": "2020-03-24T12:18:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1MzAwNw==", "url": "https://github.com/line/armeria/pull/2623#discussion_r397553007", "body": "I realized that the search domain query is not cancellable right now. I will send a PR to Netty to fix this.", "bodyText": "I realized that the search domain query is not cancellable right now. I will send a PR to Netty to fix this.", "bodyHTML": "<p dir=\"auto\">I realized that the search domain query is not cancellable right now. I will send a PR to Netty to fix this.</p>", "author": "minwoox", "createdAt": "2020-03-25T01:07:39Z", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();\n+            promises.add(promise);\n+            delegate.resolveAll(q, EMPTY_ADDITIONALS, promise);\n+            promise.addListener(listener);\n+        });\n+        configureTimeout(questions, logPrefix, aggregatedPromise, promises.build());\n         return aggregatedPromise;\n     }\n \n+    private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n+                                  Promise<List<DnsRecord>> result,\n+                                  List<Promise<List<DnsRecord>>> promises) {\n+        eventLoop.schedule(() -> {\n+            if (result.isDone()) {\n+                // Received a response before the query times out.\n+                return;\n+            }\n+            final DnsTimeoutException exception = new DnsTimeoutException(\n+                    '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n+                    queryTimeoutMillis + \" milliseconds.\");\n+            result.tryFailure(exception);\n+            promises.forEach(promise -> {", "originalCommit": "5260955ca4380143ce38127efb5b9e954bcb5f86", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NDUzNg==", "url": "https://github.com/line/armeria/pull/2623#discussion_r397554536", "body": "`isDone()` check is redundant. `cancel()` does nothing when promise is done already.", "bodyText": "isDone() check is redundant. cancel() does nothing when promise is done already.", "bodyHTML": "<p dir=\"auto\"><code>isDone()</code> check is redundant. <code>cancel()</code> does nothing when promise is done already.</p>", "author": "trustin", "createdAt": "2020-03-25T01:13:15Z", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();\n+            promises.add(promise);\n+            delegate.resolveAll(q, EMPTY_ADDITIONALS, promise);\n+            promise.addListener(listener);\n+        });\n+        configureTimeout(questions, logPrefix, aggregatedPromise, promises.build());\n         return aggregatedPromise;\n     }\n \n+    private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n+                                  Promise<List<DnsRecord>> result,\n+                                  List<Promise<List<DnsRecord>>> promises) {\n+        eventLoop.schedule(() -> {\n+            if (result.isDone()) {\n+                // Received a response before the query times out.\n+                return;\n+            }\n+            final DnsTimeoutException exception = new DnsTimeoutException(\n+                    '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n+                    queryTimeoutMillis + \" milliseconds.\");\n+            result.tryFailure(exception);\n+            promises.forEach(promise -> {\n+                if (promise.isDone()) {\n+                    return;\n+                }\n+                promise.cancel(true);", "originalCommit": "5260955ca4380143ce38127efb5b9e954bcb5f86", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "956a88631fef2ef883d74d367ad9af6b5a6e3ad6", "url": "https://github.com/line/armeria/commit/956a88631fef2ef883d74d367ad9af6b5a6e3ad6", "message": "Address comments by @trustin", "committedDate": "2020-03-25T01:29:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMDA5Ng==", "url": "https://github.com/line/armeria/pull/2623#discussion_r397110096", "body": "```suggestion\r\n * A {@link TimeoutException} raised when a response has not been received from a DNS server within timeout.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@link TimeoutException} raised when a response has not been received from a server within timeout.\n          \n          \n            \n             * A {@link TimeoutException} raised when a response has not been received from a DNS server within timeout.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">TimeoutException</span>} raised when a response has not been received from a server within timeout.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">TimeoutException</span>} raised when a response has not been received from a <span class=\"pl-c1 x x-first\">DNS</span><span class=\"x x-last\"> </span>server within timeout.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-03-24T12:20:42Z", "path": "core/src/main/java/com/linecorp/armeria/client/DnsTimeoutException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.TimeoutException;\n+\n+/**\n+ * A {@link TimeoutException} raised when a response has not been received from a server within timeout.", "originalCommit": "5260955ca4380143ce38127efb5b9e954bcb5f86", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "05898dd4d081ab9968e09db995e4152decf9af3f", "url": "https://github.com/line/armeria/commit/05898dd4d081ab9968e09db995e4152decf9af3f", "message": "Update core/src/main/java/com/linecorp/armeria/client/DnsTimeoutException.java\n\nCo-Authored-By: Ikhun Um <ih.pert@gmail.com>", "committedDate": "2020-03-25T02:23:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NTM2MA==", "url": "https://github.com/line/armeria/pull/2623#discussion_r397575360", "body": "setFailure? I think we're not checking the return value since we don't expect the result to be completable since we own the event loop so may as well make that explicit.", "bodyText": "setFailure? I think we're not checking the return value since we don't expect the result to be completable since we own the event loop so may as well make that explicit.", "bodyHTML": "<p dir=\"auto\">setFailure? I think we're not checking the return value since we don't expect the result to be completable since we own the event loop so may as well make that explicit.</p>", "author": "anuraaga", "createdAt": "2020-03-25T02:32:06Z", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();\n+            promises.add(promise);\n+            delegate.resolveAll(q, EMPTY_ADDITIONALS, promise);\n+            promise.addListener(listener);\n+        });\n+        configureTimeout(questions, logPrefix, aggregatedPromise, promises.build());\n         return aggregatedPromise;\n     }\n \n+    private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n+                                  Promise<List<DnsRecord>> result,\n+                                  List<Promise<List<DnsRecord>>> promises) {\n+        if (queryTimeoutMillis == 0) {\n+            return;\n+        }\n+        eventLoop.schedule(() -> {\n+            if (result.isDone()) {\n+                // Received a response before the query times out.\n+                return;\n+            }\n+            final DnsTimeoutException exception = new DnsTimeoutException(\n+                    '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n+                    queryTimeoutMillis + \" milliseconds.\");\n+            result.tryFailure(exception);", "originalCommit": "05898dd4d081ab9968e09db995e4152decf9af3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4MjA2Nw==", "url": "https://github.com/line/armeria/pull/2623#discussion_r397582067", "bodyText": "Yeah, that makes sense. Fixed.", "author": "minwoox", "createdAt": "2020-03-25T02:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NTM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NjI1NA==", "url": "https://github.com/line/armeria/pull/2623#discussion_r397576254", "body": "I think we should either use `eventLoop` here or `executor()` below when scheduling for consistency.", "bodyText": "I think we should either use eventLoop here or executor() below when scheduling for consistency.", "bodyHTML": "<p dir=\"auto\">I think we should either use <code>eventLoop</code> here or <code>executor()</code> below when scheduling for consistency.</p>", "author": "anuraaga", "createdAt": "2020-03-25T02:35:24Z", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();", "originalCommit": "05898dd4d081ab9968e09db995e4152decf9af3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4MjAwMg==", "url": "https://github.com/line/armeria/pull/2623#discussion_r397582002", "bodyText": "Oops. I removed executor() completely. Thanks!", "author": "minwoox", "createdAt": "2020-03-25T02:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NjI1NA=="}], "type": "inlineReview"}, {"oid": "ba33b54436a597bc91aec0ce6e1437bd372d10c0", "url": "https://github.com/line/armeria/commit/ba33b54436a597bc91aec0ce6e1437bd372d10c0", "message": "Address comments by @anuraaga", "committedDate": "2020-03-25T02:56:33Z", "type": "commit"}]}