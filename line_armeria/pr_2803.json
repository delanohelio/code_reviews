{"pr_number": 2803, "pr_title": "Provide `RequestContext` to `RequestLog` sanitizers", "pr_author": "trustin", "pr_createdAt": "2020-06-17T03:57:31Z", "pr_url": "https://github.com/line/armeria/pull/2803", "timeline": [{"oid": "c458507e60fdb975c26a988239488f3362d31c3b", "url": "https://github.com/line/armeria/commit/c458507e60fdb975c26a988239488f3362d31c3b", "message": "Provide `RequestContext` to `RequestLog` sanitizers\n\nMotivation:\n\nA user sometimes needs to sanitize a `RequestLog` depending on\nadditional information available in `RequestContext`, e.g. current\nrequest path.\n\nModifications:\n\n- Use `BiFunction<RequestContext,...>` instead of `Function` for\n  sanitization.\n- `RegexBasedSanitizer` is now a `BiFunction`.\n- Deprecate the methods that require `Function`s in:\n  - `Logging{Client,RpcClient,Service}Builder`\n  - `RequestOnlyLog.toRequestOnlyString()`\n  - `RequestLog.toResponseOnlyString()`\n\nResult:\n\n- A user can implement a sanitizer that behaves differently dependin on\n  the current context.\n- The methods that require `Function`s in the following methods have\n  been deprecated:\n  - `Logging{Client,RpcClient,Service}Builder`\n  - `RequestOnlyLog.toRequestOnlyString()`\n  - `RequestLog.toResponseOnlyString()`", "committedDate": "2020-06-17T03:50:43Z", "type": "commit"}, {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e", "url": "https://github.com/line/armeria/commit/9c8059579b9d1125a0d32c1092952d5a0d43ca7e", "message": "Fix test failure", "committedDate": "2020-06-17T06:02:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3OTY0Mw==", "url": "https://github.com/line/armeria/pull/2803#discussion_r441379643", "body": "```suggestion\r\n     * It is common to have the {@link BiFunction} that removes sensitive headers, like {@code \"Cookie\"} and\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It is common to have the {@link Function} that removes sensitive headers, like {@code \"Cookie\"} and\n          \n          \n            \n                 * It is common to have the {@link BiFunction} that removes sensitive headers, like {@code \"Cookie\"} and", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">It</span> is common to have the {<span class=\"pl-k\">@link</span> <span class=\"pl-smi x x-first x-last\">Function</span>} that removes sensitive headers, like {<span class=\"pl-k\">@code</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cookie<span class=\"pl-pds\">\"</span></span>} and</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">It</span> is common to have the {<span class=\"pl-k\">@link</span> <span class=\"pl-smi x x-first x-last\">BiFunction</span>} that removes sensitive headers, like {<span class=\"pl-k\">@code</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cookie<span class=\"pl-pds\">\"</span></span>} and</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ikhoon", "createdAt": "2020-06-17T08:39:18Z", "path": "core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java", "diffHunk": "@@ -182,76 +195,157 @@ public LoggingDecoratorBuilder responseLogLevelMapper(\n         return responseLogLevelMapper;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request headers before logging. It is common to have the\n+     * {@link BiFunction} that removes sensitive headers, like {@code Cookie}, before logging. If unset, will\n+     * not sanitize request headers.\n+     */\n+    public LoggingDecoratorBuilder requestHeadersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestHeadersSanitizer) {\n+        this.requestHeadersSanitizer = requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize request headers before logging. It is common to have the\n      * {@link Function} that removes sensitive headers, like {@code Cookie}, before logging. If unset, will use\n      * {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #requestHeadersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder requestHeadersSanitizer(\n             Function<? super HttpHeaders, ?> requestHeadersSanitizer) {\n-        this.requestHeadersSanitizer = requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n-        return this;\n+        requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n+        return requestHeadersSanitizer((ctx, headers) -> requestHeadersSanitizer.apply(headers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize request headers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize request headers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> requestHeadersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestHeadersSanitizer() {\n         return requestHeadersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize response headers before logging. It is common to have the\n+     * {@link BiFunction} that removes sensitive headers, like {@code Set-Cookie}, before logging. If unset,\n+     * will not sanitize response headers.\n+     */\n+    public LoggingDecoratorBuilder responseHeadersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseHeadersSanitizer) {\n+        this.responseHeadersSanitizer = requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize response headers before logging. It is common to have the\n      * {@link Function} that removes sensitive headers, like {@code Set-Cookie}, before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #responseHeadersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder responseHeadersSanitizer(\n             Function<? super HttpHeaders, ?> responseHeadersSanitizer) {\n-        this.responseHeadersSanitizer = requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n-        return this;\n+        requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n+        return responseHeadersSanitizer((ctx, headers) -> responseHeadersSanitizer.apply(headers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize response headers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize response headers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> responseHeadersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseHeadersSanitizer() {\n         return responseHeadersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request trailers before logging. If unset,\n+     * will not sanitize request trailers.\n+     */\n+    public LoggingDecoratorBuilder requestTrailersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestTrailersSanitizer) {\n+        this.requestTrailersSanitizer = requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize request trailers before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #requestTrailersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder requestTrailersSanitizer(\n             Function<? super HttpHeaders, ?> requestTrailersSanitizer) {\n-        this.requestTrailersSanitizer = requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n-        return this;\n+        requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n+        return requestTrailersSanitizer((ctx, trailers) -> requestTrailersSanitizer.apply(trailers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize request trailers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize request trailers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> requestTrailersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestTrailersSanitizer() {\n         return requestTrailersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize response trailers before logging. If unset,\n+     * will not sanitize response trailers.\n+     */\n+    public LoggingDecoratorBuilder responseTrailersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseTrailersSanitizer) {\n+        this.responseTrailersSanitizer = requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize response trailers before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #responseTrailersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder responseTrailersSanitizer(\n             Function<? super HttpHeaders, ?> responseTrailersSanitizer) {\n-        this.responseTrailersSanitizer = requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n-        return this;\n+        requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n+        return responseTrailersSanitizer((ctx, trailers) -> responseTrailersSanitizer.apply(trailers));\n     }\n \n     /**\n      * Returns the {@link Function} to use to sanitize response trailers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> responseTrailersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseTrailersSanitizer() {\n         return responseTrailersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request, response and trailers before logging.\n+     * It is common to have the {@link Function} that removes sensitive headers, like {@code \"Cookie\"} and", "originalCommit": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4NTQ1Ng==", "url": "https://github.com/line/armeria/pull/2803#discussion_r441485456", "bodyText": "Thanks!", "author": "trustin", "createdAt": "2020-06-17T11:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3OTY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0MTA3Mg==", "url": "https://github.com/line/armeria/pull/2803#discussion_r441441072", "body": "\ud83d\udc4d ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "minwoox", "createdAt": "2020-06-17T10:19:15Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Functions.java", "diffHunk": "@@ -194,5 +194,19 @@\n         };\n     }\n \n+    /**\n+     * Returns a {@link BiFunction} that returns the first argument.\n+     */\n+    public static <T, U> BiFunction<T, U, T> first() {", "originalCommit": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0MTE3Mw==", "url": "https://github.com/line/armeria/pull/2803#discussion_r441441173", "body": "\ud83d\udc4d \ud83d\udc4d ", "bodyText": "\ud83d\udc4d \ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji> <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "minwoox", "createdAt": "2020-06-17T10:19:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Functions.java", "diffHunk": "@@ -194,5 +194,19 @@\n         };\n     }\n \n+    /**\n+     * Returns a {@link BiFunction} that returns the first argument.\n+     */\n+    public static <T, U> BiFunction<T, U, T> first() {\n+        return (first, second) -> first;\n+    }\n+\n+    /**\n+     * Returns a {@link BiFunction} that returns the second argument.\n+     */\n+    public static <T, U> BiFunction<T, U, U> second() {", "originalCommit": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d7ab16e87ef266db737860598f86ab579bc482e7", "url": "https://github.com/line/armeria/commit/d7ab16e87ef266db737860598f86ab579bc482e7", "message": "Update core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java\n\nCo-authored-by: Ikhun Um <ih.pert@gmail.com>", "committedDate": "2020-06-17T11:48:45Z", "type": "commit"}]}