{"pr_number": 4324, "pr_title": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "pr_author": "SoniaZaldana", "pr_createdAt": "2020-09-10T18:26:31Z", "pr_url": "https://github.com/wildfly/wildfly-core/pull/4324", "timeline": [{"oid": "df30933124890fbd680cb433e0eea2a53ddb16cc", "url": "https://github.com/wildfly/wildfly-core/commit/df30933124890fbd680cb433e0eea2a53ddb16cc", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2020-09-21T20:17:06Z", "type": "forcePushed"}, {"oid": "8fa4a012262af4b45d01e1d1a578ee5fbc8610de", "url": "https://github.com/wildfly/wildfly-core/commit/8fa4a012262af4b45d01e1d1a578ee5fbc8610de", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2020-09-23T17:25:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NDkzNQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r494574935", "body": "Would be good to add a description here.", "bodyText": "Would be good to add a description here.", "bodyHTML": "<p dir=\"auto\">Would be good to add a description here.</p>", "author": "fjuma", "createdAt": "2020-09-24T19:56:11Z", "path": "controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**", "originalCommit": "8fa4a012262af4b45d01e1d1a578ee5fbc8610de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd7fa73984b7150c4dad88890d59b3f273ece759", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nindex e77ec21de1..756edb604b 100644\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -27,6 +27,8 @@ import org.jboss.dmr.ModelNode;\n import org.jboss.dmr.ModelType;\n \n /**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n  * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n  */\n public class CharsetValidator extends ModelTypeValidator {\n", "next_change": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\ndeleted file mode 100644\nindex 756edb604b..0000000000\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.jboss.as.controller.operations.validation;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.IllegalCharsetNameException;\n-import java.nio.charset.UnsupportedCharsetException;\n-import org.jboss.as.controller.OperationFailedException;\n-import org.jboss.as.controller.logging.ControllerLogger;\n-import org.jboss.dmr.ModelNode;\n-import org.jboss.dmr.ModelType;\n-\n-/**\n- * Validates whether the provided string represents a valid character set.\n- *\n- * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n- */\n-public class CharsetValidator extends ModelTypeValidator {\n-\n-    public CharsetValidator() {\n-        super(ModelType.STRING);\n-    }\n-\n-    @Override\n-    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n-        super.validateParameter(parameterName, value);\n-        if (value.isDefined()) {\n-            try {\n-                Charset hashCharset = Charset.forName(value.asString());\n-            } catch (IllegalCharsetNameException e) {\n-                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n-            } catch (UnsupportedCharsetException e) {\n-                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nnew file mode 100644\nindex 0000000000..756edb604b\n--- /dev/null\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n+            }\n+        }\n+    }\n+}\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\ndeleted file mode 100644\nindex 756edb604b..0000000000\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.jboss.as.controller.operations.validation;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.IllegalCharsetNameException;\n-import java.nio.charset.UnsupportedCharsetException;\n-import org.jboss.as.controller.OperationFailedException;\n-import org.jboss.as.controller.logging.ControllerLogger;\n-import org.jboss.dmr.ModelNode;\n-import org.jboss.dmr.ModelType;\n-\n-/**\n- * Validates whether the provided string represents a valid character set.\n- *\n- * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n- */\n-public class CharsetValidator extends ModelTypeValidator {\n-\n-    public CharsetValidator() {\n-        super(ModelType.STRING);\n-    }\n-\n-    @Override\n-    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n-        super.validateParameter(parameterName, value);\n-        if (value.isDefined()) {\n-            try {\n-                Charset hashCharset = Charset.forName(value.asString());\n-            } catch (IllegalCharsetNameException e) {\n-                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n-            } catch (UnsupportedCharsetException e) {\n-                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nnew file mode 100644\nindex 0000000000..756edb604b\n--- /dev/null\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n+            }\n+        }\n+    }\n+}\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\ndeleted file mode 100644\nindex 756edb604b..0000000000\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.jboss.as.controller.operations.validation;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.IllegalCharsetNameException;\n-import java.nio.charset.UnsupportedCharsetException;\n-import org.jboss.as.controller.OperationFailedException;\n-import org.jboss.as.controller.logging.ControllerLogger;\n-import org.jboss.dmr.ModelNode;\n-import org.jboss.dmr.ModelType;\n-\n-/**\n- * Validates whether the provided string represents a valid character set.\n- *\n- * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n- */\n-public class CharsetValidator extends ModelTypeValidator {\n-\n-    public CharsetValidator() {\n-        super(ModelType.STRING);\n-    }\n-\n-    @Override\n-    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n-        super.validateParameter(parameterName, value);\n-        if (value.isDefined()) {\n-            try {\n-                Charset hashCharset = Charset.forName(value.asString());\n-            } catch (IllegalCharsetNameException e) {\n-                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n-            } catch (UnsupportedCharsetException e) {\n-                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nnew file mode 100644\nindex 0000000000..756edb604b\n--- /dev/null\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n+            }\n+        }\n+    }\n+}\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\ndeleted file mode 100644\nindex 756edb604b..0000000000\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.jboss.as.controller.operations.validation;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.IllegalCharsetNameException;\n-import java.nio.charset.UnsupportedCharsetException;\n-import org.jboss.as.controller.OperationFailedException;\n-import org.jboss.as.controller.logging.ControllerLogger;\n-import org.jboss.dmr.ModelNode;\n-import org.jboss.dmr.ModelType;\n-\n-/**\n- * Validates whether the provided string represents a valid character set.\n- *\n- * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n- */\n-public class CharsetValidator extends ModelTypeValidator {\n-\n-    public CharsetValidator() {\n-        super(ModelType.STRING);\n-    }\n-\n-    @Override\n-    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n-        super.validateParameter(parameterName, value);\n-        if (value.isDefined()) {\n-            try {\n-                Charset hashCharset = Charset.forName(value.asString());\n-            } catch (IllegalCharsetNameException e) {\n-                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n-            } catch (UnsupportedCharsetException e) {\n-                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nnew file mode 100644\nindex 0000000000..756edb604b\n--- /dev/null\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n+            }\n+        }\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3OTk1Ng==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r494579956", "body": "This could be changed from `String` to `OperationFailedException`. Same below. Then, you could simplify the code in your validator to just `throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(...)`.", "bodyText": "This could be changed from String to OperationFailedException. Same below. Then, you could simplify the code in your validator to just throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(...).", "bodyHTML": "<p dir=\"auto\">This could be changed from <code>String</code> to <code>OperationFailedException</code>. Same below. Then, you could simplify the code in your validator to just <code>throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(...)</code>.</p>", "author": "fjuma", "createdAt": "2020-09-24T20:06:01Z", "path": "controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java", "diffHunk": "@@ -3629,4 +3629,10 @@ OperationFailedRuntimeException capabilityAlreadyRegisteredInContext(String capa\n \n     @Message(id = 476, value = \"Value for attribute '%s' is invalid: either '%s' must be specified on its own or '%s' needs to be specified with at least one of '%s' or '%s'\")\n     OperationFailedException invalidCredentialReferenceValue(String attributeName, String clearTextAttributeName, String credentialStoreAttributeName, String clearTextAttributeName1, String alias);\n+\n+    @Message(id = 478, value = \"Value '%s' is not a legal charset name\")\n+    String illegalCharsetName(String charset);", "originalCommit": "8fa4a012262af4b45d01e1d1a578ee5fbc8610de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd7fa73984b7150c4dad88890d59b3f273ece759", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 3b17d0e6f9..6545013695 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3631,8 +3631,8 @@ public interface ControllerLogger extends BasicLogger {\n     OperationFailedException invalidCredentialReferenceValue(String attributeName, String clearTextAttributeName, String credentialStoreAttributeName, String clearTextAttributeName1, String alias);\n \n     @Message(id = 478, value = \"Value '%s' is not a legal charset name\")\n-    String illegalCharsetName(String charset);\n+    OperationFailedException illegalCharsetName(String charset);\n \n     @Message(id = 479, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    String unsupportedCharset(String charset);\n+    OperationFailedException unsupportedCharset(String charset);\n }\n", "next_change": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 6545013695..21db0813da 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3630,9 +3630,19 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 476, value = \"Value for attribute '%s' is invalid: either '%s' must be specified on its own or '%s' needs to be specified with at least one of '%s' or '%s'\")\n     OperationFailedException invalidCredentialReferenceValue(String attributeName, String clearTextAttributeName, String credentialStoreAttributeName, String clearTextAttributeName1, String alias);\n \n-    @Message(id = 478, value = \"Value '%s' is not a legal charset name\")\n-    OperationFailedException illegalCharsetName(String charset);\n+    @Message(id = 477, value = \"Parameter name '%s' is invalid.\")\n+    IllegalArgumentException invalidParameterName(String parameterName);\n+\n+    @Message(id = 478, value = \"Unable to create command based CredentialSource for credential reference.\")\n+    OperationFailedException unableToBuildCommandCredentialSource(@Cause Throwable throwable);\n+\n+    @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n+    String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n+\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n+    String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n+\n+\n+\n \n-    @Message(id = 479, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    OperationFailedException unsupportedCharset(String charset);\n }\n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 21db0813da..056c771ed0 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3642,7 +3642,10 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n+    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n \n-\n+    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 056c771ed0..21db0813da 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3642,10 +3642,7 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n-    OperationFailedException illegalCharsetName(String charset);\n \n-    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    OperationFailedException unsupportedCharset(String charset);\n+\n \n }\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 21db0813da..056c771ed0 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3642,7 +3642,10 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n+    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n \n-\n+    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 056c771ed0..3fcdd0b320 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,13 +3639,12 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n-    OperationFailedException illegalCharsetName(String charset);\n+    @LogMessage(level = WARN)\n+    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n+    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n \n-    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 3fcdd0b320..056c771ed0 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,12 +3639,13 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @LogMessage(level = WARN)\n-    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n-    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n+    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n \n+    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 056c771ed0..3fcdd0b320 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,13 +3639,12 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n-    OperationFailedException illegalCharsetName(String charset);\n+    @LogMessage(level = WARN)\n+    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n+    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n \n-    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 3fcdd0b320..ba10056da4 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,12 +3639,15 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @LogMessage(level = WARN)\n-    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n-    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n \n \n+    @Message(id = 482, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n+\n+    @Message(id = 483, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4NDU2Mg==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r494584562", "body": "We also need to think about the LDAP realm case here.", "bodyText": "We also need to think about the LDAP realm case here.", "bodyHTML": "<p dir=\"auto\">We also need to think about the LDAP realm case here.</p>", "author": "fjuma", "createdAt": "2020-09-24T20:15:10Z", "path": "elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java", "diffHunk": "@@ -543,41 +546,48 @@ protected void executeRuntimeStep(final OperationContext context, final ModelNod\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n+\n+            ModifiableSecurityRealm fsRealm = getModifiableSecurityRealm(parentContext);\n+            Charset hashCharset = StandardCharsets.UTF_8;\n+            if (fsRealm instanceof FileSystemSecurityRealm) {", "originalCommit": "8fa4a012262af4b45d01e1d1a578ee5fbc8610de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxMjc0NA==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r496012744", "bodyText": "The LdapSecurityRealm is not a public class, so I am not sure how to access it's charset. I thought about adding the getter to ModifiableSecurityRealm, but I think that's a public API so I am not sure whether I can edit that. Should I add the method to ModifiableSecurityRealm with a default implementation?", "author": "SoniaZaldana", "createdAt": "2020-09-28T15:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4NDU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MjI5MA==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r496062290", "bodyText": "I'll ping you to discuss this one a bit more.", "author": "fjuma", "createdAt": "2020-09-28T15:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4NDU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cd7fa73984b7150c4dad88890d59b3f273ece759", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 10c261440b..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -547,10 +547,10 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n \n-            ModifiableSecurityRealm fsRealm = getModifiableSecurityRealm(parentContext);\n+            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n             Charset hashCharset = StandardCharsets.UTF_8;\n-            if (fsRealm instanceof FileSystemSecurityRealm) {\n-                hashCharset = ((FileSystemSecurityRealm) fsRealm).getHashCharset();\n+            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n+                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n             }\n \n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -546,13 +543,6 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n-\n-            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n-            Charset hashCharset = StandardCharsets.UTF_8;\n-            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n-                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n-            }\n-\n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n             final PasswordSpec passwordSpec;\n             final String algorithm;\n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -543,6 +546,13 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n+\n+            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n+            Charset hashCharset = StandardCharsets.UTF_8;\n+            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n+                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n+            }\n+\n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n             final PasswordSpec passwordSpec;\n             final String algorithm;\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -546,13 +543,6 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n-\n-            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n-            Charset hashCharset = StandardCharsets.UTF_8;\n-            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n-                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n-            }\n-\n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n             final PasswordSpec passwordSpec;\n             final String algorithm;\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -543,6 +546,13 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n+\n+            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n+            Charset hashCharset = StandardCharsets.UTF_8;\n+            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n+                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n+            }\n+\n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n             final PasswordSpec passwordSpec;\n             final String algorithm;\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -546,13 +543,6 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n-\n-            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n-            Charset hashCharset = StandardCharsets.UTF_8;\n-            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n-                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n-            }\n-\n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n             final PasswordSpec passwordSpec;\n             final String algorithm;\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -543,6 +546,13 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n+\n+            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n+            Charset hashCharset = StandardCharsets.UTF_8;\n+            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n+                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n+            }\n+\n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n             final PasswordSpec passwordSpec;\n             final String algorithm;\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -546,13 +543,6 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n-\n-            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n-            Charset hashCharset = StandardCharsets.UTF_8;\n-            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n-                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n-            }\n-\n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n             final PasswordSpec passwordSpec;\n             final String algorithm;\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -543,6 +546,13 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n         }\n \n         private Password createPassword(final OperationContext parentContext, final String principalName, String passwordType, ModelNode passwordNode) throws OperationFailedException, NoSuchAlgorithmException, InvalidKeySpecException  {\n+\n+            ModelNode modifiableRealm = parentContext.readResource(PathAddress.EMPTY_ADDRESS, false).getModel();\n+            Charset hashCharset = StandardCharsets.UTF_8;\n+            if (modifiableRealm.get(HASH_CHARSET).isDefined()) {\n+                hashCharset = Charset.forName(modifiableRealm.get(HASH_CHARSET).asString());\n+            }\n+\n             final String password = PASSWORD.resolveModelAttribute(parentContext, passwordNode).asString();\n             final PasswordSpec passwordSpec;\n             final String algorithm;\n", "next_change": null}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": null}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": null}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": null}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": null}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": null}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": null}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -560,7 +550,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -550,7 +560,7 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n             if (passwordType.equals(ElytronDescriptionConstants.BCRYPT)) {\n                 byte[] salt = Bcrypt.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = Bcrypt.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = Bcrypt.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.CLEAR)) {\n", "next_change": null}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex 9ca82e5ee4..dc517ef4c5 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -568,26 +558,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\nindex dc517ef4c5..9ca82e5ee4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ModifiableRealmDecorator.java\n", "chunk": "@@ -558,26 +568,26 @@ class ModifiableRealmDecorator extends DelegatingResourceDefinition {\n                 algorithm = Clear.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SIMPLE_DIGEST)) {\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), null, hashCharset);\n                 algorithm = SimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SALTED_SIMPLE_DIGEST)) {\n                 byte[] salt = SaltedSimpleDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 SaltedPasswordAlgorithmSpec spec = new SaltedPasswordAlgorithmSpec(salt);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), spec, hashCharset);\n                 algorithm = SaltedSimpleDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.SCRAM_DIGEST)) {\n                 byte[] salt = ScramDigest.SALT.resolveModelAttribute(parentContext, passwordNode).asBytes();\n                 int iterationCount = ScramDigest.ITERATION_COUNT.resolveModelAttribute(parentContext, passwordNode).asInt();\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt));\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), new IteratedSaltedPasswordAlgorithmSpec(iterationCount, salt), hashCharset);\n                 algorithm = ScramDigest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.DIGEST)) {\n                 String realm = Digest.REALM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 algorithm = Digest.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n                 DigestPasswordAlgorithmSpec dpas = new DigestPasswordAlgorithmSpec(principalName, realm);\n-                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas);\n+                passwordSpec = new EncryptablePasswordSpec(password.toCharArray(), dpas, hashCharset);\n \n             } else if (passwordType.equals(ElytronDescriptionConstants.OTP)) {\n                 algorithm = OTPassword.ALGORITHM.resolveModelAttribute(parentContext, passwordNode).asString();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4OTY5OQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r494589699", "body": "Some more work is needed in this parser. This existing block should be copied to a new realmParser variable and then a new variable should be introduced that contains these changes.", "bodyText": "Some more work is needed in this parser. This existing block should be copied to a new realmParser variable and then a new variable should be introduced that contains these changes.", "bodyHTML": "<p dir=\"auto\">Some more work is needed in this parser. This existing block should be copied to a new realmParser variable and then a new variable should be introduced that contains these changes.</p>", "author": "fjuma", "createdAt": "2020-09-24T20:25:19Z", "path": "elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java", "diffHunk": "@@ -137,11 +154,11 @@\n             .addChild(customRealmParser)\n             .addChild(customModifiableRealmParser)\n             .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_7_0)\n+            .addChild(jdbcRealmParser_11_0)", "originalCommit": "8fa4a012262af4b45d01e1d1a578ee5fbc8610de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd7fa73984b7150c4dad88890d59b3f273ece759", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex eb74372368..5a78509a9b 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -154,11 +154,27 @@ class RealmParser {\n             .addChild(customRealmParser)\n             .addChild(customModifiableRealmParser)\n             .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_11_0)\n+            .addChild(jdbcRealmParser_7_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser)\n+            .addChild(ldapRealmParser)\n+            .addChild(fileSystemRealmDescription)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n+    final PersistentResourceXMLDescription realmParser_12_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_12_0)\n             .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_11_0)\n+            .addChild(propertiesRealmParser_12_0)\n             .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_11_0)\n+            .addChild(filesystemRealmParser_12_0)\n             .addChild(tokenRealmParser)\n             .addChild(cachingRealmParser)\n             .addChild(distributedRealmParser)\n", "next_change": {"commit": "4e7117f36eae6b6f15b30c1dc49e8a2fee8e8416", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex 5a78509a9b..e84b131efe 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,16 +165,16 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_12_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+    final PersistentResourceXMLDescription realmParser_13_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n             .addChild(aggregateRealmParser_8_0)\n             .addChild(customRealmParser)\n             .addChild(customModifiableRealmParser)\n             .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_12_0)\n+            .addChild(jdbcRealmParser_13_0)\n             .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_12_0)\n+            .addChild(propertiesRealmParser_13_0)\n             .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_12_0)\n+            .addChild(filesystemRealmParser_13_0)\n             .addChild(tokenRealmParser)\n             .addChild(cachingRealmParser)\n             .addChild(distributedRealmParser)\n", "next_change": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex e84b131efe..cf4fc63f5d 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,22 +148,6 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_13_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n-            .addChild(aggregateRealmParser_8_0)\n-            .addChild(customRealmParser)\n-            .addChild(customModifiableRealmParser)\n-            .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_13_0)\n-            .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_13_0)\n-            .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_13_0)\n-            .addChild(tokenRealmParser)\n-            .addChild(cachingRealmParser)\n-            .addChild(distributedRealmParser)\n-            .addChild(failoverRealmParser)\n-            .build();\n-\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex cf4fc63f5d..e84b131efe 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -148,6 +165,22 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n+    final PersistentResourceXMLDescription realmParser_13_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_13_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser_13_0)\n+            .addChild(ldapRealmParser)\n+            .addChild(filesystemRealmParser_13_0)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex e84b131efe..cf4fc63f5d 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,22 +148,6 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_13_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n-            .addChild(aggregateRealmParser_8_0)\n-            .addChild(customRealmParser)\n-            .addChild(customModifiableRealmParser)\n-            .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_13_0)\n-            .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_13_0)\n-            .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_13_0)\n-            .addChild(tokenRealmParser)\n-            .addChild(cachingRealmParser)\n-            .addChild(distributedRealmParser)\n-            .addChild(failoverRealmParser)\n-            .build();\n-\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex cf4fc63f5d..6152b1dda4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -148,6 +165,22 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n+    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_14_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser_14_0)\n+            .addChild(ldapRealmParser)\n+            .addChild(filesystemRealmParser_14_0)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex 6152b1dda4..cf4fc63f5d 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,22 +148,6 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n-            .addChild(aggregateRealmParser_8_0)\n-            .addChild(customRealmParser)\n-            .addChild(customModifiableRealmParser)\n-            .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_14_0)\n-            .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_14_0)\n-            .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_14_0)\n-            .addChild(tokenRealmParser)\n-            .addChild(cachingRealmParser)\n-            .addChild(distributedRealmParser)\n-            .addChild(failoverRealmParser)\n-            .build();\n-\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex cf4fc63f5d..6152b1dda4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -148,6 +165,22 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n+    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_14_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser_14_0)\n+            .addChild(ldapRealmParser)\n+            .addChild(filesystemRealmParser_14_0)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex 6152b1dda4..cf4fc63f5d 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,22 +148,6 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n-            .addChild(aggregateRealmParser_8_0)\n-            .addChild(customRealmParser)\n-            .addChild(customModifiableRealmParser)\n-            .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_14_0)\n-            .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_14_0)\n-            .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_14_0)\n-            .addChild(tokenRealmParser)\n-            .addChild(cachingRealmParser)\n-            .addChild(distributedRealmParser)\n-            .addChild(failoverRealmParser)\n-            .build();\n-\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex cf4fc63f5d..6152b1dda4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -148,6 +165,22 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n+    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_14_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser_14_0)\n+            .addChild(ldapRealmParser)\n+            .addChild(filesystemRealmParser_14_0)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n     RealmParser() {\n \n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MTQwMQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r494591401", "body": "These should be added to `from12` instead.", "bodyText": "These should be added to from12 instead.", "bodyHTML": "<p dir=\"auto\">These should be added to <code>from12</code> instead.</p>", "author": "fjuma", "createdAt": "2020-09-24T20:28:36Z", "path": "elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java", "diffHunk": "@@ -158,6 +151,12 @@ private static void from11(ChainedTransformationDescriptionBuilder chainedBuilde\n                 .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING);\n     }\n \n+    private static void from11(ChainedTransformationDescriptionBuilder chainedBuilder) {\n+        ResourceTransformationDescriptionBuilder builder = chainedBuilder.createBuilder(ELYTRON_11_0_0, ELYTRON_10_0_0);\n+        builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.DISTRIBUTED_REALM));\n+        builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.FAILOVER_REALM));", "originalCommit": "c7a8f0e8d724913d3825c26806cbbfa7b6cba74a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbc7bfeed22e69ef37e54bc2dad1538b1b78de9d", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex ef334d97c1..8f9f573ecc 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -149,6 +162,8 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n                 .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n                 .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING);\n+\n+        builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n     private static void from11(ChainedTransformationDescriptionBuilder chainedBuilder) {\n", "next_change": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 8f9f573ecc..5623055d8a 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -137,32 +146,6 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n-        builder.addChildResource(PathElement.pathElement(PROPERTIES_REALM))\n-                .getAttributeBuilder()\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET);\n-\n-        builder.addChildResource(PathElement.pathElement(FILESYSTEM_REALM))\n-                .getAttributeBuilder()\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET);\n-\n-        builder.addChildResource(PathElement.pathElement(JDBC_REALM))\n-                .getAttributeBuilder()\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET);\n-\n-        builder.addChildResource(PathElement.pathElement(LDAP_REALM))\n-                .getAttributeBuilder()\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING);\n-\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 5623055d8a..e5127d78e0 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -146,6 +150,32 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+        builder.addChildResource(PathElement.pathElement(PROPERTIES_REALM))\n+                .getAttributeBuilder()\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET);\n+\n+        builder.addChildResource(PathElement.pathElement(FILESYSTEM_REALM))\n+                .getAttributeBuilder()\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET);\n+\n+        builder.addChildResource(PathElement.pathElement(JDBC_REALM))\n+                .getAttributeBuilder()\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET);\n+\n+        builder.addChildResource(PathElement.pathElement(LDAP_REALM))\n+                .getAttributeBuilder()\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING);\n+\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "d04ad69a364913407a661486a1d5570f67d262c9", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex e5127d78e0..c58e9417ff 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -175,6 +154,26 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n                 .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n                 .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING);\n+    }\n+\n+    private static void from13(ChainedTransformationDescriptionBuilder chainedBuilder) {\n+        ResourceTransformationDescriptionBuilder builder = chainedBuilder.createBuilder(ELYTRON_13_0_0, ELYTRON_12_0_0);\n+        builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.EXPRESSION, ElytronDescriptionConstants.ENCRYPTION));\n+        builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.SECRET_KEY_CREDENTIAL_STORE));\n+        builder.addChildResource(PathElement.pathElement(ElytronDescriptionConstants.CREDENTIAL_STORE))\n+            .getAttributeBuilder()\n+            .addRename(ElytronDescriptionConstants.PATH, ElytronDescriptionConstants.LOCATION)\n+            .end();\n+    }\n+\n+    private static void from12(ChainedTransformationDescriptionBuilder chainedBuilder) {\n+        ResourceTransformationDescriptionBuilder builder = chainedBuilder.createBuilder(ELYTRON_12_0_0, ELYTRON_11_0_0);\n+        builder.addChildResource(PathElement.pathElement(ElytronDescriptionConstants.KEY_MANAGER))\n+                .getAttributeBuilder()\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, ElytronDescriptionConstants.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n+                .end();\n+\n \n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex c58e9417ff..5623055d8a 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -174,7 +146,6 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n-\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 5623055d8a..c58e9417ff 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -146,6 +174,7 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex c58e9417ff..5623055d8a 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -174,7 +146,6 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n-\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 5623055d8a..c58e9417ff 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -146,6 +174,7 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex c58e9417ff..5623055d8a 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -174,7 +146,6 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n-\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 5623055d8a..c58e9417ff 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -146,6 +174,7 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNTI4MA==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r501835280", "body": "This can be changed from `String` to `OperationFailedException`.", "bodyText": "This can be changed from String to OperationFailedException.", "bodyHTML": "<p dir=\"auto\">This can be changed from <code>String</code> to <code>OperationFailedException</code>.</p>", "author": "fjuma", "createdAt": "2020-10-08T16:00:23Z", "path": "controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java", "diffHunk": "@@ -3629,4 +3629,10 @@ OperationFailedRuntimeException capabilityAlreadyRegisteredInContext(String capa\n \n     @Message(id = 476, value = \"Value for attribute '%s' is invalid: either '%s' must be specified on its own or '%s' needs to be specified with at least one of '%s' or '%s'\")\n     OperationFailedException invalidCredentialReferenceValue(String attributeName, String clearTextAttributeName, String credentialStoreAttributeName, String clearTextAttributeName1, String alias);\n+\n+    @Message(id = 478, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n+\n+    @Message(id = 479, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    String unsupportedCharset(String charset);", "originalCommit": "8debb394fa6d3edab6279733b5c868c9df6e7953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd7fa73984b7150c4dad88890d59b3f273ece759", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 4f9b46c309..6545013695 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3634,5 +3634,5 @@ public interface ControllerLogger extends BasicLogger {\n     OperationFailedException illegalCharsetName(String charset);\n \n     @Message(id = 479, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    String unsupportedCharset(String charset);\n+    OperationFailedException unsupportedCharset(String charset);\n }\n", "next_change": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 6545013695..21db0813da 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3630,9 +3630,19 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 476, value = \"Value for attribute '%s' is invalid: either '%s' must be specified on its own or '%s' needs to be specified with at least one of '%s' or '%s'\")\n     OperationFailedException invalidCredentialReferenceValue(String attributeName, String clearTextAttributeName, String credentialStoreAttributeName, String clearTextAttributeName1, String alias);\n \n-    @Message(id = 478, value = \"Value '%s' is not a legal charset name\")\n-    OperationFailedException illegalCharsetName(String charset);\n+    @Message(id = 477, value = \"Parameter name '%s' is invalid.\")\n+    IllegalArgumentException invalidParameterName(String parameterName);\n+\n+    @Message(id = 478, value = \"Unable to create command based CredentialSource for credential reference.\")\n+    OperationFailedException unableToBuildCommandCredentialSource(@Cause Throwable throwable);\n+\n+    @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n+    String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n+\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n+    String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n+\n+\n+\n \n-    @Message(id = 479, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    OperationFailedException unsupportedCharset(String charset);\n }\n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 21db0813da..056c771ed0 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3642,7 +3642,10 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n+    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n \n-\n+    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 056c771ed0..21db0813da 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3642,10 +3642,7 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n-    OperationFailedException illegalCharsetName(String charset);\n \n-    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    OperationFailedException unsupportedCharset(String charset);\n+\n \n }\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 21db0813da..056c771ed0 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3642,7 +3642,10 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n+    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n \n-\n+    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 056c771ed0..3fcdd0b320 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,13 +3639,12 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n-    OperationFailedException illegalCharsetName(String charset);\n+    @LogMessage(level = WARN)\n+    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n+    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n \n-    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 3fcdd0b320..056c771ed0 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,12 +3639,13 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @LogMessage(level = WARN)\n-    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n-    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n+    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n \n+    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 056c771ed0..3fcdd0b320 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,13 +3639,12 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @Message(id = 481, value = \"Value '%s' is not a legal charset name\")\n-    OperationFailedException illegalCharsetName(String charset);\n+    @LogMessage(level = WARN)\n+    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n+    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n \n-    @Message(id = 482, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n-    OperationFailedException unsupportedCharset(String charset);\n \n }\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\nindex 3fcdd0b320..ba10056da4 100644\n--- a/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n+++ b/controller/src/main/java/org/jboss/as/controller/logging/ControllerLogger.java\n", "chunk": "@@ -3639,12 +3639,15 @@ public interface ControllerLogger extends BasicLogger {\n     @Message(id = 479, value = \"Attribute '%s' at resource '%s' with unresolved value '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the 'resolve' parameter. Response will report the unresolved value.\")\n     String attributeUnresolvableUsingSimpleResolution(String attribute, String address, ModelNode unresolved);\n \n-    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operation. Response will report the unresolved value.\")\n+    @Message(id = 480, value = \"Expression '%s' cannot be resolved using the non-security-sensitive sources resolution supported by the '%s' operatiob. Response will report the unresolved value.\")\n     String expressionUnresolvableUsingSimpleResolution(ModelNode unresolved, String opName);\n \n-    @LogMessage(level = WARN)\n-    @Message(id = 481, value = \"The runtime dependency package '%s' is already registered at location '%s'\")\n-    void runtimePackageDependencyAlreadyRegistered(String pckg, String location);\n \n \n+    @Message(id = 482, value = \"Value '%s' is not a legal charset name\")\n+    OperationFailedException illegalCharsetName(String charset);\n+\n+    @Message(id = 483, value = \"Charset '%s' is not supported in this instance of the Java Virtual Machine\")\n+    OperationFailedException unsupportedCharset(String charset);\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNTkyMw==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r501835923", "body": "With the change suggested above, this can be simplified to just `throw ControllerLogger.ROOT_LOGGER.unsupportedCharset...`", "bodyText": "With the change suggested above, this can be simplified to just throw ControllerLogger.ROOT_LOGGER.unsupportedCharset...", "bodyHTML": "<p dir=\"auto\">With the change suggested above, this can be simplified to just <code>throw ControllerLogger.ROOT_LOGGER.unsupportedCharset...</code></p>", "author": "fjuma", "createdAt": "2020-10-08T16:01:25Z", "path": "controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw new OperationFailedException(ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString()));", "originalCommit": "8debb394fa6d3edab6279733b5c868c9df6e7953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd7fa73984b7150c4dad88890d59b3f273ece759", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nindex fb5409787a..756edb604b 100644\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -46,7 +46,7 @@ public class CharsetValidator extends ModelTypeValidator {\n             } catch (IllegalCharsetNameException e) {\n                 throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n             } catch (UnsupportedCharsetException e) {\n-                throw new OperationFailedException(ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString()));\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n             }\n         }\n     }\n", "next_change": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\ndeleted file mode 100644\nindex 756edb604b..0000000000\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.jboss.as.controller.operations.validation;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.IllegalCharsetNameException;\n-import java.nio.charset.UnsupportedCharsetException;\n-import org.jboss.as.controller.OperationFailedException;\n-import org.jboss.as.controller.logging.ControllerLogger;\n-import org.jboss.dmr.ModelNode;\n-import org.jboss.dmr.ModelType;\n-\n-/**\n- * Validates whether the provided string represents a valid character set.\n- *\n- * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n- */\n-public class CharsetValidator extends ModelTypeValidator {\n-\n-    public CharsetValidator() {\n-        super(ModelType.STRING);\n-    }\n-\n-    @Override\n-    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n-        super.validateParameter(parameterName, value);\n-        if (value.isDefined()) {\n-            try {\n-                Charset hashCharset = Charset.forName(value.asString());\n-            } catch (IllegalCharsetNameException e) {\n-                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n-            } catch (UnsupportedCharsetException e) {\n-                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nnew file mode 100644\nindex 0000000000..756edb604b\n--- /dev/null\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n+            }\n+        }\n+    }\n+}\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\ndeleted file mode 100644\nindex 756edb604b..0000000000\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.jboss.as.controller.operations.validation;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.IllegalCharsetNameException;\n-import java.nio.charset.UnsupportedCharsetException;\n-import org.jboss.as.controller.OperationFailedException;\n-import org.jboss.as.controller.logging.ControllerLogger;\n-import org.jboss.dmr.ModelNode;\n-import org.jboss.dmr.ModelType;\n-\n-/**\n- * Validates whether the provided string represents a valid character set.\n- *\n- * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n- */\n-public class CharsetValidator extends ModelTypeValidator {\n-\n-    public CharsetValidator() {\n-        super(ModelType.STRING);\n-    }\n-\n-    @Override\n-    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n-        super.validateParameter(parameterName, value);\n-        if (value.isDefined()) {\n-            try {\n-                Charset hashCharset = Charset.forName(value.asString());\n-            } catch (IllegalCharsetNameException e) {\n-                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n-            } catch (UnsupportedCharsetException e) {\n-                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nnew file mode 100644\nindex 0000000000..756edb604b\n--- /dev/null\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n+            }\n+        }\n+    }\n+}\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\ndeleted file mode 100644\nindex 756edb604b..0000000000\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.jboss.as.controller.operations.validation;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.IllegalCharsetNameException;\n-import java.nio.charset.UnsupportedCharsetException;\n-import org.jboss.as.controller.OperationFailedException;\n-import org.jboss.as.controller.logging.ControllerLogger;\n-import org.jboss.dmr.ModelNode;\n-import org.jboss.dmr.ModelType;\n-\n-/**\n- * Validates whether the provided string represents a valid character set.\n- *\n- * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n- */\n-public class CharsetValidator extends ModelTypeValidator {\n-\n-    public CharsetValidator() {\n-        super(ModelType.STRING);\n-    }\n-\n-    @Override\n-    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n-        super.validateParameter(parameterName, value);\n-        if (value.isDefined()) {\n-            try {\n-                Charset hashCharset = Charset.forName(value.asString());\n-            } catch (IllegalCharsetNameException e) {\n-                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n-            } catch (UnsupportedCharsetException e) {\n-                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nnew file mode 100644\nindex 0000000000..756edb604b\n--- /dev/null\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n+            }\n+        }\n+    }\n+}\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\ndeleted file mode 100644\nindex 756edb604b..0000000000\n--- a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020 Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.jboss.as.controller.operations.validation;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.IllegalCharsetNameException;\n-import java.nio.charset.UnsupportedCharsetException;\n-import org.jboss.as.controller.OperationFailedException;\n-import org.jboss.as.controller.logging.ControllerLogger;\n-import org.jboss.dmr.ModelNode;\n-import org.jboss.dmr.ModelType;\n-\n-/**\n- * Validates whether the provided string represents a valid character set.\n- *\n- * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n- */\n-public class CharsetValidator extends ModelTypeValidator {\n-\n-    public CharsetValidator() {\n-        super(ModelType.STRING);\n-    }\n-\n-    @Override\n-    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n-        super.validateParameter(parameterName, value);\n-        if (value.isDefined()) {\n-            try {\n-                Charset hashCharset = Charset.forName(value.asString());\n-            } catch (IllegalCharsetNameException e) {\n-                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n-            } catch (UnsupportedCharsetException e) {\n-                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\nnew file mode 100644\nindex 0000000000..756edb604b\n--- /dev/null\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/validation/CharsetValidator.java\n", "chunk": "@@ -0,0 +1,53 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jboss.as.controller.operations.validation;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n+import org.jboss.as.controller.OperationFailedException;\n+import org.jboss.as.controller.logging.ControllerLogger;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.dmr.ModelType;\n+\n+/**\n+ * Validates whether the provided string represents a valid character set.\n+ *\n+ * @author <a href=\"mailto:szaldana@redhat.com\">Sonia Zaldana</a>\n+ */\n+public class CharsetValidator extends ModelTypeValidator {\n+\n+    public CharsetValidator() {\n+        super(ModelType.STRING);\n+    }\n+\n+    @Override\n+    public void validateParameter(String parameterName, ModelNode value) throws OperationFailedException {\n+        super.validateParameter(parameterName, value);\n+        if (value.isDefined()) {\n+            try {\n+                Charset hashCharset = Charset.forName(value.asString());\n+            } catch (IllegalCharsetNameException e) {\n+                throw ControllerLogger.ROOT_LOGGER.illegalCharsetName(value.asString());\n+            } catch (UnsupportedCharsetException e) {\n+                throw ControllerLogger.ROOT_LOGGER.unsupportedCharset(value.asString());\n+            }\n+        }\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MTU2OQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r501841569", "body": "Instead of modifying the parser values here, the existing `realmParser_11_0` variable needs to be copied to a new `realmParser_12_0` variable and then that should be updated to reference the new `jdbcRealmParser_12_0` variable, the new `propertiesRealmParser_12_0` variable, etc.", "bodyText": "Instead of modifying the parser values here, the existing realmParser_11_0 variable needs to be copied to a new realmParser_12_0 variable and then that should be updated to reference the new jdbcRealmParser_12_0 variable, the new propertiesRealmParser_12_0 variable, etc.", "bodyHTML": "<p dir=\"auto\">Instead of modifying the parser values here, the existing <code>realmParser_11_0</code> variable needs to be copied to a new <code>realmParser_12_0</code> variable and then that should be updated to reference the new <code>jdbcRealmParser_12_0</code> variable, the new <code>propertiesRealmParser_12_0</code> variable, etc.</p>", "author": "fjuma", "createdAt": "2020-10-08T16:09:47Z", "path": "elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java", "diffHunk": "@@ -137,11 +154,11 @@\n             .addChild(customRealmParser)\n             .addChild(customModifiableRealmParser)\n             .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_7_0)\n+            .addChild(jdbcRealmParser_12_0)", "originalCommit": "8debb394fa6d3edab6279733b5c868c9df6e7953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd7fa73984b7150c4dad88890d59b3f273ece759", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex 164fdc0f03..5a78509a9b 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -150,6 +150,22 @@ class RealmParser {\n             .build();\n \n     final PersistentResourceXMLDescription realmParser_11_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_7_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser)\n+            .addChild(ldapRealmParser)\n+            .addChild(fileSystemRealmDescription)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n+    final PersistentResourceXMLDescription realmParser_12_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n             .addChild(aggregateRealmParser_8_0)\n             .addChild(customRealmParser)\n             .addChild(customModifiableRealmParser)\n", "next_change": {"commit": "4e7117f36eae6b6f15b30c1dc49e8a2fee8e8416", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex 5a78509a9b..e84b131efe 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,16 +165,16 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_12_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+    final PersistentResourceXMLDescription realmParser_13_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n             .addChild(aggregateRealmParser_8_0)\n             .addChild(customRealmParser)\n             .addChild(customModifiableRealmParser)\n             .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_12_0)\n+            .addChild(jdbcRealmParser_13_0)\n             .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_12_0)\n+            .addChild(propertiesRealmParser_13_0)\n             .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_12_0)\n+            .addChild(filesystemRealmParser_13_0)\n             .addChild(tokenRealmParser)\n             .addChild(cachingRealmParser)\n             .addChild(distributedRealmParser)\n", "next_change": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex e84b131efe..cf4fc63f5d 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,22 +148,6 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_13_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n-            .addChild(aggregateRealmParser_8_0)\n-            .addChild(customRealmParser)\n-            .addChild(customModifiableRealmParser)\n-            .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_13_0)\n-            .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_13_0)\n-            .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_13_0)\n-            .addChild(tokenRealmParser)\n-            .addChild(cachingRealmParser)\n-            .addChild(distributedRealmParser)\n-            .addChild(failoverRealmParser)\n-            .build();\n-\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex cf4fc63f5d..e84b131efe 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -148,6 +165,22 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n+    final PersistentResourceXMLDescription realmParser_13_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_13_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser_13_0)\n+            .addChild(ldapRealmParser)\n+            .addChild(filesystemRealmParser_13_0)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex e84b131efe..cf4fc63f5d 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,22 +148,6 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_13_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n-            .addChild(aggregateRealmParser_8_0)\n-            .addChild(customRealmParser)\n-            .addChild(customModifiableRealmParser)\n-            .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_13_0)\n-            .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_13_0)\n-            .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_13_0)\n-            .addChild(tokenRealmParser)\n-            .addChild(cachingRealmParser)\n-            .addChild(distributedRealmParser)\n-            .addChild(failoverRealmParser)\n-            .build();\n-\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex cf4fc63f5d..6152b1dda4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -148,6 +165,22 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n+    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_14_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser_14_0)\n+            .addChild(ldapRealmParser)\n+            .addChild(filesystemRealmParser_14_0)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex 6152b1dda4..cf4fc63f5d 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,22 +148,6 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n-            .addChild(aggregateRealmParser_8_0)\n-            .addChild(customRealmParser)\n-            .addChild(customModifiableRealmParser)\n-            .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_14_0)\n-            .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_14_0)\n-            .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_14_0)\n-            .addChild(tokenRealmParser)\n-            .addChild(cachingRealmParser)\n-            .addChild(distributedRealmParser)\n-            .addChild(failoverRealmParser)\n-            .build();\n-\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex cf4fc63f5d..6152b1dda4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -148,6 +165,22 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n+    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_14_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser_14_0)\n+            .addChild(ldapRealmParser)\n+            .addChild(filesystemRealmParser_14_0)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex 6152b1dda4..cf4fc63f5d 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -165,22 +148,6 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n-    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n-            .addChild(aggregateRealmParser_8_0)\n-            .addChild(customRealmParser)\n-            .addChild(customModifiableRealmParser)\n-            .addChild(identityRealmParser)\n-            .addChild(jdbcRealmParser_14_0)\n-            .addChild(keyStoreRealmParser)\n-            .addChild(propertiesRealmParser_14_0)\n-            .addChild(ldapRealmParser)\n-            .addChild(filesystemRealmParser_14_0)\n-            .addChild(tokenRealmParser)\n-            .addChild(cachingRealmParser)\n-            .addChild(distributedRealmParser)\n-            .addChild(failoverRealmParser)\n-            .build();\n-\n     RealmParser() {\n \n     }\n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\nindex cf4fc63f5d..6152b1dda4 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/RealmParser.java\n", "chunk": "@@ -148,6 +165,22 @@ class RealmParser {\n             .addChild(failoverRealmParser)\n             .build();\n \n+    final PersistentResourceXMLDescription realmParser_14_0 = decorator(ElytronDescriptionConstants.SECURITY_REALMS)\n+            .addChild(aggregateRealmParser_8_0)\n+            .addChild(customRealmParser)\n+            .addChild(customModifiableRealmParser)\n+            .addChild(identityRealmParser)\n+            .addChild(jdbcRealmParser_14_0)\n+            .addChild(keyStoreRealmParser)\n+            .addChild(propertiesRealmParser_14_0)\n+            .addChild(ldapRealmParser)\n+            .addChild(filesystemRealmParser_14_0)\n+            .addChild(tokenRealmParser)\n+            .addChild(cachingRealmParser)\n+            .addChild(distributedRealmParser)\n+            .addChild(failoverRealmParser)\n+            .build();\n+\n     RealmParser() {\n \n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "cd7fa73984b7150c4dad88890d59b3f273ece759", "url": "https://github.com/wildfly/wildfly-core/commit/cd7fa73984b7150c4dad88890d59b3f273ece759", "message": "[WFCORE-5027] Updating branch based on feedback", "committedDate": "2020-10-09T14:26:54Z", "type": "forcePushed"}, {"oid": "d7f124cd95985ac6b510041067ce08b14aaf63a4", "url": "https://github.com/wildfly/wildfly-core/commit/d7f124cd95985ac6b510041067ce08b14aaf63a4", "message": "[WFCORE-5027] Updating branch based on feedback", "committedDate": "2020-10-09T18:19:49Z", "type": "forcePushed"}, {"oid": "dbc7bfeed22e69ef37e54bc2dad1538b1b78de9d", "url": "https://github.com/wildfly/wildfly-core/commit/dbc7bfeed22e69ef37e54bc2dad1538b1b78de9d", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-01-11T19:57:17Z", "type": "forcePushed"}, {"oid": "4e7117f36eae6b6f15b30c1dc49e8a2fee8e8416", "url": "https://github.com/wildfly/wildfly-core/commit/4e7117f36eae6b6f15b30c1dc49e8a2fee8e8416", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-01-29T16:39:28Z", "type": "forcePushed"}, {"oid": "a4502b704438e5eaee80b1226563f93b41486eb4", "url": "https://github.com/wildfly/wildfly-core/commit/a4502b704438e5eaee80b1226563f93b41486eb4", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-02-04T18:44:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDU2MzE3NQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4324#discussion_r570563175", "body": "These will need to be moved to the new `from13` method.", "bodyText": "These will need to be moved to the new from13 method.", "bodyHTML": "<p dir=\"auto\">These will need to be moved to the new <code>from13</code> method.</p>", "author": "fjuma", "createdAt": "2021-02-04T21:42:34Z", "path": "elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java", "diffHunk": "@@ -133,6 +137,32 @@ private static void from12(ChainedTransformationDescriptionBuilder chainedBuilde\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+        builder.addChildResource(PathElement.pathElement(PROPERTIES_REALM))", "originalCommit": "a4502b704438e5eaee80b1226563f93b41486eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 8f9f573ecc..5623055d8a 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -137,32 +146,6 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n-        builder.addChildResource(PathElement.pathElement(PROPERTIES_REALM))\n-                .getAttributeBuilder()\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET);\n-\n-        builder.addChildResource(PathElement.pathElement(FILESYSTEM_REALM))\n-                .getAttributeBuilder()\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET);\n-\n-        builder.addChildResource(PathElement.pathElement(JDBC_REALM))\n-                .getAttributeBuilder()\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET);\n-\n-        builder.addChildResource(PathElement.pathElement(LDAP_REALM))\n-                .getAttributeBuilder()\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n-                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n-                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING);\n-\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 5623055d8a..e5127d78e0 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -146,6 +150,32 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+        builder.addChildResource(PathElement.pathElement(PROPERTIES_REALM))\n+                .getAttributeBuilder()\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET);\n+\n+        builder.addChildResource(PathElement.pathElement(FILESYSTEM_REALM))\n+                .getAttributeBuilder()\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET);\n+\n+        builder.addChildResource(PathElement.pathElement(JDBC_REALM))\n+                .getAttributeBuilder()\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET);\n+\n+        builder.addChildResource(PathElement.pathElement(LDAP_REALM))\n+                .getAttributeBuilder()\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_CHARSET)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING);\n+\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "d04ad69a364913407a661486a1d5570f67d262c9", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex e5127d78e0..c58e9417ff 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -175,6 +154,26 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, HASH_ENCODING)\n                 .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_CHARSET)\n                 .addRejectCheck(RejectAttributeChecker.DEFINED, HASH_ENCODING);\n+    }\n+\n+    private static void from13(ChainedTransformationDescriptionBuilder chainedBuilder) {\n+        ResourceTransformationDescriptionBuilder builder = chainedBuilder.createBuilder(ELYTRON_13_0_0, ELYTRON_12_0_0);\n+        builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.EXPRESSION, ElytronDescriptionConstants.ENCRYPTION));\n+        builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.SECRET_KEY_CREDENTIAL_STORE));\n+        builder.addChildResource(PathElement.pathElement(ElytronDescriptionConstants.CREDENTIAL_STORE))\n+            .getAttributeBuilder()\n+            .addRename(ElytronDescriptionConstants.PATH, ElytronDescriptionConstants.LOCATION)\n+            .end();\n+    }\n+\n+    private static void from12(ChainedTransformationDescriptionBuilder chainedBuilder) {\n+        ResourceTransformationDescriptionBuilder builder = chainedBuilder.createBuilder(ELYTRON_12_0_0, ELYTRON_11_0_0);\n+        builder.addChildResource(PathElement.pathElement(ElytronDescriptionConstants.KEY_MANAGER))\n+                .getAttributeBuilder()\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, ElytronDescriptionConstants.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n+                .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n+                .end();\n+\n \n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n", "next_change": {"commit": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex c58e9417ff..5623055d8a 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -174,7 +146,6 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n-\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 5623055d8a..c58e9417ff 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -146,6 +174,7 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "61a961d7147f200cbe024586a8ab431285e80407", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex c58e9417ff..5623055d8a 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -174,7 +146,6 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n-\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "151880ed8b7825dee0df01b75c46203d8e9d4397", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 5623055d8a..c58e9417ff 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -146,6 +174,7 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex c58e9417ff..5623055d8a 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -174,7 +146,6 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n-\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": {"commit": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "changed_code": [{"header": "diff --git a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\nindex 5623055d8a..c58e9417ff 100644\n--- a/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n+++ b/elytron/src/main/java/org/wildfly/extension/elytron/ElytronSubsystemTransformers.java\n", "chunk": "@@ -146,6 +174,7 @@ public final class ElytronSubsystemTransformers implements ExtensionTransformerR\n                 .setDiscard(DiscardAttributeChecker.UNDEFINED, SSLDefinitions.GENERATE_SELF_SIGNED_CERTIFICATE_HOST)\n                 .end();\n \n+\n         builder.rejectChildResource(PathElement.pathElement(ElytronDescriptionConstants.CASE_PRINCIPAL_TRANSFORMER));\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "714733f3dfc8a36ce71dff388bd51429cfbf497c", "url": "https://github.com/wildfly/wildfly-core/commit/714733f3dfc8a36ce71dff388bd51429cfbf497c", "message": "[WFCORE-5341] Add version 14 of the WildFly Elytron model and schema.", "committedDate": "2021-03-17T16:17:41Z", "type": "commit"}, {"oid": "4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "url": "https://github.com/wildfly/wildfly-core/commit/4933c8ca0c4e0ee4afb9094c2cd6e340a889bca4", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-03-17T20:41:01Z", "type": "forcePushed"}, {"oid": "d04ad69a364913407a661486a1d5570f67d262c9", "url": "https://github.com/wildfly/wildfly-core/commit/d04ad69a364913407a661486a1d5570f67d262c9", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-03-17T20:50:33Z", "type": "forcePushed"}, {"oid": "c336990ef2b10151ae24ca5a4e8e4624592e1f18", "url": "https://github.com/wildfly/wildfly-core/commit/c336990ef2b10151ae24ca5a4e8e4624592e1f18", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-03-18T14:44:32Z", "type": "forcePushed"}, {"oid": "151880ed8b7825dee0df01b75c46203d8e9d4397", "url": "https://github.com/wildfly/wildfly-core/commit/151880ed8b7825dee0df01b75c46203d8e9d4397", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-03-18T14:53:28Z", "type": "forcePushed"}, {"oid": "fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "url": "https://github.com/wildfly/wildfly-core/commit/fc3bf9ebae5d2aaca1b3b3f90e4e647706ff7dd4", "message": "[WFCORE-5341] Merge latest changes from \"master\".", "committedDate": "2021-03-22T15:53:02Z", "type": "commit"}, {"oid": "baed45eb9f35a52ee61147df7988c551cc3ee1db", "url": "https://github.com/wildfly/wildfly-core/commit/baed45eb9f35a52ee61147df7988c551cc3ee1db", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-04-08T18:13:29Z", "type": "forcePushed"}, {"oid": "61a961d7147f200cbe024586a8ab431285e80407", "url": "https://github.com/wildfly/wildfly-core/commit/61a961d7147f200cbe024586a8ab431285e80407", "message": "[WFCORE-5341] Add version 14 of the WildFly Elytron model and schema.", "committedDate": "2021-05-25T13:52:46Z", "type": "forcePushed"}, {"oid": "151880ed8b7825dee0df01b75c46203d8e9d4397", "url": "https://github.com/wildfly/wildfly-core/commit/151880ed8b7825dee0df01b75c46203d8e9d4397", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-03-18T14:53:28Z", "type": "forcePushed"}, {"oid": "0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "url": "https://github.com/wildfly/wildfly-core/commit/0bcc9035efd0a705e0ec6a018a9e6fb29af4f726", "message": "[WFCORE-5341] Add version 14 of the WildFly Elytron model and schema.", "committedDate": "2021-06-01T15:18:54Z", "type": "forcePushed"}, {"oid": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "url": "https://github.com/wildfly/wildfly-core/commit/5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-06-01T15:34:03Z", "type": "commit"}, {"oid": "5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "url": "https://github.com/wildfly/wildfly-core/commit/5eccad679e9e3b8cc0171d1881b2723eaa8a2298", "message": "[WFCORE-5027] Security Realms should support specifying the charset and encoding for credentials", "committedDate": "2021-06-01T15:34:03Z", "type": "forcePushed"}]}