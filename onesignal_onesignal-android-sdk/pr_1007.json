{"pr_number": 1007, "pr_title": "SQL DB Lock Exception added and IAM Cache Clean", "pr_author": "mikechoch", "pr_createdAt": "2020-05-07T03:16:38Z", "pr_url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007", "merge_commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "timeline": [{"oid": "cbe8513eb7f367c94c98b25afd2798ce2b0bd5fa", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/cbe8513eb7f367c94c98b25afd2798ce2b0bd5fa", "message": "* IAM data will pile up on devices and down the road this could become an issue\n  * Includes cleaning impressions, clicks, dismissals and SQL data for IAMs\n* Db lock issue was present during opening db retries, related to #988\n  * Added an extra exception to go along with SQLiteCantOpenDatabaseException, SQLiteDatabaseLockedException\n* Replaced all `getWritableDatabase` and `getReadableDatabase` with `getSQLiteDatabase`\n* Replaced all `getWritableDatabase` and `getReadableDatabase` with `getSQLiteDatabaseWithRetries`", "committedDate": "2020-05-07T03:14:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzODI5OA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r421538298", "body": "why are these methods (cleanCachedNotifications and cleanCachedUniqueOutcomeEventNotifications) inside the thread definition?", "bodyText": "why are these methods (cleanCachedNotifications and cleanCachedUniqueOutcomeEventNotifications) inside the thread definition?", "bodyHTML": "<p dir=\"auto\">why are these methods (cleanCachedNotifications and cleanCachedUniqueOutcomeEventNotifications) inside the thread definition?</p>", "author": "Jeasmine", "createdAt": "2020-05-07T14:15:24Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,188 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_MILLIS = 604_800L;\n+    private final static long SIX_MONTHS_IN_MILLIS = 15_552_000L;\n+\n+    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n+    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n \n     /**\n      * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. In App Messaging id sets (impressions, clicks, views)\n-     * 2. Notifications after 1 week\n-     * 3. Unique outcome events linked to notification ids (1 week)\n+     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n+     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n      */\n-    synchronized static void cleanOldCachedData(final Context context) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-                SQLiteDatabase writableDb = dbHelper.getWritableDbWithRetries();\n+    static void cleanOldCachedData(final Context context) {\n+        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n+        SQLiteDatabase writableDb = dbHelper.getSQLiteDatabaseWithRetries();\n \n-                cleanInAppMessagingCache();\n-                cleanNotificationCache(writableDb);\n-            }\n-        }, OS_DELETE_OLD_CACHED_DATA).start();\n-    }\n-\n-    /**\n-     * TODO: Needs to be implemented to clean out old IAM data used to track impressions, clicks, and viewed IAMs\n-     */\n-    static void cleanInAppMessagingCache() {\n-        // NOTE: Currently IAMs will pile up overtime and since IAMs can be modified, active, inactive, etc.\n-        //  we never truly know when it is the correct time to remove these ids form our cache\n+        cleanNotificationCache(writableDb);\n+        cleanCachedInAppMessages(writableDb);\n     }\n \n     /**\n      * Cleans two notification tables\n      * 1. NotificationTable.TABLE_NAME\n      * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    static void cleanNotificationCache(SQLiteDatabase writableDb) {\n-        cleanOldNotificationData(writableDb);\n-        cleanOldUniqueOutcomeEventNotificationsCache(writableDb);\n-    }\n+    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-    /**\n-     * Deletes any notifications with created timestamps older than 7 days\n-     */\n-    private static void cleanOldNotificationData(SQLiteDatabase writableDb) {\n-        writableDb.delete(NotificationTable.TABLE_NAME,\n-                NotificationTable.COLUMN_NAME_CREATED_TIME + \" < \" + ((System.currentTimeMillis() / 1_000L) - 604_800L),\n-                null);\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+            }\n+\n+            /**\n+             * Deletes notifications with created timestamps older than 7 days\n+             */\n+            private void cleanCachedNotifications(SQLiteDatabase writableDb) {", "originalCommit": "cbe8513eb7f367c94c98b25afd2798ce2b0bd5fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "452e1f55206e35e6b3fe3e8c9902babfbac70487", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9f1950f8..49de30ba 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -53,7 +55,7 @@ class OneSignalCacheCleaner {\n             private void cleanCachedNotifications(SQLiteDatabase writableDb) {\n                 String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n \n-                String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - ONE_WEEK_IN_MILLIS);\n+                String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - ONE_WEEK_IN_SECONDS);\n                 String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n \n                 writableDb.delete(\n", "next_change": {"commit": "4a04184d9c870fdc4fc45149d7f9c8bc1a90053c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 49de30ba..3c16b3eb 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -49,35 +49,6 @@ class OneSignalCacheCleaner {\n                 cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n \n-            /**\n-             * Deletes notifications with created timestamps older than 7 days\n-             */\n-            private void cleanCachedNotifications(SQLiteDatabase writableDb) {\n-                String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n-\n-                String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - ONE_WEEK_IN_SECONDS);\n-                String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n-\n-                writableDb.delete(\n-                        NotificationTable.TABLE_NAME,\n-                        whereStr,\n-                        whereArgs);\n-            }\n-\n-            /**\n-             * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n-             */\n-            private void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n-                String whereStr = \"NOT EXISTS(\" +\n-                        \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                        \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n-\n-                writableDb.delete(\n-                        CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n-                        whereStr,\n-                        null);\n-            }\n-\n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n     }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9f1950f8..5b7b0896 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -47,36 +50,6 @@ class OneSignalCacheCleaner {\n                 cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n \n-            /**\n-             * Deletes notifications with created timestamps older than 7 days\n-             */\n-            private void cleanCachedNotifications(SQLiteDatabase writableDb) {\n-                String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n-\n-                String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - ONE_WEEK_IN_MILLIS);\n-                String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n-\n-                writableDb.delete(\n-                        NotificationTable.TABLE_NAME,\n-                        whereStr,\n-                        whereArgs);\n-            }\n-\n-            /**\n-             * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n-             */\n-            private void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n-                String whereStr = \"NOT EXISTS(SELECT NULL FROM \" + NotificationTable.TABLE_NAME +\n-                        \" n WHERE\" +\n-                        \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID +\n-                        \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n-\n-                writableDb.delete(\n-                        CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n-                        whereStr,\n-                        null);\n-            }\n-\n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n     }\n \n", "next_change": {"commit": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 5b7b0896..1627e14c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -46,8 +42,18 @@ class OneSignalCacheCleaner {\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-                cleanCachedNotifications(writableDb);\n-                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+                writableDb.beginTransaction();\n+                try {\n+                    cleanCachedNotifications(writableDb);\n+                    cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+                    writableDb.setTransactionSuccessful();\n+                } finally {\n+                    try {\n+                        writableDb.endTransaction(); // May throw if transaction was never opened or DB is full.\n+                    } catch (SQLException t) {\n+                        OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error closing transaction! \", t);\n+                    }\n+                }\n             }\n \n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n", "next_change": {"commit": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 1627e14c..37efd5d5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -42,18 +47,8 @@ class OneSignalCacheCleaner {\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-                writableDb.beginTransaction();\n-                try {\n-                    cleanCachedNotifications(writableDb);\n-                    cleanCachedUniqueOutcomeEventNotifications(writableDb);\n-                    writableDb.setTransactionSuccessful();\n-                } finally {\n-                    try {\n-                        writableDb.endTransaction(); // May throw if transaction was never opened or DB is full.\n-                    } catch (SQLException t) {\n-                        OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error closing transaction! \", t);\n-                    }\n-                }\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n \n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n", "next_change": {"commit": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 37efd5d5..858af238 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -47,8 +42,18 @@ class OneSignalCacheCleaner {\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-                cleanCachedNotifications(writableDb);\n-                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+                writableDb.beginTransaction();\n+                try {\n+                    cleanCachedNotifications(writableDb);\n+                    cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+                    writableDb.setTransactionSuccessful();\n+                } finally {\n+                    try {\n+                        writableDb.endTransaction(); // May throw if transaction was never opened or DB is full.\n+                    } catch (SQLException t) {\n+                        OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error closing transaction! \", t);\n+                    }\n+                }\n             }\n \n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n", "next_change": {"commit": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 858af238..03d87978 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -36,24 +31,14 @@ class OneSignalCacheCleaner {\n      * 1. NotificationTable.TABLE_NAME\n      * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n+    synchronized static void cleanNotificationCache(final OneSignalDbHelper writableDb) {\n         new Thread(new Runnable() {\n             @Override\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-                writableDb.beginTransaction();\n-                try {\n-                    cleanCachedNotifications(writableDb);\n-                    cleanCachedUniqueOutcomeEventNotifications(writableDb);\n-                    writableDb.setTransactionSuccessful();\n-                } finally {\n-                    try {\n-                        writableDb.endTransaction(); // May throw if transaction was never opened or DB is full.\n-                    } catch (SQLException t) {\n-                        OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error closing transaction! \", t);\n-                    }\n-                }\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n \n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n", "next_change": {"commit": "ba801fd71fbe18f0c971623ef565f192f5269438", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 03d87978..e9544360 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -31,14 +37,24 @@ class OneSignalCacheCleaner {\n      * 1. NotificationTable.TABLE_NAME\n      * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    synchronized static void cleanNotificationCache(final OneSignalDbHelper writableDb) {\n+    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n         new Thread(new Runnable() {\n             @Override\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-                cleanCachedNotifications(writableDb);\n-                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+                writableDb.beginTransaction();\n+                try {\n+                    cleanCachedNotifications(writableDb);\n+                    cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+                    writableDb.setTransactionSuccessful();\n+                } finally {\n+                    try {\n+                        writableDb.endTransaction(); // May throw if transaction was never opened or DB is full.\n+                    } catch (SQLException t) {\n+                        OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error closing transaction! \", t);\n+                    }\n+                }\n             }\n \n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n", "next_change": {"commit": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex e9544360..9bd01e01 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -37,24 +31,14 @@ class OneSignalCacheCleaner {\n      * 1. NotificationTable.TABLE_NAME\n      * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n+    synchronized static void cleanNotificationCache(final OneSignalDbHelper writableDb) {\n         new Thread(new Runnable() {\n             @Override\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-                writableDb.beginTransaction();\n-                try {\n-                    cleanCachedNotifications(writableDb);\n-                    cleanCachedUniqueOutcomeEventNotifications(writableDb);\n-                    writableDb.setTransactionSuccessful();\n-                } finally {\n-                    try {\n-                        writableDb.endTransaction(); // May throw if transaction was never opened or DB is full.\n-                    } catch (SQLException t) {\n-                        OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error closing transaction! \", t);\n-                    }\n-                }\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n \n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n", "next_change": {"commit": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9bd01e01..bf238fc5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -38,7 +39,6 @@ class OneSignalCacheCleaner {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n                 cleanCachedNotifications(writableDb);\n-                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n \n         }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n", "next_change": {"commit": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\ndeleted file mode 100644\nindex bf238fc5..00000000\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ /dev/null\n", "chunk": "@@ -1,88 +0,0 @@\n-package com.onesignal;\n-\n-import android.content.Context;\n-import android.os.Process;\n-\n-import androidx.annotation.WorkerThread;\n-\n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OutcomesDbContract;\n-\n-class OneSignalCacheCleaner {\n-\n-    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in second\n-\n-    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n-    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n-\n-    /**\n-     * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n-     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n-     */\n-    static void cleanOldCachedData(final Context context) {\n-        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-        cleanNotificationCache(dbHelper);\n-        cleanCachedInAppMessages(dbHelper);\n-    }\n-\n-    /**\n-     * Cleans two notification tables\n-     * 1. NotificationTable.TABLE_NAME\n-     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n-     */\n-    synchronized static void cleanNotificationCache(final OneSignalDbHelper writableDb) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                cleanCachedNotifications(writableDb);\n-            }\n-\n-        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n-    }\n-\n-    /**\n-     * Remove IAMs that the last display time was six month ago\n-     * 1. Query for all old message ids and old clicked click ids\n-     * 2. Delete old IAMs from SQL\n-     * 3. Use queried data to clean SharedPreferences\n-     */\n-    @WorkerThread\n-    static synchronized void cleanCachedInAppMessages(final OneSignalDbHelper dbHelper) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                OSInAppMessageRepository inAppMessageRepository = OneSignal\n-                        .getInAppMessageController()\n-                        .getInAppMessageRepository(dbHelper);\n-                inAppMessageRepository.cleanCachedInAppMessages();\n-            }\n-        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n-    }\n-\n-    /**\n-     * Deletes notifications with created timestamps older than 7 days\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n-\n-        String sevenDaysAgoInSeconds = String.valueOf((OneSignal.getTime().getCurrentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n-        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n-\n-        writableDb.delete(\n-                NotificationTable.TABLE_NAME,\n-                whereStr,\n-                whereArgs);\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "2be8e022430a96c98d7367392e7aab218528e8c1", "committedDate": "2020-06-08 11:15:44 -0400", "message": "Fix the `NPE` within `OneSignalCacheCleaner.java` (#1047)"}, {"oid": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "committedDate": "2020-06-09 14:14:08 -0400", "message": "Adding 2 layers of SQL DB security and minor clean up * Removed the commented `enableWriteAheadLogging`   * No need for this as this allows concurrent read and writes to occur and we would rather pause a read while a write occurs   * Pausing will ensure that we are querying the most updated data * 2 layers of security for SQL DB regarding `OSInAppMessageRepository.java`   * First one will be transactions using `beginTransaction`, `setTransactionSuccessful`, and `endTransaction` methods wherever we `insert`, `delete`, or `update`   * Second one is keeping TABLE manipulation or reading within the same file and setting these methods as synchronized so that any other TABLE touching that occurs won't happen till any current methods are complete   * The combination of the two steps should help prevent any conflicts between SQL DB and solve the locking issues"}, {"oid": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "committedDate": "2020-06-10 15:30:47 -0400", "message": "Changed `OSUtils.<String>newConcurrentSet()` default to `null` (#1048)"}, {"oid": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "committedDate": "2020-06-10 16:53:44 -0400", "message": "Using singleton `OSInAppMessageController.java` instead of new * Created singleton based `getInAppMessageRepository` method inside of `OSInAppMessageController.java` class * This allows the synchronized to apply to multiple methods being called from the class instance * Deleted unused thread name since new Thread was moved toi cache cleaning file with different thread name now"}, {"oid": "53c86e58f11fb14a244e4239f072f1fc65c40a97", "committedDate": "2020-06-10 16:57:27 -0400", "message": "Merge branch 'master' into fix/sql_db_lock_added_more_transactions"}, {"oid": "2feac9dbb75de8777357e462c1ef60629ce57130", "committedDate": "2020-06-10 22:35:15 -0400", "message": "`IAM_CACHE_DATA_LIFETIME` moved to `OSInAppMessageRepository.java`"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "8aeb5bfbd32112f07ea4682ac3bc170944cb01a1", "committedDate": "2020-08-21 16:31:34 -0300", "message": "Fully implement `NotificationWillShowInForeground` (#1010)"}, {"oid": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "committedDate": "2020-09-16 11:29:32 -0300", "message": "Add and improve logs on public methods (#1146)"}, {"oid": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Reset dynamic session launch time"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "30d8a89e41325023c05559b2570ce40e3ce27cdd", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Make an abstract class for SyncService common methods"}, {"oid": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "committedDate": "2021-03-15 16:10:10 -0300", "message": "Move outcome table access to OSOutcomeEventsCache"}, {"oid": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "committedDate": "2021-03-15 16:10:53 -0300", "message": "Rename OneSignalCacheCleaner to OSNotificationDataController"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0NTE2NQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r421545165", "body": "small optimization, but you can avoid dismissedMessages and impressionedMessages shared preference query if you already know that oldMessageIds is null or empty", "bodyText": "small optimization, but you can avoid dismissedMessages and impressionedMessages shared preference query if you already know that oldMessageIds is null or empty", "bodyHTML": "<p dir=\"auto\">small optimization, but you can avoid dismissedMessages and impressionedMessages shared preference query if you already know that oldMessageIds is null or empty</p>", "author": "Jeasmine", "createdAt": "2020-05-07T14:24:09Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,188 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_MILLIS = 604_800L;\n+    private final static long SIX_MONTHS_IN_MILLIS = 15_552_000L;\n+\n+    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n+    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n \n     /**\n      * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. In App Messaging id sets (impressions, clicks, views)\n-     * 2. Notifications after 1 week\n-     * 3. Unique outcome events linked to notification ids (1 week)\n+     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n+     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n      */\n-    synchronized static void cleanOldCachedData(final Context context) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-                SQLiteDatabase writableDb = dbHelper.getWritableDbWithRetries();\n+    static void cleanOldCachedData(final Context context) {\n+        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n+        SQLiteDatabase writableDb = dbHelper.getSQLiteDatabaseWithRetries();\n \n-                cleanInAppMessagingCache();\n-                cleanNotificationCache(writableDb);\n-            }\n-        }, OS_DELETE_OLD_CACHED_DATA).start();\n-    }\n-\n-    /**\n-     * TODO: Needs to be implemented to clean out old IAM data used to track impressions, clicks, and viewed IAMs\n-     */\n-    static void cleanInAppMessagingCache() {\n-        // NOTE: Currently IAMs will pile up overtime and since IAMs can be modified, active, inactive, etc.\n-        //  we never truly know when it is the correct time to remove these ids form our cache\n+        cleanNotificationCache(writableDb);\n+        cleanCachedInAppMessages(writableDb);\n     }\n \n     /**\n      * Cleans two notification tables\n      * 1. NotificationTable.TABLE_NAME\n      * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    static void cleanNotificationCache(SQLiteDatabase writableDb) {\n-        cleanOldNotificationData(writableDb);\n-        cleanOldUniqueOutcomeEventNotificationsCache(writableDb);\n-    }\n+    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-    /**\n-     * Deletes any notifications with created timestamps older than 7 days\n-     */\n-    private static void cleanOldNotificationData(SQLiteDatabase writableDb) {\n-        writableDb.delete(NotificationTable.TABLE_NAME,\n-                NotificationTable.COLUMN_NAME_CREATED_TIME + \" < \" + ((System.currentTimeMillis() / 1_000L) - 604_800L),\n-                null);\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+            }\n+\n+            /**\n+             * Deletes notifications with created timestamps older than 7 days\n+             */\n+            private void cleanCachedNotifications(SQLiteDatabase writableDb) {\n+                String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n+\n+                String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - ONE_WEEK_IN_MILLIS);\n+                String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n+\n+                writableDb.delete(\n+                        NotificationTable.TABLE_NAME,\n+                        whereStr,\n+                        whereArgs);\n+            }\n+\n+            /**\n+             * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+             */\n+            private void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+                String whereStr = \"NOT EXISTS(SELECT NULL FROM \" + NotificationTable.TABLE_NAME +\n+                        \" n WHERE\" +\n+                        \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID +\n+                        \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+\n+                writableDb.delete(\n+                        CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                        whereStr,\n+                        null);\n+            }\n+\n+        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n     }\n \n     /**\n-     * Deletes any notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * Remove IAMs that the last display time was six month ago\n+     * 1. Query for all old message ids and old clicked click ids\n+     * 2. Delete old IAMs from SQL\n+     * 3. Use queried data to clean SharedPreferences\n      */\n-    static void cleanOldUniqueOutcomeEventNotificationsCache(SQLiteDatabase writableDb) {\n-        writableDb.delete(CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n-                \"NOT EXISTS(SELECT NULL FROM \" + NotificationTable.TABLE_NAME +\n-                        \" n WHERE\" +\n-                        \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID  + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\",\n-                null);\n+    @WorkerThread\n+    synchronized static void cleanCachedInAppMessages(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n+\n+                // 1. Query for all old message ids and old clicked click ids\n+                String[] retColumns = new String[]{\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID,\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_CLICK_IDS\n+                };\n+\n+                String whereStr = OneSignalDbContract.InAppMessageTable.COLUMN_NAME_LAST_DISPLAY + \" < ?\";\n+\n+                String sixMonthsAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - SIX_MONTHS_IN_MILLIS);\n+                String[] whereArgs = new String[]{sixMonthsAgoInSeconds};\n+\n+                Cursor cursor = writableDb.query(OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                        retColumns,\n+                        whereStr,\n+                        whereArgs,\n+                        null,\n+                        null,\n+                        null);\n+\n+                // From cursor get all of the old message ids and old clicked click ids\n+                Set<String> oldMessageIds = OSUtils.newConcurrentSet();\n+                Set<String> oldClickedClickIds = OSUtils.newConcurrentSet();\n+                if (cursor.moveToFirst()) {\n+                    do {\n+                        String oldMessageId = cursor.getString(\n+                                cursor.getColumnIndex(\n+                                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID));\n+                        String oldClickIds = cursor.getString(\n+                                cursor.getColumnIndex(\n+                                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID));\n+\n+                        oldMessageIds.add(oldMessageId);\n+                        oldClickedClickIds.addAll(OSUtils.newStringSetFromString(oldClickIds));\n+                    } while (cursor.moveToNext());\n+                }\n+                cursor.close();\n+\n+                // 2. Delete old IAMs from SQL\n+                writableDb.delete(\n+                        OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                        whereStr,\n+                        whereArgs);\n+\n+                // 3. Use queried data to clean SharedPreferences\n+                cleanCachedSharedPreferenceIamData(oldMessageIds, oldClickedClickIds);\n+            }\n+\n+            private void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n+                // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n+                Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                        OSUtils.<String>newConcurrentSet());\n+\n+                Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                        OSUtils.<String>newConcurrentSet());\n+\n+                Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                        OSUtils.<String>newConcurrentSet());\n+\n+                if (oldMessageIds != null) {", "originalCommit": "cbe8513eb7f367c94c98b25afd2798ce2b0bd5fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a04184d9c870fdc4fc45149d7f9c8bc1a90053c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9f1950f8..3c16b3eb 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -140,52 +120,95 @@ class OneSignalCacheCleaner {\n                 cleanCachedSharedPreferenceIamData(oldMessageIds, oldClickedClickIds);\n             }\n \n-            private void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n-                // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n-                Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                        OSUtils.<String>newConcurrentSet());\n+        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n+    }\n \n-                Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                        OSUtils.<String>newConcurrentSet());\n+    /**\n+     * Deletes notifications with created timestamps older than 7 days\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n+     */\n+    private static void cleanCachedNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n \n-                Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                        OSUtils.<String>newConcurrentSet());\n-\n-                if (oldMessageIds != null) {\n-                    if (dismissedMessages != null) {\n-                        dismissedMessages.removeAll(oldMessageIds);\n-                        OneSignalPrefs.saveStringSet(\n-                                OneSignalPrefs.PREFS_ONESIGNAL,\n-                                OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                                dismissedMessages);\n-                    }\n+        String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - ONE_WEEK_IN_SECONDS);\n+        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n \n-                    if (impressionedMessages != null) {\n-                        impressionedMessages.removeAll(oldMessageIds);\n-                        OneSignalPrefs.saveStringSet(\n-                                OneSignalPrefs.PREFS_ONESIGNAL,\n-                                OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                                impressionedMessages);\n-                    }\n-                }\n+        writableDb.delete(\n+                NotificationTable.TABLE_NAME,\n+                whereStr,\n+                whereArgs);\n+    }\n \n-                if (clickedClickIds != null && oldClickedClickIds != null) {\n-                    clickedClickIds.removeAll(oldClickedClickIds);\n-                    OneSignalPrefs.saveStringSet(\n-                            OneSignalPrefs.PREFS_ONESIGNAL,\n-                            OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                            clickedClickIds);\n-                }\n+    /**\n+     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n+     */\n+    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = \"NOT EXISTS(\" +\n+                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+\n+        writableDb.delete(\n+                CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                whereStr,\n+                null);\n+    }\n \n+    /**\n+     * Deletes old IAM SharedPreference dismissed and impressioned message ids as well as clicked click ids\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n+     */\n+    private static void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n+        // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n+        Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n+                OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                OSUtils.<String>newConcurrentSet());\n+\n+        Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n+                OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                OSUtils.<String>newConcurrentSet());\n+\n+        Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n+                OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                OSUtils.<String>newConcurrentSet());\n+\n+        if (oldMessageIds != null) {\n+            if (dismissedMessages != null) {\n+                dismissedMessages.removeAll(oldMessageIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                        dismissedMessages);\n             }\n \n-        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n+            if (impressionedMessages != null) {\n+                impressionedMessages.removeAll(oldMessageIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                        impressionedMessages);\n+            }\n+        }\n+\n+        if (clickedClickIds != null && oldClickedClickIds != null) {\n+            clickedClickIds.removeAll(oldClickedClickIds);\n+            OneSignalPrefs.saveStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                    clickedClickIds);\n+        }\n     }\n \n }\n", "next_change": {"commit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 3c16b3eb..14bed3b6 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -202,12 +202,19 @@ class OneSignalCacheCleaner {\n             }\n         }\n \n-        if (clickedClickIds != null && oldClickedClickIds != null) {\n-            clickedClickIds.removeAll(oldClickedClickIds);\n-            OneSignalPrefs.saveStringSet(\n+        if (oldClickedClickIds != null && oldClickedClickIds.size() > 0) {\n+            Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n                     OneSignalPrefs.PREFS_ONESIGNAL,\n                     OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                    clickedClickIds);\n+                    OSUtils.<String>newConcurrentSet());\n+\n+            if (clickedClickIds != null && clickedClickIds.size() > 0) {\n+                clickedClickIds.removeAll(oldClickedClickIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                        clickedClickIds);\n+            }\n         }\n     }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9f1950f8..5b7b0896 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -137,55 +123,112 @@ class OneSignalCacheCleaner {\n                         whereArgs);\n \n                 // 3. Use queried data to clean SharedPreferences\n-                cleanCachedSharedPreferenceIamData(oldMessageIds, oldClickedClickIds);\n+                cleanInAppMessageIds(oldMessageIds);\n+                cleanInAppMessageClickedClickIds(oldClickedClickIds);\n             }\n \n-            private void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n-                // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n-                Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n+        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n+    }\n+\n+    /**\n+     * Deletes notifications with created timestamps older than 7 days\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n+     */\n+    private static void cleanCachedNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n+\n+        String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n+        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n+\n+        writableDb.delete(\n+                NotificationTable.TABLE_NAME,\n+                whereStr,\n+                whereArgs);\n+    }\n+\n+    /**\n+     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n+     */\n+    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = \"NOT EXISTS(\" +\n+                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+\n+        writableDb.delete(\n+                CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                whereStr,\n+                null);\n+    }\n+\n+    /**\n+     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n+     *  1. Dismissed message ids\n+     *  2. Impressioned message ids\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n+     */\n+    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n+        if (oldMessageIds != null && oldMessageIds.size() > 0) {\n+            Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                    OSUtils.<String>newConcurrentSet());\n+\n+            Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                    OSUtils.<String>newConcurrentSet());\n+\n+            if (dismissedMessages != null && dismissedMessages.size() > 0) {\n+                dismissedMessages.removeAll(oldMessageIds);\n+                OneSignalPrefs.saveStringSet(\n                         OneSignalPrefs.PREFS_ONESIGNAL,\n                         OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                        OSUtils.<String>newConcurrentSet());\n+                        dismissedMessages);\n+            }\n \n-                Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n+            if (impressionedMessages != null && impressionedMessages.size() > 0) {\n+                impressionedMessages.removeAll(oldMessageIds);\n+                OneSignalPrefs.saveStringSet(\n                         OneSignalPrefs.PREFS_ONESIGNAL,\n                         OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                        OSUtils.<String>newConcurrentSet());\n+                        impressionedMessages);\n+            }\n+        }\n+    }\n \n-                Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n+    /**\n+     * Clean up 6 month old IAM clicked click ids in {@link android.content.SharedPreferences}:\n+     *  1. Clicked click ids from elements within IAM\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n+     */\n+    private static void cleanInAppMessageClickedClickIds(Set<String> oldClickedClickIds) {\n+        if (oldClickedClickIds != null && oldClickedClickIds.size() > 0) {\n+            Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                    OSUtils.<String>newConcurrentSet());\n+\n+            if (clickedClickIds != null && clickedClickIds.size() > 0) {\n+                clickedClickIds.removeAll(oldClickedClickIds);\n+                OneSignalPrefs.saveStringSet(\n                         OneSignalPrefs.PREFS_ONESIGNAL,\n                         OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                        OSUtils.<String>newConcurrentSet());\n-\n-                if (oldMessageIds != null) {\n-                    if (dismissedMessages != null) {\n-                        dismissedMessages.removeAll(oldMessageIds);\n-                        OneSignalPrefs.saveStringSet(\n-                                OneSignalPrefs.PREFS_ONESIGNAL,\n-                                OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                                dismissedMessages);\n-                    }\n-\n-                    if (impressionedMessages != null) {\n-                        impressionedMessages.removeAll(oldMessageIds);\n-                        OneSignalPrefs.saveStringSet(\n-                                OneSignalPrefs.PREFS_ONESIGNAL,\n-                                OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                                impressionedMessages);\n-                    }\n-                }\n-\n-                if (clickedClickIds != null && oldClickedClickIds != null) {\n-                    clickedClickIds.removeAll(oldClickedClickIds);\n-                    OneSignalPrefs.saveStringSet(\n-                            OneSignalPrefs.PREFS_ONESIGNAL,\n-                            OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                            clickedClickIds);\n-                }\n-\n+                        clickedClickIds);\n             }\n-\n-        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n+        }\n     }\n \n }\n", "next_change": {"commit": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 5b7b0896..1627e14c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -159,76 +105,14 @@ class OneSignalCacheCleaner {\n     private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n         String whereStr = \"NOT EXISTS(\" +\n                 \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n+                \" AND \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n+                \"\\\")\";\n \n         writableDb.delete(\n-                CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_TABLE,\n                 whereStr,\n                 null);\n     }\n \n-    /**\n-     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n-     *  1. Dismissed message ids\n-     *  2. Impressioned message ids\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n-     * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n-     */\n-    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n-        if (oldMessageIds != null && oldMessageIds.size() > 0) {\n-            Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                    OSUtils.<String>newConcurrentSet());\n-\n-            Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                    OSUtils.<String>newConcurrentSet());\n-\n-            if (dismissedMessages != null && dismissedMessages.size() > 0) {\n-                dismissedMessages.removeAll(oldMessageIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                        dismissedMessages);\n-            }\n-\n-            if (impressionedMessages != null && impressionedMessages.size() > 0) {\n-                impressionedMessages.removeAll(oldMessageIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                        impressionedMessages);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Clean up 6 month old IAM clicked click ids in {@link android.content.SharedPreferences}:\n-     *  1. Clicked click ids from elements within IAM\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n-     * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n-     */\n-    private static void cleanInAppMessageClickedClickIds(Set<String> oldClickedClickIds) {\n-        if (oldClickedClickIds != null && oldClickedClickIds.size() > 0) {\n-            Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                    OSUtils.<String>newConcurrentSet());\n-\n-            if (clickedClickIds != null && clickedClickIds.size() > 0) {\n-                clickedClickIds.removeAll(oldClickedClickIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                        clickedClickIds);\n-            }\n-        }\n-    }\n-\n }\n", "next_change": {"commit": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 1627e14c..37efd5d5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -115,4 +170,68 @@ class OneSignalCacheCleaner {\n                 null);\n     }\n \n+    /**\n+     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n+     *  1. Dismissed message ids\n+     *  2. Impressioned message ids\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n+     */\n+    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n+        if (oldMessageIds != null && oldMessageIds.size() > 0) {\n+            Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                    null);\n+\n+            Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                    null);\n+\n+            if (dismissedMessages != null && dismissedMessages.size() > 0) {\n+                dismissedMessages.removeAll(oldMessageIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                        dismissedMessages);\n+            }\n+\n+            if (impressionedMessages != null && impressionedMessages.size() > 0) {\n+                impressionedMessages.removeAll(oldMessageIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                        impressionedMessages);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Clean up 6 month old IAM clicked click ids in {@link android.content.SharedPreferences}:\n+     *  1. Clicked click ids from elements within IAM\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n+     */\n+    private static void cleanInAppMessageClickedClickIds(Set<String> oldClickedClickIds) {\n+        if (oldClickedClickIds != null && oldClickedClickIds.size() > 0) {\n+            Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                    null);\n+\n+            if (clickedClickIds != null && clickedClickIds.size() > 0) {\n+                clickedClickIds.removeAll(oldClickedClickIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                        clickedClickIds);\n+            }\n+        }\n+    }\n+\n }\n", "next_change": {"commit": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 37efd5d5..858af238 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -170,68 +119,4 @@ class OneSignalCacheCleaner {\n                 null);\n     }\n \n-    /**\n-     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n-     *  1. Dismissed message ids\n-     *  2. Impressioned message ids\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n-     * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n-     */\n-    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n-        if (oldMessageIds != null && oldMessageIds.size() > 0) {\n-            Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                    null);\n-\n-            Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                    null);\n-\n-            if (dismissedMessages != null && dismissedMessages.size() > 0) {\n-                dismissedMessages.removeAll(oldMessageIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                        dismissedMessages);\n-            }\n-\n-            if (impressionedMessages != null && impressionedMessages.size() > 0) {\n-                impressionedMessages.removeAll(oldMessageIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                        impressionedMessages);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Clean up 6 month old IAM clicked click ids in {@link android.content.SharedPreferences}:\n-     *  1. Clicked click ids from elements within IAM\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n-     * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n-     */\n-    private static void cleanInAppMessageClickedClickIds(Set<String> oldClickedClickIds) {\n-        if (oldClickedClickIds != null && oldClickedClickIds.size() > 0) {\n-            Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                    null);\n-\n-            if (clickedClickIds != null && clickedClickIds.size() > 0) {\n-                clickedClickIds.removeAll(oldClickedClickIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                        clickedClickIds);\n-            }\n-        }\n-    }\n-\n }\n", "next_change": {"commit": "53c86e58f11fb14a244e4239f072f1fc65c40a97", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 858af238..88f2ed27 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -118,5 +118,5 @@ class OneSignalCacheCleaner {\n                 whereStr,\n                 null);\n     }\n-\n+  \n }\n", "next_change": {"commit": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 88f2ed27..03d87978 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -118,5 +105,5 @@ class OneSignalCacheCleaner {\n                 whereStr,\n                 null);\n     }\n-  \n+\n }\n", "next_change": {"commit": "ba801fd71fbe18f0c971623ef565f192f5269438", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 03d87978..e9544360 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -88,20 +103,19 @@ class OneSignalCacheCleaner {\n     /**\n      * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n      * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n      * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n      */\n-    private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n+    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n         String whereStr = \"NOT EXISTS(\" +\n                 \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n+                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n                 \"\\\")\";\n \n         writableDb.delete(\n-                OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_TABLE,\n+                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n                 whereStr,\n                 null);\n     }\n", "next_change": {"commit": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex e9544360..9bd01e01 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -103,19 +88,20 @@ class OneSignalCacheCleaner {\n     /**\n      * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n      * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n      * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n+     *\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n      */\n-    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+    private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n         String whereStr = \"NOT EXISTS(\" +\n                 \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n+                \" AND \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n                 \"\\\")\";\n \n         writableDb.delete(\n-                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n+                OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_TABLE,\n                 whereStr,\n                 null);\n     }\n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9bd01e01..a0a5936c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -96,12 +98,12 @@ class OneSignalCacheCleaner {\n     private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n         String whereStr = \"NOT EXISTS(\" +\n                 \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n+                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n                 \"\\\")\";\n \n         writableDb.delete(\n-                OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_TABLE,\n+                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n                 whereStr,\n                 null);\n     }\n", "next_change": {"commit": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex a0a5936c..bf238fc5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -87,25 +85,4 @@ class OneSignalCacheCleaner {\n                 whereArgs);\n     }\n \n-    /**\n-     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = \"NOT EXISTS(\" +\n-                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n-                \"\\\")\";\n-\n-        writableDb.delete(\n-                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n-                whereStr,\n-                null);\n-    }\n-\n }\n", "next_change": {"commit": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\ndeleted file mode 100644\nindex bf238fc5..00000000\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ /dev/null\n", "chunk": "@@ -1,88 +0,0 @@\n-package com.onesignal;\n-\n-import android.content.Context;\n-import android.os.Process;\n-\n-import androidx.annotation.WorkerThread;\n-\n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OutcomesDbContract;\n-\n-class OneSignalCacheCleaner {\n-\n-    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in second\n-\n-    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n-    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n-\n-    /**\n-     * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n-     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n-     */\n-    static void cleanOldCachedData(final Context context) {\n-        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-        cleanNotificationCache(dbHelper);\n-        cleanCachedInAppMessages(dbHelper);\n-    }\n-\n-    /**\n-     * Cleans two notification tables\n-     * 1. NotificationTable.TABLE_NAME\n-     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n-     */\n-    synchronized static void cleanNotificationCache(final OneSignalDbHelper writableDb) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                cleanCachedNotifications(writableDb);\n-            }\n-\n-        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n-    }\n-\n-    /**\n-     * Remove IAMs that the last display time was six month ago\n-     * 1. Query for all old message ids and old clicked click ids\n-     * 2. Delete old IAMs from SQL\n-     * 3. Use queried data to clean SharedPreferences\n-     */\n-    @WorkerThread\n-    static synchronized void cleanCachedInAppMessages(final OneSignalDbHelper dbHelper) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                OSInAppMessageRepository inAppMessageRepository = OneSignal\n-                        .getInAppMessageController()\n-                        .getInAppMessageRepository(dbHelper);\n-                inAppMessageRepository.cleanCachedInAppMessages();\n-            }\n-        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n-    }\n-\n-    /**\n-     * Deletes notifications with created timestamps older than 7 days\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n-\n-        String sevenDaysAgoInSeconds = String.valueOf((OneSignal.getTime().getCurrentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n-        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n-\n-        writableDb.delete(\n-                NotificationTable.TABLE_NAME,\n-                whereStr,\n-                whereArgs);\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "2be8e022430a96c98d7367392e7aab218528e8c1", "committedDate": "2020-06-08 11:15:44 -0400", "message": "Fix the `NPE` within `OneSignalCacheCleaner.java` (#1047)"}, {"oid": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "committedDate": "2020-06-09 14:14:08 -0400", "message": "Adding 2 layers of SQL DB security and minor clean up * Removed the commented `enableWriteAheadLogging`   * No need for this as this allows concurrent read and writes to occur and we would rather pause a read while a write occurs   * Pausing will ensure that we are querying the most updated data * 2 layers of security for SQL DB regarding `OSInAppMessageRepository.java`   * First one will be transactions using `beginTransaction`, `setTransactionSuccessful`, and `endTransaction` methods wherever we `insert`, `delete`, or `update`   * Second one is keeping TABLE manipulation or reading within the same file and setting these methods as synchronized so that any other TABLE touching that occurs won't happen till any current methods are complete   * The combination of the two steps should help prevent any conflicts between SQL DB and solve the locking issues"}, {"oid": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "committedDate": "2020-06-10 15:30:47 -0400", "message": "Changed `OSUtils.<String>newConcurrentSet()` default to `null` (#1048)"}, {"oid": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "committedDate": "2020-06-10 16:53:44 -0400", "message": "Using singleton `OSInAppMessageController.java` instead of new * Created singleton based `getInAppMessageRepository` method inside of `OSInAppMessageController.java` class * This allows the synchronized to apply to multiple methods being called from the class instance * Deleted unused thread name since new Thread was moved toi cache cleaning file with different thread name now"}, {"oid": "53c86e58f11fb14a244e4239f072f1fc65c40a97", "committedDate": "2020-06-10 16:57:27 -0400", "message": "Merge branch 'master' into fix/sql_db_lock_added_more_transactions"}, {"oid": "2feac9dbb75de8777357e462c1ef60629ce57130", "committedDate": "2020-06-10 22:35:15 -0400", "message": "`IAM_CACHE_DATA_LIFETIME` moved to `OSInAppMessageRepository.java`"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "8aeb5bfbd32112f07ea4682ac3bc170944cb01a1", "committedDate": "2020-08-21 16:31:34 -0300", "message": "Fully implement `NotificationWillShowInForeground` (#1010)"}, {"oid": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "committedDate": "2020-09-16 11:29:32 -0300", "message": "Add and improve logs on public methods (#1146)"}, {"oid": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Reset dynamic session launch time"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "30d8a89e41325023c05559b2570ce40e3ce27cdd", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Make an abstract class for SyncService common methods"}, {"oid": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "committedDate": "2021-03-15 16:10:10 -0300", "message": "Move outcome table access to OSOutcomeEventsCache"}, {"oid": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "committedDate": "2021-03-15 16:10:53 -0300", "message": "Rename OneSignalCacheCleaner to OSNotificationDataController"}]}, {"oid": "452e1f55206e35e6b3fe3e8c9902babfbac70487", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/452e1f55206e35e6b3fe3e8c9902babfbac70487", "message": "Added UnitTest to validate all IAM data is cleaned after 6 months\n* Modified how we save IAMs so we can keep track of all IAMs in SQL and not just redisplays\n  * Now we can delete all IAMs after 6 months easily\n  * Now we clean dismissal, impression, and click Sets after 6 months also\n* Created OSUtil helper for converting a Set.toString into a Set<String>\n* Renamed DisplayStats to RedisplayStats so its a little more clear\n  * Replaced Integer.MAX_VALUE with 1 so IAMs that are not redisplay will only be shown once and easier to UnitTest\n* Refactored UnitTest helper for OneSignalPrefs to TestOneSignalPrefs", "committedDate": "2020-05-07T18:07:38Z", "type": "commit"}, {"oid": "4a04184d9c870fdc4fc45149d7f9c8bc1a90053c", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/4a04184d9c870fdc4fc45149d7f9c8bc1a90053c", "message": "Moved methods outside of OneSignalCacheCleaner Threads\n* Better run time optimization keeping these methods outside of the Threads they were written in\n* Originally done because these methods are \"owned\" by the parent methods starting the Threads\n* Cmmented these methods so we know when and where they should be used", "committedDate": "2020-05-07T18:43:16Z", "type": "commit"}, {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/566c0694a87bb7e6bd77be46e7fe98135c26b255", "message": "Optimization for when no old IAM data exists\n* No need to delete SQL or SharedPref IAM data if there is no old IAM data", "committedDate": "2020-05-07T18:55:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNzQxNQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r422317415", "body": "why is this deleted?", "bodyText": "why is this deleted?", "bodyHTML": "<p dir=\"auto\">why is this deleted?</p>", "author": "Jeasmine", "createdAt": "2020-05-08T19:02:32Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java", "diffHunk": "@@ -448,24 +435,21 @@ void onFailure(int statusCode, String response, Throwable throwable) {\n      * For click counting, every message has it click id array\n      * */\n     private void setDataForRedisplay(OSInAppMessage message) {\n-        if (!message.getDisplayStats().isRedisplayEnabled())", "originalCommit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNTA2OQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423215069", "bodyText": "This is why im always trying to rename things, we want to have redisplay data for IAMs so when we save them to SQL it matches the scheme and nothing is NULL\nRedisplay isnt something we \"enable\" and \"disable\" also its just whether or not the IAM will show more than once. I think every IAM should have the same scheme and should be cached together, not separately", "author": "mikechoch", "createdAt": "2020-05-11T17:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNzQxNQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 70ccbeca..7b978ede 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -422,168 +303,96 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         }\n     }\n \n-    /**\n-     * Part of redisplay logic\n-     *\n-     * In order to redisplay an IAM, the following conditions must be satisfied:\n-     *     1. IAM has redisplay property\n-     *     2. Time delay between redisplay satisfied\n-     *     3. Has more redisplays\n-     *     4. An IAM trigger was satisfied\n-     *\n-     * For redisplay, the message need to be removed from the arrays that track the display/impression\n-     * For click counting, every message has it click id array\n-     * */\n-    private void setDataForRedisplay(OSInAppMessage message) {\n-        boolean messageDismissed = dismissedMessages.contains(message.messageId);\n-        int index = redisplayedInAppMessages.indexOf(message);\n-\n-        if (messageDismissed && index != -1) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"setDataForRedisplay: \" + message.messageId);\n-\n-            OSInAppMessage savedIAM = redisplayedInAppMessages.get(index);\n-            message.getRedisplayStats().setDisplayStats(savedIAM.getRedisplayStats());\n-\n-            // Message that don't have triggers should display only once per session\n-            boolean triggerHasChanged = message.isTriggerChanged() || (!savedIAM.isDisplayedInSession() && message.triggers.isEmpty());\n-            // Check if conditions are correct for redisplay\n-            if (triggerHasChanged &&\n-                    message.getRedisplayStats().isDelayTimeSatisfied() &&\n-                    message.getRedisplayStats().shouldDisplayAgain()) {\n-                dismissedMessages.remove(message.messageId);\n-                impressionedMessages.remove(message.messageId);\n-                message.clearClickIds();\n-            }\n+    private void messageCanBeDisplayed(@NonNull OSInAppMessage message) {\n+        if (!inAppMessagingEnabled)\n+            return;\n+\n+        if (triggeredMessages.contains(message.messageId) &&\n+            !message.isPreview) {\n+            OneSignal.Log(\n+               OneSignal.LOG_LEVEL.ERROR,\n+               \"In-App message with id '\" +\n+                  message.messageId +\n+                  \"' already displayed or is already preparing to be display!\");\n+            return;\n         }\n+\n+        queueMessageForDisplay(message);\n     }\n \n-    /**\n-     * Message has passed triggers and de-duplication logic.\n-     * Display message now or add it to the queue to be displayed.\n-     */\n+    // Message has passed triggers and de-duplication logic.\n+    // Display message now or add it to the queue to be displayed.\n     private void queueMessageForDisplay(@NonNull OSInAppMessage message) {\n         synchronized (messageDisplayQueue) {\n-            // Make sure no message is ever added to the queue more than once\n-            if (!messageDisplayQueue.contains(message)) {\n-                messageDisplayQueue.add(message);\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message with id, \" + message.messageId + \", added to the queue\");\n-            }\n-\n-            attemptToShowInAppMessage();\n-        }\n-    }\n+            messageDisplayQueue.add(message);\n+            if (!message.isPreview)\n+                triggeredMessages.add(message.messageId);\n \n-    private void attemptToShowInAppMessage() {\n-        synchronized (messageDisplayQueue) {\n-            // We need to wait for system conditions to be the correct ones\n-            if (!systemConditionController.systemConditionsAvailable()) {\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.WARN, \"In app message not showing due to system condition not correct\");\n-                return;\n-            }\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"queueMessageForDisplay: \" + messageDisplayQueue);\n \n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"displayFirstIAMOnQueue: \" + messageDisplayQueue);\n-            // If there are IAMs in the queue and nothing showing, show first in the queue\n-            if (messageDisplayQueue.size() > 0 && !isInAppMessageShowing()) {\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"No IAM showing currently, showing first item in the queue!\");\n-                displayMessage(messageDisplayQueue.get(0));\n+            if (messageDisplayQueue.size() > 1) {\n+                // means we are already displaying a message\n+                // this message will be displayed afterwards\n                 return;\n             }\n \n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message is currently showing or there are no IAMs left in the queue!\");\n+            displayMessage(message);\n         }\n     }\n \n-    boolean isInAppMessageShowing() {\n-        return inAppMessageShowing;\n+    boolean isDisplayingInApp() {\n+        return messageDisplayQueue.size() > 0;\n     }\n \n-    @Nullable OSInAppMessage getCurrentDisplayedInAppMessage() {\n-        // When in app messaging is paused, the messageDisplayQueue might have IAMs, so return null\n-        return inAppMessageShowing ? messageDisplayQueue.get(0) : null;\n+    @Nullable\n+    OSInAppMessage getCurrentDisplayedInAppMessage() {\n+        return isDisplayingInApp() ? messageDisplayQueue.get(0) : null;\n     }\n \n-    /**\n-     * Called after an In-App message is closed and it's dismiss animation has completed\n-     */\n+    // Called after an In-App message is closed and it's dismiss animation has completed\n     void messageWasDismissed(@NonNull OSInAppMessage message) {\n-        if (!message.isPreview) {\n-            dismissedMessages.add(message.messageId);\n-            OneSignalPrefs.saveStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                    dismissedMessages);\n-\n-            // Don't keep track of last displayed time for a preview\n-            lastTimeInAppDismissed = new Date();\n-            persistInAppMessage(message);\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"OSInAppMessageController messageWasDismissed dismissedMessages: \" + dismissedMessages.toString());\n-        }\n-\n-        dismissCurrentMessage(message);\n-    }\n-\n-    /**\n-     * Removes first item from the queue and attempts to show the next IAM in the queue\n-     *\n-     * @param message The message dismissed, preview messages are null\n-     */\n-    private void dismissCurrentMessage(@Nullable OSInAppMessage message) {\n-        if (currentPrompt != null) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Stop evaluateMessageDisplayQueue because prompt is currently displayed\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = false;\n         synchronized (messageDisplayQueue) {\n-            if (messageDisplayQueue.size() > 0) {\n-                if (message != null && !messageDisplayQueue.contains(message)) {\n-                    OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Message already removed from the queue!\");\n-                    return;\n-                } else {\n-                    String removedMessageId = messageDisplayQueue.remove(0).messageId;\n-                    OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message with id, \" + removedMessageId + \", dismissed (removed) from the queue!\");\n-                }\n+            if (!messageDisplayQueue.remove(message)) {\n+                if (!message.isPreview)\n+                    OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"An in-app message was removed from the display queue before it was finished displaying.\");\n+                return;\n             }\n \n-            // Display the next message in the queue, or attempt to add more IAMs to the queue\n-            if (messageDisplayQueue.size() > 0) {\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message on queue available: \" + messageDisplayQueue.get(0).messageId);\n+            if (!message.isPreview)\n+                persistDisplayedIams();\n+\n+            // Display the next message in the queue, if any\n+            if (messageDisplayQueue.size() > 0)\n                 displayMessage(messageDisplayQueue.get(0));\n-            } else {\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message dismissed evaluating messages\");\n+            else {\n+                lastTimeInAppDismissed = new Date();\n                 evaluateInAppMessages();\n             }\n         }\n     }\n \n-    private void persistInAppMessage(final OSInAppMessage message) {\n-        long displayTimeSeconds = System.currentTimeMillis() / 1000;\n-        message.getRedisplayStats().setLastDisplayTime(displayTimeSeconds);\n-        message.getRedisplayStats().incrementDisplayQuantity();\n-        message.setTriggerChanged(false);\n-        message.setDisplayedInSession(true);\n+    private void persistDisplayedIams() {\n+        OneSignalPrefs.saveStringSet(\n+           OneSignalPrefs.PREFS_ONESIGNAL,\n+           OneSignalPrefs.PREFS_OS_DISPLAYED_IAMS,\n+           // Persisting only ones dismissed / opened in case the user didn't have a chance\n+           //  to interact with the message.\n+           getAllDismissedIams()\n+        );\n+    }\n \n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                inAppMessageRepository.saveInAppMessage(message);\n-            }\n-        }, OS_SAVE_IN_APP_MESSAGE).start();\n-\n-        // Update the data to enable future re displays\n-        // Avoid calling the repository data again\n-        int index = redisplayedInAppMessages.indexOf(message);\n-        if (index != -1) {\n-            redisplayedInAppMessages.set(index, message);\n-        } else {\n-            redisplayedInAppMessages.add(message);\n+    // Calculate all dismissed as triggeredMessages minus any in the display queue\n+    private @NonNull Set<String> getAllDismissedIams() {\n+        Set<String> dismissedIams = new HashSet<>(triggeredMessages);\n+        synchronized (messageDisplayQueue) {\n+            for (OSInAppMessage message : messageDisplayQueue)\n+                dismissedIams.remove(message.messageId);\n         }\n-\n-        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        return dismissedIams;\n     }\n \n-    private static @Nullable String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable\n+    String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n", "next_change": {"commit": "1f04f03c11c87990f023c554cfb902e07d850374", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 7b978ede..3a5bb53f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -303,96 +433,175 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         }\n     }\n \n-    private void messageCanBeDisplayed(@NonNull OSInAppMessage message) {\n-        if (!inAppMessagingEnabled)\n+    /**\n+     * Part of redisplay logic\n+     *\n+     * In order to redisplay an IAM, the following conditions must be satisfied:\n+     *     1. IAM has redisplay property\n+     *     2. Time delay between redisplay satisfied\n+     *     3. Has more redisplays\n+     *     4. An IAM trigger was satisfied\n+     *\n+     * For redisplay, the message need to be removed from the arrays that track the display/impression\n+     * For click counting, every message has it click id array\n+     * */\n+    private void setDataForRedisplay(OSInAppMessage message) {\n+        if (!message.getDisplayStats().isRedisplayEnabled())\n             return;\n \n-        if (triggeredMessages.contains(message.messageId) &&\n-            !message.isPreview) {\n-            OneSignal.Log(\n-               OneSignal.LOG_LEVEL.ERROR,\n-               \"In-App message with id '\" +\n-                  message.messageId +\n-                  \"' already displayed or is already preparing to be display!\");\n-            return;\n-        }\n+        boolean messageDismissed = dismissedMessages.contains(message.messageId);\n+        int index = redisplayedInAppMessages.indexOf(message);\n \n-        queueMessageForDisplay(message);\n+        if (messageDismissed && index != -1) {\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"setDataForRedisplay: \" + message.messageId);\n+\n+            OSInAppMessage savedIAM = redisplayedInAppMessages.get(index);\n+            message.getDisplayStats().setDisplayStats(savedIAM.getDisplayStats());\n+\n+            // Message that don't have triggers should display only once per session\n+            boolean triggerHasChanged = message.isTriggerChanged() || (!savedIAM.isDisplayedInSession() && message.triggers.isEmpty());\n+            // Check if conditions are correct for redisplay\n+            if (triggerHasChanged &&\n+                    message.getDisplayStats().isDelayTimeSatisfied() &&\n+                    message.getDisplayStats().shouldDisplayAgain()) {\n+                dismissedMessages.remove(message.messageId);\n+                impressionedMessages.remove(message.messageId);\n+                message.clearClickIds();\n+            }\n+        }\n     }\n \n-    // Message has passed triggers and de-duplication logic.\n-    // Display message now or add it to the queue to be displayed.\n+    /**\n+     * Message has passed triggers and de-duplication logic.\n+     * Display message now or add it to the queue to be displayed.\n+     */\n     private void queueMessageForDisplay(@NonNull OSInAppMessage message) {\n         synchronized (messageDisplayQueue) {\n-            messageDisplayQueue.add(message);\n-            if (!message.isPreview)\n-                triggeredMessages.add(message.messageId);\n+            // Make sure no message is ever added to the queue more than once\n+            if (!messageDisplayQueue.contains(message)) {\n+                messageDisplayQueue.add(message);\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message with id, \" + message.messageId + \", added to the queue\");\n+            }\n \n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"queueMessageForDisplay: \" + messageDisplayQueue);\n+            attemptToShowInAppMessage();\n+        }\n+    }\n+\n+    private void attemptToShowInAppMessage() {\n+        synchronized (messageDisplayQueue) {\n+            // We need to wait for system conditions to be the correct ones\n+            if (!systemConditionController.systemConditionsAvailable()) {\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.WARN, \"In app message not showing due to system condition not correct\");\n+                return;\n+            }\n \n-            if (messageDisplayQueue.size() > 1) {\n-                // means we are already displaying a message\n-                // this message will be displayed afterwards\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"displayFirstIAMOnQueue: \" + messageDisplayQueue);\n+            // If there are IAMs in the queue and nothing showing, show first in the queue\n+            if (messageDisplayQueue.size() > 0 && !isInAppMessageShowing()) {\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"No IAM showing currently, showing first item in the queue!\");\n+                displayMessage(messageDisplayQueue.get(0));\n                 return;\n             }\n \n-            displayMessage(message);\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message is currently showing or there are no IAMs left in the queue!\");\n         }\n     }\n \n-    boolean isDisplayingInApp() {\n-        return messageDisplayQueue.size() > 0;\n+    boolean isInAppMessageShowing() {\n+        return inAppMessageShowing;\n     }\n \n-    @Nullable\n-    OSInAppMessage getCurrentDisplayedInAppMessage() {\n-        return isDisplayingInApp() ? messageDisplayQueue.get(0) : null;\n+    @Nullable OSInAppMessage getCurrentDisplayedInAppMessage() {\n+        // When in app messaging is paused, the messageDisplayQueue might have IAMs, so return null\n+        return inAppMessageShowing ? messageDisplayQueue.get(0) : null;\n     }\n \n-    // Called after an In-App message is closed and it's dismiss animation has completed\n+    /**\n+     * Called after an In-App message is closed and it's dismiss animation has completed\n+     */\n     void messageWasDismissed(@NonNull OSInAppMessage message) {\n+        if (!message.isPreview) {\n+            dismissedMessages.add(message.messageId);\n+            OneSignalPrefs.saveStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                    dismissedMessages);\n+\n+            // Don't keep track of last displayed time for a preview\n+            lastTimeInAppDismissed = new Date();\n+            persistInAppMessageForRedisplay(message);\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"OSInAppMessageController messageWasDismissed dismissedMessages: \" + dismissedMessages.toString());\n+        }\n+\n+        dismissCurrentMessage(message);\n+    }\n+\n+    /**\n+     * Removes first item from the queue and attempts to show the next IAM in the queue\n+     *\n+     * @param message The message dismissed, preview messages are null\n+     */\n+    private void dismissCurrentMessage(@Nullable OSInAppMessage message) {\n+        if (currentPrompt != null) {\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Stop evaluateMessageDisplayQueue because prompt is currently displayed\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = false;\n         synchronized (messageDisplayQueue) {\n-            if (!messageDisplayQueue.remove(message)) {\n-                if (!message.isPreview)\n-                    OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"An in-app message was removed from the display queue before it was finished displaying.\");\n-                return;\n+            if (messageDisplayQueue.size() > 0) {\n+                if (message != null && !messageDisplayQueue.contains(message)) {\n+                    OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Message already removed from the queue!\");\n+                    return;\n+                } else {\n+                    String removedMessageId = messageDisplayQueue.remove(0).messageId;\n+                    OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message with id, \" + removedMessageId + \", dismissed (removed) from the queue!\");\n+                }\n             }\n \n-            if (!message.isPreview)\n-                persistDisplayedIams();\n-\n-            // Display the next message in the queue, if any\n-            if (messageDisplayQueue.size() > 0)\n+            // Display the next message in the queue, or attempt to add more IAMs to the queue\n+            if (messageDisplayQueue.size() > 0) {\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message on queue available: \" + messageDisplayQueue.get(0).messageId);\n                 displayMessage(messageDisplayQueue.get(0));\n-            else {\n-                lastTimeInAppDismissed = new Date();\n+            } else {\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message dismissed evaluating messages\");\n                 evaluateInAppMessages();\n             }\n         }\n     }\n \n-    private void persistDisplayedIams() {\n-        OneSignalPrefs.saveStringSet(\n-           OneSignalPrefs.PREFS_ONESIGNAL,\n-           OneSignalPrefs.PREFS_OS_DISPLAYED_IAMS,\n-           // Persisting only ones dismissed / opened in case the user didn't have a chance\n-           //  to interact with the message.\n-           getAllDismissedIams()\n-        );\n-    }\n+    private void persistInAppMessageForRedisplay(final OSInAppMessage message) {\n+        //If the IAM doesn't have the re display configuration then no need to save it\n+        if (!message.getDisplayStats().isRedisplayEnabled())\n+            return;\n \n-    // Calculate all dismissed as triggeredMessages minus any in the display queue\n-    private @NonNull Set<String> getAllDismissedIams() {\n-        Set<String> dismissedIams = new HashSet<>(triggeredMessages);\n-        synchronized (messageDisplayQueue) {\n-            for (OSInAppMessage message : messageDisplayQueue)\n-                dismissedIams.remove(message.messageId);\n+        long displayTimeSeconds = System.currentTimeMillis() / 1000;\n+        message.getDisplayStats().setLastDisplayTime(displayTimeSeconds);\n+        message.getDisplayStats().incrementDisplayQuantity();\n+        message.setTriggerChanged(false);\n+        message.setDisplayedInSession(true);\n+\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n+                inAppMessageRepository.saveInAppMessage(message);\n+            }\n+        }, OS_SAVE_IN_APP_MESSAGE).start();\n+\n+        // Update the data to enable future re displays\n+        // Avoid calling the repository data again\n+        int index = redisplayedInAppMessages.indexOf(message);\n+        if (index != -1) {\n+            redisplayedInAppMessages.set(index, message);\n+        } else {\n+            redisplayedInAppMessages.add(message);\n         }\n-        return dismissedIams;\n+\n+        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable\n-    String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3a5bb53f..898bd8fe 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -601,7 +612,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable\n+    String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n", "next_change": {"commit": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 898bd8fe..be96d53c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -609,15 +624,14 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable\n-    String htmlPathForMessage(OSInAppMessage message) {\n+    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n+            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "dd7fc0ed273f6c74e7104e8604834230a38db804", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex be96d53c..5435d73b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -624,14 +643,15 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable\n+    String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 5435d73b..ed829059 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -643,15 +632,14 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable\n-    String htmlPathForMessage(OSInAppMessage message) {\n+    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n+            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "1c8354ac0d3bf85578e93a336eb02b0a98e6826e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex ed829059..507da86d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -632,14 +621,15 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable\n+    String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -621,15 +640,14 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable\n-    String htmlPathForMessage(OSInAppMessage message) {\n+    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n+            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -654,6 +755,29 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -755,29 +744,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n-        waitForTags = false;\n-        if (isPreview || message.getHasLiquid()) {\n-            waitForTags = true;\n-            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n-                @Override\n-                public void tagsAvailable(JSONObject tags) {\n-                    waitForTags = false;\n-                    if (tags != null) {\n-                        userTagsString = tags.toString();\n-                    }\n-                    if (pendingHTMLContent != null) {\n-                        if (!isPreview) {\n-                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                        }\n-                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n-                        pendingHTMLContent = null;\n-                    }\n-                }\n-            });\n-        }\n-    }\n-\n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -744,6 +756,29 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n", "next_change": {"commit": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd008ebb 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -779,7 +733,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         }\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n+    private void displayMessage(@NonNull final OSInAppMessageInternal message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n", "next_change": {"commit": "397de126ec2f5ace01cb6c098ec503f1db2effa8", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex fd008ebb..21c8727c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -721,18 +775,26 @@ class OSInAppMessageController extends OSBackgroundManager implements OSDynamicT\n                     if (tags != null) {\n                         userTagsString = tags.toString();\n                     }\n-                    if (pendingHTMLContent != null) {\n+                    if (pendingMessageContent != null) {\n                         if (!isPreview) {\n                             OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n                         }\n-                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n-                        pendingHTMLContent = null;\n+                        pendingMessageContent.setContentHtml(taggedHTMLString(pendingMessageContent.getContentHtml()));\n+                        WebViewManager.showMessageContent(message, pendingMessageContent);\n+                        pendingMessageContent = null;\n                     }\n                 }\n             });\n         }\n     }\n \n+    private OSInAppMessageContent parseMessageContentData(JSONObject data, OSInAppMessageInternal message) {\n+        OSInAppMessageContent content = new OSInAppMessageContent(data);\n+        double displayDuration = data.optDouble(\"display_duration\");\n+        message.setDisplayDuration(displayDuration);\n+        return content;\n+    }\n+\n     private void displayMessage(@NonNull final OSInAppMessageInternal message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n", "next_change": {"commit": "4bd2209ac8064779ad52c3c375086e1a4ea375c2", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 21c8727c..20bc9880 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -790,8 +790,7 @@ class OSInAppMessageController extends OSBackgroundManager implements OSDynamicT\n \n     private OSInAppMessageContent parseMessageContentData(JSONObject data, OSInAppMessageInternal message) {\n         OSInAppMessageContent content = new OSInAppMessageContent(data);\n-        double displayDuration = data.optDouble(\"display_duration\");\n-        message.setDisplayDuration(displayDuration);\n+        message.setDisplayDuration(content.getDisplayDuration());\n         return content;\n     }\n \n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -638,7 +656,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..9d2e8e50 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -662,6 +759,25 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        boolean hasLiquid = true; // placeholder\n+        if (hasLiquid) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();;\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 9d2e8e50..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -751,32 +755,38 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n-        if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = true;\n-\n-        boolean hasLiquid = true; // placeholder\n-        if (hasLiquid) {\n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n             waitForTags = true;\n             OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n                 @Override\n                 public void tagsAvailable(JSONObject tags) {\n                     waitForTags = false;\n                     if (tags != null) {\n-                        userTagsString = tags.toString();;\n+                        userTagsString = tags.toString();\n                     }\n                     if (pendingHTMLContent != null) {\n-                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n                         WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n                         pendingHTMLContent = null;\n                     }\n                 }\n             });\n         }\n+    }\n+\n+    private void displayMessage(@NonNull final OSInAppMessage message) {\n+        if (!inAppMessagingEnabled) {\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = true;\n+\n+        getTagsForLiquidTemplating(message, false);\n \n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex ed829059..507da86d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -648,7 +638,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -638,7 +656,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..9d2e8e50 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -662,6 +759,25 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        boolean hasLiquid = true; // placeholder\n+        if (hasLiquid) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();;\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 9d2e8e50..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -751,32 +755,38 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n-        if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = true;\n-\n-        boolean hasLiquid = true; // placeholder\n-        if (hasLiquid) {\n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n             waitForTags = true;\n             OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n                 @Override\n                 public void tagsAvailable(JSONObject tags) {\n                     waitForTags = false;\n                     if (tags != null) {\n-                        userTagsString = tags.toString();;\n+                        userTagsString = tags.toString();\n                     }\n                     if (pendingHTMLContent != null) {\n-                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n                         WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n                         pendingHTMLContent = null;\n                     }\n                 }\n             });\n         }\n+    }\n+\n+    private void displayMessage(@NonNull final OSInAppMessage message) {\n+        if (!inAppMessagingEnabled) {\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = true;\n+\n+        getTagsForLiquidTemplating(message, false);\n \n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 5435d73b..ed829059 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -660,7 +648,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "1c8354ac0d3bf85578e93a336eb02b0a98e6826e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex ed829059..507da86d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -648,7 +638,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -638,7 +656,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..9d2e8e50 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -662,6 +759,25 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        boolean hasLiquid = true; // placeholder\n+        if (hasLiquid) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();;\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 9d2e8e50..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -751,32 +755,38 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n-        if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = true;\n-\n-        boolean hasLiquid = true; // placeholder\n-        if (hasLiquid) {\n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n             waitForTags = true;\n             OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n                 @Override\n                 public void tagsAvailable(JSONObject tags) {\n                     waitForTags = false;\n                     if (tags != null) {\n-                        userTagsString = tags.toString();;\n+                        userTagsString = tags.toString();\n                     }\n                     if (pendingHTMLContent != null) {\n-                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n                         WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n                         pendingHTMLContent = null;\n                     }\n                 }\n             });\n         }\n+    }\n+\n+    private void displayMessage(@NonNull final OSInAppMessage message) {\n+        if (!inAppMessagingEnabled) {\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = true;\n+\n+        getTagsForLiquidTemplating(message, false);\n \n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex be96d53c..5435d73b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -640,7 +660,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 5435d73b..ed829059 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -660,7 +648,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "1c8354ac0d3bf85578e93a336eb02b0a98e6826e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex ed829059..507da86d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -648,7 +638,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -638,7 +656,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..9d2e8e50 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -662,6 +759,25 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        boolean hasLiquid = true; // placeholder\n+        if (hasLiquid) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();;\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 9d2e8e50..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -751,32 +755,38 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n-        if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = true;\n-\n-        boolean hasLiquid = true; // placeholder\n-        if (hasLiquid) {\n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n             waitForTags = true;\n             OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n                 @Override\n                 public void tagsAvailable(JSONObject tags) {\n                     waitForTags = false;\n                     if (tags != null) {\n-                        userTagsString = tags.toString();;\n+                        userTagsString = tags.toString();\n                     }\n                     if (pendingHTMLContent != null) {\n-                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n                         WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n                         pendingHTMLContent = null;\n                     }\n                 }\n             });\n         }\n+    }\n+\n+    private void displayMessage(@NonNull final OSInAppMessage message) {\n+        if (!inAppMessagingEnabled) {\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = true;\n+\n+        getTagsForLiquidTemplating(message, false);\n \n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Bulk of work inside OneSignal, start of remove init * Created two new init methods, setAppId and setAppContext, these are required to init OneSignal * Deleted mInitBuilder and added all params into OneSignal (we should do something like this again, but more organized and not inside of a builder, maybe a simple singleton class?) * Created a dummy OSNotificationWillShowInForegroundResult.java for now until we create the real thing, but this will replace notification received handler"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "28684e756706a637808bab08ec62f57500d206f0", "committedDate": "2020-04-29 22:19:43 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "36d7f7345fb7ade8cd4edf29f2045fefee90db4b", "committedDate": "2020-05-12 15:56:31 -0300", "message": "Add location permissions not available alert dialog"}, {"oid": "99c521e0f58b16383581b068b9bd6b4aae026593", "committedDate": "2020-05-14 11:45:28 -0300", "message": "Fix Deadlock under IAM 401 request error"}, {"oid": "386aa030db286924e0fd52b1f8461d11b8b1c99b", "committedDate": "2020-05-14 12:15:58 -0300", "message": "Not increase redisplay count under fail IAM request"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "a5bc886933e9eda2e746322d05be9125e2cbb531", "committedDate": "2020-05-21 10:53:36 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "committedDate": "2020-06-10 16:53:44 -0400", "message": "Using singleton `OSInAppMessageController.java` instead of new * Created singleton based `getInAppMessageRepository` method inside of `OSInAppMessageController.java` class * This allows the synchronized to apply to multiple methods being called from the class instance * Deleted unused thread name since new Thread was moved toi cache cleaning file with different thread name now"}, {"oid": "27d22f1e956e0a36c2c38581c02fbc796a404cd2", "committedDate": "2020-06-10 17:34:54 -0400", "message": "Reverted to new instance within `initRedisplayData` * Changed the `new OSInAppMessageRepository(dbHelper);` to `getInAppMessageRepository(dbHelper);` and it broke a UnitTest in Travis"}, {"oid": "8b7e6897f740a599f0edd1acdce9a07d568c130e", "committedDate": "2020-06-10 18:20:51 -0400", "message": "Fixing travis tests * After comment added `OSInAppMessageController.java` into `StaticResetHelper.java`"}, {"oid": "87f75f4b465857b4bab5e1521c7f9e6e446b1cf3", "committedDate": "2020-06-10 17:32:34 -0700", "message": "Fixed race condition with OSInAppMessageController"}, {"oid": "282a3dfd5c24da7fbff624dc6def0a5ebe8715a7", "committedDate": "2020-06-10 22:40:07 -0400", "message": "Adding 2 layers of control to prevent locks in SQL DB and minor clean up (#1050)"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "8aeb5bfbd32112f07ea4682ac3bc170944cb01a1", "committedDate": "2020-08-21 16:31:34 -0300", "message": "Fully implement `NotificationWillShowInForeground` (#1010)"}, {"oid": "04eb2b6c5d88936556fc2090168019d7080d5a6d", "committedDate": "2020-09-11 16:36:10 -0300", "message": "Encapsulate OSInAppMessageAction"}, {"oid": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "committedDate": "2020-09-16 11:29:32 -0300", "message": "Add and improve logs on public methods (#1146)"}, {"oid": "726b3c35e09228e5c318bc608f231c703f181f12", "committedDate": "2020-09-21 15:39:11 -0300", "message": "Fix foreground check when calling initWithContext with Activity (#1151)"}, {"oid": "dd7fc0ed273f6c74e7104e8604834230a38db804", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Fix IAM not being redisplay by SESSION DURATION"}, {"oid": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Reset dynamic session launch time"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "1c8354ac0d3bf85578e93a336eb02b0a98e6826e", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Iterate over message instead of redisplay"}, {"oid": "cc3826e7997f75e6ed538f996e535180ba579650", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Init IAM with cached IAMs on new session"}, {"oid": "05b05de025f4b3ea6159e9badfba47468bce6c0c", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Make IAM not display under splas screenh when back pressing"}, {"oid": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "committedDate": "2020-10-07 17:24:28 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "32da4ecc878ac2984583ff69b05b958cf4e49502", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Add remaining consistency changes"}, {"oid": "2d04a710668e95d98d072611488def7a3ee16127", "committedDate": "2020-12-09 15:49:27 -0800", "message": "adding page impression rest call and page changed logic"}, {"oid": "565f47671c2dfe73426ed0a49471b13d6e12dafb", "committedDate": "2020-12-09 15:49:27 -0800", "message": "firing onPageChanged from json event"}, {"oid": "0149a12c6d25806e583d070864564e52fbd0860b", "committedDate": "2020-12-09 15:49:27 -0800", "message": "Unit test for page changed event"}, {"oid": "04790085256c86606e69a3f5c622f4a562a2c039", "committedDate": "2020-12-09 16:14:31 -0800", "message": "matching json to backend spec change"}, {"oid": "c475819b393b0c719e75f99e19f413a93a1b0b24", "committedDate": "2020-12-11 14:16:08 -0300", "message": "Fix IAM redisplay multiple times"}, {"oid": "524d30d351832b3b8eb5789fb2a867356a5c5e3b", "committedDate": "2020-12-21 17:51:35 -0800", "message": "Fix showing IAMs past their end time"}, {"oid": "d865c2202fe3dcf5a7959140f03eec8c4adba4eb", "committedDate": "2020-12-23 14:24:04 -0800", "message": "removing page id check in pageChanged"}, {"oid": "38ef376becb0ea4cf518f6d2dfb79d42523a2cb0", "committedDate": "2020-12-23 14:24:04 -0800", "message": "Storing pageIds to prefs to fix double impression"}, {"oid": "09ebc874912e6105de2817594d0120af1533cfd8", "committedDate": "2020-12-23 14:36:43 -0800", "message": "Merge pull request #1239 from OneSignal/feature/iam_carousel"}, {"oid": "40fb5a290b0d56358e0b900f1b6f2eb5546b9a08", "committedDate": "2021-02-22 14:06:15 -0800", "message": "Adding script for injecting tags into IAM"}, {"oid": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "committedDate": "2021-02-22 15:14:29 -0800", "message": "getting tags in parallel with IAM html content if hasLiquid"}, {"oid": "8295c0a2a0daf2cbce3da78460672f179700fce0", "committedDate": "2021-02-22 18:02:24 -0800", "message": "adding hasLiquid to OSInAppMessage"}, {"oid": "b7ca4ffce667be67fc0f3f0f4ac5880ebfd9bf12", "committedDate": "2021-03-02 15:22:42 -0800", "message": "removing extra semicolon"}, {"oid": "b4eaf71ad691313a4045154ef70459ce69e83aae", "committedDate": "2021-03-05 10:44:06 -0800", "message": "adding nonnull to taggedHTMLString"}, {"oid": "88926272c2046f06b4f4744ff59ed093191bb335", "committedDate": "2021-03-10 16:15:27 -0800", "message": "rename of javascript variable for player's tags"}, {"oid": "1db43af1d7bcdad45fa7ffc4b60614b2810d83d9", "committedDate": "2021-03-11 13:34:40 -0800", "message": "using setPlayerTags function instead of setting tag variable directly"}, {"oid": "989224b56cbf05fd870093de9068afc679658800", "committedDate": "2021-03-11 17:19:37 -0800", "message": "Fixing tag substitution for IAM previews"}, {"oid": "cfcc5721681476f9dafc35be23cde7e27009a346", "committedDate": "2021-03-15 16:10:30 -0300", "message": "Move IAM cache cleaning to OSInAppMessageController"}, {"oid": "4a5fa0dc9d095632391dbc57a620165a9a111280", "committedDate": "2021-03-17 14:01:37 -0700", "message": "Merge pull request #1290 from OneSignal/improvement/thread-access-db"}, {"oid": "a50d2dbe3daebc53645dbc4733ab00b0801f4807", "committedDate": "2021-03-30 16:10:58 -0300", "message": "Make all IAM DB access request out of MainThread"}, {"oid": "27d703e490b16901ebe3e954eb850778014eb936", "committedDate": "2021-03-30 16:10:58 -0300", "message": "Add pending tasks to IAMController"}, {"oid": "87ff8245c974d3e6b0349a7c9eeab23b4b251736", "committedDate": "2021-04-13 15:51:53 -0300", "message": "Add null check for currentActivityName"}, {"oid": "211e795daad2798b7ff68b5b4c50ccd79b925174", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Fix getLanguage  OSInAppMessageController and NotificationChannelManager"}, {"oid": "34507f0fa83ab403bb21ca59f1fcf6edef46b328", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Add LanguageContext Dependency to OSInAppMessageController"}, {"oid": "6badcb9ca8cff5624a56ed1f61da83be84718f1d", "committedDate": "2021-07-12 15:04:55 -0300", "message": "Fix IAM preview message id NPE"}, {"oid": "417632c1d08968b352092cc9693fc31a879692c0", "committedDate": "2021-07-22 15:30:07 -0300", "message": "Avoid continuing with null message Ids"}, {"oid": "d4d400e4f3ffbf59dc04f71d5dc95e45ddc29008", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Remove Preview request code from Controller"}, {"oid": "adf2064ba9d050faa70651c5fa025b4341a14ef6", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM impressioned request to repository"}, {"oid": "a08b8ac2d2c8afce7208523e835b258d3e3d186b", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM click request to Repository"}, {"oid": "d914dfa6f626d0ec4f4ccf6ad26ae5ff0343ad33", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM page impression request to Repository"}, {"oid": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM data request to Repository"}, {"oid": "702634d4b3e083f1c0bbfc5c1797d3072bfd623e", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move shared preferences access to Repository"}, {"oid": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "committedDate": "2021-08-09 13:44:11 -0700", "message": "Rename OSInAppMessage to OSInAppMessageInternal"}, {"oid": "cd5c1650e2e305bb5788b8040d1d3a201ac8da8e", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Add unit test testIAMLifecycleEventsFlow"}, {"oid": "20a1ccb6c96387b9a1f353775208b3aa70951936", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fill out lifecycle method calls in OSInAppMessageController"}, {"oid": "debcbd67bf828f0b75d3490a6b593f2ee4e12c52", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Call willDisplay, didDisplay, didDismiss IAM methods"}, {"oid": "3533c5487def7a7ea38bb2717da317de5020b004", "committedDate": "2021-08-16 14:49:25 -0700", "message": "adding onMessageWillDisplay call for IAM Previews"}, {"oid": "475953901bd9f4cb7f3d6518d442bb140cc1080d", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fixing dismissing lifecycle methods for IAMs with prompts"}, {"oid": "e750c009bea37867eb00836c9dc1d3547387ecb4", "committedDate": "2021-08-17 15:26:21 -0700", "message": "Move `inAppMessageLifecycleHandler` to `OSInAppMessageController`"}, {"oid": "397de126ec2f5ace01cb6c098ec503f1db2effa8", "committedDate": "2021-09-02 10:27:21 -0700", "message": "Parsing loadContentHTML into OSInAppMessageContent object"}, {"oid": "4bd2209ac8064779ad52c3c375086e1a4ea375c2", "committedDate": "2021-09-02 10:30:06 -0700", "message": "rename dismissDuration to displayDuration to match JSON"}, {"oid": "d09e80eaa5f28f16c7b0266f6969a2d05ce1cb03", "committedDate": "2021-09-30 12:34:02 -0700", "message": "Remove `messageWasDismissedByBackPress` and `lostFocus` to redisplay IAM"}, {"oid": "5a6c4723d5a68c30ab9e65a9a2eae12c99d1d35f", "committedDate": "2022-04-06 16:24:07 -0700", "message": "persisting and fetching lastTimeInAppDismissed from OneSignalPrefs"}, {"oid": "49f1cd4e6f97f20caa9ced03a165852bc5107579", "committedDate": "2022-05-10 14:20:52 -0700", "message": "rm location code from PermissionsActivity part 2"}, {"oid": "986ff256d72b54077fe66e07c0853619dba3363f", "committedDate": "2022-12-05 15:37:58 -0800", "message": "Fix default values in liquid IAMs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxODAyMA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r422318020", "body": "Sry I think you already explained me this, but why is always saving redisplay now?", "bodyText": "Sry I think you already explained me this, but why is always saving redisplay now?", "bodyHTML": "<p dir=\"auto\">Sry I think you already explained me this, but why is always saving redisplay now?</p>", "author": "Jeasmine", "createdAt": "2020-05-08T19:03:52Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java", "diffHunk": "@@ -572,14 +556,10 @@ private void dismissCurrentMessage(@Nullable OSInAppMessage message) {\n         }\n     }\n \n-    private void persistInAppMessageForRedisplay(final OSInAppMessage message) {\n-        //If the IAM doesn't have the re display configuration then no need to save it\n-        if (!message.getDisplayStats().isRedisplayEnabled())\n-            return;\n-\n+    private void persistInAppMessage(final OSInAppMessage message) {\n         long displayTimeSeconds = System.currentTimeMillis() / 1000;\n-        message.getDisplayStats().setLastDisplayTime(displayTimeSeconds);\n-        message.getDisplayStats().incrementDisplayQuantity();\n+        message.getRedisplayStats().setLastDisplayTime(displayTimeSeconds);", "originalCommit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNDA1Ng==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423214056", "bodyText": "We should treat all IAMs the same way as it creates consistency\nEven though we arent visually seeing an IAM with a limit of 1, we still need to cache it and keep track of it. Its confusing saving only specific set of IAMs to SQL when you can easily do them all.\nSpecifically why I did this was because I needed to know when to clean Shared Preferences after 6 months and if we arent saving all IAMs we only end up the redisplay ones", "author": "mikechoch", "createdAt": "2020-05-11T17:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxODAyMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 70ccbeca..7b978ede 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -422,168 +303,96 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         }\n     }\n \n-    /**\n-     * Part of redisplay logic\n-     *\n-     * In order to redisplay an IAM, the following conditions must be satisfied:\n-     *     1. IAM has redisplay property\n-     *     2. Time delay between redisplay satisfied\n-     *     3. Has more redisplays\n-     *     4. An IAM trigger was satisfied\n-     *\n-     * For redisplay, the message need to be removed from the arrays that track the display/impression\n-     * For click counting, every message has it click id array\n-     * */\n-    private void setDataForRedisplay(OSInAppMessage message) {\n-        boolean messageDismissed = dismissedMessages.contains(message.messageId);\n-        int index = redisplayedInAppMessages.indexOf(message);\n-\n-        if (messageDismissed && index != -1) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"setDataForRedisplay: \" + message.messageId);\n-\n-            OSInAppMessage savedIAM = redisplayedInAppMessages.get(index);\n-            message.getRedisplayStats().setDisplayStats(savedIAM.getRedisplayStats());\n-\n-            // Message that don't have triggers should display only once per session\n-            boolean triggerHasChanged = message.isTriggerChanged() || (!savedIAM.isDisplayedInSession() && message.triggers.isEmpty());\n-            // Check if conditions are correct for redisplay\n-            if (triggerHasChanged &&\n-                    message.getRedisplayStats().isDelayTimeSatisfied() &&\n-                    message.getRedisplayStats().shouldDisplayAgain()) {\n-                dismissedMessages.remove(message.messageId);\n-                impressionedMessages.remove(message.messageId);\n-                message.clearClickIds();\n-            }\n+    private void messageCanBeDisplayed(@NonNull OSInAppMessage message) {\n+        if (!inAppMessagingEnabled)\n+            return;\n+\n+        if (triggeredMessages.contains(message.messageId) &&\n+            !message.isPreview) {\n+            OneSignal.Log(\n+               OneSignal.LOG_LEVEL.ERROR,\n+               \"In-App message with id '\" +\n+                  message.messageId +\n+                  \"' already displayed or is already preparing to be display!\");\n+            return;\n         }\n+\n+        queueMessageForDisplay(message);\n     }\n \n-    /**\n-     * Message has passed triggers and de-duplication logic.\n-     * Display message now or add it to the queue to be displayed.\n-     */\n+    // Message has passed triggers and de-duplication logic.\n+    // Display message now or add it to the queue to be displayed.\n     private void queueMessageForDisplay(@NonNull OSInAppMessage message) {\n         synchronized (messageDisplayQueue) {\n-            // Make sure no message is ever added to the queue more than once\n-            if (!messageDisplayQueue.contains(message)) {\n-                messageDisplayQueue.add(message);\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message with id, \" + message.messageId + \", added to the queue\");\n-            }\n-\n-            attemptToShowInAppMessage();\n-        }\n-    }\n+            messageDisplayQueue.add(message);\n+            if (!message.isPreview)\n+                triggeredMessages.add(message.messageId);\n \n-    private void attemptToShowInAppMessage() {\n-        synchronized (messageDisplayQueue) {\n-            // We need to wait for system conditions to be the correct ones\n-            if (!systemConditionController.systemConditionsAvailable()) {\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.WARN, \"In app message not showing due to system condition not correct\");\n-                return;\n-            }\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"queueMessageForDisplay: \" + messageDisplayQueue);\n \n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"displayFirstIAMOnQueue: \" + messageDisplayQueue);\n-            // If there are IAMs in the queue and nothing showing, show first in the queue\n-            if (messageDisplayQueue.size() > 0 && !isInAppMessageShowing()) {\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"No IAM showing currently, showing first item in the queue!\");\n-                displayMessage(messageDisplayQueue.get(0));\n+            if (messageDisplayQueue.size() > 1) {\n+                // means we are already displaying a message\n+                // this message will be displayed afterwards\n                 return;\n             }\n \n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message is currently showing or there are no IAMs left in the queue!\");\n+            displayMessage(message);\n         }\n     }\n \n-    boolean isInAppMessageShowing() {\n-        return inAppMessageShowing;\n+    boolean isDisplayingInApp() {\n+        return messageDisplayQueue.size() > 0;\n     }\n \n-    @Nullable OSInAppMessage getCurrentDisplayedInAppMessage() {\n-        // When in app messaging is paused, the messageDisplayQueue might have IAMs, so return null\n-        return inAppMessageShowing ? messageDisplayQueue.get(0) : null;\n+    @Nullable\n+    OSInAppMessage getCurrentDisplayedInAppMessage() {\n+        return isDisplayingInApp() ? messageDisplayQueue.get(0) : null;\n     }\n \n-    /**\n-     * Called after an In-App message is closed and it's dismiss animation has completed\n-     */\n+    // Called after an In-App message is closed and it's dismiss animation has completed\n     void messageWasDismissed(@NonNull OSInAppMessage message) {\n-        if (!message.isPreview) {\n-            dismissedMessages.add(message.messageId);\n-            OneSignalPrefs.saveStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                    dismissedMessages);\n-\n-            // Don't keep track of last displayed time for a preview\n-            lastTimeInAppDismissed = new Date();\n-            persistInAppMessage(message);\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"OSInAppMessageController messageWasDismissed dismissedMessages: \" + dismissedMessages.toString());\n-        }\n-\n-        dismissCurrentMessage(message);\n-    }\n-\n-    /**\n-     * Removes first item from the queue and attempts to show the next IAM in the queue\n-     *\n-     * @param message The message dismissed, preview messages are null\n-     */\n-    private void dismissCurrentMessage(@Nullable OSInAppMessage message) {\n-        if (currentPrompt != null) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Stop evaluateMessageDisplayQueue because prompt is currently displayed\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = false;\n         synchronized (messageDisplayQueue) {\n-            if (messageDisplayQueue.size() > 0) {\n-                if (message != null && !messageDisplayQueue.contains(message)) {\n-                    OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Message already removed from the queue!\");\n-                    return;\n-                } else {\n-                    String removedMessageId = messageDisplayQueue.remove(0).messageId;\n-                    OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message with id, \" + removedMessageId + \", dismissed (removed) from the queue!\");\n-                }\n+            if (!messageDisplayQueue.remove(message)) {\n+                if (!message.isPreview)\n+                    OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"An in-app message was removed from the display queue before it was finished displaying.\");\n+                return;\n             }\n \n-            // Display the next message in the queue, or attempt to add more IAMs to the queue\n-            if (messageDisplayQueue.size() > 0) {\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message on queue available: \" + messageDisplayQueue.get(0).messageId);\n+            if (!message.isPreview)\n+                persistDisplayedIams();\n+\n+            // Display the next message in the queue, if any\n+            if (messageDisplayQueue.size() > 0)\n                 displayMessage(messageDisplayQueue.get(0));\n-            } else {\n-                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message dismissed evaluating messages\");\n+            else {\n+                lastTimeInAppDismissed = new Date();\n                 evaluateInAppMessages();\n             }\n         }\n     }\n \n-    private void persistInAppMessage(final OSInAppMessage message) {\n-        long displayTimeSeconds = System.currentTimeMillis() / 1000;\n-        message.getRedisplayStats().setLastDisplayTime(displayTimeSeconds);\n-        message.getRedisplayStats().incrementDisplayQuantity();\n-        message.setTriggerChanged(false);\n-        message.setDisplayedInSession(true);\n+    private void persistDisplayedIams() {\n+        OneSignalPrefs.saveStringSet(\n+           OneSignalPrefs.PREFS_ONESIGNAL,\n+           OneSignalPrefs.PREFS_OS_DISPLAYED_IAMS,\n+           // Persisting only ones dismissed / opened in case the user didn't have a chance\n+           //  to interact with the message.\n+           getAllDismissedIams()\n+        );\n+    }\n \n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                inAppMessageRepository.saveInAppMessage(message);\n-            }\n-        }, OS_SAVE_IN_APP_MESSAGE).start();\n-\n-        // Update the data to enable future re displays\n-        // Avoid calling the repository data again\n-        int index = redisplayedInAppMessages.indexOf(message);\n-        if (index != -1) {\n-            redisplayedInAppMessages.set(index, message);\n-        } else {\n-            redisplayedInAppMessages.add(message);\n+    // Calculate all dismissed as triggeredMessages minus any in the display queue\n+    private @NonNull Set<String> getAllDismissedIams() {\n+        Set<String> dismissedIams = new HashSet<>(triggeredMessages);\n+        synchronized (messageDisplayQueue) {\n+            for (OSInAppMessage message : messageDisplayQueue)\n+                dismissedIams.remove(message.messageId);\n         }\n-\n-        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        return dismissedIams;\n     }\n \n-    private static @Nullable String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable\n+    String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n", "next_change": {"commit": "1f04f03c11c87990f023c554cfb902e07d850374", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 7b978ede..3a5bb53f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -303,96 +433,175 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         }\n     }\n \n-    private void messageCanBeDisplayed(@NonNull OSInAppMessage message) {\n-        if (!inAppMessagingEnabled)\n+    /**\n+     * Part of redisplay logic\n+     *\n+     * In order to redisplay an IAM, the following conditions must be satisfied:\n+     *     1. IAM has redisplay property\n+     *     2. Time delay between redisplay satisfied\n+     *     3. Has more redisplays\n+     *     4. An IAM trigger was satisfied\n+     *\n+     * For redisplay, the message need to be removed from the arrays that track the display/impression\n+     * For click counting, every message has it click id array\n+     * */\n+    private void setDataForRedisplay(OSInAppMessage message) {\n+        if (!message.getDisplayStats().isRedisplayEnabled())\n             return;\n \n-        if (triggeredMessages.contains(message.messageId) &&\n-            !message.isPreview) {\n-            OneSignal.Log(\n-               OneSignal.LOG_LEVEL.ERROR,\n-               \"In-App message with id '\" +\n-                  message.messageId +\n-                  \"' already displayed or is already preparing to be display!\");\n-            return;\n-        }\n+        boolean messageDismissed = dismissedMessages.contains(message.messageId);\n+        int index = redisplayedInAppMessages.indexOf(message);\n \n-        queueMessageForDisplay(message);\n+        if (messageDismissed && index != -1) {\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"setDataForRedisplay: \" + message.messageId);\n+\n+            OSInAppMessage savedIAM = redisplayedInAppMessages.get(index);\n+            message.getDisplayStats().setDisplayStats(savedIAM.getDisplayStats());\n+\n+            // Message that don't have triggers should display only once per session\n+            boolean triggerHasChanged = message.isTriggerChanged() || (!savedIAM.isDisplayedInSession() && message.triggers.isEmpty());\n+            // Check if conditions are correct for redisplay\n+            if (triggerHasChanged &&\n+                    message.getDisplayStats().isDelayTimeSatisfied() &&\n+                    message.getDisplayStats().shouldDisplayAgain()) {\n+                dismissedMessages.remove(message.messageId);\n+                impressionedMessages.remove(message.messageId);\n+                message.clearClickIds();\n+            }\n+        }\n     }\n \n-    // Message has passed triggers and de-duplication logic.\n-    // Display message now or add it to the queue to be displayed.\n+    /**\n+     * Message has passed triggers and de-duplication logic.\n+     * Display message now or add it to the queue to be displayed.\n+     */\n     private void queueMessageForDisplay(@NonNull OSInAppMessage message) {\n         synchronized (messageDisplayQueue) {\n-            messageDisplayQueue.add(message);\n-            if (!message.isPreview)\n-                triggeredMessages.add(message.messageId);\n+            // Make sure no message is ever added to the queue more than once\n+            if (!messageDisplayQueue.contains(message)) {\n+                messageDisplayQueue.add(message);\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message with id, \" + message.messageId + \", added to the queue\");\n+            }\n \n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"queueMessageForDisplay: \" + messageDisplayQueue);\n+            attemptToShowInAppMessage();\n+        }\n+    }\n+\n+    private void attemptToShowInAppMessage() {\n+        synchronized (messageDisplayQueue) {\n+            // We need to wait for system conditions to be the correct ones\n+            if (!systemConditionController.systemConditionsAvailable()) {\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.WARN, \"In app message not showing due to system condition not correct\");\n+                return;\n+            }\n \n-            if (messageDisplayQueue.size() > 1) {\n-                // means we are already displaying a message\n-                // this message will be displayed afterwards\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"displayFirstIAMOnQueue: \" + messageDisplayQueue);\n+            // If there are IAMs in the queue and nothing showing, show first in the queue\n+            if (messageDisplayQueue.size() > 0 && !isInAppMessageShowing()) {\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"No IAM showing currently, showing first item in the queue!\");\n+                displayMessage(messageDisplayQueue.get(0));\n                 return;\n             }\n \n-            displayMessage(message);\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message is currently showing or there are no IAMs left in the queue!\");\n         }\n     }\n \n-    boolean isDisplayingInApp() {\n-        return messageDisplayQueue.size() > 0;\n+    boolean isInAppMessageShowing() {\n+        return inAppMessageShowing;\n     }\n \n-    @Nullable\n-    OSInAppMessage getCurrentDisplayedInAppMessage() {\n-        return isDisplayingInApp() ? messageDisplayQueue.get(0) : null;\n+    @Nullable OSInAppMessage getCurrentDisplayedInAppMessage() {\n+        // When in app messaging is paused, the messageDisplayQueue might have IAMs, so return null\n+        return inAppMessageShowing ? messageDisplayQueue.get(0) : null;\n     }\n \n-    // Called after an In-App message is closed and it's dismiss animation has completed\n+    /**\n+     * Called after an In-App message is closed and it's dismiss animation has completed\n+     */\n     void messageWasDismissed(@NonNull OSInAppMessage message) {\n+        if (!message.isPreview) {\n+            dismissedMessages.add(message.messageId);\n+            OneSignalPrefs.saveStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                    dismissedMessages);\n+\n+            // Don't keep track of last displayed time for a preview\n+            lastTimeInAppDismissed = new Date();\n+            persistInAppMessageForRedisplay(message);\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"OSInAppMessageController messageWasDismissed dismissedMessages: \" + dismissedMessages.toString());\n+        }\n+\n+        dismissCurrentMessage(message);\n+    }\n+\n+    /**\n+     * Removes first item from the queue and attempts to show the next IAM in the queue\n+     *\n+     * @param message The message dismissed, preview messages are null\n+     */\n+    private void dismissCurrentMessage(@Nullable OSInAppMessage message) {\n+        if (currentPrompt != null) {\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Stop evaluateMessageDisplayQueue because prompt is currently displayed\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = false;\n         synchronized (messageDisplayQueue) {\n-            if (!messageDisplayQueue.remove(message)) {\n-                if (!message.isPreview)\n-                    OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"An in-app message was removed from the display queue before it was finished displaying.\");\n-                return;\n+            if (messageDisplayQueue.size() > 0) {\n+                if (message != null && !messageDisplayQueue.contains(message)) {\n+                    OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Message already removed from the queue!\");\n+                    return;\n+                } else {\n+                    String removedMessageId = messageDisplayQueue.remove(0).messageId;\n+                    OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message with id, \" + removedMessageId + \", dismissed (removed) from the queue!\");\n+                }\n             }\n \n-            if (!message.isPreview)\n-                persistDisplayedIams();\n-\n-            // Display the next message in the queue, if any\n-            if (messageDisplayQueue.size() > 0)\n+            // Display the next message in the queue, or attempt to add more IAMs to the queue\n+            if (messageDisplayQueue.size() > 0) {\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message on queue available: \" + messageDisplayQueue.get(0).messageId);\n                 displayMessage(messageDisplayQueue.get(0));\n-            else {\n-                lastTimeInAppDismissed = new Date();\n+            } else {\n+                OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"In app message dismissed evaluating messages\");\n                 evaluateInAppMessages();\n             }\n         }\n     }\n \n-    private void persistDisplayedIams() {\n-        OneSignalPrefs.saveStringSet(\n-           OneSignalPrefs.PREFS_ONESIGNAL,\n-           OneSignalPrefs.PREFS_OS_DISPLAYED_IAMS,\n-           // Persisting only ones dismissed / opened in case the user didn't have a chance\n-           //  to interact with the message.\n-           getAllDismissedIams()\n-        );\n-    }\n+    private void persistInAppMessageForRedisplay(final OSInAppMessage message) {\n+        //If the IAM doesn't have the re display configuration then no need to save it\n+        if (!message.getDisplayStats().isRedisplayEnabled())\n+            return;\n \n-    // Calculate all dismissed as triggeredMessages minus any in the display queue\n-    private @NonNull Set<String> getAllDismissedIams() {\n-        Set<String> dismissedIams = new HashSet<>(triggeredMessages);\n-        synchronized (messageDisplayQueue) {\n-            for (OSInAppMessage message : messageDisplayQueue)\n-                dismissedIams.remove(message.messageId);\n+        long displayTimeSeconds = System.currentTimeMillis() / 1000;\n+        message.getDisplayStats().setLastDisplayTime(displayTimeSeconds);\n+        message.getDisplayStats().incrementDisplayQuantity();\n+        message.setTriggerChanged(false);\n+        message.setDisplayedInSession(true);\n+\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n+                inAppMessageRepository.saveInAppMessage(message);\n+            }\n+        }, OS_SAVE_IN_APP_MESSAGE).start();\n+\n+        // Update the data to enable future re displays\n+        // Avoid calling the repository data again\n+        int index = redisplayedInAppMessages.indexOf(message);\n+        if (index != -1) {\n+            redisplayedInAppMessages.set(index, message);\n+        } else {\n+            redisplayedInAppMessages.add(message);\n         }\n-        return dismissedIams;\n+\n+        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable\n-    String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3a5bb53f..898bd8fe 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -601,7 +612,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable\n+    String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n", "next_change": {"commit": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 898bd8fe..be96d53c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -609,15 +624,14 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable\n-    String htmlPathForMessage(OSInAppMessage message) {\n+    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n+            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "dd7fc0ed273f6c74e7104e8604834230a38db804", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex be96d53c..5435d73b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -624,14 +643,15 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable\n+    String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 5435d73b..ed829059 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -643,15 +632,14 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable\n-    String htmlPathForMessage(OSInAppMessage message) {\n+    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n+            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "1c8354ac0d3bf85578e93a336eb02b0a98e6826e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex ed829059..507da86d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -632,14 +621,15 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n+    private static @Nullable\n+    String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -621,15 +640,14 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n             redisplayedInAppMessages.add(message);\n         }\n \n-        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n+        logger.debug(\"persistInAppMessageForRedisplay: \" + message.toString() + \" with msg array data: \" + redisplayedInAppMessages.toString());\n     }\n \n-    private static @Nullable\n-    String htmlPathForMessage(OSInAppMessage message) {\n+    private @Nullable String htmlPathForMessage(OSInAppMessage message) {\n         String variantId = variantIdForMessage(message);\n \n         if (variantId == null) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.ERROR, \"Unable to find a variant for in-app message \" + message.messageId);\n+            logger.error(\"Unable to find a variant for in-app message \" + message.messageId);\n             return null;\n         }\n \n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -654,6 +755,29 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -755,29 +744,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n-        waitForTags = false;\n-        if (isPreview || message.getHasLiquid()) {\n-            waitForTags = true;\n-            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n-                @Override\n-                public void tagsAvailable(JSONObject tags) {\n-                    waitForTags = false;\n-                    if (tags != null) {\n-                        userTagsString = tags.toString();\n-                    }\n-                    if (pendingHTMLContent != null) {\n-                        if (!isPreview) {\n-                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                        }\n-                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n-                        pendingHTMLContent = null;\n-                    }\n-                }\n-            });\n-        }\n-    }\n-\n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -744,6 +756,29 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n", "next_change": {"commit": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd008ebb 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -779,7 +733,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         }\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n+    private void displayMessage(@NonNull final OSInAppMessageInternal message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n", "next_change": {"commit": "397de126ec2f5ace01cb6c098ec503f1db2effa8", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex fd008ebb..21c8727c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -721,18 +775,26 @@ class OSInAppMessageController extends OSBackgroundManager implements OSDynamicT\n                     if (tags != null) {\n                         userTagsString = tags.toString();\n                     }\n-                    if (pendingHTMLContent != null) {\n+                    if (pendingMessageContent != null) {\n                         if (!isPreview) {\n                             OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n                         }\n-                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n-                        pendingHTMLContent = null;\n+                        pendingMessageContent.setContentHtml(taggedHTMLString(pendingMessageContent.getContentHtml()));\n+                        WebViewManager.showMessageContent(message, pendingMessageContent);\n+                        pendingMessageContent = null;\n                     }\n                 }\n             });\n         }\n     }\n \n+    private OSInAppMessageContent parseMessageContentData(JSONObject data, OSInAppMessageInternal message) {\n+        OSInAppMessageContent content = new OSInAppMessageContent(data);\n+        double displayDuration = data.optDouble(\"display_duration\");\n+        message.setDisplayDuration(displayDuration);\n+        return content;\n+    }\n+\n     private void displayMessage(@NonNull final OSInAppMessageInternal message) {\n         if (!inAppMessagingEnabled) {\n             logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n", "next_change": {"commit": "4bd2209ac8064779ad52c3c375086e1a4ea375c2", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 21c8727c..20bc9880 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -790,8 +790,7 @@ class OSInAppMessageController extends OSBackgroundManager implements OSDynamicT\n \n     private OSInAppMessageContent parseMessageContentData(JSONObject data, OSInAppMessageInternal message) {\n         OSInAppMessageContent content = new OSInAppMessageContent(data);\n-        double displayDuration = data.optDouble(\"display_duration\");\n-        message.setDisplayDuration(displayDuration);\n+        message.setDisplayDuration(content.getDisplayDuration());\n         return content;\n     }\n \n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -638,7 +656,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..9d2e8e50 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -662,6 +759,25 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        boolean hasLiquid = true; // placeholder\n+        if (hasLiquid) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();;\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 9d2e8e50..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -751,32 +755,38 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n-        if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = true;\n-\n-        boolean hasLiquid = true; // placeholder\n-        if (hasLiquid) {\n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n             waitForTags = true;\n             OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n                 @Override\n                 public void tagsAvailable(JSONObject tags) {\n                     waitForTags = false;\n                     if (tags != null) {\n-                        userTagsString = tags.toString();;\n+                        userTagsString = tags.toString();\n                     }\n                     if (pendingHTMLContent != null) {\n-                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n                         WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n                         pendingHTMLContent = null;\n                     }\n                 }\n             });\n         }\n+    }\n+\n+    private void displayMessage(@NonNull final OSInAppMessage message) {\n+        if (!inAppMessagingEnabled) {\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = true;\n+\n+        getTagsForLiquidTemplating(message, false);\n \n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex ed829059..507da86d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -648,7 +638,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -638,7 +656,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..9d2e8e50 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -662,6 +759,25 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        boolean hasLiquid = true; // placeholder\n+        if (hasLiquid) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();;\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 9d2e8e50..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -751,32 +755,38 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n-        if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = true;\n-\n-        boolean hasLiquid = true; // placeholder\n-        if (hasLiquid) {\n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n             waitForTags = true;\n             OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n                 @Override\n                 public void tagsAvailable(JSONObject tags) {\n                     waitForTags = false;\n                     if (tags != null) {\n-                        userTagsString = tags.toString();;\n+                        userTagsString = tags.toString();\n                     }\n                     if (pendingHTMLContent != null) {\n-                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n                         WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n                         pendingHTMLContent = null;\n                     }\n                 }\n             });\n         }\n+    }\n+\n+    private void displayMessage(@NonNull final OSInAppMessage message) {\n+        if (!inAppMessagingEnabled) {\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = true;\n+\n+        getTagsForLiquidTemplating(message, false);\n \n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 5435d73b..ed829059 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -660,7 +648,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "1c8354ac0d3bf85578e93a336eb02b0a98e6826e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex ed829059..507da86d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -648,7 +638,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -638,7 +656,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..9d2e8e50 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -662,6 +759,25 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        boolean hasLiquid = true; // placeholder\n+        if (hasLiquid) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();;\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 9d2e8e50..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -751,32 +755,38 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n-        if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = true;\n-\n-        boolean hasLiquid = true; // placeholder\n-        if (hasLiquid) {\n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n             waitForTags = true;\n             OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n                 @Override\n                 public void tagsAvailable(JSONObject tags) {\n                     waitForTags = false;\n                     if (tags != null) {\n-                        userTagsString = tags.toString();;\n+                        userTagsString = tags.toString();\n                     }\n                     if (pendingHTMLContent != null) {\n-                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n                         WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n                         pendingHTMLContent = null;\n                     }\n                 }\n             });\n         }\n+    }\n+\n+    private void displayMessage(@NonNull final OSInAppMessage message) {\n+        if (!inAppMessagingEnabled) {\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = true;\n+\n+        getTagsForLiquidTemplating(message, false);\n \n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex be96d53c..5435d73b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -640,7 +660,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 5435d73b..ed829059 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -660,7 +648,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "1c8354ac0d3bf85578e93a336eb02b0a98e6826e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex ed829059..507da86d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -648,7 +638,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 507da86d..cd95f794 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -638,7 +656,7 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n     private void displayMessage(@NonNull final OSInAppMessage message) {\n         if (!inAppMessagingEnabled) {\n-            OneSignal.onesignalLog(OneSignal.LOG_LEVEL.VERBOSE, \"In app messaging is currently paused, iam will not be shown!\");\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n             return;\n         }\n \n", "next_change": {"commit": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex cd95f794..9d2e8e50 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -662,6 +759,25 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        boolean hasLiquid = true; // placeholder\n+        if (hasLiquid) {\n+            waitForTags = true;\n+            OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n+                @Override\n+                public void tagsAvailable(JSONObject tags) {\n+                    waitForTags = false;\n+                    if (tags != null) {\n+                        userTagsString = tags.toString();;\n+                    }\n+                    if (pendingHTMLContent != null) {\n+                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n+                        pendingHTMLContent = null;\n+                    }\n+                }\n+            });\n+        }\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "989224b56cbf05fd870093de9068afc679658800", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 9d2e8e50..3b9de07c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -751,32 +755,38 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n         return \"in_app_messages/\" + message.messageId + \"/variants/\" + variantId + \"/html?app_id=\" + OneSignal.appId;\n     }\n \n-    private void displayMessage(@NonNull final OSInAppMessage message) {\n-        if (!inAppMessagingEnabled) {\n-            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n-            return;\n-        }\n-\n-        inAppMessageShowing = true;\n-\n-        boolean hasLiquid = true; // placeholder\n-        if (hasLiquid) {\n+    private void getTagsForLiquidTemplating(@NonNull final OSInAppMessage message, final boolean isPreview) {\n+        waitForTags = false;\n+        if (isPreview || message.getHasLiquid()) {\n             waitForTags = true;\n             OneSignal.getTags(new OneSignal.OSGetTagsHandler() {\n                 @Override\n                 public void tagsAvailable(JSONObject tags) {\n                     waitForTags = false;\n                     if (tags != null) {\n-                        userTagsString = tags.toString();;\n+                        userTagsString = tags.toString();\n                     }\n                     if (pendingHTMLContent != null) {\n-                        OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        if (!isPreview) {\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                        }\n                         WebViewManager.showHTMLString(message, taggedHTMLString(pendingHTMLContent));\n                         pendingHTMLContent = null;\n                     }\n                 }\n             });\n         }\n+    }\n+\n+    private void displayMessage(@NonNull final OSInAppMessage message) {\n+        if (!inAppMessagingEnabled) {\n+            logger.verbose(\"In app messaging is currently paused, in app messages will not be shown!\");\n+            return;\n+        }\n+\n+        inAppMessageShowing = true;\n+\n+        getTagsForLiquidTemplating(message, false);\n \n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n", "next_change": {"commit": "cfcc5721681476f9dafc35be23cde7e27009a346", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3b9de07c..3f353100 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -786,8 +752,6 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n-        getTagsForLiquidTemplating(message, false);\n-\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "4a5fa0dc9d095632391dbc57a620165a9a111280", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 3f353100..891ea118 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -752,6 +787,8 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         inAppMessageShowing = true;\n \n+        getTagsForLiquidTemplating(message, false);\n+\n         String htmlPath = htmlPathForMessage(message);\n         OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n             @Override\n", "next_change": {"commit": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\nindex 891ea118..fd6b3e8e 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java\n", "chunk": "@@ -789,51 +770,46 @@ class OSInAppMessageController implements OSDynamicTriggerControllerObserver, OS\n \n         getTagsForLiquidTemplating(message, false);\n \n-        String htmlPath = htmlPathForMessage(message);\n-        OneSignalRestClient.get(htmlPath, new ResponseHandler() {\n-            @Override\n-            void onFailure(int statusCode, String response, Throwable throwable) {\n-                inAppMessageShowing = false;\n-\n-                printHttpErrorForInAppMessageRequest(\"html\", statusCode, response);\n-\n-                if (!OSUtils.shouldRetryNetworkRequest(statusCode) || htmlNetworkRequestAttemptCount >= OSUtils.MAX_NETWORK_REQUEST_ATTEMPT_COUNT) {\n-                    // Failure limit reached, reset\n-                    htmlNetworkRequestAttemptCount = 0;\n-                    messageWasDismissed(message, true);\n-                    return;\n-                }\n-\n-                // Failure limit not reached, increment by 1\n-                htmlNetworkRequestAttemptCount++;\n-                // Retry displaying the same IAM\n-                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n-                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n-                queueMessageForDisplay(message);\n-            }\n-\n-            @Override\n-            void onSuccess(String response) {\n-                // Successful request, reset count\n-                htmlNetworkRequestAttemptCount = 0;\n-\n-                try {\n-                    JSONObject jsonResponse = new JSONObject(response);\n-                    String htmlStr = jsonResponse.getString(\"html\");\n+        inAppMessageRepository.getIAMData(OneSignal.appId, message.messageId, variantIdForMessage(message),\n+                new OSInAppMessageRepository.OSInAppMessageRequestResponse() {\n+                    @Override\n+                    public void onSuccess(String response) {\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            String htmlStr = jsonResponse.getString(\"html\");\n+\n+                            double displayDuration = jsonResponse.optDouble(\"display_duration\");\n+                            message.setDisplayDuration(displayDuration);\n+                            if (waitForTags) {\n+                                pendingHTMLContent = htmlStr;\n+                                return;\n+                            }\n+                            OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n+                            WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n \n-                    double displayDuration = jsonResponse.optDouble(\"display_duration\");\n-                    message.setDisplayDuration(displayDuration);\n-                    if (waitForTags) {\n-                        pendingHTMLContent = htmlStr;\n-                        return;\n+                    @Override\n+                    public void onFailure(String response) {\n+                        inAppMessageShowing = false;\n+                        try {\n+                            JSONObject jsonResponse = new JSONObject(response);\n+                            boolean retry = jsonResponse.getBoolean(IAM_DATA_RESPONSE_RETRY_KEY);\n+                            if (retry) {\n+                                // Retry displaying the same IAM\n+                                // Using the queueMessageForDisplay method follows safety checks to prevent issues\n+                                // like having 2 IAMs showing at once or duplicate IAMs in the queue\n+                                queueMessageForDisplay(message);\n+                            } else {\n+                                messageWasDismissed(message, true);\n+                            }\n+                        } catch (JSONException e) {\n+                            e.printStackTrace();\n+                        }\n                     }\n-                    OneSignal.getSessionManager().onInAppMessageReceived(message.messageId);\n-                    WebViewManager.showHTMLString(message, taggedHTMLString(htmlStr));\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }, null);\n+                });\n     }\n \n     @NonNull\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Bulk of work inside OneSignal, start of remove init * Created two new init methods, setAppId and setAppContext, these are required to init OneSignal * Deleted mInitBuilder and added all params into OneSignal (we should do something like this again, but more organized and not inside of a builder, maybe a simple singleton class?) * Created a dummy OSNotificationWillShowInForegroundResult.java for now until we create the real thing, but this will replace notification received handler"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "28684e756706a637808bab08ec62f57500d206f0", "committedDate": "2020-04-29 22:19:43 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "36d7f7345fb7ade8cd4edf29f2045fefee90db4b", "committedDate": "2020-05-12 15:56:31 -0300", "message": "Add location permissions not available alert dialog"}, {"oid": "99c521e0f58b16383581b068b9bd6b4aae026593", "committedDate": "2020-05-14 11:45:28 -0300", "message": "Fix Deadlock under IAM 401 request error"}, {"oid": "386aa030db286924e0fd52b1f8461d11b8b1c99b", "committedDate": "2020-05-14 12:15:58 -0300", "message": "Not increase redisplay count under fail IAM request"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "a5bc886933e9eda2e746322d05be9125e2cbb531", "committedDate": "2020-05-21 10:53:36 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "committedDate": "2020-06-10 16:53:44 -0400", "message": "Using singleton `OSInAppMessageController.java` instead of new * Created singleton based `getInAppMessageRepository` method inside of `OSInAppMessageController.java` class * This allows the synchronized to apply to multiple methods being called from the class instance * Deleted unused thread name since new Thread was moved toi cache cleaning file with different thread name now"}, {"oid": "27d22f1e956e0a36c2c38581c02fbc796a404cd2", "committedDate": "2020-06-10 17:34:54 -0400", "message": "Reverted to new instance within `initRedisplayData` * Changed the `new OSInAppMessageRepository(dbHelper);` to `getInAppMessageRepository(dbHelper);` and it broke a UnitTest in Travis"}, {"oid": "8b7e6897f740a599f0edd1acdce9a07d568c130e", "committedDate": "2020-06-10 18:20:51 -0400", "message": "Fixing travis tests * After comment added `OSInAppMessageController.java` into `StaticResetHelper.java`"}, {"oid": "87f75f4b465857b4bab5e1521c7f9e6e446b1cf3", "committedDate": "2020-06-10 17:32:34 -0700", "message": "Fixed race condition with OSInAppMessageController"}, {"oid": "282a3dfd5c24da7fbff624dc6def0a5ebe8715a7", "committedDate": "2020-06-10 22:40:07 -0400", "message": "Adding 2 layers of control to prevent locks in SQL DB and minor clean up (#1050)"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "8aeb5bfbd32112f07ea4682ac3bc170944cb01a1", "committedDate": "2020-08-21 16:31:34 -0300", "message": "Fully implement `NotificationWillShowInForeground` (#1010)"}, {"oid": "04eb2b6c5d88936556fc2090168019d7080d5a6d", "committedDate": "2020-09-11 16:36:10 -0300", "message": "Encapsulate OSInAppMessageAction"}, {"oid": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "committedDate": "2020-09-16 11:29:32 -0300", "message": "Add and improve logs on public methods (#1146)"}, {"oid": "726b3c35e09228e5c318bc608f231c703f181f12", "committedDate": "2020-09-21 15:39:11 -0300", "message": "Fix foreground check when calling initWithContext with Activity (#1151)"}, {"oid": "dd7fc0ed273f6c74e7104e8604834230a38db804", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Fix IAM not being redisplay by SESSION DURATION"}, {"oid": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Reset dynamic session launch time"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "1c8354ac0d3bf85578e93a336eb02b0a98e6826e", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Iterate over message instead of redisplay"}, {"oid": "cc3826e7997f75e6ed538f996e535180ba579650", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Init IAM with cached IAMs on new session"}, {"oid": "05b05de025f4b3ea6159e9badfba47468bce6c0c", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Make IAM not display under splas screenh when back pressing"}, {"oid": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "committedDate": "2020-10-07 17:24:28 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "32da4ecc878ac2984583ff69b05b958cf4e49502", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Add remaining consistency changes"}, {"oid": "2d04a710668e95d98d072611488def7a3ee16127", "committedDate": "2020-12-09 15:49:27 -0800", "message": "adding page impression rest call and page changed logic"}, {"oid": "565f47671c2dfe73426ed0a49471b13d6e12dafb", "committedDate": "2020-12-09 15:49:27 -0800", "message": "firing onPageChanged from json event"}, {"oid": "0149a12c6d25806e583d070864564e52fbd0860b", "committedDate": "2020-12-09 15:49:27 -0800", "message": "Unit test for page changed event"}, {"oid": "04790085256c86606e69a3f5c622f4a562a2c039", "committedDate": "2020-12-09 16:14:31 -0800", "message": "matching json to backend spec change"}, {"oid": "c475819b393b0c719e75f99e19f413a93a1b0b24", "committedDate": "2020-12-11 14:16:08 -0300", "message": "Fix IAM redisplay multiple times"}, {"oid": "524d30d351832b3b8eb5789fb2a867356a5c5e3b", "committedDate": "2020-12-21 17:51:35 -0800", "message": "Fix showing IAMs past their end time"}, {"oid": "d865c2202fe3dcf5a7959140f03eec8c4adba4eb", "committedDate": "2020-12-23 14:24:04 -0800", "message": "removing page id check in pageChanged"}, {"oid": "38ef376becb0ea4cf518f6d2dfb79d42523a2cb0", "committedDate": "2020-12-23 14:24:04 -0800", "message": "Storing pageIds to prefs to fix double impression"}, {"oid": "09ebc874912e6105de2817594d0120af1533cfd8", "committedDate": "2020-12-23 14:36:43 -0800", "message": "Merge pull request #1239 from OneSignal/feature/iam_carousel"}, {"oid": "40fb5a290b0d56358e0b900f1b6f2eb5546b9a08", "committedDate": "2021-02-22 14:06:15 -0800", "message": "Adding script for injecting tags into IAM"}, {"oid": "a0263fc71cfd232060e6e266b0c5d35e4fd35e3f", "committedDate": "2021-02-22 15:14:29 -0800", "message": "getting tags in parallel with IAM html content if hasLiquid"}, {"oid": "8295c0a2a0daf2cbce3da78460672f179700fce0", "committedDate": "2021-02-22 18:02:24 -0800", "message": "adding hasLiquid to OSInAppMessage"}, {"oid": "b7ca4ffce667be67fc0f3f0f4ac5880ebfd9bf12", "committedDate": "2021-03-02 15:22:42 -0800", "message": "removing extra semicolon"}, {"oid": "b4eaf71ad691313a4045154ef70459ce69e83aae", "committedDate": "2021-03-05 10:44:06 -0800", "message": "adding nonnull to taggedHTMLString"}, {"oid": "88926272c2046f06b4f4744ff59ed093191bb335", "committedDate": "2021-03-10 16:15:27 -0800", "message": "rename of javascript variable for player's tags"}, {"oid": "1db43af1d7bcdad45fa7ffc4b60614b2810d83d9", "committedDate": "2021-03-11 13:34:40 -0800", "message": "using setPlayerTags function instead of setting tag variable directly"}, {"oid": "989224b56cbf05fd870093de9068afc679658800", "committedDate": "2021-03-11 17:19:37 -0800", "message": "Fixing tag substitution for IAM previews"}, {"oid": "cfcc5721681476f9dafc35be23cde7e27009a346", "committedDate": "2021-03-15 16:10:30 -0300", "message": "Move IAM cache cleaning to OSInAppMessageController"}, {"oid": "4a5fa0dc9d095632391dbc57a620165a9a111280", "committedDate": "2021-03-17 14:01:37 -0700", "message": "Merge pull request #1290 from OneSignal/improvement/thread-access-db"}, {"oid": "a50d2dbe3daebc53645dbc4733ab00b0801f4807", "committedDate": "2021-03-30 16:10:58 -0300", "message": "Make all IAM DB access request out of MainThread"}, {"oid": "27d703e490b16901ebe3e954eb850778014eb936", "committedDate": "2021-03-30 16:10:58 -0300", "message": "Add pending tasks to IAMController"}, {"oid": "87ff8245c974d3e6b0349a7c9eeab23b4b251736", "committedDate": "2021-04-13 15:51:53 -0300", "message": "Add null check for currentActivityName"}, {"oid": "211e795daad2798b7ff68b5b4c50ccd79b925174", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Fix getLanguage  OSInAppMessageController and NotificationChannelManager"}, {"oid": "34507f0fa83ab403bb21ca59f1fcf6edef46b328", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Add LanguageContext Dependency to OSInAppMessageController"}, {"oid": "6badcb9ca8cff5624a56ed1f61da83be84718f1d", "committedDate": "2021-07-12 15:04:55 -0300", "message": "Fix IAM preview message id NPE"}, {"oid": "417632c1d08968b352092cc9693fc31a879692c0", "committedDate": "2021-07-22 15:30:07 -0300", "message": "Avoid continuing with null message Ids"}, {"oid": "d4d400e4f3ffbf59dc04f71d5dc95e45ddc29008", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Remove Preview request code from Controller"}, {"oid": "adf2064ba9d050faa70651c5fa025b4341a14ef6", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM impressioned request to repository"}, {"oid": "a08b8ac2d2c8afce7208523e835b258d3e3d186b", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM click request to Repository"}, {"oid": "d914dfa6f626d0ec4f4ccf6ad26ae5ff0343ad33", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM page impression request to Repository"}, {"oid": "44c32ba17e9b5fc298df734cc4347ad0319a3924", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM data request to Repository"}, {"oid": "702634d4b3e083f1c0bbfc5c1797d3072bfd623e", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move shared preferences access to Repository"}, {"oid": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "committedDate": "2021-08-09 13:44:11 -0700", "message": "Rename OSInAppMessage to OSInAppMessageInternal"}, {"oid": "cd5c1650e2e305bb5788b8040d1d3a201ac8da8e", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Add unit test testIAMLifecycleEventsFlow"}, {"oid": "20a1ccb6c96387b9a1f353775208b3aa70951936", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fill out lifecycle method calls in OSInAppMessageController"}, {"oid": "debcbd67bf828f0b75d3490a6b593f2ee4e12c52", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Call willDisplay, didDisplay, didDismiss IAM methods"}, {"oid": "3533c5487def7a7ea38bb2717da317de5020b004", "committedDate": "2021-08-16 14:49:25 -0700", "message": "adding onMessageWillDisplay call for IAM Previews"}, {"oid": "475953901bd9f4cb7f3d6518d442bb140cc1080d", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fixing dismissing lifecycle methods for IAMs with prompts"}, {"oid": "e750c009bea37867eb00836c9dc1d3547387ecb4", "committedDate": "2021-08-17 15:26:21 -0700", "message": "Move `inAppMessageLifecycleHandler` to `OSInAppMessageController`"}, {"oid": "397de126ec2f5ace01cb6c098ec503f1db2effa8", "committedDate": "2021-09-02 10:27:21 -0700", "message": "Parsing loadContentHTML into OSInAppMessageContent object"}, {"oid": "4bd2209ac8064779ad52c3c375086e1a4ea375c2", "committedDate": "2021-09-02 10:30:06 -0700", "message": "rename dismissDuration to displayDuration to match JSON"}, {"oid": "d09e80eaa5f28f16c7b0266f6969a2d05ce1cb03", "committedDate": "2021-09-30 12:34:02 -0700", "message": "Remove `messageWasDismissedByBackPress` and `lostFocus` to redisplay IAM"}, {"oid": "5a6c4723d5a68c30ab9e65a9a2eae12c99d1d35f", "committedDate": "2022-04-06 16:24:07 -0700", "message": "persisting and fetching lastTimeInAppDismissed from OneSignalPrefs"}, {"oid": "49f1cd4e6f97f20caa9ced03a165852bc5107579", "committedDate": "2022-05-10 14:20:52 -0700", "message": "rm location code from PermissionsActivity part 2"}, {"oid": "986ff256d72b54077fe66e07c0853619dba3363f", "committedDate": "2022-12-05 15:37:58 -0800", "message": "Fix default values in liquid IAMs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxODMyMQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r422318321", "body": "good one!", "bodyText": "good one!", "bodyHTML": "<p dir=\"auto\">good one!</p>", "author": "Jeasmine", "createdAt": "2020-05-08T19:04:27Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "diffHunk": "@@ -444,6 +447,18 @@ private static void openURLInBrowser(@NonNull Uri uri) {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromString(String setString) throws JSONException {", "originalCommit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a552dd564f1b40f5cbb6b085181fc265527c961", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex b68b55c5..bbde2a88 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -448,12 +448,11 @@ class OSUtils {\n    }\n \n    // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n       Set<String> stringSet = new HashSet<>();\n \n-      JSONArray clickIdsArray = new JSONArray(setString);\n-      for (int i = 0; i < clickIdsArray.length(); i++) {\n-         stringSet.add(clickIdsArray.getString(i));\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n       }\n \n       return stringSet;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex b68b55c5..bbde2a88 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -448,12 +448,11 @@ class OSUtils {\n    }\n \n    // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n       Set<String> stringSet = new HashSet<>();\n \n-      JSONArray clickIdsArray = new JSONArray(setString);\n-      for (int i = 0; i < clickIdsArray.length(); i++) {\n-         stringSet.add(clickIdsArray.getString(i));\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n       }\n \n       return stringSet;\n", "next_change": {"commit": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex bbde2a88..d1e61d90 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -447,17 +432,6 @@ class OSUtils {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n-   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n-      Set<String> stringSet = new HashSet<>();\n-\n-      for (int i = 0; i < jsonArray.length(); i++) {\n-         stringSet.add(jsonArray.getString(i));\n-      }\n-\n-      return stringSet;\n-   }\n-\n    static boolean hasConfigChangeFlag(Activity activity, int configChangeFlag) {\n       boolean hasFlag = false;\n       try {\n", "next_change": {"commit": "919bc99abc9578cd6a14883272f02d003ec8490b", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex d1e61d90..c9551446 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -432,6 +433,17 @@ class OSUtils {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n+      Set<String> stringSet = new HashSet<>();\n+\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n+      }\n+\n+      return stringSet;\n+   }\n+\n    static boolean hasConfigChangeFlag(Activity activity, int configChangeFlag) {\n       boolean hasFlag = false;\n       try {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Bulk of work inside OneSignal, start of remove init * Created two new init methods, setAppId and setAppContext, these are required to init OneSignal * Deleted mInitBuilder and added all params into OneSignal (we should do something like this again, but more organized and not inside of a builder, maybe a simple singleton class?) * Created a dummy OSNotificationWillShowInForegroundResult.java for now until we create the real thing, but this will replace notification received handler"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "28684e756706a637808bab08ec62f57500d206f0", "committedDate": "2020-04-29 22:19:43 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "07c39340692481e9edd8fe598243fc7f347ef030", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HMS device_type detection and value"}, {"oid": "c2ed60508b86dfad0ec5b4f5ecac714aa705718f", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added getDeviceType tests"}, {"oid": "3869c7a77a734f109cadeff3d87b0d48a8ec7be5", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added tests for PushRegistratorHMS"}, {"oid": "54c70ff89b3e2640e0724107de23f9ea2aa0e65c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added is*DeviceType helpers"}, {"oid": "2eb9fb3951b49e2dde2ea415bde9e0e99ba8e481", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Fallback detection for Huawei device if no HMS SDK"}, {"oid": "77f072ab057aecc812a6134f8100020239d19087", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added missing HMS PushKit library detection"}, {"oid": "84604ecbf564cf378646819a5ca0079499a3f822", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Comment, naming, and spacing clean up"}, {"oid": "b2af40745b9bc558471b2b7c1b021a42dc9fc60e", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HMS classes Exception -> NoClassDefFoundError"}, {"oid": "af45ea5fe7092949210b5b8eabe92294f68fbe8c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Create GMS and HMS Loction controller"}, {"oid": "15a8d00085bf51b90d7eced649bfcbbf411457ce", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HmsMessageService.onMessageReceived displaying"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "397e2c1862f7469ddcf6030cd1c532b467fe2cb7", "committedDate": "2020-07-21 11:56:24 -0700", "message": "Fix class exists dection with proguard optimize"}, {"oid": "4678ff6960aa6db9ac2aa8237f46f730c6004bb5", "committedDate": "2020-07-27 18:46:34 -0300", "message": "Fix ANR due to on_focus call being call from MainThread"}, {"oid": "7ebc62fb88859c5246305c123b7ad822d64e8d8f", "committedDate": "2020-07-28 12:08:27 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "5833953627538112ab48b96c027ae8627c3d8b10", "committedDate": "2020-09-11 18:03:00 -0300", "message": "Rename shouldDisplay to isStringEmpty"}, {"oid": "3c47617272a608680e49d5f635044e23f2a3d839", "committedDate": "2020-09-24 15:22:15 -0700", "message": "Removed hexDigest helper only used with hash email"}, {"oid": "d15a56217439fb7b3ef473838f48084d05c167f9", "committedDate": "2020-11-04 11:40:41 -0300", "message": "Add notification duplicate check under Workers (#1193)"}, {"oid": "c002b5271e9ba2238a2eb49209cdc072f5b35328", "committedDate": "2021-05-20 21:26:09 -0300", "message": "Fix suppressLaunchURLs not working"}, {"oid": "c3e446b932573e82188de24c7b4387240ca3fca5", "committedDate": "2021-05-22 18:20:34 -0700", "message": "Fix getManifestMetaBundle to return value"}, {"oid": "d5896d39c032f47b8a05565fa95b0feee030188a", "committedDate": "2021-05-22 18:21:58 -0700", "message": "Fix ApplicationInfo spacing and assigment"}, {"oid": "cf72b34be0aaf39df3af0256141840c96712375d", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Moved getCorrectedLanguage from OSUtils to LanguageProviderDevice"}, {"oid": "5b851709398f8cc8b0f27b4722df282ec16f5885", "committedDate": "2021-08-10 14:28:36 -0700", "message": "WIP - Improve generating intent logic"}, {"oid": "6a53b9c4d89c2bdd137d889a38c0a724f27bbdeb", "committedDate": "2021-11-12 14:27:15 -0800", "message": "Use a Worker with a delay to send Receive Receipts"}, {"oid": "b5bfd597210051ea38d98309989576ef0f801d95", "committedDate": "2021-11-15 21:34:09 -0800", "message": "proguard -assumenosideeffects compatibility"}, {"oid": "dd7395d26b5ec3ef3c0d552c9ce0c793eb985ff2", "committedDate": "2021-11-29 14:54:44 -0800", "message": "Simplify hasClass and rename to opaqueHasClass"}, {"oid": "fc18aa3db8424b2b8c93ac3adfccffad0fad21d2", "committedDate": "2022-06-01 23:32:56 -0700", "message": "rm FLAG_ACTIVITY_NO_HISTORY from open URL"}, {"oid": "7b7b6dd2494706fc4917f035c99f205b4a96f8bc", "committedDate": "2022-06-02 17:11:18 -0700", "message": "Corrected reporting of FCM exceptions"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423288927", "body": "Let's ensure the backend will always send this value for unlimited reshows.", "bodyText": "Let's ensure the backend will always send this value for unlimited reshows.", "bodyHTML": "<p dir=\"auto\">Let's ensure the backend will always send this value for unlimited reshows.</p>", "author": "jkasten2", "createdAt": "2020-05-11T20:08:19Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageRedisplayStats.java", "diffHunk": "@@ -3,31 +3,31 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n-class OSInAppMessageDisplayStats {\n+class OSInAppMessageRedisplayStats {\n \n     private static final String DISPLAY_LIMIT = \"limit\";\n     private static final String DISPLAY_DELAY = \"delay\";\n \n-    //Last IAM display time in seconds\n+    // Last IAM display time in seconds\n     private long lastDisplayTime = -1;\n-    //Current quantity of displays\n+    // Current quantity of displays\n     private int displayQuantity = 0;\n-    //Quantity of displays limit\n-    private int displayLimit = Integer.MAX_VALUE;\n-    //Delay between displays in seconds\n+    // Quantity of displays limit\n+    private int displayLimit = 1;", "originalCommit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMDY5OQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423300699", "bodyText": "good UnitTest, on it", "author": "mikechoch", "createdAt": "2020-05-11T20:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxNzk0Nw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423317947", "bodyText": "are you making this change on iOS too?", "author": "Jeasmine", "createdAt": "2020-05-11T21:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MTc2Mg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423341762", "bodyText": "I will be but not yet", "author": "mikechoch", "createdAt": "2020-05-11T21:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MjE2Nw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423352167", "bodyText": "I did a quick check on the backed, looks like redisplay won't even get sent unless this value is set to 1 is what we want.", "author": "jkasten2", "createdAt": "2020-05-11T22:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "dd7fc0ed273f6c74e7104e8604834230a38db804", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Fix IAM not being redisplay by SESSION DURATION"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTY3Nw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423289677", "body": "`setString` should be something like `jsonArray` instead.", "bodyText": "setString should be something like jsonArray instead.", "bodyHTML": "<p dir=\"auto\"><code>setString</code> should be something like <code>jsonArray</code> instead.</p>", "author": "jkasten2", "createdAt": "2020-05-11T20:09:50Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "diffHunk": "@@ -444,6 +447,18 @@ private static void openURLInBrowser(@NonNull Uri uri) {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromString(String setString) throws JSONException {", "originalCommit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTIwMA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423301200", "bodyText": "good idea, on it", "author": "mikechoch", "createdAt": "2020-05-11T20:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3a552dd564f1b40f5cbb6b085181fc265527c961", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex b68b55c5..bbde2a88 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -448,12 +448,11 @@ class OSUtils {\n    }\n \n    // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n       Set<String> stringSet = new HashSet<>();\n \n-      JSONArray clickIdsArray = new JSONArray(setString);\n-      for (int i = 0; i < clickIdsArray.length(); i++) {\n-         stringSet.add(clickIdsArray.getString(i));\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n       }\n \n       return stringSet;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex b68b55c5..bbde2a88 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -448,12 +448,11 @@ class OSUtils {\n    }\n \n    // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n       Set<String> stringSet = new HashSet<>();\n \n-      JSONArray clickIdsArray = new JSONArray(setString);\n-      for (int i = 0; i < clickIdsArray.length(); i++) {\n-         stringSet.add(clickIdsArray.getString(i));\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n       }\n \n       return stringSet;\n", "next_change": {"commit": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex bbde2a88..d1e61d90 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -447,17 +432,6 @@ class OSUtils {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n-   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n-      Set<String> stringSet = new HashSet<>();\n-\n-      for (int i = 0; i < jsonArray.length(); i++) {\n-         stringSet.add(jsonArray.getString(i));\n-      }\n-\n-      return stringSet;\n-   }\n-\n    static boolean hasConfigChangeFlag(Activity activity, int configChangeFlag) {\n       boolean hasFlag = false;\n       try {\n", "next_change": {"commit": "919bc99abc9578cd6a14883272f02d003ec8490b", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex d1e61d90..c9551446 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -432,6 +433,17 @@ class OSUtils {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n+      Set<String> stringSet = new HashSet<>();\n+\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n+      }\n+\n+      return stringSet;\n+   }\n+\n    static boolean hasConfigChangeFlag(Activity activity, int configChangeFlag) {\n       boolean hasFlag = false;\n       try {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Bulk of work inside OneSignal, start of remove init * Created two new init methods, setAppId and setAppContext, these are required to init OneSignal * Deleted mInitBuilder and added all params into OneSignal (we should do something like this again, but more organized and not inside of a builder, maybe a simple singleton class?) * Created a dummy OSNotificationWillShowInForegroundResult.java for now until we create the real thing, but this will replace notification received handler"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "28684e756706a637808bab08ec62f57500d206f0", "committedDate": "2020-04-29 22:19:43 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "07c39340692481e9edd8fe598243fc7f347ef030", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HMS device_type detection and value"}, {"oid": "c2ed60508b86dfad0ec5b4f5ecac714aa705718f", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added getDeviceType tests"}, {"oid": "3869c7a77a734f109cadeff3d87b0d48a8ec7be5", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added tests for PushRegistratorHMS"}, {"oid": "54c70ff89b3e2640e0724107de23f9ea2aa0e65c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added is*DeviceType helpers"}, {"oid": "2eb9fb3951b49e2dde2ea415bde9e0e99ba8e481", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Fallback detection for Huawei device if no HMS SDK"}, {"oid": "77f072ab057aecc812a6134f8100020239d19087", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added missing HMS PushKit library detection"}, {"oid": "84604ecbf564cf378646819a5ca0079499a3f822", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Comment, naming, and spacing clean up"}, {"oid": "b2af40745b9bc558471b2b7c1b021a42dc9fc60e", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HMS classes Exception -> NoClassDefFoundError"}, {"oid": "af45ea5fe7092949210b5b8eabe92294f68fbe8c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Create GMS and HMS Loction controller"}, {"oid": "15a8d00085bf51b90d7eced649bfcbbf411457ce", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HmsMessageService.onMessageReceived displaying"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "397e2c1862f7469ddcf6030cd1c532b467fe2cb7", "committedDate": "2020-07-21 11:56:24 -0700", "message": "Fix class exists dection with proguard optimize"}, {"oid": "4678ff6960aa6db9ac2aa8237f46f730c6004bb5", "committedDate": "2020-07-27 18:46:34 -0300", "message": "Fix ANR due to on_focus call being call from MainThread"}, {"oid": "7ebc62fb88859c5246305c123b7ad822d64e8d8f", "committedDate": "2020-07-28 12:08:27 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "5833953627538112ab48b96c027ae8627c3d8b10", "committedDate": "2020-09-11 18:03:00 -0300", "message": "Rename shouldDisplay to isStringEmpty"}, {"oid": "3c47617272a608680e49d5f635044e23f2a3d839", "committedDate": "2020-09-24 15:22:15 -0700", "message": "Removed hexDigest helper only used with hash email"}, {"oid": "d15a56217439fb7b3ef473838f48084d05c167f9", "committedDate": "2020-11-04 11:40:41 -0300", "message": "Add notification duplicate check under Workers (#1193)"}, {"oid": "c002b5271e9ba2238a2eb49209cdc072f5b35328", "committedDate": "2021-05-20 21:26:09 -0300", "message": "Fix suppressLaunchURLs not working"}, {"oid": "c3e446b932573e82188de24c7b4387240ca3fca5", "committedDate": "2021-05-22 18:20:34 -0700", "message": "Fix getManifestMetaBundle to return value"}, {"oid": "d5896d39c032f47b8a05565fa95b0feee030188a", "committedDate": "2021-05-22 18:21:58 -0700", "message": "Fix ApplicationInfo spacing and assigment"}, {"oid": "cf72b34be0aaf39df3af0256141840c96712375d", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Moved getCorrectedLanguage from OSUtils to LanguageProviderDevice"}, {"oid": "5b851709398f8cc8b0f27b4722df282ec16f5885", "committedDate": "2021-08-10 14:28:36 -0700", "message": "WIP - Improve generating intent logic"}, {"oid": "6a53b9c4d89c2bdd137d889a38c0a724f27bbdeb", "committedDate": "2021-11-12 14:27:15 -0800", "message": "Use a Worker with a delay to send Receive Receipts"}, {"oid": "b5bfd597210051ea38d98309989576ef0f801d95", "committedDate": "2021-11-15 21:34:09 -0800", "message": "proguard -assumenosideeffects compatibility"}, {"oid": "dd7395d26b5ec3ef3c0d552c9ce0c793eb985ff2", "committedDate": "2021-11-29 14:54:44 -0800", "message": "Simplify hasClass and rename to opaqueHasClass"}, {"oid": "fc18aa3db8424b2b8c93ac3adfccffad0fad21d2", "committedDate": "2022-06-01 23:32:56 -0700", "message": "rm FLAG_ACTIVITY_NO_HISTORY from open URL"}, {"oid": "7b7b6dd2494706fc4917f035c99f205b4a96f8bc", "committedDate": "2022-06-02 17:11:18 -0700", "message": "Corrected reporting of FCM exceptions"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDA2OA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423290068", "body": "I think you forgot to rename `clickIdsArray` to something more generic when you moved it to OSUtils.", "bodyText": "I think you forgot to rename clickIdsArray to something more generic when you moved it to OSUtils.", "bodyHTML": "<p dir=\"auto\">I think you forgot to rename <code>clickIdsArray</code> to something more generic when you moved it to OSUtils.</p>", "author": "jkasten2", "createdAt": "2020-05-11T20:10:27Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "diffHunk": "@@ -444,6 +447,18 @@ private static void openURLInBrowser(@NonNull Uri uri) {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+      Set<String> stringSet = new HashSet<>();\n+\n+      JSONArray clickIdsArray = new JSONArray(setString);", "originalCommit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTM3NA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423301374", "bodyText": "Whoops. thank you", "author": "mikechoch", "createdAt": "2020-05-11T20:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "3a552dd564f1b40f5cbb6b085181fc265527c961", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex b68b55c5..bbde2a88 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -448,12 +448,11 @@ class OSUtils {\n    }\n \n    // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n       Set<String> stringSet = new HashSet<>();\n \n-      JSONArray clickIdsArray = new JSONArray(setString);\n-      for (int i = 0; i < clickIdsArray.length(); i++) {\n-         stringSet.add(clickIdsArray.getString(i));\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n       }\n \n       return stringSet;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex b68b55c5..bbde2a88 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -448,12 +448,11 @@ class OSUtils {\n    }\n \n    // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n       Set<String> stringSet = new HashSet<>();\n \n-      JSONArray clickIdsArray = new JSONArray(setString);\n-      for (int i = 0; i < clickIdsArray.length(); i++) {\n-         stringSet.add(clickIdsArray.getString(i));\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n       }\n \n       return stringSet;\n", "next_change": {"commit": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex bbde2a88..d1e61d90 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -447,17 +432,6 @@ class OSUtils {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n-   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n-   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n-      Set<String> stringSet = new HashSet<>();\n-\n-      for (int i = 0; i < jsonArray.length(); i++) {\n-         stringSet.add(jsonArray.getString(i));\n-      }\n-\n-      return stringSet;\n-   }\n-\n    static boolean hasConfigChangeFlag(Activity activity, int configChangeFlag) {\n       boolean hasFlag = false;\n       try {\n", "next_change": {"commit": "919bc99abc9578cd6a14883272f02d003ec8490b", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\nindex d1e61d90..c9551446 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java\n", "chunk": "@@ -432,6 +433,17 @@ class OSUtils {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromJSONArray(JSONArray jsonArray) throws JSONException {\n+      Set<String> stringSet = new HashSet<>();\n+\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+         stringSet.add(jsonArray.getString(i));\n+      }\n+\n+      return stringSet;\n+   }\n+\n    static boolean hasConfigChangeFlag(Activity activity, int configChangeFlag) {\n       boolean hasFlag = false;\n       try {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Bulk of work inside OneSignal, start of remove init * Created two new init methods, setAppId and setAppContext, these are required to init OneSignal * Deleted mInitBuilder and added all params into OneSignal (we should do something like this again, but more organized and not inside of a builder, maybe a simple singleton class?) * Created a dummy OSNotificationWillShowInForegroundResult.java for now until we create the real thing, but this will replace notification received handler"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "28684e756706a637808bab08ec62f57500d206f0", "committedDate": "2020-04-29 22:19:43 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "07c39340692481e9edd8fe598243fc7f347ef030", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HMS device_type detection and value"}, {"oid": "c2ed60508b86dfad0ec5b4f5ecac714aa705718f", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added getDeviceType tests"}, {"oid": "3869c7a77a734f109cadeff3d87b0d48a8ec7be5", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added tests for PushRegistratorHMS"}, {"oid": "54c70ff89b3e2640e0724107de23f9ea2aa0e65c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added is*DeviceType helpers"}, {"oid": "2eb9fb3951b49e2dde2ea415bde9e0e99ba8e481", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Fallback detection for Huawei device if no HMS SDK"}, {"oid": "77f072ab057aecc812a6134f8100020239d19087", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added missing HMS PushKit library detection"}, {"oid": "84604ecbf564cf378646819a5ca0079499a3f822", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Comment, naming, and spacing clean up"}, {"oid": "b2af40745b9bc558471b2b7c1b021a42dc9fc60e", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HMS classes Exception -> NoClassDefFoundError"}, {"oid": "af45ea5fe7092949210b5b8eabe92294f68fbe8c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Create GMS and HMS Loction controller"}, {"oid": "15a8d00085bf51b90d7eced649bfcbbf411457ce", "committedDate": "2020-06-22 13:21:29 -0700", "message": "HmsMessageService.onMessageReceived displaying"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "397e2c1862f7469ddcf6030cd1c532b467fe2cb7", "committedDate": "2020-07-21 11:56:24 -0700", "message": "Fix class exists dection with proguard optimize"}, {"oid": "4678ff6960aa6db9ac2aa8237f46f730c6004bb5", "committedDate": "2020-07-27 18:46:34 -0300", "message": "Fix ANR due to on_focus call being call from MainThread"}, {"oid": "7ebc62fb88859c5246305c123b7ad822d64e8d8f", "committedDate": "2020-07-28 12:08:27 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "5833953627538112ab48b96c027ae8627c3d8b10", "committedDate": "2020-09-11 18:03:00 -0300", "message": "Rename shouldDisplay to isStringEmpty"}, {"oid": "3c47617272a608680e49d5f635044e23f2a3d839", "committedDate": "2020-09-24 15:22:15 -0700", "message": "Removed hexDigest helper only used with hash email"}, {"oid": "d15a56217439fb7b3ef473838f48084d05c167f9", "committedDate": "2020-11-04 11:40:41 -0300", "message": "Add notification duplicate check under Workers (#1193)"}, {"oid": "c002b5271e9ba2238a2eb49209cdc072f5b35328", "committedDate": "2021-05-20 21:26:09 -0300", "message": "Fix suppressLaunchURLs not working"}, {"oid": "c3e446b932573e82188de24c7b4387240ca3fca5", "committedDate": "2021-05-22 18:20:34 -0700", "message": "Fix getManifestMetaBundle to return value"}, {"oid": "d5896d39c032f47b8a05565fa95b0feee030188a", "committedDate": "2021-05-22 18:21:58 -0700", "message": "Fix ApplicationInfo spacing and assigment"}, {"oid": "cf72b34be0aaf39df3af0256141840c96712375d", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Moved getCorrectedLanguage from OSUtils to LanguageProviderDevice"}, {"oid": "5b851709398f8cc8b0f27b4722df282ec16f5885", "committedDate": "2021-08-10 14:28:36 -0700", "message": "WIP - Improve generating intent logic"}, {"oid": "6a53b9c4d89c2bdd137d889a38c0a724f27bbdeb", "committedDate": "2021-11-12 14:27:15 -0800", "message": "Use a Worker with a delay to send Receive Receipts"}, {"oid": "b5bfd597210051ea38d98309989576ef0f801d95", "committedDate": "2021-11-15 21:34:09 -0800", "message": "proguard -assumenosideeffects compatibility"}, {"oid": "dd7395d26b5ec3ef3c0d552c9ce0c793eb985ff2", "committedDate": "2021-11-29 14:54:44 -0800", "message": "Simplify hasClass and rename to opaqueHasClass"}, {"oid": "fc18aa3db8424b2b8c93ac3adfccffad0fad21d2", "committedDate": "2022-06-01 23:32:56 -0700", "message": "rm FLAG_ACTIVITY_NO_HISTORY from open URL"}, {"oid": "7b7b6dd2494706fc4917f035c99f205b4a96f8bc", "committedDate": "2022-06-02 17:11:18 -0700", "message": "Corrected reporting of FCM exceptions"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTExNQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423291115", "body": "`SIX_MONTHS_IN_SECONDS` should be something more descriptive to what is it used for like `IAM_MAX_CACHE_SEC`", "bodyText": "SIX_MONTHS_IN_SECONDS should be something more descriptive to what is it used for like IAM_MAX_CACHE_SEC", "bodyHTML": "<p dir=\"auto\"><code>SIX_MONTHS_IN_SECONDS</code> should be something more descriptive to what is it used for like <code>IAM_MAX_CACHE_SEC</code></p>", "author": "jkasten2", "createdAt": "2020-05-11T20:12:31Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,218 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_SECONDS = 604_800L;\n+    private final static long SIX_MONTHS_IN_SECONDS = 15_552_000L;", "originalCommit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTY4OQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423291689", "bodyText": "6 months should be a comment instead.", "author": "jkasten2", "createdAt": "2020-05-11T20:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTUzMg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423301532", "bodyText": "You are correct, on it", "author": "mikechoch", "createdAt": "2020-05-11T20:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3a552dd564f1b40f5cbb6b085181fc265527c961", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 14bed3b6..e611cec2 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -9,14 +9,15 @@ import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n+import org.json.JSONArray;\n import org.json.JSONException;\n \n import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private final static long ONE_WEEK_IN_SECONDS = 604_800L;\n-    private final static long SIX_MONTHS_IN_SECONDS = 15_552_000L;\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 14bed3b6..5b7b0896 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -9,14 +9,15 @@ import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n+import org.json.JSONArray;\n import org.json.JSONException;\n \n import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private final static long ONE_WEEK_IN_SECONDS = 604_800L;\n-    private final static long SIX_MONTHS_IN_SECONDS = 15_552_000L;\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 5b7b0896..1627e14c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -1,23 +1,19 @@\n package com.onesignal;\n \n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n-\n import android.content.Context;\n-import android.database.Cursor;\n+import android.database.SQLException;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.util.Set;\n+import com.onesignal.OneSignalDbContract.NotificationTable;\n+import com.onesignal.influence.model.OSInfluenceChannel;\n+import com.onesignal.outcomes.OSOutcomeTableProvider;\n \n class OneSignalCacheCleaner {\n \n     private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n-    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+    final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 1627e14c..37efd5d5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -1,19 +1,24 @@\n package com.onesignal;\n \n+import com.onesignal.OneSignalDbContract.NotificationTable;\n+import com.onesignal.influence.model.OSInfluenceChannel;\n+import com.onesignal.outcomes.OSOutcomeTableProvider;\n+\n import android.content.Context;\n-import android.database.SQLException;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.model.OSInfluenceChannel;\n-import com.onesignal.outcomes.OSOutcomeTableProvider;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n     private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n-    final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 37efd5d5..858af238 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -1,24 +1,19 @@\n package com.onesignal;\n \n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.model.OSInfluenceChannel;\n-import com.onesignal.outcomes.OSOutcomeTableProvider;\n-\n import android.content.Context;\n-import android.database.Cursor;\n+import android.database.SQLException;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.util.Set;\n+import com.onesignal.OneSignalDbContract.NotificationTable;\n+import com.onesignal.influence.model.OSInfluenceChannel;\n+import com.onesignal.outcomes.OSOutcomeTableProvider;\n \n class OneSignalCacheCleaner {\n \n     private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n-    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+    final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "2feac9dbb75de8777357e462c1ef60629ce57130", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 858af238..fd4f74ea 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -12,8 +12,7 @@ import com.onesignal.outcomes.OSOutcomeTableProvider;\n \n class OneSignalCacheCleaner {\n \n-    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n-    final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in second\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "ba801fd71fbe18f0c971623ef565f192f5269438", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex fd4f74ea..e9544360 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -4,11 +4,13 @@ import android.content.Context;\n import android.database.SQLException;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n-import android.support.annotation.WorkerThread;\n+\n+import androidx.annotation.WorkerThread;\n \n import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.model.OSInfluenceChannel;\n-import com.onesignal.outcomes.OSOutcomeTableProvider;\n+import com.onesignal.influence.domain.OSInfluenceChannel;\n+import com.onesignal.outcomes.data.OSOutcomeTableProvider;\n+import com.onesignal.outcomes.data.OutcomesDbContract;\n \n class OneSignalCacheCleaner {\n \n", "next_change": {"commit": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex e9544360..9bd01e01 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -1,16 +1,12 @@\n package com.onesignal;\n \n import android.content.Context;\n-import android.database.SQLException;\n-import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n-\n-import androidx.annotation.WorkerThread;\n+import android.support.annotation.WorkerThread;\n \n import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OSOutcomeTableProvider;\n-import com.onesignal.outcomes.data.OutcomesDbContract;\n+import com.onesignal.influence.model.OSInfluenceChannel;\n+import com.onesignal.outcomes.OSOutcomeTableProvider;\n \n class OneSignalCacheCleaner {\n \n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9bd01e01..a0a5936c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -2,11 +2,13 @@ package com.onesignal;\n \n import android.content.Context;\n import android.os.Process;\n-import android.support.annotation.WorkerThread;\n+\n+import androidx.annotation.WorkerThread;\n \n import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.model.OSInfluenceChannel;\n-import com.onesignal.outcomes.OSOutcomeTableProvider;\n+import com.onesignal.influence.domain.OSInfluenceChannel;\n+import com.onesignal.outcomes.data.OSOutcomeTableProvider;\n+import com.onesignal.outcomes.data.OutcomesDbContract;\n \n class OneSignalCacheCleaner {\n \n", "next_change": {"commit": "30d8a89e41325023c05559b2570ce40e3ce27cdd", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex a0a5936c..186eb8c5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -7,7 +7,6 @@ import androidx.annotation.WorkerThread;\n \n import com.onesignal.OneSignalDbContract.NotificationTable;\n import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OSOutcomeTableProvider;\n import com.onesignal.outcomes.data.OutcomesDbContract;\n \n class OneSignalCacheCleaner {\n", "next_change": {"commit": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\ndeleted file mode 100644\nindex 186eb8c5..00000000\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ /dev/null\n", "chunk": "@@ -1,110 +0,0 @@\n-package com.onesignal;\n-\n-import android.content.Context;\n-import android.os.Process;\n-\n-import androidx.annotation.WorkerThread;\n-\n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OutcomesDbContract;\n-\n-class OneSignalCacheCleaner {\n-\n-    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in second\n-\n-    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n-    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n-\n-    /**\n-     * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n-     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n-     */\n-    static void cleanOldCachedData(final Context context) {\n-        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-        cleanNotificationCache(dbHelper);\n-        cleanCachedInAppMessages(dbHelper);\n-    }\n-\n-    /**\n-     * Cleans two notification tables\n-     * 1. NotificationTable.TABLE_NAME\n-     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n-     */\n-    synchronized static void cleanNotificationCache(final OneSignalDbHelper writableDb) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                cleanCachedNotifications(writableDb);\n-                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n-            }\n-\n-        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n-    }\n-\n-    /**\n-     * Remove IAMs that the last display time was six month ago\n-     * 1. Query for all old message ids and old clicked click ids\n-     * 2. Delete old IAMs from SQL\n-     * 3. Use queried data to clean SharedPreferences\n-     */\n-    @WorkerThread\n-    static synchronized void cleanCachedInAppMessages(final OneSignalDbHelper dbHelper) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                OSInAppMessageRepository inAppMessageRepository = OneSignal\n-                        .getInAppMessageController()\n-                        .getInAppMessageRepository(dbHelper);\n-                inAppMessageRepository.cleanCachedInAppMessages();\n-            }\n-        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n-    }\n-\n-    /**\n-     * Deletes notifications with created timestamps older than 7 days\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n-\n-        String sevenDaysAgoInSeconds = String.valueOf((OneSignal.getTime().getCurrentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n-        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n-\n-        writableDb.delete(\n-                NotificationTable.TABLE_NAME,\n-                whereStr,\n-                whereArgs);\n-    }\n-\n-    /**\n-     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = \"NOT EXISTS(\" +\n-                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n-                \"\\\")\";\n-\n-        writableDb.delete(\n-                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n-                whereStr,\n-                null);\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "2be8e022430a96c98d7367392e7aab218528e8c1", "committedDate": "2020-06-08 11:15:44 -0400", "message": "Fix the `NPE` within `OneSignalCacheCleaner.java` (#1047)"}, {"oid": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "committedDate": "2020-06-09 14:14:08 -0400", "message": "Adding 2 layers of SQL DB security and minor clean up * Removed the commented `enableWriteAheadLogging`   * No need for this as this allows concurrent read and writes to occur and we would rather pause a read while a write occurs   * Pausing will ensure that we are querying the most updated data * 2 layers of security for SQL DB regarding `OSInAppMessageRepository.java`   * First one will be transactions using `beginTransaction`, `setTransactionSuccessful`, and `endTransaction` methods wherever we `insert`, `delete`, or `update`   * Second one is keeping TABLE manipulation or reading within the same file and setting these methods as synchronized so that any other TABLE touching that occurs won't happen till any current methods are complete   * The combination of the two steps should help prevent any conflicts between SQL DB and solve the locking issues"}, {"oid": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "committedDate": "2020-06-10 15:30:47 -0400", "message": "Changed `OSUtils.<String>newConcurrentSet()` default to `null` (#1048)"}, {"oid": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "committedDate": "2020-06-10 16:53:44 -0400", "message": "Using singleton `OSInAppMessageController.java` instead of new * Created singleton based `getInAppMessageRepository` method inside of `OSInAppMessageController.java` class * This allows the synchronized to apply to multiple methods being called from the class instance * Deleted unused thread name since new Thread was moved toi cache cleaning file with different thread name now"}, {"oid": "53c86e58f11fb14a244e4239f072f1fc65c40a97", "committedDate": "2020-06-10 16:57:27 -0400", "message": "Merge branch 'master' into fix/sql_db_lock_added_more_transactions"}, {"oid": "2feac9dbb75de8777357e462c1ef60629ce57130", "committedDate": "2020-06-10 22:35:15 -0400", "message": "`IAM_CACHE_DATA_LIFETIME` moved to `OSInAppMessageRepository.java`"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "8aeb5bfbd32112f07ea4682ac3bc170944cb01a1", "committedDate": "2020-08-21 16:31:34 -0300", "message": "Fully implement `NotificationWillShowInForeground` (#1010)"}, {"oid": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "committedDate": "2020-09-16 11:29:32 -0300", "message": "Add and improve logs on public methods (#1146)"}, {"oid": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Reset dynamic session launch time"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "30d8a89e41325023c05559b2570ce40e3ce27cdd", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Make an abstract class for SyncService common methods"}, {"oid": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "committedDate": "2021-03-15 16:10:10 -0300", "message": "Move outcome table access to OSOutcomeEventsCache"}, {"oid": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "committedDate": "2021-03-15 16:10:53 -0300", "message": "Rename OneSignalCacheCleaner to OSNotificationDataController"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTM0Mg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423291342", "body": "`ONE_WEEK_IN_SECONDS` should be something more descriptive to what is it used. One week should be a comment instead.", "bodyText": "ONE_WEEK_IN_SECONDS should be something more descriptive to what is it used. One week should be a comment instead.", "bodyHTML": "<p dir=\"auto\"><code>ONE_WEEK_IN_SECONDS</code> should be something more descriptive to what is it used. One week should be a comment instead.</p>", "author": "jkasten2", "createdAt": "2020-05-11T20:12:54Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,218 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_SECONDS = 604_800L;", "originalCommit": "566c0694a87bb7e6bd77be46e7fe98135c26b255", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a552dd564f1b40f5cbb6b085181fc265527c961", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 14bed3b6..e611cec2 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -9,14 +9,15 @@ import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n+import org.json.JSONArray;\n import org.json.JSONException;\n \n import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private final static long ONE_WEEK_IN_SECONDS = 604_800L;\n-    private final static long SIX_MONTHS_IN_SECONDS = 15_552_000L;\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 14bed3b6..5b7b0896 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -9,14 +9,15 @@ import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n+import org.json.JSONArray;\n import org.json.JSONException;\n \n import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private final static long ONE_WEEK_IN_SECONDS = 604_800L;\n-    private final static long SIX_MONTHS_IN_SECONDS = 15_552_000L;\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 5b7b0896..1627e14c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -1,23 +1,19 @@\n package com.onesignal;\n \n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n-\n import android.content.Context;\n-import android.database.Cursor;\n+import android.database.SQLException;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.util.Set;\n+import com.onesignal.OneSignalDbContract.NotificationTable;\n+import com.onesignal.influence.model.OSInfluenceChannel;\n+import com.onesignal.outcomes.OSOutcomeTableProvider;\n \n class OneSignalCacheCleaner {\n \n     private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n-    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+    final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 1627e14c..37efd5d5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -1,19 +1,24 @@\n package com.onesignal;\n \n+import com.onesignal.OneSignalDbContract.NotificationTable;\n+import com.onesignal.influence.model.OSInfluenceChannel;\n+import com.onesignal.outcomes.OSOutcomeTableProvider;\n+\n import android.content.Context;\n-import android.database.SQLException;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.model.OSInfluenceChannel;\n-import com.onesignal.outcomes.OSOutcomeTableProvider;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n     private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n-    final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 37efd5d5..858af238 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -1,24 +1,19 @@\n package com.onesignal;\n \n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.model.OSInfluenceChannel;\n-import com.onesignal.outcomes.OSOutcomeTableProvider;\n-\n import android.content.Context;\n-import android.database.Cursor;\n+import android.database.SQLException;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n import android.support.annotation.WorkerThread;\n \n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.util.Set;\n+import com.onesignal.OneSignalDbContract.NotificationTable;\n+import com.onesignal.influence.model.OSInfluenceChannel;\n+import com.onesignal.outcomes.OSOutcomeTableProvider;\n \n class OneSignalCacheCleaner {\n \n     private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n-    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+    final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "2feac9dbb75de8777357e462c1ef60629ce57130", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 858af238..fd4f74ea 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -12,8 +12,7 @@ import com.onesignal.outcomes.OSOutcomeTableProvider;\n \n class OneSignalCacheCleaner {\n \n-    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n-    final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in second\n \n     private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n     private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n", "next_change": {"commit": "ba801fd71fbe18f0c971623ef565f192f5269438", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex fd4f74ea..e9544360 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -4,11 +4,13 @@ import android.content.Context;\n import android.database.SQLException;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n-import android.support.annotation.WorkerThread;\n+\n+import androidx.annotation.WorkerThread;\n \n import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.model.OSInfluenceChannel;\n-import com.onesignal.outcomes.OSOutcomeTableProvider;\n+import com.onesignal.influence.domain.OSInfluenceChannel;\n+import com.onesignal.outcomes.data.OSOutcomeTableProvider;\n+import com.onesignal.outcomes.data.OutcomesDbContract;\n \n class OneSignalCacheCleaner {\n \n", "next_change": {"commit": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex e9544360..9bd01e01 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -1,16 +1,12 @@\n package com.onesignal;\n \n import android.content.Context;\n-import android.database.SQLException;\n-import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n-\n-import androidx.annotation.WorkerThread;\n+import android.support.annotation.WorkerThread;\n \n import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OSOutcomeTableProvider;\n-import com.onesignal.outcomes.data.OutcomesDbContract;\n+import com.onesignal.influence.model.OSInfluenceChannel;\n+import com.onesignal.outcomes.OSOutcomeTableProvider;\n \n class OneSignalCacheCleaner {\n \n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9bd01e01..a0a5936c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -2,11 +2,13 @@ package com.onesignal;\n \n import android.content.Context;\n import android.os.Process;\n-import android.support.annotation.WorkerThread;\n+\n+import androidx.annotation.WorkerThread;\n \n import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.model.OSInfluenceChannel;\n-import com.onesignal.outcomes.OSOutcomeTableProvider;\n+import com.onesignal.influence.domain.OSInfluenceChannel;\n+import com.onesignal.outcomes.data.OSOutcomeTableProvider;\n+import com.onesignal.outcomes.data.OutcomesDbContract;\n \n class OneSignalCacheCleaner {\n \n", "next_change": {"commit": "30d8a89e41325023c05559b2570ce40e3ce27cdd", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex a0a5936c..186eb8c5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -7,7 +7,6 @@ import androidx.annotation.WorkerThread;\n \n import com.onesignal.OneSignalDbContract.NotificationTable;\n import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OSOutcomeTableProvider;\n import com.onesignal.outcomes.data.OutcomesDbContract;\n \n class OneSignalCacheCleaner {\n", "next_change": {"commit": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\ndeleted file mode 100644\nindex 186eb8c5..00000000\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ /dev/null\n", "chunk": "@@ -1,110 +0,0 @@\n-package com.onesignal;\n-\n-import android.content.Context;\n-import android.os.Process;\n-\n-import androidx.annotation.WorkerThread;\n-\n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OutcomesDbContract;\n-\n-class OneSignalCacheCleaner {\n-\n-    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in second\n-\n-    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n-    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n-\n-    /**\n-     * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n-     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n-     */\n-    static void cleanOldCachedData(final Context context) {\n-        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-        cleanNotificationCache(dbHelper);\n-        cleanCachedInAppMessages(dbHelper);\n-    }\n-\n-    /**\n-     * Cleans two notification tables\n-     * 1. NotificationTable.TABLE_NAME\n-     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n-     */\n-    synchronized static void cleanNotificationCache(final OneSignalDbHelper writableDb) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                cleanCachedNotifications(writableDb);\n-                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n-            }\n-\n-        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n-    }\n-\n-    /**\n-     * Remove IAMs that the last display time was six month ago\n-     * 1. Query for all old message ids and old clicked click ids\n-     * 2. Delete old IAMs from SQL\n-     * 3. Use queried data to clean SharedPreferences\n-     */\n-    @WorkerThread\n-    static synchronized void cleanCachedInAppMessages(final OneSignalDbHelper dbHelper) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                OSInAppMessageRepository inAppMessageRepository = OneSignal\n-                        .getInAppMessageController()\n-                        .getInAppMessageRepository(dbHelper);\n-                inAppMessageRepository.cleanCachedInAppMessages();\n-            }\n-        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n-    }\n-\n-    /**\n-     * Deletes notifications with created timestamps older than 7 days\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n-\n-        String sevenDaysAgoInSeconds = String.valueOf((OneSignal.getTime().getCurrentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n-        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n-\n-        writableDb.delete(\n-                NotificationTable.TABLE_NAME,\n-                whereStr,\n-                whereArgs);\n-    }\n-\n-    /**\n-     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = \"NOT EXISTS(\" +\n-                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n-                \"\\\")\";\n-\n-        writableDb.delete(\n-                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n-                whereStr,\n-                null);\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "2be8e022430a96c98d7367392e7aab218528e8c1", "committedDate": "2020-06-08 11:15:44 -0400", "message": "Fix the `NPE` within `OneSignalCacheCleaner.java` (#1047)"}, {"oid": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "committedDate": "2020-06-09 14:14:08 -0400", "message": "Adding 2 layers of SQL DB security and minor clean up * Removed the commented `enableWriteAheadLogging`   * No need for this as this allows concurrent read and writes to occur and we would rather pause a read while a write occurs   * Pausing will ensure that we are querying the most updated data * 2 layers of security for SQL DB regarding `OSInAppMessageRepository.java`   * First one will be transactions using `beginTransaction`, `setTransactionSuccessful`, and `endTransaction` methods wherever we `insert`, `delete`, or `update`   * Second one is keeping TABLE manipulation or reading within the same file and setting these methods as synchronized so that any other TABLE touching that occurs won't happen till any current methods are complete   * The combination of the two steps should help prevent any conflicts between SQL DB and solve the locking issues"}, {"oid": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "committedDate": "2020-06-10 15:30:47 -0400", "message": "Changed `OSUtils.<String>newConcurrentSet()` default to `null` (#1048)"}, {"oid": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "committedDate": "2020-06-10 16:53:44 -0400", "message": "Using singleton `OSInAppMessageController.java` instead of new * Created singleton based `getInAppMessageRepository` method inside of `OSInAppMessageController.java` class * This allows the synchronized to apply to multiple methods being called from the class instance * Deleted unused thread name since new Thread was moved toi cache cleaning file with different thread name now"}, {"oid": "53c86e58f11fb14a244e4239f072f1fc65c40a97", "committedDate": "2020-06-10 16:57:27 -0400", "message": "Merge branch 'master' into fix/sql_db_lock_added_more_transactions"}, {"oid": "2feac9dbb75de8777357e462c1ef60629ce57130", "committedDate": "2020-06-10 22:35:15 -0400", "message": "`IAM_CACHE_DATA_LIFETIME` moved to `OSInAppMessageRepository.java`"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "8aeb5bfbd32112f07ea4682ac3bc170944cb01a1", "committedDate": "2020-08-21 16:31:34 -0300", "message": "Fully implement `NotificationWillShowInForeground` (#1010)"}, {"oid": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "committedDate": "2020-09-16 11:29:32 -0300", "message": "Add and improve logs on public methods (#1146)"}, {"oid": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Reset dynamic session launch time"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "30d8a89e41325023c05559b2570ce40e3ce27cdd", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Make an abstract class for SyncService common methods"}, {"oid": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "committedDate": "2021-03-15 16:10:10 -0300", "message": "Move outcome table access to OSOutcomeEventsCache"}, {"oid": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "committedDate": "2021-03-15 16:10:53 -0300", "message": "Rename OneSignalCacheCleaner to OSNotificationDataController"}]}, {"oid": "3a552dd564f1b40f5cbb6b085181fc265527c961", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/3a552dd564f1b40f5cbb6b085181fc265527c961", "message": "Fixed comments on previous commits in PR\n* Renamed global ONE_WEEK_IN_SECONDS & SIX_MONTHS_IN_SECONDS to NOTIFICATION_CACHE_DATA_LIFETIME & IAM_CACHE_DATA_LIFETIME\n* Renamed newStringSetFromString to newStringSetFromJSONArray\n* Pass in a JSONArray instead of a string to newStringSetFromJSONArray", "committedDate": "2020-05-11T22:00:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1Mzc2NQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423353765", "body": "This would be cleaner with 2 methods instead of long if blocks.", "bodyText": "This would be cleaner with 2 methods instead of long if blocks.", "bodyHTML": "<p dir=\"auto\">This would be cleaner with 2 methods instead of long if blocks.</p>", "author": "jkasten2", "createdAt": "2020-05-11T22:22:43Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,219 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+\n+    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n+    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n \n     /**\n      * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. In App Messaging id sets (impressions, clicks, views)\n-     * 2. Notifications after 1 week\n-     * 3. Unique outcome events linked to notification ids (1 week)\n+     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n+     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n+     */\n+    static void cleanOldCachedData(final Context context) {\n+        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n+        SQLiteDatabase writableDb = dbHelper.getSQLiteDatabaseWithRetries();\n+\n+        cleanNotificationCache(writableDb);\n+        cleanCachedInAppMessages(writableDb);\n+    }\n+\n+    /**\n+     * Cleans two notification tables\n+     * 1. NotificationTable.TABLE_NAME\n+     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    synchronized static void cleanOldCachedData(final Context context) {\n+    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n         new Thread(new Runnable() {\n             @Override\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-                SQLiteDatabase writableDb = dbHelper.getWritableDbWithRetries();\n \n-                cleanInAppMessagingCache();\n-                cleanNotificationCache(writableDb);\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n-        }, OS_DELETE_OLD_CACHED_DATA).start();\n+\n+        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n     }\n \n     /**\n-     * TODO: Needs to be implemented to clean out old IAM data used to track impressions, clicks, and viewed IAMs\n+     * Remove IAMs that the last display time was six month ago\n+     * 1. Query for all old message ids and old clicked click ids\n+     * 2. Delete old IAMs from SQL\n+     * 3. Use queried data to clean SharedPreferences\n      */\n-    static void cleanInAppMessagingCache() {\n-        // NOTE: Currently IAMs will pile up overtime and since IAMs can be modified, active, inactive, etc.\n-        //  we never truly know when it is the correct time to remove these ids form our cache\n+    @WorkerThread\n+    synchronized static void cleanCachedInAppMessages(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n+\n+                // 1. Query for all old message ids and old clicked click ids\n+                String[] retColumns = new String[]{\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID,\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_CLICK_IDS\n+                };\n+\n+                String whereStr = OneSignalDbContract.InAppMessageTable.COLUMN_NAME_LAST_DISPLAY + \" < ?\";\n+\n+                String sixMonthsAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - IAM_CACHE_DATA_LIFETIME);\n+                String[] whereArgs = new String[]{sixMonthsAgoInSeconds};\n+\n+                Set<String> oldMessageIds = OSUtils.newConcurrentSet();\n+                Set<String> oldClickedClickIds = OSUtils.newConcurrentSet();\n+\n+                Cursor cursor = null;\n+                try {\n+                    cursor = writableDb.query(OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                            retColumns,\n+                            whereStr,\n+                            whereArgs,\n+                            null,\n+                            null,\n+                            null);\n+\n+                    if (cursor == null || cursor.getCount() == 0) {\n+                        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Attempted to clean 6 month old IAM data, but none exists!\");\n+                        return;\n+                    }\n+\n+                    // From cursor get all of the old message ids and old clicked click ids\n+                    if (cursor.moveToFirst()) {\n+                        do {\n+                            String oldMessageId = cursor.getString(\n+                                    cursor.getColumnIndex(\n+                                            OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID));\n+                            String oldClickIds = cursor.getString(\n+                                    cursor.getColumnIndex(\n+                                            OneSignalDbContract.InAppMessageTable.COLUMN_CLICK_IDS));\n+\n+                            oldMessageIds.add(oldMessageId);\n+                            oldClickedClickIds.addAll(OSUtils.newStringSetFromJSONArray(new JSONArray(oldClickIds)));\n+                        } while (cursor.moveToNext());\n+                    }\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    if (cursor != null & !cursor.isClosed())\n+                        cursor.close();\n+                }\n+\n+                // 2. Delete old IAMs from SQL\n+                writableDb.delete(\n+                        OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                        whereStr,\n+                        whereArgs);\n+\n+                // 3. Use queried data to clean SharedPreferences\n+                cleanCachedSharedPreferenceIamData(oldMessageIds, oldClickedClickIds);\n+            }\n+\n+        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n     }\n \n     /**\n-     * Cleans two notification tables\n-     * 1. NotificationTable.TABLE_NAME\n-     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n+     * Deletes notifications with created timestamps older than 7 days\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n      */\n-    static void cleanNotificationCache(SQLiteDatabase writableDb) {\n-        cleanOldNotificationData(writableDb);\n-        cleanOldUniqueOutcomeEventNotificationsCache(writableDb);\n+    private static void cleanCachedNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n+\n+        String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n+        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n+\n+        writableDb.delete(\n+                NotificationTable.TABLE_NAME,\n+                whereStr,\n+                whereArgs);\n     }\n \n     /**\n-     * Deletes any notifications with created timestamps older than 7 days\n+     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n      */\n-    private static void cleanOldNotificationData(SQLiteDatabase writableDb) {\n-        writableDb.delete(NotificationTable.TABLE_NAME,\n-                NotificationTable.COLUMN_NAME_CREATED_TIME + \" < \" + ((System.currentTimeMillis() / 1_000L) - 604_800L),\n+    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = \"NOT EXISTS(\" +\n+                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+\n+        writableDb.delete(\n+                CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                whereStr,\n                 null);\n     }\n \n     /**\n-     * Deletes any notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * Deletes old IAM SharedPreference dismissed and impressioned message ids as well as clicked click ids\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n      */\n-    static void cleanOldUniqueOutcomeEventNotificationsCache(SQLiteDatabase writableDb) {\n-        writableDb.delete(CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n-                \"NOT EXISTS(SELECT NULL FROM \" + NotificationTable.TABLE_NAME +\n-                        \" n WHERE\" +\n-                        \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID  + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\",\n-                null);\n+    private static void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n+        // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n+        if (oldMessageIds != null && oldMessageIds.size() > 0) {", "originalCommit": "3a552dd564f1b40f5cbb6b085181fc265527c961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4NzMzOQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423887339", "bodyText": "On it!", "author": "mikechoch", "createdAt": "2020-05-12T16:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1Mzc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "31f5b19a5995178d5799de7065e0e2292c78fa6e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex e611cec2..5b7b0896 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -167,14 +168,15 @@ class OneSignalCacheCleaner {\n     }\n \n     /**\n-     * Deletes old IAM SharedPreference dismissed and impressioned message ids as well as clicked click ids\n+     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n+     *  1. Dismissed message ids\n+     *  2. Impressioned message ids\n      * <br/><br/>\n      * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n      * <br/><br/>\n      * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n      */\n-    private static void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n-        // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n+    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n         if (oldMessageIds != null && oldMessageIds.size() > 0) {\n             Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n                     OneSignalPrefs.PREFS_ONESIGNAL,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex e611cec2..5b7b0896 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -167,14 +168,15 @@ class OneSignalCacheCleaner {\n     }\n \n     /**\n-     * Deletes old IAM SharedPreference dismissed and impressioned message ids as well as clicked click ids\n+     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n+     *  1. Dismissed message ids\n+     *  2. Impressioned message ids\n      * <br/><br/>\n      * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n      * <br/><br/>\n      * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n      */\n-    private static void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n-        // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n+    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n         if (oldMessageIds != null && oldMessageIds.size() > 0) {\n             Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n                     OneSignalPrefs.PREFS_ONESIGNAL,\n", "next_change": {"commit": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 5b7b0896..1627e14c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -159,76 +105,14 @@ class OneSignalCacheCleaner {\n     private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n         String whereStr = \"NOT EXISTS(\" +\n                 \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n+                \" AND \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n+                \"\\\")\";\n \n         writableDb.delete(\n-                CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_TABLE,\n                 whereStr,\n                 null);\n     }\n \n-    /**\n-     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n-     *  1. Dismissed message ids\n-     *  2. Impressioned message ids\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n-     * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n-     */\n-    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n-        if (oldMessageIds != null && oldMessageIds.size() > 0) {\n-            Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                    OSUtils.<String>newConcurrentSet());\n-\n-            Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                    OSUtils.<String>newConcurrentSet());\n-\n-            if (dismissedMessages != null && dismissedMessages.size() > 0) {\n-                dismissedMessages.removeAll(oldMessageIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                        dismissedMessages);\n-            }\n-\n-            if (impressionedMessages != null && impressionedMessages.size() > 0) {\n-                impressionedMessages.removeAll(oldMessageIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                        impressionedMessages);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Clean up 6 month old IAM clicked click ids in {@link android.content.SharedPreferences}:\n-     *  1. Clicked click ids from elements within IAM\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n-     * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n-     */\n-    private static void cleanInAppMessageClickedClickIds(Set<String> oldClickedClickIds) {\n-        if (oldClickedClickIds != null && oldClickedClickIds.size() > 0) {\n-            Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                    OSUtils.<String>newConcurrentSet());\n-\n-            if (clickedClickIds != null && clickedClickIds.size() > 0) {\n-                clickedClickIds.removeAll(oldClickedClickIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                        clickedClickIds);\n-            }\n-        }\n-    }\n-\n }\n", "next_change": {"commit": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 1627e14c..37efd5d5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -115,4 +170,68 @@ class OneSignalCacheCleaner {\n                 null);\n     }\n \n+    /**\n+     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n+     *  1. Dismissed message ids\n+     *  2. Impressioned message ids\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n+     */\n+    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n+        if (oldMessageIds != null && oldMessageIds.size() > 0) {\n+            Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                    null);\n+\n+            Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                    null);\n+\n+            if (dismissedMessages != null && dismissedMessages.size() > 0) {\n+                dismissedMessages.removeAll(oldMessageIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                        dismissedMessages);\n+            }\n+\n+            if (impressionedMessages != null && impressionedMessages.size() > 0) {\n+                impressionedMessages.removeAll(oldMessageIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                        impressionedMessages);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Clean up 6 month old IAM clicked click ids in {@link android.content.SharedPreferences}:\n+     *  1. Clicked click ids from elements within IAM\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n+     */\n+    private static void cleanInAppMessageClickedClickIds(Set<String> oldClickedClickIds) {\n+        if (oldClickedClickIds != null && oldClickedClickIds.size() > 0) {\n+            Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n+                    OneSignalPrefs.PREFS_ONESIGNAL,\n+                    OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                    null);\n+\n+            if (clickedClickIds != null && clickedClickIds.size() > 0) {\n+                clickedClickIds.removeAll(oldClickedClickIds);\n+                OneSignalPrefs.saveStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                        clickedClickIds);\n+            }\n+        }\n+    }\n+\n }\n", "next_change": {"commit": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 37efd5d5..858af238 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -170,68 +119,4 @@ class OneSignalCacheCleaner {\n                 null);\n     }\n \n-    /**\n-     * Clean up 6 month old IAM ids in {@link android.content.SharedPreferences}:\n-     *  1. Dismissed message ids\n-     *  2. Impressioned message ids\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n-     * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n-     */\n-    private static void cleanInAppMessageIds(Set<String> oldMessageIds) {\n-        if (oldMessageIds != null && oldMessageIds.size() > 0) {\n-            Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                    null);\n-\n-            Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                    null);\n-\n-            if (dismissedMessages != null && dismissedMessages.size() > 0) {\n-                dismissedMessages.removeAll(oldMessageIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n-                        dismissedMessages);\n-            }\n-\n-            if (impressionedMessages != null && impressionedMessages.size() > 0) {\n-                impressionedMessages.removeAll(oldMessageIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n-                        impressionedMessages);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Clean up 6 month old IAM clicked click ids in {@link android.content.SharedPreferences}:\n-     *  1. Clicked click ids from elements within IAM\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n-     * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n-     */\n-    private static void cleanInAppMessageClickedClickIds(Set<String> oldClickedClickIds) {\n-        if (oldClickedClickIds != null && oldClickedClickIds.size() > 0) {\n-            Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n-                    OneSignalPrefs.PREFS_ONESIGNAL,\n-                    OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                    null);\n-\n-            if (clickedClickIds != null && clickedClickIds.size() > 0) {\n-                clickedClickIds.removeAll(oldClickedClickIds);\n-                OneSignalPrefs.saveStringSet(\n-                        OneSignalPrefs.PREFS_ONESIGNAL,\n-                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                        clickedClickIds);\n-            }\n-        }\n-    }\n-\n }\n", "next_change": {"commit": "53c86e58f11fb14a244e4239f072f1fc65c40a97", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 858af238..88f2ed27 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -118,5 +118,5 @@ class OneSignalCacheCleaner {\n                 whereStr,\n                 null);\n     }\n-\n+  \n }\n", "next_change": {"commit": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 88f2ed27..03d87978 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -118,5 +105,5 @@ class OneSignalCacheCleaner {\n                 whereStr,\n                 null);\n     }\n-  \n+\n }\n", "next_change": {"commit": "ba801fd71fbe18f0c971623ef565f192f5269438", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 03d87978..e9544360 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -88,20 +103,19 @@ class OneSignalCacheCleaner {\n     /**\n      * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n      * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n      * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n      */\n-    private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n+    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n         String whereStr = \"NOT EXISTS(\" +\n                 \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n+                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n                 \"\\\")\";\n \n         writableDb.delete(\n-                OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_TABLE,\n+                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n                 whereStr,\n                 null);\n     }\n", "next_change": {"commit": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex e9544360..9bd01e01 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -103,19 +88,20 @@ class OneSignalCacheCleaner {\n     /**\n      * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n      * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n      * <br/><br/>\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n+     *\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n      */\n-    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+    private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n         String whereStr = \"NOT EXISTS(\" +\n                 \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n+                \" AND \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n                 \"\\\")\";\n \n         writableDb.delete(\n-                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n+                OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_TABLE,\n                 whereStr,\n                 null);\n     }\n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex 9bd01e01..a0a5936c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -96,12 +98,12 @@ class OneSignalCacheCleaner {\n     private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n         String whereStr = \"NOT EXISTS(\" +\n                 \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n+                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n                 \"\\\")\";\n \n         writableDb.delete(\n-                OSOutcomeTableProvider.CACHE_UNIQUE_OUTCOME_TABLE,\n+                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n                 whereStr,\n                 null);\n     }\n", "next_change": {"commit": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\nindex a0a5936c..bf238fc5 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n", "chunk": "@@ -87,25 +85,4 @@ class OneSignalCacheCleaner {\n                 whereArgs);\n     }\n \n-    /**\n-     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedUniqueOutcomeEventNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = \"NOT EXISTS(\" +\n-                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n-                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_INFLUENCE_ID +\n-                \" AND \" + OutcomesDbContract.CACHE_UNIQUE_OUTCOME_COLUMN_CHANNEL_TYPE + \" = \\\"\" + OSInfluenceChannel.NOTIFICATION.toString().toLowerCase() +\n-                \"\\\")\";\n-\n-        writableDb.delete(\n-                OutcomesDbContract.CACHE_UNIQUE_OUTCOME_TABLE,\n-                whereStr,\n-                null);\n-    }\n-\n }\n", "next_change": {"commit": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\ndeleted file mode 100644\nindex bf238fc5..00000000\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java\n+++ /dev/null\n", "chunk": "@@ -1,88 +0,0 @@\n-package com.onesignal;\n-\n-import android.content.Context;\n-import android.os.Process;\n-\n-import androidx.annotation.WorkerThread;\n-\n-import com.onesignal.OneSignalDbContract.NotificationTable;\n-import com.onesignal.influence.domain.OSInfluenceChannel;\n-import com.onesignal.outcomes.data.OutcomesDbContract;\n-\n-class OneSignalCacheCleaner {\n-\n-    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in second\n-\n-    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n-    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n-\n-    /**\n-     * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n-     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n-     */\n-    static void cleanOldCachedData(final Context context) {\n-        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-        cleanNotificationCache(dbHelper);\n-        cleanCachedInAppMessages(dbHelper);\n-    }\n-\n-    /**\n-     * Cleans two notification tables\n-     * 1. NotificationTable.TABLE_NAME\n-     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n-     */\n-    synchronized static void cleanNotificationCache(final OneSignalDbHelper writableDb) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                cleanCachedNotifications(writableDb);\n-            }\n-\n-        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n-    }\n-\n-    /**\n-     * Remove IAMs that the last display time was six month ago\n-     * 1. Query for all old message ids and old clicked click ids\n-     * 2. Delete old IAMs from SQL\n-     * 3. Use queried data to clean SharedPreferences\n-     */\n-    @WorkerThread\n-    static synchronized void cleanCachedInAppMessages(final OneSignalDbHelper dbHelper) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-\n-                OSInAppMessageRepository inAppMessageRepository = OneSignal\n-                        .getInAppMessageController()\n-                        .getInAppMessageRepository(dbHelper);\n-                inAppMessageRepository.cleanCachedInAppMessages();\n-            }\n-        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n-    }\n-\n-    /**\n-     * Deletes notifications with created timestamps older than 7 days\n-     * <br/><br/>\n-     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)}\n-     * <br/><br/>\n-     *\n-     * @see OneSignalCacheCleaner#cleanNotificationCache(OneSignalDbHelper)\n-     */\n-    private static void cleanCachedNotifications(OneSignalDbHelper writableDb) {\n-        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n-\n-        String sevenDaysAgoInSeconds = String.valueOf((OneSignal.getTime().getCurrentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n-        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n-\n-        writableDb.delete(\n-                NotificationTable.TABLE_NAME,\n-                whereStr,\n-                whereArgs);\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "message": "Merge commit", "committedDate": null}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "2be8e022430a96c98d7367392e7aab218528e8c1", "committedDate": "2020-06-08 11:15:44 -0400", "message": "Fix the `NPE` within `OneSignalCacheCleaner.java` (#1047)"}, {"oid": "76f1fc66ecbbe329a4c28470b375cd5210c20669", "committedDate": "2020-06-09 14:14:08 -0400", "message": "Adding 2 layers of SQL DB security and minor clean up * Removed the commented `enableWriteAheadLogging`   * No need for this as this allows concurrent read and writes to occur and we would rather pause a read while a write occurs   * Pausing will ensure that we are querying the most updated data * 2 layers of security for SQL DB regarding `OSInAppMessageRepository.java`   * First one will be transactions using `beginTransaction`, `setTransactionSuccessful`, and `endTransaction` methods wherever we `insert`, `delete`, or `update`   * Second one is keeping TABLE manipulation or reading within the same file and setting these methods as synchronized so that any other TABLE touching that occurs won't happen till any current methods are complete   * The combination of the two steps should help prevent any conflicts between SQL DB and solve the locking issues"}, {"oid": "057cdd9a1ae6207d8b1ad8791d807523b4df174d", "committedDate": "2020-06-10 15:30:47 -0400", "message": "Changed `OSUtils.<String>newConcurrentSet()` default to `null` (#1048)"}, {"oid": "bbabeabb9e8b63fb2ed94cc0e85e7bd19215e218", "committedDate": "2020-06-10 16:53:44 -0400", "message": "Using singleton `OSInAppMessageController.java` instead of new * Created singleton based `getInAppMessageRepository` method inside of `OSInAppMessageController.java` class * This allows the synchronized to apply to multiple methods being called from the class instance * Deleted unused thread name since new Thread was moved toi cache cleaning file with different thread name now"}, {"oid": "53c86e58f11fb14a244e4239f072f1fc65c40a97", "committedDate": "2020-06-10 16:57:27 -0400", "message": "Merge branch 'master' into fix/sql_db_lock_added_more_transactions"}, {"oid": "2feac9dbb75de8777357e462c1ef60629ce57130", "committedDate": "2020-06-10 22:35:15 -0400", "message": "`IAM_CACHE_DATA_LIFETIME` moved to `OSInAppMessageRepository.java`"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "8aeb5bfbd32112f07ea4682ac3bc170944cb01a1", "committedDate": "2020-08-21 16:31:34 -0300", "message": "Fully implement `NotificationWillShowInForeground` (#1010)"}, {"oid": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "committedDate": "2020-09-16 11:29:32 -0300", "message": "Add and improve logs on public methods (#1146)"}, {"oid": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Reset dynamic session launch time"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "30d8a89e41325023c05559b2570ce40e3ce27cdd", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Make an abstract class for SyncService common methods"}, {"oid": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "committedDate": "2021-03-15 16:10:10 -0300", "message": "Move outcome table access to OSOutcomeEventsCache"}, {"oid": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "committedDate": "2021-03-15 16:10:53 -0300", "message": "Rename OneSignalCacheCleaner to OSNotificationDataController"}]}, {"oid": "31f5b19a5995178d5799de7065e0e2292c78fa6e", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/31f5b19a5995178d5799de7065e0e2292c78fa6e", "message": "Broke up Shared Preference cleaning into 2 methods\n* First method cleans message ids for dismissed and impressioned iams stored in Shared Prefs after 6 months\n* Second method cleans click ids belonging to the iam in Shared Prefs after 6 months", "committedDate": "2020-05-12T17:05:28Z", "type": "commit"}]}