{"pr_number": 1005, "pr_title": " Make IAM influence after IAM display, Add click action handler", "pr_author": "Jeasmine", "pr_createdAt": "2020-05-05T16:08:49Z", "pr_url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005", "merge_commit": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "timeline": [{"oid": "fdf8614a10cdb4e3f4549893276729799854bb3f", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/fdf8614a10cdb4e3f4549893276729799854bb3f", "message": "Add Click Action handler for outcomes\n\n   * If the user sends and outcome from the click action handler callback, that outcome should be DIRECT influenced by IAM\n   * DIRECT influences by IAM can be from click action handler or click action outcome", "committedDate": "2020-05-05T16:10:10Z", "type": "forcePushed"}, {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/2d534751b52f0edaf8084317b995bca44c896d7f", "message": "Add Click Action handler for outcomes\n\n   * If the user sends and outcome from the click action handler callback, that outcome should be DIRECT influenced by IAM\n   * DIRECT influences by IAM can be from click action handler or click action outcome", "committedDate": "2020-05-05T17:34:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzA4OQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421243089", "body": "We can remove `outcomes_` from the string as this is under the `outcomes` json key anyway. `v2_enabled` I think is the most clear.\r\nWe should keep `OUTCOMES_` in the name so it is clear when we use it though.", "bodyText": "We can remove outcomes_ from the string as this is under the outcomes json key anyway. v2_enabled I think is the most clear.\nWe should keep OUTCOMES_ in the name so it is clear when we use it though.", "bodyHTML": "<p dir=\"auto\">We can remove <code>outcomes_</code> from the string as this is under the <code>outcomes</code> json key anyway. <code>v2_enabled</code> I think is the most clear.<br>\nWe should keep <code>OUTCOMES_</code> in the name so it is clear when we use it though.</p>", "author": "jkasten2", "createdAt": "2020-05-07T05:11:36Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java", "diffHunk": "@@ -92,12 +92,12 @@ public String toString() {\n    private static int androidParamsRetries = 0;\n \n    private static final String OUTCOME_PARAM = \"outcomes\";\n-   private static final String V2_PARAM = \"v2_active\";\n+   private static final String OUTCOMES_V2_SERVICE_PARAM = \"outcomes_v2_service_enabled\";", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex e3f2c8b4..e584c06f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -92,7 +92,7 @@ public class OneSignalRemoteParams {\n    private static int androidParamsRetries = 0;\n \n    private static final String OUTCOME_PARAM = \"outcomes\";\n-   private static final String OUTCOMES_V2_SERVICE_PARAM = \"outcomes_v2_service_enabled\";\n+   private static final String OUTCOMES_V2_SERVICE_PARAM = \"v2_enabled\";\n    private static final String ENABLED_PARAM = \"enabled\";\n    private static final String DIRECT_PARAM = \"direct\";\n    private static final String INDIRECT_PARAM = \"indirect\";\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex e3f2c8b4..e584c06f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -92,7 +92,7 @@ public class OneSignalRemoteParams {\n    private static int androidParamsRetries = 0;\n \n    private static final String OUTCOME_PARAM = \"outcomes\";\n-   private static final String OUTCOMES_V2_SERVICE_PARAM = \"outcomes_v2_service_enabled\";\n+   private static final String OUTCOMES_V2_SERVICE_PARAM = \"v2_enabled\";\n    private static final String ENABLED_PARAM = \"enabled\";\n    private static final String DIRECT_PARAM = \"direct\";\n    private static final String INDIRECT_PARAM = \"indirect\";\n", "next_change": {"commit": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex e584c06f..30bb919d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -81,38 +19,38 @@ public class OneSignalRemoteParams {\n       boolean restoreTTLFilter;\n       boolean clearGroupOnSummaryClick;\n       boolean receiveReceiptEnabled;\n-      InfluenceParams influenceParams;\n-      FCMParams fcmParams;\n+      OutcomesParams outcomesParams;\n    }\n \n-   interface CallBack {\n+   static class OutcomesParams {\n+      int indirectAttributionWindow = DEFAULT_INDIRECT_ATTRIBUTION_WINDOW; // minutes (default 1440)\n+      int notificationLimit = DEFAULT_NOTIFICATION_LIMIT;                  // notifications (default 10)\n+      boolean directEnabled = false;\n+      boolean indirectEnabled = false;\n+      boolean unattributedEnabled = false;\n+   }\n+\n+   interface AndroidParamsRequestCallback {\n       void complete(Params params);\n    }\n \n    private static int androidParamsRetries = 0;\n \n    private static final String OUTCOME_PARAM = \"outcomes\";\n-   private static final String OUTCOMES_V2_SERVICE_PARAM = \"v2_enabled\";\n    private static final String ENABLED_PARAM = \"enabled\";\n    private static final String DIRECT_PARAM = \"direct\";\n    private static final String INDIRECT_PARAM = \"indirect\";\n    private static final String NOTIFICATION_ATTRIBUTION_PARAM = \"notification_attribution\";\n-   private static final String IAM_ATTRIBUTION_PARAM = \"in_app_message_attribution\";\n    private static final String UNATTRIBUTED_PARAM = \"unattributed\";\n \n-   private static final String FCM_PARENT_PARAM = \"fcm\";\n-   private static final String FCM_PROJECT_ID = \"project_id\";\n-   private static final String FCM_APP_ID = \"app_id\";\n-   private static final String FCM_API_KEY = \"api_key\";\n-\n    private static final int INCREASE_BETWEEN_RETRIES = 10_000;\n    private static final int MIN_WAIT_BETWEEN_RETRIES = 30_000;\n    private static final int MAX_WAIT_BETWEEN_RETRIES = 90_000;\n \n-   public static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n-   public static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n+   static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n+   static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final @NonNull CallBack callBack) {\n+   static void makeAndroidParamsRequest(final @NonNull AndroidParamsRequestCallback callback) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": {"commit": "6a81303c9ebcad5c0b633055d71d1735d72b9c54", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex 30bb919d..6100dad3 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -50,7 +50,7 @@ class OneSignalRemoteParams {\n    static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n    static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final @NonNull AndroidParamsRequestCallback callback) {\n+   static void makeAndroidParamsRequest(final @NonNull ParamsRequestCallback callback) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex 6100dad3..507b5afe 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -19,38 +81,38 @@ class OneSignalRemoteParams {\n       boolean restoreTTLFilter;\n       boolean clearGroupOnSummaryClick;\n       boolean receiveReceiptEnabled;\n-      OutcomesParams outcomesParams;\n+      InfluenceParams influenceParams;\n+      FCMParams fcmParams;\n    }\n \n-   static class OutcomesParams {\n-      int indirectAttributionWindow = DEFAULT_INDIRECT_ATTRIBUTION_WINDOW; // minutes (default 1440)\n-      int notificationLimit = DEFAULT_NOTIFICATION_LIMIT;                  // notifications (default 10)\n-      boolean directEnabled = false;\n-      boolean indirectEnabled = false;\n-      boolean unattributedEnabled = false;\n-   }\n-\n-   interface ParamsRequestCallback {\n+   interface CallBack {\n       void complete(Params params);\n    }\n \n    private static int androidParamsRetries = 0;\n \n    private static final String OUTCOME_PARAM = \"outcomes\";\n+   private static final String V2_PARAM = \"v2_active\";\n    private static final String ENABLED_PARAM = \"enabled\";\n    private static final String DIRECT_PARAM = \"direct\";\n    private static final String INDIRECT_PARAM = \"indirect\";\n    private static final String NOTIFICATION_ATTRIBUTION_PARAM = \"notification_attribution\";\n+   private static final String IAM_ATTRIBUTION_PARAM = \"iam_attribution\";\n    private static final String UNATTRIBUTED_PARAM = \"unattributed\";\n \n+   private static final String FCM_PARENT_PARAM = \"fcm\";\n+   private static final String FCM_PROJECT_ID = \"project_id\";\n+   private static final String FCM_APP_ID = \"app_id\";\n+   private static final String FCM_API_KEY = \"api_key\";\n+\n    private static final int INCREASE_BETWEEN_RETRIES = 10_000;\n    private static final int MIN_WAIT_BETWEEN_RETRIES = 30_000;\n    private static final int MAX_WAIT_BETWEEN_RETRIES = 90_000;\n \n-   static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n-   static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n+   public static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n+   public static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final @NonNull ParamsRequestCallback callback) {\n+   static void makeAndroidParamsRequest(final @NonNull CallBack callBack) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": {"commit": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex 507b5afe..a2800b7f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -112,7 +112,7 @@ public class OneSignalRemoteParams {\n    public static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n    public static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final @NonNull CallBack callBack) {\n+   static void makeAndroidParamsRequest(final @NonNull CallBack callback) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": {"commit": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex a2800b7f..8bd65896 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -112,7 +121,7 @@ public class OneSignalRemoteParams {\n    public static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n    public static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final @NonNull CallBack callback) {\n+   static void makeAndroidParamsRequest(final String appId, final String userId, final @NonNull Callback callback) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": {"commit": "f9eb83cd5eadebc1df5293b91db298e7f12739b1", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex 8bd65896..d4b04f97 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -121,7 +113,7 @@ public class OneSignalRemoteParams {\n    public static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n    public static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final String appId, final String userId, final @NonNull Callback callback) {\n+   static void makeAndroidParamsRequest(final @NonNull CallBack callBack) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": {"commit": "9ed0e56241eb0c565ffbe23792c5c7cf5d021d19", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex d4b04f97..a08b01c1 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -113,7 +122,7 @@ public class OneSignalRemoteParams {\n    public static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n    public static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final @NonNull CallBack callBack) {\n+   static void makeAndroidParamsRequest(final String appId, final String userId, final @NonNull Callback callback) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": {"commit": "ec24bed2b6d750fefb296900717ce1427803b140", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex a08b01c1..421f6a3f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -122,7 +113,7 @@ public class OneSignalRemoteParams {\n    public static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n    public static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final String appId, final String userId, final @NonNull Callback callback) {\n+   static void makeAndroidParamsRequest(final @NonNull CallBack callBack) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": {"commit": "605c9ce17e0d76bb99012e66b8021632aa3f1d51", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex 421f6a3f..53cc5527 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n", "chunk": "@@ -113,7 +122,7 @@ public class OneSignalRemoteParams {\n    public static final int DEFAULT_INDIRECT_ATTRIBUTION_WINDOW = 24 * 60;\n    public static final int DEFAULT_NOTIFICATION_LIMIT = 10;\n \n-   static void makeAndroidParamsRequest(final @NonNull CallBack callBack) {\n+   static void makeAndroidParamsRequest(final String appId, final String userId, final @NonNull Callback callback) {\n       OneSignalRestClient.ResponseHandler responseHandler = new OneSignalRestClient.ResponseHandler() {\n          @Override\n          void onFailure(int statusCode, String response, Throwable throwable) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "message": "Merge commit", "committedDate": null}, {"oid": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Bulk of work inside OneSignal, start of remove init * Created two new init methods, setAppId and setAppContext, these are required to init OneSignal * Deleted mInitBuilder and added all params into OneSignal (we should do something like this again, but more organized and not inside of a builder, maybe a simple singleton class?) * Created a dummy OSNotificationWillShowInForegroundResult.java for now until we create the real thing, but this will replace notification received handler"}, {"oid": "6a81303c9ebcad5c0b633055d71d1735d72b9c54", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Refactored Android params callback name"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "committedDate": "2020-08-04 15:03:25 -0300", "message": "Add new remote params (#1076)"}, {"oid": "63a9377b6ffdf89489634b53238cb9a2c1313f66", "committedDate": "2020-08-27 19:26:02 -0300", "message": "Return setLocationShared and setRequiresUserPrivacyConsent methods (#1124)"}, {"oid": "f9eb83cd5eadebc1df5293b91db298e7f12739b1", "committedDate": "2020-11-20 18:32:02 -0300", "message": "Add auth hash to external Id (#1210)"}, {"oid": "9ed0e56241eb0c565ffbe23792c5c7cf5d021d19", "committedDate": "2020-11-20 19:09:12 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "ec24bed2b6d750fefb296900717ce1427803b140", "committedDate": "2020-12-01 12:03:08 -0300", "message": "Rename email auth remote param"}, {"oid": "605c9ce17e0d76bb99012e66b8021632aa3f1d51", "committedDate": "2020-12-04 16:48:20 -0800", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "1cc9f7d40cd99b03028651afc8d32c8893c238eb", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add SMS Number public methods"}, {"oid": "dee928224ee243ed23d18d907cb2e0bed805b8cb", "committedDate": "2021-05-18 11:43:34 -0300", "message": "Add disableGMSMissingPrompt public method (#1332)"}, {"oid": "89fb5954ea124fccbe273e9c7319f5f9f798b3ac", "committedDate": "2022-05-14 14:03:49 -0700", "message": "Don't retry get params on thread interruption"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4NDAyMQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421784021", "body": "rename this test maybe?\r\n`testIAMActionSendsOutcome_usingOutcomesV2` or\r\n`testOnIAMActionSendsOutcome_usingOutcomesV2`", "bodyText": "rename this test maybe?\ntestIAMActionSendsOutcome_usingOutcomesV2 or\ntestOnIAMActionSendsOutcome_usingOutcomesV2", "bodyHTML": "<p dir=\"auto\">rename this test maybe?<br>\n<code>testIAMActionSendsOutcome_usingOutcomesV2</code> or<br>\n<code>testOnIAMActionSendsOutcome_usingOutcomesV2</code></p>", "author": "mikechoch", "createdAt": "2020-05-07T20:47:42Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -636,7 +623,7 @@ public class InAppMessageIntegrationTests {\n     }\n \n     @Test\n-    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n         // Enable IAM v2\n         preferences = new MockOSSharedPreferences();\n         preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -636,7 +623,7 @@ public class InAppMessageIntegrationTests {\n     }\n \n     @Test\n-    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n         // Enable IAM v2\n         preferences = new MockOSSharedPreferences();\n         preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n", "next_change": {"commit": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 52da333c..9a1e2c27 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -487,533 +437,18 @@ public class InAppMessageIntegrationTests {\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // 4. Call IAM clicked again, ensure a 2nd network call is not made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        OSInAppMessageController.getController().onMessageActionOccurredOnMessage(message, action);\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // Verify clickId was persisted locally\n         Set<String> testClickedMessages = OneSignalPackagePrivateHelper.OneSignalPrefs.getStringSet(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                null\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+           null\n         );\n         assertEquals(1, testClickedMessages.size());\n     }\n \n-    @Test\n-    public void testInAppMessageClickActionOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        assertMeasureOnV2AtIndex(3, \"outcome_name\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomesWithWeight = new JSONArray();\n-        outcomesWithWeight.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        JSONObject actionWithWeight = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomesWithWeight);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-\n-                OneSignal.sendOutcome(\"test\");\n-                try {\n-                    // Ensure outcome is sent\n-                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-\n-        OneSignalPackagePrivateHelper.dismissCurrentMessage();\n-\n-        OneSignal.sendOutcome(\"test1\");\n-        try {\n-            // Ensure outcome is sent but with INDIRECT influence from IAM\n-            assertMeasureOnV2AtIndex(5, \"test1\", null, null, new JSONArray().put(message.messageId), new JSONArray());\n-        } catch (JSONException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n-        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n-\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Disable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                false\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        // 3. Send IAM action\n-        // With unattributed outcomes disable no outcome request should happen\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // Requests: Param request + Players Request + Click request\n-        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                true\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"unique\", true);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // 5. Check no additional request was made\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        JSONObject objectExpected = new JSONObject() {{\n-            put(IAM_TAG_KEY, \"\");\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        final JSONObject[] lastGetTags = new JSONObject[1];\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n-            @Override\n-            public void tagsAvailable(JSONObject tags) {\n-                lastGetTags[0] = tags;\n-            }\n-        });\n-        threadAndTaskWait();\n-        // 3. Ensure no tags\n-        assertEquals(1, lastGetTags.length);\n-        assertEquals(0, lastGetTags[0].length());\n-    }\n-\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "1f04f03c11c87990f023c554cfb902e07d850374", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 9a1e2c27..0319b3fe 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -449,6 +478,365 @@ public class InAppMessageIntegrationTests {\n         assertEquals(1, testClickedMessages.size());\n     }\n \n+    @Test\n+    public void testInAppMessageClickActionOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomesWithWeight = new JSONArray();\n+        outcomesWithWeight.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        JSONObject actionWithWeight = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomesWithWeight);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n+        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Disable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                false\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        // 3. Send IAM action\n+        // With unattributed outcomes disable no outcome request should happen\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // Requests: Param request + Players Request + Click request\n+        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"unique\", true);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // 5. Check no additional request was made\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        JSONObject objectExpected = new JSONObject() {{\n+            put(IAM_TAG_KEY, \"\");\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        final JSONObject[] lastGetTags = new JSONObject[1];\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n+            @Override\n+            public void tagsAvailable(JSONObject tags) {\n+                lastGetTags[0] = tags;\n+            }\n+        });\n+        threadAndTaskWait();\n+        // 3. Ensure no tags\n+        assertEquals(1, lastGetTags.length);\n+        assertEquals(0, lastGetTags[0].length());\n+    }\n+\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 0319b3fe..c5b4ced4 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -845,13 +908,15 @@ public class InAppMessageIntegrationTests {\n \n         // 2. Create an IAM\n         final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-           OSTriggerKind.SESSION_TIME,\n-           null,\n-           OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-           null);\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null);\n \n         // 2. Count IAM as clicked\n-        JSONObject action = new JSONObject() {{ put(\"id\", IAM_CLICK_ID); }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+        }};\n         OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n \n         // 3. Cold restart app and re-init OneSignal\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "message": "Merge commit", "committedDate": null}, {"oid": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle changes to the SDK * Current state is about 11 tests failing * Fix all tests first and then move on * Currently created static public builder methods from before to replace the builder attributes"}, {"oid": "a118285dc3415c8a5685e95d8780780af17acae2", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle major release changes in the SDK * No more tests failing now"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "committedDate": "2020-05-12 10:21:32 -0700", "message": "SQL DB Lock Exception added and IAM Cache Clean (#1007)"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "398a4511f6dabaf76e957b2a5f9b2ce297692afd", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Add Huawei Location support"}, {"oid": "af45ea5fe7092949210b5b8eabe92294f68fbe8c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Create GMS and HMS Loction controller"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "d279f87a7adbc43fb48ce4ad3147ca944270e209", "committedDate": "2020-07-09 13:55:56 -0400", "message": "Adding testing and runtime dependencies for androidx.work * Added `api 'androidx.work:work-runtime:[2.0.0, 2.99.99]'` for onesignal * Added `testImplementation 'androidx.test:core:1.2.0'` for unittest * Added `testImplementation 'androidx.work:work-testing:2.3.4'` for unittest * Added the `TestHelper` methods for `WorkManager` and `AlarmManager` cleanup/setup   * Added method calls `setupTestWorkManager` and `resetAlarmManager` to `beforeTestInitAndCleanup` for future usage of `Worker` and `WorkManager` class * Also removed deprecated `RuntimeEnvironment.application` usage   * Replaced with `ApplicationProvider.getApplicationContext`"}, {"oid": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "committedDate": "2020-08-04 15:03:25 -0300", "message": "Add new remote params (#1076)"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "41263133f40e55c89ea4d66f9509a0ae4ef75412", "committedDate": "2020-08-20 10:29:30 -0700", "message": "Fixes IAM NPE with getDisplayPosition"}, {"oid": "54d45987e324196268bef36d079fe8bdfd27c964", "committedDate": "2020-09-08 16:01:37 -0300", "message": "Rename setAppContext to initWithContext (#1133)"}, {"oid": "04eb2b6c5d88936556fc2090168019d7080d5a6d", "committedDate": "2020-09-11 16:36:10 -0300", "message": "Encapsulate OSInAppMessageAction"}, {"oid": "c7004bbb45ae6910b982cf5a52bf2b94a5f24f12", "committedDate": "2020-09-24 14:43:04 -0300", "message": "Fix equal trigger when using number"}, {"oid": "c7a1c42575b54ed53b64ff96fa305b2358b2e693", "committedDate": "2020-09-24 18:04:24 -0300", "message": "Add OS prefix to handlers"}, {"oid": "dd7fc0ed273f6c74e7104e8604834230a38db804", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Fix IAM not being redisplay by SESSION DURATION"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "83f8857a61002bcdf74e06ff34966956fa749025", "committedDate": "2020-09-30 12:28:56 -0300", "message": "Improve code styling"}, {"oid": "05b05de025f4b3ea6159e9badfba47468bce6c0c", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Make IAM not display under splas screenh when back pressing"}, {"oid": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "committedDate": "2020-10-07 17:24:28 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "012cdb2ab23c7ed4c5c79a3c3b728029fd754d92", "committedDate": "2020-10-27 20:58:56 -0300", "message": "Enable background player updates"}, {"oid": "1a95a64346cf201c51fe3fc1a6177971167ab307", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Schedule focus delay with service"}, {"oid": "32da4ecc878ac2984583ff69b05b958cf4e49502", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Add remaining consistency changes"}, {"oid": "c475819b393b0c719e75f99e19f413a93a1b0b24", "committedDate": "2020-12-11 14:16:08 -0300", "message": "Fix IAM redisplay multiple times"}, {"oid": "f5cb276a557a53779e64394dadf900b6f3136ce0", "committedDate": "2020-12-21 17:52:02 -0800", "message": "unit tests for IAM end_time logic"}, {"oid": "5e7805b40f80c1fb2947710d286f239469db39ec", "committedDate": "2021-02-22 18:02:24 -0800", "message": "unit test for has_liquid and getTags behavior"}, {"oid": "2b7c56ddbb13b2d369aa7d9ce2d737a316e0f744", "committedDate": "2021-05-01 20:30:37 -0700", "message": "rm AdvertisingIdProviderGPS"}, {"oid": "56c103ec37f49b247795c1ddabd47ebe672781fa", "committedDate": "2021-05-21 12:17:57 -0700", "message": "Force LooperMode.Mode.LEGACY"}, {"oid": "b9376baf1bcc176d40a88a4eb17dda5f3836d0c6", "committedDate": "2021-05-24 01:42:51 -0700", "message": "Correct test clean up order on IAM tests"}, {"oid": "471d43384df891a93658826e99417fad3020700c", "committedDate": "2021-05-24 01:50:35 -0700", "message": "Fix tests that did not wait for IAM to display"}, {"oid": "ab998e56cfd5f645863f2834be1387ce1a8e73b5", "committedDate": "2021-05-24 01:52:38 -0700", "message": "Fix testInAppMessageDisplayMultipleTimes_sessionDurationTrigger flakyness"}, {"oid": "e6afdb80c2d0e10a2eeb3f7e1eb18f04fa655aa2", "committedDate": "2021-05-24 01:59:50 -0700", "message": "Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "050a8efccd2b5aaa95d342061b0c9ddbb8a36083", "committedDate": "2021-05-24 02:02:22 -0700", "message": "Fix testTimedMessageIsDisplayedOncePerSession fackyness"}, {"oid": "0749a242133fb2dfb0bb5b053fa781050c57a07c", "committedDate": "2021-05-24 18:18:22 -0700", "message": "fixup! Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "committedDate": "2021-08-09 13:44:11 -0700", "message": "Rename OSInAppMessage to OSInAppMessageInternal"}, {"oid": "af0251eaed9cc07768990de6ae2aab4ea922da0a", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fixing liquid templating unit test after moving impression request"}, {"oid": "abf4fbb9dd7f1e4c3cbf146c92d462dbf7158751", "committedDate": "2021-08-16 14:53:07 -0700", "message": "making messageId protected instead of public. Adding a getter"}, {"oid": "d09e80eaa5f28f16c7b0266f6969a2d05ce1cb03", "committedDate": "2021-09-30 12:34:02 -0700", "message": "Remove `messageWasDismissedByBackPress` and `lostFocus` to redisplay IAM"}, {"oid": "94c752319da8aeb3785ff04185c75d29ec6d1d29", "committedDate": "2021-10-31 21:23:40 -0700", "message": "Don't create IAMs in unit tests from other IAMs (use JSON only)"}, {"oid": "c3432df6cda5f30f399fce4d59227e2984d3f426", "committedDate": "2021-10-31 21:31:03 -0700", "message": "Add basic `toJSONObject` unit test"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MzUyOQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421793529", "body": "rename this test maybe?\r\n`testIAMActionSendsOutcome_afterDismiss_usingOutcomesV2` or\r\n`testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2`", "bodyText": "rename this test maybe?\ntestIAMActionSendsOutcome_afterDismiss_usingOutcomesV2 or\ntestOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2", "bodyHTML": "<p dir=\"auto\">rename this test maybe?<br>\n<code>testIAMActionSendsOutcome_afterDismiss_usingOutcomesV2</code> or<br>\n<code>testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2</code></p>", "author": "mikechoch", "createdAt": "2020-05-07T21:04:57Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+                assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n+                // Requests: Param request + Players Request + IAM Request + Impression + Outcome Request\n+                assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+                assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+                try {\n+                    // Check outcome was DIRECT from IAM\n+                    assertEquals(\"test\", iamOutcomeRequest.payload.get(\"id\"));\n+                    assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+                    JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n+                    JSONObject direct = sources.getJSONObject(\"direct\");\n+                    JSONArray iamIds = direct.getJSONArray(\"in_app_message_ids\");\n+                    assertEquals(0, direct.getJSONArray(\"notification_ids\").length());\n+                    assertEquals(1, iamIds.length());\n+                    assertEquals(message.messageId, iamIds.get(0));\n+                    assertFalse(sources.has(\"indirect\"));\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+    }\n+\n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2AfterDismiss() throws Exception {", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -712,7 +684,7 @@ public class InAppMessageIntegrationTests {\n     }\n \n     @Test\n-    public void testOnMessageActionOccurredOnMessageSendOutcomeV2AfterDismiss() throws Exception {\n+    public void testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2() throws Exception {\n         // Enable IAM v2\n         preferences = new MockOSSharedPreferences();\n         preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -712,7 +684,7 @@ public class InAppMessageIntegrationTests {\n     }\n \n     @Test\n-    public void testOnMessageActionOccurredOnMessageSendOutcomeV2AfterDismiss() throws Exception {\n+    public void testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2() throws Exception {\n         // Enable IAM v2\n         preferences = new MockOSSharedPreferences();\n         preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n", "next_change": {"commit": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 52da333c..9a1e2c27 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -487,533 +437,18 @@ public class InAppMessageIntegrationTests {\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // 4. Call IAM clicked again, ensure a 2nd network call is not made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        OSInAppMessageController.getController().onMessageActionOccurredOnMessage(message, action);\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // Verify clickId was persisted locally\n         Set<String> testClickedMessages = OneSignalPackagePrivateHelper.OneSignalPrefs.getStringSet(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                null\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+           null\n         );\n         assertEquals(1, testClickedMessages.size());\n     }\n \n-    @Test\n-    public void testInAppMessageClickActionOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        assertMeasureOnV2AtIndex(3, \"outcome_name\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomesWithWeight = new JSONArray();\n-        outcomesWithWeight.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        JSONObject actionWithWeight = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomesWithWeight);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-\n-                OneSignal.sendOutcome(\"test\");\n-                try {\n-                    // Ensure outcome is sent\n-                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-\n-        OneSignalPackagePrivateHelper.dismissCurrentMessage();\n-\n-        OneSignal.sendOutcome(\"test1\");\n-        try {\n-            // Ensure outcome is sent but with INDIRECT influence from IAM\n-            assertMeasureOnV2AtIndex(5, \"test1\", null, null, new JSONArray().put(message.messageId), new JSONArray());\n-        } catch (JSONException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n-        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n-\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Disable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                false\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        // 3. Send IAM action\n-        // With unattributed outcomes disable no outcome request should happen\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // Requests: Param request + Players Request + Click request\n-        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                true\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"unique\", true);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // 5. Check no additional request was made\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        JSONObject objectExpected = new JSONObject() {{\n-            put(IAM_TAG_KEY, \"\");\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        final JSONObject[] lastGetTags = new JSONObject[1];\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n-            @Override\n-            public void tagsAvailable(JSONObject tags) {\n-                lastGetTags[0] = tags;\n-            }\n-        });\n-        threadAndTaskWait();\n-        // 3. Ensure no tags\n-        assertEquals(1, lastGetTags.length);\n-        assertEquals(0, lastGetTags[0].length());\n-    }\n-\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "1f04f03c11c87990f023c554cfb902e07d850374", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 9a1e2c27..0319b3fe 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -449,6 +478,365 @@ public class InAppMessageIntegrationTests {\n         assertEquals(1, testClickedMessages.size());\n     }\n \n+    @Test\n+    public void testInAppMessageClickActionOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomesWithWeight = new JSONArray();\n+        outcomesWithWeight.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        JSONObject actionWithWeight = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomesWithWeight);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n+        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Disable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                false\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        // 3. Send IAM action\n+        // With unattributed outcomes disable no outcome request should happen\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // Requests: Param request + Players Request + Click request\n+        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"unique\", true);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // 5. Check no additional request was made\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        JSONObject objectExpected = new JSONObject() {{\n+            put(IAM_TAG_KEY, \"\");\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        final JSONObject[] lastGetTags = new JSONObject[1];\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n+            @Override\n+            public void tagsAvailable(JSONObject tags) {\n+                lastGetTags[0] = tags;\n+            }\n+        });\n+        threadAndTaskWait();\n+        // 3. Ensure no tags\n+        assertEquals(1, lastGetTags.length);\n+        assertEquals(0, lastGetTags[0].length());\n+    }\n+\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 0319b3fe..c5b4ced4 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -845,13 +908,15 @@ public class InAppMessageIntegrationTests {\n \n         // 2. Create an IAM\n         final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-           OSTriggerKind.SESSION_TIME,\n-           null,\n-           OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-           null);\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null);\n \n         // 2. Count IAM as clicked\n-        JSONObject action = new JSONObject() {{ put(\"id\", IAM_CLICK_ID); }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+        }};\n         OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n \n         // 3. Cold restart app and re-init OneSignal\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "message": "Merge commit", "committedDate": null}, {"oid": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle changes to the SDK * Current state is about 11 tests failing * Fix all tests first and then move on * Currently created static public builder methods from before to replace the builder attributes"}, {"oid": "a118285dc3415c8a5685e95d8780780af17acae2", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle major release changes in the SDK * No more tests failing now"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "committedDate": "2020-05-12 10:21:32 -0700", "message": "SQL DB Lock Exception added and IAM Cache Clean (#1007)"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "398a4511f6dabaf76e957b2a5f9b2ce297692afd", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Add Huawei Location support"}, {"oid": "af45ea5fe7092949210b5b8eabe92294f68fbe8c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Create GMS and HMS Loction controller"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "d279f87a7adbc43fb48ce4ad3147ca944270e209", "committedDate": "2020-07-09 13:55:56 -0400", "message": "Adding testing and runtime dependencies for androidx.work * Added `api 'androidx.work:work-runtime:[2.0.0, 2.99.99]'` for onesignal * Added `testImplementation 'androidx.test:core:1.2.0'` for unittest * Added `testImplementation 'androidx.work:work-testing:2.3.4'` for unittest * Added the `TestHelper` methods for `WorkManager` and `AlarmManager` cleanup/setup   * Added method calls `setupTestWorkManager` and `resetAlarmManager` to `beforeTestInitAndCleanup` for future usage of `Worker` and `WorkManager` class * Also removed deprecated `RuntimeEnvironment.application` usage   * Replaced with `ApplicationProvider.getApplicationContext`"}, {"oid": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "committedDate": "2020-08-04 15:03:25 -0300", "message": "Add new remote params (#1076)"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "41263133f40e55c89ea4d66f9509a0ae4ef75412", "committedDate": "2020-08-20 10:29:30 -0700", "message": "Fixes IAM NPE with getDisplayPosition"}, {"oid": "54d45987e324196268bef36d079fe8bdfd27c964", "committedDate": "2020-09-08 16:01:37 -0300", "message": "Rename setAppContext to initWithContext (#1133)"}, {"oid": "04eb2b6c5d88936556fc2090168019d7080d5a6d", "committedDate": "2020-09-11 16:36:10 -0300", "message": "Encapsulate OSInAppMessageAction"}, {"oid": "c7004bbb45ae6910b982cf5a52bf2b94a5f24f12", "committedDate": "2020-09-24 14:43:04 -0300", "message": "Fix equal trigger when using number"}, {"oid": "c7a1c42575b54ed53b64ff96fa305b2358b2e693", "committedDate": "2020-09-24 18:04:24 -0300", "message": "Add OS prefix to handlers"}, {"oid": "dd7fc0ed273f6c74e7104e8604834230a38db804", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Fix IAM not being redisplay by SESSION DURATION"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "83f8857a61002bcdf74e06ff34966956fa749025", "committedDate": "2020-09-30 12:28:56 -0300", "message": "Improve code styling"}, {"oid": "05b05de025f4b3ea6159e9badfba47468bce6c0c", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Make IAM not display under splas screenh when back pressing"}, {"oid": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "committedDate": "2020-10-07 17:24:28 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "012cdb2ab23c7ed4c5c79a3c3b728029fd754d92", "committedDate": "2020-10-27 20:58:56 -0300", "message": "Enable background player updates"}, {"oid": "1a95a64346cf201c51fe3fc1a6177971167ab307", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Schedule focus delay with service"}, {"oid": "32da4ecc878ac2984583ff69b05b958cf4e49502", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Add remaining consistency changes"}, {"oid": "c475819b393b0c719e75f99e19f413a93a1b0b24", "committedDate": "2020-12-11 14:16:08 -0300", "message": "Fix IAM redisplay multiple times"}, {"oid": "f5cb276a557a53779e64394dadf900b6f3136ce0", "committedDate": "2020-12-21 17:52:02 -0800", "message": "unit tests for IAM end_time logic"}, {"oid": "5e7805b40f80c1fb2947710d286f239469db39ec", "committedDate": "2021-02-22 18:02:24 -0800", "message": "unit test for has_liquid and getTags behavior"}, {"oid": "2b7c56ddbb13b2d369aa7d9ce2d737a316e0f744", "committedDate": "2021-05-01 20:30:37 -0700", "message": "rm AdvertisingIdProviderGPS"}, {"oid": "56c103ec37f49b247795c1ddabd47ebe672781fa", "committedDate": "2021-05-21 12:17:57 -0700", "message": "Force LooperMode.Mode.LEGACY"}, {"oid": "b9376baf1bcc176d40a88a4eb17dda5f3836d0c6", "committedDate": "2021-05-24 01:42:51 -0700", "message": "Correct test clean up order on IAM tests"}, {"oid": "471d43384df891a93658826e99417fad3020700c", "committedDate": "2021-05-24 01:50:35 -0700", "message": "Fix tests that did not wait for IAM to display"}, {"oid": "ab998e56cfd5f645863f2834be1387ce1a8e73b5", "committedDate": "2021-05-24 01:52:38 -0700", "message": "Fix testInAppMessageDisplayMultipleTimes_sessionDurationTrigger flakyness"}, {"oid": "e6afdb80c2d0e10a2eeb3f7e1eb18f04fa655aa2", "committedDate": "2021-05-24 01:59:50 -0700", "message": "Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "050a8efccd2b5aaa95d342061b0c9ddbb8a36083", "committedDate": "2021-05-24 02:02:22 -0700", "message": "Fix testTimedMessageIsDisplayedOncePerSession fackyness"}, {"oid": "0749a242133fb2dfb0bb5b053fa781050c57a07c", "committedDate": "2021-05-24 18:18:22 -0700", "message": "fixup! Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "committedDate": "2021-08-09 13:44:11 -0700", "message": "Rename OSInAppMessage to OSInAppMessageInternal"}, {"oid": "af0251eaed9cc07768990de6ae2aab4ea922da0a", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fixing liquid templating unit test after moving impression request"}, {"oid": "abf4fbb9dd7f1e4c3cbf146c92d462dbf7158751", "committedDate": "2021-08-16 14:53:07 -0700", "message": "making messageId protected instead of public. Adding a getter"}, {"oid": "d09e80eaa5f28f16c7b0266f6969a2d05ce1cb03", "committedDate": "2021-09-30 12:34:02 -0700", "message": "Remove `messageWasDismissedByBackPress` and `lostFocus` to redisplay IAM"}, {"oid": "94c752319da8aeb3785ff04185c75d29ec6d1d29", "committedDate": "2021-10-31 21:23:40 -0700", "message": "Don't create IAMs in unit tests from other IAMs (use JSON only)"}, {"oid": "c3432df6cda5f30f399fce4d59227e2984d3f426", "committedDate": "2021-10-31 21:31:03 -0700", "message": "Add basic `toJSONObject` unit test"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NTMxMw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421795313", "body": "fix extra tabbing", "bodyText": "fix extra tabbing", "bodyHTML": "<p dir=\"auto\">fix extra tabbing</p>", "author": "mikechoch", "createdAt": "2020-05-07T21:08:24Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -1041,8 +1041,8 @@ public void complete(OneSignalRemoteParams.Params params) {\n             );\n             OneSignalPrefs.saveBool(\n                OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_OUTCOMES_V2,\n-                    params.influenceParams.v2Enabled\n+               preferences.getOutcomesV2KeyName(),\n+                    params.influenceParams.outcomesV2ServiceEnabled", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex cba56bbe..94cdc161 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1042,7 +1045,7 @@ public class OneSignal {\n             OneSignalPrefs.saveBool(\n                OneSignalPrefs.PREFS_ONESIGNAL,\n                preferences.getOutcomesV2KeyName(),\n-                    params.influenceParams.outcomesV2ServiceEnabled\n+               params.influenceParams.outcomesV2ServiceEnabled\n             );\n             logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n             trackerFactory.saveInfluenceParams(params.influenceParams);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex cba56bbe..94cdc161 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1042,7 +1045,7 @@ public class OneSignal {\n             OneSignalPrefs.saveBool(\n                OneSignalPrefs.PREFS_ONESIGNAL,\n                preferences.getOutcomesV2KeyName(),\n-                    params.influenceParams.outcomesV2ServiceEnabled\n+               params.influenceParams.outcomesV2ServiceEnabled\n             );\n             logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n             trackerFactory.saveInfluenceParams(params.influenceParams);\n", "next_change": {"commit": "a66f50e6415bc8f0d0d2f170cf8811ff0ce6a883", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 94cdc161..fdec778f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1042,13 +1027,8 @@ public class OneSignal {\n                OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n                remoteParams.receiveReceiptEnabled\n             );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+           \n+            OutcomesUtils.saveOutcomesParams(params.outcomesParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex fdec778f..897dc97b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1027,8 +1043,13 @@ public class OneSignal {\n                OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n                remoteParams.receiveReceiptEnabled\n             );\n-           \n-            OutcomesUtils.saveOutcomesParams(params.outcomesParams);\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_OUTCOMES_V2,\n+                    params.influenceParams.v2Enabled\n+            );\n+            logger.log(LOG_LEVEL.DEBUG, \"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n", "next_change": {"commit": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 897dc97b..e5b5321d 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1045,10 +1044,10 @@ public class OneSignal {\n             );\n             OneSignalPrefs.saveBool(\n                OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_OUTCOMES_V2,\n-                    params.influenceParams.v2Enabled\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n             );\n-            logger.log(LOG_LEVEL.DEBUG, \"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n             trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n", "next_change": {"commit": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex e5b5321d..012d3ce2 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1005,68 +803,40 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId) {\n+      if (getRemoteParams() != null)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n          runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 012d3ce2..087166bb 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -803,40 +1023,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId) {\n-      if (getRemoteParams() != null)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n          runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "ba801fd71fbe18f0c971623ef565f192f5269438", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 087166bb..957c4ef6 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1023,68 +804,40 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId) {\n+      if (getRemoteParams() != null)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n          runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "1f838f919b71da1e22e684ebf4c6bd35eebb8773", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 957c4ef6..b9853836 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -804,40 +1023,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId) {\n-      if (getRemoteParams() != null)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n          runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "63a9377b6ffdf89489634b53238cb9a2c1313f66", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex b9853836..7e080ea1 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1023,68 +964,40 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId) {\n+      if (getRemoteParams() != null)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray, true);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 7e080ea1..758c2519 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -964,40 +1028,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId) {\n-      if (getRemoteParams() != null)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n-         runNotificationOpenedCallback(dataArray, true);\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+         runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "91e241d9518be978a75ed909714fbaba60cd0279", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 758c2519..04920a23 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1028,68 +902,40 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId) {\n+      if (getRemoteParams() != null)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "cc3826e7997f75e6ed538f996e535180ba579650", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 04920a23..4285ee8b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -902,40 +1028,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId) {\n-      if (getRemoteParams() != null)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n-         runNotificationOpenedCallback(dataArray);\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+         runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "d6f222d96f6dcfa0dfde89e85b368e59f974fd52", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 4285ee8b..54e38dc7 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1028,68 +902,40 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId) {\n+      if (getRemoteParams() != null)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "5d7b118d0d3430e5f23bdabb426b0a74d64e7c09", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 54e38dc7..c0575a03 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -902,40 +1030,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId) {\n-      if (getRemoteParams() != null)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n-         runNotificationOpenedCallback(dataArray);\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+         runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "012cdb2ab23c7ed4c5c79a3c3b728029fd754d92", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex c0575a03..8f51c3e9 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1030,68 +921,45 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n+      if (getRemoteParams() != null || androidParamsRequestStarted)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      androidParamsRequestStarted = true;\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            androidParamsRequestStarted = false;\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n+\n+            if (queuePushRegistration)\n+               registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "f9eb83cd5eadebc1df5293b91db298e7f12739b1", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 8f51c3e9..59d0c3af 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -921,45 +1053,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n-      if (getRemoteParams() != null || androidParamsRequestStarted)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      androidParamsRequestStarted = true;\n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            androidParamsRequestStarted = false;\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-\n-            if (queuePushRegistration)\n-               registerForPushToken();\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n-         runNotificationOpenedCallback(dataArray);\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+         runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "9ed0e56241eb0c565ffbe23792c5c7cf5d021d19", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 59d0c3af..97c25aa7 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1053,68 +923,45 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n+      if (getRemoteParams() != null || androidParamsRequestStarted)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      androidParamsRequestStarted = true;\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            androidParamsRequestStarted = false;\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n+\n+            if (queuePushRegistration)\n+               registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "5ad7fae004e014dc2598e7954b74580fb22c94f5", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 97c25aa7..8dc87192 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -923,45 +1030,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n-      if (getRemoteParams() != null || androidParamsRequestStarted)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      androidParamsRequestStarted = true;\n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            androidParamsRequestStarted = false;\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-\n-            if (queuePushRegistration)\n-               registerForPushToken();\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n-         runNotificationOpenedCallback(dataArray);\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+         runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "7c54348bab9582e9184c1ca6fba68dc3462068ce", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 8dc87192..2cb05567 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1030,68 +926,45 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n+      if (getRemoteParams() != null || androidParamsRequestStarted)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      androidParamsRequestStarted = true;\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            androidParamsRequestStarted = false;\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n+\n+            if (queuePushRegistration)\n+               registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "a5997209d6d1568d9d20e05e8b9b6630bad2f645", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 2cb05567..df38406f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -926,45 +1030,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n-      if (getRemoteParams() != null || androidParamsRequestStarted)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      androidParamsRequestStarted = true;\n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            androidParamsRequestStarted = false;\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-\n-            if (queuePushRegistration)\n-               registerForPushToken();\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n-         runNotificationOpenedCallback(dataArray);\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+         runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "abe7f5cb5a5e23096e07c13e44a54e2247469b8c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex df38406f..9768aabf 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1030,68 +926,45 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n+      if (getRemoteParams() != null || androidParamsRequestStarted)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      androidParamsRequestStarted = true;\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            androidParamsRequestStarted = false;\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n+\n+            if (queuePushRegistration)\n+               registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "2f2e3ed5ff4019c166c5177846c824ed0501ee4a", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 9768aabf..7c98a378 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -926,45 +1030,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n-      if (getRemoteParams() != null || androidParamsRequestStarted)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      androidParamsRequestStarted = true;\n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            androidParamsRequestStarted = false;\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-\n-            if (queuePushRegistration)\n-               registerForPushToken();\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n-         runNotificationOpenedCallback(dataArray);\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+         runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "dfd8111215275151a6cdc8311dde327d3fd38620", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 7c98a378..bca2ccb0 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1030,68 +928,45 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n+      if (getRemoteParams() != null || androidParamsRequestStarted)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      androidParamsRequestStarted = true;\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            androidParamsRequestStarted = false;\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n+\n+            if (queuePushRegistration)\n+               registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "304de2f585109d6266fc62bfc015eed4506ee165", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex bca2ccb0..ed85b0f8 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -928,45 +1030,68 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n-      return subscriptionStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n+      return subscribableStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n-      if (getRemoteParams() != null || androidParamsRequestStarted)\n+   private static void makeAndroidParamsRequest() {\n+      if (remoteParams != null) {\n+         registerForPushToken();\n          return;\n+      }\n \n-      androidParamsRequestStarted = true;\n-      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n+      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            androidParamsRequestStarted = false;\n-            if (params.googleProjectNumber != null)\n-               googleProjectNumber = params.googleProjectNumber;\n-\n-            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n-            onRemoteParamSet();\n+            remoteParams = params;\n+            if (remoteParams.googleProjectNumber != null)\n+               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n+\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n+               remoteParams.firebaseAnalytics\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n+               remoteParams.restoreTTLFilter\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n+               remoteParams.clearGroupOnSummaryClick\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n+               remoteParams.receiveReceiptEnabled\n+            );\n+            OneSignalPrefs.saveBool(\n+               OneSignalPrefs.PREFS_ONESIGNAL,\n+               preferences.getOutcomesV2KeyName(),\n+               params.influenceParams.outcomesV2ServiceEnabled\n+            );\n+            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n+            trackerFactory.saveInfluenceParams(params.influenceParams);\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-\n-            if (queuePushRegistration)\n-               registerForPushToken();\n+            registerForPushToken();\n          }\n       });\n-   }\n \n+   }\n    private static void fireCallbackForOpenedNotifications() {\n-      for (JSONArray dataArray : unprocessedOpenedNotifs)\n-         runNotificationOpenedCallback(dataArray);\n+      for(JSONArray dataArray : unprocessedOpenedNotifis)\n+         runNotificationOpenedCallback(dataArray, true, false);\n \n-      unprocessedOpenedNotifs.clear();\n+      unprocessedOpenedNotifis.clear();\n    }\n \n    /**\n-    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": {"commit": "a6951e6ab69abf4e424a8dccb4deaab50e44fadb", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex ed85b0f8..ef969382 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n", "chunk": "@@ -1030,68 +926,45 @@ public class OneSignal {\n       });\n    }\n \n-   private static boolean pushStatusRuntimeError(int subscribableStatus) {\n-      return subscribableStatus < -6;\n+   private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n+      return subscriptionStatus < -6;\n    }\n \n-   private static void makeAndroidParamsRequest() {\n-      if (remoteParams != null) {\n-         registerForPushToken();\n+   private static void makeAndroidParamsRequest(String appId, String userId, final boolean queuePushRegistration) {\n+      if (getRemoteParams() != null || androidParamsRequestStarted)\n          return;\n-      }\n \n-      OneSignalRemoteParams.makeAndroidParamsRequest(new OneSignalRemoteParams.CallBack() {\n+      androidParamsRequestStarted = true;\n+      OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.Callback() {\n          @Override\n          public void complete(OneSignalRemoteParams.Params params) {\n-            remoteParams = params;\n-            if (remoteParams.googleProjectNumber != null)\n-               mGoogleProjectNumber = remoteParams.googleProjectNumber;\n-\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_GT_FIREBASE_TRACKING_ENABLED,\n-               remoteParams.firebaseAnalytics\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RESTORE_TTL_FILTER,\n-               remoteParams.restoreTTLFilter\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_CLEAR_GROUP_SUMMARY_CLICK,\n-               remoteParams.clearGroupOnSummaryClick\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_RECEIVE_RECEIPTS_ENABLED,\n-               remoteParams.receiveReceiptEnabled\n-            );\n-            OneSignalPrefs.saveBool(\n-               OneSignalPrefs.PREFS_ONESIGNAL,\n-               preferences.getOutcomesV2KeyName(),\n-               params.influenceParams.outcomesV2ServiceEnabled\n-            );\n-            logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n-            trackerFactory.saveInfluenceParams(params.influenceParams);\n+            androidParamsRequestStarted = false;\n+            if (params.googleProjectNumber != null)\n+               googleProjectNumber = params.googleProjectNumber;\n+\n+            remoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\n+            onRemoteParamSet();\n \n             NotificationChannelManager.processChannelList(\n                OneSignal.appContext,\n                params.notificationChannels\n             );\n-            registerForPushToken();\n+\n+            if (queuePushRegistration)\n+               registerForPushToken();\n          }\n       });\n-\n    }\n+\n    private static void fireCallbackForOpenedNotifications() {\n-      for(JSONArray dataArray : unprocessedOpenedNotifis)\n-         runNotificationOpenedCallback(dataArray, true, false);\n+      for (JSONArray dataArray : unprocessedOpenedNotifs)\n+         runNotificationOpenedCallback(dataArray);\n \n-      unprocessedOpenedNotifis.clear();\n+      unprocessedOpenedNotifs.clear();\n    }\n \n    /**\n+    * TODO: Decide on a single logging method to use instead of using several all over the place\n     * Please do not use this method for logging, it is meant solely to be\n     * used by our wrapper SDK's.\n     */\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "message": "Merge commit", "committedDate": null}, {"oid": "a66f50e6415bc8f0d0d2f170cf8811ff0ce6a883", "committedDate": "2020-01-28 17:28:54 -0800", "message": "WIP - 4.0.0 major release changes starting point * Added a setAppId method, which will now be 1 of 2 important methods for OneSignal setup * The goal is to have 2 necessary methods, setAppId and setAppContext and once these are called, the SDK will be initialized correctly"}, {"oid": "57e0d8e72e1812f934505256ab2611363838ad1d", "committedDate": "2020-01-28 17:28:54 -0800", "message": "Remove BroadcastReceiver notification handler"}, {"oid": "4b81fbe3818e6436b0a0e1cbc08059b8c79bacef", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Bulk of work inside OneSignal, start of remove init * Created two new init methods, setAppId and setAppContext, these are required to init OneSignal * Deleted mInitBuilder and added all params into OneSignal (we should do something like this again, but more organized and not inside of a builder, maybe a simple singleton class?) * Created a dummy OSNotificationWillShowInForegroundResult.java for now until we create the real thing, but this will replace notification received handler"}, {"oid": "6a81303c9ebcad5c0b633055d71d1735d72b9c54", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Refactored Android params callback name"}, {"oid": "7936ef76338ce142898f845e9e87806a0037d843", "committedDate": "2020-01-28 19:10:26 -0800", "message": "More adjustments to removing the init * Minor example app changes"}, {"oid": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle changes to the SDK * Current state is about 11 tests failing * Fix all tests first and then move on * Currently created static public builder methods from before to replace the builder attributes"}, {"oid": "a118285dc3415c8a5685e95d8780780af17acae2", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle major release changes in the SDK * No more tests failing now"}, {"oid": "d851a01f96ef4c4f3d803d510c1e711306b933a9", "committedDate": "2020-01-28 19:10:26 -0800", "message": "More updates to fix issues caused by the OneSignal init change * Needed some more specific checks to initDone where we were only checking appContext * Some cases need to remain appContext since appId is not associated"}, {"oid": "0f79469d2d181053cb3f4d0c608fd9b4ed6a89cb", "committedDate": "2020-01-28 19:10:26 -0800", "message": "OSNotificationWillShowInForeground renamed back to OSNotification.java"}, {"oid": "2d8ff49530f7a9b3a644cabc12b25f48d70d6596", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Various changes from comments on previous commits * Reverted naming of `OSNotificationReceivedResult` * Broke Builder test into 4 separate tests to test `setAppId` and `setAppContext` for OneSignal new init"}, {"oid": "0b94d48ef89ae8276fb555e0748cf2a4f5217930", "committedDate": "2020-01-29 14:07:34 -0800", "message": "Google project number removed from init completely (#940)"}, {"oid": "b1dec3fb1adc8f1619495391cc18953d1edf6b22", "committedDate": "2020-01-30 19:38:53 -0800", "message": "Added log to trying setAppId with old (cached) appId"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "5881d9476cef807bf1c44437c73d586192d31565", "committedDate": "2020-04-16 13:45:13 -0700", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "28684e756706a637808bab08ec62f57500d206f0", "committedDate": "2020-04-29 22:19:43 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "988f3df0b41d1401c4517e5c6c4a2749b7b121e7", "committedDate": "2020-04-30 10:15:05 -0400", "message": "Fixed some errors after the merge conflicts were solved * Local refs for context and appId in init dont exist now, use globals * External user id callback response parsed incorrectly in demo app"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "committedDate": "2020-05-12 10:21:32 -0700", "message": "SQL DB Lock Exception added and IAM Cache Clean (#1007)"}, {"oid": "36d7f7345fb7ade8cd4edf29f2045fefee90db4b", "committedDate": "2020-05-12 15:56:31 -0300", "message": "Add location permissions not available alert dialog"}, {"oid": "0cccc6b869344721b7a9efb462c8bbec63a7b9a8", "committedDate": "2020-05-12 15:56:31 -0300", "message": "Add Settings option to denied location prompt"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "46a10829f84d0f4fffaf7571edbeae93fa9f044a", "committedDate": "2020-05-22 14:34:32 -0700", "message": "Android native release 3.14.0 (#1032)"}, {"oid": "709ed20bdc91ec52385a003b115eda3eb002fd86", "committedDate": "2020-06-10 20:18:04 -0700", "message": "Release commit 3.14.1"}, {"oid": "087a9140c4912cfe21b9e79ee0b44abfd64257d7", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added PushRegistratorHMS"}, {"oid": "54c70ff89b3e2640e0724107de23f9ea2aa0e65c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Added is*DeviceType helpers"}, {"oid": "398a4511f6dabaf76e957b2a5f9b2ce297692afd", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Add Huawei Location support"}, {"oid": "c0581059b5da4403db513c28747ebac5f94f8586", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Only attempt to get Google ad_id if using FCM"}, {"oid": "2fb9de7576d3ca198b3c95c5ec92760095b2d04c", "committedDate": "2020-06-22 13:48:52 -0700", "message": "Release commit 3.15.0"}, {"oid": "211cf7f3d88cdcaed9917d2bb49f0f9ff5be1896", "committedDate": "2020-06-22 18:49:49 -0300", "message": "Add OSDevice"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "4defe6b37986b4405cee98b2cbf3d3edc89e19ef", "committedDate": "2020-06-23 15:16:25 -0300", "message": "Fix Init context"}, {"oid": "68f6ade7ac30e8d3038213957134627940079cb4", "committedDate": "2020-06-25 17:43:36 -0700", "message": "Release commit 3.15.1"}, {"oid": "f9eea6a858c9bae9e4d2c7014876f93895a2ee49", "committedDate": "2020-07-01 11:42:31 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "ece500540422c09bab5dc20fbcdc0148bec4958d", "committedDate": "2020-07-15 15:29:06 -0300", "message": "Fix InterruptedException, email id log, and focus attribution"}, {"oid": "4678ff6960aa6db9ac2aa8237f46f730c6004bb5", "committedDate": "2020-07-27 18:46:34 -0300", "message": "Fix ANR due to on_focus call being call from MainThread"}, {"oid": "7ebc62fb88859c5246305c123b7ad822d64e8d8f", "committedDate": "2020-07-28 12:08:27 -0400", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "a1bd26130cac7cd83b25e63c5704cd9d505ce27c", "committedDate": "2020-07-30 16:59:32 -0400", "message": "Native Android SDK release 3.15.2"}, {"oid": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "committedDate": "2020-08-04 15:03:25 -0300", "message": "Add new remote params (#1076)"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "8aeb5bfbd32112f07ea4682ac3bc170944cb01a1", "committedDate": "2020-08-21 16:31:34 -0300", "message": "Fully implement `NotificationWillShowInForeground` (#1010)"}, {"oid": "5ff5adf6ea519fd92013af0d30e95e4079561fc2", "committedDate": "2020-08-21 18:20:08 -0300", "message": "Update demo app with comments"}, {"oid": "1f838f919b71da1e22e684ebf4c6bd35eebb8773", "committedDate": "2020-08-21 14:34:50 -0700", "message": "Native Android SDK release 3.15.3 commit"}, {"oid": "63a9377b6ffdf89489634b53238cb9a2c1313f66", "committedDate": "2020-08-27 19:26:02 -0300", "message": "Return setLocationShared and setRequiresUserPrivacyConsent methods (#1124)"}, {"oid": "233a0accf1556880598eca16636f344b5d7d4f9a", "committedDate": "2020-09-01 14:15:12 -0300", "message": "Make OSTimeoutHandler be a HandlerThread (#1127)"}, {"oid": "ef22cf03dd62415d9a20ca436b53d34b65f3a56a", "committedDate": "2020-09-02 12:27:08 -0300", "message": "Add shared location disable logic from remote param (#1129)"}, {"oid": "d20d33e3b88e843e37d6fb78fdce7956f70b4c31", "committedDate": "2020-09-02 22:13:02 -0300", "message": "Improvements (#1132)"}, {"oid": "61a5b2f97369e12841b52f90e39ad55f8d9a108c", "committedDate": "2020-09-08 15:49:59 -0300", "message": "Remove ExtNotificationWillShowInForegroundHandler"}, {"oid": "f23fd3e30ab7441eb16360ba2b54aedf4a501362", "committedDate": "2020-09-08 15:49:59 -0300", "message": "Rename AppNotificationWillShowInForegroundHandler to NotificationWillShowInForegroundHandler"}, {"oid": "38ae4766eca6ccb8b6850df8caa102b94d45f797", "committedDate": "2020-09-08 15:49:59 -0300", "message": "Set up NotificationProcessingHandler even if remote params or privacy consent is granted (#1138)"}, {"oid": "54d45987e324196268bef36d079fe8bdfd27c964", "committedDate": "2020-09-08 16:01:37 -0300", "message": "Rename setAppContext to initWithContext (#1133)"}, {"oid": "0956ae7f080da067a972e007b95ab357641f70de", "committedDate": "2020-09-11 14:57:51 -0300", "message": "Make OSDevice a snapshot for state getters"}, {"oid": "57c1d543f9730dda1275df815200c978cdd89845", "committedDate": "2020-09-11 14:57:51 -0300", "message": "Rename OSDevice to OSDeviceState"}, {"oid": "2cc0351e499c028eb1a53125cdeb6889f366a72e", "committedDate": "2020-09-11 16:36:10 -0300", "message": "Encapsulate public variables"}, {"oid": "e3e935613c4b07b990ac044013b6c8dc6a6ccd06", "committedDate": "2020-09-14 13:23:35 -0300", "message": "Rename setSubscribe to disablePush (#1145)"}, {"oid": "05c7467f664e3fdeb9b454d3d788deabd8d29f1c", "committedDate": "2020-09-16 11:29:32 -0300", "message": "Add and improve logs on public methods (#1146)"}, {"oid": "726b3c35e09228e5c318bc608f231c703f181f12", "committedDate": "2020-09-21 15:39:11 -0300", "message": "Fix foreground check when calling initWithContext with Activity (#1151)"}, {"oid": "19571b83a881a343fc423b2add2c65d6467ba8ed", "committedDate": "2020-09-22 15:45:21 -0700", "message": "Removed setRequiresUserPrivacyConsent pre-init"}, {"oid": "1699fdddf8eace030fd774a6cc8ef6e291f90ab9", "committedDate": "2020-09-24 14:38:25 -0300", "message": "Rename and refactor before major release"}, {"oid": "a30809ce539a1b72aae463528f5fd9ac3baebe2f", "committedDate": "2020-09-24 14:38:25 -0300", "message": "Add android Id mutate test and fix test due to service renaming"}, {"oid": "1d4a53939552c8d3b31bc175f53431be1222b97f", "committedDate": "2020-09-24 14:38:25 -0300", "message": "Code cleaning"}, {"oid": "1f9eaf24689e4df1b02cbd56da614f1fd4dbc497", "committedDate": "2020-09-24 17:50:51 -0300", "message": "Remove remove*handler methods"}, {"oid": "c7a1c42575b54ed53b64ff96fa305b2358b2e693", "committedDate": "2020-09-24 18:04:24 -0300", "message": "Add OS prefix to handlers"}, {"oid": "37f0fc2fadf73193149e5c71067ea946a08191d3", "committedDate": "2020-09-24 14:49:32 -0700", "message": "Removed public idsAvailable method"}, {"oid": "e663a2d3275a63204ed1fce760077fb376087b75", "committedDate": "2020-09-24 15:22:15 -0700", "message": "Removed deprecated public syncHashedEmail"}, {"oid": "cfb5574b7806ecbc19a3464dad45208225f0fd0f", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Reset dynamic session launch time"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "83f8857a61002bcdf74e06ff34966956fa749025", "committedDate": "2020-09-30 12:28:56 -0300", "message": "Improve code styling"}, {"oid": "c9effff33519c3f6fe8dd40b072e4b6cc37cea57", "committedDate": "2020-10-02 15:47:48 -0300", "message": "Remove extra logs"}, {"oid": "c262a7ceb33b89662b7b8bc45832987bfc5a803b", "committedDate": "2020-10-02 15:31:44 -0500", "message": "Null exception setting email (#1168)"}, {"oid": "cc3826e7997f75e6ed538f996e535180ba579650", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Init IAM with cached IAMs on new session"}, {"oid": "05b05de025f4b3ea6159e9badfba47468bce6c0c", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Make IAM not display under splas screenh when back pressing"}, {"oid": "d6f222d96f6dcfa0dfde89e85b368e59f974fd52", "committedDate": "2020-10-07 13:27:49 -0300", "message": "Fix foreground check for wrappers (#1174)"}, {"oid": "bae9ba8559f4b552aa93c99605a1afaf9b706360", "committedDate": "2020-10-07 16:41:03 -0300", "message": "Match OSSubscriptionState and OSPermissionState with OSDeviceState"}, {"oid": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "committedDate": "2020-10-07 17:24:28 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "93922da01985aa6a0d46b42cb040619e30248aa3", "committedDate": "2020-10-15 13:55:17 -0300", "message": "Remove public getPermissionSubscriptionState"}, {"oid": "602de6c0d40eb6d5895fe4a7347f1bbf09de1a9b", "committedDate": "2020-10-15 15:35:49 -0300", "message": "Remove getVibrate / getSoundEnabled apis and logics"}, {"oid": "5d7b118d0d3430e5f23bdabb426b0a74d64e7c09", "committedDate": "2020-10-19 14:04:03 -0700", "message": "Release commit 3.15.4"}, {"oid": "012cdb2ab23c7ed4c5c79a3c3b728029fd754d92", "committedDate": "2020-10-27 20:58:56 -0300", "message": "Enable background player updates"}, {"oid": "280ad268f7425103023917af23e80a0c89639a07", "committedDate": "2020-10-29 21:41:32 -0300", "message": "Match iOS variable names"}, {"oid": "d15a56217439fb7b3ef473838f48084d05c167f9", "committedDate": "2020-11-04 11:40:41 -0300", "message": "Add notification duplicate check under Workers (#1193)"}, {"oid": "30d8a89e41325023c05559b2570ce40e3ce27cdd", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Make an abstract class for SyncService common methods"}, {"oid": "1a95a64346cf201c51fe3fc1a6177971167ab307", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Schedule focus delay with service"}, {"oid": "93d255c3c88cfab78e9d7480a2133953065b7c7e", "committedDate": "2020-11-12 16:46:39 -0300", "message": "Remove autoPromptLocation configuration"}, {"oid": "91928f8555958f5123f98c2ac58c9ea23c7f05f4", "committedDate": "2020-11-12 16:48:02 -0300", "message": "Notification Open should use Activity instead of Broadcast (#1192)"}, {"oid": "7cf40ccbea85bc267e2e3c00266436a7c1f9f643", "committedDate": "2020-11-12 18:28:47 -0300", "message": "Delay outcomes call until init"}, {"oid": "f9eb83cd5eadebc1df5293b91db298e7f12739b1", "committedDate": "2020-11-20 18:32:02 -0300", "message": "Add auth hash to external Id (#1210)"}, {"oid": "9ed0e56241eb0c565ffbe23792c5c7cf5d021d19", "committedDate": "2020-11-20 19:09:12 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "797eb375ccf020bbab8fe6f01214b3908f8d4f6a", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Renames for consistency with iOS"}, {"oid": "32da4ecc878ac2984583ff69b05b958cf4e49502", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Add remaining consistency changes"}, {"oid": "5ad7fae004e014dc2598e7954b74580fb22c94f5", "committedDate": "2020-11-20 21:27:53 -0300", "message": "Remove failure block from external id"}, {"oid": "7c54348bab9582e9184c1ca6fba68dc3462068ce", "committedDate": "2020-11-20 23:02:03 -0300", "message": "Update external id method"}, {"oid": "a5997209d6d1568d9d20e05e8b9b6630bad2f645", "committedDate": "2020-11-23 19:38:57 -0300", "message": "Release commit 3.15.5"}, {"oid": "abe7f5cb5a5e23096e07c13e44a54e2247469b8c", "committedDate": "2020-11-24 11:48:57 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "3c8725138436bda0ff63d2cd86f82e3637e34f2e", "committedDate": "2020-12-01 17:04:23 -0300", "message": "Contingence for delay params being null"}, {"oid": "2f2e3ed5ff4019c166c5177846c824ed0501ee4a", "committedDate": "2020-12-02 19:46:38 -0300", "message": "Add auth hash empty string check"}, {"oid": "dfd8111215275151a6cdc8311dde327d3fd38620", "committedDate": "2020-12-02 20:15:26 -0300", "message": "Fix failing test shouldHandleBasicNotifications"}, {"oid": "304de2f585109d6266fc62bfc015eed4506ee165", "committedDate": "2020-12-02 22:41:45 -0300", "message": "Release commit 3.15.6"}, {"oid": "a6951e6ab69abf4e424a8dccb4deaab50e44fadb", "committedDate": "2020-12-03 02:33:00 -0800", "message": "Cleaned up isPastOnSessionTime logic"}, {"oid": "7fad04eff1c64437f65578deea7412a9cc70d388", "committedDate": "2020-12-03 02:38:02 -0800", "message": "Removed extra doSessionInit call"}, {"oid": "605c9ce17e0d76bb99012e66b8021632aa3f1d51", "committedDate": "2020-12-04 16:48:20 -0800", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "1c5c4fd3afc37df57411149d53cdad98e3c02d34", "committedDate": "2020-12-08 17:19:12 -0800", "message": "4.0.0 Major Release"}, {"oid": "7bc069e8c41547f283cd4afa50ddff3b94a0f954", "committedDate": "2020-12-22 16:59:30 -0300", "message": "Fix direct tracking (#1244)"}, {"oid": "c369a0683d0f38c03b125255ff95dfcfaeb0d80a", "committedDate": "2020-12-22 17:01:22 -0300", "message": "Call callback under disable"}, {"oid": "e1c42021486f5dfad0e7f60183cb7da7ef31c283", "committedDate": "2021-01-04 18:37:45 -0300", "message": "Release commit 4.1.0"}, {"oid": "c6d926d7476609cdaccac39fb9435178e949d467", "committedDate": "2021-01-25 11:16:37 -0300", "message": "Fix logout email ended linking again email"}, {"oid": "978380a5361e1e9d8b33fe896dc079ef082dcb41", "committedDate": "2021-01-25 11:17:06 -0300", "message": "Fix remove external id"}, {"oid": "9b7850aff5954da033d983fbbf8bf61f3f47e34c", "committedDate": "2021-02-02 16:59:55 -0300", "message": "Added the metadata check, I think this will overlap with the current check, and should be done after, at other point of the app open process."}, {"oid": "c04d1e225fd52cd54454aa68a3ffd4410f2bceb1", "committedDate": "2021-02-02 16:59:55 -0300", "message": "Added launch url supression and test for that scenario."}, {"oid": "0326d93abb354aa3569e945ba6365aeab9dcd9d0", "committedDate": "2021-02-03 11:32:04 -0800", "message": "Fixed app open on cold start from notification"}, {"oid": "b27ac140eb5e74bfe55468ea4de9426b7bff2a3a", "committedDate": "2021-02-03 11:38:12 -0800", "message": "rm isTaskRoot & NEW_TASK flag from notifi open"}, {"oid": "14c340fcf9a7499b3c31ce1746923bb4b083f6b1", "committedDate": "2021-02-04 23:36:35 -0800", "message": "Clean up of startOrResumeApp"}, {"oid": "0a5d33b0dab4597abd82db568bb96b943c27a606", "committedDate": "2021-02-04 23:42:18 -0800", "message": "Fixes\u00a0default\u00a0notif\u00a0open\u00a0behavior\u00a0to\u00a0resume\u00a0app"}, {"oid": "79d15f7a70859467838300b286f3abc49be145af", "committedDate": "2021-02-16 20:05:21 -0300", "message": "added new method to get TZid."}, {"oid": "fa90a71cc69a84b49a1c37a1261b157bc9839509", "committedDate": "2021-02-16 20:05:21 -0300", "message": "removed unused import"}, {"oid": "b40c65f0f95c138f8e5f0c226c2f7e00afbbde70", "committedDate": "2021-02-16 20:05:21 -0300", "message": "Modified method used to use the same as the documentation."}, {"oid": "e2672bda9ede28a973c517dc41a3680ce47b6eec", "committedDate": "2021-02-16 20:05:21 -0300", "message": "removed unused import."}, {"oid": "5223836979407ead73380e96bd9f3519eee9d101", "committedDate": "2021-02-16 15:26:18 -0800", "message": "Release commit 4.2.0"}, {"oid": "c0c1128ede3a4dce70675d49e264015838c8262f", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add SMS Synchronizer calls"}, {"oid": "1cc9f7d40cd99b03028651afc8d32c8893c238eb", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add SMS Number public methods"}, {"oid": "482daabdb91aee68e5669d1413a119d5b6ae0b44", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add OneSignalStateSynchronizer sms methods integration"}, {"oid": "dc19dffe212766d753c57d1f1a4293c305d3022f", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add on_session and on_focus SMS tests"}, {"oid": "e62421c426d2193b927952759db28fa426b98645", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add SMS update callback tests"}, {"oid": "88a29c2b9d6973a3400386156e98cdb9a594aef5", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add OSSMSSubscriptionStateChanges Observer tests"}, {"oid": "921762d268ee7a8c8fc6a7a2dd958af17aee690f", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add purchase request for SMS"}, {"oid": "917e8cc70b3756417ae42f2f492ec50cdf2d5091", "committedDate": "2021-03-12 19:08:48 -0300", "message": "Add logout SMS method"}, {"oid": "47a85e3406dd880b5fc9c3d5bc799478d6ebaee2", "committedDate": "2021-03-15 16:10:10 -0300", "message": "Move outcome table access to OSOutcomeEventsCache"}, {"oid": "9ee7aae0c1080ff03084ff5c396ccee6ab350f8b", "committedDate": "2021-03-15 16:10:53 -0300", "message": "Rename OneSignalCacheCleaner to OSNotificationDataController"}, {"oid": "47ae123477dd521a93bc1b22b804fe4468e2a045", "committedDate": "2021-03-15 16:11:23 -0300", "message": "Move OneSignal db access to OSNotificationDataController"}, {"oid": "fe15358fd24e45be93c790822264fcb96d628910", "committedDate": "2021-03-17 14:08:30 -0700", "message": "bumping version to 4.3.0"}, {"oid": "e9a1dc7028448fe71ab59d56a8804e682b55e539", "committedDate": "2021-03-30 16:10:58 -0300", "message": "Create OSTaskRemoteController subclass of OSTaskController"}, {"oid": "27d703e490b16901ebe3e954eb850778014eb936", "committedDate": "2021-03-30 16:10:58 -0300", "message": "Add pending tasks to IAMController"}, {"oid": "181a451e697b8688ee830596ca7c4e7bab2b08be", "committedDate": "2021-04-01 16:03:02 -0300", "message": "Remove unused code from OneSignal.java"}, {"oid": "ad1ad146fca077c6dcf005817dca60faf180037e", "committedDate": "2021-04-19 11:07:53 -0700", "message": "removing ad_id from player create"}, {"oid": "14a34b3f286f8f2ae9de7fe2315caed4437896e7", "committedDate": "2021-04-21 13:50:03 -0700", "message": "version number update for Android Release 4.3.1"}, {"oid": "6881f7091b967dfcc5e97b84a583b73d3635930e", "committedDate": "2021-04-26 11:53:43 -0300", "message": "Make isLocationShared public"}, {"oid": "bc59dee9f29bb065087f7d9ef83c9b7601ec96ba", "committedDate": "2021-04-28 15:40:50 -0700", "message": "Release Commit 4.3.2"}, {"oid": "1a81e66873f32cd86c19d2692d9cee46cb779502", "committedDate": "2021-04-30 16:44:29 -0300", "message": "Release 4.3.3"}, {"oid": "3cb018d4aca60317627cffe79d229b12bbca418e", "committedDate": "2021-05-01 20:27:47 -0700", "message": "rm OneSignalChromeTabAndroidFrame"}, {"oid": "2b7c56ddbb13b2d369aa7d9ce2d737a316e0f744", "committedDate": "2021-05-01 20:30:37 -0700", "message": "rm AdvertisingIdProviderGPS"}, {"oid": "bfecc499d96b1a548e297995d6c8bec348eb5a2b", "committedDate": "2021-05-06 13:43:39 -0700", "message": "Release commit 4.3.4"}, {"oid": "dee928224ee243ed23d18d907cb2e0bed805b8cb", "committedDate": "2021-05-18 11:43:34 -0300", "message": "Add disableGMSMissingPrompt public method (#1332)"}, {"oid": "c002b5271e9ba2238a2eb49209cdc072f5b35328", "committedDate": "2021-05-20 21:26:09 -0300", "message": "Fix suppressLaunchURLs not working"}, {"oid": "49eedfed73ccd9ab5356e4b2060b84ac7b656547", "committedDate": "2021-05-22 18:46:47 -0700", "message": "Shutdown ExecutorService instances on post test"}, {"oid": "52bb3c59e2daa78499d52f8169e5338aea3cc510", "committedDate": "2021-05-23 02:12:50 -0700", "message": "Fix testAppOnFocus_wontContainOutcomeData_withOutcomeEventFlagsDisabled"}, {"oid": "3606b783466b55e5002c441835717c9d75f4ef03", "committedDate": "2021-05-25 13:54:47 -0700", "message": "Added classes and interfaces for Language feat"}, {"oid": "1499baccae154a3eb5b3523b22720fdfda78dfde", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Added network call to setLanguage method of OneSignal class"}, {"oid": "03c2cd740c8926243290c2b5bdf183e4be19eb05", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Moved access of Language classes for OneSignalPrefs"}, {"oid": "fa4a479bc157e38d8df9a7d02957d62ca9532bff", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Add Singleton LanguageContext and Dependency Injection to constructor"}, {"oid": "34507f0fa83ab403bb21ca59f1fcf6edef46b328", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Add LanguageContext Dependency to OSInAppMessageController"}, {"oid": "9e391e97b1b47765daf317130187f9e73e2d9e57", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Convert OneSignal preferences and languageContext to private"}, {"oid": "b88c48d5bb03d45647e0735366005ce11a32c652", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Remove null check and JSONException operation at OneSignal.setLanguage"}, {"oid": "4144afbd020c8be8059da5d91137cc9ec1c2b646", "committedDate": "2021-05-25 13:54:48 -0700", "message": "Move strings to constants"}, {"oid": "faa232e129e0b18d3d9ea392f05994d3e5c8b165", "committedDate": "2021-05-25 15:25:55 -0700", "message": "Release commit 4.4.0"}, {"oid": "cedb89df2419900fc5b45785c095ec2905382285", "committedDate": "2021-07-06 15:12:04 -0300", "message": "Fix possible NullPointerException under notValidOrDuplicated"}, {"oid": "d31a29c25c8ccb084663653306876e4135262bb3", "committedDate": "2021-07-06 15:12:35 -0300", "message": "ClassCastException due to casting Application to Context"}, {"oid": "4f51367d836578d8324b294ff30e6708bf77c7cf", "committedDate": "2021-07-09 21:26:32 -0300", "message": "Add Receive Receipt delay."}, {"oid": "15e79748195a96e43a95b34e5e881269e71e405e", "committedDate": "2021-07-12 16:01:14 -0300", "message": "Release commit 4.4.1 (#1382)"}, {"oid": "adf2064ba9d050faa70651c5fa025b4341a14ef6", "committedDate": "2021-07-26 14:46:50 -0300", "message": "Move IAM impressioned request to repository"}, {"oid": "1eec1693337ef3ecea238016f0b3dcd1bc70764b", "committedDate": "2021-07-27 18:49:56 -0300", "message": "Release commit 4.4.2"}, {"oid": "f3f6f2b0e8a2bfdfecd4a973f46a568c09daa946", "committedDate": "2021-08-03 12:47:01 -0700", "message": "not firing willShowInForegroundHandler for restoring notifications"}, {"oid": "9f93dce5cd123170d5f2bf21f22a0c3f71146760", "committedDate": "2021-08-09 13:44:10 -0700", "message": "Creating OSIAMLifecycleHandler class"}, {"oid": "9c1805271876c7b71cd1f36103a88367b20d93ab", "committedDate": "2021-08-10 14:28:36 -0700", "message": "Reverse Activity Trampolining Implementation"}, {"oid": "5b851709398f8cc8b0f27b4722df282ec16f5885", "committedDate": "2021-08-10 14:28:36 -0700", "message": "WIP - Improve generating intent logic"}, {"oid": "1c4670b6db57838e505b4ef7b9476ece43254276", "committedDate": "2021-08-10 14:28:36 -0700", "message": "rm open code that has been moved to intents"}, {"oid": "3c46521d096c38221e3ef74e18ad41599a0d7048", "committedDate": "2021-08-10 14:28:36 -0700", "message": "Added back outcomes logic"}, {"oid": "f72f6b16c023a8f3dc4ab1de2b59f6720355bbe0", "committedDate": "2021-08-12 13:10:07 -0700", "message": "Checking shouldLogUserPrivacyConsentErrorMessage for outcomes"}, {"oid": "5f48f07b0125de6b479e0af5a608d28300ae3f0f", "committedDate": "2021-08-13 10:51:40 -0700", "message": "Merge pull request #1409 from OneSignal/fix/crash_on_unique_outcomes"}, {"oid": "672138f716f9579bf2a60b159e6305dcb52c7a14", "committedDate": "2021-08-13 14:41:15 -0700", "message": "Release commit 4.5.0"}, {"oid": "20a1ccb6c96387b9a1f353775208b3aa70951936", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fill out lifecycle method calls in OSInAppMessageController"}, {"oid": "eb49eb97253c768d13592a28a794370297955666", "committedDate": "2021-08-17 09:34:17 -0700", "message": "Rename OSIAMLifecycleHandler to OSInAppMessageLifecycleHandler"}, {"oid": "e750c009bea37867eb00836c9dc1d3547387ecb4", "committedDate": "2021-08-17 15:26:21 -0700", "message": "Move `inAppMessageLifecycleHandler` to `OSInAppMessageController`"}, {"oid": "b41c278976575f8b3ef838e7c4d1ce9870928412", "committedDate": "2021-08-18 11:53:14 -0700", "message": "Release commit 4.5.1"}, {"oid": "a26369575ae068784264f56271689d10c4e73b5d", "committedDate": "2021-08-24 11:42:21 -0700", "message": "Merge pull request #1405 from OneSignal/Feature/IAM_lifecycle_events"}, {"oid": "ba547f9a82a937399148231deb43fd97cdf036e1", "committedDate": "2021-09-02 11:42:35 -0700", "message": "release 4.6.0 version bumps"}, {"oid": "b0762bd80af77586b764ebd3f605fe3c1227bda4", "committedDate": "2021-10-06 11:16:09 -0700", "message": "Release commit 4.6.1"}, {"oid": "a87c932147acbbadf012d2fca011d586dab87250", "committedDate": "2021-10-21 12:19:30 -0700", "message": "rm direct ref to OneSignal in PushRegistratorFCM"}, {"oid": "c09072dcf40bf7852b2caf9006e706f936df5509", "committedDate": "2021-11-05 16:00:13 -0700", "message": "Release commit 4.6.2"}, {"oid": "8b368861241c11757b07cff9f610ed5ae768f224", "committedDate": "2021-11-12 14:27:15 -0800", "message": "Remove OSDelayTaskController and related code"}, {"oid": "0d04a82d1aaeee9780e9c8b104f2d601d94d2087", "committedDate": "2021-11-12 19:00:21 -0800", "message": "Release commit 4.6.3"}, {"oid": "b3b3350c968dc16421e39ba26e05834631831404", "committedDate": "2022-01-06 18:32:46 -0600", "message": "Release commit 4.6.4"}, {"oid": "4ab3fd858e240457f93bad2c2e4a1e200078529d", "committedDate": "2022-01-12 13:10:41 -0600", "message": "Release commit 4.6.5"}, {"oid": "ecbe38be229e7c838db8f55affbb892675bc412c", "committedDate": "2022-01-27 19:23:08 -0300", "message": "Fix Permission observer not being called"}, {"oid": "c7b18ba73b9931a6b134f503be202546cae39c2a", "committedDate": "2022-01-27 14:25:06 -0800", "message": "Release commit 4.6.6"}, {"oid": "bbd412322130d3099c9d5ed279d810fb96055d8e", "committedDate": "2022-02-01 10:51:11 -0500", "message": "Removed call to setRequiresUserConesnt when there is no value for PrivacyConsent in the manifest"}, {"oid": "2fe3de89cc92b580549137d2240056a2aaeba293", "committedDate": "2022-02-01 16:57:26 -0500", "message": "Added space before and after operator"}, {"oid": "a8018a204a5260bc2b3524881b49c0c85d3b56b0", "committedDate": "2022-02-08 16:33:13 -0800", "message": "Release commit 4.6.7"}, {"oid": "22cb57b7216a2bbc9be9b1c57b792f2ed17286e6", "committedDate": "2022-02-14 14:40:04 -0800", "message": "Add OSDeviceInfoError and OSDeviceInfoCompletionHandler"}, {"oid": "d006c5bd35c1a9140ec9da94f38482c49698b737", "committedDate": "2022-02-14 14:44:58 -0800", "message": "Add completionHandler to setLanguage"}, {"oid": "10867586a325eaf9e69292e5d3e288083768ce8a", "committedDate": "2022-02-16 17:04:25 -0300", "message": "Fix HMS activity open (#1533)"}, {"oid": "ed749cb6c04dfc67a3e0c2e5bca2b9b1236d82ea", "committedDate": "2022-02-24 10:17:41 -0800", "message": "Add OSLanguageCompletionHandler"}, {"oid": "46b957658579c9f974c882fe6d8f12b364e3bc64", "committedDate": "2022-03-01 11:10:24 -0800", "message": "Move OSDeviceInfoError and handler"}, {"oid": "ce6b49bf1a6c34dac04588f72704a37f187dd094", "committedDate": "2022-03-01 15:53:21 -0800", "message": "Merge pull request #1536 from OneSignal/feature/set_language_callbacks"}, {"oid": "04ea523bce051d0161618386132c5b68b657a931", "committedDate": "2022-03-02 18:16:54 -0800", "message": "Check for null `outcomeEventsController` when calling its methods"}, {"oid": "40d4f9f594f5c834be7b750a8a2628b49b2c8f85", "committedDate": "2022-03-03 14:35:40 -0800", "message": "Release commit 4.7.0"}, {"oid": "fd9c957f3ce18138685557b6cf4dc5162277d309", "committedDate": "2022-03-23 11:30:43 -0700", "message": "Unit test `setupContextListeners` not completing"}, {"oid": "ad3e83a084b49290f5da18682560e039a32f17dc", "committedDate": "2022-03-31 10:42:54 -0700", "message": "Merge pull request #1539 from OneSignal/fix/outcomeEventsController_init_npe"}, {"oid": "7146fd4f240477d1442c5a310d4ab5d88e6732a4", "committedDate": "2022-04-08 15:20:56 -0700", "message": "release commit 4.7.1"}, {"oid": "a0eb23aa92f32b90bb87a6e1cf06472af8c79c21", "committedDate": "2022-04-20 15:36:22 -0700", "message": "release commit 4.7.2"}, {"oid": "ee01f2cb939927fb6d116d17502de2a6e26d5e95", "committedDate": "2022-05-10 14:20:52 -0700", "message": "Add Android 13 notification permission prompting"}, {"oid": "c80746fb11b7d59b6a6661a7b68fc19d62f4c42c", "committedDate": "2022-05-10 14:59:05 -0700", "message": "Added fallbackToSettings option to public API"}, {"oid": "324f5e9922ea59df74ee152ec9c5178032ba2e4f", "committedDate": "2022-05-14 12:50:06 -0700", "message": "add back forward activity trampolining"}, {"oid": "1c3e69eca75373a6b9a3e35fb390b46b2975b6a4", "committedDate": "2022-05-14 12:50:06 -0700", "message": "Fix foregrounding app on IAM preview open"}, {"oid": "23cc9344051ef72115f96c8f9bb87b66c2fd6800", "committedDate": "2022-05-14 14:03:49 -0700", "message": "rm waiting on params network call on notifi open"}, {"oid": "fae234a5da8a680b18aec7c88fc74d65809d030a", "committedDate": "2022-05-17 22:38:04 -0700", "message": "Release commit 4.7.3"}, {"oid": "5c410f124bb47b1c828e590eccfbb2d645cf8b9b", "committedDate": "2022-06-21 14:52:19 -0700", "message": "Release commit 4.7.4"}, {"oid": "c88f87e53aab92a9534ad8f0a60989bc159b7787", "committedDate": "2022-06-26 14:19:55 -0700", "message": "add notification permission response handler"}, {"oid": "ec700365e6841503d566da61e166ef1815b958b3", "committedDate": "2022-06-28 12:57:27 -0700", "message": "Merge pull request #1586 from OneSignal/add/notification_permission_prompting"}, {"oid": "d4002830e54b73e8dfc3213549a58ec4ced5e704", "committedDate": "2022-06-28 12:58:20 -0700", "message": "Merge pull request #1607 from OneSignal/add/notification_permission_prompting_callback_and_iam"}, {"oid": "7718cf229454cc8b8b6a84e9d8054ae31e5a6986", "committedDate": "2022-06-29 17:40:22 -0700", "message": "4.8.0 release commit"}, {"oid": "67797aeb3a165868ac62b6dc341f3723d70b891c", "committedDate": "2022-07-19 22:28:04 -0700", "message": "Release commit 4.8.1"}, {"oid": "680f7489d70b7c9f4f0c1109a81cce94bdd1743d", "committedDate": "2022-08-09 21:41:14 -0700", "message": "Release commit 4.8.2"}, {"oid": "5bb7fa5ea053b74ebe617fb21697203e10e54150", "committedDate": "2022-11-08 12:49:43 -0800", "message": "Release commit 4.8.3"}, {"oid": "949e02c65adfe44fb816687891a05e26fdd65c32", "committedDate": "2023-01-04 13:48:35 -0800", "message": "release commit 4.8.4"}, {"oid": "584acb7b59ec1306e1b0396416fbd93afa00648d", "committedDate": "2023-03-07 14:38:49 -0800", "message": "Release commit `4.8.5`"}, {"oid": "53e810e86ef79b30eb92a09766aa244349f61262", "committedDate": "2023-05-11 20:56:54 -0400", "message": "add public CallbackThreadManager class"}, {"oid": "95db3baf5fa966e6847df5ee7531b4bc58d4f32b", "committedDate": "2023-05-11 21:40:36 -0400", "message": "Release commit 4.8.6"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5ODk2OQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421798969", "body": "Rename?\r\n`validateRepositoryVersion` or\r\n`validateOutcomeRepositoryVersion`", "bodyText": "Rename?\nvalidateRepositoryVersion or\nvalidateOutcomeRepositoryVersion", "bodyHTML": "<p dir=\"auto\">Rename?<br>\n<code>validateRepositoryVersion</code> or<br>\n<code>validateOutcomeRepositoryVersion</code></p>", "author": "mikechoch", "createdAt": "2020-05-07T21:15:43Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java", "diffHunk": "@@ -23,11 +23,22 @@ public OSOutcomeEventsFactory(OSLogger logger, OneSignalAPIClient apiClient, One\n     public OSOutcomeEventsRepository getRepository() {\n         if (repository == null)\n             createRepository();\n+        else\n+            checkVersionChanged();\n         return repository;\n     }\n \n+    private void checkVersionChanged() {", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\nindex 6515f199..ca06355b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n", "chunk": "@@ -24,11 +24,11 @@ public class OSOutcomeEventsFactory {\n         if (repository == null)\n             createRepository();\n         else\n-            checkVersionChanged();\n+            validateRepositoryVersion();\n         return repository;\n     }\n \n-    private void checkVersionChanged() {\n+    private void validateRepositoryVersion() {\n         if (!outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV1Repository)\n             return;\n         if (outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV2Repository)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\nindex 6515f199..ca06355b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n", "chunk": "@@ -24,11 +24,11 @@ public class OSOutcomeEventsFactory {\n         if (repository == null)\n             createRepository();\n         else\n-            checkVersionChanged();\n+            validateRepositoryVersion();\n         return repository;\n     }\n \n-    private void checkVersionChanged() {\n+    private void validateRepositoryVersion() {\n         if (!outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV1Repository)\n             return;\n         if (outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV2Repository)\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\nindex ca06355b..a5ca4209 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n", "chunk": "@@ -23,24 +23,14 @@ public class OSOutcomeEventsFactory {\n     public OSOutcomeEventsRepository getRepository() {\n         if (repository == null)\n             createRepository();\n-        else\n-            validateRepositoryVersion();\n         return repository;\n     }\n \n-    private void validateRepositoryVersion() {\n-        if (!outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV1Repository)\n-            return;\n-        if (outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV2Repository)\n-            return;\n-\n-        createRepository();\n-    }\n-\n     private void createRepository() {\n-        if (outcomeEventsCache.isOutcomesV2ServiceEnabled())\n+        if (outcomeEventsCache.isOutcomesV2Available()) {\n             repository = new OSOutcomeEventsV2Repository(logger, outcomeEventsCache, new OSOutcomeEventsV2Service(apiClient));\n-        else\n+        } else {\n             repository = new OSOutcomeEventsV1Repository(logger, outcomeEventsCache, new OSOutcomeEventsV1Service(apiClient));\n+        }\n     }\n }\n", "next_change": {"commit": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\nindex a5ca4209..ca06355b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n", "chunk": "@@ -23,14 +23,24 @@ public class OSOutcomeEventsFactory {\n     public OSOutcomeEventsRepository getRepository() {\n         if (repository == null)\n             createRepository();\n+        else\n+            validateRepositoryVersion();\n         return repository;\n     }\n \n+    private void validateRepositoryVersion() {\n+        if (!outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV1Repository)\n+            return;\n+        if (outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV2Repository)\n+            return;\n+\n+        createRepository();\n+    }\n+\n     private void createRepository() {\n-        if (outcomeEventsCache.isOutcomesV2Available()) {\n+        if (outcomeEventsCache.isOutcomesV2ServiceEnabled())\n             repository = new OSOutcomeEventsV2Repository(logger, outcomeEventsCache, new OSOutcomeEventsV2Service(apiClient));\n-        } else {\n+        else\n             repository = new OSOutcomeEventsV1Repository(logger, outcomeEventsCache, new OSOutcomeEventsV1Service(apiClient));\n-        }\n     }\n }\n", "next_change": {"commit": "ba801fd71fbe18f0c971623ef565f192f5269438", "changed_code": [{"header": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\ndeleted file mode 100644\nindex ca06355b..00000000\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n+++ /dev/null\n", "chunk": "@@ -1,46 +0,0 @@\n-package com.onesignal.outcomes;\n-\n-import com.onesignal.OSLogger;\n-import com.onesignal.OSSharedPreferences;\n-import com.onesignal.OneSignalAPIClient;\n-import com.onesignal.OneSignalDb;\n-import com.onesignal.outcomes.domain.OSOutcomeEventsRepository;\n-\n-public class OSOutcomeEventsFactory {\n-\n-    private final OSLogger logger;\n-    private final OSOutcomeEventsCache outcomeEventsCache;\n-    private final OneSignalAPIClient apiClient;\n-    private OSOutcomeEventsRepository repository;\n-\n-    public OSOutcomeEventsFactory(OSLogger logger, OneSignalAPIClient apiClient, OneSignalDb dbHelper, OSSharedPreferences preferences) {\n-        this.logger = logger;\n-        this.apiClient = apiClient;\n-\n-        outcomeEventsCache = new OSOutcomeEventsCache(logger, dbHelper, preferences);\n-    }\n-\n-    public OSOutcomeEventsRepository getRepository() {\n-        if (repository == null)\n-            createRepository();\n-        else\n-            validateRepositoryVersion();\n-        return repository;\n-    }\n-\n-    private void validateRepositoryVersion() {\n-        if (!outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV1Repository)\n-            return;\n-        if (outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV2Repository)\n-            return;\n-\n-        createRepository();\n-    }\n-\n-    private void createRepository() {\n-        if (outcomeEventsCache.isOutcomesV2ServiceEnabled())\n-            repository = new OSOutcomeEventsV2Repository(logger, outcomeEventsCache, new OSOutcomeEventsV2Service(apiClient));\n-        else\n-            repository = new OSOutcomeEventsV1Repository(logger, outcomeEventsCache, new OSOutcomeEventsV1Service(apiClient));\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "message": "Merge commit", "committedDate": null}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNDMxNg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421804316", "body": "Below you are doing a lot of `Request` asserts\r\nWe should continuously update `RestClientAsserts.java` whenever we find new endpoints for testing\r\nAsk me for help or check the current implementation and try to mimic it for the `measure_sources` endpoint\r\n", "bodyText": "Below you are doing a lot of Request asserts\nWe should continuously update RestClientAsserts.java whenever we find new endpoints for testing\nAsk me for help or check the current implementation and try to mimic it for the measure_sources endpoint", "bodyHTML": "<p dir=\"auto\">Below you are doing a lot of <code>Request</code> asserts<br>\nWe should continuously update <code>RestClientAsserts.java</code> whenever we find new endpoints for testing<br>\nAsk me for help or check the current implementation and try to mimic it for the <code>measure_sources</code> endpoint</p>", "author": "mikechoch", "createdAt": "2020-05-07T21:26:25Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -671,24 +658,9 @@ public class InAppMessageIntegrationTests {\n                 assertMainThread();\n \n                 OneSignal.sendOutcome(\"test\");\n-                // Ensure outcome is sent\n-                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n-\n-                assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n-                // Requests: Param request + Players Request + IAM Request + Impression + Outcome Request\n-                assertEquals(5, ShadowOneSignalRestClient.requests.size());\n-                assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n                 try {\n-                    // Check outcome was DIRECT from IAM\n-                    assertEquals(\"test\", iamOutcomeRequest.payload.get(\"id\"));\n-                    assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-                    JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n-                    JSONObject direct = sources.getJSONObject(\"direct\");\n-                    JSONArray iamIds = direct.getJSONArray(\"in_app_message_ids\");\n-                    assertEquals(0, direct.getJSONArray(\"notification_ids\").length());\n-                    assertEquals(1, iamIds.length());\n-                    assertEquals(message.messageId, iamIds.get(0));\n-                    assertFalse(sources.has(\"indirect\"));\n+                    // Ensure outcome is sent\n+                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n                 } catch (JSONException e) {\n                     e.printStackTrace();\n                 }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -671,24 +658,9 @@ public class InAppMessageIntegrationTests {\n                 assertMainThread();\n \n                 OneSignal.sendOutcome(\"test\");\n-                // Ensure outcome is sent\n-                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n-\n-                assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n-                // Requests: Param request + Players Request + IAM Request + Impression + Outcome Request\n-                assertEquals(5, ShadowOneSignalRestClient.requests.size());\n-                assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n                 try {\n-                    // Check outcome was DIRECT from IAM\n-                    assertEquals(\"test\", iamOutcomeRequest.payload.get(\"id\"));\n-                    assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-                    JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n-                    JSONObject direct = sources.getJSONObject(\"direct\");\n-                    JSONArray iamIds = direct.getJSONArray(\"in_app_message_ids\");\n-                    assertEquals(0, direct.getJSONArray(\"notification_ids\").length());\n-                    assertEquals(1, iamIds.length());\n-                    assertEquals(message.messageId, iamIds.get(0));\n-                    assertFalse(sources.has(\"indirect\"));\n+                    // Ensure outcome is sent\n+                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n                 } catch (JSONException e) {\n                     e.printStackTrace();\n                 }\n", "next_change": {"commit": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 52da333c..9a1e2c27 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -487,533 +437,18 @@ public class InAppMessageIntegrationTests {\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // 4. Call IAM clicked again, ensure a 2nd network call is not made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        OSInAppMessageController.getController().onMessageActionOccurredOnMessage(message, action);\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // Verify clickId was persisted locally\n         Set<String> testClickedMessages = OneSignalPackagePrivateHelper.OneSignalPrefs.getStringSet(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                null\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+           null\n         );\n         assertEquals(1, testClickedMessages.size());\n     }\n \n-    @Test\n-    public void testInAppMessageClickActionOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        assertMeasureOnV2AtIndex(3, \"outcome_name\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomesWithWeight = new JSONArray();\n-        outcomesWithWeight.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        JSONObject actionWithWeight = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomesWithWeight);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-\n-                OneSignal.sendOutcome(\"test\");\n-                try {\n-                    // Ensure outcome is sent\n-                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-\n-        OneSignalPackagePrivateHelper.dismissCurrentMessage();\n-\n-        OneSignal.sendOutcome(\"test1\");\n-        try {\n-            // Ensure outcome is sent but with INDIRECT influence from IAM\n-            assertMeasureOnV2AtIndex(5, \"test1\", null, null, new JSONArray().put(message.messageId), new JSONArray());\n-        } catch (JSONException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n-        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n-\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Disable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                false\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        // 3. Send IAM action\n-        // With unattributed outcomes disable no outcome request should happen\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // Requests: Param request + Players Request + Click request\n-        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                true\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"unique\", true);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // 5. Check no additional request was made\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        JSONObject objectExpected = new JSONObject() {{\n-            put(IAM_TAG_KEY, \"\");\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        final JSONObject[] lastGetTags = new JSONObject[1];\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n-            @Override\n-            public void tagsAvailable(JSONObject tags) {\n-                lastGetTags[0] = tags;\n-            }\n-        });\n-        threadAndTaskWait();\n-        // 3. Ensure no tags\n-        assertEquals(1, lastGetTags.length);\n-        assertEquals(0, lastGetTags[0].length());\n-    }\n-\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "1f04f03c11c87990f023c554cfb902e07d850374", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 9a1e2c27..0319b3fe 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -449,6 +478,365 @@ public class InAppMessageIntegrationTests {\n         assertEquals(1, testClickedMessages.size());\n     }\n \n+    @Test\n+    public void testInAppMessageClickActionOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomesWithWeight = new JSONArray();\n+        outcomesWithWeight.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        JSONObject actionWithWeight = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomesWithWeight);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n+        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Disable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                false\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        // 3. Send IAM action\n+        // With unattributed outcomes disable no outcome request should happen\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // Requests: Param request + Players Request + Click request\n+        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"unique\", true);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // 5. Check no additional request was made\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        JSONObject objectExpected = new JSONObject() {{\n+            put(IAM_TAG_KEY, \"\");\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        final JSONObject[] lastGetTags = new JSONObject[1];\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n+            @Override\n+            public void tagsAvailable(JSONObject tags) {\n+                lastGetTags[0] = tags;\n+            }\n+        });\n+        threadAndTaskWait();\n+        // 3. Ensure no tags\n+        assertEquals(1, lastGetTags.length);\n+        assertEquals(0, lastGetTags[0].length());\n+    }\n+\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 0319b3fe..c5b4ced4 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -845,13 +908,15 @@ public class InAppMessageIntegrationTests {\n \n         // 2. Create an IAM\n         final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-           OSTriggerKind.SESSION_TIME,\n-           null,\n-           OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-           null);\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null);\n \n         // 2. Count IAM as clicked\n-        JSONObject action = new JSONObject() {{ put(\"id\", IAM_CLICK_ID); }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+        }};\n         OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n \n         // 3. Cold restart app and re-init OneSignal\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "message": "Merge commit", "committedDate": null}, {"oid": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle changes to the SDK * Current state is about 11 tests failing * Fix all tests first and then move on * Currently created static public builder methods from before to replace the builder attributes"}, {"oid": "a118285dc3415c8a5685e95d8780780af17acae2", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle major release changes in the SDK * No more tests failing now"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "committedDate": "2020-05-12 10:21:32 -0700", "message": "SQL DB Lock Exception added and IAM Cache Clean (#1007)"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "398a4511f6dabaf76e957b2a5f9b2ce297692afd", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Add Huawei Location support"}, {"oid": "af45ea5fe7092949210b5b8eabe92294f68fbe8c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Create GMS and HMS Loction controller"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "d279f87a7adbc43fb48ce4ad3147ca944270e209", "committedDate": "2020-07-09 13:55:56 -0400", "message": "Adding testing and runtime dependencies for androidx.work * Added `api 'androidx.work:work-runtime:[2.0.0, 2.99.99]'` for onesignal * Added `testImplementation 'androidx.test:core:1.2.0'` for unittest * Added `testImplementation 'androidx.work:work-testing:2.3.4'` for unittest * Added the `TestHelper` methods for `WorkManager` and `AlarmManager` cleanup/setup   * Added method calls `setupTestWorkManager` and `resetAlarmManager` to `beforeTestInitAndCleanup` for future usage of `Worker` and `WorkManager` class * Also removed deprecated `RuntimeEnvironment.application` usage   * Replaced with `ApplicationProvider.getApplicationContext`"}, {"oid": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "committedDate": "2020-08-04 15:03:25 -0300", "message": "Add new remote params (#1076)"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "41263133f40e55c89ea4d66f9509a0ae4ef75412", "committedDate": "2020-08-20 10:29:30 -0700", "message": "Fixes IAM NPE with getDisplayPosition"}, {"oid": "54d45987e324196268bef36d079fe8bdfd27c964", "committedDate": "2020-09-08 16:01:37 -0300", "message": "Rename setAppContext to initWithContext (#1133)"}, {"oid": "04eb2b6c5d88936556fc2090168019d7080d5a6d", "committedDate": "2020-09-11 16:36:10 -0300", "message": "Encapsulate OSInAppMessageAction"}, {"oid": "c7004bbb45ae6910b982cf5a52bf2b94a5f24f12", "committedDate": "2020-09-24 14:43:04 -0300", "message": "Fix equal trigger when using number"}, {"oid": "c7a1c42575b54ed53b64ff96fa305b2358b2e693", "committedDate": "2020-09-24 18:04:24 -0300", "message": "Add OS prefix to handlers"}, {"oid": "dd7fc0ed273f6c74e7104e8604834230a38db804", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Fix IAM not being redisplay by SESSION DURATION"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "83f8857a61002bcdf74e06ff34966956fa749025", "committedDate": "2020-09-30 12:28:56 -0300", "message": "Improve code styling"}, {"oid": "05b05de025f4b3ea6159e9badfba47468bce6c0c", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Make IAM not display under splas screenh when back pressing"}, {"oid": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "committedDate": "2020-10-07 17:24:28 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "012cdb2ab23c7ed4c5c79a3c3b728029fd754d92", "committedDate": "2020-10-27 20:58:56 -0300", "message": "Enable background player updates"}, {"oid": "1a95a64346cf201c51fe3fc1a6177971167ab307", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Schedule focus delay with service"}, {"oid": "32da4ecc878ac2984583ff69b05b958cf4e49502", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Add remaining consistency changes"}, {"oid": "c475819b393b0c719e75f99e19f413a93a1b0b24", "committedDate": "2020-12-11 14:16:08 -0300", "message": "Fix IAM redisplay multiple times"}, {"oid": "f5cb276a557a53779e64394dadf900b6f3136ce0", "committedDate": "2020-12-21 17:52:02 -0800", "message": "unit tests for IAM end_time logic"}, {"oid": "5e7805b40f80c1fb2947710d286f239469db39ec", "committedDate": "2021-02-22 18:02:24 -0800", "message": "unit test for has_liquid and getTags behavior"}, {"oid": "2b7c56ddbb13b2d369aa7d9ce2d737a316e0f744", "committedDate": "2021-05-01 20:30:37 -0700", "message": "rm AdvertisingIdProviderGPS"}, {"oid": "56c103ec37f49b247795c1ddabd47ebe672781fa", "committedDate": "2021-05-21 12:17:57 -0700", "message": "Force LooperMode.Mode.LEGACY"}, {"oid": "b9376baf1bcc176d40a88a4eb17dda5f3836d0c6", "committedDate": "2021-05-24 01:42:51 -0700", "message": "Correct test clean up order on IAM tests"}, {"oid": "471d43384df891a93658826e99417fad3020700c", "committedDate": "2021-05-24 01:50:35 -0700", "message": "Fix tests that did not wait for IAM to display"}, {"oid": "ab998e56cfd5f645863f2834be1387ce1a8e73b5", "committedDate": "2021-05-24 01:52:38 -0700", "message": "Fix testInAppMessageDisplayMultipleTimes_sessionDurationTrigger flakyness"}, {"oid": "e6afdb80c2d0e10a2eeb3f7e1eb18f04fa655aa2", "committedDate": "2021-05-24 01:59:50 -0700", "message": "Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "050a8efccd2b5aaa95d342061b0c9ddbb8a36083", "committedDate": "2021-05-24 02:02:22 -0700", "message": "Fix testTimedMessageIsDisplayedOncePerSession fackyness"}, {"oid": "0749a242133fb2dfb0bb5b053fa781050c57a07c", "committedDate": "2021-05-24 18:18:22 -0700", "message": "fixup! Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "committedDate": "2021-08-09 13:44:11 -0700", "message": "Rename OSInAppMessage to OSInAppMessageInternal"}, {"oid": "af0251eaed9cc07768990de6ae2aab4ea922da0a", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fixing liquid templating unit test after moving impression request"}, {"oid": "abf4fbb9dd7f1e4c3cbf146c92d462dbf7158751", "committedDate": "2021-08-16 14:53:07 -0700", "message": "making messageId protected instead of public. Adding a getter"}, {"oid": "d09e80eaa5f28f16c7b0266f6969a2d05ce1cb03", "committedDate": "2021-09-30 12:34:02 -0700", "message": "Remove `messageWasDismissedByBackPress` and `lostFocus` to redisplay IAM"}, {"oid": "94c752319da8aeb3785ff04185c75d29ec6d1d29", "committedDate": "2021-10-31 21:23:40 -0700", "message": "Don't create IAMs in unit tests from other IAMs (use JSON only)"}, {"oid": "c3432df6cda5f30f399fce4d59227e2984d3f426", "committedDate": "2021-10-31 21:31:03 -0700", "message": "Add basic `toJSONObject` unit test"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNDU5NQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421804595", "body": "Use `RestClientAsserts.java`, similar to above comment", "bodyText": "Use RestClientAsserts.java, similar to above comment", "bodyHTML": "<p dir=\"auto\">Use <code>RestClientAsserts.java</code>, similar to above comment</p>", "author": "mikechoch", "createdAt": "2020-05-07T21:26:56Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+                assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n+                // Requests: Param request + Players Request + IAM Request + Impression + Outcome Request\n+                assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+                assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+                try {\n+                    // Check outcome was DIRECT from IAM\n+                    assertEquals(\"test\", iamOutcomeRequest.payload.get(\"id\"));\n+                    assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+                    JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n+                    JSONObject direct = sources.getJSONObject(\"direct\");\n+                    JSONArray iamIds = direct.getJSONArray(\"in_app_message_ids\");\n+                    assertEquals(0, direct.getJSONArray(\"notification_ids\").length());\n+                    assertEquals(1, iamIds.length());\n+                    assertEquals(message.messageId, iamIds.get(0));\n+                    assertFalse(sources.has(\"indirect\"));\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+    }\n+\n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2AfterDismiss() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+\n+        OneSignalPackagePrivateHelper.dismissCurrentMessage();\n+\n+        OneSignal.sendOutcome(\"test1\");\n+        // Ensure outcome is sent but with INDIRECT influence from IAM\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(5);", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -766,24 +738,9 @@ public class InAppMessageIntegrationTests {\n         OneSignalPackagePrivateHelper.dismissCurrentMessage();\n \n         OneSignal.sendOutcome(\"test1\");\n-        // Ensure outcome is sent but with INDIRECT influence from IAM\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(5);\n-\n-        assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + IAM Request + Impression + Click + Outcome Request\n-        assertEquals(6, ShadowOneSignalRestClient.requests.size());\n-        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n         try {\n-            // Check outcome was INDIRECT from IAM\n-            assertEquals(\"test1\", iamOutcomeRequest.payload.get(\"id\"));\n-            assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-            JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n-            JSONObject indirect = sources.getJSONObject(\"indirect\");\n-            JSONArray iamIds = indirect.getJSONArray(\"in_app_message_ids\");\n-            assertEquals(0, indirect.getJSONArray(\"notification_ids\").length());\n-            assertEquals(1, iamIds.length());\n-            assertEquals(message.messageId, iamIds.get(0));\n-            assertFalse(sources.has(\"direct\"));\n+            // Ensure outcome is sent but with INDIRECT influence from IAM\n+            assertMeasureOnV2AtIndex(5, \"test1\", null, null, new JSONArray().put(message.messageId), new JSONArray());\n         } catch (JSONException e) {\n             e.printStackTrace();\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -766,24 +738,9 @@ public class InAppMessageIntegrationTests {\n         OneSignalPackagePrivateHelper.dismissCurrentMessage();\n \n         OneSignal.sendOutcome(\"test1\");\n-        // Ensure outcome is sent but with INDIRECT influence from IAM\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(5);\n-\n-        assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + IAM Request + Impression + Click + Outcome Request\n-        assertEquals(6, ShadowOneSignalRestClient.requests.size());\n-        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n         try {\n-            // Check outcome was INDIRECT from IAM\n-            assertEquals(\"test1\", iamOutcomeRequest.payload.get(\"id\"));\n-            assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-            JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n-            JSONObject indirect = sources.getJSONObject(\"indirect\");\n-            JSONArray iamIds = indirect.getJSONArray(\"in_app_message_ids\");\n-            assertEquals(0, indirect.getJSONArray(\"notification_ids\").length());\n-            assertEquals(1, iamIds.length());\n-            assertEquals(message.messageId, iamIds.get(0));\n-            assertFalse(sources.has(\"direct\"));\n+            // Ensure outcome is sent but with INDIRECT influence from IAM\n+            assertMeasureOnV2AtIndex(5, \"test1\", null, null, new JSONArray().put(message.messageId), new JSONArray());\n         } catch (JSONException e) {\n             e.printStackTrace();\n         }\n", "next_change": {"commit": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 52da333c..9a1e2c27 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -487,533 +437,18 @@ public class InAppMessageIntegrationTests {\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // 4. Call IAM clicked again, ensure a 2nd network call is not made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        OSInAppMessageController.getController().onMessageActionOccurredOnMessage(message, action);\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // Verify clickId was persisted locally\n         Set<String> testClickedMessages = OneSignalPackagePrivateHelper.OneSignalPrefs.getStringSet(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                null\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+           null\n         );\n         assertEquals(1, testClickedMessages.size());\n     }\n \n-    @Test\n-    public void testInAppMessageClickActionOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        assertMeasureOnV2AtIndex(3, \"outcome_name\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomesWithWeight = new JSONArray();\n-        outcomesWithWeight.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        JSONObject actionWithWeight = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomesWithWeight);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-\n-                OneSignal.sendOutcome(\"test\");\n-                try {\n-                    // Ensure outcome is sent\n-                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-\n-        OneSignalPackagePrivateHelper.dismissCurrentMessage();\n-\n-        OneSignal.sendOutcome(\"test1\");\n-        try {\n-            // Ensure outcome is sent but with INDIRECT influence from IAM\n-            assertMeasureOnV2AtIndex(5, \"test1\", null, null, new JSONArray().put(message.messageId), new JSONArray());\n-        } catch (JSONException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n-        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n-\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Disable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                false\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        // 3. Send IAM action\n-        // With unattributed outcomes disable no outcome request should happen\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // Requests: Param request + Players Request + Click request\n-        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                true\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"unique\", true);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // 5. Check no additional request was made\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        JSONObject objectExpected = new JSONObject() {{\n-            put(IAM_TAG_KEY, \"\");\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        final JSONObject[] lastGetTags = new JSONObject[1];\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n-            @Override\n-            public void tagsAvailable(JSONObject tags) {\n-                lastGetTags[0] = tags;\n-            }\n-        });\n-        threadAndTaskWait();\n-        // 3. Ensure no tags\n-        assertEquals(1, lastGetTags.length);\n-        assertEquals(0, lastGetTags[0].length());\n-    }\n-\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "1f04f03c11c87990f023c554cfb902e07d850374", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 9a1e2c27..0319b3fe 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -449,6 +478,365 @@ public class InAppMessageIntegrationTests {\n         assertEquals(1, testClickedMessages.size());\n     }\n \n+    @Test\n+    public void testInAppMessageClickActionOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomesWithWeight = new JSONArray();\n+        outcomesWithWeight.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        JSONObject actionWithWeight = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomesWithWeight);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n+        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Disable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                false\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        // 3. Send IAM action\n+        // With unattributed outcomes disable no outcome request should happen\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // Requests: Param request + Players Request + Click request\n+        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"unique\", true);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // 5. Check no additional request was made\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        JSONObject objectExpected = new JSONObject() {{\n+            put(IAM_TAG_KEY, \"\");\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        final JSONObject[] lastGetTags = new JSONObject[1];\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n+            @Override\n+            public void tagsAvailable(JSONObject tags) {\n+                lastGetTags[0] = tags;\n+            }\n+        });\n+        threadAndTaskWait();\n+        // 3. Ensure no tags\n+        assertEquals(1, lastGetTags.length);\n+        assertEquals(0, lastGetTags[0].length());\n+    }\n+\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 0319b3fe..c5b4ced4 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -845,13 +908,15 @@ public class InAppMessageIntegrationTests {\n \n         // 2. Create an IAM\n         final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-           OSTriggerKind.SESSION_TIME,\n-           null,\n-           OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-           null);\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null);\n \n         // 2. Count IAM as clicked\n-        JSONObject action = new JSONObject() {{ put(\"id\", IAM_CLICK_ID); }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+        }};\n         OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n \n         // 3. Cold restart app and re-init OneSignal\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "message": "Merge commit", "committedDate": null}, {"oid": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle changes to the SDK * Current state is about 11 tests failing * Fix all tests first and then move on * Currently created static public builder methods from before to replace the builder attributes"}, {"oid": "a118285dc3415c8a5685e95d8780780af17acae2", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle major release changes in the SDK * No more tests failing now"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "committedDate": "2020-05-12 10:21:32 -0700", "message": "SQL DB Lock Exception added and IAM Cache Clean (#1007)"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "398a4511f6dabaf76e957b2a5f9b2ce297692afd", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Add Huawei Location support"}, {"oid": "af45ea5fe7092949210b5b8eabe92294f68fbe8c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Create GMS and HMS Loction controller"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "d279f87a7adbc43fb48ce4ad3147ca944270e209", "committedDate": "2020-07-09 13:55:56 -0400", "message": "Adding testing and runtime dependencies for androidx.work * Added `api 'androidx.work:work-runtime:[2.0.0, 2.99.99]'` for onesignal * Added `testImplementation 'androidx.test:core:1.2.0'` for unittest * Added `testImplementation 'androidx.work:work-testing:2.3.4'` for unittest * Added the `TestHelper` methods for `WorkManager` and `AlarmManager` cleanup/setup   * Added method calls `setupTestWorkManager` and `resetAlarmManager` to `beforeTestInitAndCleanup` for future usage of `Worker` and `WorkManager` class * Also removed deprecated `RuntimeEnvironment.application` usage   * Replaced with `ApplicationProvider.getApplicationContext`"}, {"oid": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "committedDate": "2020-08-04 15:03:25 -0300", "message": "Add new remote params (#1076)"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "41263133f40e55c89ea4d66f9509a0ae4ef75412", "committedDate": "2020-08-20 10:29:30 -0700", "message": "Fixes IAM NPE with getDisplayPosition"}, {"oid": "54d45987e324196268bef36d079fe8bdfd27c964", "committedDate": "2020-09-08 16:01:37 -0300", "message": "Rename setAppContext to initWithContext (#1133)"}, {"oid": "04eb2b6c5d88936556fc2090168019d7080d5a6d", "committedDate": "2020-09-11 16:36:10 -0300", "message": "Encapsulate OSInAppMessageAction"}, {"oid": "c7004bbb45ae6910b982cf5a52bf2b94a5f24f12", "committedDate": "2020-09-24 14:43:04 -0300", "message": "Fix equal trigger when using number"}, {"oid": "c7a1c42575b54ed53b64ff96fa305b2358b2e693", "committedDate": "2020-09-24 18:04:24 -0300", "message": "Add OS prefix to handlers"}, {"oid": "dd7fc0ed273f6c74e7104e8604834230a38db804", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Fix IAM not being redisplay by SESSION DURATION"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "83f8857a61002bcdf74e06ff34966956fa749025", "committedDate": "2020-09-30 12:28:56 -0300", "message": "Improve code styling"}, {"oid": "05b05de025f4b3ea6159e9badfba47468bce6c0c", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Make IAM not display under splas screenh when back pressing"}, {"oid": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "committedDate": "2020-10-07 17:24:28 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "012cdb2ab23c7ed4c5c79a3c3b728029fd754d92", "committedDate": "2020-10-27 20:58:56 -0300", "message": "Enable background player updates"}, {"oid": "1a95a64346cf201c51fe3fc1a6177971167ab307", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Schedule focus delay with service"}, {"oid": "32da4ecc878ac2984583ff69b05b958cf4e49502", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Add remaining consistency changes"}, {"oid": "c475819b393b0c719e75f99e19f413a93a1b0b24", "committedDate": "2020-12-11 14:16:08 -0300", "message": "Fix IAM redisplay multiple times"}, {"oid": "f5cb276a557a53779e64394dadf900b6f3136ce0", "committedDate": "2020-12-21 17:52:02 -0800", "message": "unit tests for IAM end_time logic"}, {"oid": "5e7805b40f80c1fb2947710d286f239469db39ec", "committedDate": "2021-02-22 18:02:24 -0800", "message": "unit test for has_liquid and getTags behavior"}, {"oid": "2b7c56ddbb13b2d369aa7d9ce2d737a316e0f744", "committedDate": "2021-05-01 20:30:37 -0700", "message": "rm AdvertisingIdProviderGPS"}, {"oid": "56c103ec37f49b247795c1ddabd47ebe672781fa", "committedDate": "2021-05-21 12:17:57 -0700", "message": "Force LooperMode.Mode.LEGACY"}, {"oid": "b9376baf1bcc176d40a88a4eb17dda5f3836d0c6", "committedDate": "2021-05-24 01:42:51 -0700", "message": "Correct test clean up order on IAM tests"}, {"oid": "471d43384df891a93658826e99417fad3020700c", "committedDate": "2021-05-24 01:50:35 -0700", "message": "Fix tests that did not wait for IAM to display"}, {"oid": "ab998e56cfd5f645863f2834be1387ce1a8e73b5", "committedDate": "2021-05-24 01:52:38 -0700", "message": "Fix testInAppMessageDisplayMultipleTimes_sessionDurationTrigger flakyness"}, {"oid": "e6afdb80c2d0e10a2eeb3f7e1eb18f04fa655aa2", "committedDate": "2021-05-24 01:59:50 -0700", "message": "Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "050a8efccd2b5aaa95d342061b0c9ddbb8a36083", "committedDate": "2021-05-24 02:02:22 -0700", "message": "Fix testTimedMessageIsDisplayedOncePerSession fackyness"}, {"oid": "0749a242133fb2dfb0bb5b053fa781050c57a07c", "committedDate": "2021-05-24 18:18:22 -0700", "message": "fixup! Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "committedDate": "2021-08-09 13:44:11 -0700", "message": "Rename OSInAppMessage to OSInAppMessageInternal"}, {"oid": "af0251eaed9cc07768990de6ae2aab4ea922da0a", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fixing liquid templating unit test after moving impression request"}, {"oid": "abf4fbb9dd7f1e4c3cbf146c92d462dbf7158751", "committedDate": "2021-08-16 14:53:07 -0700", "message": "making messageId protected instead of public. Adding a getter"}, {"oid": "d09e80eaa5f28f16c7b0266f6969a2d05ce1cb03", "committedDate": "2021-09-30 12:34:02 -0700", "message": "Remove `messageWasDismissedByBackPress` and `lostFocus` to redisplay IAM"}, {"oid": "94c752319da8aeb3785ff04185c75d29ec6d1d29", "committedDate": "2021-10-31 21:23:40 -0700", "message": "Don't create IAMs in unit tests from other IAMs (use JSON only)"}, {"oid": "c3432df6cda5f30f399fce4d59227e2984d3f426", "committedDate": "2021-10-31 21:31:03 -0700", "message": "Add basic `toJSONObject` unit test"}]}, {"oid": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "message": "CodeReview comments", "committedDate": "2020-05-08T22:44:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjcwNQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r423216705", "body": "NICE!", "bodyText": "NICE!", "bodyHTML": "<p dir=\"auto\">NICE!</p>", "author": "mikechoch", "createdAt": "2020-05-11T17:55:06Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +622,130 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                try {\n+                    // Ensure outcome is sent\n+                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);", "originalCommit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 52da333c..9a1e2c27 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -487,533 +437,18 @@ public class InAppMessageIntegrationTests {\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // 4. Call IAM clicked again, ensure a 2nd network call is not made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        OSInAppMessageController.getController().onMessageActionOccurredOnMessage(message, action);\n         assertEquals(3, ShadowOneSignalRestClient.requests.size());\n \n         // Verify clickId was persisted locally\n         Set<String> testClickedMessages = OneSignalPackagePrivateHelper.OneSignalPrefs.getStringSet(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n-                null\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+           OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+           null\n         );\n         assertEquals(1, testClickedMessages.size());\n     }\n \n-    @Test\n-    public void testInAppMessageClickActionOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        assertMeasureOnV2AtIndex(3, \"outcome_name\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomesWithWeight = new JSONArray();\n-        outcomesWithWeight.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        JSONObject actionWithWeight = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomesWithWeight);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertFalse(iamOutcomeRequest.payload.has(\"direct\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-\n-                OneSignal.sendOutcome(\"test\");\n-                try {\n-                    // Ensure outcome is sent\n-                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);\n-                } catch (JSONException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-    }\n-\n-    @Test\n-    public void testOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2() throws Exception {\n-        // Enable IAM v2\n-        preferences = new MockOSSharedPreferences();\n-        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n-        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n-        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n-\n-        OneSignal_setSharedPreferences(preferences);\n-        OneSignal_setTrackerFactory(trackerFactory);\n-        OneSignal_setSessionManager(sessionManager);\n-\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n-\n-        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n-            add(message);\n-        }});\n-\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n-        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n-            @Override\n-            public void inAppMessageClicked(OSInAppMessageAction result) {\n-                lastAction[0] = result;\n-                // Ensure we are on the main thread when running the callback, since the app developer\n-                //   will most likely need to update UI.\n-                assertMainThread();\n-            }\n-        });\n-        threadAndTaskWait();\n-\n-        // Add trigger to make IAM display\n-        OneSignal.addTrigger(\"test_1\", 2);\n-        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n-                new JSONObject() {{\n-                    put(\"id\", \"button_id_123\");\n-                    put(\"name\", \"my_click_name\");\n-                }}\n-        );\n-\n-        // Ensure we fire public callback that In-App was clicked.\n-        assertEquals(lastAction[0].clickName, \"my_click_name\");\n-\n-        OneSignalPackagePrivateHelper.dismissCurrentMessage();\n-\n-        OneSignal.sendOutcome(\"test1\");\n-        try {\n-            // Ensure outcome is sent but with INDIRECT influence from IAM\n-            assertMeasureOnV2AtIndex(5, \"test1\", null, null, new JSONArray().put(message.messageId), new JSONArray());\n-        } catch (JSONException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable influence outcomes\n-        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"weight\", IAM_OUTCOME_WEIGHT);\n-        }});\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n-        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n-\n-        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n-        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Disable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                false\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        // 3. Send IAM action\n-        // With unattributed outcomes disable no outcome request should happen\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // Requests: Param request + Players Request + Click request\n-        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // Enable Outcomes\n-        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n-                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n-                MockOSInfluenceDataRepository.PREFS_OS_UNATTRIBUTED_ENABLED,\n-                true\n-        );\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray outcomes = new JSONArray();\n-        outcomes.put(new JSONObject() {{\n-            put(\"name\", IAM_OUTCOME_NAME);\n-            put(\"unique\", true);\n-        }});\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"outcomes\", outcomes);\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-\n-        // 3. Ensure outcome is sent\n-        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n-        // Requests: Param request + Players Request + Click request + Outcome Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n-        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n-\n-        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        // 5. Check no additional request was made\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        JSONObject objectExpected = new JSONObject() {{\n-            put(IAM_TAG_KEY, \"\");\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-    }\n-\n-    @Test\n-    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n-        // 1. Init OneSignal\n-        OneSignalInit();\n-        threadAndTaskWait();\n-\n-        // 2. Create an IAM\n-        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-                OSTriggerKind.SESSION_TIME,\n-                null,\n-                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-                null\n-        );\n-\n-        final JSONObject addTags = new JSONObject() {{\n-            put(IAM_TAG_KEY, IAM_TAG_KEY);\n-        }};\n-        JSONObject action = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"adds\", addTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n-        threadAndTaskWait();\n-        // 3. Ensure players call is made\n-        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n-\n-        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n-        // Requests: Param request + Players Request + Click request + Tag Request\n-        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n-        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n-\n-        final JSONArray removeTags = new JSONArray();\n-        removeTags.put(IAM_TAG_KEY);\n-        final JSONObject[] lastGetTags = new JSONObject[1];\n-        JSONObject actionRemove = new JSONObject() {{\n-            put(\"id\", IAM_CLICK_ID);\n-            put(\"tags\", new JSONObject() {{\n-                put(\"removes\", removeTags);\n-            }});\n-        }};\n-\n-        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n-        threadAndTaskWait();\n-        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n-            @Override\n-            public void tagsAvailable(JSONObject tags) {\n-                lastGetTags[0] = tags;\n-            }\n-        });\n-        threadAndTaskWait();\n-        // 3. Ensure no tags\n-        assertEquals(1, lastGetTags.length);\n-        assertEquals(0, lastGetTags[0].length());\n-    }\n-\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "1f04f03c11c87990f023c554cfb902e07d850374", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 9a1e2c27..0319b3fe 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -449,6 +478,365 @@ public class InAppMessageIntegrationTests {\n         assertEquals(1, testClickedMessages.size());\n     }\n \n+    @Test\n+    public void testInAppMessageClickActionOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomesWithWeight = new JSONArray();\n+        outcomesWithWeight.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        JSONObject actionWithWeight = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomesWithWeight);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionWithWeight);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionMultipleOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"weight\", IAM_OUTCOME_WEIGHT);\n+        }});\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+        ShadowOneSignalRestClient.Request secondIamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        assertEquals(\"outcomes/measure\", secondIamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request x 2\n+        assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+\n+        assertEquals(IAM_OUTCOME_WEIGHT, iamOutcomeRequest.payload.get(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        assertFalse(secondIamOutcomeRequest.payload.has(\"weight\"));\n+        assertEquals(IAM_OUTCOME_NAME, secondIamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, secondIamOutcomeRequest.payload.get(\"device_type\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionDisabledOutcomes() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Disable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                false\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        // 3. Send IAM action\n+        // With unattributed outcomes disable no outcome request should happen\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // Requests: Param request + Players Request + Click request\n+        assertEquals(3, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(\"in_app_messages/\" + message.messageId + \"/click\", ShadowOneSignalRestClient.requests.get(2).url);\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionUniqueOutcome() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable Outcomes\n+        OneSignalPackagePrivateHelper.OneSignalPrefs.saveBool(\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_ONESIGNAL,\n+                OneSignalPackagePrivateHelper.OneSignalPrefs.PREFS_OS_UNATTRIBUTED_ENABLED,\n+                true\n+        );\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray outcomes = new JSONArray();\n+        outcomes.put(new JSONObject() {{\n+            put(\"name\", IAM_OUTCOME_NAME);\n+            put(\"unique\", true);\n+        }});\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"outcomes\", outcomes);\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+\n+        // 3. Ensure outcome is sent\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"outcomes/measure\", iamOutcomeRequest.url);\n+        // Requests: Param request + Players Request + Click request + Outcome Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        assertEquals(IAM_OUTCOME_NAME, iamOutcomeRequest.payload.get(\"id\"));\n+        assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+\n+        // 4. Call IAM clicked again, ensure no 2nd outcome call is made.\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        // 5. Check no additional request was made\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        OneSignal.sendTags(new JSONObject(\"{\" + IAM_TAG_KEY + \": \\\"value1\\\"}\"));\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        JSONObject objectExpected = new JSONObject() {{\n+            put(IAM_TAG_KEY, \"\");\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(objectExpected, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+    }\n+\n+    @Test\n+    public void testInAppMessageClickActionSendAndRemoveTag() throws Exception {\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // 2. Create an IAM\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null\n+        );\n+\n+        final JSONObject addTags =  new JSONObject() {{\n+            put(IAM_TAG_KEY, IAM_TAG_KEY);\n+        }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"adds\", addTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n+        threadAndTaskWait();\n+        // 3. Ensure players call is made\n+        ShadowOneSignalRestClient.Request iamSendTagRequest = ShadowOneSignalRestClient.requests.get(3);\n+\n+        assertEquals(\"players/a2f7f967-e8cc-11e4-bed1-118f05be4511\", iamSendTagRequest.url);\n+        // Requests: Param request + Players Request + Click request + Tag Request\n+        assertEquals(4, ShadowOneSignalRestClient.requests.size());\n+        JsonAsserts.equals(addTags, (JSONObject) iamSendTagRequest.payload.get(\"tags\"));\n+\n+        final JSONArray removeTags = new JSONArray();\n+        removeTags.put(IAM_TAG_KEY);\n+        final JSONObject[] lastGetTags = new JSONObject[1];\n+        JSONObject actionRemove = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+            put(\"tags\", new JSONObject() {{\n+                put(\"removes\", removeTags);\n+            }});\n+        }};\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, actionRemove);\n+        threadAndTaskWait();\n+        OneSignal.getTags(new OneSignal.GetTagsHandler() {\n+            @Override\n+            public void tagsAvailable(JSONObject tags) {\n+                lastGetTags[0] = tags;\n+            }\n+        });\n+        threadAndTaskWait();\n+        // 3. Ensure no tags\n+        assertEquals(1, lastGetTags.length);\n+        assertEquals(0, lastGetTags[0].length());\n+    }\n+\n     @Test\n     public void testInAppMessageOnlyReceivesOneClick_onColdRestart() throws Exception {\n         // 1. Init OneSignal\n", "next_change": {"commit": "33c17e229ca4c850a153086860349af205492742", "changed_code": [{"header": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex 0319b3fe..c5b4ced4 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n", "chunk": "@@ -845,13 +908,15 @@ public class InAppMessageIntegrationTests {\n \n         // 2. Create an IAM\n         final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n-           OSTriggerKind.SESSION_TIME,\n-           null,\n-           OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n-           null);\n+                OSTriggerKind.SESSION_TIME,\n+                null,\n+                OSTestTrigger.OSTriggerOperator.NOT_EXISTS.toString(),\n+                null);\n \n         // 2. Count IAM as clicked\n-        JSONObject action = new JSONObject() {{ put(\"id\", IAM_CLICK_ID); }};\n+        JSONObject action = new JSONObject() {{\n+            put(\"id\", IAM_CLICK_ID);\n+        }};\n         OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message, action);\n \n         // 3. Cold restart app and re-init OneSignal\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "1e8857ceeaf88711bfa7a690f55c322302a63b62", "message": "Merge commit", "committedDate": null}, {"oid": "4b3fe144c2f6d1c86ddc9ba013124a0a3784ec18", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle changes to the SDK * Current state is about 11 tests failing * Fix all tests first and then move on * Currently created static public builder methods from before to replace the builder attributes"}, {"oid": "a118285dc3415c8a5685e95d8780780af17acae2", "committedDate": "2020-01-28 19:10:26 -0800", "message": "Modified unit tests to handle major release changes in the SDK * No more tests failing now"}, {"oid": "1f04f03c11c87990f023c554cfb902e07d850374", "committedDate": "2020-04-16 13:32:52 -0700", "message": "Checkout from major_release_4.0.0 Merged master into this new branch and resolve conflicts Now will merge this into major_release_4.0.0 and force push"}, {"oid": "93f56d7464f427ac2506c107b5f5be0ec576d96d", "committedDate": "2020-05-04 18:35:39 -0700", "message": "Android x migration (#990)"}, {"oid": "f43e7216ad8f82a2036c331f95dfa3b14416556f", "committedDate": "2020-05-12 10:21:32 -0700", "message": "SQL DB Lock Exception added and IAM Cache Clean (#1007)"}, {"oid": "919bc99abc9578cd6a14883272f02d003ec8490b", "committedDate": "2020-05-14 18:28:42 -0400", "message": "Merging master in major_release_4.0.0"}, {"oid": "33c17e229ca4c850a153086860349af205492742", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Refactor outcomes and add IAM tracking"}, {"oid": "39691a9569fbdb1ae7f869a1b908fbf9ce9d0f5c", "committedDate": "2020-05-21 12:11:09 -0300", "message": "Make IAM influence after IAM dismiss Add click action handler"}, {"oid": "398a4511f6dabaf76e957b2a5f9b2ce297692afd", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Add Huawei Location support"}, {"oid": "af45ea5fe7092949210b5b8eabe92294f68fbe8c", "committedDate": "2020-06-22 13:21:29 -0700", "message": "Create GMS and HMS Loction controller"}, {"oid": "18f87aa9fa7839f0cadb74e75100205d748eeee1", "committedDate": "2020-06-23 11:53:39 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "d279f87a7adbc43fb48ce4ad3147ca944270e209", "committedDate": "2020-07-09 13:55:56 -0400", "message": "Adding testing and runtime dependencies for androidx.work * Added `api 'androidx.work:work-runtime:[2.0.0, 2.99.99]'` for onesignal * Added `testImplementation 'androidx.test:core:1.2.0'` for unittest * Added `testImplementation 'androidx.work:work-testing:2.3.4'` for unittest * Added the `TestHelper` methods for `WorkManager` and `AlarmManager` cleanup/setup   * Added method calls `setupTestWorkManager` and `resetAlarmManager` to `beforeTestInitAndCleanup` for future usage of `Worker` and `WorkManager` class * Also removed deprecated `RuntimeEnvironment.application` usage   * Replaced with `ApplicationProvider.getApplicationContext`"}, {"oid": "a30020ef04cc3cf72bfc4ff5cf777ade860e3bf7", "committedDate": "2020-08-04 15:03:25 -0300", "message": "Add new remote params (#1076)"}, {"oid": "f6b9ca6aa409e0b869ca6ba3a0b0db3e9397a1ca", "committedDate": "2020-08-10 12:03:45 -0300", "message": "Fix SQLiteDatabaseLockedException (#1109)"}, {"oid": "ba801fd71fbe18f0c971623ef565f192f5269438", "committedDate": "2020-08-10 16:13:47 -0300", "message": "Refactor Influence module to Kotlin (#1038)"}, {"oid": "41263133f40e55c89ea4d66f9509a0ae4ef75412", "committedDate": "2020-08-20 10:29:30 -0700", "message": "Fixes IAM NPE with getDisplayPosition"}, {"oid": "54d45987e324196268bef36d079fe8bdfd27c964", "committedDate": "2020-09-08 16:01:37 -0300", "message": "Rename setAppContext to initWithContext (#1133)"}, {"oid": "04eb2b6c5d88936556fc2090168019d7080d5a6d", "committedDate": "2020-09-11 16:36:10 -0300", "message": "Encapsulate OSInAppMessageAction"}, {"oid": "c7004bbb45ae6910b982cf5a52bf2b94a5f24f12", "committedDate": "2020-09-24 14:43:04 -0300", "message": "Fix equal trigger when using number"}, {"oid": "c7a1c42575b54ed53b64ff96fa305b2358b2e693", "committedDate": "2020-09-24 18:04:24 -0300", "message": "Add OS prefix to handlers"}, {"oid": "dd7fc0ed273f6c74e7104e8604834230a38db804", "committedDate": "2020-09-29 15:53:22 -0300", "message": "Fix IAM not being redisplay by SESSION DURATION"}, {"oid": "91e241d9518be978a75ed909714fbaba60cd0279", "committedDate": "2020-09-30 11:26:09 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "83f8857a61002bcdf74e06ff34966956fa749025", "committedDate": "2020-09-30 12:28:56 -0300", "message": "Improve code styling"}, {"oid": "05b05de025f4b3ea6159e9badfba47468bce6c0c", "committedDate": "2020-10-06 12:06:53 -0300", "message": "Make IAM not display under splas screenh when back pressing"}, {"oid": "89a0bc668a545d4dada41e12cb67eeb343946e1c", "committedDate": "2020-10-07 17:24:28 -0300", "message": "Merge branch 'master' into major_release_4.0.0"}, {"oid": "012cdb2ab23c7ed4c5c79a3c3b728029fd754d92", "committedDate": "2020-10-27 20:58:56 -0300", "message": "Enable background player updates"}, {"oid": "1a95a64346cf201c51fe3fc1a6177971167ab307", "committedDate": "2020-11-10 15:16:02 -0300", "message": "Schedule focus delay with service"}, {"oid": "32da4ecc878ac2984583ff69b05b958cf4e49502", "committedDate": "2020-11-20 19:49:26 -0300", "message": "Add remaining consistency changes"}, {"oid": "c475819b393b0c719e75f99e19f413a93a1b0b24", "committedDate": "2020-12-11 14:16:08 -0300", "message": "Fix IAM redisplay multiple times"}, {"oid": "f5cb276a557a53779e64394dadf900b6f3136ce0", "committedDate": "2020-12-21 17:52:02 -0800", "message": "unit tests for IAM end_time logic"}, {"oid": "5e7805b40f80c1fb2947710d286f239469db39ec", "committedDate": "2021-02-22 18:02:24 -0800", "message": "unit test for has_liquid and getTags behavior"}, {"oid": "2b7c56ddbb13b2d369aa7d9ce2d737a316e0f744", "committedDate": "2021-05-01 20:30:37 -0700", "message": "rm AdvertisingIdProviderGPS"}, {"oid": "56c103ec37f49b247795c1ddabd47ebe672781fa", "committedDate": "2021-05-21 12:17:57 -0700", "message": "Force LooperMode.Mode.LEGACY"}, {"oid": "b9376baf1bcc176d40a88a4eb17dda5f3836d0c6", "committedDate": "2021-05-24 01:42:51 -0700", "message": "Correct test clean up order on IAM tests"}, {"oid": "471d43384df891a93658826e99417fad3020700c", "committedDate": "2021-05-24 01:50:35 -0700", "message": "Fix tests that did not wait for IAM to display"}, {"oid": "ab998e56cfd5f645863f2834be1387ce1a8e73b5", "committedDate": "2021-05-24 01:52:38 -0700", "message": "Fix testInAppMessageDisplayMultipleTimes_sessionDurationTrigger flakyness"}, {"oid": "e6afdb80c2d0e10a2eeb3f7e1eb18f04fa655aa2", "committedDate": "2021-05-24 01:59:50 -0700", "message": "Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "050a8efccd2b5aaa95d342061b0c9ddbb8a36083", "committedDate": "2021-05-24 02:02:22 -0700", "message": "Fix testTimedMessageIsDisplayedOncePerSession fackyness"}, {"oid": "0749a242133fb2dfb0bb5b053fa781050c57a07c", "committedDate": "2021-05-24 18:18:22 -0700", "message": "fixup! Fix testAfterLastInAppTimeIsDisplayedOncePerSession flakyness"}, {"oid": "bf3dc4c79dfed436587e21aae5b5cee346bd33d9", "committedDate": "2021-08-09 13:44:11 -0700", "message": "Rename OSInAppMessage to OSInAppMessageInternal"}, {"oid": "af0251eaed9cc07768990de6ae2aab4ea922da0a", "committedDate": "2021-08-16 14:49:25 -0700", "message": "Fixing liquid templating unit test after moving impression request"}, {"oid": "abf4fbb9dd7f1e4c3cbf146c92d462dbf7158751", "committedDate": "2021-08-16 14:53:07 -0700", "message": "making messageId protected instead of public. Adding a getter"}, {"oid": "d09e80eaa5f28f16c7b0266f6969a2d05ce1cb03", "committedDate": "2021-09-30 12:34:02 -0700", "message": "Remove `messageWasDismissedByBackPress` and `lostFocus` to redisplay IAM"}, {"oid": "94c752319da8aeb3785ff04185c75d29ec6d1d29", "committedDate": "2021-10-31 21:23:40 -0700", "message": "Don't create IAMs in unit tests from other IAMs (use JSON only)"}, {"oid": "c3432df6cda5f30f399fce4d59227e2984d3f426", "committedDate": "2021-10-31 21:31:03 -0700", "message": "Add basic `toJSONObject` unit test"}]}, {"oid": "1cdd6a9b7b123010a2cf68e3162ef62117c55385", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/1cdd6a9b7b123010a2cf68e3162ef62117c55385", "message": "Make IAM influence after IAM display, Add click action handler\n\n   * Changes Tests to accomplish new functionality\n   * Minor improvements changes\n   * If the user sends and outcome from the click action handler callback,\n     that outcome should be DIRECT influenced by IAM\n     DIRECT influences by IAM can be from click action handler or click action outcome", "committedDate": "2020-05-11T18:11:32Z", "type": "commit"}, {"oid": "1cdd6a9b7b123010a2cf68e3162ef62117c55385", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/1cdd6a9b7b123010a2cf68e3162ef62117c55385", "message": "Make IAM influence after IAM display, Add click action handler\n\n   * Changes Tests to accomplish new functionality\n   * Minor improvements changes\n   * If the user sends and outcome from the click action handler callback,\n     that outcome should be DIRECT influenced by IAM\n     DIRECT influences by IAM can be from click action handler or click action outcome", "committedDate": "2020-05-11T18:11:32Z", "type": "forcePushed"}]}