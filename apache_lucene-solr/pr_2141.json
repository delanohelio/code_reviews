{"pr_number": 2141, "pr_title": "LUCENE-9346: Support minimumNumberShouldMatch in WANDScorer", "pr_author": "zacharymorn", "pr_createdAt": "2020-12-11T04:04:24Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2141", "timeline": [{"oid": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf", "url": "https://github.com/apache/lucene-solr/commit/9a523f46c3decf1ad4c9e12a59944bd35ff14abf", "message": "LUCENE-9346: Support minimumNumberShouldMatch in WANDScorer", "committedDate": "2020-12-11T04:02:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIzODA3Mw==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r543238073", "body": "```suggestion\r\n        // Do we want to deprecate this entirely now ?\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Do we want to depcate this entirely now ?\n          \n          \n            \n                    // Do we want to deprecate this entirely now ?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Do we want to <span class=\"x x-first x-last\">depcate</span> this entirely now ?</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Do we want to <span class=\"x x-first x-last\">deprecate</span> this entirely now ?</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jbampton", "createdAt": "2020-12-15T10:47:22Z", "path": "lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java", "diffHunk": "@@ -195,10 +201,13 @@ private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n       for (ScorerSupplier scorer : optional) {\n         optionalScorers.add(scorer.get(leadCost));\n       }\n-      if (minShouldMatch > 1) {\n+\n+      if (scoreMode == ScoreMode.TOP_SCORES) {\n+        return new WANDScorer(weight, optionalScorers, minShouldMatch);\n+      } else if (minShouldMatch > 1) {\n+        // nocommit minShouldMath > 1 && scoreMode != ScoreMode.TOP_SCORES still requires MinShouldMatchSumScorer.\n+        // Do we want to depcate this entirely now ?", "originalCommit": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NTU0MQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r549545541", "bodyText": "Fixed. Thanks!", "author": "zacharymorn", "createdAt": "2020-12-29T02:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIzODA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2MjU4OA==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r546262588", "body": "maybe we should make sure the minShouldMatch is not equal either, since it would be better to use the conjunction scorer otherwise?", "bodyText": "maybe we should make sure the minShouldMatch is not equal either, since it would be better to use the conjunction scorer otherwise?", "bodyHTML": "<p dir=\"auto\">maybe we should make sure the minShouldMatch is not equal either, since it would be better to use the conjunction scorer otherwise?</p>", "author": "jpountz", "createdAt": "2020-12-19T17:30:55Z", "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -130,10 +130,19 @@ private static long scaleMinScore(float minScore, int scalingFactor) {\n \n   int upTo; // upper bound for which max scores are valid\n \n-  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n+  int minShouldMatch;\n+  int freq;\n+\n+  WANDScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) throws IOException {\n     super(weight);\n \n+    if (minShouldMatch > scorers.size()) {", "originalCommit": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NTU3NQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r549545575", "bodyText": "Makes sense. I've updated the condition and the exception message.", "author": "zacharymorn", "createdAt": "2020-12-29T02:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2MjU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2MjYzMA==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r546262630", "body": "this line is suspicious, is minShouldMatch ever negative?", "bodyText": "this line is suspicious, is minShouldMatch ever negative?", "bodyHTML": "<p dir=\"auto\">this line is suspicious, is minShouldMatch ever negative?</p>", "author": "jpountz", "createdAt": "2020-12-19T17:31:27Z", "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -130,10 +130,19 @@ private static long scaleMinScore(float minScore, int scalingFactor) {\n \n   int upTo; // upper bound for which max scores are valid\n \n-  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n+  int minShouldMatch;\n+  int freq;\n+\n+  WANDScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) throws IOException {\n     super(weight);\n \n+    if (minShouldMatch > scorers.size()) {\n+      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n+    }\n+\n     this.minCompetitiveScore = 0;\n+    this.minShouldMatch = minShouldMatch > 0 ? minShouldMatch : 0;", "originalCommit": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NTgzNw==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r549545837", "bodyText": "I put it there originally to guard against any accidental invalid negative minShouldMatch being passed in, but yeah it should probably be handled as assertion. I've updated it.", "author": "zacharymorn", "createdAt": "2020-12-29T02:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2MjYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2NTUwNQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r546265505", "body": "Actually I think it's important to merge both loops, in order to stop calling `advanceTail` as soon as possible.\r\n\r\nWithout doing this, your change is still correct, but it doesn't leverage `minShouldMatch` in order to make the query run faster, which is a pity.", "bodyText": "Actually I think it's important to merge both loops, in order to stop calling advanceTail as soon as possible.\nWithout doing this, your change is still correct, but it doesn't leverage minShouldMatch in order to make the query run faster, which is a pity.", "bodyHTML": "<p dir=\"auto\">Actually I think it's important to merge both loops, in order to stop calling <code>advanceTail</code> as soon as possible.</p>\n<p dir=\"auto\">Without doing this, your change is still correct, but it doesn't leverage <code>minShouldMatch</code> in order to make the query run faster, which is a pity.</p>", "author": "jpountz", "createdAt": "2020-12-19T17:59:35Z", "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -271,6 +280,19 @@ public boolean matches() throws IOException {\n             return false;\n           }\n         }\n+\n+        // minCompetitiveScore satisfied, now checks if the doc has enough required number of matches\n+        // Combining this loop with the above makes for complicated conditional checks, so keeping them separate for readability", "originalCommit": "9a523f46c3decf1ad4c9e12a59944bd35ff14abf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NTg1OQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r549545859", "bodyText": "Makes sense. I gave this a second try and actually able to arrive at a clean looking solution. Please let me know if this version looks good.", "author": "zacharymorn", "createdAt": "2020-12-29T02:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2NTUwNQ=="}], "type": "inlineReview"}, {"oid": "45e2277b716a0003858327e329388f658e26e647", "url": "https://github.com/apache/lucene-solr/commit/45e2277b716a0003858327e329388f658e26e647", "message": "Correct typo, and adjust validity checks on minShouldMatch", "committedDate": "2020-12-28T17:58:21Z", "type": "commit"}, {"oid": "bd2f4d3e24a9054fd4ec4ea4bc455eab3e8269d0", "url": "https://github.com/apache/lucene-solr/commit/bd2f4d3e24a9054fd4ec4ea4bc455eab3e8269d0", "message": "Combine min competitive score and min should match loops", "committedDate": "2020-12-28T19:09:36Z", "type": "commit"}, {"oid": "a7b48f03824182e233d773c29d4e62326aefade8", "url": "https://github.com/apache/lucene-solr/commit/a7b48f03824182e233d773c29d4e62326aefade8", "message": "Merge branch 'master' of https://github.com/apache/lucene-solr into LUCENE-9346-WANDScorer-minimumNumberShouldMatch", "committedDate": "2020-12-29T18:30:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNTM5Mw==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550805393", "body": "Actually this bit was correct, we should instead fix WANDScorer to take minShouldMatch into account the same way MinShouldMatchSumScorer does.", "bodyText": "Actually this bit was correct, we should instead fix WANDScorer to take minShouldMatch into account the same way MinShouldMatchSumScorer does.", "bodyHTML": "<p dir=\"auto\">Actually this bit was correct, we should instead fix WANDScorer to take minShouldMatch into account the same way MinShouldMatchSumScorer does.</p>", "author": "jpountz", "createdAt": "2021-01-01T20:49:34Z", "path": "lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java", "diffHunk": "@@ -74,11 +74,13 @@ private long computeCost() {\n       return minRequiredCost.getAsLong();\n     } else {\n       final Collection<ScorerSupplier> optionalScorers = subs.get(Occur.SHOULD);\n-      final long shouldCost =\n-          MinShouldMatchSumScorer.cost(\n-              optionalScorers.stream().mapToLong(ScorerSupplier::cost),\n-              optionalScorers.size(),\n-              minShouldMatch);\n+      // nocommit The cost calculation here copies that in WANDScorer's constructor, and may need to be adjusted?\n+      final long shouldCost = scoreMode == ScoreMode.TOP_SCORES ?\n+                              optionalScorers.stream().mapToLong(ScorerSupplier::cost).sum() :\n+                              MinShouldMatchSumScorer.cost(\n+                                      optionalScorers.stream().mapToLong(ScorerSupplier::cost),\n+                                      optionalScorers.size(),\n+                                      minShouldMatch);", "originalCommit": "a7b48f03824182e233d773c29d4e62326aefade8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NTc2NA==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r552385764", "bodyText": "I see. Previously I wasn't entirely sure about the handling here. I've reverted the related changes and updated WANDScorer to share the same cost function with that of minShouldMatchSumScorer.", "author": "zacharymorn", "createdAt": "2021-01-06T06:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNTM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjcxMQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550806711", "body": "Maybe not now in order to keep this PR contained, but it would be nice if we could handle this case with WANDScorer too indeed.", "bodyText": "Maybe not now in order to keep this PR contained, but it would be nice if we could handle this case with WANDScorer too indeed.", "bodyHTML": "<p dir=\"auto\">Maybe not now in order to keep this PR contained, but it would be nice if we could handle this case with WANDScorer too indeed.</p>", "author": "jpountz", "createdAt": "2021-01-01T21:06:26Z", "path": "lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier.java", "diffHunk": "@@ -230,10 +232,13 @@ private Scorer opt(\n       for (ScorerSupplier scorer : optional) {\n         optionalScorers.add(scorer.get(leadCost));\n       }\n-      if (minShouldMatch > 1) {\n+\n+      if (scoreMode == ScoreMode.TOP_SCORES) {\n+        return new WANDScorer(weight, optionalScorers, minShouldMatch);\n+      } else if (minShouldMatch > 1) {\n+        // nocommit minShouldMath > 1 && scoreMode != ScoreMode.TOP_SCORES still requires MinShouldMatchSumScorer.\n+        // Do we want to deprecate this entirely now ?", "originalCommit": "a7b48f03824182e233d773c29d4e62326aefade8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NTM5NQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r552385395", "bodyText": "Sounds good. I've removed the no commit comment for now, but let me give it a second try in the next few days.", "author": "zacharymorn", "createdAt": "2021-01-06T05:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE1MzY0Nw==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r553153647", "bodyText": "I've taken a second look at this, and had the following thoughts / questions:\nPreviously, in Boolean2ScorerSupplier#opt, the scorer picking logic is\nif (minShouldMatch > 1) {\n  return MinShouldMatchSumScorer...\n} else if (scoreMode == ScoreMode.TOP_SCORES) {\n  return WANDScorer...\n} else {\n  return DisjunctionSumScorer...\n}\n\nWith the current changes in this PR, we now have\nif (scoreMode == ScoreMode.TOP_SCORES) {\n  return WANDScorer...\n} else if (minShouldMatch > 1) {\n  return MinShouldMatchSumScorer...\n} else {\n  return DisjunctionSumScorer...\n}\n\nI noticed that with trivial changes, WANDScorer seems to be usable for all ScoreMode when scoreMode.needsScore == true as well (passed all existing tests with trivial updates). So we can arrive at something like this\nif (scoreMode.needsScore()) {\n  return WANDScorer...\n} else if (minShouldMatch > 1) {\n  return MinShouldMatchSumScorer...\n} else {\n  return DisjunctionSumScorer...\n}\n\nIs there a reason WANDScorer is only used for TOP_DOCS before? I did read up the documentation and discussion in https://issues.apache.org/jira/browse/LUCENE-4100, but it's a bit long so I'm not sure I'm following all the details there.\nFollowing the above, since WANDScorer can already handle the case where minShouldMatch == 0, then I can see MinShouldMatchSumScorer be merged into WANDScorer mostly to handle non-scoring mode, arriving at\nif (?) {\n  return WANDScorer...\n} else {\n  return DisjunctionSumScorer...\n}\n\nAt this point, it actually seems like WANDScorer can handle all the cases already, so DisjunctionSumScorer can be deprecated as well to just return WANDScorer here?\nIs the above the right reasoning of how things would go for the deprecation?", "author": "zacharymorn", "createdAt": "2021-01-07T07:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA3NDg5Mg==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r555074892", "bodyText": "Is there a reason WANDScorer is only used for TOP_DOCS before?\n\nMostly because it's a bit slower since it needs to track two priority queues and one linked list, when the simple DisjunctionScorer only needs to track a single priority queue.\n\nsince WANDScorer can already handle the case where minShouldMatch == 0, then I can see MinShouldMatchSumScorer be merged into WANDScorer mostly to handle non-scoring mode\n\n+1 to give it a try in a follow-up PR!", "author": "jpountz", "createdAt": "2021-01-11T14:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjc2NA==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550806764", "body": "Let's make it final?", "bodyText": "Let's make it final?", "bodyHTML": "<p dir=\"auto\">Let's make it final?</p>", "author": "jpountz", "createdAt": "2021-01-01T21:06:47Z", "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -130,10 +130,21 @@ private static long scaleMinScore(float minScore, int scalingFactor) {\n \n   int upTo; // upper bound for which max scores are valid\n \n-  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n+  int minShouldMatch;", "originalCommit": "a7b48f03824182e233d773c29d4e62326aefade8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NDgwMA==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r552384800", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2021-01-06T05:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNjgzNg==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550806836", "body": "```suggestion\r\n    assert minShouldMatch >= 0 : \"minShouldMatch should not be negative, but got \" + minShouldMatch;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assert minShouldMatch >=0 : \"minShouldMatch should not be negative, but got \" + minShouldMatch;\n          \n          \n            \n                assert minShouldMatch >= 0 : \"minShouldMatch should not be negative, but got \" + minShouldMatch;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">assert</span> minShouldMatch <span class=\"pl-k\">&gt;=</span><span class=\"pl-c1\">0</span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>minShouldMatch should not be negative, but got <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> minShouldMatch;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">assert</span> minShouldMatch <span class=\"pl-k\">&gt;=</span><span class=\"x x-first x-last\"> </span><span class=\"pl-c1\">0</span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>minShouldMatch should not be negative, but got <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> minShouldMatch;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jpountz", "createdAt": "2021-01-01T21:07:31Z", "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -130,10 +130,21 @@ private static long scaleMinScore(float minScore, int scalingFactor) {\n \n   int upTo; // upper bound for which max scores are valid\n \n-  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n+  int minShouldMatch;\n+  int freq;\n+\n+  WANDScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) throws IOException {\n     super(weight);\n \n+    if (minShouldMatch >= scorers.size()) {\n+      throw new IllegalArgumentException(\"minShouldMatch should be < the number of scorers\");\n+    }\n+\n     this.minCompetitiveScore = 0;\n+\n+    assert minShouldMatch >=0 : \"minShouldMatch should not be negative, but got \" + minShouldMatch;", "originalCommit": "a7b48f03824182e233d773c29d4e62326aefade8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNzk3NQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550807975", "body": "Indeed I don't think we need it, but I like doing it so that the approximation doesn't return documents knowing that no match is possible.", "bodyText": "Indeed I don't think we need it, but I like doing it so that the approximation doesn't return documents knowing that no match is possible.", "bodyHTML": "<p dir=\"auto\">Indeed I don't think we need it, but I like doing it so that the approximation doesn't return documents knowing that no match is possible.</p>", "author": "jpountz", "createdAt": "2021-01-01T21:17:15Z", "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -447,6 +461,23 @@ private int doNextCompetitiveCandidate() throws IOException {\n       }\n     }\n \n+      // nocommit Do we still need the following given TwoPhaseIterator.matches already performs the check\n+//     minCompetitiveScore satisfied, now checks if the doc has enough required number of matches", "originalCommit": "a7b48f03824182e233d773c29d4e62326aefade8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NTk1Nw==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r552385957", "bodyText": "Makes sense.", "author": "zacharymorn", "createdAt": "2021-01-06T06:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNzk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODI2NQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r550808265", "body": "I don't think we should advanceTail here, which may be costly. We should just make sure that `freq + tailSize >= minShouldMatch` and otherwise call your `else` block.", "bodyText": "I don't think we should advanceTail here, which may be costly. We should just make sure that freq + tailSize >= minShouldMatch and otherwise call your else block.", "bodyHTML": "<p dir=\"auto\">I don't think we should advanceTail here, which may be costly. We should just make sure that <code>freq + tailSize &gt;= minShouldMatch</code> and otherwise call your <code>else</code> block.</p>", "author": "jpountz", "createdAt": "2021-01-01T21:20:22Z", "path": "lucene/core/src/java/org/apache/lucene/search/WANDScorer.java", "diffHunk": "@@ -447,6 +461,23 @@ private int doNextCompetitiveCandidate() throws IOException {\n       }\n     }\n \n+      // nocommit Do we still need the following given TwoPhaseIterator.matches already performs the check\n+//     minCompetitiveScore satisfied, now checks if the doc has enough required number of matches\n+//    while (freq < minShouldMatch) {\n+//      if (freq + tailSize >= minShouldMatch) {\n+//        // a match on doc is still possible, try to\n+//        // advance scorers from the tail\n+//        advanceTail();", "originalCommit": "a7b48f03824182e233d773c29d4e62326aefade8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NjI2NQ==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r552386265", "bodyText": "Makes sense. I've updated the code to include this check in the while loop condition.", "author": "zacharymorn", "createdAt": "2021-01-06T06:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODI2NQ=="}], "type": "inlineReview"}, {"oid": "37ce166822644baad718293cdbf6df607aa3bcae", "url": "https://github.com/apache/lucene-solr/commit/37ce166822644baad718293cdbf6df607aa3bcae", "message": "Update lucene/core/src/java/org/apache/lucene/search/WANDScorer.java\n\nCo-authored-by: Adrien Grand <jpountz@gmail.com>", "committedDate": "2021-01-05T05:45:51Z", "type": "commit"}, {"oid": "d78897cb166496a47080c344f71bcfb0b50dbebc", "url": "https://github.com/apache/lucene-solr/commit/d78897cb166496a47080c344f71bcfb0b50dbebc", "message": "Make field final, and add tests to exercise minShouldMatch along with minCompetitiveScore, filter and must not configurations", "committedDate": "2021-01-05T19:06:03Z", "type": "commit"}, {"oid": "ddc93f3a3fcf9a72f813dab116e5ae9d0db7ba37", "url": "https://github.com/apache/lucene-solr/commit/ddc93f3a3fcf9a72f813dab116e5ae9d0db7ba37", "message": "Address feedback:\n1. Incorporate MinShouldMatchSumScorer cost caclation into WANDScorer, and revert the changes made to the tests\n2. Add fre + tailSize < minShouldMatch check to doNextCompetitiveCandidate", "committedDate": "2021-01-06T03:47:21Z", "type": "commit"}, {"oid": "3e53bf6e79c5822671fe0e56f5b7edc63abcb2e1", "url": "https://github.com/apache/lucene-solr/commit/3e53bf6e79c5822671fe0e56f5b7edc63abcb2e1", "message": "Fix styling with gradlew :lucene:core:spotlessApply", "committedDate": "2021-01-06T05:56:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk1Njc1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r552956753", "body": "can you keep it pkg-private?", "bodyText": "can you keep it pkg-private?", "bodyHTML": "<p dir=\"auto\">can you keep it pkg-private?</p>", "author": "jpountz", "createdAt": "2021-01-06T20:55:30Z", "path": "lucene/core/src/java/org/apache/lucene/search/ScorerUtil.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.util.stream.LongStream;\n+import java.util.stream.StreamSupport;\n+import org.apache.lucene.util.PriorityQueue;\n+\n+/** Util class for Scorer related methods */\n+public class ScorerUtil {", "originalCommit": "3e53bf6e79c5822671fe0e56f5b7edc63abcb2e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE1MzcxOA==", "url": "https://github.com/apache/lucene-solr/pull/2141#discussion_r553153718", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2021-01-07T07:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk1Njc1Mw=="}], "type": "inlineReview"}, {"oid": "1ba39a077504e7adaddea90ca3ede3891dc40eb3", "url": "https://github.com/apache/lucene-solr/commit/1ba39a077504e7adaddea90ca3ede3891dc40eb3", "message": "Keep ScorerUtil package private", "committedDate": "2021-01-07T06:51:53Z", "type": "commit"}]}