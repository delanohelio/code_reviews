{"pr_number": 10824, "pr_title": "[FLINK-15152][checkpointing] Restatrt CheckpointCoordinator if StopWithSavepoint failed", "pr_author": "klion26", "pr_createdAt": "2020-01-10T08:14:05Z", "pr_url": "https://github.com/apache/flink/pull/10824", "timeline": [{"oid": "7a61978007a5a02723a561ee145d82e2413e51ae", "url": "https://github.com/apache/flink/commit/7a61978007a5a02723a561ee145d82e2413e51ae", "message": "[FLINK-15152][checkpointing] Restatrt CheckpointCoordinator if StopWithSavepoint failed", "committedDate": "2020-01-10T08:10:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2OTU2MA==", "url": "https://github.com/apache/flink/pull/10824#discussion_r365769560", "body": "nit:\r\n1. I think you should be more specific and verify for example exact `CheckpointFailureReason` if this is easy thing to do (otherwise there are higher chances for the test incorrectly passing because of different bug/exception).\r\n2. If the exception is not what you expected, you should just `throw e` it, instead of using `assertThat`, to get an even nicer exception message with a stack trace.", "bodyText": "nit:\n\nI think you should be more specific and verify for example exact CheckpointFailureReason if this is easy thing to do (otherwise there are higher chances for the test incorrectly passing because of different bug/exception).\nIf the exception is not what you expected, you should just throw e it, instead of using assertThat, to get an even nicer exception message with a stack trace.", "bodyHTML": "<p dir=\"auto\">nit:</p>\n<ol dir=\"auto\">\n<li>I think you should be more specific and verify for example exact <code>CheckpointFailureReason</code> if this is easy thing to do (otherwise there are higher chances for the test incorrectly passing because of different bug/exception).</li>\n<li>If the exception is not what you expected, you should just <code>throw e</code> it, instead of using <code>assertThat</code>, to get an even nicer exception message with a stack trace.</li>\n</ol>", "author": "pnowojski", "createdAt": "2020-01-13T12:05:37Z", "path": "flink-tests/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterStopWithSavepointIT.java", "diffHunk": "@@ -194,6 +197,30 @@ private void throwingExceptionOnCallbackWithRestartsHelper(final boolean termina\n \t\tassertThat(getJobStatus(), either(equalTo(JobStatus.CANCELLING)).or(equalTo(JobStatus.CANCELED)));\n \t}\n \n+\t@Test\n+\tpublic void testRestartCheckpointCoordinatorIfStopWithSavepointFails() throws Exception {\n+\t\tsetUpJobGraph(ExceptionOnCallbackStreamTask.class, RestartStrategies.noRestart());\n+\n+\t\ttry {\n+\t\t\tFiles.setPosixFilePermissions(savepointDirectory, Collections.emptySet());\n+\t\t} catch (IOException e) {\n+\t\t\tAssume.assumeNoException(e);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tstopWithSavepoint(true).get();\n+\t\t\tfail();\n+\t\t} catch (Exception e) {\n+\t\t\tassertThat(ExceptionUtils.findThrowable(e, CheckpointException.class).isPresent(), equalTo(true));", "originalCommit": "7a61978007a5a02723a561ee145d82e2413e51ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3NDI4OQ==", "url": "https://github.com/apache/flink/pull/10824#discussion_r365774289", "body": "I'm not sure if this is correct and whether the newly created `checkpointsToWaitFor` is guaranteed to be visible by the `ExceptionOnCallbackStreamTask` instance, as `ExceptionOnCallbackStreamTask`'s thread is instantiated before this line.\r\n\r\nProbably the easiest fix would be to make `checkpointsToWaitFor` `volatile`.", "bodyText": "I'm not sure if this is correct and whether the newly created checkpointsToWaitFor is guaranteed to be visible by the ExceptionOnCallbackStreamTask instance, as ExceptionOnCallbackStreamTask's thread is instantiated before this line.\nProbably the easiest fix would be to make checkpointsToWaitFor volatile.", "bodyHTML": "<p dir=\"auto\">I'm not sure if this is correct and whether the newly created <code>checkpointsToWaitFor</code> is guaranteed to be visible by the <code>ExceptionOnCallbackStreamTask</code> instance, as <code>ExceptionOnCallbackStreamTask</code>'s thread is instantiated before this line.</p>\n<p dir=\"auto\">Probably the easiest fix would be to make <code>checkpointsToWaitFor</code> <code>volatile</code>.</p>", "author": "pnowojski", "createdAt": "2020-01-13T12:18:38Z", "path": "flink-tests/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterStopWithSavepointIT.java", "diffHunk": "@@ -194,6 +197,30 @@ private void throwingExceptionOnCallbackWithRestartsHelper(final boolean termina\n \t\tassertThat(getJobStatus(), either(equalTo(JobStatus.CANCELLING)).or(equalTo(JobStatus.CANCELED)));\n \t}\n \n+\t@Test\n+\tpublic void testRestartCheckpointCoordinatorIfStopWithSavepointFails() throws Exception {\n+\t\tsetUpJobGraph(ExceptionOnCallbackStreamTask.class, RestartStrategies.noRestart());\n+\n+\t\ttry {\n+\t\t\tFiles.setPosixFilePermissions(savepointDirectory, Collections.emptySet());\n+\t\t} catch (IOException e) {\n+\t\t\tAssume.assumeNoException(e);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tstopWithSavepoint(true).get();\n+\t\t\tfail();\n+\t\t} catch (Exception e) {\n+\t\t\tassertThat(ExceptionUtils.findThrowable(e, CheckpointException.class).isPresent(), equalTo(true));\n+\t\t}\n+\n+\t\tfinal JobStatus jobStatus = clusterClient.getJobStatus(jobGraph.getJobID()).get(60, TimeUnit.SECONDS);\n+\t\tassertThat(jobStatus, equalTo(JobStatus.RUNNING));\n+\t\t// assert that checkpoints are continued to be triggered\n+\t\tcheckpointsToWaitFor = new CountDownLatch(1);", "originalCommit": "7a61978007a5a02723a561ee145d82e2413e51ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3NTk2Mw==", "url": "https://github.com/apache/flink/pull/10824#discussion_r365775963", "body": "I think the fact that you are using `ExceptionOnCallbackStreamTask` might be a bit misleading, as as far as I understand, you are doing it only for the `checkpointsToWaitFor` right? And you are ignoring the whole \"exception on notifyCheckpointComplete callback\" part of the `ExceptionOnCallbackStreamTask`?\r\n\r\nIf that's the case, I think it would be better to move/extract the count down latch to a new  \r\n```\r\npublic static class CheckpointCountingTask extends NoOpStreamTask {\r\n}\r\n```\r\nwhich would be just a `NoOpStreamTask` with the the `CountDownLatch`.", "bodyText": "I think the fact that you are using ExceptionOnCallbackStreamTask might be a bit misleading, as as far as I understand, you are doing it only for the checkpointsToWaitFor right? And you are ignoring the whole \"exception on notifyCheckpointComplete callback\" part of the ExceptionOnCallbackStreamTask?\nIf that's the case, I think it would be better to move/extract the count down latch to a new\npublic static class CheckpointCountingTask extends NoOpStreamTask {\n}\n\nwhich would be just a NoOpStreamTask with the the CountDownLatch.", "bodyHTML": "<p dir=\"auto\">I think the fact that you are using <code>ExceptionOnCallbackStreamTask</code> might be a bit misleading, as as far as I understand, you are doing it only for the <code>checkpointsToWaitFor</code> right? And you are ignoring the whole \"exception on notifyCheckpointComplete callback\" part of the <code>ExceptionOnCallbackStreamTask</code>?</p>\n<p dir=\"auto\">If that's the case, I think it would be better to move/extract the count down latch to a new</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public static class CheckpointCountingTask extends NoOpStreamTask {\n}\n\"><pre><code>public static class CheckpointCountingTask extends NoOpStreamTask {\n}\n</code></pre></div>\n<p dir=\"auto\">which would be just a <code>NoOpStreamTask</code> with the the <code>CountDownLatch</code>.</p>", "author": "pnowojski", "createdAt": "2020-01-13T12:23:00Z", "path": "flink-tests/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterStopWithSavepointIT.java", "diffHunk": "@@ -194,6 +197,30 @@ private void throwingExceptionOnCallbackWithRestartsHelper(final boolean termina\n \t\tassertThat(getJobStatus(), either(equalTo(JobStatus.CANCELLING)).or(equalTo(JobStatus.CANCELED)));\n \t}\n \n+\t@Test\n+\tpublic void testRestartCheckpointCoordinatorIfStopWithSavepointFails() throws Exception {\n+\t\tsetUpJobGraph(ExceptionOnCallbackStreamTask.class, RestartStrategies.noRestart());", "originalCommit": "7a61978007a5a02723a561ee145d82e2413e51ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e718b2d4d8b3f4c6f846a72ee0cfe28b7a0ce648", "url": "https://github.com/apache/flink/commit/e718b2d4d8b3f4c6f846a72ee0cfe28b7a0ce648", "message": "[hotfix] make JobMasterStopWithSavepointIT#testRestartCheckpointCoordinatorIfStopWithSavepointFails more strict", "committedDate": "2020-01-15T03:40:16Z", "type": "commit"}, {"oid": "e718b2d4d8b3f4c6f846a72ee0cfe28b7a0ce648", "url": "https://github.com/apache/flink/commit/e718b2d4d8b3f4c6f846a72ee0cfe28b7a0ce648", "message": "[hotfix] make JobMasterStopWithSavepointIT#testRestartCheckpointCoordinatorIfStopWithSavepointFails more strict", "committedDate": "2020-01-15T03:40:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NTQ0Ng==", "url": "https://github.com/apache/flink/pull/10824#discussion_r366875446", "body": "By extracting I meant that `ExceptionOnCallbackStreamTask` could also use this `CheckpointCountingTask` class to avoid some (minor) code duplication. Could you re-use this code in `ExceptionOnCallbackStreamTask`? Make it extend `CheckpointCountingTask` and delegate methods/constructors to `super` calls?", "bodyText": "By extracting I meant that ExceptionOnCallbackStreamTask could also use this CheckpointCountingTask class to avoid some (minor) code duplication. Could you re-use this code in ExceptionOnCallbackStreamTask? Make it extend CheckpointCountingTask and delegate methods/constructors to super calls?", "bodyHTML": "<p dir=\"auto\">By extracting I meant that <code>ExceptionOnCallbackStreamTask</code> could also use this <code>CheckpointCountingTask</code> class to avoid some (minor) code duplication. Could you re-use this code in <code>ExceptionOnCallbackStreamTask</code>? Make it extend <code>CheckpointCountingTask</code> and delegate methods/constructors to <code>super</code> calls?</p>", "author": "pnowojski", "createdAt": "2020-01-15T13:31:31Z", "path": "flink-tests/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterStopWithSavepointIT.java", "diffHunk": "@@ -357,4 +391,36 @@ public void finishTask() throws Exception {\n \t\t\tfinishLatch.trigger();\n \t\t}\n \t}\n+\n+\t/**\n+\t * A {@link StreamTask} that simply calls {@link CountDownLatch#countDown()} when\n+\t * invoking {@link #triggerCheckpointAsync}.\n+\t */\n+\tpublic static class CheckpointCountingTask extends NoOpStreamTask {", "originalCommit": "e718b2d4d8b3f4c6f846a72ee0cfe28b7a0ce648", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNjUyNw==", "url": "https://github.com/apache/flink/pull/10824#discussion_r367226527", "bodyText": "Ok, will update it. previously did not change to this, because I though in CheckpointCountingTask we do not need to distinguish whether this task is in subtask 0 (and can tolerate some code dup in test), but distinguish whether this task is subtask 0 seems has no side effect.", "author": "klion26", "createdAt": "2020-01-16T04:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NTQ0Ng=="}], "type": "inlineReview"}, {"oid": "3b07862f15aaddd2b6d2a0d21cceaba4a1f55f6e", "url": "https://github.com/apache/flink/commit/3b07862f15aaddd2b6d2a0d21cceaba4a1f55f6e", "message": "[hotfix] extract commont logic in JobMasterStopWithSavepointIT#CheckpointCountingTask and ExceptionOnCallbackStreamTask", "committedDate": "2020-01-16T04:11:57Z", "type": "commit"}]}