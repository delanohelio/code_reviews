{"pr_number": 12664, "pr_title": "[FLINK-18238][checkpoint] Emit CancelCheckpointMarker downstream on checkpointState in sync phase of checkpoint on task side", "pr_author": "Myasuka", "pr_createdAt": "2020-06-15T19:08:21Z", "pr_url": "https://github.com/apache/flink/pull/12664", "timeline": [{"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "url": "https://github.com/apache/flink/commit/3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "message": "[FLINK-18238][checkpoint] Emit CancelCheckpointMarker downstream on checkpointState in sync phase of checkpoint on task side", "committedDate": "2020-06-15T19:08:58Z", "type": "commit"}, {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "url": "https://github.com/apache/flink/commit/3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "message": "[FLINK-18238][checkpoint] Emit CancelCheckpointMarker downstream on checkpointState in sync phase of checkpoint on task side", "committedDate": "2020-06-15T19:08:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODIwMw==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440568203", "body": "nit: it should be a separate hotfix commit.", "bodyText": "nit: it should be a separate hotfix commit.", "bodyHTML": "<p dir=\"auto\">nit: it should be a separate hotfix commit.</p>", "author": "zhijiangW", "createdAt": "2020-06-16T03:40:01Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -275,7 +277,7 @@ public void checkpointState(\n \t@Override\n \tpublic void notifyCheckpointComplete(long checkpointId, OperatorChain<?, ?> operatorChain, Supplier<Boolean> isRunning) throws Exception {\n \t\tif (isRunning.get()) {\n-\t\t\tLOG.debug(\"Notification of complete checkpoint for task {}\", taskName);\n+\t\t\tLOG.debug(\"Notification of complete checkpoint {} for task {}\", checkpointId, taskName);", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODIzOQ==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440568239", "body": "ditto:", "bodyText": "ditto:", "bodyHTML": "<p dir=\"auto\">ditto:</p>", "author": "zhijiangW", "createdAt": "2020-06-16T03:40:09Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -291,7 +293,7 @@ public void notifyCheckpointAborted(long checkpointId, OperatorChain<?, ?> opera\n \n \t\tException previousException = null;\n \t\tif (isRunning.get()) {\n-\t\t\tLOG.debug(\"Notification of aborted checkpoint for task {}\", taskName);\n+\t\t\tLOG.debug(\"Notification of aborted checkpoint {} for task {}\", checkpointId, taskName);", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTY3Ng==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440569676", "body": "SubtaskCheckpointCoordinatorImpl -> SubtaskCheckpointCoordinator , so we do not need the transformation", "bodyText": "SubtaskCheckpointCoordinatorImpl -> SubtaskCheckpointCoordinator , so we do not need the transformation", "bodyHTML": "<p dir=\"auto\">SubtaskCheckpointCoordinatorImpl -&gt; SubtaskCheckpointCoordinator , so we do not need the transformation</p>", "author": "zhijiangW", "createdAt": "2020-06-16T03:46:49Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTgwOQ==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440569809", "body": "no need for unaligned mode, the previous deadlock was actually found in alignment mode.", "bodyText": "no need for unaligned mode, the previous deadlock was actually found in alignment mode.", "bodyHTML": "<p dir=\"auto\">no need for unaligned mode, the previous deadlock was actually found in alignment mode.</p>", "author": "zhijiangW", "createdAt": "2020-06-16T03:47:25Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTk1Mw==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440569953", "body": "i guess we do not need to set `stateManager` for the environment", "bodyText": "i guess we do not need to set stateManager for the environment", "bodyHTML": "<p dir=\"auto\">i guess we do not need to set <code>stateManager</code> for the environment</p>", "author": "zhijiangW", "createdAt": "2020-06-16T03:47:58Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MDQ1NA==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440570454", "body": "RecordOrEventCollectingResultPartitionWriter<StreamElement> -> ResultPartitionWriter for simple, also better to split the arguments in separate line because it seems too long line.", "bodyText": "RecordOrEventCollectingResultPartitionWriter -> ResultPartitionWriter for simple, also better to split the arguments in separate line because it seems too long line.", "bodyHTML": "<p dir=\"auto\">RecordOrEventCollectingResultPartitionWriter -&gt; ResultPartitionWriter for simple, also better to split the arguments in separate line because it seems too long line.</p>", "author": "zhijiangW", "createdAt": "2020-06-16T03:50:11Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);\n+\t\tArrayList<Object> recordOrEvents = new ArrayList<>();\n+\t\tStreamElementSerializer<String> stringStreamElementSerializer = new StreamElementSerializer<>(StringSerializer.INSTANCE);\n+\t\tRecordOrEventCollectingResultPartitionWriter<StreamElement> resultPartitionWriter = new RecordOrEventCollectingResultPartitionWriter<>(recordOrEvents, bufferProvider, stringStreamElementSerializer);", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MDkxMw==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440570913", "body": "no need to call `getChannelStateWriter().start`, since the checkpoint will never been actually executed.", "bodyText": "no need to call getChannelStateWriter().start, since the checkpoint will never been actually executed.", "bodyHTML": "<p dir=\"auto\">no need to call <code>getChannelStateWriter().start</code>, since the checkpoint will never been actually executed.</p>", "author": "zhijiangW", "createdAt": "2020-06-16T03:52:09Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);\n+\t\tArrayList<Object> recordOrEvents = new ArrayList<>();\n+\t\tStreamElementSerializer<String> stringStreamElementSerializer = new StreamElementSerializer<>(StringSerializer.INSTANCE);\n+\t\tRecordOrEventCollectingResultPartitionWriter<StreamElement> resultPartitionWriter = new RecordOrEventCollectingResultPartitionWriter<>(recordOrEvents, bufferProvider, stringStreamElementSerializer);\n+\t\tmockEnvironment.addOutputs(Collections.singletonList(resultPartitionWriter));\n+\n+\t\tOneInputStreamTask<String, String> task = testHarness.getTask();\n+\t\tfinal OperatorChain<String, OneInputStreamOperator<String, String>> operatorChain = new OperatorChain<>(task, StreamTask.createRecordWriterDelegate(streamConfig, mockEnvironment));\n+\t\tlong checkpointId = 42L;\n+\t\t// notify checkpoint aborted before execution.\n+\t\tsubtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, () -> true);\n+\t\tsubtaskCheckpointCoordinator.getChannelStateWriter().start(checkpointId, CheckpointOptions.forCheckpointWithDefaultLocation());", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3ODU1MQ==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440578551", "body": "nit: separate line for every argument", "bodyText": "nit: separate line for every argument", "bodyHTML": "<p dir=\"auto\">nit: separate line for every argument</p>", "author": "zhijiangW", "createdAt": "2020-06-16T04:25:50Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3ODkyMQ==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440578921", "body": "it seems a bit inconsistent that only some variables with `final` decoration, better to unify it either use it or not.", "bodyText": "it seems a bit inconsistent that only some variables with final decoration, better to unify it either use it or not.", "bodyHTML": "<p dir=\"auto\">it seems a bit inconsistent that only some variables with <code>final</code> decoration, better to unify it either use it or not.</p>", "author": "zhijiangW", "createdAt": "2020-06-16T04:27:11Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);\n+\t\tArrayList<Object> recordOrEvents = new ArrayList<>();\n+\t\tStreamElementSerializer<String> stringStreamElementSerializer = new StreamElementSerializer<>(StringSerializer.INSTANCE);\n+\t\tRecordOrEventCollectingResultPartitionWriter<StreamElement> resultPartitionWriter = new RecordOrEventCollectingResultPartitionWriter<>(recordOrEvents, bufferProvider, stringStreamElementSerializer);\n+\t\tmockEnvironment.addOutputs(Collections.singletonList(resultPartitionWriter));\n+\n+\t\tOneInputStreamTask<String, String> task = testHarness.getTask();\n+\t\tfinal OperatorChain<String, OneInputStreamOperator<String, String>> operatorChain = new OperatorChain<>(task, StreamTask.createRecordWriterDelegate(streamConfig, mockEnvironment));", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MTY2Mg==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440581662", "body": "nit: only 1 buffer is enough for this case. `Integer.MAX_VALUE` might bring some memory concerns if we change the implementation of `TestPooledBufferProvider` future. E.g. if we allocate the buffer early during constructor based on the size.", "bodyText": "nit: only 1 buffer is enough for this case. Integer.MAX_VALUE might bring some memory concerns if we change the implementation of TestPooledBufferProvider future. E.g. if we allocate the buffer early during constructor based on the size.", "bodyHTML": "<p dir=\"auto\">nit: only 1 buffer is enough for this case. <code>Integer.MAX_VALUE</code> might bring some memory concerns if we change the implementation of <code>TestPooledBufferProvider</code> future. E.g. if we allocate the buffer early during constructor based on the size.</p>", "author": "zhijiangW", "createdAt": "2020-06-16T04:39:00Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MjM2Nw==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440582367", "body": "testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase -> testBroadcastCancelCheckpointMarkerOnAbortingFromCoordinator?", "bodyText": "testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase -> testBroadcastCancelCheckpointMarkerOnAbortingFromCoordinator?", "bodyHTML": "<p dir=\"auto\">testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase -&gt; testBroadcastCancelCheckpointMarkerOnAbortingFromCoordinator?</p>", "author": "zhijiangW", "createdAt": "2020-06-16T04:41:51Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NzMwMQ==", "url": "https://github.com/apache/flink/pull/12664#discussion_r440597301", "body": "We should make sure the internal task thread inside `StreamTaskTestHarness` exit at last to avoid remaining thread after test finishes?", "bodyText": "We should make sure the internal task thread inside StreamTaskTestHarness exit at last to avoid remaining thread after test finishes?", "bodyHTML": "<p dir=\"auto\">We should make sure the internal task thread inside <code>StreamTaskTestHarness</code> exit at last to avoid remaining thread after test finishes?</p>", "author": "zhijiangW", "createdAt": "2020-06-16T05:38:49Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);\n+\t\tArrayList<Object> recordOrEvents = new ArrayList<>();\n+\t\tStreamElementSerializer<String> stringStreamElementSerializer = new StreamElementSerializer<>(StringSerializer.INSTANCE);\n+\t\tRecordOrEventCollectingResultPartitionWriter<StreamElement> resultPartitionWriter = new RecordOrEventCollectingResultPartitionWriter<>(recordOrEvents, bufferProvider, stringStreamElementSerializer);\n+\t\tmockEnvironment.addOutputs(Collections.singletonList(resultPartitionWriter));\n+\n+\t\tOneInputStreamTask<String, String> task = testHarness.getTask();\n+\t\tfinal OperatorChain<String, OneInputStreamOperator<String, String>> operatorChain = new OperatorChain<>(task, StreamTask.createRecordWriterDelegate(streamConfig, mockEnvironment));\n+\t\tlong checkpointId = 42L;\n+\t\t// notify checkpoint aborted before execution.\n+\t\tsubtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, () -> true);\n+\t\tsubtaskCheckpointCoordinator.getChannelStateWriter().start(checkpointId, CheckpointOptions.forCheckpointWithDefaultLocation());\n+\t\tsubtaskCheckpointCoordinator.checkpointState(\n+\t\t\tnew CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n+\t\t\tCheckpointOptions.forCheckpointWithDefaultLocation(),\n+\t\t\tnew CheckpointMetrics(),\n+\t\t\toperatorChain,\n+\t\t\t() -> true);\n+\n+\t\tassertEquals(1, recordOrEvents.size());\n+\t\tObject recordOrEvent = recordOrEvents.get(0);\n+\t\t// ensure CancelCheckpointMarker is broadcast downstream.\n+\t\tassertTrue(recordOrEvent instanceof CancelCheckpointMarker);\n+\t\tassertEquals(checkpointId, ((CancelCheckpointMarker) recordOrEvent).getCheckpointId());\n+\t}", "originalCommit": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "800fe871cc016061a9550631ba0c8c851c0ce5fd", "url": "https://github.com/apache/flink/commit/800fe871cc016061a9550631ba0c8c851c0ce5fd", "message": "address comments", "committedDate": "2020-06-16T07:53:19Z", "type": "commit"}, {"oid": "a957bc1c408754ae827854b6ec3cd43b8d2710bc", "url": "https://github.com/apache/flink/commit/a957bc1c408754ae827854b6ec3cd43b8d2710bc", "message": "address missing comments", "committedDate": "2020-06-16T11:11:38Z", "type": "commit"}]}