{"pr_number": 12074, "pr_title": "[FLINK-17606][table] Introduce DataGenerator connector in table", "pr_author": "JingsongLi", "pr_createdAt": "2020-05-11T07:22:04Z", "pr_url": "https://github.com/apache/flink/pull/12074", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzNjUxOQ==", "url": "https://github.com/apache/flink/pull/12074#discussion_r424836519", "body": "```suggestion\r\n * A data generator source that abstract data generator. It can be used to easy startup/test\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A data generator source that abstract data generator. It can used to easy startup/test\n          \n          \n            \n             * A data generator source that abstract data generator. It can be used to easy startup/test", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> data generator source that <span class=\"pl-k\">abstract</span> data generator. <span class=\"pl-smi\">It</span> can used to easy startup<span class=\"pl-k\">/</span>test</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> data generator source that <span class=\"pl-k\">abstract</span> data generator. <span class=\"pl-smi\">It</span> can <span class=\"x x-first x-last\">be </span>used to easy startup<span class=\"pl-k\">/</span>test</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zjuwangg", "createdAt": "2020-05-14T02:30:57Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/datagen/DataGeneratorSource.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source.datagen;\n+\n+import org.apache.flink.annotation.Experimental;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.runtime.state.FunctionSnapshotContext;\n+import org.apache.flink.streaming.api.checkpoint.CheckpointedFunction;\n+import org.apache.flink.streaming.api.functions.source.RichParallelSourceFunction;\n+\n+/**\n+ * A data generator source that abstract data generator. It can used to easy startup/test", "originalCommit": "0fb435bee16969f02c3ebee46beee75c2b8c074a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0MTk2Nw==", "url": "https://github.com/apache/flink/pull/12074#discussion_r424841967", "body": "Seems strange indent?", "bodyText": "Seems strange indent?", "bodyHTML": "<p dir=\"auto\">Seems strange indent?</p>", "author": "zjuwangg", "createdAt": "2020-05-14T02:53:07Z", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/sources/datagen/DataGenTableSourceFactory.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.sources.datagen;\n+\n+import org.apache.flink.annotation.Experimental;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.ConfigOptions.OptionBuilder;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.ReadableConfig;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.streaming.api.functions.source.datagen.RandomGenerator;\n+import org.apache.flink.streaming.api.functions.source.datagen.SequenceGenerator;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.connector.source.DynamicTableSource;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.factories.DynamicTableSourceFactory;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.utils.TableSchemaUtils;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+\n+/**\n+ * Factory for creating configured instances of {@link DataGenTableSource} in a stream environment.\n+ */\n+@Experimental\n+public class DataGenTableSourceFactory implements DynamicTableSourceFactory {\n+\n+\tpublic static final String IDENTIFIER = \"datagen\";\n+\n+\tpublic static final ConfigOption<Long> ROWS_PER_SECOND =\n+\t\t\tkey(\"rows-per-second\")", "originalCommit": "0fb435bee16969f02c3ebee46beee75c2b8c074a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NjgxMA==", "url": "https://github.com/apache/flink/pull/12074#discussion_r424846810", "body": "Will there be  a performance problem to collect all elements in advance? \r\nFor example, the parallelism of source is one and the totalNoOfElements is a big number", "bodyText": "Will there be  a performance problem to collect all elements in advance?\nFor example, the parallelism of source is one and the totalNoOfElements is a big number", "bodyHTML": "<p dir=\"auto\">Will there be  a performance problem to collect all elements in advance?<br>\nFor example, the parallelism of source is one and the totalNoOfElements is a big number</p>", "author": "zjuwangg", "createdAt": "2020-05-14T03:13:29Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/datagen/SequenceGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source.datagen;\n+\n+import org.apache.flink.annotation.Experimental;\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.api.common.state.ListState;\n+import org.apache.flink.api.common.state.ListStateDescriptor;\n+import org.apache.flink.api.common.typeutils.base.LongSerializer;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.runtime.state.FunctionSnapshotContext;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+/**\n+ * A stateful, re-scalable {@link DataGenerator} that emits each number from a given interval\n+ * exactly once, possibly in parallel.\n+ */\n+@Experimental\n+public abstract class SequenceGenerator<T> implements DataGenerator<T> {\n+\n+\tprivate final long start;\n+\tprivate final long end;\n+\n+\tprivate transient ListState<Long> checkpointedState;\n+\tprotected transient Deque<Long> valuesToEmit;\n+\n+\t/**\n+\t * Creates a DataGenerator that emits all numbers from the given interval exactly once.\n+\t *\n+\t * @param start Start of the range of numbers to emit.\n+\t * @param end End of the range of numbers to emit.\n+\t */\n+\tpublic SequenceGenerator(long start, long end) {\n+\t\tthis.start = start;\n+\t\tthis.end = end;\n+\t}\n+\n+\t@Override\n+\tpublic void open(\n+\t\t\tString name,\n+\t\t\tFunctionInitializationContext context,\n+\t\t\tRuntimeContext runtimeContext) throws Exception {\n+\t\tPreconditions.checkState(this.checkpointedState == null,\n+\t\t\t\t\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n+\n+\t\tthis.checkpointedState = context.getOperatorStateStore().getListState(\n+\t\t\t\tnew ListStateDescriptor<>(\n+\t\t\t\t\t\tname + \"-sequence-state\",\n+\t\t\t\t\t\tLongSerializer.INSTANCE));\n+\t\tthis.valuesToEmit = new ArrayDeque<>();\n+\t\tif (context.isRestored()) {\n+\t\t\t// upon restoring\n+\n+\t\t\tfor (Long v : this.checkpointedState.get()) {\n+\t\t\t\tthis.valuesToEmit.add(v);\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// the first time the job is executed\n+\t\t\tfinal int stepSize = runtimeContext.getNumberOfParallelSubtasks();\n+\t\t\tfinal int taskIdx = runtimeContext.getIndexOfThisSubtask();\n+\t\t\tfinal long congruence = start + taskIdx;\n+\n+\t\t\tlong totalNoOfElements = Math.abs(end - start + 1);\n+\t\t\tfinal int baseSize = safeDivide(totalNoOfElements, stepSize);\n+\t\t\tfinal int toCollect = (totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n+\n+\t\t\tfor (long collected = 0; collected < toCollect; collected++) {", "originalCommit": "0fb435bee16969f02c3ebee46beee75c2b8c074a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MzE3NQ==", "url": "https://github.com/apache/flink/pull/12074#discussion_r424893175", "bodyText": "Yes, this is the same mechanism to StatefulSequenceSource, it is hard to modify, we can leave this improvement to future.", "author": "JingsongLi", "createdAt": "2020-05-14T06:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NjgxMA=="}], "type": "inlineReview"}, {"oid": "ef7b6e2f25f330eb10dfa0d39f81daba85cddb58", "url": "https://github.com/apache/flink/commit/ef7b6e2f25f330eb10dfa0d39f81daba85cddb58", "message": "[FLINK-17606][table] Introduce DataGenerator connector in table", "committedDate": "2020-05-15T02:23:56Z", "type": "commit"}, {"oid": "ef7b6e2f25f330eb10dfa0d39f81daba85cddb58", "url": "https://github.com/apache/flink/commit/ef7b6e2f25f330eb10dfa0d39f81daba85cddb58", "message": "[FLINK-17606][table] Introduce DataGenerator connector in table", "committedDate": "2020-05-15T02:23:56Z", "type": "forcePushed"}]}