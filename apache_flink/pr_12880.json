{"pr_number": 12880, "pr_title": "[FLINK-18555][table sql/api] Make TableConfig options can be configur\u2026", "pr_author": "fsk119", "pr_createdAt": "2020-07-13T08:49:24Z", "pr_url": "https://github.com/apache/flink/pull/12880", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5NzQ3NA==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460697474", "body": "What about to use `(system-default)` here? It will be more like a system default value like `(none)`.  \r\nBesides, please store the \"(system-default)\" in a static final variable. ", "bodyText": "What about to use (system-default) here? It will be more like a system default value like (none).\nBesides, please store the \"(system-default)\" in a static final variable.", "bodyHTML": "<p dir=\"auto\">What about to use <code>(system-default)</code> here? It will be more like a system default value like <code>(none)</code>.<br>\nBesides, please store the \"(system-default)\" in a static final variable.</p>", "author": "wuchong", "createdAt": "2020-07-27T07:30:54Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "diffHunk": "@@ -51,4 +52,24 @@ private TableConfigOptions() {}\n \t\t\t.withDescription(\"The SQL dialect defines how to parse a SQL query. \" +\n \t\t\t\t\t\"A different SQL dialect may support different SQL grammar. \" +\n \t\t\t\t\t\"Currently supported dialects are: default and hive\");\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.BATCH_STREAMING)\n+\tpublic static final ConfigOption<String> LOCAL_TIME_ZONE = key(\"table.local-time-zone\")\n+\t\t\t.stringType()\n+\t\t\t// special value to decide whether to use ZoneId.systemDefault() in TableConfig.getLocalTimeZone()\n+\t\t\t.defaultValue(\"System\")", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMzc5OQ==", "url": "https://github.com/apache/flink/pull/12880#discussion_r464833799", "bodyText": "I think it would be better to use \"default\" as the default value here. Because this is very easy to understand literally and table.sql-dialect also uses it.", "author": "wuchong", "createdAt": "2020-08-04T06:45:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5NzQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMDY0NA==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460700644", "body": "Move this before `Source Options`? And add comment `State Options` on it?", "bodyText": "Move this before Source Options? And add comment State Options on it?", "bodyHTML": "<p dir=\"auto\">Move this before <code>Source Options</code>? And add comment <code>State Options</code> on it?</p>", "author": "wuchong", "createdAt": "2020-07-27T07:37:19Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "diffHunk": "@@ -49,6 +51,15 @@\n \t\t\t\t\"tasks to advance their watermarks without the need to wait for \" +\n \t\t\t\t\"watermarks from this source while it is idle.\");\n \n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.STREAMING)\n+\tpublic static final ConfigOption<Duration> IDLE_STATE_RETENTION =\n+\t\tkey(\"table.exec.state.ttl\")\n+\t\t\t.durationType()\n+\t\t\t.defaultValue(Duration.ofMillis(0))\n+\t\t\t.withDescription(\"A time-to-live (TTL) can be assigned to the keyed state of any type. \" +\n+\t\t\t\t\"If a TTL is configured and a state value has expired, \" +\n+\t\t\t\t\"the stored value will be cleaned up on a best effort basis.\");\n+", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMTQ5OQ==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460701499", "bodyText": "Add description for default value, for example: Default is 0 (zero) which will never clean-up state.", "author": "wuchong", "createdAt": "2020-07-27T07:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMDY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMjgxMg==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460702812", "body": "Add deprecate javadoc on this method, and suggest to use which method instead. ", "bodyText": "Add deprecate javadoc on this method, and suggest to use which method instead.", "bodyHTML": "<p dir=\"auto\">Add deprecate javadoc on this method, and suggest to use which method instead.</p>", "author": "wuchong", "createdAt": "2020-07-27T07:41:34Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -274,9 +263,10 @@ public void setMaxGeneratedCodeLength(Integer maxGeneratedCodeLength) {\n \t *\n \t * @param minTime The minimum time interval for which idle state is retained. Set to 0 (zero) to\n \t *                never clean-up the state.\n-\t * @param maxTime The maximum time interval for which idle state is retained. Must be at least\n-\t *                5 minutes greater than minTime. Set to 0 (zero) to never clean-up the state.\n+\t * @param maxTime Currently maxTime will be ignored and it will automatically derived from minTime\n+\t *                as 1.5 x minTime.\n \t */\n+\t@Deprecated", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMzg2Nw==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460703867", "body": "Remove the NOTE.", "bodyText": "Remove the NOTE.", "bodyHTML": "<p dir=\"auto\">Remove the NOTE.</p>", "author": "wuchong", "createdAt": "2020-07-27T07:43:41Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNDU2Ng==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460704566", "body": "I prefer to use the same method as before `setIdleStateRetentionTime` or without the `Time`/`Duration` suffix. ", "bodyText": "I prefer to use the same method as before setIdleStateRetentionTime or without the Time/Duration suffix.", "bodyHTML": "<p dir=\"auto\">I prefer to use the same method as before <code>setIdleStateRetentionTime</code> or without the <code>Time</code>/<code>Duration</code> suffix.</p>", "author": "wuchong", "createdAt": "2020-07-27T07:45:03Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.\n+\t *\n+\t * @param duration The retention time interval for which idle state is retained. Set to 0 (zero) to\n+\t *                never clean-up the state.\n+\t */\n+\tpublic void setIdleStateRetentionDuration(Duration duration){", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3OTA3MA==", "url": "https://github.com/apache/flink/pull/12880#discussion_r465679070", "bodyText": "If we use the same function name with different parametere list, it will get strange thing on python side. We can only use one of the setIdleStateRetentionTime in python. So the only option is to use the method name setIdleStateRetention", "author": "fsk119", "createdAt": "2020-08-05T12:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNDU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTM1MA==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460705350", "body": "The member variables `minIdleStateRetentionTime`, `maxIdleStateRetentionTime` can be removed? ", "bodyText": "The member variables minIdleStateRetentionTime, maxIdleStateRetentionTime can be removed?", "bodyHTML": "<p dir=\"auto\">The member variables <code>minIdleStateRetentionTime</code>, <code>maxIdleStateRetentionTime</code> can be removed?</p>", "author": "wuchong", "createdAt": "2020-07-27T07:46:37Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwOTUzMQ==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460709531", "body": "```suggestion\r\n\t * State will never be cleared until it was idle for less than the retention time and will be cleared on a best effort basis after the retention time.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * State will never be cleared until it was idle for less than the retention time and will never\n          \n          \n            \n            \t * be kept if it was idle for more than the 1.5 * retention time.\n          \n          \n            \n            \t * State will never be cleared until it was idle for less than the retention time and will be cleared on a best effort basis after the retention time.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> <span class=\"pl-smi\">State</span> will never be cleared until it was idle <span class=\"pl-k\">for</span> less than the retention time and will never</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> be kept <span class=\"pl-k\">if</span> it was idle <span class=\"pl-k\">for</span> more than the <span class=\"pl-c1\">1.5</span> <span class=\"pl-k\">*</span> retention time.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t <span class=\"pl-k\">*</span> <span class=\"pl-smi\">State</span> will never be cleared until it was idle <span class=\"pl-k\">for</span> less than the retention time and will be cleared on a best effort basis after the retention time.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "wuchong", "createdAt": "2020-07-27T07:54:29Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwOTkyMw==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460709923", "body": "Add a `@see` comment:\r\n\r\n```\r\n* @see org.apache.flink.api.common.state.StateTtlConfig\r\n```\r\n\r\n", "bodyText": "Add a @see comment:\n* @see org.apache.flink.api.common.state.StateTtlConfig", "bodyHTML": "<p dir=\"auto\">Add a <code>@see</code> comment:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"* @see org.apache.flink.api.common.state.StateTtlConfig\n\"><pre><code>* @see org.apache.flink.api.common.state.StateTtlConfig\n</code></pre></div>", "author": "wuchong", "createdAt": "2020-07-27T07:55:11Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.\n+\t *\n+\t * @param duration The retention time interval for which idle state is retained. Set to 0 (zero) to\n+\t *                never clean-up the state.", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzE4MA==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460713180", "body": "I would suggest to keep the original description for `maxTime`, but add a NOTE to explain the `maxTime` is ignored now and is inferred from `minTime` with a 1.5 multiplier. ", "bodyText": "I would suggest to keep the original description for maxTime, but add a NOTE to explain the maxTime is ignored now and is inferred from minTime with a 1.5 multiplier.", "bodyHTML": "<p dir=\"auto\">I would suggest to keep the original description for <code>maxTime</code>, but add a NOTE to explain the <code>maxTime</code> is ignored now and is inferred from <code>minTime</code> with a 1.5 multiplier.</p>", "author": "wuchong", "createdAt": "2020-07-27T08:01:25Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -274,9 +263,10 @@ public void setMaxGeneratedCodeLength(Integer maxGeneratedCodeLength) {\n \t *\n \t * @param minTime The minimum time interval for which idle state is retained. Set to 0 (zero) to\n \t *                never clean-up the state.\n-\t * @param maxTime The maximum time interval for which idle state is retained. Must be at least\n-\t *                5 minutes greater than minTime. Set to 0 (zero) to never clean-up the state.\n+\t * @param maxTime Currently maxTime will be ignored and it will automatically derived from minTime", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTY4Mw==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460715683", "body": "```suggestion\r\n\t\t\t\t\"<code>TIMESTAMP WITH LOCAL TIME ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\"TIMESTAMP_WITH_LOCAL_TIME_ZONE. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\n          \n          \n            \n            \t\t\t\t\"<code>TIMESTAMP WITH LOCAL TIME ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">TIMESTAMP_WITH_LOCAL_TIME_ZONE</span>. Internally, timestamps with local time zone are always represented in the UTC time zone. <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">&lt;code&gt;TIMESTAMP WITH LOCAL TIME ZONE&lt;/code&gt;</span>. Internally, timestamps with local time zone are always represented in the UTC time zone. <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "wuchong", "createdAt": "2020-07-27T08:06:23Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "diffHunk": "@@ -51,4 +52,24 @@ private TableConfigOptions() {}\n \t\t\t.withDescription(\"The SQL dialect defines how to parse a SQL query. \" +\n \t\t\t\t\t\"A different SQL dialect may support different SQL grammar. \" +\n \t\t\t\t\t\"Currently supported dialects are: default and hive\");\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.BATCH_STREAMING)\n+\tpublic static final ConfigOption<String> LOCAL_TIME_ZONE = key(\"table.local-time-zone\")\n+\t\t\t.stringType()\n+\t\t\t// special value to decide whether to use ZoneId.systemDefault() in TableConfig.getLocalTimeZone()\n+\t\t\t.defaultValue(\"System\")\n+\t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\n+\t\t\t\t\"TIMESTAMP_WITH_LOCAL_TIME_ZONE. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxODAyMQ==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460718021", "body": "I think we should avoid use the Java reflection here, otherwise, it's hard to maintain when TableConfig is refactored again in the future. \r\n\r\nI think we don't have much tests here, we can have a test for each method/option. ", "bodyText": "I think we should avoid use the Java reflection here, otherwise, it's hard to maintain when TableConfig is refactored again in the future.\nI think we don't have much tests here, we can have a test for each method/option.", "bodyHTML": "<p dir=\"auto\">I think we should avoid use the Java reflection here, otherwise, it's hard to maintain when TableConfig is refactored again in the future.</p>\n<p dir=\"auto\">I think we don't have much tests here, we can have a test for each method/option.</p>", "author": "wuchong", "createdAt": "2020-07-27T08:11:02Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.api;\n+\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests for {@link TableConfig}.\n+ */\n+public class TableConfigTest {\n+\t@Test\n+\tpublic void testGetAndSetTableConfigOptions() throws Exception{\n+\t\tClass<?> configClass = TableConfig.class;\n+\t\tTableConfig config = new TableConfig();\n+\t\tfor (TestSpec<?> spec: testSpecList){\n+\t\t\tconfigClass.getMethod(\"set\" + spec.fieldName, spec.inputClass).invoke(config, spec.inputValue);\n+\t\t\tassertEquals(spec.expectedValue, configClass.getMethod(\"get\" + spec.fieldName).invoke(config));", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxODE3Nw==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460718177", "body": "Please also test the string option. ", "bodyText": "Please also test the string option.", "bodyHTML": "<p dir=\"auto\">Please also test the string option.</p>", "author": "wuchong", "createdAt": "2020-07-27T08:11:20Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.api;\n+\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests for {@link TableConfig}.\n+ */\n+public class TableConfigTest {\n+\t@Test\n+\tpublic void testGetAndSetTableConfigOptions() throws Exception{\n+\t\tClass<?> configClass = TableConfig.class;\n+\t\tTableConfig config = new TableConfig();\n+\t\tfor (TestSpec<?> spec: testSpecList){\n+\t\t\tconfigClass.getMethod(\"set\" + spec.fieldName, spec.inputClass).invoke(config, spec.inputValue);\n+\t\t\tassertEquals(spec.expectedValue, configClass.getMethod(\"get\" + spec.fieldName).invoke(config));\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAndSetIdleStateRetentionDuration(){\n+\t\tTableConfig config = new TableConfig();\n+\t\tconfig.setIdleStateRetentionDuration(Duration.ofHours(1));\n+\t\tassertEquals(Duration.ofHours(1).toMillis(), config.getMinIdleStateRetentionTime());\n+\t\tassertEquals(Duration.ofHours(1).toMillis() * 3 / 2, config.getMaxIdleStateRetentionTime());", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxOTY2MQ==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460719661", "body": "Add a new method `getIdleStateRetentionTime` and deprecate `getMinIdleStateRetentionTime` and `getMaxIdleStateRetentionTime`.", "bodyText": "Add a new method getIdleStateRetentionTime and deprecate getMinIdleStateRetentionTime and getMaxIdleStateRetentionTime.", "bodyHTML": "<p dir=\"auto\">Add a new method <code>getIdleStateRetentionTime</code> and deprecate <code>getMinIdleStateRetentionTime</code> and <code>getMaxIdleStateRetentionTime</code>.</p>", "author": "wuchong", "createdAt": "2020-07-27T08:14:10Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.\n+\t *\n+\t * @param duration The retention time interval for which idle state is retained. Set to 0 (zero) to\n+\t *                never clean-up the state.\n+\t */\n+\tpublic void setIdleStateRetentionDuration(Duration duration){\n+\t\tconfiguration.set(ExecutionConfigOptions.IDLE_STATE_RETENTION, duration);\n \t}\n \n \t/**\n \t * @return The minimum time until state which was not updated will be retained.\n \t */\n \tpublic long getMinIdleStateRetentionTime() {", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyMDE5Mw==", "url": "https://github.com/apache/flink/pull/12880#discussion_r460720193", "body": "Please use the new method `setIdleStateRetentionTime` to set idle state in tests. ", "bodyText": "Please use the new method setIdleStateRetentionTime to set idle state in tests.", "bodyHTML": "<p dir=\"auto\">Please use the new method <code>setIdleStateRetentionTime</code> to set idle state in tests.</p>", "author": "wuchong", "createdAt": "2020-07-27T08:15:11Z", "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "diffHunk": "@@ -63,7 +63,7 @@ public void testAppendStreamDoesNotOverwriteTableConfig() {\n \t\t\tequalTo(minRetention.toMilliseconds()));\n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMaxIdleStateRetentionTime(),\n-\t\t\tequalTo(maxRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMilliseconds() * 3 / 2));", "originalCommit": "05fede7e394cf0d1a7ba614d1411fa15141c3c65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2NzU4Mw==", "url": "https://github.com/apache/flink/pull/12880#discussion_r466867583", "body": "We don't need to refactor it into `TestSpec`. There is limited methods to test. We can have a test for each option. \r\nThe TestSpec is not easy to understand and can't test some special methods, e.g. `setIdleStateRetentionTime(Time minTime, Time maxTime)`", "bodyText": "We don't need to refactor it into TestSpec. There is limited methods to test. We can have a test for each option.\nThe TestSpec is not easy to understand and can't test some special methods, e.g. setIdleStateRetentionTime(Time minTime, Time maxTime)", "bodyHTML": "<p dir=\"auto\">We don't need to refactor it into <code>TestSpec</code>. There is limited methods to test. We can have a test for each option.<br>\nThe TestSpec is not easy to understand and can't test some special methods, e.g. <code>setIdleStateRetentionTime(Time minTime, Time maxTime)</code></p>", "author": "wuchong", "createdAt": "2020-08-07T07:23:17Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.api;\n+\n+import org.apache.flink.configuration.Configuration;\n+\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for {@link TableConfig}.\n+ */\n+public class TableConfigTest {", "originalCommit": "82edfc5569e7d434ecd56a872b2f56015df3a851", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3MjU4MQ==", "url": "https://github.com/apache/flink/pull/12880#discussion_r466872581", "body": "```suggestion\r\n\t\t\t.withDescription(\"Specifies a minimum time interval for how long idle state \" +\r\n\t\t\t\t\t\"(i.e. state which was not updated), will be retained. State will never be \" +\r\n\t\t\t\t\t\"cleared until it was idle for less than the minimum time, and will be cleared \" +\r\n\t\t\t\t\t\"at some time after it was idle. Default is never clean-up the state.\\n\" +\r\n\t\t\t\t\t\"NOTE: Cleaning up state requires additional overhead for bookkeeping.\\n\" +\r\n\t\t\t\t\t\"Default value is 0, which means that it will never clean up state.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t.withDescription(\"A time-to-live (TTL) can be assigned to the keyed state of any type. \" +\n          \n          \n            \n            \t\t\t\t\"If a TTL is configured and a state value has expired, \" +\n          \n          \n            \n            \t\t\t\t\"the stored value will be cleaned up on a best effort basis. \" +\n          \n          \n            \n            \t\t\t\t\"Default value is 0, which means that it will never clean up state.\");\n          \n          \n            \n            \t\t\t.withDescription(\"Specifies a minimum time interval for how long idle state \" +\n          \n          \n            \n            \t\t\t\t\t\"(i.e. state which was not updated), will be retained. State will never be \" +\n          \n          \n            \n            \t\t\t\t\t\"cleared until it was idle for less than the minimum time, and will be cleared \" +\n          \n          \n            \n            \t\t\t\t\t\"at some time after it was idle. Default is never clean-up the state.\\n\" +\n          \n          \n            \n            \t\t\t\t\t\"NOTE: Cleaning up state requires additional overhead for bookkeeping.\\n\" +\n          \n          \n            \n            \t\t\t\t\t\"Default value is 0, which means that it will never clean up state.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t.withDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A time-to-live (TTL) can be assigned to the keyed state of any type. <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>If a TTL is configured and a state value has expired, <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>the stored value will be cleaned up on a best effort basis. <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Default value is 0, which means that it will never clean up state.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t.withDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Specifies a minimum time interval for how long idle state <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(i.e. state which was not updated), will be retained. State will never be <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cleared until it was idle for less than the minimum time, and will be cleared <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>at some time after it was idle. Default is never clean-up the state.<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NOTE: Cleaning up state requires additional overhead for bookkeeping.<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Default value is 0, which means that it will never clean up state.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "wuchong", "createdAt": "2020-08-07T07:33:59Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "diffHunk": "@@ -37,9 +39,24 @@\n @PublicEvolving\n public class ExecutionConfigOptions {\n \n+\t// ------------------------------------------------------------------------\n+\t//  State Options\n+\t// ------------------------------------------------------------------------\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.STREAMING)\n+\tpublic static final ConfigOption<Duration> IDLE_STATE_RETENTION =\n+\t\tkey(\"table.exec.state.ttl\")\n+\t\t\t.durationType()\n+\t\t\t.defaultValue(Duration.ofMillis(0))\n+\t\t\t.withDescription(\"A time-to-live (TTL) can be assigned to the keyed state of any type. \" +\n+\t\t\t\t\"If a TTL is configured and a state value has expired, \" +\n+\t\t\t\t\"the stored value will be cleaned up on a best effort basis. \" +\n+\t\t\t\t\"Default value is 0, which means that it will never clean up state.\");", "originalCommit": "82edfc5569e7d434ecd56a872b2f56015df3a851", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3MjkwNw==", "url": "https://github.com/apache/flink/pull/12880#discussion_r466872907", "body": "```suggestion\r\n\t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\r\n\t\t\t\t\"<code>TIMESTAMP WITH LOCAL TIME ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\r\n\t\t\t\t\"However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), \" +\r\n\t\t\t\t\"the session time zone is used during conversion. The input of option is either an abbreviation such as \\\"PST\\\", a full name \" +\r\n\t\t\t\t\"such as \\\"America/Los_Angeles\\\", or a custom timezone id such as \\\"GMT-8:00\\\".\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\n          \n          \n            \n            \t\t\t\t\"<code>TIMESTAMP_WITH_LOCAL_TIME_ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\n          \n          \n            \n            \t\t\t\t\"However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), \" +\n          \n          \n            \n            \t\t\t\t\"the session time zone is used during conversion. The input of option is either an abbreviation such as \\\"PST\\\", a full name \" +\n          \n          \n            \n            \t\t\t\t\"such as \\\"America/Los_Angeles\\\", or a custom timezone_id such as \\\"GMT-8:00\\\".\");\n          \n          \n            \n            \t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\n          \n          \n            \n            \t\t\t\t\"<code>TIMESTAMP WITH LOCAL TIME ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\n          \n          \n            \n            \t\t\t\t\"However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), \" +\n          \n          \n            \n            \t\t\t\t\"the session time zone is used during conversion. The input of option is either an abbreviation such as \\\"PST\\\", a full name \" +\n          \n          \n            \n            \t\t\t\t\"such as \\\"America/Los_Angeles\\\", or a custom timezone id such as \\\"GMT-8:00\\\".\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t.withDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The local time zone defines current session time zone id. It is used when converting to/from <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;code&gt;<span class=\"x x-first x-last\">TIMESTAMP_WITH_LOCAL_TIME_ZONE</span>&lt;/code&gt;. Internally, timestamps with local time zone are always represented in the UTC time zone. <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>the session time zone is used during conversion. The input of option is either an abbreviation such as <span class=\"pl-cce\">\\\"</span>PST<span class=\"pl-cce\">\\\"</span>, a full name <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>such as <span class=\"pl-cce\">\\\"</span>America/Los_Angeles<span class=\"pl-cce\">\\\"</span>, or a custom <span class=\"x x-first x-last\">timezone_id</span> such as <span class=\"pl-cce\">\\\"</span>GMT-8:00<span class=\"pl-cce\">\\\"</span>.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t.withDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The local time zone defines current session time zone id. It is used when converting to/from <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;code&gt;<span class=\"x x-first x-last\">TIMESTAMP WITH LOCAL TIME ZONE</span>&lt;/code&gt;. Internally, timestamps with local time zone are always represented in the UTC time zone. <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>the session time zone is used during conversion. The input of option is either an abbreviation such as <span class=\"pl-cce\">\\\"</span>PST<span class=\"pl-cce\">\\\"</span>, a full name <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>such as <span class=\"pl-cce\">\\\"</span>America/Los_Angeles<span class=\"pl-cce\">\\\"</span>, or a custom <span class=\"x x-first x-last\">timezone id</span> such as <span class=\"pl-cce\">\\\"</span>GMT-8:00<span class=\"pl-cce\">\\\"</span>.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "wuchong", "createdAt": "2020-08-07T07:34:42Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "diffHunk": "@@ -51,4 +52,24 @@ private TableConfigOptions() {}\n \t\t\t.withDescription(\"The SQL dialect defines how to parse a SQL query. \" +\n \t\t\t\t\t\"A different SQL dialect may support different SQL grammar. \" +\n \t\t\t\t\t\"Currently supported dialects are: default and hive\");\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.BATCH_STREAMING)\n+\tpublic static final ConfigOption<String> LOCAL_TIME_ZONE = key(\"table.local-time-zone\")\n+\t\t\t.stringType()\n+\t\t\t// special value to decide whether to use ZoneId.systemDefault() in TableConfig.getLocalTimeZone()\n+\t\t\t.defaultValue(\"default\")\n+\t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\n+\t\t\t\t\"<code>TIMESTAMP_WITH_LOCAL_TIME_ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\n+\t\t\t\t\"However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), \" +\n+\t\t\t\t\"the session time zone is used during conversion. The input of option is either an abbreviation such as \\\"PST\\\", a full name \" +\n+\t\t\t\t\"such as \\\"America/Los_Angeles\\\", or a custom timezone_id such as \\\"GMT-8:00\\\".\");", "originalCommit": "82edfc5569e7d434ecd56a872b2f56015df3a851", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0Mjc4Mg==", "url": "https://github.com/apache/flink/pull/12880#discussion_r472742782", "body": "Should assert time zone. ", "bodyText": "Should assert time zone.", "bodyHTML": "<p dir=\"auto\">Should assert time zone.</p>", "author": "wuchong", "createdAt": "2020-08-19T06:10:41Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "diffHunk": "@@ -24,114 +24,54 @@\n \n import java.time.Duration;\n import java.time.ZoneId;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.function.BiConsumer;\n-import java.util.function.Function;\n \n-import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertEquals;\n \n /**\n  * Tests for {@link TableConfig}.\n  */\n public class TableConfigTest {\n-\tprivate static List<TestSpec> specs = Arrays.asList(\n-\t\tTestSpec.testValue(SqlDialect.HIVE)\n-\t\t\t.viaSetter(TableConfig::setSqlDialect)\n-\t\t\t.getterVia(TableConfig::getSqlDialect)\n-\t\t\t.whenSetFromConfig(\"table.sql-dialect\", \"HIVE\"),\n-\n-\t\tTestSpec.testValue(5000)\n-\t\t\t.viaSetter(TableConfig::setMaxGeneratedCodeLength)\n-\t\t\t.getterVia(TableConfig::getMaxGeneratedCodeLength)\n-\t\t\t.whenSetFromConfig(\"table.generated-code.max-length\", \"5000\"),\n-\n-\t\tTestSpec.testValue(ZoneId.of(\"Asia/Shanghai\"))\n-\t\t\t.viaSetter(TableConfig::setLocalTimeZone)\n-\t\t\t.getterVia(TableConfig::getLocalTimeZone)\n-\t\t\t.whenSetFromConfig(\"table.local-time-zone\", \"Asia/Shanghai\"),\n-\n-\t\tTestSpec.testValue(Duration.ofHours(1))\n-\t\t\t.viaSetter(TableConfig::setIdleStateRetention)\n-\t\t\t.getterVia(tableConfig -> Duration.ofMillis(tableConfig.getMinIdleStateRetentionTime()))\n-\t\t\t.whenSetFromConfig(\"table.exec.state.ttl\", \"1 h\"),\n-\n-\t\tTestSpec.testValue(Duration.ofHours(2))\n-\t\t\t.viaSetter(TableConfig::setIdleStateRetention)\n-\t\t\t.getterVia(tableConfig -> Duration.ofMillis(tableConfig.getMaxIdleStateRetentionTime()))\n-\t\t\t.whenSetFromConfig(\"table.exec.state.ttl\", \"2 h\")\n-\t\t\t.nonDefaultValue(Duration.ofHours(3))\n-\t);\n+\tprivate static TableConfig configByMethod = new TableConfig();\n+\tprivate static TableConfig configByConfiguration = new TableConfig();\n+\tprivate static Configuration configuration = new Configuration();\n \n \t@Test\n-\tpublic void testLoadFromConfiguration() {\n-\t\tfor (TestSpec<?> spec: specs) {\n-\t\t\ttestWithSpec(spec);\n-\t\t}\n-\t}\n-\n-\tprivate void testWithSpec(TestSpec<?> testSpec) {\n-\t\tConfiguration config = new Configuration();\n-\t\tconfig.setString(testSpec.key, testSpec.value);\n-\t\tTableConfig tableConfigFromConfig = new TableConfig();\n-\t\ttableConfigFromConfig.addConfiguration(config);\n+\tpublic void testSetAndGetSqlDialect() {\n+\t\tconfiguration.setString(\"table.sql-dialect\", \"HIVE\");\n+\t\tconfigByConfiguration.addConfiguration(configuration);\n+\t\tconfigByMethod.setSqlDialect(SqlDialect.HIVE);\n \n-\t\tTableConfig tableConfigFromSetter = new TableConfig();\n-\t\ttestSpec.setValue(tableConfigFromSetter);\n-\n-\t\ttestSpec.assertEqual(tableConfigFromConfig, tableConfigFromSetter);\n-\t\ttestSpec.assertEqualNonDefaultValue(tableConfigFromConfig);\n+\t\tassertEquals(SqlDialect.HIVE, configByMethod.getSqlDialect());\n+\t\tassertEquals(SqlDialect.HIVE, configByConfiguration.getSqlDialect());\n \t}\n \n-\tprivate static class TestSpec<T> {\n-\t\tprivate String key;\n-\t\tprivate String value;\n-\t\tprivate final T objectValue;\n-\t\tprivate BiConsumer<TableConfig, T> setter;\n-\t\tprivate Function<TableConfig, T> getter;\n-\t\tprivate T nonDefaultValue;\n-\n-\t\tprivate TestSpec(T value) {\n-\t\t\tthis.objectValue = value;\n-\t\t\tthis.nonDefaultValue = value;\n-\t\t}\n-\n-\t\tpublic static <T> TestSpec<T> testValue(T value) {\n-\t\t\treturn new TestSpec<>(value);\n-\t\t}\n-\n-\t\tpublic TestSpec<T> nonDefaultValue(T value) {\n-\t\t\tthis.nonDefaultValue = value;\n-\t\t\treturn this;\n-\t\t}\n-\n-\t\tpublic TestSpec<T> whenSetFromConfig(String key, String value) {\n-\t\t\tthis.key = key;\n-\t\t\tthis.value = value;\n-\t\t\treturn this;\n-\t\t}\n+\t@Test\n+\tpublic void testSetAndGetMaxGeneratedCodeLength() {\n+\t\tconfiguration.setString(\"table.generated-code.max-length\", \"5000\");\n+\t\tconfigByConfiguration.addConfiguration(configuration);\n+\t\tconfigByMethod.setMaxGeneratedCodeLength(5000);\n \n-\t\tpublic TestSpec<T> viaSetter(BiConsumer<TableConfig, T> setter) {\n-\t\t\tthis.setter = setter;\n-\t\t\treturn this;\n-\t\t}\n+\t\tassertEquals(Integer.valueOf(5000), configByMethod.getMaxGeneratedCodeLength());\n+\t\tassertEquals(Integer.valueOf(5000), configByConfiguration.getMaxGeneratedCodeLength());\n+\t}\n \n-\t\tpublic TestSpec<T> getterVia(Function<TableConfig, T> getter) {\n-\t\t\tthis.getter = getter;\n-\t\t\treturn this;\n-\t\t}\n+\t@Test\n+\tpublic void testSetAndGetLocalTimeZone() {\n+\t\tconfiguration.setString(\"table.local-time-zone\", \"Asia/Shanghai\");\n+\t\tconfigByConfiguration.addConfiguration(configuration);\n+\t\tconfigByMethod.setLocalTimeZone(ZoneId.of(\"Asia/Shanghai\"));\n \n-\t\tpublic void setValue(TableConfig config) {\n-\t\t\tsetter.accept(config, objectValue);\n-\t\t}\n+\t\tassertEquals(Integer.valueOf(5000), configByMethod.getMaxGeneratedCodeLength());\n+\t\tassertEquals(Integer.valueOf(5000), configByConfiguration.getMaxGeneratedCodeLength());", "originalCommit": "1f213639e4e38e9e25506c20d7eff660cadbb6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0MzY5Mg==", "url": "https://github.com/apache/flink/pull/12880#discussion_r472743692", "body": "We only need to assert the `tEnv.getConfig().getIdleStateRetention()`.", "bodyText": "We only need to assert the tEnv.getConfig().getIdleStateRetention().", "bodyHTML": "<p dir=\"auto\">We only need to assert the <code>tEnv.getConfig().getIdleStateRetention()</code>.</p>", "author": "wuchong", "createdAt": "2020-08-19T06:12:01Z", "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "diffHunk": "@@ -52,18 +52,17 @@ public void testAppendStreamDoesNotOverwriteTableConfig() {\n \n \t\tStreamTableEnvironmentImpl tEnv = getStreamTableEnvironment(env, elements);\n \n-\t\tTime minRetention = Time.minutes(1);\n-\t\tTime maxRetention = Time.minutes(10);\n-\t\ttEnv.getConfig().setIdleStateRetentionTime(minRetention, maxRetention);\n+\t\tDuration minRetention = Duration.ofMinutes(1);\n+\t\ttEnv.getConfig().setIdleStateRetention(minRetention);\n \t\tTable table = tEnv.fromDataStream(elements);\n \t\ttEnv.toAppendStream(table, Row.class);\n \n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMinIdleStateRetentionTime(),\n-\t\t\tequalTo(minRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMillis()));\n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMaxIdleStateRetentionTime(),\n-\t\t\tequalTo(maxRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMillis() * 3 / 2));", "originalCommit": "1f213639e4e38e9e25506c20d7eff660cadbb6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0Mzc1Mw==", "url": "https://github.com/apache/flink/pull/12880#discussion_r472743753", "body": "ditto.", "bodyText": "ditto.", "bodyHTML": "<p dir=\"auto\">ditto.</p>", "author": "wuchong", "createdAt": "2020-08-19T06:12:05Z", "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "diffHunk": "@@ -73,18 +72,17 @@ public void testRetractStreamDoesNotOverwriteTableConfig() {\n \n \t\tStreamTableEnvironmentImpl tEnv = getStreamTableEnvironment(env, elements);\n \n-\t\tTime minRetention = Time.minutes(1);\n-\t\tTime maxRetention = Time.minutes(10);\n-\t\ttEnv.getConfig().setIdleStateRetentionTime(minRetention, maxRetention);\n+\t\tDuration minRetention = Duration.ofMinutes(1);\n+\t\ttEnv.getConfig().setIdleStateRetention(minRetention);\n \t\tTable table = tEnv.fromDataStream(elements);\n \t\ttEnv.toRetractStream(table, Row.class);\n \n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMinIdleStateRetentionTime(),\n-\t\t\tequalTo(minRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMillis()));\n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMaxIdleStateRetentionTime(),\n-\t\t\tequalTo(maxRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMillis() * 3 / 2));", "originalCommit": "1f213639e4e38e9e25506c20d7eff660cadbb6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "607b519de6a6421d13b4bfa0b2414761ac8fccb4", "url": "https://github.com/apache/flink/commit/607b519de6a6421d13b4bfa0b2414761ac8fccb4", "message": "[FLINK-18555][table-api] Make TableConfig options can be configured by string-based Configuration\n\nThis closes #12880", "committedDate": "2020-08-27T03:58:21Z", "type": "commit"}, {"oid": "607b519de6a6421d13b4bfa0b2414761ac8fccb4", "url": "https://github.com/apache/flink/commit/607b519de6a6421d13b4bfa0b2414761ac8fccb4", "message": "[FLINK-18555][table-api] Make TableConfig options can be configured by string-based Configuration\n\nThis closes #12880", "committedDate": "2020-08-27T03:58:21Z", "type": "forcePushed"}]}