{"pr_number": 13551, "pr_title": "[FLINK-19520][configuration] Add randomization of checkpoint config.", "pr_author": "AHeise", "pr_createdAt": "2020-10-07T10:42:24Z", "pr_url": "https://github.com/apache/flink/pull/13551", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NTMwNw==", "url": "https://github.com/apache/flink/pull/13551#discussion_r539175307", "body": "So for the given commit id and given test name, the random selection choices will be always the same, on each run on any environment/machine?\r\n\r\nIf so, maybe put that (^^^) as a java doc for this `create` method?", "bodyText": "So for the given commit id and given test name, the random selection choices will be always the same, on each run on any environment/machine?\nIf so, maybe put that (^^^) as a java doc for this create method?", "bodyHTML": "<p dir=\"auto\">So for the given commit id and given test name, the random selection choices will be always the same, on each run on any environment/machine?</p>\n<p dir=\"auto\">If so, maybe put that (^^^) as a java doc for this <code>create</code> method?</p>", "author": "pnowojski", "createdAt": "2020-12-09T10:09:50Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if unset.\n+ */\n+@Internal\n+class PseudoRandomValueSelector {\n+\tprivate final Function<Integer, Integer> randomValueSupplier;\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+\tprivate PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+\t\tthis.randomValueSupplier = randomValueSupplier;\n+\t}\n+\n+\tpublic <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+\t\tif (configuration.contains(option)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal Integer choice = randomValueSupplier.apply(alternatives.length);\n+\t\tT value = alternatives[choice];\n+\t\tLOG.info(\"Randomly selected {} for {}\", value, option.key());\n+\t\tconfiguration.set(option, value);\n+\t}\n+\n+\tpublic static PseudoRandomValueSelector create(Object entryPointSeed) {\n+\t\tfinal long commitSeed = new BigInteger(EnvironmentInformation.getGitCommitId(), 16).hashCode();\n+\t\tfinal long combinedSeed = commitSeed << 32 | entryPointSeed.hashCode();", "originalCommit": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMxNjE4NQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r539316185", "bodyText": "Yes that was my intent: have it reproducible without changing anything by just checking out the particular commit that failed on AZP.\nI'm double-checking that EnvironmentInformation.getGitCommitId() works as expected or try a different approach to inject commit id.", "author": "AHeise", "createdAt": "2020-12-09T13:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NTMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNDQ4Ng==", "url": "https://github.com/apache/flink/pull/13551#discussion_r553934486", "bodyText": "So I verified that randomized unaligned checkpoint configuration is actually picked up while creating the controllers.", "author": "AHeise", "createdAt": "2021-01-08T13:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODg4NQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r540528885", "body": "```suggestion\r\n\tpublic final TestRule nameProvider = new TestNameProvider();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic TestRule nameProvider = new TestNameProvider();\n          \n          \n            \n            \tpublic final TestRule nameProvider = new TestNameProvider();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">TestRule</span> nameProvider <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TestNameProvider</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">public</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">TestRule</span> nameProvider <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TestNameProvider</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2020-12-10T22:01:44Z", "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/util/TestLogger.java", "diffHunk": "@@ -67,6 +67,9 @@ public void failed(Throwable e, Description description) {\n \t\t}\n \t};\n \n+\t@Rule\n+\tpublic TestRule nameProvider = new TestNameProvider();", "originalCommit": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r540530506", "body": "This seems a bit...janky? Why can we not mutate the configuration within the MiniClusterResource?", "bodyText": "This seems a bit...janky? Why can we not mutate the configuration within the MiniClusterResource?", "bodyHTML": "<p dir=\"auto\">This seems a bit...janky? Why can we not mutate the configuration within the MiniClusterResource?</p>", "author": "zentol", "createdAt": "2020-12-10T22:04:36Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -44,6 +47,12 @@ public TestStreamEnvironment(\n \t\t\t\tnull);\n \n \t\tsetParallelism(parallelism);\n+\n+\t\tif (Randomization) {\n+\t\t\tfinal String testName = TestNameProvider.getCurrentTestName();", "originalCommit": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUzMDUxNA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r553530514", "bodyText": "I'm missing a hook where I can mutate the configuration per test method. MiniClusterResource is mostly used on class level. Any guidance is greatly appreciated.", "author": "AHeise", "createdAt": "2021-01-07T19:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU0NDg2Ng==", "url": "https://github.com/apache/flink/pull/13551#discussion_r553544866", "bodyText": "I see. I can't come up with a good alternative unfortunately.", "author": "zentol", "createdAt": "2021-01-07T19:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNDc3MA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r553934770", "bodyText": "I moved it a bit outside into the factory, but that's the best that I came up with.", "author": "AHeise", "createdAt": "2021-01-08T13:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODk0Mg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r556428942", "body": "hmm...like, we _could_ add a hook to setAsContext to pass the name/modify the config/pass a factory, but it'd still suck since the TestNameProvider must live within the `TestLogger`; we just can't get around that singleton access can we...", "bodyText": "hmm...like, we could add a hook to setAsContext to pass the name/modify the config/pass a factory, but it'd still suck since the TestNameProvider must live within the TestLogger; we just can't get around that singleton access can we...", "bodyHTML": "<p dir=\"auto\">hmm...like, we <em>could</em> add a hook to setAsContext to pass the name/modify the config/pass a factory, but it'd still suck since the TestNameProvider must live within the <code>TestLogger</code>; we just can't get around that singleton access can we...</p>", "author": "zentol", "createdAt": "2021-01-13T10:48:51Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -69,13 +74,28 @@ public static void setAsContext(\n                     TestStreamEnvironment env =\n                             new TestStreamEnvironment(\n                                     miniCluster, parallelism, jarFiles, classpaths);\n+                    randomize(conf);\n                     env.configure(conf, env.getUserClassloader());\n                     return env;\n                 };\n \n         initializeContextEnvironment(factory);\n     }\n \n+    /**\n+     * Randomizes configuration on test case level even if mini cluster is used in a class rule.\n+     *\n+     * @param conf\n+     */\n+    private static void randomize(Configuration conf) {\n+        if (Randomization) {\n+            final String testName = TestNameProvider.getCurrentTestName();", "originalCommit": "fded2a71d2064276f69335ec94c36b35b8789985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI2NjE1Ng==", "url": "https://github.com/apache/flink/pull/13551#discussion_r557266156", "bodyText": "To make it independent of TestLogger we could use RunListener and then have a singleton listener to fetch the name.\nHowever, I didn't go fully into this direction as it's quite a bit of fiddling in junit4 and I hope to eventually migrate to junit 5. Then I'd check if it can be done in a better way.", "author": "AHeise", "createdAt": "2021-01-14T09:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI3OTkxNg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r557279916", "bodyText": "yeah I'd revisit it once junit5 is in.", "author": "zentol", "createdAt": "2021-01-14T10:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEyNTgzNg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568125836", "body": "What part of this class is not thread safe?", "bodyText": "What part of this class is not thread safe?", "bodyHTML": "<p dir=\"auto\">What part of this class is not thread safe?</p>", "author": "zentol", "createdAt": "2021-02-01T20:42:25Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe", "originalCommit": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM1ODE5OQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568358199", "bodyText": "It doesn't adhere to the contract that it will produce the same randomized configuration for the same seeds if you start using it in parallel (the state is hidden in Random itself).", "author": "AHeise", "createdAt": "2021-02-02T06:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEyNTgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEyOTgzOA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568129838", "body": "braces! (I hope this will fail the CI, if not we might have to re-enable some checkstyle rules...)", "bodyText": "braces! (I hope this will fail the CI, if not we might have to re-enable some checkstyle rules...)", "bodyHTML": "<p dir=\"auto\">braces! (I hope this will fail the CI, if not we might have to re-enable some checkstyle rules...)</p>", "author": "zentol", "createdAt": "2021-02-01T20:49:39Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n+        final Random random = new Random(combinedSeed);\n+        return new PseudoRandomValueSelector(random::nextInt);\n+    }\n+\n+    private static String getGlobalSeed() {\n+        // manual seed or set by maven\n+        final String seed = System.getProperty(\"test.randomization.seed\");\n+        if (seed != null) {\n+            return seed;\n+        }\n+\n+        // Read with git command (if installed)\n+        final Optional<String> gitCommitId = getGitCommitId();\n+        if (gitCommitId.isPresent()) {\n+            return gitCommitId.get();\n+        }\n+\n+        // try EnvironmentInformation, which is set in the maven process\n+        final String commitId = EnvironmentInformation.getGitCommitId();\n+        if (!commitId.equals(EnvironmentInformation.UNKNOWN_COMMIT_ID)) {\n+            return commitId;\n+        }\n+\n+        LOG.warn(\n+                \"Cannot initialize maven property test.randomization.seed with commit id, please set manually to receive reproducible builds.\");\n+        // return any constant\n+        return \"\";\n+    }\n+\n+    @VisibleForTesting\n+    static Optional<String> getGitCommitId() {\n+        try {\n+            Process process = new ProcessBuilder(\"git\", \"rev-parse\", \"HEAD\").start();\n+            try (InputStream input = process.getInputStream()) {\n+                final String commit = IOUtils.toString(input, Charset.defaultCharset()).trim();\n+                if (commit.matches(\"[a-f0-9]{40}\")) return Optional.of(commit);", "originalCommit": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEzMzM3MQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568133371", "body": "technically speaking these should be  `@VisibleForTesting`.", "bodyText": "technically speaking these should be  @VisibleForTesting.", "bodyHTML": "<p dir=\"auto\">technically speaking these should be  <code>@VisibleForTesting</code>.</p>", "author": "zentol", "createdAt": "2021-02-01T20:56:04Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,6 +41,8 @@\n  * startup options, or the JVM version.\n  */\n public class EnvironmentInformation {\n+    public static final String UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+    public static final String UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";", "originalCommit": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM1ODcyNA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r568358724", "bodyText": "Technically you are correct - the best kind of correct. Fixed it.", "author": "AHeise", "createdAt": "2021-02-02T06:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEzMzM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDY0OA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070648", "body": "```suggestion\r\n    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\r\n\r\n    private final Function<Integer, Integer> randomValueSupplier;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Function<Integer, Integer> randomValueSupplier;\n          \n          \n            \n            \n          \n          \n            \n                private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n          \n          \n            \n                private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n          \n          \n            \n            \n          \n          \n            \n                private final Function<Integer, Integer> randomValueSupplier;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"57\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\"><span class=\"x x-first\">Function&lt;</span><span class=\"pl-smi x\">Integer</span><span class=\"x\">, </span><span class=\"pl-smi x\">Integer</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\"> randomValueSupplier</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"58\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"59\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">static</span><span class=\"x x-last\"> </span><span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first\">Logger</span><span class=\"x\"> </span><span class=\"pl-c1 x\">LOG</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-smi x\">LoggerFactory</span><span class=\"pl-k x\">.</span><span class=\"x\">getLogger(</span><span class=\"pl-smi x\">PseudoRandomValueSelector</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">class)</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"57\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">static</span><span class=\"x x-last\"> </span><span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first\">Logger</span><span class=\"x\"> </span><span class=\"pl-c1 x\">LOG</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-smi x\">LoggerFactory</span><span class=\"pl-k x\">.</span><span class=\"x\">getLogger(</span><span class=\"pl-smi x\">PseudoRandomValueSelector</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">class)</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"58\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"59\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\"><span class=\"x x-first\">Function&lt;</span><span class=\"pl-smi x\">Integer</span><span class=\"x\">, </span><span class=\"pl-smi x\">Integer</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\"> randomValueSupplier</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:29:07Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDc3OQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070779", "body": "```suggestion\r\n    private static final long GLOBAL_SEED = (long) getGlobalSeed().hashCode() << 32;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n          \n          \n            \n                private static final long GLOBAL_SEED = (long) getGlobalSeed().hashCode() << 32;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> <span class=\"pl-smi x x-first x-last\">GlobalSeed</span> <span class=\"pl-k\">=</span> (<span class=\"pl-k\">long</span>) getGlobalSeed()<span class=\"pl-k\">.</span>hashCode() <span class=\"pl-k\">&lt;&lt;</span> <span class=\"pl-c1\">32</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> <span class=\"pl-c1 x x-first x-last\">GLOBAL_SEED</span> <span class=\"pl-k\">=</span> (<span class=\"pl-k\">long</span>) getGlobalSeed()<span class=\"pl-k\">.</span>hashCode() <span class=\"pl-k\">&lt;&lt;</span> <span class=\"pl-c1\">32</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:29:19Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDkwNQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070905", "body": "```suggestion\r\n        final long combinedSeed = GLOBAL_SEED | entryPointSeed.hashCode();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n          \n          \n            \n                    final long combinedSeed = GLOBAL_SEED | entryPointSeed.hashCode();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> combinedSeed <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first x-last\">GlobalSeed</span> <span class=\"pl-k\">|</span> entryPointSeed<span class=\"pl-k\">.</span>hashCode();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> combinedSeed <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first x-last\">GLOBAL_SEED</span> <span class=\"pl-k\">|</span> entryPointSeed<span class=\"pl-k\">.</span>hashCode();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:29:30Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MTM0Nw==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570071347", "body": "```suggestion\r\n        final int choice = randomValueSupplier.apply(alternatives.length);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Integer choice = randomValueSupplier.apply(alternatives.length);\n          \n          \n            \n                    final int choice = randomValueSupplier.apply(alternatives.length);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">Integer</span> choice <span class=\"pl-k\">=</span> randomValueSupplier<span class=\"pl-k\">.</span>apply(alternatives<span class=\"pl-k\">.</span>length);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k x x-first x-last\">int</span> choice <span class=\"pl-k\">=</span> randomValueSupplier<span class=\"pl-k\">.</span>apply(alternatives<span class=\"pl-k\">.</span>length);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:30:03Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MzMyMQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570073321", "body": "```\r\nTest randomization was enabled but test.randomization.seed was not configured, nor could the commit hash be retrieved from git or the EnvironmentInformation. Please set the test.randomization.seed property manually to make the build reproducible.\r\n```", "bodyText": "Test randomization was enabled but test.randomization.seed was not configured, nor could the commit hash be retrieved from git or the EnvironmentInformation. Please set the test.randomization.seed property manually to make the build reproducible.", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Test randomization was enabled but test.randomization.seed was not configured, nor could the commit hash be retrieved from git or the EnvironmentInformation. Please set the test.randomization.seed property manually to make the build reproducible.\n\"><pre><code>Test randomization was enabled but test.randomization.seed was not configured, nor could the commit hash be retrieved from git or the EnvironmentInformation. Please set the test.randomization.seed property manually to make the build reproducible.\n</code></pre></div>", "author": "zentol", "createdAt": "2021-02-04T09:32:51Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n+        final Random random = new Random(combinedSeed);\n+        return new PseudoRandomValueSelector(random::nextInt);\n+    }\n+\n+    private static String getGlobalSeed() {\n+        // manual seed or set by maven\n+        final String seed = System.getProperty(\"test.randomization.seed\");\n+        if (seed != null) {\n+            return seed;\n+        }\n+\n+        // Read with git command (if installed)\n+        final Optional<String> gitCommitId = getGitCommitId();\n+        if (gitCommitId.isPresent()) {\n+            return gitCommitId.get();\n+        }\n+\n+        // try EnvironmentInformation, which is set in the maven process\n+        final String commitId = EnvironmentInformation.getGitCommitId();\n+        if (!commitId.equals(EnvironmentInformation.UNKNOWN_COMMIT_ID)) {\n+            return commitId;\n+        }\n+\n+        LOG.warn(\n+                \"Cannot initialize maven property test.randomization.seed with commit id, please set manually to receive reproducible builds.\");", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3Mzk3Nw==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570073977", "body": "```suggestion\r\n    private static final boolean RANDOMIZE_CHECKPOINTING_CONFIG =\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final boolean Randomization =\n          \n          \n            \n                private static final boolean RANDOMIZE_CHECKPOINTING_CONFIG =", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">boolean</span> <span class=\"pl-smi x x-first x-last\">Randomization</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">boolean</span> <span class=\"pl-c1 x x-first x-last\">RANDOMIZE_CHECKPOINTING_CONFIG</span> <span class=\"pl-k\">=</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:33:46Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -18,18 +18,23 @@\n \n package org.apache.flink.streaming.util;\n \n+import org.apache.flink.configuration.Configuration;\n import org.apache.flink.core.fs.Path;\n import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions;\n import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n import org.apache.flink.streaming.api.environment.StreamExecutionEnvironmentFactory;\n import org.apache.flink.test.util.MiniClusterPipelineExecutorServiceLoader;\n+import org.apache.flink.util.TestNameProvider;\n \n import java.net.URL;\n import java.util.Collection;\n import java.util.Collections;\n \n /** A {@link StreamExecutionEnvironment} that executes its jobs on {@link MiniCluster}. */\n public class TestStreamEnvironment extends StreamExecutionEnvironment {\n+    private static final boolean Randomization =", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NDc4Mg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570074782", "body": "```suggestion\r\n        if (RANDOMIZE_CHECKPOINTING_CONFIG) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Randomization) {\n          \n          \n            \n                    if (RANDOMIZE_CHECKPOINTING_CONFIG) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-smi x x-first x-last\">Randomization</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">RANDOMIZE_CHECKPOINTING_CONFIG</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:34:58Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -69,13 +74,30 @@ public static void setAsContext(\n                     TestStreamEnvironment env =\n                             new TestStreamEnvironment(\n                                     miniCluster, parallelism, jarFiles, classpaths);\n+                    randomize(conf);\n                     env.configure(conf, env.getUserClassloader());\n                     return env;\n                 };\n \n         initializeContextEnvironment(factory);\n     }\n \n+    /**\n+     * Randomizes configuration on test case level even if mini cluster is used in a class rule.\n+     *\n+     * <p>Note that only unset properties are randomized.\n+     *\n+     * @param conf the configuration to randomize\n+     */\n+    private static void randomize(Configuration conf) {\n+        if (Randomization) {", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTQ1NQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570075455", "body": "```suggestion\r\n        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"seed\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n          \n          \n            \n                    final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"seed\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">PseudoRandomValueSelector</span> valueSelector <span class=\"pl-k\">=</span> <span class=\"pl-smi\">PseudoRandomValueSelector</span><span class=\"pl-k\">.</span>create(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">test</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">PseudoRandomValueSelector</span> valueSelector <span class=\"pl-k\">=</span> <span class=\"pl-smi\">PseudoRandomValueSelector</span><span class=\"pl-k\">.</span>create(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">seed</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:35:58Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTk4NA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570075984", "body": "assertThat(uniqueValues.size(); greaterThan(1))?", "bodyText": "assertThat(uniqueValues.size(); greaterThan(1))?", "bodyHTML": "<p dir=\"auto\">assertThat(uniqueValues.size(); greaterThan(1))?</p>", "author": "zentol", "createdAt": "2021-02-04T09:36:45Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NjIzNQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570076235", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nonnull", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">    </span><span class=\"pl-k x x-last\">@Nonnull</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:37:06Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3ODUxMg==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570078512", "body": "```suggestion\r\n    /** Tests that the selector produces the same value for the same seed. */\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Tests that it produces the same value for the same seed. */\n          \n          \n            \n                /** Tests that the selector produces the same value for the same seed. */", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Tests that <span class=\"x x-first x-last\">it</span> produces the same value for the same seed. <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Tests that <span class=\"x x-first x-last\">the selector</span> produces the same value for the same seed. <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2021-02-04T09:40:15Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3OTc2MQ==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570079761", "body": "maybe add another set for the second value, to test that a sequence of selections is also deterministic.", "bodyText": "maybe add another set for the second value, to test that a sequence of selections is also deterministic.", "bodyHTML": "<p dir=\"auto\">maybe add another set for the second value, to test that a sequence of selections is also deterministic.</p>", "author": "zentol", "createdAt": "2021-02-04T09:42:00Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */\n+    @Test\n+    public void testStableRandomization() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\");\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDEyODgxMA==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570128810", "bodyText": "I'm checking a triple of config options now.", "author": "AHeise", "createdAt": "2021-02-04T10:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3OTc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4MTM3Ng==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570081376", "body": "re-use `org.apache.flink.runtime.testutils.ZooKeeperTestUtils#runsOnCIInfrastructure` instead", "bodyText": "re-use org.apache.flink.runtime.testutils.ZooKeeperTestUtils#runsOnCIInfrastructure instead", "bodyHTML": "<p dir=\"auto\">re-use <code>org.apache.flink.runtime.testutils.ZooKeeperTestUtils#runsOnCIInfrastructure</code> instead</p>", "author": "zentol", "createdAt": "2021-02-04T09:44:10Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */\n+    @Test\n+    public void testStableRandomization() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\");\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertEquals(1, uniqueValues.size());\n+    }\n+\n+    /**\n+     * Tests that reading through git command yields the same as {@link EnvironmentInformation}.\n+     *\n+     * <p>This test assumes that both sources of information are available (CI).\n+     */\n+    @Test\n+    public void readCommitId() {\n+        assumeNotNull(System.getProperty(\"CI\"));", "originalCommit": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDYxMDE3Nw==", "url": "https://github.com/apache/flink/pull/13551#discussion_r570610177", "body": "extend TestLogger", "bodyText": "extend TestLogger", "bodyHTML": "<p dir=\"auto\">extend TestLogger</p>", "author": "zentol", "createdAt": "2021-02-04T23:16:42Z", "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.api.java.tuple.Tuple3;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.testutils.ZooKeeperTestUtils;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.configuration.CheckpointingOptions.SAVEPOINT_DIRECTORY;\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.TOLERABLE_FAILURE_NUMBER;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {", "originalCommit": "29e7176390cd2877927bb8a20ac327921e8ae936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d69b21f05abca0de64a2e778c292a7d0694b263", "url": "https://github.com/apache/flink/commit/3d69b21f05abca0de64a2e778c292a7d0694b263", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.", "committedDate": "2021-02-10T07:23:04Z", "type": "commit"}]}