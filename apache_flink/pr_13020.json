{"pr_number": 13020, "pr_title": "[FLINK-18663][rest] Fix the exception occurred on AbstractHandler#handleException but not handled", "pr_author": "Tartarus0zm", "pr_createdAt": "2020-07-29T11:08:21Z", "pr_url": "https://github.com/apache/flink/pull/13020", "timeline": [{"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "url": "https://github.com/apache/flink/commit/e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "message": "[FLINK-18663][rest] does not handle new request if handler had been closed", "committedDate": "2020-07-29T12:08:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDcxMw==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462404713", "body": "```suggestion\r\n\t\tsynchronized (lock) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tsynchronized (this) {\n          \n          \n            \n            \t\tsynchronized (lock) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k\">synchronized</span> (<span class=\"pl-c1 x x-first x-last\">this</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-k\">synchronized</span> (<span class=\"x x-first x-last\">lock</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "zentol", "createdAt": "2020-07-29T15:51:15Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {", "originalCommit": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzQ2NQ==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462697465", "bodyText": "I will fix it.", "author": "Tartarus0zm", "createdAt": "2020-07-30T02:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462406228", "body": "We should not try to submit a response; since we are either already shutdown or in the process of shutting down the response may or may not go through. Better to be consistent and not respond in either case.\r\nOne thing we can do though is close the channel via `ctx.channel().close()`.", "bodyText": "We should not try to submit a response; since we are either already shutdown or in the process of shutting down the response may or may not go through. Better to be consistent and not respond in either case.\nOne thing we can do though is close the channel via ctx.channel().close().", "bodyHTML": "<p dir=\"auto\">We should not try to submit a response; since we are either already shutdown or in the process of shutting down the response may or may not go through. Better to be consistent and not respond in either case.<br>\nOne thing we can do though is close the channel via <code>ctx.channel().close()</code>.</p>", "author": "zentol", "createdAt": "2020-07-29T15:53:22Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(", "originalCommit": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5ODMzOQ==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462698339", "bodyText": "I will test ctx.channel().close() .\nwhat's your mean about\nWhat about catching the NullPointerException within handleException? ?", "author": "Tartarus0zm", "createdAt": "2020-07-30T02:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MjgyNg==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462882826", "bodyText": "As of right now, should the NPE occur then all the user/dev sees is pretty much the same stack trace you got. That's not ideal.\nSo instead, let's handle the case explicitly:\nprivate CompletableFuture<Void> handleException(Throwable throwable, ChannelHandlerContext ctx, HttpRequest httpRequest) {\n\t\tFlinkHttpObjectAggregator flinkHttpObjectAggregator = ctx.pipeline().get(FlinkHttpObjectAggregator.class);\n\t\tif (flinkHttpObjectAggregator == null) {\n\t\t\tlog.warn(\"The connection was closed unexpectedly.\");\n\t\t\treturn CompletableFuture.completedFuture(null);\n\t\t}\n\t\t...", "author": "zentol", "createdAt": "2020-07-30T09:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDc3MQ==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462894771", "bodyText": "Do we still need to modify the processing logic of requestProcessingFuture? If we avoid NPE, the changes to requestProcessingFuture may not be necessary.", "author": "Tartarus0zm", "createdAt": "2020-07-30T10:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5MzA0NA==", "url": "https://github.com/apache/flink/pull/13020#discussion_r463493044", "bodyText": "they are still useful for preventing   something similar from happening again.", "author": "zentol", "createdAt": "2020-07-31T09:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNzQ5Mg==", "url": "https://github.com/apache/flink/pull/13020#discussion_r463637492", "bodyText": "yes", "author": "Tartarus0zm", "createdAt": "2020-07-31T14:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjU4Nw==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462406587", "body": "this also needs to happen under the lock, otherwise the race condition isn't fixed. (just move the entire synchronized block here)", "bodyText": "this also needs to happen under the lock, otherwise the race condition isn't fixed. (just move the entire synchronized block here)", "bodyHTML": "<p dir=\"auto\">this also needs to happen under the lock, otherwise the race condition isn't fixed. (just move the entire synchronized block here)</p>", "author": "zentol", "createdAt": "2020-07-29T15:53:53Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(\n+\t\t\t\t\tctx,\n+\t\t\t\t\thttpRequest,\n+\t\t\t\t\tnew ErrorResponseBody(errorMsg),\n+\t\t\t\t\tHttpResponseStatus.BAD_REQUEST,\n+\t\t\t\t\tresponseHeaders);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n \t\t\tinFlightRequestTracker.registerRequest();", "originalCommit": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "41ac35d96c420b40628fc9a64aca80c54cb78081", "url": "https://github.com/apache/flink/commit/41ac35d96c420b40628fc9a64aca80c54cb78081", "message": "[FLINK-18663][rest] does not handle new request if handler had been closed", "committedDate": "2020-07-30T13:07:08Z", "type": "forcePushed"}, {"oid": "90f1c667ed460cca944aed31402e89a4216b2d14", "url": "https://github.com/apache/flink/commit/90f1c667ed460cca944aed31402e89a4216b2d14", "message": "[FLINK-18663][rest] Improve exception handling\n\n- ensure that request finalization runs even if handleException throws an exception\n- catch NPE in handleException, which occurs if the client closes the connection", "committedDate": "2020-08-03T08:46:33Z", "type": "commit"}, {"oid": "14688aa89dbf3d9c5f0df1052f0f804ae6f79b07", "url": "https://github.com/apache/flink/commit/14688aa89dbf3d9c5f0df1052f0f804ae6f79b07", "message": "[FLINK-18663][rest] Exit early if shutdown has started", "committedDate": "2020-08-03T08:46:33Z", "type": "forcePushed"}, {"oid": "5fd5769688d1f66c54dceca0b135ebc3d5c4b604", "url": "https://github.com/apache/flink/commit/5fd5769688d1f66c54dceca0b135ebc3d5c4b604", "message": "[FLINK-18663][rest] Exit early if shutdown has started", "committedDate": "2020-08-03T13:01:39Z", "type": "commit"}, {"oid": "0d374f52f0c0c40585dc9bad5962aa52cb602b21", "url": "https://github.com/apache/flink/commit/0d374f52f0c0c40585dc9bad5962aa52cb602b21", "message": "[hotfix][rest][tests] Replace HandlerBlocker with BlockerSync", "committedDate": "2020-08-03T13:01:39Z", "type": "commit"}, {"oid": "0d374f52f0c0c40585dc9bad5962aa52cb602b21", "url": "https://github.com/apache/flink/commit/0d374f52f0c0c40585dc9bad5962aa52cb602b21", "message": "[hotfix][rest][tests] Replace HandlerBlocker with BlockerSync", "committedDate": "2020-08-03T13:01:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjQ4Nw==", "url": "https://github.com/apache/flink/pull/13020#discussion_r469236487", "body": "I think I have given you ill-advice here @Tartarus0zm and @zentol. Since we want to support asynchronous operations such as cancel-with-savepoint which only shuts down the cluster (per-job-mode) if the result has been served, it is a valid state that `terminationFuture` is non null and we still want to process the request.\r\n\r\nWhat I would suggest is to change this line into `if (terminationFuture != null && terminationFuture.isDone()) {`. Moreover, all `inFlightRequestTracker` modifying calls should happen under `this` lock.", "bodyText": "I think I have given you ill-advice here @Tartarus0zm and @zentol. Since we want to support asynchronous operations such as cancel-with-savepoint which only shuts down the cluster (per-job-mode) if the result has been served, it is a valid state that terminationFuture is non null and we still want to process the request.\nWhat I would suggest is to change this line into if (terminationFuture != null && terminationFuture.isDone()) {. Moreover, all inFlightRequestTracker modifying calls should happen under this lock.", "bodyHTML": "<p dir=\"auto\">I think I have given you ill-advice here <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Tartarus0zm/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Tartarus0zm\">@Tartarus0zm</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/zentol/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zentol\">@zentol</a>. Since we want to support asynchronous operations such as cancel-with-savepoint which only shuts down the cluster (per-job-mode) if the result has been served, it is a valid state that <code>terminationFuture</code> is non null and we still want to process the request.</p>\n<p dir=\"auto\">What I would suggest is to change this line into <code>if (terminationFuture != null &amp;&amp; terminationFuture.isDone()) {</code>. Moreover, all <code>inFlightRequestTracker</code> modifying calls should happen under <code>this</code> lock.</p>", "author": "tillrohrmann", "createdAt": "2020-08-12T12:53:52Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -116,7 +117,15 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n-\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (terminationFuture != null) {", "originalCommit": "0d374f52f0c0c40585dc9bad5962aa52cb602b21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}