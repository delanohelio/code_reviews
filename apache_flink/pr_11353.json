{"pr_number": 11353, "pr_title": "[FLINK-16438][yarn] Make YarnResourceManager starts workers using WorkerResourceSpec requested by SlotManager", "pr_author": "xintongsong", "pr_createdAt": "2020-03-09T10:23:19Z", "pr_url": "https://github.com/apache/flink/pull/11353", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxMTQxNA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390711414", "body": "Not sure we could add underscores in the method name.", "bodyText": "Not sure we could add underscores in the method name.", "bodyHTML": "<p dir=\"auto\">Not sure we could add underscores in the method name.</p>", "author": "KarmaGYZ", "createdAt": "2020-03-11T02:17:18Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/YarnResourceManagerTest.java", "diffHunk": "@@ -584,6 +590,85 @@ public void testGetCpuExceedMaxInt() throws Exception {\n \t\t}};\n \t}\n \n+\t@Test\n+\tpublic void testWorkerSpecContainerResourceAdapter_MatchVcores() {", "originalCommit": "80a6254bc7f7b433b9c6ab26e2fa63d5c7e0ba2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczODY2MA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390738660", "bodyText": "I'm sure about this either. That's why I kept it, for discussions in the PR.\nOn one hand, I do find the following in the code style guide.\n\nNon-static fields/methods must be in lower camel case.\n\nOn the other hand, the underscores do provide better readability in the long test case name, and there are already test cases using them (e.g., MiniClusterConfigurationTest, CatalogTest, etc.).", "author": "xintongsong", "createdAt": "2020-03-11T04:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxMTQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1MTQwMA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390751400", "bodyText": "I prefer to follow the code style guide if possible but I'm ok with it atm. Someone who has better English proficiency may give us another idea about the name.", "author": "KarmaGYZ", "createdAt": "2020-03-11T05:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxMTQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTExNA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390715114", "body": "These records seem never to be cleaned up. It will not cause any problem atm though.", "bodyText": "These records seem never to be cleaned up. It will not cause any problem atm though.", "bodyHTML": "<p dir=\"auto\">These records seem never to be cleaned up. It will not cause any problem atm though.</p>", "author": "KarmaGYZ", "createdAt": "2020-03-11T02:32:43Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -615,4 +632,85 @@ protected double getCpuCores(final Configuration configuration) {\n \t\t//noinspection NumericCastThatLosesPrecision\n \t\treturn cpuCoresLong;\n \t}\n+\n+\t/**\n+\t * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+\t */\n+\t@VisibleForTesting\n+\tstatic class WorkerSpecContainerResourceAdapter {\n+\t\tprivate final Configuration flinkConfig;\n+\t\tprivate final int minMemMB;\n+\t\tprivate final int minVcore;\n+\t\tprivate final boolean matchVcores;\n+\t\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\t\tprivate final Map<Resource, Collection<WorkerResourceSpec>> containerResourceToWorkerSpecs;\n+\t\tprivate final Map<Integer, Collection<Resource>> containerMemoryToContainerResource;", "originalCommit": "80a6254bc7f7b433b9c6ab26e2fa63d5c7e0ba2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0MDU1MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390740551", "bodyText": "I think the upper bond of the amount of records really depends on how many different WorkerResourceSpec do we have.\nIf we want to clean the unused records up, the WorkerSpecContainerResourceAdapter will need YarnResourceManager to tell it which WorkerResourceSpec is no longer needed (all corresponding TMs are completed and no pending ones). ATM, I don't see the necessity for such complexity.", "author": "xintongsong", "createdAt": "2020-03-11T04:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMjMwNw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390722307", "body": "Seems we don't need to add it to `containerMemoryToContainerResource` if `matchVcores` is false.", "bodyText": "Seems we don't need to add it to containerMemoryToContainerResource if matchVcores is false.", "bodyHTML": "<p dir=\"auto\">Seems we don't need to add it to <code>containerMemoryToContainerResource</code> if <code>matchVcores</code> is false.</p>", "author": "KarmaGYZ", "createdAt": "2020-03-11T03:03:42Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -615,4 +632,85 @@ protected double getCpuCores(final Configuration configuration) {\n \t\t//noinspection NumericCastThatLosesPrecision\n \t\treturn cpuCoresLong;\n \t}\n+\n+\t/**\n+\t * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+\t */\n+\t@VisibleForTesting\n+\tstatic class WorkerSpecContainerResourceAdapter {\n+\t\tprivate final Configuration flinkConfig;\n+\t\tprivate final int minMemMB;\n+\t\tprivate final int minVcore;\n+\t\tprivate final boolean matchVcores;\n+\t\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\t\tprivate final Map<Resource, Collection<WorkerResourceSpec>> containerResourceToWorkerSpecs;\n+\t\tprivate final Map<Integer, Collection<Resource>> containerMemoryToContainerResource;\n+\n+\t\t@VisibleForTesting\n+\t\tWorkerSpecContainerResourceAdapter(\n+\t\t\t\tfinal Configuration flinkConfig,\n+\t\t\t\tfinal int minMemMB,\n+\t\t\t\tfinal int minVcore,\n+\t\t\t\tfinal boolean matchVcores) {\n+\t\t\tthis.flinkConfig = Preconditions.checkNotNull(flinkConfig);\n+\t\t\tthis.minMemMB = minMemMB;\n+\t\t\tthis.minVcore = minVcore;\n+\t\t\tthis.matchVcores = matchVcores;\n+\t\t\tworkerSpecToContainerResource = new HashMap<>();\n+\t\t\tcontainerResourceToWorkerSpecs = new HashMap<>();\n+\t\t\tcontainerMemoryToContainerResource = new HashMap<>();\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tResource getContainerResource(final WorkerResourceSpec workerResourceSpec) {\n+\t\t\treturn workerSpecToContainerResource.computeIfAbsent(\n+\t\t\t\tPreconditions.checkNotNull(workerResourceSpec),\n+\t\t\t\tthis::createAndMapContainerResource);\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tCollection<WorkerResourceSpec> getWorkerSpecs(final Resource containerResource) {\n+\t\t\treturn getEquivalentContainerResource(containerResource).stream()\n+\t\t\t\t.flatMap(resource -> containerResourceToWorkerSpecs.getOrDefault(resource, Collections.emptyList()).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tCollection<Resource> getEquivalentContainerResource(final Resource containerResource) {\n+\t\t\t// Yarn might ignore the requested vcores, depending on its configurations.\n+\t\t\t// In such cases, we should also not matching vcores.\n+\t\t\treturn matchVcores ?\n+\t\t\t\tCollections.singletonList(containerResource) :\n+\t\t\t\tcontainerMemoryToContainerResource.getOrDefault(containerResource.getMemory(), Collections.emptyList());\n+\t\t}\n+\n+\t\tprivate Resource createAndMapContainerResource(final WorkerResourceSpec workerResourceSpec) {\n+\t\t\t// TODO: need to unset process/flink memory size from configuration if dynamic worker resource is activated\n+\t\t\tfinal TaskExecutorProcessSpec taskExecutorProcessSpec =\n+\t\t\t\tTaskExecutorProcessUtils.processSpecFromWorkerResourceSpec(flinkConfig, workerResourceSpec);\n+\t\t\tfinal Resource containerResource = Resource.newInstance(\n+\t\t\t\tnormalize(taskExecutorProcessSpec.getTotalProcessMemorySize().getMebiBytes(), minMemMB),\n+\t\t\t\tnormalize(taskExecutorProcessSpec.getCpuCores().getValue().intValue(), minVcore));\n+\t\t\tcontainerResourceToWorkerSpecs.computeIfAbsent(containerResource, ignored -> new ArrayList<>())\n+\t\t\t\t.add(workerResourceSpec);\n+\t\t\tcontainerMemoryToContainerResource.computeIfAbsent(containerResource.getMemory(), ignored -> new HashSet<>())", "originalCommit": "80a6254bc7f7b433b9c6ab26e2fa63d5c7e0ba2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0MTY5Mw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390741693", "bodyText": "True, we don't need containerMemoryToContainerResource if not matching vcores. However, I would try avoid unnecessary if-else branches.", "author": "xintongsong", "createdAt": "2020-03-11T04:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMjMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMDY0Ng==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390730646", "body": "Is there any benefit we could get from extending `AMRMClientAsyncImpl` instead of `AMRMClientAsync`? This class is annotated with `Unstable`.", "bodyText": "Is there any benefit we could get from extending AMRMClientAsyncImpl instead of AMRMClientAsync? This class is annotated with Unstable.", "bodyHTML": "<p dir=\"auto\">Is there any benefit we could get from extending <code>AMRMClientAsyncImpl</code> instead of <code>AMRMClientAsync</code>? This class is annotated with <code>Unstable</code>.</p>", "author": "KarmaGYZ", "createdAt": "2020-03-11T03:42:32Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingYarnAMRMClientAsync.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.api.java.tuple.Tuple4;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.Priority;\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.apache.hadoop.yarn.client.api.AMRMClient;\n+import org.apache.hadoop.yarn.client.api.async.AMRMClientAsync;\n+import org.apache.hadoop.yarn.client.api.async.impl.AMRMClientAsyncImpl;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+/**\n+ * A Yarn {@link AMRMClientAsync} implementation for testing.\n+ */\n+public class TestingYarnAMRMClientAsync extends AMRMClientAsyncImpl<AMRMClient.ContainerRequest> {", "originalCommit": "9fc7db6c74fbc2b870daa35bd9da1a9f3132360b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0Mjk2Mg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r390742962", "bodyText": "The problem is that AMRMClientAsync is an abstract class and we have to implement all its abstract methods if extending it. There are some abstract methods in later Hadoop versions that we cannot easily implement for early versions, because the absence of argument/return value type.\nAlthough AMRMClientAsyncImpl is unstable, we are not really depending on its implementation. The methods we override are all declared in AMRMClientAsync, which is stable. So it should not be a problem.", "author": "xintongsong", "createdAt": "2020-03-11T04:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMDY0Ng=="}], "type": "inlineReview"}, {"oid": "e3a0e97a99c05635fd1b295638044c5d7147a3c1", "url": "https://github.com/apache/flink/commit/e3a0e97a99c05635fd1b295638044c5d7147a3c1", "message": "[FLINK-16438][runtime] Remove unused TaskExecutorProcessSpec from ActiveResourceManager.", "committedDate": "2020-03-27T09:33:40Z", "type": "forcePushed"}, {"oid": "9deac788721c83899d8bc4ce14732869e8bc2330", "url": "https://github.com/apache/flink/commit/9deac788721c83899d8bc4ce14732869e8bc2330", "message": "[FLINK-16438][runtime] Remove unused TaskExecutorProcessSpec from ActiveResourceManager.", "committedDate": "2020-03-30T02:33:25Z", "type": "forcePushed"}, {"oid": "0c5eb8c3d46d2142f9dd64acfaba9d27102ad3f2", "url": "https://github.com/apache/flink/commit/0c5eb8c3d46d2142f9dd64acfaba9d27102ad3f2", "message": "[FLINK-16438][runtime] Remove unused TaskExecutorProcessSpec from ActiveResourceManager.", "committedDate": "2020-03-30T05:04:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3ODY3Mg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403078672", "body": "```suggestion\r\npublic class ActiveResourceManagerTest extends TestLogger {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ActiveResourceManagerTest {\n          \n          \n            \n            public class ActiveResourceManagerTest extends TestLogger {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">ActiveResourceManagerTest</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">ActiveResourceManagerTest</span> <span class=\"pl-k x x-first\">extends</span><span class=\"x\"> </span><span class=\"pl-e x\">TestLogger</span><span class=\"x x-last\"> </span>{</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-03T15:16:36Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/resourcemanager/ActiveResourceManagerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.resourcemanager;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+/**\n+ * Tests for {@link ActiveResourceManager}.\n+ */\n+public class ActiveResourceManagerTest {", "originalCommit": "d3fc9010a987cd299f355ddc1fbeb4225b5fb418", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4Mzc4OQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403083789", "body": "Call me old fashioned, but I think the for-each loop `for (KubernetesPod pod: pods)` is superior to `forEach`.", "bodyText": "Call me old fashioned, but I think the for-each loop for (KubernetesPod pod: pods) is superior to forEach.", "bodyHTML": "<p dir=\"auto\">Call me old fashioned, but I think the for-each loop <code>for (KubernetesPod pod: pods)</code> is superior to <code>forEach</code>.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:24:15Z", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesResourceManager.java", "diffHunk": "@@ -183,16 +178,18 @@ public boolean stopWorker(final KubernetesWorkerNode worker) {\n \t@Override\n \tpublic void onAdded(List<KubernetesPod> pods) {\n \t\trunAsync(() -> {\n-\t\t\tfor (KubernetesPod pod : pods) {\n-\t\t\t\tif (numPendingPodRequests > 0) {\n-\t\t\t\t\tnumPendingPodRequests--;\n+\t\t\tpods.forEach(pod -> {", "originalCommit": "d7a0626255f2445cfe20dcb7bab1aede3af4b0d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4NjYyNQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403086625", "body": "I'm wondering whether this logic shouldn't go into the `ActiveResourceManager`. I would expect that all `ActiveResourceManager` implementations would need to do something similar. Maybe we could introduce `notifyNewWorkerStarted(WorkerResourceSpec)`. This could also have the benefit that we could hide `pendingWorkerCounter` completely.", "bodyText": "I'm wondering whether this logic shouldn't go into the ActiveResourceManager. I would expect that all ActiveResourceManager implementations would need to do something similar. Maybe we could introduce notifyNewWorkerStarted(WorkerResourceSpec). This could also have the benefit that we could hide pendingWorkerCounter completely.", "bodyHTML": "<p dir=\"auto\">I'm wondering whether this logic shouldn't go into the <code>ActiveResourceManager</code>. I would expect that all <code>ActiveResourceManager</code> implementations would need to do something similar. Maybe we could introduce <code>notifyNewWorkerStarted(WorkerResourceSpec)</code>. This could also have the benefit that we could hide <code>pendingWorkerCounter</code> completely.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:28:23Z", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesResourceManager.java", "diffHunk": "@@ -183,16 +178,18 @@ public boolean stopWorker(final KubernetesWorkerNode worker) {\n \t@Override\n \tpublic void onAdded(List<KubernetesPod> pods) {\n \t\trunAsync(() -> {\n-\t\t\tfor (KubernetesPod pod : pods) {\n-\t\t\t\tif (numPendingPodRequests > 0) {\n-\t\t\t\t\tnumPendingPodRequests--;\n+\t\t\tpods.forEach(pod -> {\n+\t\t\t\tWorkerResourceSpec workerResourceSpec = podWorkerResources.get(pod.getName());\n+\t\t\t\tfinal int pendingNum = pendingWorkerCounter.getNum(workerResourceSpec);\n+\t\t\t\tif (pendingNum > 0) {\n+\t\t\t\t\tpendingWorkerCounter.decreaseAndGet(workerResourceSpec);", "originalCommit": "d7a0626255f2445cfe20dcb7bab1aede3af4b0d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODEzMw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403088133", "body": "Should we add a check state to ensure that we fail in case that we request a different size?", "bodyText": "Should we add a check state to ensure that we fail in case that we request a different size?", "bodyHTML": "<p dir=\"auto\">Should we add a check state to ensure that we fail in case that we request a different size?</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:30:29Z", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesResourceManager.java", "diffHunk": "@@ -232,57 +229,75 @@ private void recoverWorkerNodesFromPreviousAttempts() throws ResourceManagerExce\n \t\t\t++currentMaxAttemptId);\n \t}\n \n-\tprivate void requestKubernetesPod() {\n-\t\tnumPendingPodRequests++;\n+\tprivate void requestKubernetesPod(WorkerResourceSpec workerResourceSpec) {\n+\t\tfinal KubernetesTaskManagerParameters parameters =\n+\t\t\tcreateKubernetesTaskManagerParameters(workerResourceSpec);\n+\n+\t\tpodWorkerResources.put(parameters.getPodName(), workerResourceSpec);\n+\t\tfinal int pendingWorkerNum = pendingWorkerCounter.increaseAndGet(workerResourceSpec);\n \n \t\tlog.info(\"Requesting new TaskManager pod with <{},{}>. Number pending requests {}.\",\n-\t\t\tdefaultMemoryMB,\n-\t\t\tdefaultCpus,\n-\t\t\tnumPendingPodRequests);\n+\t\t\tparameters.getTaskManagerMemoryMB(),\n+\t\t\tparameters.getTaskManagerCPU(),\n+\t\t\tpendingWorkerNum);\n+\t\tlog.info(\"TaskManager {} will be started with {}.\", parameters.getPodName(), workerResourceSpec);\n+\n+\t\tfinal KubernetesPod taskManagerPod =\n+\t\t\tKubernetesTaskManagerFactory.createTaskManagerComponent(parameters);\n+\t\tkubeClient.createTaskManagerPod(taskManagerPod);\n+\t}\n+\n+\tprivate KubernetesTaskManagerParameters createKubernetesTaskManagerParameters(WorkerResourceSpec workerResourceSpec) {\n+\t\t// TODO: need to unset process/flink memory size from configuration if dynamic worker resource is activated", "originalCommit": "d7a0626255f2445cfe20dcb7bab1aede3af4b0d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODQ3Mw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403088473", "bodyText": "Btw: where do we change the Configuration?", "author": "tillrohrmann", "createdAt": "2020-04-03T15:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzMTM1NA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403831354", "bodyText": "The purpose of this TODO is to avoid conflict between workerResourceSpec and process.size/flink.size in flinkConfig. It is not about forbidden workers with different sizes. Actually, one of the main purpose of this PR is to make the RMs not assuming workers have the same size.\nI was thinking about change the Configuration at creating the SlotManager, where we known which implementation of SlotManager is used and unset flink/process size if the plugin supports dynamic worker sizes.", "author": "xintongsong", "createdAt": "2020-04-06T05:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyMTIzNA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404121234", "bodyText": "So do we have the requirement that what's written in the config and what's specified in workerResourceSpec have to be the same? If yes, then I think we should add a check state here. This will ensure that we remember what needs to be adjusted in order to support dynamic worker resources.", "author": "tillrohrmann", "createdAt": "2020-04-06T14:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3OTc3OA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404479778", "bodyText": "I don't think we have that requirement.\nThe purpose of unsetting flink/process size from configuration, is to make sure the values in workerResourceSpec (task heap, task off-heap, network, managed) and those not in workerResorceSpec(framework heap, framework off-heap, jvm metaspace, jvm overhead, total flink, total process) can put together w/o conflict.\nIf they cannot be put together, we don't really need a check state to remind us because the generating of taskExecutorProcessSpec will fail.", "author": "xintongsong", "createdAt": "2020-04-07T01:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTY5MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404639691", "bodyText": "Ok, instead of creating a TODO, I would suggest to create a JIRA ticket which is linked as a follow up. TODO's tend to be forgotten.", "author": "tillrohrmann", "createdAt": "2020-04-07T08:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMzYwNg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r405923606", "bodyText": "I've created FLINK-17061 to track this issue.", "author": "xintongsong", "createdAt": "2020-04-09T02:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4OTY2OQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403089669", "body": "I think I would hide `pendingWorkerCounter` behind some methods which the base class provides.", "bodyText": "I think I would hide pendingWorkerCounter behind some methods which the base class provides.", "bodyHTML": "<p dir=\"auto\">I think I would hide <code>pendingWorkerCounter</code> behind some methods which the base class provides.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:32:47Z", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesResourceManager.java", "diffHunk": "@@ -232,57 +229,75 @@ private void recoverWorkerNodesFromPreviousAttempts() throws ResourceManagerExce\n \t\t\t++currentMaxAttemptId);\n \t}\n \n-\tprivate void requestKubernetesPod() {\n-\t\tnumPendingPodRequests++;\n+\tprivate void requestKubernetesPod(WorkerResourceSpec workerResourceSpec) {\n+\t\tfinal KubernetesTaskManagerParameters parameters =\n+\t\t\tcreateKubernetesTaskManagerParameters(workerResourceSpec);\n+\n+\t\tpodWorkerResources.put(parameters.getPodName(), workerResourceSpec);\n+\t\tfinal int pendingWorkerNum = pendingWorkerCounter.increaseAndGet(workerResourceSpec);\n \n \t\tlog.info(\"Requesting new TaskManager pod with <{},{}>. Number pending requests {}.\",\n-\t\t\tdefaultMemoryMB,\n-\t\t\tdefaultCpus,\n-\t\t\tnumPendingPodRequests);\n+\t\t\tparameters.getTaskManagerMemoryMB(),\n+\t\t\tparameters.getTaskManagerCPU(),\n+\t\t\tpendingWorkerNum);\n+\t\tlog.info(\"TaskManager {} will be started with {}.\", parameters.getPodName(), workerResourceSpec);\n+\n+\t\tfinal KubernetesPod taskManagerPod =\n+\t\t\tKubernetesTaskManagerFactory.createTaskManagerComponent(parameters);\n+\t\tkubeClient.createTaskManagerPod(taskManagerPod);\n+\t}\n+\n+\tprivate KubernetesTaskManagerParameters createKubernetesTaskManagerParameters(WorkerResourceSpec workerResourceSpec) {\n+\t\t// TODO: need to unset process/flink memory size from configuration if dynamic worker resource is activated\n+\t\tfinal TaskExecutorProcessSpec taskExecutorProcessSpec =\n+\t\t\tTaskExecutorProcessUtils.processSpecFromWorkerResourceSpec(flinkConfig, workerResourceSpec);\n \n \t\tfinal String podName = String.format(\n \t\t\tTASK_MANAGER_POD_FORMAT,\n \t\t\tclusterId,\n \t\t\tcurrentMaxAttemptId,\n \t\t\t++currentMaxPodId);\n \n+\t\tfinal ContaineredTaskManagerParameters taskManagerParameters =\n+\t\t\tContaineredTaskManagerParameters.create(flinkConfig, taskExecutorProcessSpec);\n+\n \t\tfinal String dynamicProperties =\n \t\t\tBootstrapTools.getDynamicPropertiesAsString(flinkClientConfig, flinkConfig);\n \n-\t\tfinal KubernetesTaskManagerParameters kubernetesTaskManagerParameters = new KubernetesTaskManagerParameters(\n+\t\treturn new KubernetesTaskManagerParameters(\n \t\t\tflinkConfig,\n \t\t\tpodName,\n \t\t\tdynamicProperties,\n \t\t\ttaskManagerParameters);\n-\n-\t\tfinal KubernetesPod taskManagerPod =\n-\t\t\tKubernetesTaskManagerFactory.createTaskManagerComponent(kubernetesTaskManagerParameters);\n-\n-\t\tlog.info(\"TaskManager {} will be started with {}.\", podName, taskExecutorProcessSpec);\n-\t\tkubeClient.createTaskManagerPod(taskManagerPod);\n \t}\n \n \t/**\n \t * Request new pod if pending pods cannot satisfy pending slot requests.\n \t */\n-\tprivate void requestKubernetesPodIfRequired() {\n-\t\tfinal int requiredTaskManagers = getNumberRequiredTaskManagers();\n+\tprivate void requestKubernetesPodIfRequired(WorkerResourceSpec workerResourceSpec) {\n+\t\tfinal int requiredTaskManagers = getPendingWorkerNums().get(workerResourceSpec);\n+\t\tfinal int pendingWorkerNum = pendingWorkerCounter.getNum(workerResourceSpec);", "originalCommit": "d7a0626255f2445cfe20dcb7bab1aede3af4b0d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MDk4OA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403090988", "body": "Nit: Changing the return type to `Optional<WorkerResourceSpec>` could make the contract of this method a bit more explicit.", "bodyText": "Nit: Changing the return type to Optional<WorkerResourceSpec> could make the contract of this method a bit more explicit.", "bodyHTML": "<p dir=\"auto\">Nit: Changing the return type to <code>Optional&lt;WorkerResourceSpec&gt;</code> could make the contract of this method a bit more explicit.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:34:36Z", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesResourceManager.java", "diffHunk": "@@ -232,57 +229,75 @@ private void recoverWorkerNodesFromPreviousAttempts() throws ResourceManagerExce\n \t\t\t++currentMaxAttemptId);\n \t}\n \n-\tprivate void requestKubernetesPod() {\n-\t\tnumPendingPodRequests++;\n+\tprivate void requestKubernetesPod(WorkerResourceSpec workerResourceSpec) {\n+\t\tfinal KubernetesTaskManagerParameters parameters =\n+\t\t\tcreateKubernetesTaskManagerParameters(workerResourceSpec);\n+\n+\t\tpodWorkerResources.put(parameters.getPodName(), workerResourceSpec);\n+\t\tfinal int pendingWorkerNum = pendingWorkerCounter.increaseAndGet(workerResourceSpec);\n \n \t\tlog.info(\"Requesting new TaskManager pod with <{},{}>. Number pending requests {}.\",\n-\t\t\tdefaultMemoryMB,\n-\t\t\tdefaultCpus,\n-\t\t\tnumPendingPodRequests);\n+\t\t\tparameters.getTaskManagerMemoryMB(),\n+\t\t\tparameters.getTaskManagerCPU(),\n+\t\t\tpendingWorkerNum);\n+\t\tlog.info(\"TaskManager {} will be started with {}.\", parameters.getPodName(), workerResourceSpec);\n+\n+\t\tfinal KubernetesPod taskManagerPod =\n+\t\t\tKubernetesTaskManagerFactory.createTaskManagerComponent(parameters);\n+\t\tkubeClient.createTaskManagerPod(taskManagerPod);\n+\t}\n+\n+\tprivate KubernetesTaskManagerParameters createKubernetesTaskManagerParameters(WorkerResourceSpec workerResourceSpec) {\n+\t\t// TODO: need to unset process/flink memory size from configuration if dynamic worker resource is activated\n+\t\tfinal TaskExecutorProcessSpec taskExecutorProcessSpec =\n+\t\t\tTaskExecutorProcessUtils.processSpecFromWorkerResourceSpec(flinkConfig, workerResourceSpec);\n \n \t\tfinal String podName = String.format(\n \t\t\tTASK_MANAGER_POD_FORMAT,\n \t\t\tclusterId,\n \t\t\tcurrentMaxAttemptId,\n \t\t\t++currentMaxPodId);\n \n+\t\tfinal ContaineredTaskManagerParameters taskManagerParameters =\n+\t\t\tContaineredTaskManagerParameters.create(flinkConfig, taskExecutorProcessSpec);\n+\n \t\tfinal String dynamicProperties =\n \t\t\tBootstrapTools.getDynamicPropertiesAsString(flinkClientConfig, flinkConfig);\n \n-\t\tfinal KubernetesTaskManagerParameters kubernetesTaskManagerParameters = new KubernetesTaskManagerParameters(\n+\t\treturn new KubernetesTaskManagerParameters(\n \t\t\tflinkConfig,\n \t\t\tpodName,\n \t\t\tdynamicProperties,\n \t\t\ttaskManagerParameters);\n-\n-\t\tfinal KubernetesPod taskManagerPod =\n-\t\t\tKubernetesTaskManagerFactory.createTaskManagerComponent(kubernetesTaskManagerParameters);\n-\n-\t\tlog.info(\"TaskManager {} will be started with {}.\", podName, taskExecutorProcessSpec);\n-\t\tkubeClient.createTaskManagerPod(taskManagerPod);\n \t}\n \n \t/**\n \t * Request new pod if pending pods cannot satisfy pending slot requests.\n \t */\n-\tprivate void requestKubernetesPodIfRequired() {\n-\t\tfinal int requiredTaskManagers = getNumberRequiredTaskManagers();\n+\tprivate void requestKubernetesPodIfRequired(WorkerResourceSpec workerResourceSpec) {\n+\t\tfinal int requiredTaskManagers = getPendingWorkerNums().get(workerResourceSpec);\n+\t\tfinal int pendingWorkerNum = pendingWorkerCounter.getNum(workerResourceSpec);\n \n-\t\tif (requiredTaskManagers > numPendingPodRequests) {\n-\t\t\trequestKubernetesPod();\n+\t\tif (requiredTaskManagers > pendingWorkerNum) {\n+\t\t\trequestKubernetesPod(workerResourceSpec);\n \t\t}\n \t}\n \n \tprivate void removePodIfTerminated(KubernetesPod pod) {\n \t\tif (pod.isTerminated()) {\n \t\t\tkubeClient.stopPod(pod.getName());\n-\t\t\tfinal KubernetesWorkerNode kubernetesWorkerNode = workerNodes.remove(new ResourceID(pod.getName()));\n-\t\t\tif (kubernetesWorkerNode != null) {\n-\t\t\t\trequestKubernetesPodIfRequired();\n+\t\t\tfinal WorkerResourceSpec workerResourceSpec = removeWorkerNodeAndResourceSpec(new ResourceID(pod.getName()));\n+\t\t\tif (workerResourceSpec != null) {\n+\t\t\t\trequestKubernetesPodIfRequired(workerResourceSpec);\n \t\t\t}\n \t\t}\n \t}\n \n+\tprivate WorkerResourceSpec removeWorkerNodeAndResourceSpec(ResourceID resourceId) {", "originalCommit": "d7a0626255f2445cfe20dcb7bab1aede3af4b0d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5Mjc3Mw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403092773", "body": "I think this is pretty much whitebox testing as it strongly relies on internal implementation details. I would recommend to go another way and to rely either on the public APIs of the component or to encapsulate the bookkeeping logic so that it can be tested separately.", "bodyText": "I think this is pretty much whitebox testing as it strongly relies on internal implementation details. I would recommend to go another way and to rely either on the public APIs of the component or to encapsulate the bookkeeping logic so that it can be tested separately.", "bodyHTML": "<p dir=\"auto\">I think this is pretty much whitebox testing as it strongly relies on internal implementation details. I would recommend to go another way and to rely either on the public APIs of the component or to encapsulate the bookkeeping logic so that it can be tested separately.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:37:20Z", "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/KubernetesResourceManagerTest.java", "diffHunk": "@@ -176,6 +185,15 @@ MainThreadExecutor getMainThreadExecutorForTesting() {\n \t\tSlotManager getSlotManager() {\n \t\t\treturn this.slotManager;\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic Map<WorkerResourceSpec, Integer> getPendingWorkerNums() {\n+\t\t\treturn customPendingWorkerNums != null ? customPendingWorkerNums : super.getPendingWorkerNums();\n+\t\t}\n+\n+\t\tpublic void setCustomPendingWorkerNums(final Map<WorkerResourceSpec, Integer> customPendingWorkerNums) {\n+\t\t\tthis.customPendingWorkerNums = customPendingWorkerNums;\n+\t\t}", "originalCommit": "d7a0626255f2445cfe20dcb7bab1aede3af4b0d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5Mzk5Nw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403093997", "body": "I would recommend to not test the component like this. It requires detailed knowledge of the component's internals and makes it harder to evolve it because this test relies on the fact that the `KubernetesResourceManager` has a map of `WorkerResourceSpec` to `Integers`.", "bodyText": "I would recommend to not test the component like this. It requires detailed knowledge of the component's internals and makes it harder to evolve it because this test relies on the fact that the KubernetesResourceManager has a map of WorkerResourceSpec to Integers.", "bodyHTML": "<p dir=\"auto\">I would recommend to not test the component like this. It requires detailed knowledge of the component's internals and makes it harder to evolve it because this test relies on the fact that the <code>KubernetesResourceManager</code> has a map of <code>WorkerResourceSpec</code> to <code>Integers</code>.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:39:08Z", "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/KubernetesResourceManagerTest.java", "diffHunk": "@@ -321,6 +339,47 @@ public void testGetCpuCoresNumSlots() {\n \t\tassertThat(resourceManager.getCpuCores(configuration), is(3.0));\n \t}\n \n+\t@Test\n+\tpublic void testStartAndRecoverVariousResourceSpec() {\n+\t\t// Start two workers with different resources\n+\t\tfinal WorkerResourceSpec workerResourceSpec1 = new WorkerResourceSpec(1.0, 100, 0, 100, 100);\n+\t\tfinal WorkerResourceSpec workerResourceSpec2 = new WorkerResourceSpec(1.0, 99, 0, 100, 100);\n+\t\tresourceManager.startNewWorker(workerResourceSpec1);\n+\t\tresourceManager.startNewWorker(workerResourceSpec2);\n+\n+\t\t// Verify two pods with both worker resources are started\n+\t\tfinal PodList initialPodList = kubeClient.pods().list();\n+\t\tassertEquals(2, initialPodList.getItems().size());\n+\t\tfinal Pod initialPod1 = getPodContainsStrInArgs(initialPodList, TaskManagerOptions.TASK_HEAP_MEMORY.key() + \"=\" + (100L << 20));\n+\t\tfinal Pod initialPod2 = getPodContainsStrInArgs(initialPodList, TaskManagerOptions.TASK_HEAP_MEMORY.key() + \"=\" + (99L << 20));\n+\n+\t\t// Notify resource manager about pods added.\n+\t\tfinal KubernetesPod initialKubernetesPod1 = new KubernetesPod(initialPod1);\n+\t\tfinal KubernetesPod initialKubernetesPod2 = new KubernetesPod(initialPod2);\n+\t\tresourceManager.onAdded(ImmutableList.of(initialKubernetesPod1, initialKubernetesPod2));\n+\n+\t\t// Terminate pod1.\n+\t\tterminatePod(initialPod1);\n+\t\tresourceManager.setCustomPendingWorkerNums(Collections.singletonMap(workerResourceSpec1, 1));", "originalCommit": "d7a0626255f2445cfe20dcb7bab1aede3af4b0d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNDYwNA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403834604", "bodyText": "OK, I'll try to pass in a testing SlotManager and control what to be returned from getPendingWorkerNums. How does that sound like?", "author": "xintongsong", "createdAt": "2020-04-06T05:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5Mzk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyMzQ0NQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404123445", "bodyText": "This sounds good.", "author": "tillrohrmann", "createdAt": "2020-04-06T14:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5Mzk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NzI3NQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403097275", "body": "I think this class is large enough to warrant its own file. This would also decrease the size of this source code file a bit.", "bodyText": "I think this class is large enough to warrant its own file. This would also decrease the size of this source code file a bit.", "bodyHTML": "<p dir=\"auto\">I think this class is large enough to warrant its own file. This would also decrease the size of this source code file a bit.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:44:20Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -615,4 +632,85 @@ protected double getCpuCores(final Configuration configuration) {\n \t\t//noinspection NumericCastThatLosesPrecision\n \t\treturn cpuCoresLong;\n \t}\n+\n+\t/**\n+\t * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+\t */\n+\t@VisibleForTesting\n+\tstatic class WorkerSpecContainerResourceAdapter {", "originalCommit": "ef959ec03f964ceb0664388b4b72c8eac5773fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5OTU5MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403099591", "body": "I would suggest to add a check state to ensure that we fail once we enable dynamic worker resources.", "bodyText": "I would suggest to add a check state to ensure that we fail once we enable dynamic worker resources.", "bodyHTML": "<p dir=\"auto\">I would suggest to add a check state to ensure that we fail once we enable dynamic worker resources.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:48:00Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -615,4 +632,85 @@ protected double getCpuCores(final Configuration configuration) {\n \t\t//noinspection NumericCastThatLosesPrecision\n \t\treturn cpuCoresLong;\n \t}\n+\n+\t/**\n+\t * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+\t */\n+\t@VisibleForTesting\n+\tstatic class WorkerSpecContainerResourceAdapter {\n+\t\tprivate final Configuration flinkConfig;\n+\t\tprivate final int minMemMB;\n+\t\tprivate final int minVcore;\n+\t\tprivate final boolean matchVcores;\n+\t\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\t\tprivate final Map<Resource, Collection<WorkerResourceSpec>> containerResourceToWorkerSpecs;\n+\t\tprivate final Map<Integer, Collection<Resource>> containerMemoryToContainerResource;\n+\n+\t\t@VisibleForTesting\n+\t\tWorkerSpecContainerResourceAdapter(\n+\t\t\t\tfinal Configuration flinkConfig,\n+\t\t\t\tfinal int minMemMB,\n+\t\t\t\tfinal int minVcore,\n+\t\t\t\tfinal boolean matchVcores) {\n+\t\t\tthis.flinkConfig = Preconditions.checkNotNull(flinkConfig);\n+\t\t\tthis.minMemMB = minMemMB;\n+\t\t\tthis.minVcore = minVcore;\n+\t\t\tthis.matchVcores = matchVcores;\n+\t\t\tworkerSpecToContainerResource = new HashMap<>();\n+\t\t\tcontainerResourceToWorkerSpecs = new HashMap<>();\n+\t\t\tcontainerMemoryToContainerResource = new HashMap<>();\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tResource getContainerResource(final WorkerResourceSpec workerResourceSpec) {\n+\t\t\treturn workerSpecToContainerResource.computeIfAbsent(\n+\t\t\t\tPreconditions.checkNotNull(workerResourceSpec),\n+\t\t\t\tthis::createAndMapContainerResource);\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tCollection<WorkerResourceSpec> getWorkerSpecs(final Resource containerResource) {\n+\t\t\treturn getEquivalentContainerResource(containerResource).stream()\n+\t\t\t\t.flatMap(resource -> containerResourceToWorkerSpecs.getOrDefault(resource, Collections.emptyList()).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tCollection<Resource> getEquivalentContainerResource(final Resource containerResource) {\n+\t\t\t// Yarn might ignore the requested vcores, depending on its configurations.\n+\t\t\t// In such cases, we should also not matching vcores.\n+\t\t\treturn matchVcores ?\n+\t\t\t\tCollections.singletonList(containerResource) :\n+\t\t\t\tcontainerMemoryToContainerResource.getOrDefault(containerResource.getMemory(), Collections.emptyList());\n+\t\t}\n+\n+\t\tprivate Resource createAndMapContainerResource(final WorkerResourceSpec workerResourceSpec) {\n+\t\t\t// TODO: need to unset process/flink memory size from configuration if dynamic worker resource is activated", "originalCommit": "ef959ec03f964ceb0664388b4b72c8eac5773fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNTUyNA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403835524", "bodyText": "Same here. I think the RM implementations should not be aware of whether the dynamic worker resources is activated or not.", "author": "xintongsong", "createdAt": "2020-04-06T05:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5OTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyNDE3MA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404124170", "bodyText": "In general I agree unless it is not yet fully supported by the RM implementation. If it is, then I guess we also don't need this comment. If it is not supported, then the check state will help us to remember what needs to be changed.", "author": "tillrohrmann", "createdAt": "2020-04-06T14:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5OTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MzA1MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404483051", "bodyText": "I think after these PRs, the RM implementations should fully support dynamic worker resources. The problem is that we not yet have a SM implementation that supports it. Once we have a SM implementation that supports dynamic worker resources, we should unset the process/flink size from configuration when using it. And if we don't do the unset, Flink might fail at the places of these TODOs. So I added the TODOs as reminders, that if later these codes fail this might be the reason.", "author": "xintongsong", "createdAt": "2020-04-07T01:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5OTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTA4OA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404641088", "bodyText": "The current SM will be initialized with the proper default WorkerResourceSpec derived from Flink's configuration, right? Hence, we could already resolve this TODO, right? Then there would not be any problems with enabling support for dynamic worker resources.", "author": "tillrohrmann", "createdAt": "2020-04-07T08:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5OTU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNDg3Mw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403104873", "body": "If we are only interested in the equivalence class, then I would suggest to change the type from `Collection` to `Set`.", "bodyText": "If we are only interested in the equivalence class, then I would suggest to change the type from Collection to Set.", "bodyHTML": "<p dir=\"auto\">If we are only interested in the equivalence class, then I would suggest to change the type from <code>Collection</code> to <code>Set</code>.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:56:43Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -615,4 +632,85 @@ protected double getCpuCores(final Configuration configuration) {\n \t\t//noinspection NumericCastThatLosesPrecision\n \t\treturn cpuCoresLong;\n \t}\n+\n+\t/**\n+\t * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+\t */\n+\t@VisibleForTesting\n+\tstatic class WorkerSpecContainerResourceAdapter {\n+\t\tprivate final Configuration flinkConfig;\n+\t\tprivate final int minMemMB;\n+\t\tprivate final int minVcore;\n+\t\tprivate final boolean matchVcores;\n+\t\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\t\tprivate final Map<Resource, Collection<WorkerResourceSpec>> containerResourceToWorkerSpecs;\n+\t\tprivate final Map<Integer, Collection<Resource>> containerMemoryToContainerResource;\n+\n+\t\t@VisibleForTesting\n+\t\tWorkerSpecContainerResourceAdapter(\n+\t\t\t\tfinal Configuration flinkConfig,\n+\t\t\t\tfinal int minMemMB,\n+\t\t\t\tfinal int minVcore,\n+\t\t\t\tfinal boolean matchVcores) {\n+\t\t\tthis.flinkConfig = Preconditions.checkNotNull(flinkConfig);\n+\t\t\tthis.minMemMB = minMemMB;\n+\t\t\tthis.minVcore = minVcore;\n+\t\t\tthis.matchVcores = matchVcores;\n+\t\t\tworkerSpecToContainerResource = new HashMap<>();\n+\t\t\tcontainerResourceToWorkerSpecs = new HashMap<>();\n+\t\t\tcontainerMemoryToContainerResource = new HashMap<>();\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tResource getContainerResource(final WorkerResourceSpec workerResourceSpec) {\n+\t\t\treturn workerSpecToContainerResource.computeIfAbsent(\n+\t\t\t\tPreconditions.checkNotNull(workerResourceSpec),\n+\t\t\t\tthis::createAndMapContainerResource);\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tCollection<WorkerResourceSpec> getWorkerSpecs(final Resource containerResource) {\n+\t\t\treturn getEquivalentContainerResource(containerResource).stream()\n+\t\t\t\t.flatMap(resource -> containerResourceToWorkerSpecs.getOrDefault(resource, Collections.emptyList()).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\t@VisibleForTesting\n+\t\tCollection<Resource> getEquivalentContainerResource(final Resource containerResource) {", "originalCommit": "ef959ec03f964ceb0664388b4b72c8eac5773fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNTgzMA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403105830", "body": "If we are interested in every `WorkerResourceSpec` which ever resulted into a given `Resource`, then I would suggest to change the value type to `List`. Otherwise one could instantiate this field with a `Set` which has different semantics.", "bodyText": "If we are interested in every WorkerResourceSpec which ever resulted into a given Resource, then I would suggest to change the value type to List. Otherwise one could instantiate this field with a Set which has different semantics.", "bodyHTML": "<p dir=\"auto\">If we are interested in every <code>WorkerResourceSpec</code> which ever resulted into a given <code>Resource</code>, then I would suggest to change the value type to <code>List</code>. Otherwise one could instantiate this field with a <code>Set</code> which has different semantics.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T15:58:11Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -615,4 +632,85 @@ protected double getCpuCores(final Configuration configuration) {\n \t\t//noinspection NumericCastThatLosesPrecision\n \t\treturn cpuCoresLong;\n \t}\n+\n+\t/**\n+\t * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+\t */\n+\t@VisibleForTesting\n+\tstatic class WorkerSpecContainerResourceAdapter {\n+\t\tprivate final Configuration flinkConfig;\n+\t\tprivate final int minMemMB;\n+\t\tprivate final int minVcore;\n+\t\tprivate final boolean matchVcores;\n+\t\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\t\tprivate final Map<Resource, Collection<WorkerResourceSpec>> containerResourceToWorkerSpecs;", "originalCommit": "ef959ec03f964ceb0664388b4b72c8eac5773fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNzA0Ng==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403107046", "body": "Does this mean that one has to configure ones Flink cluster depending on the configuration of the Yarn cluster? What happens if one forgets about Flink?", "bodyText": "Does this mean that one has to configure ones Flink cluster depending on the configuration of the Yarn cluster? What happens if one forgets about Flink?", "bodyHTML": "<p dir=\"auto\">Does this mean that one has to configure ones Flink cluster depending on the configuration of the Yarn cluster? What happens if one forgets about Flink?</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:00:02Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/configuration/YarnConfigOptionsInternal.java", "diffHunk": "@@ -34,4 +37,24 @@\n \t\t\t\t\t.stringType()\n \t\t\t\t\t.noDefaultValue()\n \t\t\t\t\t.withDescription(\"**DO NOT USE** The location of the log config file, e.g. the path to your log4j.properties for log4j.\");\n+\n+\t/**\n+\t * **DO NO USE** Whether {@link YarnResourceManager} should match the vcores of allocated containers with those requested.\n+\t *\n+\t * <p>By default, Yarn ignores vcores in the container requests, and always allocate 1 vcore for each container.\n+\t * Iff 'yarn.scheduler.capacity.resource-calculator' is set to 'DominantResourceCalculator' for Yarn, will it\n+\t * allocate container vcores as requested. Unfortunately, this configuration option is dedicated for Yarn Scheduler,\n+\t * and is only accessible to applications in Hadoop 2.6+.\n+\t *\n+\t * <p>ATM, it should be fine to not match vcores, because with the current {@link SlotManagerImpl} all the TM\n+\t * containers should have the same resources.\n+\t *\n+\t * <p>If later we add another {@link SlotManager} implementation that may have TMs with different resources, we can\n+\t * switch this option on only for the new SM, and the new SM can also be available on Hadoop 2.6+ only.\n+\t */\n+\tpublic static final ConfigOption<Boolean> MATCH_CONTAINER_VCORES =\n+\t\t\tkey(\"$internal.yarn.resourcemanager.enable-vcore-matching\")\n+\t\t\t\t\t.booleanType()\n+\t\t\t\t\t.defaultValue(false)\n+\t\t\t\t\t.withDescription(\"**DO NOT USE** Whether YarnResourceManager should match the container vcores.\");", "originalCommit": "ef959ec03f964ceb0664388b4b72c8eac5773fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MDE0Mg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403840142", "bodyText": "For the time being, yes.\nHadoop supports programmatically get this configuration from RegisterApplicationMasterResponse starting from 2.6.x, so we don't need users to manually configure this. But I believe the lowest Hadoop version Flink supports is 2.4.x, so we do not have a good way other than having user configure it.\nThis option should only affect the cases with dynamic worker resources. If the option is not set on a Yarn cluster that matches vcores, then workers with different cpu but same memory may not be schedules correctly. E.g., if Flink wants to start task executor t1 in a container with resources <1GB, 1 vcore>, and t2 in a container with resources <1GB, 2 vcore>, the actually resource available to t1 might be <1GB, 2 vcore> and to t2 might be <1GB, 1 vcore>.", "author": "xintongsong", "createdAt": "2020-04-06T05:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNzA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyODk2Mg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404128962", "bodyText": "Ok, thanks for the clarification. Automatically configuring this flag with Hadoop >= 2.6 sounds like a good idea.", "author": "tillrohrmann", "createdAt": "2020-04-06T14:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNzA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwODU0Mw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403108543", "body": "It is usually easier to understand if one use an enum instead of boolean because one can give the different values expressive names (e.g. `MATCH_VCORES`, `IGNORE_VCORES`).", "bodyText": "It is usually easier to understand if one use an enum instead of boolean because one can give the different values expressive names (e.g. MATCH_VCORES, IGNORE_VCORES).", "bodyHTML": "<p dir=\"auto\">It is usually easier to understand if one use an enum instead of boolean because one can give the different values expressive names (e.g. <code>MATCH_VCORES</code>, <code>IGNORE_VCORES</code>).</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:02:33Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/YarnResourceManagerTest.java", "diffHunk": "@@ -584,6 +590,85 @@ public void testGetCpuExceedMaxInt() throws Exception {\n \t\t}};\n \t}\n \n+\t@Test\n+\tpublic void testWorkerSpecContainerResourceAdapter_MatchVcores() {\n+\t\tfinal int minMemMB = 100;\n+\t\tfinal int minVcore = 10;\n+\t\tfinal YarnResourceManager.WorkerSpecContainerResourceAdapter adapter =\n+\t\t\tnew YarnResourceManager.WorkerSpecContainerResourceAdapter(\n+\t\t\t\tgetConfigProcessSpecEqualsWorkerSpec(), minMemMB, minVcore, true);", "originalCommit": "ef959ec03f964ceb0664388b4b72c8eac5773fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExMzM5OA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403113398", "body": "I like the idea of getting rid of Mockito but how do we ensure that this works with all Hadoop versions? Looking at Hadoop 2.10. https://github.com/apache/hadoop/blob/release-2.10.0-RC1/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Container.java it looks as if the container has gotten some more methods.", "bodyText": "I like the idea of getting rid of Mockito but how do we ensure that this works with all Hadoop versions? Looking at Hadoop 2.10. https://github.com/apache/hadoop/blob/release-2.10.0-RC1/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Container.java it looks as if the container has gotten some more methods.", "bodyHTML": "<p dir=\"auto\">I like the idea of getting rid of Mockito but how do we ensure that this works with all Hadoop versions? Looking at Hadoop 2.10. <a href=\"https://github.com/apache/hadoop/blob/release-2.10.0-RC1/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Container.java\">https://github.com/apache/hadoop/blob/release-2.10.0-RC1/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Container.java</a> it looks as if the container has gotten some more methods.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:10:41Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingContainer.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.hadoop.yarn.api.records.Container;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.NodeId;\n+import org.apache.hadoop.yarn.api.records.Priority;\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.apache.hadoop.yarn.api.records.Token;\n+\n+/**\n+ * A {@link Container} implementation for testing.\n+ */\n+class TestingContainer extends Container {", "originalCommit": "2f2053259d86240c56ad4498eadae237ab30e979", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MzkyMQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403843921", "bodyText": "Thanks for the pointer. Then I think we can extends ContainerPBImpl instead, similar to TestingYarnAMRMClientAsync.\nI think what we really need is to override the following methods.\n\ngetId\ngetNodeId\ngetResource\ngetPriority\n\nI'm aware that ContainerPBImpl is annotated Unstable, but we need these four methods anyway. If a future Hadoop version removed either of the four methods, then neither the original mockContainer nor the Flink production codes where these methods are used will work anymore.", "author": "xintongsong", "createdAt": "2020-04-06T05:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExMzM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzNDUxNg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404134516", "bodyText": "Using ContainerPBImpl should work.", "author": "tillrohrmann", "createdAt": "2020-04-06T14:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExMzM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExNTc0MA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403115740", "body": "Shouldn't we fail in case someone calls `setContainerId` here? Otherwise it might go unnoticed and result in some strange behaviour/failure.", "bodyText": "Shouldn't we fail in case someone calls setContainerId here? Otherwise it might go unnoticed and result in some strange behaviour/failure.", "bodyHTML": "<p dir=\"auto\">Shouldn't we fail in case someone calls <code>setContainerId</code> here? Otherwise it might go unnoticed and result in some strange behaviour/failure.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:13:12Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingContainerStatus.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.ContainerState;\n+import org.apache.hadoop.yarn.api.records.ContainerStatus;\n+\n+/**\n+ * A {@link ContainerStatus} implementation for testing.\n+ */\n+class TestingContainerStatus extends ContainerStatus {\n+\n+\tprivate final ContainerId containerId;\n+\tprivate final ContainerState containerState;\n+\tprivate final String diagnostics;\n+\tprivate final int exitStatus;\n+\n+\tTestingContainerStatus(\n+\t\tfinal ContainerId containerId,\n+\t\tfinal ContainerState containerState,\n+\t\tfinal String diagnostics,\n+\t\tfinal int exitStatus) {\n+\n+\t\tthis.containerId = containerId;\n+\t\tthis.containerState = containerState;\n+\t\tthis.diagnostics = diagnostics;\n+\t\tthis.exitStatus = exitStatus;\n+\t}\n+\n+\t@Override\n+\tpublic ContainerId getContainerId() {\n+\t\treturn containerId;\n+\t}\n+\n+\t@Override\n+\tpublic void setContainerId(ContainerId containerId) {\n+", "originalCommit": "dfde526f4f6cea035e7774b59c3b8987fd4ae973", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExODIyMw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403118223", "body": "`AMRMClientAsyncImpl` is annotated as unstable. I'm not sure how will the testing implementation works across different Yarn versions. Have we tried this out?", "bodyText": "AMRMClientAsyncImpl is annotated as unstable. I'm not sure how will the testing implementation works across different Yarn versions. Have we tried this out?", "bodyHTML": "<p dir=\"auto\"><code>AMRMClientAsyncImpl</code> is annotated as unstable. I'm not sure how will the testing implementation works across different Yarn versions. Have we tried this out?</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:15:43Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingYarnAMRMClientAsync.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.api.java.tuple.Tuple4;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.Priority;\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.apache.hadoop.yarn.client.api.AMRMClient;\n+import org.apache.hadoop.yarn.client.api.async.AMRMClientAsync;\n+import org.apache.hadoop.yarn.client.api.async.impl.AMRMClientAsyncImpl;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+/**\n+ * A Yarn {@link AMRMClientAsync} implementation for testing.\n+ */\n+public class TestingYarnAMRMClientAsync extends AMRMClientAsyncImpl<AMRMClient.ContainerRequest> {", "originalCommit": "658172cc8265792b710830a5d2749304cd1b10ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0Njk3MA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403846970", "bodyText": "Same here.\nI'm aware AMRMClientAsyncImpl is annotated as Unstable. But we are only overriding the minimum set of public methods here. If these methods are changed, then neither the original testing codes nor the production codes of Flink could work anymore.\nI have not tried all the Yarn versions. But this should at least work with hadoop 2.4.1 (the default hadoop version if build from sources locally) and 2.8.3 (hadoop version for travis ci tests). I can further verify it with other versions.", "author": "xintongsong", "createdAt": "2020-04-06T06:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExODIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0MjQ0Nw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404142447", "bodyText": "I think my problem with this class is that we are partially overriding an implementation class here. We don't really know how the overridden methods are used internally. Looking at the code, it looks as if they are all forwarding the calls to client. From this perspective it might look fine but if you take a look at getAvailableResources, which has not been overridden, then it also calls client. Do we know that there is no contract between the overridden methods and getAvailableResources? What if the client returns different available resources depending on how many container requests have been added? I'm not saying that this is the case, but I want to make that overriding individual methods of an implementation class can cause failures which are hard to predict and even harder to debug.", "author": "tillrohrmann", "createdAt": "2020-04-06T14:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExODIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4ODAzMg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404488032", "bodyText": "I think we cannot guarantee that there's no contract between the overridden methods and the not-overridden methods. Even we can, these internal things might change in future.\nOn the other hand, what we can guarantee is that all the methods used by Flink are overridden. It won't be a problem if an un-overridden method is internally related to the overridden methods but is never called.\nTo that end, I guess we need to make the following changes.\n\nOverride all the methods used in Flink. That means setHeartbeatInterval and unregisterApplicationMaster in addition to those already overridden.\nExplicitly state in the javadoc that all methods used in Flink should be overridden. That might help debug the tests if later Flink uses more public API of AMRMClientAsync.", "author": "xintongsong", "createdAt": "2020-04-07T01:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExODIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNDMyMg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404634322", "bodyText": "I think this is the price we have to pay for integrating with another system. It is always painful and tedious to set up the tests. In parts, this always involves reimplementing the other systems behaviour in mocks. I don't see a better atm. Hence, +1 for what you've proposed.", "author": "tillrohrmann", "createdAt": "2020-04-07T08:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExODIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExODYwMg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403118602", "body": "I'd suggest to use the `BiConsumer` here.", "bodyText": "I'd suggest to use the BiConsumer here.", "bodyHTML": "<p dir=\"auto\">I'd suggest to use the <code>BiConsumer</code> here.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:16:10Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingYarnAMRMClientAsync.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.api.java.tuple.Tuple4;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.Priority;\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.apache.hadoop.yarn.client.api.AMRMClient;\n+import org.apache.hadoop.yarn.client.api.async.AMRMClientAsync;\n+import org.apache.hadoop.yarn.client.api.async.impl.AMRMClientAsyncImpl;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+/**\n+ * A Yarn {@link AMRMClientAsync} implementation for testing.\n+ */\n+public class TestingYarnAMRMClientAsync extends AMRMClientAsyncImpl<AMRMClient.ContainerRequest> {\n+\n+\tprivate Function<Tuple4<Priority, String, Resource, CallbackHandler>, List<? extends Collection<AMRMClient.ContainerRequest>>>\n+\t\tgetMatchingRequestsFunction = ignored -> Collections.emptyList();\n+\tprivate Consumer<Tuple2<AMRMClient.ContainerRequest, CallbackHandler>> addContainerRequestConsumer = ignored -> {};\n+\tprivate Consumer<Tuple2<AMRMClient.ContainerRequest, CallbackHandler>> removeContainerRequestConsumer = ignored -> {};\n+\tprivate Consumer<Tuple2<ContainerId, CallbackHandler>> releaseAssignedContainerConsumer = ignored -> {};", "originalCommit": "658172cc8265792b710830a5d2749304cd1b10ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMTY3MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403121671", "body": "Same here `NMClientAsyncImpl` seems to be unstable and might change depending on the used Yarn version.", "bodyText": "Same here NMClientAsyncImpl seems to be unstable and might change depending on the used Yarn version.", "bodyHTML": "<p dir=\"auto\">Same here <code>NMClientAsyncImpl</code> seems to be unstable and might change depending on the used Yarn version.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:19:46Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingYarnNMClientAsync.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.api.java.tuple.Tuple3;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.yarn.api.records.Container;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.ContainerLaunchContext;\n+import org.apache.hadoop.yarn.api.records.NodeId;\n+import org.apache.hadoop.yarn.client.api.async.NMClientAsync;\n+import org.apache.hadoop.yarn.client.api.async.impl.NMClientAsyncImpl;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * A Yarn {@link NMClientAsync} implementation for testing.\n+ */\n+class TestingYarnNMClientAsync extends NMClientAsyncImpl {", "originalCommit": "8144ec035355decb400352fb6606b55075d13b8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMTk0MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403121941", "body": "I'd suggest to use the `TriConsumer` here.", "bodyText": "I'd suggest to use the TriConsumer here.", "bodyHTML": "<p dir=\"auto\">I'd suggest to use the <code>TriConsumer</code> here.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:20:05Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingYarnNMClientAsync.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.api.java.tuple.Tuple3;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.yarn.api.records.Container;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.ContainerLaunchContext;\n+import org.apache.hadoop.yarn.api.records.NodeId;\n+import org.apache.hadoop.yarn.client.api.async.NMClientAsync;\n+import org.apache.hadoop.yarn.client.api.async.impl.NMClientAsyncImpl;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * A Yarn {@link NMClientAsync} implementation for testing.\n+ */\n+class TestingYarnNMClientAsync extends NMClientAsyncImpl {\n+\n+\tprivate Consumer<Tuple3<Container, ContainerLaunchContext, CallbackHandler>> startContainerAsyncConsumer = ignored -> {};\n+\tprivate Consumer<Tuple3<ContainerId, NodeId, CallbackHandler>> stopContainerAsyncConsumer = ignored -> {};", "originalCommit": "8144ec035355decb400352fb6606b55075d13b8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzg2Nw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403123867", "body": "I'd suggest to use the for-each loop.", "bodyText": "I'd suggest to use the for-each loop.", "bodyHTML": "<p dir=\"auto\">I'd suggest to use the for-each loop.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:22:16Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -363,31 +356,64 @@ public void onContainersCompleted(final List<ContainerStatus> statuses) {\n \t@Override\n \tpublic void onContainersAllocated(List<Container> containers) {\n \t\trunAsync(() -> {\n-\t\t\tlog.info(\"Received {} containers with {} pending container requests.\", containers.size(), numPendingContainerRequests);\n-\t\t\tfinal Collection<AMRMClient.ContainerRequest> pendingRequests = getPendingRequests();\n-\t\t\tfinal Iterator<AMRMClient.ContainerRequest> pendingRequestsIterator = pendingRequests.iterator();\n+\t\t\tlog.info(\"Received {} containers.\", containers.size());\n \n-\t\t\t// number of allocated containers can be larger than the number of pending container requests\n-\t\t\tfinal int numAcceptedContainers = Math.min(containers.size(), numPendingContainerRequests);\n-\t\t\tfinal List<Container> requiredContainers = containers.subList(0, numAcceptedContainers);\n-\t\t\tfinal List<Container> excessContainers = containers.subList(numAcceptedContainers, containers.size());\n-\n-\t\t\tfor (int i = 0; i < requiredContainers.size(); i++) {\n-\t\t\t\tremoveContainerRequest(pendingRequestsIterator.next());\n-\t\t\t}\n-\n-\t\t\texcessContainers.forEach(this::returnExcessContainer);\n-\t\t\trequiredContainers.forEach(this::startTaskExecutorInContainer);\n+\t\t\tgroupContainerByResource(containers).forEach(this::onContainersOfResourceAllocated);", "originalCommit": "785558f7c2944cb50e57e191a242c5e981ab42b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNjAxNQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403126015", "body": "Can it happen that `getWorkerSpecs(resource)` returns a list which contains a `WorkerResourceSpec` twice?", "bodyText": "Can it happen that getWorkerSpecs(resource) returns a list which contains a WorkerResourceSpec twice?", "bodyHTML": "<p dir=\"auto\">Can it happen that <code>getWorkerSpecs(resource)</code> returns a list which contains a <code>WorkerResourceSpec</code> twice?</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:24:52Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -363,31 +356,64 @@ public void onContainersCompleted(final List<ContainerStatus> statuses) {\n \t@Override\n \tpublic void onContainersAllocated(List<Container> containers) {\n \t\trunAsync(() -> {\n-\t\t\tlog.info(\"Received {} containers with {} pending container requests.\", containers.size(), numPendingContainerRequests);\n-\t\t\tfinal Collection<AMRMClient.ContainerRequest> pendingRequests = getPendingRequests();\n-\t\t\tfinal Iterator<AMRMClient.ContainerRequest> pendingRequestsIterator = pendingRequests.iterator();\n+\t\t\tlog.info(\"Received {} containers.\", containers.size());\n \n-\t\t\t// number of allocated containers can be larger than the number of pending container requests\n-\t\t\tfinal int numAcceptedContainers = Math.min(containers.size(), numPendingContainerRequests);\n-\t\t\tfinal List<Container> requiredContainers = containers.subList(0, numAcceptedContainers);\n-\t\t\tfinal List<Container> excessContainers = containers.subList(numAcceptedContainers, containers.size());\n-\n-\t\t\tfor (int i = 0; i < requiredContainers.size(); i++) {\n-\t\t\t\tremoveContainerRequest(pendingRequestsIterator.next());\n-\t\t\t}\n-\n-\t\t\texcessContainers.forEach(this::returnExcessContainer);\n-\t\t\trequiredContainers.forEach(this::startTaskExecutorInContainer);\n+\t\t\tgroupContainerByResource(containers).forEach(this::onContainersOfResourceAllocated);\n \n \t\t\t// if we are waiting for no further containers, we can go to the\n \t\t\t// regular heartbeat interval\n-\t\t\tif (numPendingContainerRequests <= 0) {\n+\t\t\tif (pendingWorkerCounter.getTotalNum() <= 0) {\n \t\t\t\tresourceManagerClient.setHeartbeatInterval(yarnHeartbeatIntervalMillis);\n \t\t\t}\n \t\t});\n \t}\n \n-\tprivate void startTaskExecutorInContainer(Container container) {\n+\tprivate Map<Resource, List<Container>> groupContainerByResource(List<Container> containers) {\n+\t\treturn containers.stream().collect(Collectors.groupingBy(Container::getResource));\n+\t}\n+\n+\tprivate void onContainersOfResourceAllocated(Resource resource, List<Container> containers) {\n+\t\tfinal List<WorkerResourceSpec> pendingWorkerResourceSpecs =\n+\t\t\tworkerSpecContainerResourceAdapter.getWorkerSpecs(resource).stream()", "originalCommit": "785558f7c2944cb50e57e191a242c5e981ab42b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0ODI2MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403848261", "bodyText": "It shouldn't. I'll change the return type of getWorkerSpecs to Set.", "author": "xintongsong", "createdAt": "2020-04-06T06:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNjAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNzU0Ng==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403127546", "body": "What about removing it from `workerSpecContainerResourceAdapter`?", "bodyText": "What about removing it from workerSpecContainerResourceAdapter?", "bodyHTML": "<p dir=\"auto\">What about removing it from <code>workerSpecContainerResourceAdapter</code>?</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:27:03Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -412,30 +439,32 @@ private void releaseFailedContainerAndRequestNewContainerIfRequired(ContainerId\n \n \t\tfinal ResourceID resourceId = new ResourceID(containerId.toString());\n \t\t// release the failed container\n-\t\tworkerNodeMap.remove(resourceId);\n+\t\tYarnWorkerNode yarnWorkerNode = workerNodeMap.remove(resourceId);\n \t\tresourceManagerClient.releaseAssignedContainer(containerId);\n \t\t// and ask for a new one\n-\t\trequestYarnContainerIfRequired();\n+\t\trequestYarnContainerIfRequired(yarnWorkerNode.getContainer().getResource());\n \t}\n \n \tprivate void returnExcessContainer(Container excessContainer) {\n \t\tlog.info(\"Returning excess container {}.\", excessContainer.getId());\n \t\tresourceManagerClient.releaseAssignedContainer(excessContainer.getId());\n \t}\n \n-\tprivate void removeContainerRequest(AMRMClient.ContainerRequest pendingContainerRequest) {\n-\t\tnumPendingContainerRequests--;\n-\n-\t\tlog.info(\"Removing container request {}. Pending container requests {}.\", pendingContainerRequest, numPendingContainerRequests);\n-\n+\tprivate void removeContainerRequest(AMRMClient.ContainerRequest pendingContainerRequest, WorkerResourceSpec workerResourceSpec) {\n+\t\tlog.info(\"Removing container request {}.\", pendingContainerRequest);\n+\t\tpendingWorkerCounter.decreaseAndGet(workerResourceSpec);", "originalCommit": "785558f7c2944cb50e57e191a242c5e981ab42b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMTk2OA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403131968", "bodyText": "Differently asked, when do we clean workerSpecContainerResourceAdapter up?", "author": "tillrohrmann", "createdAt": "2020-04-03T16:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1MDQ4OA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403850488", "bodyText": "Unfortunately, we don't clean workerSpecContainerResourceAdapter up.\nI think the upper bond of the amount of records really depends on how many different WorkerResourceSpec do we have. If we want to clean the unused records up, the WorkerSpecContainerResourceAdapter will need YarnResourceManager to tell it which WorkerResourceSpec is no longer needed (all corresponding TMs are completed and no pending ones). I'm not sure whether this complexity is necessary.", "author": "xintongsong", "createdAt": "2020-04-06T06:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NDkwMA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404144900", "bodyText": "Hmm, would it be possible to have a periodic cleanup task?", "author": "tillrohrmann", "createdAt": "2020-04-06T14:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2MDE1Mw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404160153", "bodyText": "Not saying that we have to implement it right away. I just want to know how one could fix this as a follow-up task.", "author": "tillrohrmann", "createdAt": "2020-04-06T14:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4OTYwNQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404489605", "bodyText": "True, a periodic cleanup task should work there, or we can trigger a clean-up if the number of entries stored in WorkerSpecContainerResourceAdapter reaches a certain threshold.\nI think the clean-up is definitely doable. It's just not very necessary at the time being.", "author": "xintongsong", "createdAt": "2020-04-07T01:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNzU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyODgwMw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403128803", "body": "Shouldn't we do this for all instead of any?", "bodyText": "Shouldn't we do this for all instead of any?", "bodyHTML": "<p dir=\"auto\">Shouldn't we do this for all instead of any?</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:29:08Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -540,39 +571,41 @@ private FinalApplicationStatus getYarnStatus(ApplicationStatus status) {\n \t/**\n \t * Request new container if pending containers cannot satisfy pending slot requests.\n \t */\n-\tprivate void requestYarnContainerIfRequired() {\n-\t\tint requiredTaskManagers = getNumberRequiredTaskManagers();\n-\n-\t\tif (requiredTaskManagers > numPendingContainerRequests) {\n-\t\t\trequestYarnContainer();\n-\t\t}\n+\tprivate void requestYarnContainerIfRequired(Resource containerResource) {\n+\t\tgetPendingWorkerNums().entrySet().stream()\n+\t\t\t.filter(entry ->\n+\t\t\t\tgetContainerResource(entry.getKey()).equals(containerResource) &&\n+\t\t\t\tentry.getValue() > pendingWorkerCounter.getNum(entry.getKey()))\n+\t\t\t.findAny()", "originalCommit": "785558f7c2944cb50e57e191a242c5e981ab42b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1MTM1OQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403851359", "bodyText": "I think this is the same issue as KubernetesResourceManager#requestKubernetesPodIfRequired. I was trying to keep the exactly same behavior as before. But I think you're right, it is nice to request all required pods early.", "author": "xintongsong", "createdAt": "2020-04-06T06:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyODgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMDM1Mg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403130352", "body": "I have to admit that I find `getPendingWorkerNums()` and `pendingWorkerCounter` quite confusing. The sound almost the same but the former means the requirements of the `SlotManager` and the latter the currently pending workers which have been requested by the RM.", "bodyText": "I have to admit that I find getPendingWorkerNums() and pendingWorkerCounter quite confusing. The sound almost the same but the former means the requirements of the SlotManager and the latter the currently pending workers which have been requested by the RM.", "bodyHTML": "<p dir=\"auto\">I have to admit that I find <code>getPendingWorkerNums()</code> and <code>pendingWorkerCounter</code> quite confusing. The sound almost the same but the former means the requirements of the <code>SlotManager</code> and the latter the currently pending workers which have been requested by the RM.</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:32:00Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -540,39 +571,41 @@ private FinalApplicationStatus getYarnStatus(ApplicationStatus status) {\n \t/**\n \t * Request new container if pending containers cannot satisfy pending slot requests.\n \t */\n-\tprivate void requestYarnContainerIfRequired() {\n-\t\tint requiredTaskManagers = getNumberRequiredTaskManagers();\n-\n-\t\tif (requiredTaskManagers > numPendingContainerRequests) {\n-\t\t\trequestYarnContainer();\n-\t\t}\n+\tprivate void requestYarnContainerIfRequired(Resource containerResource) {\n+\t\tgetPendingWorkerNums().entrySet().stream()", "originalCommit": "785558f7c2944cb50e57e191a242c5e981ab42b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1MjYyMg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403852622", "bodyText": "What's your suggestion here? How about renaming getPendingWorkerNums to getSlotManagerPendingWorkerNums?", "author": "xintongsong", "createdAt": "2020-04-06T06:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NjU5OQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r404146599", "bodyText": "maybe we could rename getPendingWorkerNums into getRequiredWorkers or getRequiredResources.", "author": "tillrohrmann", "createdAt": "2020-04-06T14:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMDM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMjQ3MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403132471", "body": "Shouldn't we iterate over all resources which are needed instead of restricting it to `containerResource`?", "bodyText": "Shouldn't we iterate over all resources which are needed instead of restricting it to containerResource?", "bodyHTML": "<p dir=\"auto\">Shouldn't we iterate over all resources which are needed instead of restricting it to <code>containerResource</code>?</p>", "author": "tillrohrmann", "createdAt": "2020-04-03T16:35:06Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -540,39 +571,41 @@ private FinalApplicationStatus getYarnStatus(ApplicationStatus status) {\n \t/**\n \t * Request new container if pending containers cannot satisfy pending slot requests.\n \t */\n-\tprivate void requestYarnContainerIfRequired() {\n-\t\tint requiredTaskManagers = getNumberRequiredTaskManagers();\n-\n-\t\tif (requiredTaskManagers > numPendingContainerRequests) {\n-\t\t\trequestYarnContainer();\n-\t\t}\n+\tprivate void requestYarnContainerIfRequired(Resource containerResource) {", "originalCommit": "785558f7c2944cb50e57e191a242c5e981ab42b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMjkxMQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403132911", "body": "```suggestion\r\npublic class KubernetesResourceManagerFactoryTest extends TestLogger {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class KubernetesResourceManagerFactoryTest {\n          \n          \n            \n            public class KubernetesResourceManagerFactoryTest extends TestLogger {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">KubernetesResourceManagerFactoryTest</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">KubernetesResourceManagerFactoryTest</span> <span class=\"pl-k x x-first\">extends</span><span class=\"x\"> </span><span class=\"pl-e x\">TestLogger</span><span class=\"x x-last\"> </span>{</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-03T16:35:51Z", "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/entrypoint/KubernetesResourceManagerFactoryTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.kubernetes.entrypoint;\n+\n+import org.apache.flink.api.common.resources.CPUResource;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.TaskManagerOptions;\n+import org.apache.flink.kubernetes.configuration.KubernetesConfigOptions;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for {@link KubernetesResourceManagerFactory}.\n+ */\n+public class KubernetesResourceManagerFactoryTest {", "originalCommit": "0c5eb8c3d46d2142f9dd64acfaba9d27102ad3f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzI2NQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r403133265", "body": "```suggestion\r\npublic class YarnResourceManagerFactoryTest extends TestLogger {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class YarnResourceManagerFactoryTest {\n          \n          \n            \n            public class YarnResourceManagerFactoryTest extends TestLogger {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">YarnResourceManagerFactoryTest</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">YarnResourceManagerFactoryTest</span> <span class=\"pl-k x x-first\">extends</span><span class=\"x\"> </span><span class=\"pl-e x\">TestLogger</span><span class=\"x x-last\"> </span>{</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-03T16:36:28Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/entrypoint/YarnResourceManagerFactoryTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn.entrypoint;\n+\n+import org.apache.flink.api.common.resources.CPUResource;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.IllegalConfigurationException;\n+import org.apache.flink.configuration.TaskManagerOptions;\n+import org.apache.flink.yarn.configuration.YarnConfigOptions;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for {@link YarnResourceManagerFactory}.\n+ */\n+public class YarnResourceManagerFactoryTest {", "originalCommit": "0c5eb8c3d46d2142f9dd64acfaba9d27102ad3f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "82d5dd9966f887470f20377d618c78a88f25dd82", "url": "https://github.com/apache/flink/commit/82d5dd9966f887470f20377d618c78a88f25dd82", "message": "[FLINK-16438][yarn] Decide WorkerSpecContainerResourceAdapter.MatchingStrategy based on RegisterApplicationMasterResponse.", "committedDate": "2020-04-10T08:11:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3MjI3OQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409572279", "body": "It's not super important but I would prefer setting these functions in the constructor of the `TestingYarnAMRMClientAsync` class instead of using setters.", "bodyText": "It's not super important but I would prefer setting these functions in the constructor of the TestingYarnAMRMClientAsync class instead of using setters.", "bodyHTML": "<p dir=\"auto\">It's not super important but I would prefer setting these functions in the constructor of the <code>TestingYarnAMRMClientAsync</code> class instead of using setters.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T13:51:10Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingYarnAMRMClientAsync.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.api.java.tuple.Tuple4;\n+import org.apache.flink.util.Preconditions;\n+import org.apache.flink.util.function.TriConsumer;\n+import org.apache.flink.util.function.TriFunction;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.FinalApplicationStatus;\n+import org.apache.hadoop.yarn.api.records.Priority;\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.apache.hadoop.yarn.client.api.AMRMClient;\n+import org.apache.hadoop.yarn.client.api.async.AMRMClientAsync;\n+import org.apache.hadoop.yarn.client.api.async.impl.AMRMClientAsyncImpl;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+/**\n+ * A Yarn {@link AMRMClientAsync} implementation for testing.\n+ */\n+public class TestingYarnAMRMClientAsync extends AMRMClientAsyncImpl<AMRMClient.ContainerRequest> {\n+\n+\tprivate Function<Tuple4<Priority, String, Resource, CallbackHandler>, List<? extends Collection<AMRMClient.ContainerRequest>>>\n+\t\tgetMatchingRequestsFunction = ignored -> Collections.emptyList();\n+\tprivate BiConsumer<AMRMClient.ContainerRequest, CallbackHandler> addContainerRequestConsumer = (ignored1, ignored2) -> {};\n+\tprivate BiConsumer<AMRMClient.ContainerRequest, CallbackHandler> removeContainerRequestConsumer = (ignored1, ignored2) -> {};\n+\tprivate BiConsumer<ContainerId, CallbackHandler> releaseAssignedContainerConsumer = (ignored1, ignored2) -> {};\n+\tprivate Consumer<Integer> setHeartbeatIntervalConsumer = (ignored) -> {};\n+\tprivate TriFunction<String, Integer, String, RegisterApplicationMasterResponse> registerApplicationMasterFunction =\n+\t\t(ignored1, ignored2, ignored3) -> RegisterApplicationMasterResponse.newInstance(\n+\t\t\tResource.newInstance(0, 0),\n+\t\t\tResource.newInstance(Integer.MAX_VALUE, Integer.MAX_VALUE),\n+\t\t\tCollections.emptyMap(),\n+\t\t\tnull,\n+\t\t\tCollections.emptyList(),\n+\t\t\tnull,\n+\t\t\tCollections.emptyList());\n+\tprivate TriConsumer<FinalApplicationStatus, String, String> unregisterApplicationMasterConsumer = (ignored1, ignored2, ignored3) -> {};\n+\n+\tTestingYarnAMRMClientAsync(CallbackHandler callbackHandler) {\n+\t\tsuper(0, callbackHandler);\n+\t}\n+\n+\t@Override\n+\tpublic List<? extends Collection<AMRMClient.ContainerRequest>> getMatchingRequests(Priority priority, String resourceName, Resource capability) {\n+\t\treturn getMatchingRequestsFunction.apply(Tuple4.of(priority, resourceName, capability, handler));\n+\t}\n+\n+\t@Override\n+\tpublic void addContainerRequest(AMRMClient.ContainerRequest req) {\n+\t\taddContainerRequestConsumer.accept(req, handler);\n+\t}\n+\n+\t@Override\n+\tpublic void removeContainerRequest(AMRMClient.ContainerRequest req) {\n+\t\tremoveContainerRequestConsumer.accept(req, handler);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseAssignedContainer(ContainerId containerId) {\n+\t\treleaseAssignedContainerConsumer.accept(containerId, handler);\n+\t}\n+\n+\t@Override\n+\tpublic void setHeartbeatInterval(int interval) {\n+\t\tsetHeartbeatIntervalConsumer.accept(interval);\n+\t}\n+\n+\t@Override\n+\tpublic RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl) {\n+\t\treturn registerApplicationMasterFunction.apply(appHostName, appHostPort, appTrackingUrl);\n+\t}\n+\n+\t@Override\n+\tpublic void unregisterApplicationMaster(FinalApplicationStatus appStatus, String appMessage, String appTrackingUrl) {\n+\t\tunregisterApplicationMasterConsumer.accept(appStatus, appMessage, appTrackingUrl);\n+\t}\n+\n+\tvoid setGetMatchingRequestsFunction(\n+\t\tFunction<Tuple4<Priority, String, Resource, CallbackHandler>, List<? extends Collection<AMRMClient.ContainerRequest>>>\n+\t\t\tgetMatchingRequestsFunction) {\n+\t\tthis.getMatchingRequestsFunction = Preconditions.checkNotNull(getMatchingRequestsFunction);\n+\t}\n+\n+\tvoid setAddContainerRequestConsumer(\n+\t\tBiConsumer<AMRMClient.ContainerRequest, CallbackHandler> addContainerRequestConsumer) {\n+\t\tthis.addContainerRequestConsumer = Preconditions.checkNotNull(addContainerRequestConsumer);\n+\t}\n+\n+\tvoid setRemoveContainerRequestConsumer(\n+\t\tBiConsumer<AMRMClient.ContainerRequest, CallbackHandler> removeContainerRequestConsumer) {\n+\t\tthis.removeContainerRequestConsumer = Preconditions.checkNotNull(removeContainerRequestConsumer);\n+\t}\n+\n+\tvoid setReleaseAssignedContainerConsumer(\n+\t\tBiConsumer<ContainerId, CallbackHandler> releaseAssignedContainerConsumer) {\n+\t\tthis.releaseAssignedContainerConsumer = Preconditions.checkNotNull(releaseAssignedContainerConsumer);\n+\t}\n+\n+\tvoid setSetHeartbeatIntervalConsumer(\n+\t\tConsumer<Integer> setHeartbeatIntervalConsumer) {\n+\t\tthis.setHeartbeatIntervalConsumer = setHeartbeatIntervalConsumer;\n+\t}\n+\n+\tvoid setRegisterApplicationMasterFunction(\n+\t\tTriFunction<String, Integer, String, RegisterApplicationMasterResponse> registerApplicationMasterFunction) {\n+\t\tthis.registerApplicationMasterFunction = registerApplicationMasterFunction;\n+\t}\n+\n+\tvoid setUnregisterApplicationMasterConsumer(\n+\t\tTriConsumer<FinalApplicationStatus, String, String> unregisterApplicationMasterConsumer) {\n+\t\tthis.unregisterApplicationMasterConsumer = unregisterApplicationMasterConsumer;\n+\t}", "originalCommit": "7f312629f59d37249600d4e17546a4122cd07589", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NTk2Mw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409575963", "bodyText": "If one uses the setters, then the corresponding fields should be volatile if they are being set from a different thread.", "author": "tillrohrmann", "createdAt": "2020-04-16T13:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3MjI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2NTc4OQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r410865789", "bodyText": "The reason I did not set these functions in the constructor is that, one would have to construct the entire TestingYarnAMRMClientAsync for defining one of these functions in a test case. We have several such testing classes (RM client, NM client, slot manager), and it would be complicated if some of the test cases need to provide customized instances for a subset of these classes when creating the Context, while some other test cases need to do that for a different subset.\nI think making the fields volatile sounds good to me.", "author": "xintongsong", "createdAt": "2020-04-19T09:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3MjI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTc4MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r411421781", "bodyText": "Makes sense.", "author": "tillrohrmann", "createdAt": "2020-04-20T14:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3MjI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjY2OA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409576668", "body": "Same here with the setters and `volatile` fields.", "bodyText": "Same here with the setters and volatile fields.", "bodyHTML": "<p dir=\"auto\">Same here with the setters and <code>volatile</code> fields.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T13:56:47Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/TestingYarnNMClientAsync.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.util.Preconditions;\n+import org.apache.flink.util.function.TriConsumer;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.yarn.api.records.Container;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.ContainerLaunchContext;\n+import org.apache.hadoop.yarn.api.records.NodeId;\n+import org.apache.hadoop.yarn.client.api.async.NMClientAsync;\n+import org.apache.hadoop.yarn.client.api.async.impl.NMClientAsyncImpl;\n+\n+/**\n+ * A Yarn {@link NMClientAsync} implementation for testing.\n+ */\n+class TestingYarnNMClientAsync extends NMClientAsyncImpl {\n+\n+\tprivate TriConsumer<Container, ContainerLaunchContext, CallbackHandler> startContainerAsyncConsumer = (ignored1, ignored2, ignored3) -> {};\n+\tprivate TriConsumer<ContainerId, NodeId, CallbackHandler> stopContainerAsyncConsumer = (ignored1, ignored2, ignored3) -> {};\n+\n+\tTestingYarnNMClientAsync(final CallbackHandler callbackHandler) {\n+\t\tsuper(callbackHandler);\n+\t}\n+\n+\t@Override\n+\tpublic void startContainerAsync(Container container, ContainerLaunchContext containerLaunchContext) {\n+\t\tthis.startContainerAsyncConsumer.accept(container, containerLaunchContext, callbackHandler);\n+\t}\n+\n+\t@Override\n+\tpublic void stopContainerAsync(ContainerId containerId, NodeId nodeId) {\n+\t\tthis.stopContainerAsyncConsumer.accept(containerId, nodeId, callbackHandler);\n+\t}\n+\n+\tvoid setStartContainerAsyncConsumer(TriConsumer<Container, ContainerLaunchContext, CallbackHandler> startContainerAsyncConsumer) {\n+\t\tthis.startContainerAsyncConsumer = Preconditions.checkNotNull(startContainerAsyncConsumer);\n+\t}\n+\n+\tvoid setStopContainerAsyncConsumer(TriConsumer<ContainerId, NodeId, CallbackHandler> stopContainerAsyncConsumer) {\n+\t\tthis.stopContainerAsyncConsumer = Preconditions.checkNotNull(stopContainerAsyncConsumer);\n+\t}", "originalCommit": "4b7b0c179879f994f6fd67f41eb690a58751edfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3OTc5Mg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409579792", "body": "```suggestion\r\n\tprivate static final Logger LOG = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final Logger log = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);\n          \n          \n            \n            \tprivate static final Logger LOG = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Logger</span> <span class=\"x x-first x-last\">log</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">WorkerSpecContainerResourceAdapter</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">static</span><span class=\"x x-last\"> </span><span class=\"pl-k\">final</span> <span class=\"pl-smi\">Logger</span> <span class=\"pl-c1 x x-first x-last\">LOG</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">LoggerFactory</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">WorkerSpecContainerResourceAdapter</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-16T14:00:42Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/WorkerSpecContainerResourceAdapter.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessSpec;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessUtils;\n+import org.apache.flink.runtime.resourcemanager.WorkerResourceSpec;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+ */\n+public class WorkerSpecContainerResourceAdapter {\n+\tprivate final Logger log = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);", "originalCommit": "149f0715bdc453d010789292dcfd8e6de796af55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4MDIwMw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409580203", "body": "nit:\r\n```suggestion\r\n\tprivate final int minMemMB;\r\n\tprivate final int maxMemMB;\r\n\tprivate final int minVcore;\r\n\tprivate final int maxVcore;\r\n```", "bodyText": "nit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final int minMemMB;\n          \n          \n            \n            \tprivate final int minVcore;\n          \n          \n            \n            \tprivate final int maxMemMB;\n          \n          \n            \n            \tprivate final int maxVcore;\n          \n          \n            \n            \tprivate final int minMemMB;\n          \n          \n            \n            \tprivate final int maxMemMB;\n          \n          \n            \n            \tprivate final int minVcore;\n          \n          \n            \n            \tprivate final int maxVcore;", "bodyHTML": "<p dir=\"auto\">nit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> minMemMB;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">minVcore</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">maxMemMB</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> maxVcore;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> minMemMB;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">maxMemMB</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">minVcore</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> maxVcore;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-16T14:01:14Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/WorkerSpecContainerResourceAdapter.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessSpec;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessUtils;\n+import org.apache.flink.runtime.resourcemanager.WorkerResourceSpec;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+ */\n+public class WorkerSpecContainerResourceAdapter {\n+\tprivate final Logger log = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);\n+\n+\tprivate final Configuration flinkConfig;\n+\tprivate final int minMemMB;\n+\tprivate final int minVcore;\n+\tprivate final int maxMemMB;\n+\tprivate final int maxVcore;", "originalCommit": "149f0715bdc453d010789292dcfd8e6de796af55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4MTc0NA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409581744", "body": "```suggestion\r\n\t\treturn MathUtils.divideRoundUp(value, unitValue) * unitValue;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (value < unitValue) {\n          \n          \n            \n            \t\t\treturn unitValue;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tif (value % unitValue == 0) {\n          \n          \n            \n            \t\t\treturn value;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\treturn (value / unitValue + 1) * unitValue;\n          \n          \n            \n            \t\treturn MathUtils.divideRoundUp(value, unitValue) * unitValue;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k\">if</span> (value <span class=\"pl-k\">&lt;</span> unitValue) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-k\">return</span> unitValue;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k\">if</span> (value <span class=\"pl-k\">%</span> unitValue <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-k\">return</span> value;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k\">return</span> (value <span class=\"pl-k\">/</span> unitValue <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> unitValue;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-k\">return</span> <span class=\"pl-smi\">MathUtils</span><span class=\"pl-k\">.</span>divideRoundUp(value, unitValue) <span class=\"pl-k\">*</span> unitValue;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-16T14:03:12Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/WorkerSpecContainerResourceAdapter.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessSpec;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessUtils;\n+import org.apache.flink.runtime.resourcemanager.WorkerResourceSpec;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+ */\n+public class WorkerSpecContainerResourceAdapter {\n+\tprivate final Logger log = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);\n+\n+\tprivate final Configuration flinkConfig;\n+\tprivate final int minMemMB;\n+\tprivate final int minVcore;\n+\tprivate final int maxMemMB;\n+\tprivate final int maxVcore;\n+\tprivate final WorkerSpecContainerResourceAdapter.MatchingStrategy matchingStrategy;\n+\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\tprivate final Map<Resource, List<WorkerResourceSpec>> containerResourceToWorkerSpecs;\n+\tprivate final Map<Integer, Set<Resource>> containerMemoryToContainerResource;\n+\n+\t@VisibleForTesting\n+\tWorkerSpecContainerResourceAdapter(\n+\t\tfinal Configuration flinkConfig,\n+\t\tfinal int minMemMB,\n+\t\tfinal int minVcore,\n+\t\tfinal int maxMemMB,\n+\t\tfinal int maxVcore,\n+\t\tfinal WorkerSpecContainerResourceAdapter.MatchingStrategy matchingStrategy) {\n+\t\tthis.flinkConfig = Preconditions.checkNotNull(flinkConfig);\n+\t\tthis.minMemMB = minMemMB;\n+\t\tthis.minVcore = minVcore;\n+\t\tthis.maxMemMB = maxMemMB;\n+\t\tthis.maxVcore = maxVcore;\n+\t\tthis.matchingStrategy = matchingStrategy;\n+\t\tworkerSpecToContainerResource = new HashMap<>();\n+\t\tcontainerResourceToWorkerSpecs = new HashMap<>();\n+\t\tcontainerMemoryToContainerResource = new HashMap<>();\n+\t}\n+\n+\t@VisibleForTesting\n+\tOptional<Resource> getContainerResource(final WorkerResourceSpec workerResourceSpec) {\n+\t\treturn Optional.ofNullable(workerSpecToContainerResource.computeIfAbsent(\n+\t\t\tPreconditions.checkNotNull(workerResourceSpec),\n+\t\t\tthis::createAndMapContainerResource));\n+\t}\n+\n+\t@VisibleForTesting\n+\tSet<WorkerResourceSpec> getWorkerSpecs(final Resource containerResource) {\n+\t\treturn getEquivalentContainerResource(containerResource).stream()\n+\t\t\t.flatMap(resource -> containerResourceToWorkerSpecs.getOrDefault(resource, Collections.emptyList()).stream())\n+\t\t\t.collect(Collectors.toSet());\n+\t}\n+\n+\t@VisibleForTesting\n+\tSet<Resource> getEquivalentContainerResource(final Resource containerResource) {\n+\t\t// Yarn might ignore the requested vcores, depending on its configurations.\n+\t\t// In such cases, we should also not matching vcores.\n+\t\tfinal Set<Resource> equivalentContainerResources;\n+\t\tswitch (matchingStrategy) {\n+\t\t\tcase MATCH_VCORE:\n+\t\t\t\tequivalentContainerResources = Collections.singleton(containerResource);\n+\t\t\t\tbreak;\n+\t\t\tcase IGNORE_VCORE:\n+\t\t\tdefault:\n+\t\t\t\tequivalentContainerResources = containerMemoryToContainerResource\n+\t\t\t\t\t.getOrDefault(containerResource.getMemory(), Collections.emptySet());\n+\t\t\t\tbreak;\n+\t\t}\n+\t\treturn equivalentContainerResources;\n+\t}\n+\n+\t@Nullable\n+\tprivate Resource createAndMapContainerResource(final WorkerResourceSpec workerResourceSpec) {\n+\t\tfinal TaskExecutorProcessSpec taskExecutorProcessSpec =\n+\t\t\tTaskExecutorProcessUtils.processSpecFromWorkerResourceSpec(flinkConfig, workerResourceSpec);\n+\t\tfinal Resource containerResource = Resource.newInstance(\n+\t\t\tnormalize(taskExecutorProcessSpec.getTotalProcessMemorySize().getMebiBytes(), minMemMB),\n+\t\t\tnormalize(taskExecutorProcessSpec.getCpuCores().getValue().intValue(), minVcore));\n+\n+\t\tif (resourceWithinMaxAllocation(containerResource)) {\n+\t\t\tcontainerResourceToWorkerSpecs.computeIfAbsent(containerResource, ignored -> new ArrayList<>())\n+\t\t\t\t.add(workerResourceSpec);\n+\t\t\tcontainerMemoryToContainerResource.computeIfAbsent(containerResource.getMemory(), ignored -> new HashSet<>())\n+\t\t\t\t.add(containerResource);\n+\t\t\treturn containerResource;\n+\t\t} else {\n+\t\t\tlog.warn(\"Requested container resource {} exceeds yarn max allocation {}. Will not allocate resource.\",\n+\t\t\t\tcontainerResource,\n+\t\t\t\tResource.newInstance(maxMemMB, maxVcore));\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Normalize to the minimum integer that is greater or equal to 'value' and is integer multiple of 'unitValue'.\n+\t */\n+\tprivate int normalize(final int value, final int unitValue) {\n+\t\tif (value < unitValue) {\n+\t\t\treturn unitValue;\n+\t\t}\n+\n+\t\tif (value % unitValue == 0) {\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\treturn (value / unitValue + 1) * unitValue;", "originalCommit": "149f0715bdc453d010789292dcfd8e6de796af55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4MzY5MQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409583691", "body": "I think we don't need the `@VisibleForTesting` annotations in this class because we did not increase the visibility of these methods for testing purposes.", "bodyText": "I think we don't need the @VisibleForTesting annotations in this class because we did not increase the visibility of these methods for testing purposes.", "bodyHTML": "<p dir=\"auto\">I think we don't need the <code>@VisibleForTesting</code> annotations in this class because we did not increase the visibility of these methods for testing purposes.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T14:05:40Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/WorkerSpecContainerResourceAdapter.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessSpec;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessUtils;\n+import org.apache.flink.runtime.resourcemanager.WorkerResourceSpec;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+ */\n+public class WorkerSpecContainerResourceAdapter {\n+\tprivate final Logger log = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);\n+\n+\tprivate final Configuration flinkConfig;\n+\tprivate final int minMemMB;\n+\tprivate final int minVcore;\n+\tprivate final int maxMemMB;\n+\tprivate final int maxVcore;\n+\tprivate final WorkerSpecContainerResourceAdapter.MatchingStrategy matchingStrategy;\n+\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\tprivate final Map<Resource, List<WorkerResourceSpec>> containerResourceToWorkerSpecs;\n+\tprivate final Map<Integer, Set<Resource>> containerMemoryToContainerResource;\n+\n+\t@VisibleForTesting", "originalCommit": "149f0715bdc453d010789292dcfd8e6de796af55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4OTA5MA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409589090", "body": "```suggestion\r\n\t * **DO NOT USE** Whether {@link YarnResourceManager} should match the vcores of allocated containers with those requested.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * **DO NO USE** Whether {@link YarnResourceManager} should match the vcores of allocated containers with those requested.\n          \n          \n            \n            \t * **DO NOT USE** Whether {@link YarnResourceManager} should match the vcores of allocated containers with those requested.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> <span class=\"pl-k\">**</span><span class=\"pl-c1\">DO</span> <span class=\"pl-c1 x x-first x-last\">NO</span> <span class=\"pl-c1\">USE</span><span class=\"pl-k\">**</span> <span class=\"pl-smi\">Whether</span> {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">YarnResourceManager</span>} should match the vcores of allocated containers with those requested.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t <span class=\"pl-k\">*</span> <span class=\"pl-k\">**</span><span class=\"pl-c1\">DO</span> <span class=\"pl-c1 x x-first x-last\">NOT</span> <span class=\"pl-c1\">USE</span><span class=\"pl-k\">**</span> <span class=\"pl-smi\">Whether</span> {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">YarnResourceManager</span>} should match the vcores of allocated containers with those requested.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-16T14:12:37Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/configuration/YarnConfigOptionsInternal.java", "diffHunk": "@@ -34,4 +37,27 @@\n \t\t\t\t\t.stringType()\n \t\t\t\t\t.noDefaultValue()\n \t\t\t\t\t.withDescription(\"**DO NOT USE** The location of the log config file, e.g. the path to your log4j.properties for log4j.\");\n+\n+\t/**\n+\t * **DO NO USE** Whether {@link YarnResourceManager} should match the vcores of allocated containers with those requested.", "originalCommit": "149f0715bdc453d010789292dcfd8e6de796af55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5MjE4OQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409592189", "body": "Maybe rename into `tryComputeContainerResource` or so because this method is not simply a look up. It is rather a creation call with a caching mechanism.", "bodyText": "Maybe rename into tryComputeContainerResource or so because this method is not simply a look up. It is rather a creation call with a caching mechanism.", "bodyHTML": "<p dir=\"auto\">Maybe rename into <code>tryComputeContainerResource</code> or so because this method is not simply a look up. It is rather a creation call with a caching mechanism.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T14:16:28Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/WorkerSpecContainerResourceAdapter.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessSpec;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessUtils;\n+import org.apache.flink.runtime.resourcemanager.WorkerResourceSpec;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+ */\n+public class WorkerSpecContainerResourceAdapter {\n+\tprivate final Logger log = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);\n+\n+\tprivate final Configuration flinkConfig;\n+\tprivate final int minMemMB;\n+\tprivate final int minVcore;\n+\tprivate final int maxMemMB;\n+\tprivate final int maxVcore;\n+\tprivate final WorkerSpecContainerResourceAdapter.MatchingStrategy matchingStrategy;\n+\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\tprivate final Map<Resource, List<WorkerResourceSpec>> containerResourceToWorkerSpecs;\n+\tprivate final Map<Integer, Set<Resource>> containerMemoryToContainerResource;\n+\n+\t@VisibleForTesting\n+\tWorkerSpecContainerResourceAdapter(\n+\t\tfinal Configuration flinkConfig,\n+\t\tfinal int minMemMB,\n+\t\tfinal int minVcore,\n+\t\tfinal int maxMemMB,\n+\t\tfinal int maxVcore,\n+\t\tfinal WorkerSpecContainerResourceAdapter.MatchingStrategy matchingStrategy) {\n+\t\tthis.flinkConfig = Preconditions.checkNotNull(flinkConfig);\n+\t\tthis.minMemMB = minMemMB;\n+\t\tthis.minVcore = minVcore;\n+\t\tthis.maxMemMB = maxMemMB;\n+\t\tthis.maxVcore = maxVcore;\n+\t\tthis.matchingStrategy = matchingStrategy;\n+\t\tworkerSpecToContainerResource = new HashMap<>();\n+\t\tcontainerResourceToWorkerSpecs = new HashMap<>();\n+\t\tcontainerMemoryToContainerResource = new HashMap<>();\n+\t}\n+\n+\t@VisibleForTesting\n+\tOptional<Resource> getContainerResource(final WorkerResourceSpec workerResourceSpec) {", "originalCommit": "149f0715bdc453d010789292dcfd8e6de796af55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5NTEyNg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409595126", "body": "I think `contains` and `containsInAnyOrder` already do the size check meaning the that list must contain exactly as many items as matchers are specified.", "bodyText": "I think contains and containsInAnyOrder already do the size check meaning the that list must contain exactly as many items as matchers are specified.", "bodyHTML": "<p dir=\"auto\">I think <code>contains</code> and <code>containsInAnyOrder</code> already do the size check meaning the that list must contain exactly as many items as matchers are specified.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T14:20:12Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/WorkerSpecContainerResourceAdapterTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.MemorySize;\n+import org.apache.flink.configuration.TaskManagerOptions;\n+import org.apache.flink.runtime.resourcemanager.WorkerResourceSpec;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for {@link WorkerSpecContainerResourceAdapter}.\n+ */\n+public class WorkerSpecContainerResourceAdapterTest extends TestLogger {\n+\n+\t@Test\n+\tpublic void testMatchVcores() {\n+\t\tfinal int minMemMB = 100;\n+\t\tfinal int minVcore = 10;\n+\t\tfinal WorkerSpecContainerResourceAdapter adapter =\n+\t\t\tnew WorkerSpecContainerResourceAdapter(\n+\t\t\t\tgetConfigProcessSpecEqualsWorkerSpec(),\n+\t\t\t\tminMemMB,\n+\t\t\t\tminVcore,\n+\t\t\t\tInteger.MAX_VALUE,\n+\t\t\t\tInteger.MAX_VALUE,\n+\t\t\t\tWorkerSpecContainerResourceAdapter.MatchingStrategy.MATCH_VCORE);\n+\n+\t\tfinal WorkerResourceSpec workerSpec1 = new WorkerResourceSpec.Builder()\n+\t\t\t.setCpuCores(1.0)\n+\t\t\t.setTaskHeapMemoryMB(10)\n+\t\t\t.setTaskOffHeapMemoryMB(10)\n+\t\t\t.setNetworkMemoryMB(10)\n+\t\t\t.setManagedMemoryMB(10)\n+\t\t\t.build();\n+\t\tfinal WorkerResourceSpec workerSpec2 = new WorkerResourceSpec.Builder()\n+\t\t\t.setCpuCores(10.0)\n+\t\t\t.setTaskHeapMemoryMB(25)\n+\t\t\t.setTaskOffHeapMemoryMB(25)\n+\t\t\t.setNetworkMemoryMB(25)\n+\t\t\t.setManagedMemoryMB(25)\n+\t\t\t.build();\n+\t\tfinal WorkerResourceSpec workerSpec3 = new WorkerResourceSpec.Builder()\n+\t\t\t.setCpuCores(5.0)\n+\t\t\t.setTaskHeapMemoryMB(30)\n+\t\t\t.setTaskOffHeapMemoryMB(30)\n+\t\t\t.setNetworkMemoryMB(30)\n+\t\t\t.setManagedMemoryMB(30)\n+\t\t\t.build();\n+\t\tfinal WorkerResourceSpec workerSpec4 = new WorkerResourceSpec.Builder()\n+\t\t\t.setCpuCores(15.0)\n+\t\t\t.setTaskHeapMemoryMB(10)\n+\t\t\t.setTaskOffHeapMemoryMB(10)\n+\t\t\t.setNetworkMemoryMB(10)\n+\t\t\t.setManagedMemoryMB(10)\n+\t\t\t.build();\n+\n+\t\tfinal Resource containerResource1 = Resource.newInstance(100, 10);\n+\t\tfinal Resource containerResource2 = Resource.newInstance(200, 10);\n+\t\tfinal Resource containerResource3 = Resource.newInstance(100, 20);\n+\n+\t\tassertThat(adapter.getWorkerSpecs(containerResource1), empty());\n+\t\tassertThat(adapter.getWorkerSpecs(containerResource2), empty());\n+\n+\t\tassertThat(adapter.getContainerResource(workerSpec1).get(), is(containerResource1));\n+\t\tassertThat(adapter.getContainerResource(workerSpec2).get(), is(containerResource1));\n+\t\tassertThat(adapter.getContainerResource(workerSpec3).get(), is(containerResource2));\n+\t\tassertThat(adapter.getContainerResource(workerSpec4).get(), is(containerResource3));\n+\n+\t\tassertThat(adapter.getWorkerSpecs(containerResource1), hasSize(2));\n+\t\tassertThat(adapter.getWorkerSpecs(containerResource2), hasSize(1));\n+\t\tassertThat(adapter.getWorkerSpecs(containerResource3), hasSize(1));", "originalCommit": "149f0715bdc453d010789292dcfd8e6de796af55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5NjYzNA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409596634", "body": "Can the value type be a set?\r\n\r\n```suggestion\r\n\tprivate final Map<Resource, Set<WorkerResourceSpec>> containerResourceToWorkerSpecs;\r\n```", "bodyText": "Can the value type be a set?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final Map<Resource, List<WorkerResourceSpec>> containerResourceToWorkerSpecs;\n          \n          \n            \n            \tprivate final Map<Resource, Set<WorkerResourceSpec>> containerResourceToWorkerSpecs;", "bodyHTML": "<p dir=\"auto\">Can the value type be a set?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Resource</span>, <span class=\"pl-k\"><span class=\"x x-first x-last\">List</span>&lt;<span class=\"pl-smi\">WorkerResourceSpec</span>&gt;</span>&gt;</span> containerResourceToWorkerSpecs;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Resource</span>, <span class=\"pl-k\"><span class=\"x x-first x-last\">Set</span>&lt;<span class=\"pl-smi\">WorkerResourceSpec</span>&gt;</span>&gt;</span> containerResourceToWorkerSpecs;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-16T14:22:10Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/WorkerSpecContainerResourceAdapter.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessSpec;\n+import org.apache.flink.runtime.clusterframework.TaskExecutorProcessUtils;\n+import org.apache.flink.runtime.resourcemanager.WorkerResourceSpec;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for converting between Flink {@link WorkerResourceSpec} and Yarn {@link Resource}.\n+ */\n+public class WorkerSpecContainerResourceAdapter {\n+\tprivate final Logger log = LoggerFactory.getLogger(WorkerSpecContainerResourceAdapter.class);\n+\n+\tprivate final Configuration flinkConfig;\n+\tprivate final int minMemMB;\n+\tprivate final int minVcore;\n+\tprivate final int maxMemMB;\n+\tprivate final int maxVcore;\n+\tprivate final WorkerSpecContainerResourceAdapter.MatchingStrategy matchingStrategy;\n+\tprivate final Map<WorkerResourceSpec, Resource> workerSpecToContainerResource;\n+\tprivate final Map<Resource, List<WorkerResourceSpec>> containerResourceToWorkerSpecs;", "originalCommit": "149f0715bdc453d010789292dcfd8e6de796af55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwODYxNA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409608614", "body": "`forEach` is always an indicator that one could do the same with a `while` loop. In this case I would suggest to keep it simple and stupid:\r\n\r\n```suggestion\r\n\t\tfor (Map.Entry<WorkerResourceSpec, Integer> requiredWorkersPerResourceSpec : getNumberRequiredWorkersPerWorkerResourceSpec().entrySet()) {\r\n\t\t\tfinal WorkerResourceSpec workerResourceSpec = requiredWorkersPerResourceSpec.getKey();\r\n\t\t\twhile (requiredWorkersPerResourceSpec.getValue() > getNumPendingWorkersFor(workerResourceSpec)) {\r\n\t\t\t\trequestYarnContainer(workerResourceSpec);\r\n\t\t\t}\r\n\t\t}\r\n```", "bodyText": "forEach is always an indicator that one could do the same with a while loop. In this case I would suggest to keep it simple and stupid:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tgetNumberRequiredWorkersPerWorkerResourceSpec().entrySet().stream()\n          \n          \n            \n            \t\t\t.filter(entry -> entry.getValue() > getNumPendingWorkersFor(entry.getKey()))\n          \n          \n            \n            \t\t\t.forEach(entry -> requestYarnContainer(entry.getKey()));\n          \n          \n            \n            \t\tfor (Map.Entry<WorkerResourceSpec, Integer> requiredWorkersPerResourceSpec : getNumberRequiredWorkersPerWorkerResourceSpec().entrySet()) {\n          \n          \n            \n            \t\t\tfinal WorkerResourceSpec workerResourceSpec = requiredWorkersPerResourceSpec.getKey();\n          \n          \n            \n            \t\t\twhile (requiredWorkersPerResourceSpec.getValue() > getNumPendingWorkersFor(workerResourceSpec)) {\n          \n          \n            \n            \t\t\t\trequestYarnContainer(workerResourceSpec);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}", "bodyHTML": "<p dir=\"auto\"><code>forEach</code> is always an indicator that one could do the same with a <code>while</code> loop. In this case I would suggest to keep it simple and stupid:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tgetNumberRequiredWorkersPerWorkerResourceSpec()<span class=\"pl-k\">.</span>entrySet()<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t.filter(entry <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> entry<span class=\"pl-k\">.</span>getValue() <span class=\"pl-k\">&gt;</span> getNumPendingWorkersFor(entry<span class=\"pl-k\">.</span>getKey()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t.forEach(entry <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> requestYarnContainer(entry<span class=\"pl-k\">.</span>getKey()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span><span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">WorkerResourceSpec</span>, <span class=\"pl-smi\">Integer</span>&gt;</span> requiredWorkersPerResourceSpec <span class=\"pl-k\">:</span> getNumberRequiredWorkersPerWorkerResourceSpec()<span class=\"pl-k\">.</span>entrySet()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">WorkerResourceSpec</span> workerResourceSpec <span class=\"pl-k\">=</span> requiredWorkersPerResourceSpec<span class=\"pl-k\">.</span>getKey();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-k\">while</span> (requiredWorkersPerResourceSpec<span class=\"pl-k\">.</span>getValue() <span class=\"pl-k\">&gt;</span> getNumPendingWorkersFor(workerResourceSpec)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\trequestYarnContainer(workerResourceSpec);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t}</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tillrohrmann", "createdAt": "2020-04-16T14:37:22Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -552,38 +581,44 @@ private FinalApplicationStatus getYarnStatus(ApplicationStatus status) {\n \t * Request new container if pending containers cannot satisfy pending slot requests.\n \t */\n \tprivate void requestYarnContainerIfRequired() {\n-\t\tint requiredTaskManagers = getNumberRequiredWorkers();\n-\n-\t\twhile (requiredTaskManagers-- > numPendingContainerRequests) {\n-\t\t\trequestYarnContainer();\n-\t\t}\n+\t\tgetNumberRequiredWorkersPerWorkerResourceSpec().entrySet().stream()\n+\t\t\t.filter(entry -> entry.getValue() > getNumPendingWorkersFor(entry.getKey()))\n+\t\t\t.forEach(entry -> requestYarnContainer(entry.getKey()));", "originalCommit": "112fe6526c4e11aabe35b0a72c310536e9e6c8c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMDY1Mg==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409610652", "body": "I assume that `requestYarnContainer` should never return `false` here, right? If this is the case, then let's add a `checkState` to ensure this invariant.", "bodyText": "I assume that requestYarnContainer should never return false here, right? If this is the case, then let's add a checkState to ensure this invariant.", "bodyHTML": "<p dir=\"auto\">I assume that <code>requestYarnContainer</code> should never return <code>false</code> here, right? If this is the case, then let's add a <code>checkState</code> to ensure this invariant.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T14:40:00Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -552,38 +581,44 @@ private FinalApplicationStatus getYarnStatus(ApplicationStatus status) {\n \t * Request new container if pending containers cannot satisfy pending slot requests.\n \t */\n \tprivate void requestYarnContainerIfRequired() {\n-\t\tint requiredTaskManagers = getNumberRequiredWorkers();\n-\n-\t\twhile (requiredTaskManagers-- > numPendingContainerRequests) {\n-\t\t\trequestYarnContainer();\n-\t\t}\n+\t\tgetNumberRequiredWorkersPerWorkerResourceSpec().entrySet().stream()\n+\t\t\t.filter(entry -> entry.getValue() > getNumPendingWorkersFor(entry.getKey()))\n+\t\t\t.forEach(entry -> requestYarnContainer(entry.getKey()));", "originalCommit": "112fe6526c4e11aabe35b0a72c310536e9e6c8c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMTc5NQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409611795", "body": "Why not moving this block into the default constructor and removing the `@Nullable` annotation from `slotManager`?", "bodyText": "Why not moving this block into the default constructor and removing the @Nullable annotation from slotManager?", "bodyHTML": "<p dir=\"auto\">Why not moving this block into the default constructor and removing the <code>@Nullable</code> annotation from <code>slotManager</code>?</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T14:41:28Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/YarnResourceManagerTest.java", "diffHunk": "@@ -243,24 +248,33 @@ protected NMClientAsync createAndStartNodeManagerClient(YarnConfiguration yarnCo\n \n \t\t// domain objects for test purposes\n \t\tfinal ResourceProfile resourceProfile1 = ResourceProfile.UNKNOWN;\n+\t\tfinal WorkerResourceSpec workerResourceSpec;\n+\n+\t\tfinal Resource containerResource;\n \n \t\tpublic String taskHost = \"host1\";\n \n \t\tfinal TestingYarnNMClientAsync testingYarnNMClientAsync;\n \n \t\tfinal TestingYarnAMRMClientAsync testingYarnAMRMClientAsync;\n \n+\t\tint containerIdx = 0;\n+\n \t\t/**\n \t\t * Create mock RM dependencies.\n \t\t */\n \t\tContext() throws Exception {\n-\t\t\tthis(flinkConfig);\n+\t\t\tthis(flinkConfig, null);\n \t\t}\n \n-\t\tContext(Configuration configuration) throws  Exception {\n-\t\t\tfinal SlotManager slotManager = SlotManagerBuilder.newBuilder()\n-\t\t\t\t.setDefaultWorkerResourceSpec(YarnWorkerResourceSpecFactory.INSTANCE.createDefaultWorkerResourceSpec(configuration))\n-\t\t\t\t.build();\n+\t\tContext(Configuration configuration, @Nullable SlotManager slotManager) throws  Exception {\n+\n+\t\t\tworkerResourceSpec = YarnWorkerResourceSpecFactory.INSTANCE.createDefaultWorkerResourceSpec(configuration);\n+\t\t\tif (slotManager == null) {\n+\t\t\t\tslotManager = SlotManagerBuilder.newBuilder()\n+\t\t\t\t\t.setDefaultWorkerResourceSpec(workerResourceSpec)\n+\t\t\t\t\t.build();\n+\t\t\t}", "originalCommit": "112fe6526c4e11aabe35b0a72c310536e9e6c8c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg1MTU2MA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r410851560", "bodyText": "It requires workerResourceSpec for creating the default slotManager.\nI was trying to avoid creating workerResourceSpec twice, in both constructors.", "author": "xintongsong", "createdAt": "2020-04-19T08:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMTc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMzc4Nw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r411413787", "bodyText": "I think it would be fine to add a SlotManager.getDefaultWorkerResourceSpec(). This could solve the problem here.", "author": "tillrohrmann", "createdAt": "2020-04-20T14:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMTc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxOTg4OA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409619888", "body": "One could think about factoring the lookup of methods and the logging statement out into a another method to avoid code duplication.", "bodyText": "One could think about factoring the lookup of methods and the logging statement out into a another method to avoid code duplication.", "bodyHTML": "<p dir=\"auto\">One could think about factoring the lookup of methods and the logging statement out into a another method to avoid code duplication.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T14:51:24Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/RegisterApplicationMasterResponseReflector.java", "diffHunk": "@@ -53,12 +59,20 @@\n \t\trequireNonNull(clazz);\n \n \t\ttry {\n-\t\t\tmethod = clazz.getMethod(\"getContainersFromPreviousAttempts\");\n+\t\t\tgetContainersFromPreviousAttemptsMethod = clazz.getMethod(\"getContainersFromPreviousAttempts\");\n \t\t} catch (NoSuchMethodException e) {\n \t\t\t// that happens in earlier Hadoop versions (pre 2.2)\n \t\t\tlogger.info(\"Cannot reconnect to previously allocated containers. \" +\n \t\t\t\t\"This YARN version does not support 'getContainersFromPreviousAttempts()'\");\n \t\t}\n+\n+\t\ttry {\n+\t\t\tgetSchedulerResourceTypesMethod = clazz.getMethod(\"getSchedulerResourceTypes\");\n+\t\t} catch (NoSuchMethodException e) {\n+\t\t\t// that happens in earlier Hadoop versions (pre 2.6)\n+\t\t\tlogger.info(\"Cannot get scheduler resource types. \" +\n+\t\t\t\t\"This YARN version does not support 'getSchedulerResourceTypes()'\");\n+\t\t}", "originalCommit": "82d5dd9966f887470f20377d618c78a88f25dd82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMjE4MA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409622180", "body": "```suggestion\r\n\tprivate Optional<Set<String>> getSchedulerResourceTypeNamesUnsafe(final Object response) {\r\n```\r\n\r\nand remove `@VisibleForTesting`.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tOptional<Set<String>> getSchedulerResourceTypeNamesUnsafe(final Object response) {\n          \n          \n            \n            \tprivate Optional<Set<String>> getSchedulerResourceTypeNamesUnsafe(final Object response) {\n          \n      \n    \n    \n  \n\nand remove @VisibleForTesting.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"135\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">Optional&lt;<span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">String</span>&gt;</span>&gt;</span> getSchedulerResourceTypeNamesUnsafe(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">Object</span> response) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"135\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k x x-first\">private</span><span class=\"x x-last\"> </span><span class=\"pl-k\">Optional&lt;<span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">String</span>&gt;</span>&gt;</span> getSchedulerResourceTypeNamesUnsafe(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">Object</span> response) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">and remove <code>@VisibleForTesting</code>.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T14:54:04Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/RegisterApplicationMasterResponseReflector.java", "diffHunk": "@@ -96,7 +110,40 @@\n \t}\n \n \t@VisibleForTesting\n-\tMethod getMethod() {\n-\t\treturn method;\n+\tMethod getGetContainersFromPreviousAttemptsMethod() {\n+\t\treturn getContainersFromPreviousAttemptsMethod;\n+\t}\n+\n+\t/**\n+\t * Get names of resource types that are considered by the Yarn scheduler.\n+\t * @param response The response object from the registration at the ResourceManager.\n+\t * @return A set of resource type names, or {@link Optional#empty()} if the Yarn version does not support this API.\n+\t */\n+\tOptional<Set<String>> getSchedulerResourceTypeNames(final RegisterApplicationMasterResponse response) {\n+\t\treturn getSchedulerResourceTypeNamesUnsafe(response);\n+\t}\n+\n+\t@VisibleForTesting\n+\tOptional<Set<String>> getSchedulerResourceTypeNamesUnsafe(final Object response) {", "originalCommit": "82d5dd9966f887470f20377d618c78a88f25dd82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjYzNw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r411422637", "bodyText": "Won't do because of testing purposes.", "author": "tillrohrmann", "createdAt": "2020-04-20T14:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMjE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNDM5MA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409624390", "body": "Either annotate with `@Nullable` and add the corresponding null checks or initialize with a mock `WorkerSpecContainerResourceAdapter` which fails on every call with an exception saying that the `RM` has not been properly initialized.", "bodyText": "Either annotate with @Nullable and add the corresponding null checks or initialize with a mock WorkerSpecContainerResourceAdapter which fails on every call with an exception saying that the RM has not been properly initialized.", "bodyHTML": "<p dir=\"auto\">Either annotate with <code>@Nullable</code> and add the corresponding null checks or initialize with a mock <code>WorkerSpecContainerResourceAdapter</code> which fails on every call with an exception saying that the <code>RM</code> has not been properly initialized.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T14:56:52Z", "path": "flink-yarn/src/main/java/org/apache/flink/yarn/YarnResourceManager.java", "diffHunk": "@@ -117,7 +118,9 @@\n \t/** Client to communicate with the Node manager and launch TaskExecutor processes. */\n \tprivate NMClientAsync nodeManagerClient;\n \n-\tprivate final WorkerSpecContainerResourceAdapter workerSpecContainerResourceAdapter;\n+\tprivate WorkerSpecContainerResourceAdapter workerSpecContainerResourceAdapter = null;", "originalCommit": "82d5dd9966f887470f20377d618c78a88f25dd82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzMDM3Nw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409630377", "bodyText": "An idea to keep the WorkerSpecContainerResourceAdapter final is to pass in the WorkerSpecContainerResourceAdapter.MatchingStrategy to the method getWorkerSpecs. If you look at the WorkerSpecContainerResourceAdapter class then one also sees that the matching strategy is not really an essential part of it. Only the lookup method changes its behaviour based on it. Everything else stays the same.", "author": "tillrohrmann", "createdAt": "2020-04-16T15:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNDM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNzY0Nw==", "url": "https://github.com/apache/flink/pull/11353#discussion_r409627647", "body": "Instead of calling private methods of the `RegisterApplicationMasterResponseReflector` we could also add an `assumeTrue` statement based on the Hadoop version. Then we can have two tests for Hadoop >= 2.6 and < 2.6.", "bodyText": "Instead of calling private methods of the RegisterApplicationMasterResponseReflector we could also add an assumeTrue statement based on the Hadoop version. Then we can have two tests for Hadoop >= 2.6 and < 2.6.", "bodyHTML": "<p dir=\"auto\">Instead of calling private methods of the <code>RegisterApplicationMasterResponseReflector</code> we could also add an <code>assumeTrue</code> statement based on the Hadoop version. Then we can have two tests for Hadoop &gt;= 2.6 and &lt; 2.6.</p>", "author": "tillrohrmann", "createdAt": "2020-04-16T15:00:53Z", "path": "flink-yarn/src/test/java/org/apache/flink/yarn/RegisterApplicationMasterResponseReflectorTest.java", "diffHunk": "@@ -88,7 +94,44 @@ public void testGetMethodReflectiveHadoop22() {\n \t\tfinal RegisterApplicationMasterResponseReflector registerApplicationMasterResponseReflector =\n \t\t\tnew RegisterApplicationMasterResponseReflector(LOG);\n \n-\t\tfinal Method method = registerApplicationMasterResponseReflector.getMethod();\n+\t\tfinal Method method = registerApplicationMasterResponseReflector.getGetContainersFromPreviousAttemptsMethod();\n+\t\tassertThat(method, notNullValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testCallsGetSchedulerResourceTypesMethodIfPresent() {\n+\t\tfinal RegisterApplicationMasterResponseReflector registerApplicationMasterResponseReflector =\n+\t\t\tnew RegisterApplicationMasterResponseReflector(LOG, HasMethod.class);\n+\n+\t\tfinal Optional<Set<String>> schedulerResourceTypeNames =\n+\t\t\tregisterApplicationMasterResponseReflector.getSchedulerResourceTypeNamesUnsafe(new HasMethod());", "originalCommit": "82d5dd9966f887470f20377d618c78a88f25dd82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg1ODQzNQ==", "url": "https://github.com/apache/flink/pull/11353#discussion_r410858435", "bodyText": "I'm not sure about this. My concern is that, the <2.6 test case might eventually not executed in most cases.\nTake testDoesntCallGetContainersFromPreviousAttemptsMethodIfAbsent as an example. If we make this test case only executed with Hadoop <2.2, then it's practically not executed. Currently we have Hadoop 2.8 for travis ci test, 2.4 & 2.8 for nightly test, and 2.4 (pom default) for local maven verify unless another version is intentionally specified.", "author": "xintongsong", "createdAt": "2020-04-19T09:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNzY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTA2NA==", "url": "https://github.com/apache/flink/pull/11353#discussion_r411421064", "bodyText": "Makes sense. I agree that your proposal is better.", "author": "tillrohrmann", "createdAt": "2020-04-20T14:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNzY0Nw=="}], "type": "inlineReview"}, {"oid": "c4edf089b07a5a95a8cc53c6a32bd98ff3f7dde0", "url": "https://github.com/apache/flink/commit/c4edf089b07a5a95a8cc53c6a32bd98ff3f7dde0", "message": "[FLINK-16438][yarn] Decide WorkerSpecContainerResourceAdapter.MatchingStrategy based on RegisterApplicationMasterResponse.", "committedDate": "2020-04-19T09:51:50Z", "type": "forcePushed"}, {"oid": "d3311198b6bdb3067daaede3847e73c9d2b2496e", "url": "https://github.com/apache/flink/commit/d3311198b6bdb3067daaede3847e73c9d2b2496e", "message": "[FLINK-16438][yarn] Decide WorkerSpecContainerResourceAdapter.MatchingStrategy based on RegisterApplicationMasterResponse.\n\nThis closes #11353.", "committedDate": "2020-04-24T13:58:53Z", "type": "forcePushed"}, {"oid": "5d1c5ac910681356c57f129fcfaa0c37eb6eca11", "url": "https://github.com/apache/flink/commit/5d1c5ac910681356c57f129fcfaa0c37eb6eca11", "message": "[hotfix][k8s] Remove duplicated taskManagerMemoryMB from KubernetesTaskManagerParameters.", "committedDate": "2020-04-25T13:31:25Z", "type": "commit"}, {"oid": "83b71388187c82d29d8ba44e32a786642ec87ec5", "url": "https://github.com/apache/flink/commit/83b71388187c82d29d8ba44e32a786642ec87ec5", "message": "[hotfix][k8s][test] Allowing custom slot manager in KubernetesResourceManagerTest.", "committedDate": "2020-04-25T13:31:25Z", "type": "commit"}, {"oid": "78603b37601598568a26adf4e01a89f5eea3ad7d", "url": "https://github.com/apache/flink/commit/78603b37601598568a26adf4e01a89f5eea3ad7d", "message": "[FLINK-16439][runtime] Introduce PendingWorkerCounter for counting pending workers per WorkerResourceSpec in ActiveResourceManager.", "committedDate": "2020-04-25T13:31:26Z", "type": "commit"}, {"oid": "98e8b0e6f9bef21b4e740cf1ade18e9ec3df0b24", "url": "https://github.com/apache/flink/commit/98e8b0e6f9bef21b4e740cf1ade18e9ec3df0b24", "message": "[FLINK-16439][k8s] KubernetesResourceManager starts workers with resources requested by SlotManager.\n\nThis means KubernetesResourceManager no longer:\n- be aware of the default task executor resources\n- assumes all workers are identical\n\nThis closes #11323.", "committedDate": "2020-04-25T13:31:26Z", "type": "commit"}, {"oid": "8882b86566c51dc0161757b951f3af711e76c6d3", "url": "https://github.com/apache/flink/commit/8882b86566c51dc0161757b951f3af711e76c6d3", "message": "[hotfix][runtime][k8s] Renaming methods for better code readability.", "committedDate": "2020-04-25T13:31:26Z", "type": "commit"}, {"oid": "bdd39782cdf6eade8adfb7fb28dbc3824bc6e3a2", "url": "https://github.com/apache/flink/commit/bdd39782cdf6eade8adfb7fb28dbc3824bc6e3a2", "message": "[hotfix][yarn][test] Avoid using Mockito for Container in YarnResourceManagerTest.", "committedDate": "2020-04-25T13:31:26Z", "type": "commit"}, {"oid": "8b2376ac603170bbb9bf804fce2cb97a3b73fac7", "url": "https://github.com/apache/flink/commit/8b2376ac603170bbb9bf804fce2cb97a3b73fac7", "message": "[hotfix][yarn][test] Avoid using Mockito for ContainerStatus in YarnResourceManagerTest.", "committedDate": "2020-04-25T13:31:26Z", "type": "commit"}, {"oid": "16a84fdcb9f2ba7216f989bcce88522830a31d51", "url": "https://github.com/apache/flink/commit/16a84fdcb9f2ba7216f989bcce88522830a31d51", "message": "[hotfix][yarn][test] Avoid using Mockito for AMRMClientAsync in YarnResourceManagerTest.", "committedDate": "2020-04-25T13:31:27Z", "type": "commit"}, {"oid": "a864a8e89eaeb2f5363f1991c7339f7ddae7426f", "url": "https://github.com/apache/flink/commit/a864a8e89eaeb2f5363f1991c7339f7ddae7426f", "message": "[hotfix][yarn][test] Avoid using Mockito for NMClientAsync in YarnResourceManagerTest.", "committedDate": "2020-04-25T13:31:27Z", "type": "commit"}, {"oid": "47025f716c4b303aa707653f46420277174c9455", "url": "https://github.com/apache/flink/commit/47025f716c4b303aa707653f46420277174c9455", "message": "[hotfix][yarn][test] Avoid using Mockito for TaskExecutorGateway in YarnResourceManagerTest.", "committedDate": "2020-04-25T13:31:27Z", "type": "commit"}, {"oid": "8380081e59939cc1b481aacb94a1299647d0cc9e", "url": "https://github.com/apache/flink/commit/8380081e59939cc1b481aacb94a1299647d0cc9e", "message": "[hotfix][yarn] Code clean-ups in RegisterApplicationMasterResponseReflectorTest.", "committedDate": "2020-04-25T13:31:27Z", "type": "commit"}, {"oid": "a91057f02ae2acf412afa5b501a4c378e583e2a3", "url": "https://github.com/apache/flink/commit/a91057f02ae2acf412afa5b501a4c378e583e2a3", "message": "[FLINK-16438][yarn] Introduce WorkerSpecContainerResourceAdapter for converting between Flink WorkerResourceSpec and Yarn container Resource in YarnResourceManager.", "committedDate": "2020-04-25T13:31:27Z", "type": "commit"}, {"oid": "f0193565c33dea816be14f859ca8c02b034ec617", "url": "https://github.com/apache/flink/commit/f0193565c33dea816be14f859ca8c02b034ec617", "message": "[FLINK-16438][yarn] YarnResourceManager starts workers with resources requested by SlotManager.\n\nThis means YarnResourceManager no longer:\n- be aware of the default task executor resources\n- assumes all workers are identical", "committedDate": "2020-04-25T13:31:27Z", "type": "commit"}, {"oid": "03da1cf6475a969256e2adf4f2acc97ac169a227", "url": "https://github.com/apache/flink/commit/03da1cf6475a969256e2adf4f2acc97ac169a227", "message": "[FLINK-16438][runtime] Remove unused TaskExecutorProcessSpec from ActiveResourceManager.", "committedDate": "2020-04-25T13:31:28Z", "type": "commit"}, {"oid": "65e43b823a71c277e5abaa324672f39c1918b49a", "url": "https://github.com/apache/flink/commit/65e43b823a71c277e5abaa324672f39c1918b49a", "message": "[FLINK-16438][yarn] Decide WorkerSpecContainerResourceAdapter.MatchingStrategy based on RegisterApplicationMasterResponse.\n\nThis closes #11353.", "committedDate": "2020-04-25T13:31:28Z", "type": "commit"}, {"oid": "65e43b823a71c277e5abaa324672f39c1918b49a", "url": "https://github.com/apache/flink/commit/65e43b823a71c277e5abaa324672f39c1918b49a", "message": "[FLINK-16438][yarn] Decide WorkerSpecContainerResourceAdapter.MatchingStrategy based on RegisterApplicationMasterResponse.\n\nThis closes #11353.", "committedDate": "2020-04-25T13:31:28Z", "type": "forcePushed"}]}