{"pr_number": 10779, "pr_title": "[FLINK-15327][runtime] No warning of InterruptedException during cancel.", "pr_author": "AHeise", "pr_createdAt": "2020-01-06T14:14:59Z", "pr_url": "https://github.com/apache/flink/pull/10779", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMzMjY1OA==", "url": "https://github.com/apache/flink/pull/10779#discussion_r363332658", "body": "We could add a simple test coverage for this, for example by extending `SourceStreamTaskTest#testInterruptedNotSwallowed` with a boolean parameter, controlling whether the exception is thrown wrapped or not (similar pattern as  `SourceStreamTaskTest#testCancellationWithSourceBlockedOnLock(boolean, boolean)`.", "bodyText": "We could add a simple test coverage for this, for example by extending SourceStreamTaskTest#testInterruptedNotSwallowed with a boolean parameter, controlling whether the exception is thrown wrapped or not (similar pattern as  SourceStreamTaskTest#testCancellationWithSourceBlockedOnLock(boolean, boolean).", "bodyHTML": "<p dir=\"auto\">We could add a simple test coverage for this, for example by extending <code>SourceStreamTaskTest#testInterruptedNotSwallowed</code> with a boolean parameter, controlling whether the exception is thrown wrapped or not (similar pattern as  <code>SourceStreamTaskTest#testCancellationWithSourceBlockedOnLock(boolean, boolean)</code>.</p>", "author": "pnowojski", "createdAt": "2020-01-06T15:08:19Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -484,27 +484,15 @@ public final void invoke() throws Exception {\n \n \tprivate void runMailboxLoop() throws Exception {\n \t\ttry {\n-\t\t\ttry {\n-\t\t\t\tmailboxProcessor.runMailboxLoop();\n-\t\t\t}\n-\t\t\tcatch (WrappingRuntimeException wrappingException) {\n-\t\t\t\tThrowable unwrapped = wrappingException.unwrap();\n-\t\t\t\tif (unwrapped instanceof Exception) {\n-\t\t\t\t\tthrow (Exception) unwrapped;\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tthrow wrappingException;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcatch (InterruptedException e) {\n-\t\t\tif (!canceled) {\n-\t\t\t\tThread.currentThread().interrupt();\n-\t\t\t\tthrow e;\n-\t\t\t}\n+\t\t\tmailboxProcessor.runMailboxLoop();\n \t\t}\n \t\tcatch (Exception e) {\n-\t\t\tif (canceled) {\n+\t\t\tif (ExceptionUtils.findThrowable(e, InterruptedException.class).isPresent()) {", "originalCommit": "87a6ea87ad6acf4f06363912ce28b6b87eb4f1f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "96ed39106bee2ad8c55eef665ae8debcbad576f9", "url": "https://github.com/apache/flink/commit/96ed39106bee2ad8c55eef665ae8debcbad576f9", "message": "[FLINK-15327][runtime] No warning of InterruptedException during cancel.\n\nInterruptedException are previously only handled when wrapped in\nWrappingRuntimeException. This patch looks through the whole exception\nchain.", "committedDate": "2020-01-14T11:22:21Z", "type": "commit"}]}