{"pr_number": 11070, "pr_title": "[FLINK-16013][core] Make complex type config options could be parsed correctly", "pr_author": "wangyang0918", "pr_createdAt": "2020-02-12T12:48:29Z", "pr_url": "https://github.com/apache/flink/pull/11070", "timeline": [{"oid": "8bdc077ea0813363d120eed404a2f4cd93ef0f9a", "url": "https://github.com/apache/flink/commit/8bdc077ea0813363d120eed404a2f4cd93ef0f9a", "message": "[FLINK-16013][core] Write and parse list config option correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string in Configuration#toMap. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-12T12:49:34Z", "type": "forcePushed"}, {"oid": "991a08ce8916c79874682ae2d088d3e7ab3606a3", "url": "https://github.com/apache/flink/commit/991a08ce8916c79874682ae2d088d3e7ab3606a3", "message": "[FLINK-16013][core] Make list and map config options could be parsed correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string. For Map type config option, we need to convert it to comma-separated key:value pairs. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-13T04:18:02Z", "type": "forcePushed"}, {"oid": "99dad8370f26efe83241865b2f3ec4771fc1b436", "url": "https://github.com/apache/flink/commit/99dad8370f26efe83241865b2f3ec4771fc1b436", "message": "[FLINK-16013][core] Make list and map config options could be parsed correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string. For Map type config option, we need to convert it to comma-separated key:value pairs. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-13T04:36:08Z", "type": "forcePushed"}, {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25", "url": "https://github.com/apache/flink/commit/1fc7132f5b81cc353ce497c2fc6bc1e695abba25", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-13T05:47:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg==", "url": "https://github.com/apache/flink/pull/11070#discussion_r378901526", "body": "```suggestion\r\n\t\t\treturn String.join(\";\", ((List<?>) o).stream().map(this::convertToString).toArray(String[]::new));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));\n          \n          \n            \n            \t\t\treturn String.join(\";\", ((List<?>) o).stream().map(this::convertToString).toArray(String[]::new));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>join(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>;<span class=\"pl-pds\">\"</span></span>, ((<span class=\"pl-k\">List&lt;?&gt;</span>) o)<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>map(<span class=\"pl-smi x x-first\">Object</span><span class=\"pl-k x\">::</span><span class=\"x x-last\">toString</span>)<span class=\"pl-k\">.</span>toArray(<span class=\"pl-k\">String</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>join(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>;<span class=\"pl-pds\">\"</span></span>, ((<span class=\"pl-k\">List&lt;?&gt;</span>) o)<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>map(<span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x\">::</span><span class=\"x x-last\">convertToString</span>)<span class=\"pl-k\">.</span>toArray(<span class=\"pl-k\">String</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "dawidwys", "createdAt": "2020-02-13T14:40:58Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +958,12 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));", "originalCommit": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMjAxMg==", "url": "https://github.com/apache/flink/pull/11070#discussion_r378922012", "bodyText": "Could you also escape the entries in the list? Parsing lists supports escaping with ' character.\nSo that e.g. A;'A;B';C is parsed as [\"A\", \"A;B\", \"C\"]. The same applies for Maps. I think when writing values out it's safe to always escape them.\nYou can check some examples of escaping in StructuredOptionsSplitterTest or in ReadableWritableConfigurationTest see test for list<string>.", "author": "dawidwys", "createdAt": "2020-02-13T15:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNDkzNA==", "url": "https://github.com/apache/flink/pull/11070#discussion_r379314934", "bodyText": "Why isn't this using Collectors.joining(\";\")?\ni.e.,\nreturn ((List<?>) o).stream().map(this::convertToString).collect(Collectors.joining(\";\"));", "author": "zentol", "createdAt": "2020-02-14T08:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzMzQzMg==", "url": "https://github.com/apache/flink/pull/11070#discussion_r379433432", "bodyText": "I will escape the value string when converting List and Map to structured string. Also Collectors.joining(\";\") will make the codes more concise.", "author": "wangyang0918", "createdAt": "2020-02-14T13:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyODM1Ng==", "url": "https://github.com/apache/flink/pull/11070#discussion_r378928356", "body": "How about we combine those tests into a single one. Tests that do IO operations might be expensive.", "bodyText": "How about we combine those tests into a single one. Tests that do IO operations might be expensive.", "bodyHTML": "<p dir=\"auto\">How about we combine those tests into a single one. Tests that do IO operations might be expensive.</p>", "author": "dawidwys", "createdAt": "2020-02-13T15:22:06Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,61 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteListConfigOptionAndReload() throws IOException {", "originalCommit": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyOTA4OQ==", "url": "https://github.com/apache/flink/pull/11070#discussion_r378929089", "bodyText": "But on the other hand I do appreciate testing a single thing at a time. I think the classes are not very testable, especially the GlobalConfiguration.", "author": "dawidwys", "createdAt": "2020-02-13T15:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyODM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzMTkzMA==", "url": "https://github.com/apache/flink/pull/11070#discussion_r379431930", "bodyText": "I will merge this tests to a single one.", "author": "wangyang0918", "createdAt": "2020-02-14T13:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyODM1Ng=="}], "type": "inlineReview"}, {"oid": "5b4dce8c06df49fcdb43099e25fae1f24cd13065", "url": "https://github.com/apache/flink/commit/5b4dce8c06df49fcdb43099e25fae1f24cd13065", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-14T13:11:41Z", "type": "forcePushed"}, {"oid": "11855f49380d1a81bef1d47e2f7c6e467046c507", "url": "https://github.com/apache/flink/commit/11855f49380d1a81bef1d47e2f7c6e467046c507", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-14T13:17:37Z", "type": "forcePushed"}, {"oid": "c7830139600d511b3173a5f36227ccfe0874cd71", "url": "https://github.com/apache/flink/commit/c7830139600d511b3173a5f36227ccfe0874cd71", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-14T13:18:20Z", "type": "forcePushed"}, {"oid": "273458ebb91ae5593315fef0862388c08e32f64b", "url": "https://github.com/apache/flink/commit/273458ebb91ae5593315fef0862388c08e32f64b", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-14T13:32:00Z", "type": "forcePushed"}, {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407", "url": "https://github.com/apache/flink/commit/65c5ac59ffa2453abc8dfb0ca3a3431a504ff407", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-17T08:40:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ==", "url": "https://github.com/apache/flink/pull/11070#discussion_r383129131", "body": "I don't necessarily understand why do we need that complex logic. \r\nCan't we just do `\"'\" + value.replaceAll(\"'\", \"''\") + \"'\"` ?\r\n\r\nMoreover we should try not to use any external dependencies. Especially guava.", "bodyText": "I don't necessarily understand why do we need that complex logic.\nCan't we just do \"'\" + value.replaceAll(\"'\", \"''\") + \"'\" ?\nMoreover we should try not to use any external dependencies. Especially guava.", "bodyHTML": "<p dir=\"auto\">I don't necessarily understand why do we need that complex logic.<br>\nCan't we just do <code>\"'\" + value.replaceAll(\"'\", \"''\") + \"'\"</code> ?</p>\n<p dir=\"auto\">Moreover we should try not to use any external dependencies. Especially guava.</p>", "author": "dawidwys", "createdAt": "2020-02-24T08:28:38Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/StructuredOptionsSplitter.java", "diffHunk": "@@ -52,6 +59,37 @@\n \t\treturn processTokens(tokens);\n \t}\n \n+\t/**\n+\t * When write a string out, it is always needs to escaped. If the input string contains double quote or specified\n+\t * escape chars, then it will be escaped by single quote. The single quote will be escaped by doubling.\n+\t *\n+\t * <p>Given that the escapeChar is (;)\n+\t *\n+\t * <p>Examples:\n+\t * <ul>\n+\t *     <li>A,B,C,D => A,B,C,D</li>\n+\t *     <li>A;BCD => 'A;BCD'</li>\n+\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n+\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n+\t * </ul>\n+\t *\n+\t * @param value a string which needs to be escaped\n+\t * @param escapeChars escape chars for the escape conditions\n+\t * @return escaped string with single quote\n+\t */\n+\tstatic String escapeWithSingleQuote(String value, String... escapeChars) {", "originalCommit": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNzc0Ng==", "url": "https://github.com/apache/flink/pull/11070#discussion_r383137746", "bodyText": "How about:\n\t/**\n\t * Escapes the given string with single quotes, if the input string contains a double quote or any of the\n\t * given {@code charsToEscape}. Any single quotes in the input string will be escaped by doubling.\n\t *\n\t * <p>Given that the escapeChar is (;)\n\t *\n\t * <p>Examples:\n\t * <ul>\n\t *     <li>A,B,C,D => A,B,C,D</li>\n\t *     <li>A;BCD => 'A;BCD'</li>\n\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n\t * </ul>\n\t *\n\t * @param string a string which needs to be escaped\n\t * @param charsToEscape escape chars for the escape conditions\n\t * @return escaped string by single quote\n\t */\n\tstatic String escapeWithSingleQuote(String string, String... charsToEscape) {\n\t\tboolean escape = Arrays.stream(charsToEscape).anyMatch(string::contains) || string.contains(\"\\\"\");\n\n\t\tif (escape) {\n\t\t\treturn \"'\" + string.replaceAll(\"'\", \"''\") + \"'\";\n\t\t}\n\n\t\treturn string;\n\t}", "author": "dawidwys", "createdAt": "2020-02-24T08:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MDMxNA==", "url": "https://github.com/apache/flink/pull/11070#discussion_r383150314", "bodyText": "Usually the guava implementation has better performance than java regex replacement. However, i am not against with removing the guava dependencies. I will use \"'\" + value.replaceAll(\"'\", \"''\") + \"'\" instead.", "author": "wangyang0918", "createdAt": "2020-02-24T09:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4NzE3MA==", "url": "https://github.com/apache/flink/pull/11070#discussion_r383187170", "bodyText": "The escape condition also needs to add string.contains(\"'\").", "author": "wangyang0918", "createdAt": "2020-02-24T10:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MDY2Nw==", "url": "https://github.com/apache/flink/pull/11070#discussion_r383140667", "body": "How about we make it a bit more readable?\r\n\r\n```\r\n\t\t\t\t.map(e -> {\r\n\t\t\t\t\tString escapedKey = escapeWithSingleQuote(e.getKey().toString(), \":\");\r\n\t\t\t\t\tString escapedValue = escapeWithSingleQuote(e.getValue().toString(), \":\");\r\n\r\n\t\t\t\t\treturn escapeWithSingleQuote(escapedKey + \":\" + escapedValued, \",\");\r\n\t\t\t\t})\r\n```", "bodyText": "How about we make it a bit more readable?\n\t\t\t\t.map(e -> {\n\t\t\t\t\tString escapedKey = escapeWithSingleQuote(e.getKey().toString(), \":\");\n\t\t\t\t\tString escapedValue = escapeWithSingleQuote(e.getValue().toString(), \":\");\n\n\t\t\t\t\treturn escapeWithSingleQuote(escapedKey + \":\" + escapedValued, \",\");\n\t\t\t\t})", "bodyHTML": "<p dir=\"auto\">How about we make it a bit more readable?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\t\t\t\t.map(e -&gt; {\n\t\t\t\t\tString escapedKey = escapeWithSingleQuote(e.getKey().toString(), &quot;:&quot;);\n\t\t\t\t\tString escapedValue = escapeWithSingleQuote(e.getValue().toString(), &quot;:&quot;);\n\n\t\t\t\t\treturn escapeWithSingleQuote(escapedKey + &quot;:&quot; + escapedValued, &quot;,&quot;);\n\t\t\t\t})\n\"><pre><code>\t\t\t\t.map(e -&gt; {\n\t\t\t\t\tString escapedKey = escapeWithSingleQuote(e.getKey().toString(), \":\");\n\t\t\t\t\tString escapedValue = escapeWithSingleQuote(e.getValue().toString(), \":\");\n\n\t\t\t\t\treturn escapeWithSingleQuote(escapedKey + \":\" + escapedValued, \",\");\n\t\t\t\t})\n</code></pre></div>", "author": "dawidwys", "createdAt": "2020-02-24T08:58:48Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +959,15 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn ((List<?>) o).stream()\n+\t\t\t\t.map(e -> escapeWithSingleQuote(convertToString(e), \";\"))\n+\t\t\t\t.collect(Collectors.joining(\";\"));\n+\t\t} else if (o instanceof Map) {\n+\t\t\treturn ((Map<?, ?>) o).entrySet().stream()\n+\t\t\t\t.map(e -> escapeWithSingleQuote(escapeWithSingleQuote(e.getKey().toString(), \":\") + \":\"\n+\t\t\t\t\t\t+ escapeWithSingleQuote(e.getValue().toString(), \":\"), \",\"))", "originalCommit": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MDQ1NQ==", "url": "https://github.com/apache/flink/pull/11070#discussion_r383150455", "bodyText": "Make sense. I will update it.", "author": "wangyang0918", "createdAt": "2020-02-24T09:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MDY2Nw=="}], "type": "inlineReview"}, {"oid": "b36749feb6378d63620cfe897c0cf9a4a4c84512", "url": "https://github.com/apache/flink/commit/b36749feb6378d63620cfe897c0cf9a4a4c84512", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-24T10:20:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5MzU3NQ==", "url": "https://github.com/apache/flink/pull/11070#discussion_r383193575", "body": "nit: the contract of `assertThat` is that the first argument is the actual result. Therefore the arguments should swapped.", "bodyText": "nit: the contract of assertThat is that the first argument is the actual result. Therefore the arguments should swapped.", "bodyHTML": "<p dir=\"auto\">nit: the contract of <code>assertThat</code> is that the first argument is the actual result. Therefore the arguments should swapped.</p>", "author": "dawidwys", "createdAt": "2020-02-24T10:46:13Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,56 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteConfigurationAndReload() throws IOException {\n+\t\tfinal File flinkConfDir = temporaryFolder.newFolder().getAbsoluteFile();\n+\t\tfinal Configuration flinkConfig = new Configuration();\n+\n+\t\tfinal ConfigOption<List<String>> listStringConfigOption = ConfigOptions\n+\t\t\t.key(\"test-list-string-key\")\n+\t\t\t.stringType()\n+\t\t\t.asList()\n+\t\t\t.noDefaultValue();\n+\t\tfinal List<String> list = Arrays.asList(\"A,B,C,D\", \"A'B'C'D\", \"A;BCD\", \"AB\\\"C\\\"D\", \"AB'\\\"D:B\");\n+\t\tflinkConfig.set(listStringConfigOption, list);\n+\t\tassertThat(list, containsInAnyOrder(flinkConfig.get(listStringConfigOption).toArray()));\n+\n+\t\tfinal ConfigOption<List<Duration>> listDurationConfigOption = ConfigOptions\n+\t\t\t.key(\"test-list-duration-key\")\n+\t\t\t.durationType()\n+\t\t\t.asList()\n+\t\t\t.noDefaultValue();\n+\t\tfinal List<Duration> durationList = Arrays.asList(Duration.ofSeconds(3), Duration.ofMinutes(1));\n+\t\tflinkConfig.set(listDurationConfigOption, durationList);\n+\t\tassertThat(durationList, containsInAnyOrder(flinkConfig.get(listDurationConfigOption).toArray()));\n+\n+\t\tfinal ConfigOption<Map<String, String>> mapConfigOption = ConfigOptions\n+\t\t\t.key(\"test-map-key\")\n+\t\t\t.mapType()\n+\t\t\t.noDefaultValue();\n+\t\tfinal Map<String, String> map = new HashMap<>();\n+\t\tmap.put(\"key1\", \"A,B,C,D\");\n+\t\tmap.put(\"key2\", \"A;BCD\");\n+\t\tmap.put(\"key3\", \"A'B'C'D\");\n+\t\tmap.put(\"key4\", \"AB\\\"C\\\"D\");\n+\t\tmap.put(\"key5\", \"AB'\\\"D:B\");\n+\t\tflinkConfig.set(mapConfigOption, map);\n+\t\tassertThat(map.entrySet(), containsInAnyOrder(flinkConfig.get(mapConfigOption).entrySet().toArray()));\n+\n+\t\tfinal ConfigOption<Duration> durationConfigOption = ConfigOptions\n+\t\t\t.key(\"test-duration-key\")\n+\t\t\t.durationType()\n+\t\t\t.noDefaultValue();\n+\t\tfinal Duration duration = Duration.ofMillis(3000);\n+\t\tflinkConfig.set(durationConfigOption, duration);\n+\t\tassertEquals(duration, flinkConfig.get(durationConfigOption));\n+\n+\t\tBootstrapTools.writeConfiguration(flinkConfig, new File(flinkConfDir, FLINK_CONF_FILENAME));\n+\t\tfinal Configuration loadedFlinkConfig = GlobalConfiguration.loadConfiguration(flinkConfDir.getAbsolutePath());\n+\t\tassertThat(list, containsInAnyOrder(loadedFlinkConfig.get(listStringConfigOption).toArray()));\n+\t\tassertThat(durationList, containsInAnyOrder(flinkConfig.get(listDurationConfigOption).toArray()));\n+\t\tassertThat(map.entrySet(), containsInAnyOrder(loadedFlinkConfig.get(mapConfigOption).entrySet().toArray()));", "originalCommit": "b36749feb6378d63620cfe897c0cf9a4a4c84512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5ODUxNg==", "url": "https://github.com/apache/flink/pull/11070#discussion_r383198516", "bodyText": "I will have quick fix and push again.", "author": "wangyang0918", "createdAt": "2020-02-24T10:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5MzU3NQ=="}], "type": "inlineReview"}, {"oid": "e017d47c5004fa2c81d8bc05754865d564bf70a8", "url": "https://github.com/apache/flink/commit/e017d47c5004fa2c81d8bc05754865d564bf70a8", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-24T10:59:08Z", "type": "forcePushed"}, {"oid": "6a2109197d2aa39abcf9f91c924462bb6aac3462", "url": "https://github.com/apache/flink/commit/6a2109197d2aa39abcf9f91c924462bb6aac3462", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-25T05:39:15Z", "type": "commit"}, {"oid": "6a2109197d2aa39abcf9f91c924462bb6aac3462", "url": "https://github.com/apache/flink/commit/6a2109197d2aa39abcf9f91c924462bb6aac3462", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.", "committedDate": "2020-02-25T05:39:15Z", "type": "forcePushed"}]}