{"pr_number": 13604, "pr_title": "[FLINK-19585][tests] Waiting for job to run before savepointing in UnalignedCheckpointCompatibilityITCase.", "pr_author": "AHeise", "pr_createdAt": "2020-10-13T05:38:50Z", "pr_url": "https://github.com/apache/flink/pull/13604", "timeline": [{"oid": "f573014ea1efca40fbd14f2880fd7ce922559dc9", "url": "https://github.com/apache/flink/commit/f573014ea1efca40fbd14f2880fd7ce922559dc9", "message": "[FLINK-19585][minicluster] Use SavepointRestoreSettings of StreamGraph while creating JobGraph.\n\nThere is currently no way to start from savepoints while using MiniCluster. The cluster config cannot be used (and would be a mismatch) because it's overridden by MiniClusterPipelineExecutorServiceLoader#createConfiguration.\nHowever, the jobgraph that is being generated in MiniClusterPipelineExecutorServiceLoader#MiniClusterExecutor only uses this configuration to translate the Pipeline/StreamGraph. In production code, savepoint restore settings are usually applied last and taken from the StreamGraph.", "committedDate": "2020-10-14T06:56:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjU0Mw==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504756543", "body": "It's generally an anti-pattern in tests to \"just sleep for a while\". Can't you use the backpressure monitoring to wait until there is backpressure? (or would that take longer?)", "bodyText": "It's generally an anti-pattern in tests to \"just sleep for a while\". Can't you use the backpressure monitoring to wait until there is backpressure? (or would that take longer?)", "bodyHTML": "<p dir=\"auto\">It's generally an anti-pattern in tests to \"just sleep for a while\". Can't you use the backpressure monitoring to wait until there is backpressure? (or would that take longer?)</p>", "author": "rmetzger", "createdAt": "2020-10-14T15:08:56Z", "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointCompatibilityITCase.java", "diffHunk": "@@ -107,28 +119,55 @@ public void test() throws Exception {\n \t}\n \n \tprivate Tuple2<String, Map<String, Object>> runAndTakeSavepoint() throws Exception {\n-\t\tJobClient jobClient = submitJobInitially(env(startAligned, 0, emptyMap()));\n-\t\tThread.sleep(FIRST_RUN_EL_COUNT * FIRST_RUN_BACKPRESSURE_MS); // wait for all tasks to run and some backpressure from sink\n-\t\tFuture<Map<String, Object>> accFuture = jobClient.getAccumulators();\n-\t\tFuture<String> savepointFuture = jobClient.stopWithSavepoint(false, tempFolder().toURI().toString());\n-\t\treturn new Tuple2<>(savepointFuture.get(), accFuture.get());\n+\t\treturn withCluster(new Configuration(), miniCluster -> {\n+\t\t\tJobClient jobClient = submitJobInitially(env(startAligned, 0));\n+\t\t\twaitForAllTaskRunning(miniCluster, jobClient.getJobID(), Deadline.fromNow(Duration.of(30, ChronoUnit.SECONDS)));\n+\t\t\tThread.sleep(FIRST_RUN_BACKPRESSURE_MS); // wait for some backpressure from sink", "originalCommit": "755d9eb83e7fa1f497fe083850ce369d8d1d5940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMzA3NA==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504913074", "bodyText": "The original test used sleeping for waiting until all jobs are running (hence this bug). However, whether backpressure build up or not is quite irrelevant for the semantics of the test. It's just testing that some outputs are present. I could probably wait on the output metric.\nHowever, it feels like LOTS of such building blocks are missing and should probably be at a more general place. (I tried to do that with waitForAllTaskRunning but it's easily overlooked. Ideally it should be in MiniCluster).", "author": "AHeise", "createdAt": "2020-10-14T19:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNTI5OQ==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504915299", "bodyText": "Maybe such utilities should also be made available to the user, for writing their own tests.\nThere are a lot of very useful utilities everywhere in our tests, but it's difficult to discover them. Ideally we have them categorized and standardized somewhere.", "author": "rmetzger", "createdAt": "2020-10-14T19:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MjQ4NA==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504762484", "body": "Why are you not reusing the cluster for the different tests / jobs?", "bodyText": "Why are you not reusing the cluster for the different tests / jobs?", "bodyHTML": "<p dir=\"auto\">Why are you not reusing the cluster for the different tests / jobs?</p>", "author": "rmetzger", "createdAt": "2020-10-14T15:16:37Z", "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointCompatibilityITCase.java", "diffHunk": "@@ -107,28 +119,55 @@ public void test() throws Exception {\n \t}\n \n \tprivate Tuple2<String, Map<String, Object>> runAndTakeSavepoint() throws Exception {\n-\t\tJobClient jobClient = submitJobInitially(env(startAligned, 0, emptyMap()));\n-\t\tThread.sleep(FIRST_RUN_EL_COUNT * FIRST_RUN_BACKPRESSURE_MS); // wait for all tasks to run and some backpressure from sink\n-\t\tFuture<Map<String, Object>> accFuture = jobClient.getAccumulators();\n-\t\tFuture<String> savepointFuture = jobClient.stopWithSavepoint(false, tempFolder().toURI().toString());\n-\t\treturn new Tuple2<>(savepointFuture.get(), accFuture.get());\n+\t\treturn withCluster(new Configuration(), miniCluster -> {\n+\t\t\tJobClient jobClient = submitJobInitially(env(startAligned, 0));\n+\t\t\twaitForAllTaskRunning(miniCluster, jobClient.getJobID(), Deadline.fromNow(Duration.of(30, ChronoUnit.SECONDS)));\n+\t\t\tThread.sleep(FIRST_RUN_BACKPRESSURE_MS); // wait for some backpressure from sink\n+\n+\t\t\tFuture<Map<String, Object>> accFuture = jobClient.getAccumulators();\n+\t\t\tFuture<String> savepointFuture = jobClient.stopWithSavepoint(false, tempFolder().toURI().toString());\n+\t\t\treturn new Tuple2<>(savepointFuture.get(), accFuture.get());\n+\t\t});\n \t}\n \n \tprivate Tuple2<String, Map<String, Object>> runAndTakeExternalCheckpoint() throws Exception {\n \t\tFile folder = tempFolder();\n-\t\tJobClient jobClient = submitJobInitially(externalCheckpointEnv(startAligned, folder, 100));\n-\t\tFile metadata = waitForChild(waitForChild(waitForChild(folder))); // structure: root/attempt/checkpoint/_metadata\n-\t\tcancelJob(jobClient);\n-\t\treturn new Tuple2<>(metadata.getParentFile().toString(), emptyMap());\n+\t\tfinal Configuration conf = new Configuration();\n+\t\tconf.set(CHECKPOINTS_DIRECTORY, folder.toURI().toString());\n+\t\t// prevent deletion of checkpoint files while it's being checked and used\n+\t\tconf.set(MAX_RETAINED_CHECKPOINTS, Integer.MAX_VALUE);\n+\t\treturn withCluster(conf,\n+\t\t\tminiCluster -> {\n+\t\t\t\tJobClient jobClient = submitJobInitially(externalCheckpointEnv(startAligned, 100));\n+\t\t\t\tFile metadata = waitForChild(waitForChild(waitForChild(folder))); // structure: root/attempt/checkpoint/_metadata\n+\t\t\t\tcancelJob(jobClient);\n+\t\t\t\treturn new Tuple2<>(metadata.getParentFile().toString(), emptyMap());\n+\t\t\t});\n \t}\n \n \tprivate static JobClient submitJobInitially(StreamExecutionEnvironment env) throws Exception {\n \t\treturn env.executeAsync(dag(FIRST_RUN_EL_COUNT, true, FIRST_RUN_BACKPRESSURE_MS, env));\n \t}\n \n \tprivate Map<String, Object> runFromSavepoint(String path, boolean isAligned, int totalCount) throws Exception {\n-\t\tStreamExecutionEnvironment env = env(isAligned, 50, Collections.singletonMap(SAVEPOINT_PATH, path));\n-\t\treturn env.execute(dag(totalCount, false, 0, env)).getJobExecutionResult().getAllAccumulatorResults();\n+\t\treturn withCluster(new Configuration(), miniCluster -> {\n+\t\t\tStreamExecutionEnvironment env = env(isAligned, 50);\n+\t\t\tfinal StreamGraph streamGraph = dag(totalCount, false, 0, env);\n+\t\t\tstreamGraph.setSavepointRestoreSettings(SavepointRestoreSettings.forPath(path));\n+\t\t\treturn env.execute(streamGraph).getJobExecutionResult().getAllAccumulatorResults();\n+\t\t});\n+\t}\n+\n+\tprivate <T> T withCluster(Configuration configuration,", "originalCommit": "755d9eb83e7fa1f497fe083850ce369d8d1d5940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMTU2NQ==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504911565", "bodyText": "Good point. Originally, I needed to inject the configuration to restore from savepoints, but that didn't work. So I can probably leave a cluster per test. A global cluster would probably also work, I just need to make the TempFolder a class rule.", "author": "AHeise", "createdAt": "2020-10-14T19:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMTY2Ng==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504911666", "bodyText": "Good point. Originally, I needed to inject the configuration to restore from savepoints, but that didn't work. So I can probably leave a cluster per test. A global cluster would probably also work, I just need to make the TempFolder a class rule.", "author": "AHeise", "createdAt": "2020-10-14T19:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MjQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NzA2OA==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504777068", "body": "```suggestion\r\n\tpublic static void waitForAllTaskRunning(MiniCluster miniCluster, JobID jobID, Deadline deadline) throws Exception {\r\n\t\torg.apache.flink.runtime.testutils.CommonTestUtils.waitUntilCondition(() -> {\r\n\t\t\tAccessExecutionGraph ec = miniCluster.getExecutionGraph(jobID).get();\r\n\t\t\treturn ec.getState() == JobStatus.RUNNING && ec.getAllVertices()\r\n\t\t\t\t.values()\r\n\t\t\t\t.stream()\r\n\t\t\t\t.allMatch(jobVertex ->\r\n\t\t\t\t\tArrays.stream(jobVertex.getTaskVertices()).allMatch(task -> task.getExecutionState() == ExecutionState.RUNNING)\r\n\t\t\t\t);\r\n\t\t}, deadline);\r\n\t}\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static void waitForAllTaskRunning(MiniClusterResource miniCluster, JobID jobID, Deadline deadline) throws Exception {\n          \n          \n            \n            \t\ttry (final RestClusterClient<?> clusterClient = new RestClusterClient<Object>(\n          \n          \n            \n            \t\t\t\tminiCluster.getClientConfiguration(),\n          \n          \n            \n            \t\t\t\tStandaloneClusterId.getInstance())) {\n          \n          \n            \n            \t\t\tJobMessageParameters params = new JobMessageParameters();\n          \n          \n            \n            \t\t\tparams.jobPathParameter.resolve(jobID);\n          \n          \n            \n            \t\t\torg.apache.flink.runtime.testutils.CommonTestUtils.waitUntilCondition(() -> {\n          \n          \n            \n            \t\t\t\tfinal JobDetailsInfo jobDetailsInfo = clusterClient.sendRequest(\n          \n          \n            \n            \t\t\t\t\tJobDetailsHeaders.getInstance(),\n          \n          \n            \n            \t\t\t\t\tparams,\n          \n          \n            \n            \t\t\t\t\tEmptyRequestBody.getInstance()).get();\n          \n          \n            \n            \t\t\t\treturn jobDetailsInfo.getJobStatus() == JobStatus.RUNNING &&\n          \n          \n            \n            \t\t\t\t\tjobDetailsInfo.getJobVerticesPerState().get(ExecutionState.RUNNING) ==\n          \n          \n            \n            \t\t\t\t\t\tjobDetailsInfo.getJobVertexInfos().size();\n          \n          \n            \n            \t\t\t}, deadline, 500);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t}\n          \n          \n            \n            \tpublic static void waitForAllTaskRunning(MiniCluster miniCluster, JobID jobID, Deadline deadline) throws Exception {\n          \n          \n            \n            \t\torg.apache.flink.runtime.testutils.CommonTestUtils.waitUntilCondition(() -> {\n          \n          \n            \n            \t\t\tAccessExecutionGraph ec = miniCluster.getExecutionGraph(jobID).get();\n          \n          \n            \n            \t\t\treturn ec.getState() == JobStatus.RUNNING && ec.getAllVertices()\n          \n          \n            \n            \t\t\t\t.values()\n          \n          \n            \n            \t\t\t\t.stream()\n          \n          \n            \n            \t\t\t\t.allMatch(jobVertex ->\n          \n          \n            \n            \t\t\t\t\tArrays.stream(jobVertex.getTaskVertices()).allMatch(task -> task.getExecutionState() == ExecutionState.RUNNING)\n          \n          \n            \n            \t\t\t\t);\n          \n          \n            \n            \t\t}, deadline);\n          \n          \n            \n            \t}", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> waitForAllTaskRunning(<span class=\"pl-smi\">MiniClusterResource</span> miniCluster, <span class=\"pl-smi\">JobID</span> jobID, <span class=\"pl-smi\">Deadline</span> deadline) throws <span class=\"pl-smi\">Exception</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k\">try</span> (<span class=\"pl-k\">final</span> <span class=\"pl-k\">RestClusterClient&lt;?&gt;</span> clusterClient <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">RestClusterClient&lt;<span class=\"pl-smi\">Object</span>&gt;</span>(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\tminiCluster<span class=\"pl-k\">.</span>getClientConfiguration(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-smi\">StandaloneClusterId</span><span class=\"pl-k\">.</span>getInstance())) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-smi\">JobMessageParameters</span> params <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JobMessageParameters</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\tparams<span class=\"pl-k\">.</span>jobPathParameter<span class=\"pl-k\">.</span>resolve(jobID);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-smi\">org.apache.flink.runtime.testutils<span class=\"pl-k\">.</span>CommonTestUtils</span><span class=\"pl-k\">.</span>waitUntilCondition(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">JobDetailsInfo</span> jobDetailsInfo <span class=\"pl-k\">=</span> clusterClient<span class=\"pl-k\">.</span>sendRequest(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t\t<span class=\"pl-smi\">JobDetailsHeaders</span><span class=\"pl-k\">.</span>getInstance(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t\tparams,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t\t<span class=\"pl-smi\">EmptyRequestBody</span><span class=\"pl-k\">.</span>getInstance())<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-k\">return</span> jobDetailsInfo<span class=\"pl-k\">.</span>getJobStatus() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">JobStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>RUNNING</span> <span class=\"pl-k\">&amp;&amp;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t\tjobDetailsInfo<span class=\"pl-k\">.</span>getJobVerticesPerState()<span class=\"pl-k\">.</span>get(<span class=\"pl-smi\">ExecutionState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>RUNNING</span>) <span class=\"pl-k\">==</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t\t\tjobDetailsInfo<span class=\"pl-k\">.</span>getJobVertexInfos()<span class=\"pl-k\">.</span>size();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t}, deadline, <span class=\"pl-c1\">500</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> waitForAllTaskRunning(<span class=\"pl-smi\">MiniCluster</span> miniCluster, <span class=\"pl-smi\">JobID</span> jobID, <span class=\"pl-smi\">Deadline</span> deadline) throws <span class=\"pl-smi\">Exception</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">org.apache.flink.runtime.testutils<span class=\"pl-k\">.</span>CommonTestUtils</span><span class=\"pl-k\">.</span>waitUntilCondition(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-smi\">AccessExecutionGraph</span> ec <span class=\"pl-k\">=</span> miniCluster<span class=\"pl-k\">.</span>getExecutionGraph(jobID)<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-k\">return</span> ec<span class=\"pl-k\">.</span>getState() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">JobStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>RUNNING</span> <span class=\"pl-k\">&amp;&amp;</span> ec<span class=\"pl-k\">.</span>getAllVertices()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t.values()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t.stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t.allMatch(jobVertex <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t\t<span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>stream(jobVertex<span class=\"pl-k\">.</span>getTaskVertices())<span class=\"pl-k\">.</span>allMatch(task <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> task<span class=\"pl-k\">.</span>getExecutionState() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">ExecutionState</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>RUNNING</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t}, deadline);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t}</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "rmetzger", "createdAt": "2020-10-14T15:35:36Z", "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/test/util/TestBaseUtils.java", "diffHunk": "@@ -102,6 +116,24 @@ private static void verifyJvmOptions() {\n \t\t\t\t+ \"m\", heap > MINIMUM_HEAP_SIZE_MB - 50);\n \t}\n \n+\tpublic static void waitForAllTaskRunning(MiniClusterResource miniCluster, JobID jobID, Deadline deadline) throws Exception {\n+\t\ttry (final RestClusterClient<?> clusterClient = new RestClusterClient<Object>(\n+\t\t\t\tminiCluster.getClientConfiguration(),\n+\t\t\t\tStandaloneClusterId.getInstance())) {\n+\t\t\tJobMessageParameters params = new JobMessageParameters();\n+\t\t\tparams.jobPathParameter.resolve(jobID);\n+\t\t\torg.apache.flink.runtime.testutils.CommonTestUtils.waitUntilCondition(() -> {\n+\t\t\t\tfinal JobDetailsInfo jobDetailsInfo = clusterClient.sendRequest(\n+\t\t\t\t\tJobDetailsHeaders.getInstance(),\n+\t\t\t\t\tparams,\n+\t\t\t\t\tEmptyRequestBody.getInstance()).get();\n+\t\t\t\treturn jobDetailsInfo.getJobStatus() == JobStatus.RUNNING &&\n+\t\t\t\t\tjobDetailsInfo.getJobVerticesPerState().get(ExecutionState.RUNNING) ==\n+\t\t\t\t\t\tjobDetailsInfo.getJobVertexInfos().size();\n+\t\t\t}, deadline, 500);\n+\t\t}\n+\t}\n+", "originalCommit": "755d9eb83e7fa1f497fe083850ce369d8d1d5940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NzM1OA==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504777358", "bodyText": "Not sure about the code formatting, and I haven't tested it much. But I guess you get the idea.", "author": "rmetzger", "createdAt": "2020-10-14T15:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNDEwNg==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504914106", "bodyText": "Hm Till actually proposed to use rest client, but I can't really see why your version wouldn't work.", "author": "AHeise", "createdAt": "2020-10-14T19:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMTUxOQ==", "url": "https://github.com/apache/flink/pull/13604#discussion_r504931519", "bodyText": "With your version, I can actually move it into flink-runtime CommonTestUtils.", "author": "AHeise", "createdAt": "2020-10-14T19:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NzA2OA=="}], "type": "inlineReview"}, {"oid": "2c46ee38b46372ba7e5fbe33d186b29b39a2a0e1", "url": "https://github.com/apache/flink/commit/2c46ee38b46372ba7e5fbe33d186b29b39a2a0e1", "message": "[FLINK-19585][tests] Waiting for all tasks to run before savepointing in UnalignedCheckpointCompatibilityITCase.", "committedDate": "2020-10-15T09:03:15Z", "type": "commit"}]}