{"pr_number": 14207, "pr_title": "[FLINK-20250][table-runtime] NPE when invoking AsyncLookupJoinRunner#close method", "pr_author": "SteNicholas", "pr_createdAt": "2020-11-25T06:44:17Z", "pr_url": "https://github.com/apache/flink/pull/14207", "timeline": [{"oid": "da25b44d59f5a02f8d780c17ee45f828fd2fd746", "url": "https://github.com/apache/flink/commit/da25b44d59f5a02f8d780c17ee45f828fd2fd746", "message": "[FLINK-20250][table-runtime] NPE when invoking AsyncLookupJoinRunner#close method", "committedDate": "2020-11-25T06:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMTIzMQ==", "url": "https://github.com/apache/flink/pull/14207#discussion_r537301231", "body": "`rf` should always not null ?", "bodyText": "rf should always not null ?", "bodyHTML": "<p dir=\"auto\"><code>rf</code> should always not null ?</p>", "author": "leonardBang", "createdAt": "2020-12-07T08:04:00Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/lookup/AsyncLookupJoinRunner.java", "diffHunk": "@@ -153,11 +154,20 @@ public void close() throws Exception {\n \t\tif (fetcher != null) {\n \t\t\tFunctionUtils.closeFunction(fetcher);\n \t\t}\n-\t\tfor (JoinedRowResultFuture rf : allResultFutures) {\n-\t\t\trf.close();\n+\t\tif (allResultFutures != null) {\n+\t\t\tfor (JoinedRowResultFuture rf : allResultFutures) {\n+\t\t\t\tif (rf != null) {", "originalCommit": "da25b44d59f5a02f8d780c17ee45f828fd2fd746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMTYzOQ==", "url": "https://github.com/apache/flink/pull/14207#discussion_r537301639", "body": "```suggestion\r\n\t\t\tfail(\"Unexpected close that failed with \" + e.getMessage());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfail(\"Expected close to fail with null pointer exception.\");\n          \n          \n            \n            \t\t\tfail(\"Unexpected close that failed with \" + e.getMessage());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\tfail(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Expected</span> close <span class=\"x x-first x-last\">to fail</span> with <span class=\"x x-first\">null pointer exception.</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\tfail(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Unexpected</span> close <span class=\"x x-first x-last\">that failed</span> with <span class=\"pl-pds x x-first\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> e</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getMessage()</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "leonardBang", "createdAt": "2020-12-07T08:04:47Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinRunnerTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join;\n+\n+import org.apache.flink.api.common.functions.AbstractRichFunction;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.functions.async.AsyncFunction;\n+import org.apache.flink.streaming.api.functions.async.ResultFuture;\n+import org.apache.flink.streaming.util.MockStreamingRuntimeContext;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.collector.TableFunctionCollector;\n+import org.apache.flink.table.runtime.collector.TableFunctionResultFuture;\n+import org.apache.flink.table.runtime.generated.GeneratedFunctionWrapper;\n+import org.apache.flink.table.runtime.generated.GeneratedResultFutureWrapper;\n+import org.apache.flink.table.runtime.operators.join.lookup.AsyncLookupJoinRunner;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.function.Supplier;\n+\n+import static org.apache.flink.table.data.StringData.fromString;\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.row;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link AsyncLookupJoinRunner}.\n+ */\n+public class AsyncLookupJoinRunnerTest {\n+\n+\t@Test\n+\tpublic void testCloseAsyncLookupJoinRunner() throws Exception {\n+\t\tfinal InternalTypeInfo<RowData> rightRowTypeInfo = InternalTypeInfo.ofFields(\n+\t\t\t\tDataTypes.INT().getLogicalType(),\n+\t\t\t\tDataTypes.STRING().getLogicalType());\n+\t\tfinal AsyncLookupJoinRunner joinRunner = new AsyncLookupJoinRunner(\n+\t\t\t\tnew GeneratedFunctionWrapper(new TestingFetcherFunction()),\n+\t\t\t\tnew GeneratedResultFutureWrapper<>(new TestingFetcherResultFuture()),\n+\t\t\t\trightRowTypeInfo,\n+\t\t\t\trightRowTypeInfo,\n+\t\t\t\ttrue,\n+\t\t\t\t100);\n+\t\tassertNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\n+\t\tjoinRunner.setRuntimeContext(new MockStreamingRuntimeContext(false, 1, 0));\n+\t\tjoinRunner.open(new Configuration());\n+\t\tassertNotNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\n+\t\tjoinRunner.open(new Configuration());\n+\t\tjoinRunner.asyncInvoke(row(1, \"a\"), new TestingFetcherResultFuture());\n+\t\tassertNotNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\t}\n+\n+\tprivate void closeAsyncLookupJoinRunner(AsyncLookupJoinRunner joinRunner) throws Exception {\n+\t\ttry {\n+\t\t\tjoinRunner.close();\n+\t\t} catch (NullPointerException e) {\n+\t\t\tfail(\"Expected close to fail with null pointer exception.\");", "originalCommit": "da25b44d59f5a02f8d780c17ee45f828fd2fd746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMzE5NQ==", "url": "https://github.com/apache/flink/pull/14207#discussion_r537303195", "body": "looks like `TestingFetcherFunction` and  `TestingFetcherResultFuture` are redundant,  we defined same inner class in three tests with same versionId, I think it's an existed issue. Could we only define once and reuse them? ", "bodyText": "looks like TestingFetcherFunction and  TestingFetcherResultFuture are redundant,  we defined same inner class in three tests with same versionId, I think it's an existed issue. Could we only define once and reuse them?", "bodyHTML": "<p dir=\"auto\">looks like <code>TestingFetcherFunction</code> and  <code>TestingFetcherResultFuture</code> are redundant,  we defined same inner class in three tests with same versionId, I think it's an existed issue. Could we only define once and reuse them?</p>", "author": "leonardBang", "createdAt": "2020-12-07T08:07:41Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinRunnerTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join;\n+\n+import org.apache.flink.api.common.functions.AbstractRichFunction;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.functions.async.AsyncFunction;\n+import org.apache.flink.streaming.api.functions.async.ResultFuture;\n+import org.apache.flink.streaming.util.MockStreamingRuntimeContext;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.collector.TableFunctionCollector;\n+import org.apache.flink.table.runtime.collector.TableFunctionResultFuture;\n+import org.apache.flink.table.runtime.generated.GeneratedFunctionWrapper;\n+import org.apache.flink.table.runtime.generated.GeneratedResultFutureWrapper;\n+import org.apache.flink.table.runtime.operators.join.lookup.AsyncLookupJoinRunner;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.function.Supplier;\n+\n+import static org.apache.flink.table.data.StringData.fromString;\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.row;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link AsyncLookupJoinRunner}.\n+ */\n+public class AsyncLookupJoinRunnerTest {\n+\n+\t@Test\n+\tpublic void testCloseAsyncLookupJoinRunner() throws Exception {\n+\t\tfinal InternalTypeInfo<RowData> rightRowTypeInfo = InternalTypeInfo.ofFields(\n+\t\t\t\tDataTypes.INT().getLogicalType(),\n+\t\t\t\tDataTypes.STRING().getLogicalType());\n+\t\tfinal AsyncLookupJoinRunner joinRunner = new AsyncLookupJoinRunner(\n+\t\t\t\tnew GeneratedFunctionWrapper(new TestingFetcherFunction()),\n+\t\t\t\tnew GeneratedResultFutureWrapper<>(new TestingFetcherResultFuture()),\n+\t\t\t\trightRowTypeInfo,\n+\t\t\t\trightRowTypeInfo,\n+\t\t\t\ttrue,\n+\t\t\t\t100);\n+\t\tassertNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\n+\t\tjoinRunner.setRuntimeContext(new MockStreamingRuntimeContext(false, 1, 0));\n+\t\tjoinRunner.open(new Configuration());\n+\t\tassertNotNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\n+\t\tjoinRunner.open(new Configuration());\n+\t\tjoinRunner.asyncInvoke(row(1, \"a\"), new TestingFetcherResultFuture());\n+\t\tassertNotNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\t}\n+\n+\tprivate void closeAsyncLookupJoinRunner(AsyncLookupJoinRunner joinRunner) throws Exception {\n+\t\ttry {\n+\t\t\tjoinRunner.close();\n+\t\t} catch (NullPointerException e) {\n+\t\t\tfail(\"Expected close to fail with null pointer exception.\");\n+\t\t}\n+\t}\n+\n+\t// ---------------------------------------------------------------------------------\n+\n+\t/**\n+\t * The {@link TestingFetcherFunction} only accepts a single integer lookup key and\n+\t * returns zero or one or more RowData.\n+\t */\n+\tpublic static final class TestingFetcherFunction\n+\t\t\textends AbstractRichFunction\n+\t\t\timplements AsyncFunction<RowData, RowData> {\n+\n+\t\tprivate static final long serialVersionUID = 4018474964018227081L;", "originalCommit": "da25b44d59f5a02f8d780c17ee45f828fd2fd746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNzgwNg==", "url": "https://github.com/apache/flink/pull/14207#discussion_r537327806", "bodyText": "looks like TestingFetcherFunction and TestingFetcherResultFuture are redundant, we defined same inner class in three tests with same versionId, I think it's an existed issue. Could we only define once and reuse them?\n\n@leonardBang I thought that it could be defined once and reused TestingFetcherFunction and TestingFetcherResultFuture. I would like to reuse them.", "author": "SteNicholas", "createdAt": "2020-12-07T08:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMzE5NQ=="}], "type": "inlineReview"}, {"oid": "b38edef1f03a5c1b1bfe6f0a50f575ecbcb1223e", "url": "https://github.com/apache/flink/commit/b38edef1f03a5c1b1bfe6f0a50f575ecbcb1223e", "message": "[FLINK-20250][table-runtime] NPE when invoking AsyncLookupJoinRunner#close method", "committedDate": "2020-12-07T09:07:43Z", "type": "commit"}, {"oid": "c6c34080b30a39e1b594bcb5ba04bf22b89561ef", "url": "https://github.com/apache/flink/commit/c6c34080b30a39e1b594bcb5ba04bf22b89561ef", "message": "[FLINK-20250][table-runtime] NPE when invoking AsyncLookupJoinRunner#close method", "committedDate": "2020-12-07T12:42:03Z", "type": "commit"}]}