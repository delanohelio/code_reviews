{"pr_number": 938, "pr_title": "Add default aggregateBy method to RichIterable that takes a target Ma\u2026", "pr_createdAt": "2020-07-02T23:52:01Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/938", "merge_commit": "0fd1e87b6df098e522647ca231411e31dc298b99", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNzEwNQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/938#discussion_r449327105", "body": "One request, can you add a method doc similar to the one above method? ", "bodyText": "One request, can you add a method doc similar to the one above method?", "bodyHTML": "<p dir=\"auto\">One request, can you add a method doc similar to the one above method?</p>", "author": "prathasirisha", "createdAt": "2020-07-03T00:57:05Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java", "diffHunk": "@@ -2422,13 +2422,28 @@ default void appendString(Appendable appendable, String separator)\n             Function0<? extends V> zeroValueFactory,\n             Function2<? super V, ? super T, ? extends V> nonMutatingAggregator)\n     {\n-        MutableMap<K, V> map = Maps.mutable.empty();\n+        return this.aggregateBy(\n+                groupBy,\n+                zeroValueFactory,\n+                nonMutatingAggregator,\n+                Maps.mutable.empty());\n+    }\n+\n+    /**\n+     * @since 10.3", "originalCommit": "7b4991247264b4dfe7bccd27f30ff1f8840f611a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMTgwNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/938#discussion_r449331804", "bodyText": "Done.", "author": "donraab", "createdAt": "2020-07-03T01:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNzEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9cb954880d4805e7d6cbd8c5c57dbd50a8bcf994", "changed_code": [{"header": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\nindex af2f5f83..b546a90d 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\n", "chunk": "@@ -2430,6 +2430,10 @@ public interface RichIterable<T>\n     }\n \n     /**\n+     * Applies an aggregate function over the iterable grouping results into the target map based on the specific\n+     * groupBy function. Aggregate results are allowed to be immutable as they will be replaced in place in the map. A\n+     * second function specifies the initial \"zero\" aggregate value to work with (i.e. Integer.valueOf(0)).\n+     *\n      * @since 10.3\n      */\n     default <K, V, R extends MutableMap<K, V>> R aggregateBy(\n", "next_change": {"commit": "cbb680f9336a381f2daa9f800d6d70f77493ba7f", "changed_code": [{"header": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\nindex b546a90d..a4cc0a05 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\n", "chunk": "@@ -2436,7 +2436,7 @@ public interface RichIterable<T>\n      *\n      * @since 10.3\n      */\n-    default <K, V, R extends MutableMap<K, V>> R aggregateBy(\n+    default <K, V, R extends MutableMapIterable<K, V>> R aggregateBy(\n             Function<? super T, ? extends K> groupBy,\n             Function0<? extends V> zeroValueFactory,\n             Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0fd1e87b6df098e522647ca231411e31dc298b99", "changed_code": [{"header": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\nindex af2f5f83..a4cc0a05 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java\n", "chunk": "@@ -2430,9 +2430,13 @@ public interface RichIterable<T>\n     }\n \n     /**\n+     * Applies an aggregate function over the iterable grouping results into the target map based on the specific\n+     * groupBy function. Aggregate results are allowed to be immutable as they will be replaced in place in the map. A\n+     * second function specifies the initial \"zero\" aggregate value to work with (i.e. Integer.valueOf(0)).\n+     *\n      * @since 10.3\n      */\n-    default <K, V, R extends MutableMap<K, V>> R aggregateBy(\n+    default <K, V, R extends MutableMapIterable<K, V>> R aggregateBy(\n             Function<? super T, ? extends K> groupBy,\n             Function0<? extends V> zeroValueFactory,\n             Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n", "next_change": null}]}, "commits_in_main": [{"oid": "0fd1e87b6df098e522647ca231411e31dc298b99", "message": "Merge commit", "committedDate": null}, {"oid": "759d4f56e6727b207fcb4740f328148c40767251", "committedDate": "2020-07-07 12:55:40 -0400", "message": "Added containsBy to RichIterable. Closes #919."}, {"oid": "85596b80cb4ebe53db059e4f7759bca26968ef6f", "committedDate": "2020-07-23 00:54:56 -0400", "message": "Simplify implementation of containsBy on RichIterable."}, {"oid": "b4d4a51b82ff1453240f174f6302d3a5c5702b6b", "committedDate": "2021-02-14 15:12:18 -0500", "message": "Add toImmutableList/Set/Bag to RichIterable interface."}, {"oid": "b1ed56f04b656261160ae30fe569bc4ff9bc72b9", "committedDate": "2021-02-25 21:07:38 -0500", "message": "Add toImmutableSortedList, toImmutableSortedSet, toImmutableSortedBag to RichIterable."}, {"oid": "cb5b62464a097644efe7b26d7129d58e2b17651f", "committedDate": "2021-03-09 22:23:22 -0500", "message": "Add toImmutableSortedBag/List/Set with Comparator and toImmutableSortedBagBy/ListBy/SetBy with Function to RichIterable."}, {"oid": "7572d68a184c3801e887a1ab08f06373b4bae8c2", "committedDate": "2021-05-11 17:18:21 -0400", "message": "Add toImmutableMap to RichIterable."}, {"oid": "9ea7f6c7dd1e0d631e525d27c46f180207d81547", "committedDate": "2021-05-11 21:19:47 -0400", "message": "Add toImmutableBiMap to RichIterable."}, {"oid": "6fddda899a1a0aeaa71477af086cee318895a763", "committedDate": "2022-01-15 09:56:23 +0000", "message": "Add fused method for collect + makeString"}, {"oid": "a9b04dde67a4874f589f90364a2d9ba89430a7e2", "committedDate": "2022-03-30 02:08:42 -0400", "message": "Remove dependencies on CollectPrimitiveProcedure types and reduce duplicate code."}, {"oid": "aa4fc806a2dc49a076c58892948c19a5ed37e9eb", "committedDate": "2022-04-06 12:26:01 -0400", "message": "Remove unnecessary implementations of toSortedList/Set/Bag/MapBy."}, {"oid": "8b38b3922c14cca9acc47ec476cd98fb4120f635", "committedDate": "2022-04-12 22:00:37 -0400", "message": "Disambiguate and deprecate primitive injectInto methods on RichIterable."}, {"oid": "bcd23bc507226bbee8545f293a468747a2cfac50", "committedDate": "2022-04-24 17:29:27 +0530", "message": "Implement containsAny, containsNone, containsAnyIterable, containsNoneIterable on RichIterable. Resolves #1006"}, {"oid": "0cef691e96a323ceacbe829424154c0706a0f369", "committedDate": "2022-04-26 11:16:59 -0400", "message": "Update containsAny/containsNone implementations for synchronized and unmodifiable."}, {"oid": "dfc38dca68b005ca15f246e63b3bc1cebaff5c27", "committedDate": "2022-04-30 02:03:54 -0400", "message": "Optimize containsAny and containsNone on RichIterable."}, {"oid": "257df268c9226314070f2047aedb6f24b2f0cc22", "committedDate": "2022-05-16 18:43:39 -0400", "message": "Fix grammar issues detected in JavaDoc."}, {"oid": "d988aa20b39d81cafb5ec57151ed7de990db6eb2", "committedDate": "2023-01-04 02:14:40 -0500", "message": "Remove anonymous inner class examples from RichIterable and Iterate JavaDoc."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNzM5MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/938#discussion_r449327391", "body": "same comment as above with doc. ", "bodyText": "same comment as above with doc.", "bodyHTML": "<p dir=\"auto\">same comment as above with doc.</p>", "author": "prathasirisha", "createdAt": "2020-07-03T00:58:41Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java", "diffHunk": "@@ -310,4 +313,25 @@ default DoubleSummaryStatistics summarizeDouble(DoubleFunction<? super T> functi\n         this.forEachWithOccurrences((each, occurrences) -> target.add(function.valueOf(each, occurrences)));\n         return target;\n     }\n+\n+    /**\n+     * @since 10.3\n+     */", "originalCommit": "7b4991247264b4dfe7bccd27f30ff1f8840f611a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMTgxOA==", "url": "https://github.com/eclipse/eclipse-collections/pull/938#discussion_r449331818", "bodyText": "Done.", "author": "donraab", "createdAt": "2020-07-03T01:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNzM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9cb954880d4805e7d6cbd8c5c57dbd50a8bcf994", "changed_code": [{"header": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\nindex ae35ffc0..5e2c9344 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\n", "chunk": "@@ -315,6 +315,12 @@ public interface Bag<T>\n     }\n \n     /**\n+     * Applies an aggregate function over the iterable grouping results into the target map based on the specific\n+     * groupBy function. Aggregate results are allowed to be immutable as they will be replaced in place in the map. A\n+     * second function specifies the initial \"zero\" aggregate value to work with (i.e. Integer.valueOf(0)).\n+     *\n+     * This method is overridden and optimized for Bag to use forEachWithOccurrences instead of forEach.\n+     *\n      * @since 10.3\n      */\n     @Override\n", "next_change": {"commit": "cbb680f9336a381f2daa9f800d6d70f77493ba7f", "changed_code": [{"header": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\nindex 5e2c9344..8adf408a 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\n", "chunk": "@@ -324,7 +324,7 @@ public interface Bag<T>\n      * @since 10.3\n      */\n     @Override\n-    default <K, V, R extends MutableMap<K, V>> R aggregateBy(\n+    default <K, V, R extends MutableMapIterable<K, V>> R aggregateBy(\n             Function<? super T, ? extends K> groupBy,\n             Function0<? extends V> zeroValueFactory,\n             Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n", "next_change": null}]}}]}}, {"oid": "9cb954880d4805e7d6cbd8c5c57dbd50a8bcf994", "url": "https://github.com/eclipse/eclipse-collections/commit/9cb954880d4805e7d6cbd8c5c57dbd50a8bcf994", "message": "Add default aggregateBy method to RichIterable that takes a target Map and remove some duplicate implementation code.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2020-07-03T01:19:38Z", "type": "forcePushed"}, {"oid": "cbb680f9336a381f2daa9f800d6d70f77493ba7f", "url": "https://github.com/eclipse/eclipse-collections/commit/cbb680f9336a381f2daa9f800d6d70f77493ba7f", "message": "Add default aggregateBy method to RichIterable that takes a target Map and remove some duplicate implementation code.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2020-07-03T03:07:26Z", "type": "commit"}, {"oid": "cbb680f9336a381f2daa9f800d6d70f77493ba7f", "url": "https://github.com/eclipse/eclipse-collections/commit/cbb680f9336a381f2daa9f800d6d70f77493ba7f", "message": "Add default aggregateBy method to RichIterable that takes a target Map and remove some duplicate implementation code.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2020-07-03T03:07:26Z", "type": "forcePushed"}]}