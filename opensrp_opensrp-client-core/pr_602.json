{"pr_number": 602, "pr_title": "User Service Tests", "pr_createdAt": "2020-07-21T08:27:20Z", "pr_url": "https://github.com/opensrp/opensrp-client-core/pull/602", "merge_commit": "b35bd7d32d32cc2273a266fe73c194c5b014140e", "timeline": [{"oid": "debca20eec1c18e15bf232f0d33479d87245f895", "url": "https://github.com/opensrp/opensrp-client-core/commit/debca20eec1c18e15bf232f0d33479d87245f895", "message": "Verify forceremote login invocation", "committedDate": "2020-07-14T09:11:46Z", "type": "commit"}, {"oid": "b6b4dd3584861de1b86cd508d5e295986936dce1", "url": "https://github.com/opensrp/opensrp-client-core/commit/b6b4dd3584861de1b86cd508d5e295986936dce1", "message": "Stashed tests", "committedDate": "2020-07-14T10:44:08Z", "type": "commit"}, {"oid": "1dd2456b93ff5377d956296a23d5c4892a138e11", "url": "https://github.com/opensrp/opensrp-client-core/commit/1dd2456b93ff5377d956296a23d5c4892a138e11", "message": "Merge branch 'master' into sg-user-service-test", "committedDate": "2020-07-21T07:09:24Z", "type": "commit"}, {"oid": "969f48e59d4f9d18445ea97581de923fc8151568", "url": "https://github.com/opensrp/opensrp-client-core/commit/969f48e59d4f9d18445ea97581de923fc8151568", "message": "Unit test isUserInValidGroup", "committedDate": "2020-07-21T08:17:54Z", "type": "commit"}, {"oid": "8834994d57c809ff6efa95e4606ceacb98536768", "url": "https://github.com/opensrp/opensrp-client-core/commit/8834994d57c809ff6efa95e4606ceacb98536768", "message": "Unit test GetGroupId", "committedDate": "2020-07-21T08:36:16Z", "type": "commit"}, {"oid": "cccc5e4ff6e3ac4e401ac955f104ffdd3aca1541", "url": "https://github.com/opensrp/opensrp-client-core/commit/cccc5e4ff6e3ac4e401ac955f104ffdd3aca1541", "message": "Unit test isUserInPioneerGroup", "committedDate": "2020-07-21T08:56:08Z", "type": "commit"}, {"oid": "79f04ada4560a61621b6d6682b7f2af11a8b95c4", "url": "https://github.com/opensrp/opensrp-client-core/commit/79f04ada4560a61621b6d6682b7f2af11a8b95c4", "message": "Remove underscore in test method names", "committedDate": "2020-07-27T06:46:34Z", "type": "commit"}, {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18", "url": "https://github.com/opensrp/opensrp-client-core/commit/c35d23eedccc082f52aa7111c1d033e131da7f18", "message": "Merge branch 'master' into sg-user-service-test", "committedDate": "2020-07-27T06:46:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4NjQyNQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#discussion_r460686425", "body": "You could use ` verifyZeroInteractions` instead.", "bodyText": "You could use  verifyZeroInteractions instead.", "bodyHTML": "<p dir=\"auto\">You could use <code> verifyZeroInteractions</code> instead.</p>", "author": "vincent-karuri", "createdAt": "2020-07-27T07:06:30Z", "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "diffHunk": "@@ -300,21 +318,118 @@ public void testValidateDeviceTimeSameTimeTimeAndTimeZone() {\n     public void testValidateStoredServerTimeZoneForNullServerTimeZoneReturnsError() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(null);\n         assertEquals(TimeStatus.ERROR, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n     @Test\n     public void testValidateStoredServerTimeZoneForDifferentTimeZoneServerTimeZoneReturnsMismatch() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         assertEquals(TimeStatus.TIMEZONE_MISMATCH, userService.validateStoredServerTimeZone());\n+\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n \n     @Test\n-    public void testValidateStoredServerTimeZoneSameTimeTimeAndTimeZone() {\n+    public void testValidateStoredServerTimeZoneForSameTimeTimeAndTimeZone() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Africa/Nairobi\"));\n         assertEquals(TimeStatus.OK, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences, never()).saveForceRemoteLogin(true);\n     }\n \n+\n+    @Test\n+    public void testIsUserInValidGroupForNullUserAndPassword() {\n+        assertFalse(userService.isUserInValidGroup(null, null));\n+    }\n+\n+    @Test\n+    public void testIsUserInValidGroupForValidUserAndPassword() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        userService = spy(userService);\n+        doReturn(password).when(userService).decryptString(privateKeyEntry, password);\n+        when(repository.canUseThisPassword(password)).thenReturn(true);\n+        assertTrue(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences).fetchEncryptedGroupId(user);\n+        verify(repository).canUseThisPassword(password);\n+    }\n+\n+\n+    @Test\n+    public void testIsUserInValidGroupShouldReturnFalseOnError() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        assertFalse(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        verify(repository, never()).canUseThisPassword(password);", "originalCommit": "c35d23eedccc082f52aa7111c1d033e131da7f18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c5256c1c4c1076e8983e5696c8ed55e8612caf3", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\nindex 3945d073..63387dd8 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n", "chunk": "@@ -382,11 +381,11 @@ public class UserServiceTest extends BaseUnitTest {\n         assertFalse(userService.isUserInValidGroup(user, password));\n         verify(allSharedPreferences).fetchEncryptedPassword(user);\n         verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n-        verify(repository, never()).canUseThisPassword(password);\n+        verifyZeroInteractions(repository);\n     }\n \n     @Test\n-    public void testGetGroupIdShShouldReturnNullOnError() throws Exception {\n+    public void testGetGroupIdShouldReturnNullOnError() throws Exception {\n         Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n         Whitebox.setInternalState(keyStore, \"initialized\", true);\n         Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b35bd7d32d32cc2273a266fe73c194c5b014140e", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\nindex 3945d073..63387dd8 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n", "chunk": "@@ -382,11 +381,11 @@ public class UserServiceTest extends BaseUnitTest {\n         assertFalse(userService.isUserInValidGroup(user, password));\n         verify(allSharedPreferences).fetchEncryptedPassword(user);\n         verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n-        verify(repository, never()).canUseThisPassword(password);\n+        verifyZeroInteractions(repository);\n     }\n \n     @Test\n-    public void testGetGroupIdShShouldReturnNullOnError() throws Exception {\n+    public void testGetGroupIdShouldReturnNullOnError() throws Exception {\n         Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n         Whitebox.setInternalState(keyStore, \"initialized\", true);\n         Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n", "next_change": {"commit": "326e5e3d460842c675ce0a76b0dfbc50ecc21526", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\nindex 63387dd8..2e105d44 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n", "chunk": "@@ -376,38 +385,11 @@ public class UserServiceTest extends BaseUnitTest {\n         KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n         when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n         String password = UUID.randomUUID().toString();\n-        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n-        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n-        assertFalse(userService.isUserInValidGroup(user, password));\n-        verify(allSharedPreferences).fetchEncryptedPassword(user);\n-        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        assertFalse(userService.isUserInValidGroup(user, password.toCharArray()));\n+        // verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n         verifyZeroInteractions(repository);\n     }\n \n-    @Test\n-    public void testGetGroupIdShouldReturnNullOnError() throws Exception {\n-        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n-        Whitebox.setInternalState(keyStore, \"initialized\", true);\n-        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n-        assertNull(userService.getGroupId(\"johndoe\"));\n-    }\n-\n-    @Test\n-    public void testGetGroupIdShouldReturnGroupId() throws Exception {\n-        userService = spy(userService);\n-        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n-        Whitebox.setInternalState(keyStore, \"initialized\", true);\n-        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n-        String password = UUID.randomUUID().toString();\n-        String user = \"johndoe\";\n-        when(keyStore.containsAlias(user)).thenReturn(true);\n-        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n-        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n-        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n-        doReturn(\"pass123\").when(userService).decryptString(privateKeyEntry, password);\n-        assertEquals(\"pass123\", userService.getGroupId(user));\n-    }\n-\n     @Test\n     public void testIsUserInPioneerGroupShouldReturnTrueForPioneerUser() throws Exception {\n         userService = spy(userService);\n", "next_change": {"commit": "065a4731d04bea1aedd5896c0df04e421ccaf897", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\nindex 2e105d44..2ea30358 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n", "chunk": "@@ -396,7 +367,6 @@ public class UserServiceTest extends BaseUnitTest {\n         Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n         Whitebox.setInternalState(keyStore, \"initialized\", true);\n         Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n-        String password = UUID.randomUUID().toString();\n         String user = \"johndoe\";\n         when(keyStore.containsAlias(user)).thenReturn(true);\n         KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b35bd7d32d32cc2273a266fe73c194c5b014140e", "message": "Merge commit", "committedDate": null}, {"oid": "e8382b2ab111640dddb25b969fc2e50ce9e08e2c", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Refactor HTTPAgent Fix failing unit tests"}, {"oid": "47ffabfeeeb9df0d17b2d3c5650f3cba776eaafe", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Update OAuth implementation - Refactor refresh token and verify login logic - Add support for Spring OAuth Fallback if keycloak not supported"}, {"oid": "c9c4a0df78c261f17a269aa253bb48cb43e18d95", "committedDate": "2020-08-05 10:08:46 +0300", "message": "Refactor client core : Remove password type String - Remove type String for password processing to mitigates against the heap dump attack vector exposed by Java String type - Fix unit tests"}, {"oid": "ef043839aa298e481a3430cd6b31ece8ff81edab", "committedDate": "2020-08-05 10:15:49 +0300", "message": "Fix local authentication bug - Fix issue local login not working for team and location auth config types - Refactor to use bytes for all password refs"}, {"oid": "326e5e3d460842c675ce0a76b0dfbc50ecc21526", "committedDate": "2020-08-05 11:09:44 +0300", "message": "Refactor authentication logic - Separate local device authentication from database encryption/authentication - Refactor all password refs to byte array - Fix tests"}, {"oid": "624da51115736d0596f212341e7477ed1ffa85e3", "committedDate": "2020-08-05 11:11:58 +0300", "message": ":bug: Fix verify authorization bug - Legacy Verify authorization shows disable user message prematurely - Refactor getEncryptedValue method name - Clean up unused method/tests"}, {"oid": "065a4731d04bea1aedd5896c0df04e421ccaf897", "committedDate": "2020-08-05 14:42:38 +0300", "message": "Fix failing build :white_check_mark: - Fix tests"}, {"oid": "695e2ee0d1f930c895b64b55f30ac40341141440", "committedDate": "2020-08-25 19:16:27 +0300", "message": "Fix failing unit tests :white_check_mark: Code clean up"}, {"oid": "064a5f52c9bf9614a330c163ebecaeda75412128", "committedDate": "2020-08-26 18:52:29 +0300", "message": "Fix bug :bug: - Error After Cancelling Log in by user from a Different Team"}, {"oid": "65220c8b614c622a073ec45285c9b42928ea183d", "committedDate": "2022-03-29 14:13:00 +0300", "message": "Rename client core module"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4OTg5NQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#discussion_r460689895", "body": "Typo?", "bodyText": "Typo?", "bodyHTML": "<p dir=\"auto\">Typo?</p>", "author": "vincent-karuri", "createdAt": "2020-07-27T07:14:48Z", "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "diffHunk": "@@ -300,21 +318,118 @@ public void testValidateDeviceTimeSameTimeTimeAndTimeZone() {\n     public void testValidateStoredServerTimeZoneForNullServerTimeZoneReturnsError() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(null);\n         assertEquals(TimeStatus.ERROR, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n     @Test\n     public void testValidateStoredServerTimeZoneForDifferentTimeZoneServerTimeZoneReturnsMismatch() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         assertEquals(TimeStatus.TIMEZONE_MISMATCH, userService.validateStoredServerTimeZone());\n+\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n \n     @Test\n-    public void testValidateStoredServerTimeZoneSameTimeTimeAndTimeZone() {\n+    public void testValidateStoredServerTimeZoneForSameTimeTimeAndTimeZone() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Africa/Nairobi\"));\n         assertEquals(TimeStatus.OK, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences, never()).saveForceRemoteLogin(true);\n     }\n \n+\n+    @Test\n+    public void testIsUserInValidGroupForNullUserAndPassword() {\n+        assertFalse(userService.isUserInValidGroup(null, null));\n+    }\n+\n+    @Test\n+    public void testIsUserInValidGroupForValidUserAndPassword() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        userService = spy(userService);\n+        doReturn(password).when(userService).decryptString(privateKeyEntry, password);\n+        when(repository.canUseThisPassword(password)).thenReturn(true);\n+        assertTrue(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences).fetchEncryptedGroupId(user);\n+        verify(repository).canUseThisPassword(password);\n+    }\n+\n+\n+    @Test\n+    public void testIsUserInValidGroupShouldReturnFalseOnError() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        assertFalse(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        verify(repository, never()).canUseThisPassword(password);\n+    }\n+\n+    @Test\n+    public void testGetGroupIdShShouldReturnNullOnError() throws Exception {", "originalCommit": "c35d23eedccc082f52aa7111c1d033e131da7f18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c5256c1c4c1076e8983e5696c8ed55e8612caf3", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\nindex 3945d073..63387dd8 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java\n", "chunk": "@@ -382,11 +381,11 @@ public class UserServiceTest extends BaseUnitTest {\n         assertFalse(userService.isUserInValidGroup(user, password));\n         verify(allSharedPreferences).fetchEncryptedPassword(user);\n         verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n-        verify(repository, never()).canUseThisPassword(password);\n+        verifyZeroInteractions(repository);\n     }\n \n     @Test\n-    public void testGetGroupIdShShouldReturnNullOnError() throws Exception {\n+    public void testGetGroupIdShouldReturnNullOnError() throws Exception {\n         Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n         Whitebox.setInternalState(keyStore, \"initialized\", true);\n         Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n", "next_change": null}]}}, {"oid": "4c5256c1c4c1076e8983e5696c8ed55e8612caf3", "url": "https://github.com/opensrp/opensrp-client-core/commit/4c5256c1c4c1076e8983e5696c8ed55e8612caf3", "message": "code cleanup", "committedDate": "2020-07-27T07:33:27Z", "type": "commit"}]}