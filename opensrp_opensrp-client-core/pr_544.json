{"pr_number": 544, "pr_title": "Ndegwa tt 06", "pr_author": "ndegwamartin", "pr_createdAt": "2020-06-02T11:13:25Z", "pr_url": "https://github.com/opensrp/opensrp-client-core/pull/544", "merge_commit": "b59b3d82bc4e845822a9d33c55ddd8b1f40f3a17", "timeline": [{"oid": "41102e436de02e4065068f15ee30a9144825163e", "url": "https://github.com/opensrp/opensrp-client-core/commit/41102e436de02e4065068f15ee30a9144825163e", "message": "HTTPAgent Unit tests\n- Add more unit test cases", "committedDate": "2020-06-02T11:11:28Z", "type": "commit"}, {"oid": "bdb4315fd910de403f43911fe5d57cba826a5882", "url": "https://github.com/opensrp/opensrp-client-core/commit/bdb4315fd910de403f43911fe5d57cba826a5882", "message": "CI Configuration updates\n- Add codacy configuration file\n- Rename test case", "committedDate": "2020-06-02T16:18:58Z", "type": "commit"}, {"oid": "bdb4315fd910de403f43911fe5d57cba826a5882", "url": "https://github.com/opensrp/opensrp-client-core/commit/bdb4315fd910de403f43911fe5d57cba826a5882", "message": "CI Configuration updates\n- Add codacy configuration file\n- Rename test case", "committedDate": "2020-06-02T16:18:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NzIwNA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434397204", "body": "I think this should get `getErrorStream`\r\n\r\nI also think that the loginresponse for an internal error is a custom message & not the message checked in this test. Kindly fix and confirm if the assumptions here are correct", "bodyText": "I think this should get getErrorStream\nI also think that the loginresponse for an internal error is a custom message & not the message checked in this test. Kindly fix and confirm if the assumptions here are correct", "bodyHTML": "<p dir=\"auto\">I think this should get <code>getErrorStream</code></p>\n<p dir=\"auto\">I also think that the loginresponse for an internal error is a custom message &amp; not the message checked in this test. Kindly fix and confirm if the assumptions here are correct</p>", "author": "ekigamba", "createdAt": "2020-06-03T08:29:00Z", "path": "opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java", "diffHunk": "@@ -560,4 +566,342 @@ public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithC\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();", "originalCommit": "bdb4315fd910de403f43911fe5d57cba826a5882", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNTc3MQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434405771", "bodyText": "This might be a duplicate with test on line 880", "author": "ekigamba", "createdAt": "2020-06-03T08:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NzIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNzQ5NA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434427494", "bodyText": "Fixed the first one\n880 tests a different method with has a similar response flow", "author": "ndegwamartin", "createdAt": "2020-06-03T09:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NzIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "2d5385feaba9763803f9da56aebc84e440285e9d", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c433d204..8f0ae1e2 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -655,7 +655,7 @@ public class HTTPAgentTest {\n \n         Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n \n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n         Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n \n         PowerMockito.mockStatic(IOUtils.class);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b59b3d82bc4e845822a9d33c55ddd8b1f40f3a17", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c433d204..8f0ae1e2 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -655,7 +655,7 @@ public class HTTPAgentTest {\n \n         Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n \n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n         Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n \n         PowerMockito.mockStatic(IOUtils.class);\n", "next_change": {"commit": "e8382b2ab111640dddb25b969fc2e50ce9e08e2c", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex 8f0ae1e2..8a902205 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -246,662 +194,4 @@ public class HTTPAgentTest {\n         Response<String> resp = httpAgent.postWithJsonResponse(\"http://www.mocky.io/v2/5e54d9333100006300eb33a8\", jObject.toString());\n         Assert.assertEquals(ResponseStatus.success, resp.status());\n     }\n-\n-\n-    @Test\n-    public void testOauth2authenticateCreatesUrlConnectionWithCorrectParameters() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(TOKEN_REQUEST_SERVER_RESPONSE);\n-\n-\n-        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-\n-        Assert.assertNotNull(accountResponse);\n-        Assert.assertEquals(200, accountResponse.getStatus());\n-        Assert.assertEquals(\"1r9A8zi5E3r@Zz\", accountResponse.getAccessToken());\n-        Assert.assertEquals(\"bearer\", accountResponse.getTokenType());\n-        Assert.assertEquals(\"text_token\", accountResponse.getRefreshToken());\n-        Assert.assertEquals(Integer.valueOf(\"3600\"), accountResponse.getExpiresIn());\n-        Assert.assertEquals(Integer.valueOf(\"36000\"), accountResponse.getRefreshExpiresIn());\n-        Assert.assertEquals(\"read write trust\", accountResponse.getScope());\n-\n-\n-        Mockito.verify(httpURLConnection).setConnectTimeout(60000);\n-        Mockito.verify(httpURLConnection).setReadTimeout(60000);\n-\n-        String requestParams = \"&grant_type=\" + AccountHelper.OAUTH.GRANT_TYPE.PASSWORD + \"&username=\" + TEST_USERNAME + \"&password=\" + TEST_PASSWORD + \"&client_id=\" + TEST_CLIENT_ID + \"&client_secret=\" + TEST_CLIENT_SECRET;\n-\n-        Mockito.verify(httpURLConnection).setFixedLengthStreamingMode(requestParams.getBytes().length);\n-        Mockito.verify(httpURLConnection).setDoOutput(true);\n-        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n-        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(\"charset\", \"utf-8\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(ArgumentMatchers.eq(\"Content-Length\"), ArgumentMatchers.anyString());\n-        Mockito.verify(httpURLConnection).setUseCaches(false);\n-        final String base64Auth = BaseEncoding.base64().encode(new String(TEST_CLIENT_ID + \":\" + TEST_CLIENT_SECRET).getBytes());\n-        Mockito.verify(httpURLConnection).setRequestProperty(AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BASIC + \" \" + base64Auth);\n-        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectResponseForBadRequest() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_BAD_REQUEST).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_BAD_REQUEST_SERVER_RESPONSE);\n-\n-        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-\n-        Assert.assertNotNull(accountResponse);\n-        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getStatus());\n-        Assert.assertNotNull(accountResponse.getAccountError());\n-        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getAccountError().getStatusCode());\n-        Assert.assertEquals(\"Code not valid\", accountResponse.getAccountError().getErrorDescription());\n-        Assert.assertEquals(\"invalid_grant\", accountResponse.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForMalformedURL() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForSocketTimeout() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new SocketTimeoutException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.TIMEOUT.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForIOException() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsNonNullAccountErrorResponseForRandomException() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_INTERNAL_SERVER_RESPONSE);\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, response.getAccountError().getStatusCode());\n-        Assert.assertNotNull(response.getAccountError().getError());\n-        Assert.assertEquals(\"Oops, something went wrong\", response.getAccountError().getErrorDescription());\n-        Assert.assertEquals(\"internal server error\", response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testFetchOAuthConfigurationProcessesConfigurationResponseCorrectly() throws Exception {\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n-\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(OAUTH_CONFIGURATION_SERVER_RESPONSE);\n-\n-        AccountConfiguration accountConfiguration = httpAgentSpy.fetchOAuthConfiguration();\n-        Assert.assertNotNull(accountConfiguration);\n-        Assert.assertEquals(\"https://my-server.com/oauth/auth\", accountConfiguration.getAuthorizationEndpoint());\n-        Assert.assertEquals(\"https://my-server.com/oauth/issuer\", accountConfiguration.getIssuerEndpoint());\n-        Assert.assertEquals(TEST_TOKEN_ENDPOINT, accountConfiguration.getTokenEndpoint());\n-\n-        List<String> grantTypes = accountConfiguration.getGrantTypesSupported();\n-        Assert.assertNotNull(grantTypes);\n-        Assert.assertEquals(\"authorization code\", grantTypes.get(0));\n-        Assert.assertEquals(\"implicit\", grantTypes.get(1));\n-        Assert.assertEquals(\"password\", grantTypes.get(2));\n-    }\n-\n-    @Test\n-    public void testFetchInvalidatesCacheIfUnauthorizedAndReturnsCorrectResponse() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Response<String> response = httpAgentSpy.fetch(SECURE_RESOURCE_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertEquals(ResponseStatus.valueOf(\"success\"), response.status());\n-        Assert.assertEquals(FETCH_DATA_REQUEST_SERVER_RESPONSE, response.payload());\n-\n-        PowerMockito.verifyStatic(AccountHelper.class);\n-        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testPostInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).generatePostRequest(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n-\n-        httpAgentSpy.post(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n-\n-        Mockito.verify(httpAgentSpy).invalidateExpiredCachedAccessToken();\n-\n-    }\n-\n-    @Test\n-    public void testFetchWithCredentialsInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Response<String> response = httpAgentSpy.fetchWithCredentials(SECURE_RESOURCE_ENDPOINT, SAMPLE_TEST_TOKEN);\n-        Assert.assertNotNull(response);\n-\n-        PowerMockito.verifyStatic(AccountHelper.class);\n-        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithCorrectParams() throws Exception {\n-\n-        Mockito.doReturn(sharedPreferences).when(allSharedPreferences).getPreferences();\n-        Mockito.doReturn(TEST_TOKEN_ENDPOINT).when(sharedPreferences).getString(AccountHelper.CONFIGURATION_CONSTANTS.TOKEN_ENDPOINT_URL, \"\");\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        AccountResponse accountResponse = Mockito.mock(AccountResponse.class);\n-\n-        Mockito.doReturn(accountResponse).when(httpAgentSpy).oauth2authenticateCore(ArgumentMatchers.any(StringBuilder.class), ArgumentMatchers.anyString(), ArgumentMatchers.anyString());\n-\n-        ArgumentCaptor<StringBuilder> requestParamStringBuilder = ArgumentCaptor.forClass(StringBuilder.class);\n-        ArgumentCaptor<String> grantType = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> tokenEndPoint = ArgumentCaptor.forClass(String.class);\n-\n-        httpAgentSpy.oauth2authenticateRefreshToken(SAMPLE_REFRESH_TOKEN);\n-\n-        Mockito.verify(httpAgentSpy).oauth2authenticateCore(requestParamStringBuilder.capture(), grantType.capture(), tokenEndPoint.capture());\n-\n-        String capturedRefreshTokenRequestValue = requestParamStringBuilder.getValue().toString();\n-        String capturedGrantTypeValue = grantType.getValue();\n-        String capturedTokenEndpointValue = tokenEndPoint.getValue();\n-\n-        Assert.assertEquals(\"&refresh_token=\" + SAMPLE_REFRESH_TOKEN, capturedRefreshTokenRequestValue);\n-\n-        Assert.assertEquals(AccountHelper.OAUTH.GRANT_TYPE.REFRESH_TOKEN, capturedGrantTypeValue);\n-        Assert.assertEquals(TEST_TOKEN_ENDPOINT, capturedTokenEndpointValue);\n-\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n-        Assert.assertNotNull(loginResponse.payload());\n-\n-        Assert.assertNotNull(loginResponse.payload().user);\n-        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n-        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n-\n-        Assert.assertNotNull(loginResponse.payload().time);\n-        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n-        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n-\n-        Assert.assertNotNull(loginResponse.payload().locations);\n-        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n-\n-        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n-        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n-        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n-\n-        Assert.assertNotNull(loginResponse.payload().team);\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n-\n-        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n-\n-        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n-\n-        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n-        String capturedKey = headerKey.getValue();\n-        String capturedValue = headerValue.getValue();\n-\n-        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n-        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Oops, something went wrong\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithoutNetworkConnectivity() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"No internet connection. Please ensure data connectivity\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"NO_INTERNET_CONNECTIVITY\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testVerifyAuthorizationReturnsTrueForAuthorizedResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        boolean isVerified = httpAgentSpy.verifyAuthorization();\n-        Assert.assertTrue(isVerified);\n-\n-    }\n-\n-    @Test\n-    public void testVerifyAuthorizationReturnsFalseForUnauthorizedResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(\"https://my-server.com/user-details?anm-id=\" + TEST_USERNAME);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        boolean isVerified = httpAgentSpy.verifyAuthorization();\n-        Assert.assertFalse(isVerified);\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsUnauthorizedResponse() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.message());\n-        Assert.assertNull(response.payload());\n-        Assert.assertEquals(\"Please check the credentials\", response.message());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsErrorResponseForMalformedURL() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForSocketTimeout() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new SocketTimeoutException()).when(httpURLConnection).getResponseCode();\n-\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.TIMEOUT.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForIOException() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n-\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectResponseForRandomServerError() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n-\n-        LoginResponse loginResponse = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Oops, something went wrong\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n-\n-    }\n }\n", "next_change": {"commit": "ba23de2dd455fa9716bb1fa6445558f94f09c0f6", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex 8a902205..9782a9e7 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -194,4 +240,324 @@ public class HTTPAgentTest {\n         Response<String> resp = httpAgent.postWithJsonResponse(\"http://www.mocky.io/v2/5e54d9333100006300eb33a8\", jObject.toString());\n         Assert.assertEquals(ResponseStatus.success, resp.status());\n     }\n+\n+\n+    @Test\n+    public void testOauth2authenticateCreatesUrlConnectionWithCorrectParameters() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(TOKEN_REQUEST_SERVER_RESPONSE);\n+\n+\n+        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+\n+        Assert.assertNotNull(accountResponse);\n+        Assert.assertEquals(200, accountResponse.getStatus());\n+        Assert.assertEquals(\"1r9A8zi5E3r@Zz\", accountResponse.getAccessToken());\n+        Assert.assertEquals(\"bearer\", accountResponse.getTokenType());\n+        Assert.assertEquals(\"text_token\", accountResponse.getRefreshToken());\n+        Assert.assertEquals(Integer.valueOf(\"3600\"), accountResponse.getExpiresIn());\n+        Assert.assertEquals(Integer.valueOf(\"36000\"), accountResponse.getRefreshExpiresIn());\n+        Assert.assertEquals(\"read write trust\", accountResponse.getScope());\n+\n+\n+        Mockito.verify(httpURLConnection).setConnectTimeout(60000);\n+        Mockito.verify(httpURLConnection).setReadTimeout(60000);\n+\n+        String requestParams = \"&grant_type=\" + AccountHelper.OAUTH.GRANT_TYPE.PASSWORD + \"&username=\" + TEST_USERNAME + \"&password=\" + TEST_PASSWORD + \"&client_id=\" + TEST_CLIENT_ID + \"&client_secret=\" + TEST_CLIENT_SECRET;\n+\n+        Mockito.verify(httpURLConnection).setFixedLengthStreamingMode(requestParams.getBytes().length);\n+        Mockito.verify(httpURLConnection).setDoOutput(true);\n+        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n+        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(\"charset\", \"utf-8\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(ArgumentMatchers.eq(\"Content-Length\"), ArgumentMatchers.anyString());\n+        Mockito.verify(httpURLConnection).setUseCaches(false);\n+        final String base64Auth = BaseEncoding.base64().encode(new String(TEST_CLIENT_ID + \":\" + TEST_CLIENT_SECRET).getBytes());\n+        Mockito.verify(httpURLConnection).setRequestProperty(AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BASIC + \" \" + base64Auth);\n+        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectResponseForBadRequest() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_BAD_REQUEST).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_BAD_REQUEST_SERVER_RESPONSE);\n+\n+        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+\n+        Assert.assertNotNull(accountResponse);\n+        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getStatus());\n+        Assert.assertNotNull(accountResponse.getAccountError());\n+        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getAccountError().getStatusCode());\n+        Assert.assertEquals(\"Code not valid\", accountResponse.getAccountError().getErrorDescription());\n+        Assert.assertEquals(\"invalid_grant\", accountResponse.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForMalformedURL() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForSocketTimeout() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.TIMEOUT.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForIOException() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsNonNullAccountErrorResponseForRandomException() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_INTERNAL_SERVER_RESPONSE);\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, response.getAccountError().getStatusCode());\n+        Assert.assertNotNull(response.getAccountError().getError());\n+        Assert.assertEquals(\"Oops, something went wrong\", response.getAccountError().getErrorDescription());\n+        Assert.assertEquals(\"internal server error\", response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testFetchOAuthConfigurationProcessesConfigurationResponseCorrectly() throws Exception {\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(\"https://my-server.com/\").when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n+\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(OAUTH_CONFIGURATION_SERVER_RESPONSE);\n+\n+        AccountConfiguration accountConfiguration = httpAgentSpy.fetchOAuthConfiguration();\n+        Assert.assertNotNull(accountConfiguration);\n+        Assert.assertEquals(\"https://my-server.com/oauth/auth\", accountConfiguration.getAuthorizationEndpoint());\n+        Assert.assertEquals(\"https://my-server.com/oauth/issuer\", accountConfiguration.getIssuerEndpoint());\n+        Assert.assertEquals(TEST_TOKEN_ENDPOINT, accountConfiguration.getTokenEndpoint());\n+\n+        List<String> grantTypes = accountConfiguration.getGrantTypesSupported();\n+        Assert.assertNotNull(grantTypes);\n+        Assert.assertEquals(\"authorization code\", grantTypes.get(0));\n+        Assert.assertEquals(\"implicit\", grantTypes.get(1));\n+        Assert.assertEquals(\"password\", grantTypes.get(2));\n+    }\n+\n+    @Test\n+    public void testFetchInvalidatesCacheIfUnauthorizedAndReturnsCorrectResponse() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Response<String> response = httpAgentSpy.fetch(SECURE_RESOURCE_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertEquals(ResponseStatus.valueOf(\"success\"), response.status());\n+        Assert.assertEquals(FETCH_DATA_REQUEST_SERVER_RESPONSE, response.payload());\n+\n+        PowerMockito.verifyStatic(AccountHelper.class);\n+        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testPostInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).generatePostRequest(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n+\n+        httpAgentSpy.post(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n+\n+        Mockito.verify(httpAgentSpy).invalidateExpiredCachedAccessToken();\n+\n+    }\n+\n+    @Test\n+    public void testFetchWithCredentialsInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Response<String> response = httpAgentSpy.fetchWithCredentials(SECURE_RESOURCE_ENDPOINT, SAMPLE_TEST_TOKEN);\n+        Assert.assertNotNull(response);\n+\n+        PowerMockito.verifyStatic(AccountHelper.class);\n+        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithCorrectParams() throws Exception {\n+\n+        Mockito.doReturn(sharedPreferences).when(allSharedPreferences).getPreferences();\n+        Mockito.doReturn(TEST_TOKEN_ENDPOINT).when(sharedPreferences).getString(AccountHelper.CONFIGURATION_CONSTANTS.TOKEN_ENDPOINT_URL, \"\");\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        AccountResponse accountResponse = Mockito.mock(AccountResponse.class);\n+\n+        Mockito.doReturn(accountResponse).when(httpAgentSpy).oauth2authenticateCore(ArgumentMatchers.any(StringBuilder.class), ArgumentMatchers.anyString(), ArgumentMatchers.anyString());\n+\n+        ArgumentCaptor<StringBuilder> requestParamStringBuilder = ArgumentCaptor.forClass(StringBuilder.class);\n+        ArgumentCaptor<String> grantType = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> tokenEndPoint = ArgumentCaptor.forClass(String.class);\n+\n+        httpAgentSpy.oauth2authenticateRefreshToken(SAMPLE_REFRESH_TOKEN);\n+\n+        Mockito.verify(httpAgentSpy).oauth2authenticateCore(requestParamStringBuilder.capture(), grantType.capture(), tokenEndPoint.capture());\n+\n+        String capturedRefreshTokenRequestValue = requestParamStringBuilder.getValue().toString();\n+        String capturedGrantTypeValue = grantType.getValue();\n+        String capturedTokenEndpointValue = tokenEndPoint.getValue();\n+\n+        Assert.assertEquals(\"&refresh_token=\" + SAMPLE_REFRESH_TOKEN, capturedRefreshTokenRequestValue);\n+\n+        Assert.assertEquals(AccountHelper.OAUTH.GRANT_TYPE.REFRESH_TOKEN, capturedGrantTypeValue);\n+        Assert.assertEquals(TEST_TOKEN_ENDPOINT, capturedTokenEndpointValue);\n+\n+\n+    }\n }\n", "next_change": {"commit": "9de9d9410c57ae743de96e3809ac93d603c45cfc", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex 9782a9e7..c7683921 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -560,4 +566,342 @@ public class HTTPAgentTest {\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Dristhi login failed. Try later\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNKNOWN_RESPONSE\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"No internet connection. Please ensure data connectivity\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"NO_INTERNET_CONNECTIVITY\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsTrueForAuthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertTrue(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsFalseForUnauthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(\"https://my-server.com/user-details?anm-id=\" + TEST_USERNAME);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertFalse(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsUnauthorizedResponse() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.message());\n+        Assert.assertNull(response.payload());\n+        Assert.assertEquals(\"Please check the credentials\", response.message());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsErrorResponseForMalformedURL() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForSocketTimeout() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseErrorResponseForIOException() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n+\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectResponseForRandomServerError() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Oops, something went wrong\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n+\n+    }\n }\n", "next_change": {"commit": "599b4c297881030dad9f38a6f29c13bcc95f8bc9", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c7683921..be37a270 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -904,4 +921,96 @@ public class HTTPAgentTest {\n         Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n \n     }\n+\n+    @Test\n+    public void testDownloadFromUrl() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(bufferedInputStream).when(httpAgentSpy).getBufferedInputStream(inputStream);\n+        Mockito.doReturn(1985).when(bufferedInputStream).available();\n+        Mockito.doReturn(-1).when(bufferedInputStream).read();\n+\n+        Mockito.doReturn(fileOutputStream).when(httpAgentSpy).getFileOutputStream(file);\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download successful\", downloadStatus.displayValue());\n+\n+        Mockito.verify(fileOutputStream).write(ArgumentMatchers.any(byte[].class));\n+        Mockito.verify(fileOutputStream).flush();\n+        Mockito.verify(fileOutputStream).close();\n+\n+    }\n+\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfNothingDownloaded() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Nothing downloaded.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfIOExceptionThrown() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download failed.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfConnectionStatusIsNOT200() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(true).when(dirFile).exists();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_NOT_FOUND).when(httpsURLConnection).getResponseCode();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download failed.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n }\n", "next_change": {"commit": "658aef8e2b4a61f2563a329e6252347327abc472", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex be37a270..bc5de287 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -1013,4 +1026,77 @@ public class HTTPAgentTest {\n \n     }\n \n+    @Test\n+    public void testHttpImagePostConfiguresConnectionRequestCorrectly() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_UPLOAD_ENDPOINT);\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+        Mockito.doReturn(file).when(httpAgentSpy).getDownloadFolder(TEST_IMAGE_FILE_PATH);\n+        Mockito.doReturn(fileInputStream).when(httpAgentSpy).getFileInputStream(file);\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(-1).when(fileInputStream).read(ArgumentMatchers.any(byte[].class));\n+\n+        Mockito.doReturn(printWriter).when(httpAgentSpy).getPrintWriter(outputStream);\n+        Mockito.doReturn(\"myFileName\").when(file).getName();\n+        Mockito.doReturn(printWriter).when(printWriter).append(ArgumentMatchers.any(CharSequence.class));\n+\n+        ProfileImage profileImage = new ProfileImage();\n+        profileImage.setFilepath(TEST_IMAGE_FILE_PATH);\n+        profileImage.setAnmId(TEST_ANM_ID);\n+        profileImage.setEntityID(TEST_BASE_ENTITY_ID);\n+        profileImage.setContenttype(\"png\");\n+        profileImage.setFilecategory(\"coverpic\");\n+\n+        httpAgentSpy.httpImagePost(TEST_IMAGE_UPLOAD_ENDPOINT, profileImage);\n+\n+        Mockito.verify(httpURLConnection).setDoOutput(true);\n+        Mockito.verify(httpURLConnection).setDoInput(true);\n+        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n+\n+        ArgumentCaptor<String> requestAttributeCaptor = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> requestValueCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpURLConnection, Mockito.times(2)).setRequestProperty(requestAttributeCaptor.capture(), requestValueCaptor.capture());\n+        List<String> requestAttributeCaptorValues = requestAttributeCaptor.getAllValues();\n+        List<String> requestValueCaptorValues = requestValueCaptor.getAllValues();\n+\n+        Assert.assertEquals(\"Authorization\", requestAttributeCaptorValues.get(0));\n+        Assert.assertEquals(\"Bearer \" + SAMPLE_TEST_TOKEN, requestValueCaptorValues.get(0));\n+\n+        Assert.assertEquals(\"Content-Type\", requestAttributeCaptorValues.get(1));\n+        Assert.assertTrue(requestValueCaptorValues.get(1).startsWith(\"multipart/form-data;boundary=\"));\n+\n+        Mockito.verify(httpURLConnection).setUseCaches(false);\n+        Mockito.verify(httpURLConnection).setChunkedStreamingMode(HTTPAgent.FILE_UPLOAD_CHUNK_SIZE_BYTES);\n+\n+        //Attach Image\n+        Mockito.verify(httpAgentSpy).getDownloadFolder(TEST_IMAGE_FILE_PATH);\n+\n+        ArgumentCaptor<CharSequence> printWriterCaptor = ArgumentCaptor.forClass(CharSequence.class);\n+\n+        Mockito.verify(printWriter, Mockito.times(49)).append(printWriterCaptor.capture());\n+\n+        List<CharSequence> printWriterAppendedValues = printWriterCaptor.getAllValues();\n+\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"myFileName\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"anm-id\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"entity-id\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"file-category\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"content-type\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getAnmId()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getEntityID()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getFilecategory()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getContenttype()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Type: text/plain; charset=UTF-8\"));\n+\n+        Mockito.verify(printWriter, Mockito.times(7)).flush();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b59b3d82bc4e845822a9d33c55ddd8b1f40f3a17", "message": "Merge commit", "committedDate": null}, {"oid": "e8382b2ab111640dddb25b969fc2e50ce9e08e2c", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Refactor HTTPAgent Fix failing unit tests"}, {"oid": "721420632c4e2d097074b390ea117706214f8f98", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Code clean up"}, {"oid": "47ffabfeeeb9df0d17b2d3c5650f3cba776eaafe", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Update OAuth implementation - Refactor refresh token and verify login logic - Add support for Spring OAuth Fallback if keycloak not supported"}, {"oid": "ba23de2dd455fa9716bb1fa6445558f94f09c0f6", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Optimization, Refactor and unit testing - Optimize upstream data processing for file uploads - Refactor for maintainability - Unit testing"}, {"oid": "9de9d9410c57ae743de96e3809ac93d603c45cfc", "committedDate": "2020-08-05 10:07:31 +0300", "message": "HTTPAgent Unit tests - Add more unit test cases"}, {"oid": "f91d166537991efd386cc9d5a64272f181f2e25f", "committedDate": "2020-08-05 10:07:31 +0300", "message": "CI Configuration updates - Add codacy configuration file - Rename test case"}, {"oid": "63a7ca66f80253b5fd8157489b551f45f466f1d9", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Fixed/Implment code review change requests on HTTP Agent test - Renamed test case - Refactored test case logic"}, {"oid": "599b4c297881030dad9f38a6f29c13bcc95f8bc9", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Add unit tests - Add unit tests for HTTPAgent.downloadFormUrl"}, {"oid": "c9c4a0df78c261f17a269aa253bb48cb43e18d95", "committedDate": "2020-08-05 10:08:46 +0300", "message": "Refactor client core : Remove password type String - Remove type String for password processing to mitigates against the heap dump attack vector exposed by Java String type - Fix unit tests"}, {"oid": "b09d8613fc02fec023ee63634ac5b78e43501e71", "committedDate": "2020-08-05 10:08:46 +0300", "message": "Fix unit test"}, {"oid": "658aef8e2b4a61f2563a329e6252347327abc472", "committedDate": "2020-08-05 10:08:46 +0300", "message": "HTTP Agent unit tests - Testing Tuesday - Add unit test for http image post/ upload"}, {"oid": "c2bbcc546fd46ef0326f4143f8f977e81911f696", "committedDate": "2020-08-05 10:12:04 +0300", "message": "Update Verify Authorization - Add backward compatibility for legacy implementation - Add unit tests - Fix codacy issues"}, {"oid": "cd93e8acff40c94c78b6e72c41eda5566b4f0879", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Support for local Multi-tenancy - Refactor offline multi tenancy implementation for same Team Members - Adds support for No need to remotely authenticate if all team members had logged in device previously"}, {"oid": "d5aee185c2b11a5d63b608b3617d40d2c2f16e61", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Support for local Multi-tenancy - Refactor offline multi tenancy implementation for same Team Members - Adds support for No need to remotely authenticate if all team members had logged in device previously"}, {"oid": "8db5c2d92cc1beff5c1bff8f2e7fd50caff02d7e", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Add unit tests - Add unit tests for startFormActivity with map metadata params - Refactor tests to use List interface instead of ArrayList class"}, {"oid": "e2ae820c03a52d4b063b0d001a70853a7da0ab95", "committedDate": "2020-08-05 10:14:53 +0300", "message": "Authentication with oauth2 credentials - Add conditional for sending client id and secret depending on whether keycloak is configured or not - Fix HTTPAgent unit tests"}, {"oid": "23832d0ca755d2479325cbcd572a97e37a84a0f3", "committedDate": "2020-08-05 11:12:50 +0300", "message": "Refactor authentication logic - Move credentials helper methods to helper class - Fix automatic logout an Account Manager account removal"}, {"oid": "88d9ef3544631a3eb59c692340995e7008ccf998", "committedDate": "2020-11-27 09:50:56 +0300", "message": "use content type to check existence"}, {"oid": "f45748750b0cecea999d4b1a501477bdd52a6e5a", "committedDate": "2020-11-27 12:41:18 +0300", "message": "use response content type"}, {"oid": "3c54d3fa4fba0facdb7c7927fdcf793b83d7d37c", "committedDate": "2021-02-23 12:48:03 +0300", "message": "Update unit test"}, {"oid": "6a1e019857fa51779ca688d63912616d22bff1b8", "committedDate": "2021-02-24 20:23:09 +0300", "message": "Update unit tests"}, {"oid": "65220c8b614c622a073ec45285c9b42928ea183d", "committedDate": "2022-03-29 14:13:00 +0300", "message": "Rename client core module"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMjg3Mg==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434402872", "body": "Spelling to `WithoutNetworkConnectivity`", "bodyText": "Spelling to WithoutNetworkConnectivity", "bodyHTML": "<p dir=\"auto\">Spelling to <code>WithoutNetworkConnectivity</code></p>", "author": "ekigamba", "createdAt": "2020-06-03T08:38:34Z", "path": "opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java", "diffHunk": "@@ -560,4 +566,342 @@ public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithC\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Dristhi login failed. Try later\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNKNOWN_RESPONSE\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {", "originalCommit": "bdb4315fd910de403f43911fe5d57cba826a5882", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyODA5OA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434428098", "bodyText": "Fixed", "author": "ndegwamartin", "createdAt": "2020-06-03T09:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMjg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2d5385feaba9763803f9da56aebc84e440285e9d", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c433d204..8f0ae1e2 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -719,7 +719,7 @@ public class HTTPAgentTest {\n \n \n     @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithoutNetworkConnectivity() throws Exception {\n \n         URL url = PowerMockito.mock(URL.class);\n         Assert.assertNotNull(url);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b59b3d82bc4e845822a9d33c55ddd8b1f40f3a17", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c433d204..8f0ae1e2 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -719,7 +719,7 @@ public class HTTPAgentTest {\n \n \n     @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithoutNetworkConnectivity() throws Exception {\n \n         URL url = PowerMockito.mock(URL.class);\n         Assert.assertNotNull(url);\n", "next_change": {"commit": "e8382b2ab111640dddb25b969fc2e50ce9e08e2c", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex 8f0ae1e2..8a902205 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -246,662 +194,4 @@ public class HTTPAgentTest {\n         Response<String> resp = httpAgent.postWithJsonResponse(\"http://www.mocky.io/v2/5e54d9333100006300eb33a8\", jObject.toString());\n         Assert.assertEquals(ResponseStatus.success, resp.status());\n     }\n-\n-\n-    @Test\n-    public void testOauth2authenticateCreatesUrlConnectionWithCorrectParameters() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(TOKEN_REQUEST_SERVER_RESPONSE);\n-\n-\n-        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-\n-        Assert.assertNotNull(accountResponse);\n-        Assert.assertEquals(200, accountResponse.getStatus());\n-        Assert.assertEquals(\"1r9A8zi5E3r@Zz\", accountResponse.getAccessToken());\n-        Assert.assertEquals(\"bearer\", accountResponse.getTokenType());\n-        Assert.assertEquals(\"text_token\", accountResponse.getRefreshToken());\n-        Assert.assertEquals(Integer.valueOf(\"3600\"), accountResponse.getExpiresIn());\n-        Assert.assertEquals(Integer.valueOf(\"36000\"), accountResponse.getRefreshExpiresIn());\n-        Assert.assertEquals(\"read write trust\", accountResponse.getScope());\n-\n-\n-        Mockito.verify(httpURLConnection).setConnectTimeout(60000);\n-        Mockito.verify(httpURLConnection).setReadTimeout(60000);\n-\n-        String requestParams = \"&grant_type=\" + AccountHelper.OAUTH.GRANT_TYPE.PASSWORD + \"&username=\" + TEST_USERNAME + \"&password=\" + TEST_PASSWORD + \"&client_id=\" + TEST_CLIENT_ID + \"&client_secret=\" + TEST_CLIENT_SECRET;\n-\n-        Mockito.verify(httpURLConnection).setFixedLengthStreamingMode(requestParams.getBytes().length);\n-        Mockito.verify(httpURLConnection).setDoOutput(true);\n-        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n-        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(\"charset\", \"utf-8\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(ArgumentMatchers.eq(\"Content-Length\"), ArgumentMatchers.anyString());\n-        Mockito.verify(httpURLConnection).setUseCaches(false);\n-        final String base64Auth = BaseEncoding.base64().encode(new String(TEST_CLIENT_ID + \":\" + TEST_CLIENT_SECRET).getBytes());\n-        Mockito.verify(httpURLConnection).setRequestProperty(AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BASIC + \" \" + base64Auth);\n-        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectResponseForBadRequest() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_BAD_REQUEST).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_BAD_REQUEST_SERVER_RESPONSE);\n-\n-        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-\n-        Assert.assertNotNull(accountResponse);\n-        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getStatus());\n-        Assert.assertNotNull(accountResponse.getAccountError());\n-        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getAccountError().getStatusCode());\n-        Assert.assertEquals(\"Code not valid\", accountResponse.getAccountError().getErrorDescription());\n-        Assert.assertEquals(\"invalid_grant\", accountResponse.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForMalformedURL() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForSocketTimeout() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new SocketTimeoutException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.TIMEOUT.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForIOException() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsNonNullAccountErrorResponseForRandomException() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_INTERNAL_SERVER_RESPONSE);\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, response.getAccountError().getStatusCode());\n-        Assert.assertNotNull(response.getAccountError().getError());\n-        Assert.assertEquals(\"Oops, something went wrong\", response.getAccountError().getErrorDescription());\n-        Assert.assertEquals(\"internal server error\", response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testFetchOAuthConfigurationProcessesConfigurationResponseCorrectly() throws Exception {\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n-\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(OAUTH_CONFIGURATION_SERVER_RESPONSE);\n-\n-        AccountConfiguration accountConfiguration = httpAgentSpy.fetchOAuthConfiguration();\n-        Assert.assertNotNull(accountConfiguration);\n-        Assert.assertEquals(\"https://my-server.com/oauth/auth\", accountConfiguration.getAuthorizationEndpoint());\n-        Assert.assertEquals(\"https://my-server.com/oauth/issuer\", accountConfiguration.getIssuerEndpoint());\n-        Assert.assertEquals(TEST_TOKEN_ENDPOINT, accountConfiguration.getTokenEndpoint());\n-\n-        List<String> grantTypes = accountConfiguration.getGrantTypesSupported();\n-        Assert.assertNotNull(grantTypes);\n-        Assert.assertEquals(\"authorization code\", grantTypes.get(0));\n-        Assert.assertEquals(\"implicit\", grantTypes.get(1));\n-        Assert.assertEquals(\"password\", grantTypes.get(2));\n-    }\n-\n-    @Test\n-    public void testFetchInvalidatesCacheIfUnauthorizedAndReturnsCorrectResponse() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Response<String> response = httpAgentSpy.fetch(SECURE_RESOURCE_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertEquals(ResponseStatus.valueOf(\"success\"), response.status());\n-        Assert.assertEquals(FETCH_DATA_REQUEST_SERVER_RESPONSE, response.payload());\n-\n-        PowerMockito.verifyStatic(AccountHelper.class);\n-        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testPostInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).generatePostRequest(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n-\n-        httpAgentSpy.post(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n-\n-        Mockito.verify(httpAgentSpy).invalidateExpiredCachedAccessToken();\n-\n-    }\n-\n-    @Test\n-    public void testFetchWithCredentialsInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Response<String> response = httpAgentSpy.fetchWithCredentials(SECURE_RESOURCE_ENDPOINT, SAMPLE_TEST_TOKEN);\n-        Assert.assertNotNull(response);\n-\n-        PowerMockito.verifyStatic(AccountHelper.class);\n-        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithCorrectParams() throws Exception {\n-\n-        Mockito.doReturn(sharedPreferences).when(allSharedPreferences).getPreferences();\n-        Mockito.doReturn(TEST_TOKEN_ENDPOINT).when(sharedPreferences).getString(AccountHelper.CONFIGURATION_CONSTANTS.TOKEN_ENDPOINT_URL, \"\");\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        AccountResponse accountResponse = Mockito.mock(AccountResponse.class);\n-\n-        Mockito.doReturn(accountResponse).when(httpAgentSpy).oauth2authenticateCore(ArgumentMatchers.any(StringBuilder.class), ArgumentMatchers.anyString(), ArgumentMatchers.anyString());\n-\n-        ArgumentCaptor<StringBuilder> requestParamStringBuilder = ArgumentCaptor.forClass(StringBuilder.class);\n-        ArgumentCaptor<String> grantType = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> tokenEndPoint = ArgumentCaptor.forClass(String.class);\n-\n-        httpAgentSpy.oauth2authenticateRefreshToken(SAMPLE_REFRESH_TOKEN);\n-\n-        Mockito.verify(httpAgentSpy).oauth2authenticateCore(requestParamStringBuilder.capture(), grantType.capture(), tokenEndPoint.capture());\n-\n-        String capturedRefreshTokenRequestValue = requestParamStringBuilder.getValue().toString();\n-        String capturedGrantTypeValue = grantType.getValue();\n-        String capturedTokenEndpointValue = tokenEndPoint.getValue();\n-\n-        Assert.assertEquals(\"&refresh_token=\" + SAMPLE_REFRESH_TOKEN, capturedRefreshTokenRequestValue);\n-\n-        Assert.assertEquals(AccountHelper.OAUTH.GRANT_TYPE.REFRESH_TOKEN, capturedGrantTypeValue);\n-        Assert.assertEquals(TEST_TOKEN_ENDPOINT, capturedTokenEndpointValue);\n-\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n-        Assert.assertNotNull(loginResponse.payload());\n-\n-        Assert.assertNotNull(loginResponse.payload().user);\n-        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n-        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n-\n-        Assert.assertNotNull(loginResponse.payload().time);\n-        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n-        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n-\n-        Assert.assertNotNull(loginResponse.payload().locations);\n-        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n-\n-        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n-        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n-        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n-\n-        Assert.assertNotNull(loginResponse.payload().team);\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n-\n-        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n-\n-        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n-\n-        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n-        String capturedKey = headerKey.getValue();\n-        String capturedValue = headerValue.getValue();\n-\n-        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n-        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Oops, something went wrong\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithoutNetworkConnectivity() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"No internet connection. Please ensure data connectivity\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"NO_INTERNET_CONNECTIVITY\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testVerifyAuthorizationReturnsTrueForAuthorizedResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        boolean isVerified = httpAgentSpy.verifyAuthorization();\n-        Assert.assertTrue(isVerified);\n-\n-    }\n-\n-    @Test\n-    public void testVerifyAuthorizationReturnsFalseForUnauthorizedResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(\"https://my-server.com/user-details?anm-id=\" + TEST_USERNAME);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        boolean isVerified = httpAgentSpy.verifyAuthorization();\n-        Assert.assertFalse(isVerified);\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsUnauthorizedResponse() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.message());\n-        Assert.assertNull(response.payload());\n-        Assert.assertEquals(\"Please check the credentials\", response.message());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsErrorResponseForMalformedURL() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForSocketTimeout() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new SocketTimeoutException()).when(httpURLConnection).getResponseCode();\n-\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.TIMEOUT.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForIOException() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n-\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectResponseForRandomServerError() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n-\n-        LoginResponse loginResponse = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Oops, something went wrong\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n-\n-    }\n }\n", "next_change": {"commit": "ba23de2dd455fa9716bb1fa6445558f94f09c0f6", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex 8a902205..9782a9e7 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -194,4 +240,324 @@ public class HTTPAgentTest {\n         Response<String> resp = httpAgent.postWithJsonResponse(\"http://www.mocky.io/v2/5e54d9333100006300eb33a8\", jObject.toString());\n         Assert.assertEquals(ResponseStatus.success, resp.status());\n     }\n+\n+\n+    @Test\n+    public void testOauth2authenticateCreatesUrlConnectionWithCorrectParameters() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(TOKEN_REQUEST_SERVER_RESPONSE);\n+\n+\n+        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+\n+        Assert.assertNotNull(accountResponse);\n+        Assert.assertEquals(200, accountResponse.getStatus());\n+        Assert.assertEquals(\"1r9A8zi5E3r@Zz\", accountResponse.getAccessToken());\n+        Assert.assertEquals(\"bearer\", accountResponse.getTokenType());\n+        Assert.assertEquals(\"text_token\", accountResponse.getRefreshToken());\n+        Assert.assertEquals(Integer.valueOf(\"3600\"), accountResponse.getExpiresIn());\n+        Assert.assertEquals(Integer.valueOf(\"36000\"), accountResponse.getRefreshExpiresIn());\n+        Assert.assertEquals(\"read write trust\", accountResponse.getScope());\n+\n+\n+        Mockito.verify(httpURLConnection).setConnectTimeout(60000);\n+        Mockito.verify(httpURLConnection).setReadTimeout(60000);\n+\n+        String requestParams = \"&grant_type=\" + AccountHelper.OAUTH.GRANT_TYPE.PASSWORD + \"&username=\" + TEST_USERNAME + \"&password=\" + TEST_PASSWORD + \"&client_id=\" + TEST_CLIENT_ID + \"&client_secret=\" + TEST_CLIENT_SECRET;\n+\n+        Mockito.verify(httpURLConnection).setFixedLengthStreamingMode(requestParams.getBytes().length);\n+        Mockito.verify(httpURLConnection).setDoOutput(true);\n+        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n+        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(\"charset\", \"utf-8\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(ArgumentMatchers.eq(\"Content-Length\"), ArgumentMatchers.anyString());\n+        Mockito.verify(httpURLConnection).setUseCaches(false);\n+        final String base64Auth = BaseEncoding.base64().encode(new String(TEST_CLIENT_ID + \":\" + TEST_CLIENT_SECRET).getBytes());\n+        Mockito.verify(httpURLConnection).setRequestProperty(AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BASIC + \" \" + base64Auth);\n+        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectResponseForBadRequest() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_BAD_REQUEST).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_BAD_REQUEST_SERVER_RESPONSE);\n+\n+        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+\n+        Assert.assertNotNull(accountResponse);\n+        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getStatus());\n+        Assert.assertNotNull(accountResponse.getAccountError());\n+        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getAccountError().getStatusCode());\n+        Assert.assertEquals(\"Code not valid\", accountResponse.getAccountError().getErrorDescription());\n+        Assert.assertEquals(\"invalid_grant\", accountResponse.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForMalformedURL() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForSocketTimeout() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.TIMEOUT.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForIOException() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsNonNullAccountErrorResponseForRandomException() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_INTERNAL_SERVER_RESPONSE);\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, response.getAccountError().getStatusCode());\n+        Assert.assertNotNull(response.getAccountError().getError());\n+        Assert.assertEquals(\"Oops, something went wrong\", response.getAccountError().getErrorDescription());\n+        Assert.assertEquals(\"internal server error\", response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testFetchOAuthConfigurationProcessesConfigurationResponseCorrectly() throws Exception {\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(\"https://my-server.com/\").when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n+\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(OAUTH_CONFIGURATION_SERVER_RESPONSE);\n+\n+        AccountConfiguration accountConfiguration = httpAgentSpy.fetchOAuthConfiguration();\n+        Assert.assertNotNull(accountConfiguration);\n+        Assert.assertEquals(\"https://my-server.com/oauth/auth\", accountConfiguration.getAuthorizationEndpoint());\n+        Assert.assertEquals(\"https://my-server.com/oauth/issuer\", accountConfiguration.getIssuerEndpoint());\n+        Assert.assertEquals(TEST_TOKEN_ENDPOINT, accountConfiguration.getTokenEndpoint());\n+\n+        List<String> grantTypes = accountConfiguration.getGrantTypesSupported();\n+        Assert.assertNotNull(grantTypes);\n+        Assert.assertEquals(\"authorization code\", grantTypes.get(0));\n+        Assert.assertEquals(\"implicit\", grantTypes.get(1));\n+        Assert.assertEquals(\"password\", grantTypes.get(2));\n+    }\n+\n+    @Test\n+    public void testFetchInvalidatesCacheIfUnauthorizedAndReturnsCorrectResponse() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Response<String> response = httpAgentSpy.fetch(SECURE_RESOURCE_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertEquals(ResponseStatus.valueOf(\"success\"), response.status());\n+        Assert.assertEquals(FETCH_DATA_REQUEST_SERVER_RESPONSE, response.payload());\n+\n+        PowerMockito.verifyStatic(AccountHelper.class);\n+        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testPostInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).generatePostRequest(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n+\n+        httpAgentSpy.post(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n+\n+        Mockito.verify(httpAgentSpy).invalidateExpiredCachedAccessToken();\n+\n+    }\n+\n+    @Test\n+    public void testFetchWithCredentialsInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Response<String> response = httpAgentSpy.fetchWithCredentials(SECURE_RESOURCE_ENDPOINT, SAMPLE_TEST_TOKEN);\n+        Assert.assertNotNull(response);\n+\n+        PowerMockito.verifyStatic(AccountHelper.class);\n+        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithCorrectParams() throws Exception {\n+\n+        Mockito.doReturn(sharedPreferences).when(allSharedPreferences).getPreferences();\n+        Mockito.doReturn(TEST_TOKEN_ENDPOINT).when(sharedPreferences).getString(AccountHelper.CONFIGURATION_CONSTANTS.TOKEN_ENDPOINT_URL, \"\");\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        AccountResponse accountResponse = Mockito.mock(AccountResponse.class);\n+\n+        Mockito.doReturn(accountResponse).when(httpAgentSpy).oauth2authenticateCore(ArgumentMatchers.any(StringBuilder.class), ArgumentMatchers.anyString(), ArgumentMatchers.anyString());\n+\n+        ArgumentCaptor<StringBuilder> requestParamStringBuilder = ArgumentCaptor.forClass(StringBuilder.class);\n+        ArgumentCaptor<String> grantType = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> tokenEndPoint = ArgumentCaptor.forClass(String.class);\n+\n+        httpAgentSpy.oauth2authenticateRefreshToken(SAMPLE_REFRESH_TOKEN);\n+\n+        Mockito.verify(httpAgentSpy).oauth2authenticateCore(requestParamStringBuilder.capture(), grantType.capture(), tokenEndPoint.capture());\n+\n+        String capturedRefreshTokenRequestValue = requestParamStringBuilder.getValue().toString();\n+        String capturedGrantTypeValue = grantType.getValue();\n+        String capturedTokenEndpointValue = tokenEndPoint.getValue();\n+\n+        Assert.assertEquals(\"&refresh_token=\" + SAMPLE_REFRESH_TOKEN, capturedRefreshTokenRequestValue);\n+\n+        Assert.assertEquals(AccountHelper.OAUTH.GRANT_TYPE.REFRESH_TOKEN, capturedGrantTypeValue);\n+        Assert.assertEquals(TEST_TOKEN_ENDPOINT, capturedTokenEndpointValue);\n+\n+\n+    }\n }\n", "next_change": {"commit": "9de9d9410c57ae743de96e3809ac93d603c45cfc", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex 9782a9e7..c7683921 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -560,4 +566,342 @@ public class HTTPAgentTest {\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Dristhi login failed. Try later\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNKNOWN_RESPONSE\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"No internet connection. Please ensure data connectivity\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"NO_INTERNET_CONNECTIVITY\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsTrueForAuthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertTrue(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsFalseForUnauthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(\"https://my-server.com/user-details?anm-id=\" + TEST_USERNAME);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertFalse(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsUnauthorizedResponse() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.message());\n+        Assert.assertNull(response.payload());\n+        Assert.assertEquals(\"Please check the credentials\", response.message());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsErrorResponseForMalformedURL() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForSocketTimeout() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseErrorResponseForIOException() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n+\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectResponseForRandomServerError() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Oops, something went wrong\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n+\n+    }\n }\n", "next_change": {"commit": "599b4c297881030dad9f38a6f29c13bcc95f8bc9", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c7683921..be37a270 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -904,4 +921,96 @@ public class HTTPAgentTest {\n         Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n \n     }\n+\n+    @Test\n+    public void testDownloadFromUrl() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(bufferedInputStream).when(httpAgentSpy).getBufferedInputStream(inputStream);\n+        Mockito.doReturn(1985).when(bufferedInputStream).available();\n+        Mockito.doReturn(-1).when(bufferedInputStream).read();\n+\n+        Mockito.doReturn(fileOutputStream).when(httpAgentSpy).getFileOutputStream(file);\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download successful\", downloadStatus.displayValue());\n+\n+        Mockito.verify(fileOutputStream).write(ArgumentMatchers.any(byte[].class));\n+        Mockito.verify(fileOutputStream).flush();\n+        Mockito.verify(fileOutputStream).close();\n+\n+    }\n+\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfNothingDownloaded() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Nothing downloaded.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfIOExceptionThrown() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download failed.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfConnectionStatusIsNOT200() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(true).when(dirFile).exists();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_NOT_FOUND).when(httpsURLConnection).getResponseCode();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download failed.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n }\n", "next_change": {"commit": "658aef8e2b4a61f2563a329e6252347327abc472", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex be37a270..bc5de287 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -1013,4 +1026,77 @@ public class HTTPAgentTest {\n \n     }\n \n+    @Test\n+    public void testHttpImagePostConfiguresConnectionRequestCorrectly() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_UPLOAD_ENDPOINT);\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+        Mockito.doReturn(file).when(httpAgentSpy).getDownloadFolder(TEST_IMAGE_FILE_PATH);\n+        Mockito.doReturn(fileInputStream).when(httpAgentSpy).getFileInputStream(file);\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(-1).when(fileInputStream).read(ArgumentMatchers.any(byte[].class));\n+\n+        Mockito.doReturn(printWriter).when(httpAgentSpy).getPrintWriter(outputStream);\n+        Mockito.doReturn(\"myFileName\").when(file).getName();\n+        Mockito.doReturn(printWriter).when(printWriter).append(ArgumentMatchers.any(CharSequence.class));\n+\n+        ProfileImage profileImage = new ProfileImage();\n+        profileImage.setFilepath(TEST_IMAGE_FILE_PATH);\n+        profileImage.setAnmId(TEST_ANM_ID);\n+        profileImage.setEntityID(TEST_BASE_ENTITY_ID);\n+        profileImage.setContenttype(\"png\");\n+        profileImage.setFilecategory(\"coverpic\");\n+\n+        httpAgentSpy.httpImagePost(TEST_IMAGE_UPLOAD_ENDPOINT, profileImage);\n+\n+        Mockito.verify(httpURLConnection).setDoOutput(true);\n+        Mockito.verify(httpURLConnection).setDoInput(true);\n+        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n+\n+        ArgumentCaptor<String> requestAttributeCaptor = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> requestValueCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpURLConnection, Mockito.times(2)).setRequestProperty(requestAttributeCaptor.capture(), requestValueCaptor.capture());\n+        List<String> requestAttributeCaptorValues = requestAttributeCaptor.getAllValues();\n+        List<String> requestValueCaptorValues = requestValueCaptor.getAllValues();\n+\n+        Assert.assertEquals(\"Authorization\", requestAttributeCaptorValues.get(0));\n+        Assert.assertEquals(\"Bearer \" + SAMPLE_TEST_TOKEN, requestValueCaptorValues.get(0));\n+\n+        Assert.assertEquals(\"Content-Type\", requestAttributeCaptorValues.get(1));\n+        Assert.assertTrue(requestValueCaptorValues.get(1).startsWith(\"multipart/form-data;boundary=\"));\n+\n+        Mockito.verify(httpURLConnection).setUseCaches(false);\n+        Mockito.verify(httpURLConnection).setChunkedStreamingMode(HTTPAgent.FILE_UPLOAD_CHUNK_SIZE_BYTES);\n+\n+        //Attach Image\n+        Mockito.verify(httpAgentSpy).getDownloadFolder(TEST_IMAGE_FILE_PATH);\n+\n+        ArgumentCaptor<CharSequence> printWriterCaptor = ArgumentCaptor.forClass(CharSequence.class);\n+\n+        Mockito.verify(printWriter, Mockito.times(49)).append(printWriterCaptor.capture());\n+\n+        List<CharSequence> printWriterAppendedValues = printWriterCaptor.getAllValues();\n+\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"myFileName\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"anm-id\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"entity-id\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"file-category\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"content-type\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getAnmId()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getEntityID()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getFilecategory()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getContenttype()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Type: text/plain; charset=UTF-8\"));\n+\n+        Mockito.verify(printWriter, Mockito.times(7)).flush();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b59b3d82bc4e845822a9d33c55ddd8b1f40f3a17", "message": "Merge commit", "committedDate": null}, {"oid": "e8382b2ab111640dddb25b969fc2e50ce9e08e2c", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Refactor HTTPAgent Fix failing unit tests"}, {"oid": "721420632c4e2d097074b390ea117706214f8f98", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Code clean up"}, {"oid": "47ffabfeeeb9df0d17b2d3c5650f3cba776eaafe", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Update OAuth implementation - Refactor refresh token and verify login logic - Add support for Spring OAuth Fallback if keycloak not supported"}, {"oid": "ba23de2dd455fa9716bb1fa6445558f94f09c0f6", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Optimization, Refactor and unit testing - Optimize upstream data processing for file uploads - Refactor for maintainability - Unit testing"}, {"oid": "9de9d9410c57ae743de96e3809ac93d603c45cfc", "committedDate": "2020-08-05 10:07:31 +0300", "message": "HTTPAgent Unit tests - Add more unit test cases"}, {"oid": "f91d166537991efd386cc9d5a64272f181f2e25f", "committedDate": "2020-08-05 10:07:31 +0300", "message": "CI Configuration updates - Add codacy configuration file - Rename test case"}, {"oid": "63a7ca66f80253b5fd8157489b551f45f466f1d9", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Fixed/Implment code review change requests on HTTP Agent test - Renamed test case - Refactored test case logic"}, {"oid": "599b4c297881030dad9f38a6f29c13bcc95f8bc9", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Add unit tests - Add unit tests for HTTPAgent.downloadFormUrl"}, {"oid": "c9c4a0df78c261f17a269aa253bb48cb43e18d95", "committedDate": "2020-08-05 10:08:46 +0300", "message": "Refactor client core : Remove password type String - Remove type String for password processing to mitigates against the heap dump attack vector exposed by Java String type - Fix unit tests"}, {"oid": "b09d8613fc02fec023ee63634ac5b78e43501e71", "committedDate": "2020-08-05 10:08:46 +0300", "message": "Fix unit test"}, {"oid": "658aef8e2b4a61f2563a329e6252347327abc472", "committedDate": "2020-08-05 10:08:46 +0300", "message": "HTTP Agent unit tests - Testing Tuesday - Add unit test for http image post/ upload"}, {"oid": "c2bbcc546fd46ef0326f4143f8f977e81911f696", "committedDate": "2020-08-05 10:12:04 +0300", "message": "Update Verify Authorization - Add backward compatibility for legacy implementation - Add unit tests - Fix codacy issues"}, {"oid": "cd93e8acff40c94c78b6e72c41eda5566b4f0879", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Support for local Multi-tenancy - Refactor offline multi tenancy implementation for same Team Members - Adds support for No need to remotely authenticate if all team members had logged in device previously"}, {"oid": "d5aee185c2b11a5d63b608b3617d40d2c2f16e61", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Support for local Multi-tenancy - Refactor offline multi tenancy implementation for same Team Members - Adds support for No need to remotely authenticate if all team members had logged in device previously"}, {"oid": "8db5c2d92cc1beff5c1bff8f2e7fd50caff02d7e", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Add unit tests - Add unit tests for startFormActivity with map metadata params - Refactor tests to use List interface instead of ArrayList class"}, {"oid": "e2ae820c03a52d4b063b0d001a70853a7da0ab95", "committedDate": "2020-08-05 10:14:53 +0300", "message": "Authentication with oauth2 credentials - Add conditional for sending client id and secret depending on whether keycloak is configured or not - Fix HTTPAgent unit tests"}, {"oid": "23832d0ca755d2479325cbcd572a97e37a84a0f3", "committedDate": "2020-08-05 11:12:50 +0300", "message": "Refactor authentication logic - Move credentials helper methods to helper class - Fix automatic logout an Account Manager account removal"}, {"oid": "88d9ef3544631a3eb59c692340995e7008ccf998", "committedDate": "2020-11-27 09:50:56 +0300", "message": "use content type to check existence"}, {"oid": "f45748750b0cecea999d4b1a501477bdd52a6e5a", "committedDate": "2020-11-27 12:41:18 +0300", "message": "use response content type"}, {"oid": "3c54d3fa4fba0facdb7c7927fdcf793b83d7d37c", "committedDate": "2021-02-23 12:48:03 +0300", "message": "Update unit test"}, {"oid": "6a1e019857fa51779ca688d63912616d22bff1b8", "committedDate": "2021-02-24 20:23:09 +0300", "message": "Update unit tests"}, {"oid": "65220c8b614c622a073ec45285c9b42928ea183d", "committedDate": "2022-03-29 14:13:00 +0300", "message": "Rename client core module"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNTAzOA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434405038", "body": "I think this test name is incorrect. We have a socket timeout being thrown on line 707 in this file. I am not sure if this test is a duplicate since we also have another test that checks for MalformedURLException", "bodyText": "I think this test name is incorrect. We have a socket timeout being thrown on line 707 in this file. I am not sure if this test is a duplicate since we also have another test that checks for MalformedURLException", "bodyHTML": "<p dir=\"auto\">I think this test name is incorrect. We have a socket timeout being thrown on line 707 in this file. I am not sure if this test is a duplicate since we also have another test that checks for MalformedURLException</p>", "author": "ekigamba", "createdAt": "2020-06-03T08:42:08Z", "path": "opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java", "diffHunk": "@@ -560,4 +566,342 @@ public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithC\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Dristhi login failed. Try later\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNKNOWN_RESPONSE\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"No internet connection. Please ensure data connectivity\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"NO_INTERNET_CONNECTIVITY\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsTrueForAuthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertTrue(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsFalseForUnauthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(\"https://my-server.com/user-details?anm-id=\" + TEST_USERNAME);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertFalse(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsUnauthorizedResponse() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.message());\n+        Assert.assertNull(response.payload());\n+        Assert.assertEquals(\"Please check the credentials\", response.message());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsErrorResponseForMalformedURL() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForSocketTimeout() throws Exception {", "originalCommit": "bdb4315fd910de403f43911fe5d57cba826a5882", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyODEzOA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434428138", "bodyText": "Fixed", "author": "ndegwamartin", "createdAt": "2020-06-03T09:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNTAzOA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "e8382b2ab111640dddb25b969fc2e50ce9e08e2c", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c433d204..8a902205 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -246,662 +194,4 @@ public class HTTPAgentTest {\n         Response<String> resp = httpAgent.postWithJsonResponse(\"http://www.mocky.io/v2/5e54d9333100006300eb33a8\", jObject.toString());\n         Assert.assertEquals(ResponseStatus.success, resp.status());\n     }\n-\n-\n-    @Test\n-    public void testOauth2authenticateCreatesUrlConnectionWithCorrectParameters() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(TOKEN_REQUEST_SERVER_RESPONSE);\n-\n-\n-        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-\n-        Assert.assertNotNull(accountResponse);\n-        Assert.assertEquals(200, accountResponse.getStatus());\n-        Assert.assertEquals(\"1r9A8zi5E3r@Zz\", accountResponse.getAccessToken());\n-        Assert.assertEquals(\"bearer\", accountResponse.getTokenType());\n-        Assert.assertEquals(\"text_token\", accountResponse.getRefreshToken());\n-        Assert.assertEquals(Integer.valueOf(\"3600\"), accountResponse.getExpiresIn());\n-        Assert.assertEquals(Integer.valueOf(\"36000\"), accountResponse.getRefreshExpiresIn());\n-        Assert.assertEquals(\"read write trust\", accountResponse.getScope());\n-\n-\n-        Mockito.verify(httpURLConnection).setConnectTimeout(60000);\n-        Mockito.verify(httpURLConnection).setReadTimeout(60000);\n-\n-        String requestParams = \"&grant_type=\" + AccountHelper.OAUTH.GRANT_TYPE.PASSWORD + \"&username=\" + TEST_USERNAME + \"&password=\" + TEST_PASSWORD + \"&client_id=\" + TEST_CLIENT_ID + \"&client_secret=\" + TEST_CLIENT_SECRET;\n-\n-        Mockito.verify(httpURLConnection).setFixedLengthStreamingMode(requestParams.getBytes().length);\n-        Mockito.verify(httpURLConnection).setDoOutput(true);\n-        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n-        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(\"charset\", \"utf-8\");\n-        Mockito.verify(httpURLConnection).setRequestProperty(ArgumentMatchers.eq(\"Content-Length\"), ArgumentMatchers.anyString());\n-        Mockito.verify(httpURLConnection).setUseCaches(false);\n-        final String base64Auth = BaseEncoding.base64().encode(new String(TEST_CLIENT_ID + \":\" + TEST_CLIENT_SECRET).getBytes());\n-        Mockito.verify(httpURLConnection).setRequestProperty(AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BASIC + \" \" + base64Auth);\n-        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectResponseForBadRequest() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_BAD_REQUEST).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_BAD_REQUEST_SERVER_RESPONSE);\n-\n-        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-\n-        Assert.assertNotNull(accountResponse);\n-        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getStatus());\n-        Assert.assertNotNull(accountResponse.getAccountError());\n-        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getAccountError().getStatusCode());\n-        Assert.assertEquals(\"Code not valid\", accountResponse.getAccountError().getErrorDescription());\n-        Assert.assertEquals(\"invalid_grant\", accountResponse.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForMalformedURL() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForSocketTimeout() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new SocketTimeoutException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.TIMEOUT.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForIOException() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-\n-        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n-        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateReturnsNonNullAccountErrorResponseForRandomException() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n-        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n-        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n-\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_INTERNAL_SERVER_RESPONSE);\n-\n-        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.getAccountError());\n-        Assert.assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, response.getAccountError().getStatusCode());\n-        Assert.assertNotNull(response.getAccountError().getError());\n-        Assert.assertEquals(\"Oops, something went wrong\", response.getAccountError().getErrorDescription());\n-        Assert.assertEquals(\"internal server error\", response.getAccountError().getError());\n-\n-    }\n-\n-    @Test\n-    public void testFetchOAuthConfigurationProcessesConfigurationResponseCorrectly() throws Exception {\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n-\n-        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(OAUTH_CONFIGURATION_SERVER_RESPONSE);\n-\n-        AccountConfiguration accountConfiguration = httpAgentSpy.fetchOAuthConfiguration();\n-        Assert.assertNotNull(accountConfiguration);\n-        Assert.assertEquals(\"https://my-server.com/oauth/auth\", accountConfiguration.getAuthorizationEndpoint());\n-        Assert.assertEquals(\"https://my-server.com/oauth/issuer\", accountConfiguration.getIssuerEndpoint());\n-        Assert.assertEquals(TEST_TOKEN_ENDPOINT, accountConfiguration.getTokenEndpoint());\n-\n-        List<String> grantTypes = accountConfiguration.getGrantTypesSupported();\n-        Assert.assertNotNull(grantTypes);\n-        Assert.assertEquals(\"authorization code\", grantTypes.get(0));\n-        Assert.assertEquals(\"implicit\", grantTypes.get(1));\n-        Assert.assertEquals(\"password\", grantTypes.get(2));\n-    }\n-\n-    @Test\n-    public void testFetchInvalidatesCacheIfUnauthorizedAndReturnsCorrectResponse() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Response<String> response = httpAgentSpy.fetch(SECURE_RESOURCE_ENDPOINT);\n-        Assert.assertNotNull(response);\n-        Assert.assertEquals(ResponseStatus.valueOf(\"success\"), response.status());\n-        Assert.assertEquals(FETCH_DATA_REQUEST_SERVER_RESPONSE, response.payload());\n-\n-        PowerMockito.verifyStatic(AccountHelper.class);\n-        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testPostInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).generatePostRequest(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n-\n-        httpAgentSpy.post(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n-\n-        Mockito.verify(httpAgentSpy).invalidateExpiredCachedAccessToken();\n-\n-    }\n-\n-    @Test\n-    public void testFetchWithCredentialsInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n-        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n-\n-        PowerMockito.mockStatic(AccountHelper.class);\n-        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n-\n-        Response<String> response = httpAgentSpy.fetchWithCredentials(SECURE_RESOURCE_ENDPOINT, SAMPLE_TEST_TOKEN);\n-        Assert.assertNotNull(response);\n-\n-        PowerMockito.verifyStatic(AccountHelper.class);\n-        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithCorrectParams() throws Exception {\n-\n-        Mockito.doReturn(sharedPreferences).when(allSharedPreferences).getPreferences();\n-        Mockito.doReturn(TEST_TOKEN_ENDPOINT).when(sharedPreferences).getString(AccountHelper.CONFIGURATION_CONSTANTS.TOKEN_ENDPOINT_URL, \"\");\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        AccountResponse accountResponse = Mockito.mock(AccountResponse.class);\n-\n-        Mockito.doReturn(accountResponse).when(httpAgentSpy).oauth2authenticateCore(ArgumentMatchers.any(StringBuilder.class), ArgumentMatchers.anyString(), ArgumentMatchers.anyString());\n-\n-        ArgumentCaptor<StringBuilder> requestParamStringBuilder = ArgumentCaptor.forClass(StringBuilder.class);\n-        ArgumentCaptor<String> grantType = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> tokenEndPoint = ArgumentCaptor.forClass(String.class);\n-\n-        httpAgentSpy.oauth2authenticateRefreshToken(SAMPLE_REFRESH_TOKEN);\n-\n-        Mockito.verify(httpAgentSpy).oauth2authenticateCore(requestParamStringBuilder.capture(), grantType.capture(), tokenEndPoint.capture());\n-\n-        String capturedRefreshTokenRequestValue = requestParamStringBuilder.getValue().toString();\n-        String capturedGrantTypeValue = grantType.getValue();\n-        String capturedTokenEndpointValue = tokenEndPoint.getValue();\n-\n-        Assert.assertEquals(\"&refresh_token=\" + SAMPLE_REFRESH_TOKEN, capturedRefreshTokenRequestValue);\n-\n-        Assert.assertEquals(AccountHelper.OAUTH.GRANT_TYPE.REFRESH_TOKEN, capturedGrantTypeValue);\n-        Assert.assertEquals(TEST_TOKEN_ENDPOINT, capturedTokenEndpointValue);\n-\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n-        Assert.assertNotNull(loginResponse.payload());\n-\n-        Assert.assertNotNull(loginResponse.payload().user);\n-        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n-        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n-\n-        Assert.assertNotNull(loginResponse.payload().time);\n-        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n-        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n-\n-        Assert.assertNotNull(loginResponse.payload().locations);\n-        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n-\n-        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n-        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n-        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n-\n-        Assert.assertNotNull(loginResponse.payload().team);\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n-        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n-\n-        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n-\n-        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n-\n-        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n-        String capturedKey = headerKey.getValue();\n-        String capturedValue = headerValue.getValue();\n-\n-        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n-        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Dristhi login failed. Try later\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"UNKNOWN_RESPONSE\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n-\n-    }\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n-\n-        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"No internet connection. Please ensure data connectivity\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"NO_INTERNET_CONNECTIVITY\", loginResponse.name());\n-\n-    }\n-\n-\n-    @Test\n-    public void testVerifyAuthorizationReturnsTrueForAuthorizedResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n-\n-        boolean isVerified = httpAgentSpy.verifyAuthorization();\n-        Assert.assertTrue(isVerified);\n-\n-    }\n-\n-    @Test\n-    public void testVerifyAuthorizationReturnsFalseForUnauthorizedResponse() throws Exception {\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(\"https://my-server.com/user-details?anm-id=\" + TEST_USERNAME);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        boolean isVerified = httpAgentSpy.verifyAuthorization();\n-        Assert.assertFalse(isVerified);\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsUnauthorizedResponse() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNotNull(response.message());\n-        Assert.assertNull(response.payload());\n-        Assert.assertEquals(\"Please check the credentials\", response.message());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsErrorResponseForMalformedURL() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForSocketTimeout() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n-\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForIOException() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n-        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n-        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n-\n-\n-        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-        Assert.assertNotNull(response);\n-        Assert.assertNull(response.payload());\n-        Assert.assertNotNull(response.message());\n-        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.name());\n-\n-    }\n-\n-    @Test\n-    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectResponseForRandomServerError() throws Exception {\n-\n-        PowerMockito.mockStatic(Base64.class);\n-\n-        URL url = PowerMockito.mock(URL.class);\n-        Assert.assertNotNull(url);\n-\n-        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n-\n-        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n-\n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n-        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n-\n-        PowerMockito.mockStatic(IOUtils.class);\n-        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n-\n-        LoginResponse loginResponse = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n-\n-        Assert.assertNotNull(loginResponse);\n-        Assert.assertNotNull(loginResponse.message());\n-        Assert.assertEquals(\"Oops, something went wrong\", loginResponse.message());\n-        Assert.assertNull(loginResponse.payload());\n-\n-        Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n-\n-    }\n }\n", "next_change": {"commit": "ba23de2dd455fa9716bb1fa6445558f94f09c0f6", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex 8a902205..9782a9e7 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -194,4 +240,324 @@ public class HTTPAgentTest {\n         Response<String> resp = httpAgent.postWithJsonResponse(\"http://www.mocky.io/v2/5e54d9333100006300eb33a8\", jObject.toString());\n         Assert.assertEquals(ResponseStatus.success, resp.status());\n     }\n+\n+\n+    @Test\n+    public void testOauth2authenticateCreatesUrlConnectionWithCorrectParameters() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(TOKEN_REQUEST_SERVER_RESPONSE);\n+\n+\n+        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+\n+        Assert.assertNotNull(accountResponse);\n+        Assert.assertEquals(200, accountResponse.getStatus());\n+        Assert.assertEquals(\"1r9A8zi5E3r@Zz\", accountResponse.getAccessToken());\n+        Assert.assertEquals(\"bearer\", accountResponse.getTokenType());\n+        Assert.assertEquals(\"text_token\", accountResponse.getRefreshToken());\n+        Assert.assertEquals(Integer.valueOf(\"3600\"), accountResponse.getExpiresIn());\n+        Assert.assertEquals(Integer.valueOf(\"36000\"), accountResponse.getRefreshExpiresIn());\n+        Assert.assertEquals(\"read write trust\", accountResponse.getScope());\n+\n+\n+        Mockito.verify(httpURLConnection).setConnectTimeout(60000);\n+        Mockito.verify(httpURLConnection).setReadTimeout(60000);\n+\n+        String requestParams = \"&grant_type=\" + AccountHelper.OAUTH.GRANT_TYPE.PASSWORD + \"&username=\" + TEST_USERNAME + \"&password=\" + TEST_PASSWORD + \"&client_id=\" + TEST_CLIENT_ID + \"&client_secret=\" + TEST_CLIENT_SECRET;\n+\n+        Mockito.verify(httpURLConnection).setFixedLengthStreamingMode(requestParams.getBytes().length);\n+        Mockito.verify(httpURLConnection).setDoOutput(true);\n+        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n+        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(\"charset\", \"utf-8\");\n+        Mockito.verify(httpURLConnection).setRequestProperty(ArgumentMatchers.eq(\"Content-Length\"), ArgumentMatchers.anyString());\n+        Mockito.verify(httpURLConnection).setUseCaches(false);\n+        final String base64Auth = BaseEncoding.base64().encode(new String(TEST_CLIENT_ID + \":\" + TEST_CLIENT_SECRET).getBytes());\n+        Mockito.verify(httpURLConnection).setRequestProperty(AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BASIC + \" \" + base64Auth);\n+        Mockito.verify(httpURLConnection).setInstanceFollowRedirects(false);\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectResponseForBadRequest() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_BAD_REQUEST).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_BAD_REQUEST_SERVER_RESPONSE);\n+\n+        AccountResponse accountResponse = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+\n+        Assert.assertNotNull(accountResponse);\n+        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getStatus());\n+        Assert.assertNotNull(accountResponse.getAccountError());\n+        Assert.assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, accountResponse.getAccountError().getStatusCode());\n+        Assert.assertEquals(\"Code not valid\", accountResponse.getAccountError().getErrorDescription());\n+        Assert.assertEquals(\"invalid_grant\", accountResponse.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForMalformedURL() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForSocketTimeout() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.TIMEOUT.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsCorrectAccountErrorResponseForIOException() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+\n+        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(0, response.getAccountError().getStatusCode());\n+        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateReturnsNonNullAccountErrorResponseForRandomException() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_TOKEN_ENDPOINT);\n+        Mockito.doReturn(TEST_CLIENT_ID).when(syncConfiguration).getOauthClientId();\n+        Mockito.doReturn(TEST_CLIENT_SECRET).when(syncConfiguration).getOauthClientSecret();\n+\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(TOKEN_INTERNAL_SERVER_RESPONSE);\n+\n+        AccountResponse response = httpAgentSpy.oauth2authenticate(TEST_USERNAME, TEST_PASSWORD, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, TEST_TOKEN_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.getAccountError());\n+        Assert.assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, response.getAccountError().getStatusCode());\n+        Assert.assertNotNull(response.getAccountError().getError());\n+        Assert.assertEquals(\"Oops, something went wrong\", response.getAccountError().getErrorDescription());\n+        Assert.assertEquals(\"internal server error\", response.getAccountError().getError());\n+\n+    }\n+\n+    @Test\n+    public void testFetchOAuthConfigurationProcessesConfigurationResponseCorrectly() throws Exception {\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(\"https://my-server.com/\").when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n+\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(OAUTH_CONFIGURATION_SERVER_RESPONSE);\n+\n+        AccountConfiguration accountConfiguration = httpAgentSpy.fetchOAuthConfiguration();\n+        Assert.assertNotNull(accountConfiguration);\n+        Assert.assertEquals(\"https://my-server.com/oauth/auth\", accountConfiguration.getAuthorizationEndpoint());\n+        Assert.assertEquals(\"https://my-server.com/oauth/issuer\", accountConfiguration.getIssuerEndpoint());\n+        Assert.assertEquals(TEST_TOKEN_ENDPOINT, accountConfiguration.getTokenEndpoint());\n+\n+        List<String> grantTypes = accountConfiguration.getGrantTypesSupported();\n+        Assert.assertNotNull(grantTypes);\n+        Assert.assertEquals(\"authorization code\", grantTypes.get(0));\n+        Assert.assertEquals(\"implicit\", grantTypes.get(1));\n+        Assert.assertEquals(\"password\", grantTypes.get(2));\n+    }\n+\n+    @Test\n+    public void testFetchInvalidatesCacheIfUnauthorizedAndReturnsCorrectResponse() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Response<String> response = httpAgentSpy.fetch(SECURE_RESOURCE_ENDPOINT);\n+        Assert.assertNotNull(response);\n+        Assert.assertEquals(ResponseStatus.valueOf(\"success\"), response.status());\n+        Assert.assertEquals(FETCH_DATA_REQUEST_SERVER_RESPONSE, response.payload());\n+\n+        PowerMockito.verifyStatic(AccountHelper.class);\n+        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testPostInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).generatePostRequest(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n+\n+        httpAgentSpy.post(SECURE_RESOURCE_ENDPOINT, SAMPLE_POST_REQUEST_PAYLOAD);\n+\n+        Mockito.verify(httpAgentSpy).invalidateExpiredCachedAccessToken();\n+\n+    }\n+\n+    @Test\n+    public void testFetchWithCredentialsInvokesInvalidateCacheIfUnauthorizedOnFirstAttempt() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(SECURE_RESOURCE_ENDPOINT);\n+        Mockito.doReturn(errorStream).when(httpURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(FETCH_DATA_REQUEST_SERVER_RESPONSE);\n+\n+        PowerMockito.mockStatic(AccountHelper.class);\n+        PowerMockito.when(AccountHelper.getCachedOAuthToken(accountAuthenticatorXml.getAccountType(), AccountHelper.TOKEN_TYPE.PROVIDER)).thenReturn(SAMPLE_TEST_TOKEN);\n+\n+        Response<String> response = httpAgentSpy.fetchWithCredentials(SECURE_RESOURCE_ENDPOINT, SAMPLE_TEST_TOKEN);\n+        Assert.assertNotNull(response);\n+\n+        PowerMockito.verifyStatic(AccountHelper.class);\n+        AccountHelper.invalidateAuthToken(accountAuthenticatorXml.getAccountType(), SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithCorrectParams() throws Exception {\n+\n+        Mockito.doReturn(sharedPreferences).when(allSharedPreferences).getPreferences();\n+        Mockito.doReturn(TEST_TOKEN_ENDPOINT).when(sharedPreferences).getString(AccountHelper.CONFIGURATION_CONSTANTS.TOKEN_ENDPOINT_URL, \"\");\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        AccountResponse accountResponse = Mockito.mock(AccountResponse.class);\n+\n+        Mockito.doReturn(accountResponse).when(httpAgentSpy).oauth2authenticateCore(ArgumentMatchers.any(StringBuilder.class), ArgumentMatchers.anyString(), ArgumentMatchers.anyString());\n+\n+        ArgumentCaptor<StringBuilder> requestParamStringBuilder = ArgumentCaptor.forClass(StringBuilder.class);\n+        ArgumentCaptor<String> grantType = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> tokenEndPoint = ArgumentCaptor.forClass(String.class);\n+\n+        httpAgentSpy.oauth2authenticateRefreshToken(SAMPLE_REFRESH_TOKEN);\n+\n+        Mockito.verify(httpAgentSpy).oauth2authenticateCore(requestParamStringBuilder.capture(), grantType.capture(), tokenEndPoint.capture());\n+\n+        String capturedRefreshTokenRequestValue = requestParamStringBuilder.getValue().toString();\n+        String capturedGrantTypeValue = grantType.getValue();\n+        String capturedTokenEndpointValue = tokenEndPoint.getValue();\n+\n+        Assert.assertEquals(\"&refresh_token=\" + SAMPLE_REFRESH_TOKEN, capturedRefreshTokenRequestValue);\n+\n+        Assert.assertEquals(AccountHelper.OAUTH.GRANT_TYPE.REFRESH_TOKEN, capturedGrantTypeValue);\n+        Assert.assertEquals(TEST_TOKEN_ENDPOINT, capturedTokenEndpointValue);\n+\n+\n+    }\n }\n", "next_change": {"commit": "9de9d9410c57ae743de96e3809ac93d603c45cfc", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex 9782a9e7..c7683921 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -560,4 +566,342 @@ public class HTTPAgentTest {\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Dristhi login failed. Try later\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNKNOWN_RESPONSE\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"No internet connection. Please ensure data connectivity\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"NO_INTERNET_CONNECTIVITY\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsTrueForAuthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertTrue(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsFalseForUnauthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(\"https://my-server.com/user-details?anm-id=\" + TEST_USERNAME);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertFalse(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsUnauthorizedResponse() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.message());\n+        Assert.assertNull(response.payload());\n+        Assert.assertEquals(\"Please check the credentials\", response.message());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsErrorResponseForMalformedURL() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForSocketTimeout() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseErrorResponseForIOException() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new IOException()).when(httpURLConnection).getResponseCode();\n+\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.NO_INTERNET_CONNECTIVITY.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectResponseForRandomServerError() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Oops, something went wrong\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n+\n+    }\n }\n", "next_change": {"commit": "599b4c297881030dad9f38a6f29c13bcc95f8bc9", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c7683921..be37a270 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -904,4 +921,96 @@ public class HTTPAgentTest {\n         Assert.assertEquals(\"CUSTOM_SERVER_RESPONSE\", loginResponse.name());\n \n     }\n+\n+    @Test\n+    public void testDownloadFromUrl() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(bufferedInputStream).when(httpAgentSpy).getBufferedInputStream(inputStream);\n+        Mockito.doReturn(1985).when(bufferedInputStream).available();\n+        Mockito.doReturn(-1).when(bufferedInputStream).read();\n+\n+        Mockito.doReturn(fileOutputStream).when(httpAgentSpy).getFileOutputStream(file);\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download successful\", downloadStatus.displayValue());\n+\n+        Mockito.verify(fileOutputStream).write(ArgumentMatchers.any(byte[].class));\n+        Mockito.verify(fileOutputStream).flush();\n+        Mockito.verify(fileOutputStream).close();\n+\n+    }\n+\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfNothingDownloaded() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Nothing downloaded.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfIOExceptionThrown() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(false).when(dirFile).exists();\n+        Mockito.doReturn(true).when(dirFile).mkdirs();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download failed.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n+    @Test\n+    public void testDownloadFromUrlReturnsCorrectResponseIfConnectionStatusIsNOT200() throws Exception {\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(dirFile).when(httpAgentSpy).getSDCardDownloadPath();\n+        Mockito.doReturn(file).when(httpAgentSpy).getFile(TEST_FILE_NAME, dirFile);\n+        Mockito.doReturn(true).when(dirFile).exists();\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_DOWNLOAD_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_NOT_FOUND).when(httpsURLConnection).getResponseCode();\n+\n+        DownloadStatus downloadStatus = httpAgentSpy.downloadFromUrl(TEST_IMAGE_DOWNLOAD_ENDPOINT, TEST_FILE_NAME);\n+        Assert.assertNotNull(downloadStatus);\n+        Assert.assertEquals(\"Download failed.\", downloadStatus.displayValue());\n+\n+\n+    }\n+\n }\n", "next_change": {"commit": "658aef8e2b4a61f2563a329e6252347327abc472", "changed_code": [{"header": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex be37a270..bc5de287 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n", "chunk": "@@ -1013,4 +1026,77 @@ public class HTTPAgentTest {\n \n     }\n \n+    @Test\n+    public void testHttpImagePostConfiguresConnectionRequestCorrectly() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(TEST_IMAGE_UPLOAD_ENDPOINT);\n+        Mockito.doReturn(outputStream).when(httpURLConnection).getOutputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+        Mockito.doReturn(file).when(httpAgentSpy).getDownloadFolder(TEST_IMAGE_FILE_PATH);\n+        Mockito.doReturn(fileInputStream).when(httpAgentSpy).getFileInputStream(file);\n+        Mockito.doReturn(inputStream).when(httpURLConnection).getInputStream();\n+        Mockito.doReturn(-1).when(fileInputStream).read(ArgumentMatchers.any(byte[].class));\n+\n+        Mockito.doReturn(printWriter).when(httpAgentSpy).getPrintWriter(outputStream);\n+        Mockito.doReturn(\"myFileName\").when(file).getName();\n+        Mockito.doReturn(printWriter).when(printWriter).append(ArgumentMatchers.any(CharSequence.class));\n+\n+        ProfileImage profileImage = new ProfileImage();\n+        profileImage.setFilepath(TEST_IMAGE_FILE_PATH);\n+        profileImage.setAnmId(TEST_ANM_ID);\n+        profileImage.setEntityID(TEST_BASE_ENTITY_ID);\n+        profileImage.setContenttype(\"png\");\n+        profileImage.setFilecategory(\"coverpic\");\n+\n+        httpAgentSpy.httpImagePost(TEST_IMAGE_UPLOAD_ENDPOINT, profileImage);\n+\n+        Mockito.verify(httpURLConnection).setDoOutput(true);\n+        Mockito.verify(httpURLConnection).setDoInput(true);\n+        Mockito.verify(httpURLConnection).setRequestMethod(\"POST\");\n+\n+        ArgumentCaptor<String> requestAttributeCaptor = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> requestValueCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpURLConnection, Mockito.times(2)).setRequestProperty(requestAttributeCaptor.capture(), requestValueCaptor.capture());\n+        List<String> requestAttributeCaptorValues = requestAttributeCaptor.getAllValues();\n+        List<String> requestValueCaptorValues = requestValueCaptor.getAllValues();\n+\n+        Assert.assertEquals(\"Authorization\", requestAttributeCaptorValues.get(0));\n+        Assert.assertEquals(\"Bearer \" + SAMPLE_TEST_TOKEN, requestValueCaptorValues.get(0));\n+\n+        Assert.assertEquals(\"Content-Type\", requestAttributeCaptorValues.get(1));\n+        Assert.assertTrue(requestValueCaptorValues.get(1).startsWith(\"multipart/form-data;boundary=\"));\n+\n+        Mockito.verify(httpURLConnection).setUseCaches(false);\n+        Mockito.verify(httpURLConnection).setChunkedStreamingMode(HTTPAgent.FILE_UPLOAD_CHUNK_SIZE_BYTES);\n+\n+        //Attach Image\n+        Mockito.verify(httpAgentSpy).getDownloadFolder(TEST_IMAGE_FILE_PATH);\n+\n+        ArgumentCaptor<CharSequence> printWriterCaptor = ArgumentCaptor.forClass(CharSequence.class);\n+\n+        Mockito.verify(printWriter, Mockito.times(49)).append(printWriterCaptor.capture());\n+\n+        List<CharSequence> printWriterAppendedValues = printWriterCaptor.getAllValues();\n+\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"myFileName\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"anm-id\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"entity-id\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"file-category\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Disposition: form-data; name=\\\"content-type\\\"\"));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getAnmId()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getEntityID()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getFilecategory()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(profileImage.getContenttype()));\n+        Assert.assertTrue(printWriterAppendedValues.contains(\"Content-Type: text/plain; charset=UTF-8\"));\n+\n+        Mockito.verify(printWriter, Mockito.times(7)).flush();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b59b3d82bc4e845822a9d33c55ddd8b1f40f3a17", "message": "Merge commit", "committedDate": null}, {"oid": "e8382b2ab111640dddb25b969fc2e50ce9e08e2c", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Refactor HTTPAgent Fix failing unit tests"}, {"oid": "721420632c4e2d097074b390ea117706214f8f98", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Code clean up"}, {"oid": "47ffabfeeeb9df0d17b2d3c5650f3cba776eaafe", "committedDate": "2020-08-05 10:06:53 +0300", "message": "Update OAuth implementation - Refactor refresh token and verify login logic - Add support for Spring OAuth Fallback if keycloak not supported"}, {"oid": "ba23de2dd455fa9716bb1fa6445558f94f09c0f6", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Optimization, Refactor and unit testing - Optimize upstream data processing for file uploads - Refactor for maintainability - Unit testing"}, {"oid": "9de9d9410c57ae743de96e3809ac93d603c45cfc", "committedDate": "2020-08-05 10:07:31 +0300", "message": "HTTPAgent Unit tests - Add more unit test cases"}, {"oid": "f91d166537991efd386cc9d5a64272f181f2e25f", "committedDate": "2020-08-05 10:07:31 +0300", "message": "CI Configuration updates - Add codacy configuration file - Rename test case"}, {"oid": "63a7ca66f80253b5fd8157489b551f45f466f1d9", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Fixed/Implment code review change requests on HTTP Agent test - Renamed test case - Refactored test case logic"}, {"oid": "599b4c297881030dad9f38a6f29c13bcc95f8bc9", "committedDate": "2020-08-05 10:07:31 +0300", "message": "Add unit tests - Add unit tests for HTTPAgent.downloadFormUrl"}, {"oid": "c9c4a0df78c261f17a269aa253bb48cb43e18d95", "committedDate": "2020-08-05 10:08:46 +0300", "message": "Refactor client core : Remove password type String - Remove type String for password processing to mitigates against the heap dump attack vector exposed by Java String type - Fix unit tests"}, {"oid": "b09d8613fc02fec023ee63634ac5b78e43501e71", "committedDate": "2020-08-05 10:08:46 +0300", "message": "Fix unit test"}, {"oid": "658aef8e2b4a61f2563a329e6252347327abc472", "committedDate": "2020-08-05 10:08:46 +0300", "message": "HTTP Agent unit tests - Testing Tuesday - Add unit test for http image post/ upload"}, {"oid": "c2bbcc546fd46ef0326f4143f8f977e81911f696", "committedDate": "2020-08-05 10:12:04 +0300", "message": "Update Verify Authorization - Add backward compatibility for legacy implementation - Add unit tests - Fix codacy issues"}, {"oid": "cd93e8acff40c94c78b6e72c41eda5566b4f0879", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Support for local Multi-tenancy - Refactor offline multi tenancy implementation for same Team Members - Adds support for No need to remotely authenticate if all team members had logged in device previously"}, {"oid": "d5aee185c2b11a5d63b608b3617d40d2c2f16e61", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Support for local Multi-tenancy - Refactor offline multi tenancy implementation for same Team Members - Adds support for No need to remotely authenticate if all team members had logged in device previously"}, {"oid": "8db5c2d92cc1beff5c1bff8f2e7fd50caff02d7e", "committedDate": "2020-08-05 10:13:04 +0300", "message": "Add unit tests - Add unit tests for startFormActivity with map metadata params - Refactor tests to use List interface instead of ArrayList class"}, {"oid": "e2ae820c03a52d4b063b0d001a70853a7da0ab95", "committedDate": "2020-08-05 10:14:53 +0300", "message": "Authentication with oauth2 credentials - Add conditional for sending client id and secret depending on whether keycloak is configured or not - Fix HTTPAgent unit tests"}, {"oid": "23832d0ca755d2479325cbcd572a97e37a84a0f3", "committedDate": "2020-08-05 11:12:50 +0300", "message": "Refactor authentication logic - Move credentials helper methods to helper class - Fix automatic logout an Account Manager account removal"}, {"oid": "88d9ef3544631a3eb59c692340995e7008ccf998", "committedDate": "2020-11-27 09:50:56 +0300", "message": "use content type to check existence"}, {"oid": "f45748750b0cecea999d4b1a501477bdd52a6e5a", "committedDate": "2020-11-27 12:41:18 +0300", "message": "use response content type"}, {"oid": "3c54d3fa4fba0facdb7c7927fdcf793b83d7d37c", "committedDate": "2021-02-23 12:48:03 +0300", "message": "Update unit test"}, {"oid": "6a1e019857fa51779ca688d63912616d22bff1b8", "committedDate": "2021-02-24 20:23:09 +0300", "message": "Update unit tests"}, {"oid": "65220c8b614c622a073ec45285c9b42928ea183d", "committedDate": "2022-03-29 14:13:00 +0300", "message": "Rename client core module"}]}, {"oid": "2d5385feaba9763803f9da56aebc84e440285e9d", "url": "https://github.com/opensrp/opensrp-client-core/commit/2d5385feaba9763803f9da56aebc84e440285e9d", "message": "Fixed/Implment code review change requests on HTTP Agent test\n- Renamed test case\n- Refactored test case logic", "committedDate": "2020-06-03T09:54:58Z", "type": "commit"}, {"oid": "2d5385feaba9763803f9da56aebc84e440285e9d", "url": "https://github.com/opensrp/opensrp-client-core/commit/2d5385feaba9763803f9da56aebc84e440285e9d", "message": "Fixed/Implment code review change requests on HTTP Agent test\n- Renamed test case\n- Refactored test case logic", "committedDate": "2020-06-03T09:54:58Z", "type": "forcePushed"}]}