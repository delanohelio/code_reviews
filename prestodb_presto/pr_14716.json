{"pr_number": 14716, "pr_title": "Fix artificially high queued query metrics", "pr_author": "jeremy-degroot", "pr_createdAt": "2020-06-24T19:09:15Z", "pr_url": "https://github.com/prestodb/presto/pull/14716", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNDIxMw==", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445124213", "body": "We don't print to console", "bodyText": "We don't print to console", "bodyHTML": "<p dir=\"auto\">We don't print to console</p>", "author": "tdcmeehan", "createdAt": "2020-06-24T19:33:45Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "diffHunk": "@@ -90,6 +92,39 @@ public void testFailQuery()\n         assertEquals(queryInfo.getErrorCode(), GENERIC_INTERNAL_ERROR.toErrorCode());\n         assertNotNull(queryInfo.getFailureInfo());\n         assertEquals(queryInfo.getFailureInfo().getMessage(), \"mock exception\");\n+        assertEquals(0, queryManager.getStats().getQueuedQueries());\n+    }\n+\n+    @Test(timeOut = 60_000L)\n+    public void testFailQueryPrerun()\n+            throws Exception\n+    {\n+        DispatchManager dispatchManager = queryRunner.getCoordinator().getDispatchManager();\n+        QueryId queryId = dispatchManager.createQueryId();\n+        dispatchManager.createQuery(\n+                queryId,\n+                \"slug\",\n+                new TestingSessionContext(TEST_SESSION),\n+                \"SELECT * FROM lineitem\")\n+                .get();\n+\n+        // wait until it's admitted but fail it before it starts\n+        while (true) {\n+            QueryState state = dispatchManager.getQueryInfo(queryId).getState();\n+            if (state.ordinal() >= RUNNING.ordinal()) {\n+                fail(\"unexpected query state: \" + state);\n+            }\n+            if (state.ordinal() >= DISPATCHING.ordinal()) {\n+                System.out.println(\"Breaking on state:\" + state);", "originalCommit": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA3Nw==", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445125077", "body": "Also add a check here to make sure we're not killing an already-running query.", "bodyText": "Also add a check here to make sure we're not killing an already-running query.", "bodyHTML": "<p dir=\"auto\">Also add a check here to make sure we're not killing an already-running query.</p>", "author": "tdcmeehan", "createdAt": "2020-06-24T19:35:21Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "diffHunk": "@@ -90,6 +92,39 @@ public void testFailQuery()\n         assertEquals(queryInfo.getErrorCode(), GENERIC_INTERNAL_ERROR.toErrorCode());\n         assertNotNull(queryInfo.getFailureInfo());\n         assertEquals(queryInfo.getFailureInfo().getMessage(), \"mock exception\");\n+        assertEquals(0, queryManager.getStats().getQueuedQueries());\n+    }\n+\n+    @Test(timeOut = 60_000L)\n+    public void testFailQueryPrerun()\n+            throws Exception\n+    {\n+        DispatchManager dispatchManager = queryRunner.getCoordinator().getDispatchManager();\n+        QueryId queryId = dispatchManager.createQueryId();\n+        dispatchManager.createQuery(\n+                queryId,\n+                \"slug\",\n+                new TestingSessionContext(TEST_SESSION),\n+                \"SELECT * FROM lineitem\")\n+                .get();\n+\n+        // wait until it's admitted but fail it before it starts\n+        while (true) {\n+            QueryState state = dispatchManager.getQueryInfo(queryId).getState();\n+            if (state.ordinal() >= RUNNING.ordinal()) {\n+                fail(\"unexpected query state: \" + state);\n+            }\n+            if (state.ordinal() >= DISPATCHING.ordinal()) {\n+                System.out.println(\"Breaking on state:\" + state);\n+                break;\n+            }\n+            Thread.sleep(10);\n+        }\n+\n+        // cancel query\n+        QueryManager queryManager = queryRunner.getCoordinator().getQueryManager();\n+        queryManager.failQuery(queryId, new PrestoException(GENERIC_USER_ERROR, \"mock exception\"));", "originalCommit": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMzkwNw==", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445133907", "bodyText": "Not sure why that should be necessary; the test will fail on line 115 if it gets as far as RUNNING", "author": "jeremy-degroot", "createdAt": "2020-06-24T19:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNTIzMA==", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445135230", "bodyText": "Query execution is proceeding in the background, so this is a last-moment check that the presumptions still hold.", "author": "tdcmeehan", "createdAt": "2020-06-24T19:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNjQ5NA==", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445136494", "bodyText": "Fair enough", "author": "jeremy-degroot", "createdAt": "2020-06-24T19:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTMwNg==", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445125306", "body": "```suggestion\r\n                    } \r\n                    else {\r\n                        queryDequeued();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                } else {\n          \n          \n            \n                                    queryDequeued();\n          \n          \n            \n                                } \n          \n          \n            \n                                else {\n          \n          \n            \n                                    queryDequeued();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"179\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"180\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        queryDequeued();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"179\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    } </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"180\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"181\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        queryDequeued();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tdcmeehan", "createdAt": "2020-06-24T19:35:50Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerStats.java", "diffHunk": "@@ -169,6 +173,8 @@ public void stateChanged(QueryState newValue)\n                     stopped = true;\n                     if (started) {\n                         queryStopped();\n+                    } else {\n+                        queryDequeued();", "originalCommit": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTUyNw==", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445125527", "body": "```suggestion\r\n\r\n    private void queryDequeued()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void queryDequeued()\n          \n          \n            \n            \n          \n          \n            \n                private void queryDequeued()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"87\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">    </span><span class=\"pl-k x\">private</span><span class=\"x\"> </span><span class=\"pl-k x\">void</span><span class=\"x x-last\"> queryDequeued()</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"87\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"88\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> queryDequeued()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tdcmeehan", "createdAt": "2020-06-24T19:36:15Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerStats.java", "diffHunk": "@@ -76,13 +76,17 @@ private void queryStarted()\n     {\n         startedQueries.update(1);\n         runningQueries.incrementAndGet();\n-        queuedQueries.decrementAndGet();\n+        queryDequeued();\n     }\n \n     private void queryStopped()\n     {\n         runningQueries.decrementAndGet();\n     }\n+    private void queryDequeued()", "originalCommit": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b42a15627925846fe74c16b5849e3abbc0e75f5c", "url": "https://github.com/prestodb/presto/commit/b42a15627925846fe74c16b5849e3abbc0e75f5c", "message": "Fix artificially high queued query metrics", "committedDate": "2020-06-26T17:55:04Z", "type": "forcePushed"}, {"oid": "681a5db573a8b965d4c94d82fcf8aae81f7c4164", "url": "https://github.com/prestodb/presto/commit/681a5db573a8b965d4c94d82fcf8aae81f7c4164", "message": "Fix artificially high queued query metrics", "committedDate": "2020-06-26T18:08:04Z", "type": "forcePushed"}, {"oid": "bc62cdd0b53aa9070f3cb6f59b53263b61d8d2f7", "url": "https://github.com/prestodb/presto/commit/bc62cdd0b53aa9070f3cb6f59b53263b61d8d2f7", "message": "Fix artificially high queued query metrics", "committedDate": "2020-06-26T21:13:20Z", "type": "commit"}, {"oid": "bc62cdd0b53aa9070f3cb6f59b53263b61d8d2f7", "url": "https://github.com/prestodb/presto/commit/bc62cdd0b53aa9070f3cb6f59b53263b61d8d2f7", "message": "Fix artificially high queued query metrics", "committedDate": "2020-06-26T21:13:20Z", "type": "forcePushed"}]}