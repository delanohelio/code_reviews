{"pr_number": 15141, "pr_title": "Add test infrastructure to run queries using native workers", "pr_author": "mbasmanova", "pr_createdAt": "2020-09-08T23:56:14Z", "pr_url": "https://github.com/prestodb/presto/pull/15141", "timeline": [{"oid": "7f15e975a794f4f608caaf92c298bfe8e9b5a174", "url": "https://github.com/prestodb/presto/commit/7f15e975a794f4f608caaf92c298bfe8e9b5a174", "message": "Run with native worker", "committedDate": "2020-09-09T00:10:21Z", "type": "forcePushed"}, {"oid": "c959c386ddd015103d10b18789f4e343345734c8", "url": "https://github.com/prestodb/presto/commit/c959c386ddd015103d10b18789f4e343345734c8", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally.", "committedDate": "2020-09-09T00:21:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1OTgyOQ==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485759829", "body": "Should we call `nativeWorker*` => `externalWorker*`? ", "bodyText": "Should we call nativeWorker* => externalWorker*?", "bodyHTML": "<p dir=\"auto\">Should we call <code>nativeWorker*</code> =&gt; <code>externalWorker*</code>?</p>", "author": "tdcmeehan", "createdAt": "2020-09-09T16:38:19Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2NjI5Mg==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485766292", "body": "It feels like we can fairly easily squash these three checks on `nativeWorkerLauncher` into one?", "bodyText": "It feels like we can fairly easily squash these three checks on nativeWorkerLauncher into one?", "bodyHTML": "<p dir=\"auto\">It feels like we can fairly easily squash these three checks on <code>nativeWorkerLauncher</code> into one?</p>", "author": "tdcmeehan", "createdAt": "2020-09-09T16:46:02Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {\n+                ImmutableList.Builder<Process> nativeWorkersBuilder = ImmutableList.builder();\n+                for (int i = 0; i < nodeCount; i++) {\n+                    nativeWorkersBuilder.add(nativeWorkerLauncher.get().apply(i, discoveryUrl));\n+                }\n+                nativeWorkers = nativeWorkersBuilder.build();\n+                closer.register(() -> {\n+                    for (Process nativeWorker : nativeWorkers) {\n+                        nativeWorker.destroyForcibly();\n+                    }\n+                });\n+            }\n+            else {\n+                nativeWorkers = ImmutableList.of();\n+            }\n \n             ImmutableList.Builder<TestingPrestoServer> servers = ImmutableList.builder();\n-\n-            for (int i = 1; i < nodeCount; i++) {\n-                TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryServer.getBaseUrl(), false, extraProperties, parserOptions, environment, baseDataDir));\n-                servers.add(worker);\n+            if (!nativeWorkerLauncher.isPresent()) {", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODE4Ng==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768186", "body": "```suggestion\r\n                                    format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());\n          \n          \n            \n                                                format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                    <span class=\"pl-smi x x-first\">String</span><span class=\"pl-k x x-last\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>discovery.uri=%s<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, discoveryUrl)<span class=\"pl-k\">.</span>getBytes());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                    format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>discovery.uri=%s<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, discoveryUrl)<span class=\"pl-k\">.</span>getBytes());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tdcmeehan", "createdAt": "2020-09-09T16:48:25Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),\n+                                    String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODMzNw==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768337", "body": "```suggestion\r\n                Optional.of((workerIndex, discoveryUri) -> {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Optional.of((workerIndex, discoveryUrl) -> {\n          \n          \n            \n                            Optional.of((workerIndex, discoveryUri) -> {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of((workerIndex, <span class=\"x x-first x-last\">discoveryUrl</span>) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of((workerIndex, <span class=\"x x-first x-last\">discoveryUri</span>) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tdcmeehan", "createdAt": "2020-09-09T16:48:34Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODkwNg==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768906", "body": "Any reason we can't do this just once outside of the lambda?", "bodyText": "Any reason we can't do this just once outside of the lambda?", "bodyHTML": "<p dir=\"auto\">Any reason we can't do this just once outside of the lambda?</p>", "author": "tdcmeehan", "createdAt": "2020-09-09T16:49:19Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzk4MQ==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485837981", "bodyText": "@tdcmeehan We need discoveryUri which is available only from within the callback.", "author": "mbasmanova", "createdAt": "2020-09-09T18:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTk3Mg==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485769972", "body": "Rather than presuming the existence of `/tmp`, can we just use `Files.createTempDirectory(prefix);`?  We could also tag the prefix with the test class name of this test (for discoverability, in case it accidentally creates too many local temp directories).", "bodyText": "Rather than presuming the existence of /tmp, can we just use Files.createTempDirectory(prefix);?  We could also tag the prefix with the test class name of this test (for discoverability, in case it accidentally creates too many local temp directories).", "bodyHTML": "<p dir=\"auto\">Rather than presuming the existence of <code>/tmp</code>, can we just use <code>Files.createTempDirectory(prefix);</code>?  We could also tag the prefix with the test class name of this test (for discoverability, in case it accidentally creates too many local temp directories).</p>", "author": "tdcmeehan", "createdAt": "2020-09-09T16:50:37Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NjY1NQ==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485776655", "body": "This is a small nit, but I think it would be preferable to make it clear these come from the environment, but having two methods, one which takes these as arguments, and an outer one which passes them in from the environment.", "bodyText": "This is a small nit, but I think it would be preferable to make it clear these come from the environment, but having two methods, one which takes these as arguments, and an outer one which passes them in from the environment.", "bodyHTML": "<p dir=\"auto\">This is a small nit, but I think it would be preferable to make it clear these come from the environment, but having two methods, one which takes these as arguments, and an outer one which passes them in from the environment.</p>", "author": "tdcmeehan", "createdAt": "2020-09-09T16:58:10Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485777006", "body": "Maybe annotate this as `@Experimental` so people who are unawares don't try to run it locally (I presume there's no well known way to get this to work right now?)", "bodyText": "Maybe annotate this as @Experimental so people who are unawares don't try to run it locally (I presume there's no well known way to get this to work right now?)", "bodyHTML": "<p dir=\"auto\">Maybe annotate this as <code>@Experimental</code> so people who are unawares don't try to run it locally (I presume there's no well known way to get this to work right now?)</p>", "author": "tdcmeehan", "createdAt": "2020-09-09T16:58:44Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MDkyMQ==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485840921", "bodyText": "Would you like me to use com.facebook.presto.spi.api.Experimental or something else? Anyone can run it locally, but they would need to build native presto worker first.", "author": "mbasmanova", "createdAt": "2020-09-09T18:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTI0OQ==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485845249", "bodyText": "When I look at a Testng test in our codebase, I have the expectation of simply being able to run it in IntelliJ.  Because the setup here is more complicated and, as I understand it, requires some external setup which isn't captured or documented in this test, I'm just trying to think of a way to make it clear to people that you can't just do that.\nIdeally, it would be really nice to develop some tools to run these locally, presuming you have Docker or some containerization software locally running on an Intel CPU.  But that sounds really complicated, so I just though that the Experimental annotation from SPI would do.  Open to other suggestions to make it clear (perhaps also detailed comments explaining how to run locally).", "author": "tdcmeehan", "createdAt": "2020-09-09T19:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjE0NQ==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485846145", "bodyText": "I'll add @experimental from spi. I'd be happy to add instructions, but they require checking out private GitHub repo.", "author": "mbasmanova", "createdAt": "2020-09-09T19:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485780263", "body": "It would be nice to have a default which just loads up Presto Java workers.  That would ensure this test actually works, and potentially spot and document discrepancies between Java vs. custom workers. (Also, it would allow us to include at least that version in our CI system.)", "bodyText": "It would be nice to have a default which just loads up Presto Java workers.  That would ensure this test actually works, and potentially spot and document discrepancies between Java vs. custom workers. (Also, it would allow us to include at least that version in our CI system.)", "bodyHTML": "<p dir=\"auto\">It would be nice to have a default which just loads up Presto Java workers.  That would ensure this test actually works, and potentially spot and document discrepancies between Java vs. custom workers. (Also, it would allow us to include at least that version in our CI system.)</p>", "author": "tdcmeehan", "createdAt": "2020-09-09T17:04:10Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MTgwOA==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485841808", "bodyText": "I'm not sure I understand this suggestion. The queries are very simple and there is not much benefit in running them against Java workers. The verification is happening using H2 just like any other test, hence, there should not be any concern about the test's correctness. Am I missing something?", "author": "mbasmanova", "createdAt": "2020-09-09T18:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjE5OA==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485846198", "bodyText": "Hmm, I missed this, how is verification happening with H2?  My only point was, if we don't want to introduce a dependency from PrestoDB (Java source) to C++ native worker source which exists somewhere else, but still want to make sure that future tests are sane, it would be nice to have a default, and an easy way to accomplish that would have the default be a vanilla Java worker to serve as a baseline.  Not sure how H2 verification is happening in this test.  The default would test the native worker launcher only.", "author": "tdcmeehan", "createdAt": "2020-09-09T19:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MDI5Ng==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485870296", "bodyText": "assertQuery(\"SELECT * FROM nation\"); runs the query using queryRunner (native workers) and H2, then compares the results.", "author": "mbasmanova", "createdAt": "2020-09-09T19:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNzA0Mg==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485817042", "body": "Maybe use `createTempDirectory`. Some OS doesn't have `/tmp` dir.", "bodyText": "Maybe use createTempDirectory. Some OS doesn't have /tmp dir.", "bodyHTML": "<p dir=\"auto\">Maybe use <code>createTempDirectory</code>. Some OS doesn't have <code>/tmp</code> dir.</p>", "author": "highker", "createdAt": "2020-09-09T18:09:04Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),\n+                                    String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());\n+                        }\n+                        return new ProcessBuilder(prestoServerPath, \"--logtostderr=1\", \"--v=1\")\n+                                .directory(Paths.get(\"/tmp\").toFile())", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTcwNg==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485819706", "body": "maybe just fail it hard and force the caller to set `\"node-scheduler.include-coordinator\", \"false\"`?", "bodyText": "maybe just fail it hard and force the caller to set \"node-scheduler.include-coordinator\", \"false\"?", "bodyHTML": "<p dir=\"auto\">maybe just fail it hard and force the caller to set <code>\"node-scheduler.include-coordinator\", \"false\"</code>?</p>", "author": "highker", "createdAt": "2020-09-09T18:14:14Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {\n+                ImmutableList.Builder<Process> nativeWorkersBuilder = ImmutableList.builder();\n+                for (int i = 0; i < nodeCount; i++) {\n+                    nativeWorkersBuilder.add(nativeWorkerLauncher.get().apply(i, discoveryUrl));\n+                }\n+                nativeWorkers = nativeWorkersBuilder.build();\n+                closer.register(() -> {\n+                    for (Process nativeWorker : nativeWorkers) {\n+                        nativeWorker.destroyForcibly();\n+                    }\n+                });\n+            }\n+            else {\n+                nativeWorkers = ImmutableList.of();\n+            }\n \n             ImmutableList.Builder<TestingPrestoServer> servers = ImmutableList.builder();\n-\n-            for (int i = 1; i < nodeCount; i++) {\n-                TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryServer.getBaseUrl(), false, extraProperties, parserOptions, environment, baseDataDir));\n-                servers.add(worker);\n+            if (!nativeWorkerLauncher.isPresent()) {\n+                for (int i = 1; i < nodeCount; i++) {\n+                    TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryUrl, false, extraProperties, parserOptions, environment, baseDataDir));\n+                    servers.add(worker);\n+                }\n             }\n \n             Map<String, String> extraCoordinatorProperties = new HashMap<>();\n+            if (nativeWorkerLauncher.isPresent()) {\n+                // Don't use coordinator as worker\n+                extraCoordinatorProperties.put(\"node-scheduler.include-coordinator\", \"false\");\n+            }", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MjM3NA==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485842374", "bodyText": "@highker Not sure I understand the suggestion. Would you like me to assert that coordinatorProperties include \"node-scheduler.include-coordinator\" with the value of \"false\"?", "author": "mbasmanova", "createdAt": "2020-09-09T18:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyMDQzMg==", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485820432", "body": "Move the first param to its own line", "bodyText": "Move the first param to its own line", "bodyHTML": "<p dir=\"auto\">Move the first param to its own line</p>", "author": "highker", "createdAt": "2020-09-09T18:15:34Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),", "originalCommit": "c959c386ddd015103d10b18789f4e343345734c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "703ea3e574c51ca54da82cfca3dfb84f60bfba34", "url": "https://github.com/prestodb/presto/commit/703ea3e574c51ca54da82cfca3dfb84f60bfba34", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally.", "committedDate": "2020-09-09T19:38:57Z", "type": "forcePushed"}, {"oid": "76946cb802b580fdb80fff9ed48dea826aef8538", "url": "https://github.com/prestodb/presto/commit/76946cb802b580fdb80fff9ed48dea826aef8538", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally.", "committedDate": "2020-09-09T20:30:36Z", "type": "commit"}, {"oid": "76946cb802b580fdb80fff9ed48dea826aef8538", "url": "https://github.com/prestodb/presto/commit/76946cb802b580fdb80fff9ed48dea826aef8538", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally.", "committedDate": "2020-09-09T20:30:36Z", "type": "forcePushed"}]}