{"pr_number": 157, "pr_title": "refactor(): Edits for sonarCloud critical code smells", "pr_author": "crowleySynopsys", "pr_createdAt": "2020-04-22T16:41:12Z", "pr_url": "https://github.com/blackducksoftware/synopsys-detect/pull/157", "timeline": [{"oid": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/0788cf2b50ad7f3ad05816a8079d1b1a62cff98a", "message": "refactor(): Edits for sonarCloud critical code smells", "committedDate": "2020-04-21T22:35:58Z", "type": "commit"}, {"oid": "96145f931c8de874260bb6cfe301a0ddb3b81394", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/96145f931c8de874260bb6cfe301a0ddb3b81394", "message": "fix(): Populated POLARIS_CLI_DEPRECATION_MESSAGE", "committedDate": "2020-04-22T18:45:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNTQzMg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413215432", "body": "I'd like to see this and it's calling method to return `Optional<SpringConfigurationPropertySource>` since we are explicitly returning `null` in some cases. If refactoring it now will cause a lot of changes can you put in a TODO?", "bodyText": "I'd like to see this and it's calling method to return Optional<SpringConfigurationPropertySource> since we are explicitly returning null in some cases. If refactoring it now will cause a lot of changes can you put in a TODO?", "bodyHTML": "<p dir=\"auto\">I'd like to see this and it's calling method to return <code>Optional&lt;SpringConfigurationPropertySource&gt;</code> since we are explicitly returning <code>null</code> in some cases. If refactoring it now will cause a lot of changes can you put in a TODO?</p>", "author": "JakeMathews", "createdAt": "2020-04-22T18:22:45Z", "path": "configuration/src/main/java/com/synopsys/integration/configuration/source/SpringConfigurationPropertySource.java", "diffHunk": "@@ -85,6 +74,21 @@ public SpringConfigurationPropertySource(final String name, final IterableConfig\n \n     }\n \n+    private static SpringConfigurationPropertySource getPropertySource(ConfigurableEnvironment configurableEnvironment, boolean ignoreUnknown, ConfigurationPropertySource configurationPropertySource) {", "originalCommit": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMDM0MQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r414030341", "bodyText": "@JakeMathews to clarify, you'd want fromConfigurableEnvironment to return Optional<List> or List<Optional>?", "author": "crowleySynopsys", "createdAt": "2020-04-23T18:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NzEyMw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r414867123", "bodyText": "I'd want getPropertySource to return Optional<SpringConfigurationPropertySource> since that method could return null.", "author": "JakeMathews", "createdAt": "2020-04-24T21:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNTQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNjkxOQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413216919", "body": "I'd argue these sample application classes should be removed. @taikuukaits is there value in maintaining these?", "bodyText": "I'd argue these sample application classes should be removed. @taikuukaits is there value in maintaining these?", "bodyHTML": "<p dir=\"auto\">I'd argue these sample application classes should be removed. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/taikuukaits/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/taikuukaits\">@taikuukaits</a> is there value in maintaining these?</p>", "author": "JakeMathews", "createdAt": "2020-04-22T18:25:02Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/SingleDetectableApplication.java", "diffHunk": "@@ -49,7 +47,9 @@\n //This sample application will an example detectable tool and execute it against the current folder.\n public class SingleDetectableApplication {\n     public static void main(final String[] args) {\n-\n+        /*\n+            Empty main method\n+         */", "originalCommit": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0Mjg2Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413342862", "bodyText": "Sort of but we can get rid of them. The goal is to eventually make a full detectable library but we might not even end up using these for that.", "author": "taikuukaits", "createdAt": "2020-04-22T21:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNjkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNzU3Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413217572", "body": "With this many arguments, perhaps this needs more refactoring than just moving it to another method.", "bodyText": "With this many arguments, perhaps this needs more refactoring than just moving it to another method.", "bodyHTML": "<p dir=\"auto\">With this many arguments, perhaps this needs more refactoring than just moving it to another method.</p>", "author": "JakeMathews", "createdAt": "2020-04-22T18:26:03Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/file/impl/SimpleFileFinder.java", "diffHunk": "@@ -44,22 +44,28 @@\n         }\n         final File[] allFiles = directoryToSearch.listFiles();\n         if (allFiles != null) {\n-            for (final File file : allFiles) {\n-                final boolean matches = filenameFilter.accept(directoryToSearch, file.getName());\n-                if (matches) {\n-                    foundFiles.add(file);\n-                }\n-                if (!matches || findInsideMatchingDirectories) {\n-                    if (file.isDirectory() && !Files.isSymbolicLink(file.toPath())) {\n-                        foundFiles.addAll(findFiles(file, filenameFilter, depth - 1, findInsideMatchingDirectories));\n-                    }\n-                }\n-            }\n+            foundFiles.addAll(extractFileMathces(allFiles, directoryToSearch, filenameFilter, depth, findInsideMatchingDirectories));\n         }\n \n         return foundFiles;\n     }\n \n+    private List<File> extractFileMathces(final File[] allFiles, final File directoryToSearch, final FilenameFilter filenameFilter, final int depth, final boolean findInsideMatchingDirectories) {", "originalCommit": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxODY0Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413218646", "body": "Does this change the result of `toString()`?", "bodyText": "Does this change the result of toString()?", "bodyHTML": "<p dir=\"auto\">Does this change the result of <code>toString()</code>?</p>", "author": "JakeMathews", "createdAt": "2020-04-22T18:27:41Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/model/NugetContainer.java", "diffHunk": "@@ -56,6 +56,6 @@\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this, RecursiveToStringStyle.JSON_STYLE);\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);", "originalCommit": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5NzE3Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413297172", "bodyText": "No change", "author": "crowleySynopsys", "createdAt": "2020-04-22T20:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxODY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTYxNw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413235617", "body": "Doing this will cause us to iterate over every line multiple times. Yarn.lock files very easily exceed 20k lines. Not sure what the performance impact this will cause, but that's why there was one loop before that would continue if the line didn't matter.", "bodyText": "Doing this will cause us to iterate over every line multiple times. Yarn.lock files very easily exceed 20k lines. Not sure what the performance impact this will cause, but that's why there was one loop before that would continue if the line didn't matter.", "bodyHTML": "<p dir=\"auto\">Doing this will cause us to iterate over every line multiple times. Yarn.lock files very easily exceed 20k lines. Not sure what the performance impact this will cause, but that's why there was one loop before that would continue if the line didn't matter.</p>", "author": "JakeMathews", "createdAt": "2020-04-22T18:52:45Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockParser.java", "diffHunk": "@@ -73,6 +80,25 @@ public YarnLock parseYarnLock(final List<String> yarnLockFileAsList) {\n         return new YarnLock(entries);\n     }\n \n+    @NotNull\n+    private Integer getIndexOfFirstLevelZeroLine(final List<String> cleanedYarnLockFileAsList) {\n+        return cleanedYarnLockFileAsList\n+                   .stream()\n+                   .filter(this::isLevel0)\n+                   .findFirst()\n+                   .map(line -> cleanedYarnLockFileAsList.indexOf(line))\n+                   .orElse(-1);\n+    }\n+\n+    @NotNull\n+    private List<String> getCleaned(final List<String> yarnLockFileAsList) {\n+        return yarnLockFileAsList\n+                   .stream()\n+                   .filter(StringUtils::isNotBlank)\n+                   .filter(line -> !line.trim().startsWith(COMMENT_PREFIX))\n+                   .collect(Collectors.toList());\n+    }\n+", "originalCommit": "96145f931c8de874260bb6cfe301a0ddb3b81394", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMzEzOA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413333138", "bodyText": "Hmmm so this was the result of some pair refactoring I did with @ekerwin.  We both thought that this refactor was clearer as to what the class is actually doing when it parses, and is cognitively less complex.  The performance concern is justified, though.  Perhaps the impact of that needs to be investigated...", "author": "crowleySynopsys", "createdAt": "2020-04-22T21:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0NDMzMg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413344332", "bodyText": "I think lower cognitive complexity should be preferred unless performance has been demonstrated to be a problem.\nI don't like the method names, 'get' and 'set' should be reserved for getters and setters IMO. Something like filterCleanedLines or findIndexOfFirstLevelZeroLine would be preferred.", "author": "taikuukaits", "createdAt": "2020-04-22T21:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0NDc2OA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413344768", "bodyText": "I agree it's certainly easier to read. But yes I think further investigation is needed.", "author": "JakeMathews", "createdAt": "2020-04-22T21:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0MzUwOQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r414143509", "bodyText": "@JakeMathews just tried running Detect on projects with a 20,000+ line yarn.lock file and a 7 line yarn.lock file, respectively, and the run times were 11s and 6s, respectively", "author": "crowleySynopsys", "createdAt": "2020-04-23T21:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NjQxNw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r414866417", "bodyText": "We are good then.", "author": "JakeMathews", "createdAt": "2020-04-24T21:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNzIzNQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413237235", "body": "I think null may mean no user input here. Can you just verify the code calling this isn't expecting a null.", "bodyText": "I think null may mean no user input here. Can you just verify the code calling this isn't expecting a null.", "bodyHTML": "<p dir=\"auto\">I think null may mean no user input here. Can you just verify the code calling this isn't expecting a null.</p>", "author": "JakeMathews", "createdAt": "2020-04-22T18:55:11Z", "path": "src/main/java/com/synopsys/integration/detect/interactive/mode/InteractiveMode.java", "diffHunk": "@@ -108,7 +108,7 @@ public Boolean askYesOrNoWithMessage(final String question, final String message\n             attempts += 1;\n             printStream.println(\"Please answer yes or no.\");\n         }\n-        return null;", "originalCommit": "96145f931c8de874260bb6cfe301a0ddb3b81394", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNzcxMw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413337713", "bodyText": "When I looked at usages of AskYesOrNo, the only checks that are done are \"if ()\" which I feel like actually makes more sense with a boolean returned anyways", "author": "crowleySynopsys", "createdAt": "2020-04-22T21:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNzIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MDQ1NA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413240454", "body": "Why was this not converted to\r\n```suggestion\r\n            if (!detectorToolResult.getFailedDetectorTypes().isEmpty()) {\r\n```\r\nlike in DetectorEvaluator", "bodyText": "Why was this not converted to\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (detectorToolResult.getFailedDetectorTypes().size() > 0) {\n          \n          \n            \n                        if (!detectorToolResult.getFailedDetectorTypes().isEmpty()) {\n          \n      \n    \n    \n  \n\nlike in DetectorEvaluator", "bodyHTML": "<p dir=\"auto\">Why was this not converted to</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (detectorToolResult<span class=\"pl-k\">.</span>getFailedDetectorTypes()<span class=\"pl-k\">.</span><span class=\"x x-first\">size() </span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k x x-first x-last\">!</span>detectorToolResult<span class=\"pl-k\">.</span>getFailedDetectorTypes()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">isEmpty()</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">like in DetectorEvaluator</p>", "author": "JakeMathews", "createdAt": "2020-04-22T18:58:19Z", "path": "src/main/java/com/synopsys/integration/detect/lifecycle/run/RunManager.java", "diffHunk": "@@ -235,10 +235,10 @@ private UniversalToolsResult runUniversalProjectTools(final PropertyConfiguratio\n             final DetectorTool detectorTool = new DetectorTool(new DetectorFinder(), extractionEnvironmentProvider, eventSystem, codeLocationConverter);\n             final DetectorToolResult detectorToolResult = detectorTool.performDetectors(directoryManager.getSourceDirectory(), detectRuleSet, finderOptions, detectorEvaluationOptions, projectBomTool, requiredDetectors);\n \n-            detectorToolResult.bomToolProjectNameVersion.ifPresent(it -> runResult.addToolNameVersion(DetectTool.DETECTOR, new NameVersion(it.getName(), it.getVersion())));\n-            runResult.addDetectCodeLocations(detectorToolResult.bomToolCodeLocations);\n+            detectorToolResult.getBomToolProjectNameVersion().ifPresent(it -> runResult.addToolNameVersion(DetectTool.DETECTOR, new NameVersion(it.getName(), it.getVersion())));\n+            runResult.addDetectCodeLocations(detectorToolResult.getBomToolCodeLocations());\n \n-            if (detectorToolResult.failedDetectorTypes.size() > 0) {\n+            if (detectorToolResult.getFailedDetectorTypes().size() > 0) {", "originalCommit": "96145f931c8de874260bb6cfe301a0ddb3b81394", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzOTMyNg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413339326", "bodyText": "It wasn't a smell I was looking at, I just changed it when I noticed it on my own so I guess I did it inconsistently.  I'll edit that though", "author": "crowleySynopsys", "createdAt": "2020-04-22T21:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MDQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MDk5NQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413240995", "body": "This looks like an accidental side effect of the refactor.", "bodyText": "This looks like an accidental side effect of the refactor.", "bodyHTML": "<p dir=\"auto\">This looks like an accidental side effect of the refactor.</p>", "author": "JakeMathews", "createdAt": "2020-04-22T18:59:11Z", "path": "src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java", "diffHunk": "@@ -77,20 +77,12 @@ public DetectorTool(final DetectorFinder detectorFinder, final ExtractionEnviron\n     public DetectorToolResult performDetectors(final File directory, final DetectorRuleSet detectorRuleSet, final DetectorFinderOptions detectorFinderOptions, final DetectorEvaluationOptions evaluationOptions, final String projectDetector,\n         final List<DetectorType> requiredDetectors)\n         throws DetectUserFriendlyException {\n-        logger.debug(\"Initializing detector system.\");\n-        final Optional<DetectorEvaluationTree> possibleRootEvaluation;\n-        try {\n-            logger.debug(\"Starting detector file system traversal.\");\n-            possibleRootEvaluation = detectorFinder.findDetectors(directory, detectorRuleSet, detectorFinderOptions);\n-\n-        } catch (final DetectorFinderDirectoryListException e) {\n-            throw new DetectUserFriendlyException(\"Detect was unable to list a directory while searching for detectors.\", e, ExitCodeType.FAILURE_DETECTOR);\n-        }\n+        Optional<DetectorEvaluationTree> possibleRootEvaluation = intializeDetectorSystem(directory, detectorRuleSet, detectorFinderOptions);\n \n         if (!possibleRootEvaluation.isPresent()) {\n             logger.error(\"The source directory could not be searched for detectors - detector tool failed.\");\n             logger.error(\"Please ensure the provided source path is a directory and detect has access.\");\n-            eventSystem.publishEvent(Event.ExitCode, new ExitCodeRequest(ExitCodeType.FAILURE_CONFIGURATION, \"Detector tool failed to run on the configured source path.\"));\n+            eventSystem.publishEvent(Event.ExitCode, new ExitCodeRequest(ExitCodeType.FAILURE_CONFIGURATION, \"DETECTOR tool failed to run on the configured source path.\"));", "originalCommit": "96145f931c8de874260bb6cfe301a0ddb3b81394", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0MDM0Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413340346", "bodyText": "ugh, thought I caught all of those.  nice spot", "author": "crowleySynopsys", "createdAt": "2020-04-22T21:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MDk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0Mjg5Mw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413242893", "body": "If this is returning a `ch.qos.logback.classic.Logger` why are we using the logger name from slf4j?", "bodyText": "If this is returning a ch.qos.logback.classic.Logger why are we using the logger name from slf4j?", "bodyHTML": "<p dir=\"auto\">If this is returning a <code>ch.qos.logback.classic.Logger</code> why are we using the logger name from slf4j?</p>", "author": "JakeMathews", "createdAt": "2020-04-22T19:01:55Z", "path": "src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticLogUtil.java", "diffHunk": "@@ -37,6 +35,6 @@\n     }\n \n     public static ch.qos.logback.classic.Logger getRootLogger() {\n-        return getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);\n+        return getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);", "originalCommit": "96145f931c8de874260bb6cfe301a0ddb3b81394", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0OTgxNA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413349814", "bodyText": "the logger type we are using here implements slf4j, and that's where is gets ROOT_LOGGER_NAME from.  sonarCloud had issue with referencing a value from an implemented class that it does not override", "author": "crowleySynopsys", "createdAt": "2020-04-22T21:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0Mjg5Mw=="}], "type": "inlineReview"}, {"oid": "5c8e79dc41c9a50f7b61d2bb87e7cc87e0d73f87", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/5c8e79dc41c9a50f7b61d2bb87e7cc87e0d73f87", "message": "refactor(): Changed .size() > 0 to !isEmpty()", "committedDate": "2020-04-22T21:16:42Z", "type": "commit"}, {"oid": "b1e9c3fd3426c77326cef92bd3640fc251e831f8", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/b1e9c3fd3426c77326cef92bd3640fc251e831f8", "message": "refactor(): Uncapitalized DETECTOR", "committedDate": "2020-04-22T21:20:26Z", "type": "commit"}, {"oid": "68613e6a6c6e03d75cb76e6f21593207895348d2", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/68613e6a6c6e03d75cb76e6f21593207895348d2", "message": "refactor: Reversed extraction of for loop into a private method", "committedDate": "2020-04-23T20:56:15Z", "type": "commit"}, {"oid": "7822f3d3945588d3cdc76256f05c06ca5a77e082", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/7822f3d3945588d3cdc76256f05c06ca5a77e082", "message": "refactor: Changed names of private methods to no longer sound like getters", "committedDate": "2020-04-24T15:45:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MzQ0Nw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r414863447", "body": "```suggestion\r\n                   .filter(line -> countIndent(line) == 0)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                               .filter(this::isLevel0)\n          \n          \n            \n                               .filter(line -> countIndent(line) == 0)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                   .filter(<span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x\">::</span><span class=\"x x-last\">isLevel0</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                   .filter(<span class=\"x x-first\">line </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> countIndent(line) </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">0</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "JakeMathews", "createdAt": "2020-04-24T21:06:45Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockParser.java", "diffHunk": "@@ -73,6 +80,25 @@ public YarnLock parseYarnLock(final List<String> yarnLockFileAsList) {\n         return new YarnLock(entries);\n     }\n \n+    @NotNull\n+    private Integer findIndexOfFirstLevelZeroLine(final List<String> cleanedYarnLockFileAsList) {\n+        return cleanedYarnLockFileAsList\n+                   .stream()\n+                   .filter(this::isLevel0)", "originalCommit": "7822f3d3945588d3cdc76256f05c06ca5a77e082", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MzY1NQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r414863655", "body": "```suggestion\r\n\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private boolean isLevel0(String line) {\n          \n          \n            \n                    int level = countIndent(line);\n          \n          \n            \n                    return level == 0;\n          \n          \n            \n                }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">boolean</span> isLevel0(<span class=\"pl-smi\">String</span> line) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">int</span> level <span class=\"pl-k\">=</span> countIndent(line);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> level <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "JakeMathews", "createdAt": "2020-04-24T21:07:12Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockParser.java", "diffHunk": "@@ -115,8 +141,13 @@ public YarnLockEntryId parseSingleEntry(String entry) {\n         }\n     }\n \n-    private String getVersionFromLine(final String line) {\n+    private String parseVersionFromLine(final String line) {\n         final String rawVersion = line.substring(VERSION_PREFIX.length(), line.lastIndexOf(VERSION_SUFFIX));\n         return removeWrappingQuotes(rawVersion);\n     }\n-}\n+\n+    private boolean isLevel0(String line) {\n+        int level = countIndent(line);\n+        return level == 0;\n+    }", "originalCommit": "7822f3d3945588d3cdc76256f05c06ca5a77e082", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9407d8574f34732ec38d4a0859fb142a34c64a21", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/9407d8574f34732ec38d4a0859fb142a34c64a21", "message": "refactor: Reverted DetectorTool and DetectorToolResult to original state", "committedDate": "2020-04-24T21:36:43Z", "type": "commit"}]}