{"pr_number": 3336, "pr_title": "KOGITO-764: Create a Guided Tour for first time users on DMN editor", "pr_author": "karreiro", "pr_createdAt": "2020-06-17T13:47:16Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3336", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNTYzNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442325637", "body": "Maybe we could be consistent in naming and use `init` instead of `initialize`. WDYT?", "bodyText": "Maybe we could be consistent in naming and use init instead of initialize. WDYT?", "bodyHTML": "<p dir=\"auto\">Maybe we could be consistent in naming and use <code>init</code> instead of <code>initialize</code>. WDYT?</p>", "author": "jomarko", "createdAt": "2020-06-18T15:46:19Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/AbstractDMNDiagramEditor.java", "diffHunk": "@@ -202,6 +206,7 @@ public void onStartup(final PlaceRequest place) {\n         decisionNavigatorDock.init(PERSPECTIVE_ID);\n         diagramPropertiesDock.init(PERSPECTIVE_ID);\n         diagramPreviewAndExplorerDock.init(PERSPECTIVE_ID);\n+        guidedTourBridgeInitializer.initialize();", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNjQ1Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443906452", "bodyText": "+1 Thanks. Fixed!", "author": "karreiro", "createdAt": "2020-06-23T01:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNTYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNjQyMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442326421", "body": "Could we please add javadoc to new classes which do not implement new interfaces from `appformer` part of ensemble? ", "bodyText": "Could we please add javadoc to new classes which do not implement new interfaces from appformer part of ensemble?", "bodyHTML": "<p dir=\"auto\">Could we please add javadoc to new classes which do not implement new interfaces from <code>appformer</code> part of ensemble?</p>", "author": "jomarko", "createdAt": "2020-06-18T15:47:30Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/GuidedTourBridgeInitializer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour;\n+\n+import javax.inject.Inject;\n+\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourBridge;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.observers.GuidedTourGraphObserver;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.observers.GuidedTourGridObserver;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers.GuidedTourGraphElementPositionUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers.GuidedTourHTMLElementPositionUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.tutorial.DMNTutorial;\n+\n+public class GuidedTourBridgeInitializer {", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNjYxNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443906617", "bodyText": "Sure. Done!", "author": "karreiro", "createdAt": "2020-06-23T01:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNjQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzODA4MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442338081", "body": "Could you please explain why this is needed? I see `graphObserver` and `gridObserver` has `@Observes` annotation in use. Then if I remember correctly is enough to fire such event instance from any other place and java ee world will invoke those `@Observes` methods. Why do we need to store and pass `graphObserver` and and `gridObserver` instances?", "bodyText": "Could you please explain why this is needed? I see graphObserver and gridObserver has @Observes annotation in use. Then if I remember correctly is enough to fire such event instance from any other place and java ee world will invoke those @Observes methods. Why do we need to store and pass graphObserver and and gridObserver instances?", "bodyHTML": "<p dir=\"auto\">Could you please explain why this is needed? I see <code>graphObserver</code> and <code>gridObserver</code> has <code>@Observes</code> annotation in use. Then if I remember correctly is enough to fire such event instance from any other place and java ee world will invoke those <code>@Observes</code> methods. Why do we need to store and pass <code>graphObserver</code> and and <code>gridObserver</code> instances?</p>", "author": "jomarko", "createdAt": "2020-06-18T16:04:38Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/GuidedTourBridgeInitializer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour;\n+\n+import javax.inject.Inject;\n+\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourBridge;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.observers.GuidedTourGraphObserver;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.observers.GuidedTourGridObserver;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers.GuidedTourGraphElementPositionUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers.GuidedTourHTMLElementPositionUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.tutorial.DMNTutorial;\n+\n+public class GuidedTourBridgeInitializer {\n+\n+    private final GuidedTourGraphObserver graphObserver;\n+\n+    private final GuidedTourGridObserver gridObserver;\n+\n+    private final GuidedTourGraphElementPositionUtils graphPositionUtils;\n+\n+    private final GuidedTourHTMLElementPositionUtils htmlPositionUtils;\n+\n+    private final GuidedTourBridge monitorBridge;\n+\n+    private final DMNTutorial dmnTutorial;\n+\n+    @Inject\n+    public GuidedTourBridgeInitializer(final GuidedTourGraphObserver graphObserver,\n+                                       final GuidedTourGridObserver gridObserver,\n+                                       final GuidedTourGraphElementPositionUtils graphPositionUtils,\n+                                       final GuidedTourHTMLElementPositionUtils htmlPositionUtils,\n+                                       final GuidedTourBridge monitorBridge,\n+                                       final DMNTutorial dmnTutorial) {\n+        this.graphObserver = graphObserver;\n+        this.gridObserver = gridObserver;\n+        this.graphPositionUtils = graphPositionUtils;\n+        this.htmlPositionUtils = htmlPositionUtils;\n+        this.monitorBridge = monitorBridge;\n+        this.dmnTutorial = dmnTutorial;\n+    }\n+\n+    public void initialize() {\n+        registerPositionProviders();\n+        registerObservers();\n+        registerTutorials();\n+    }\n+\n+    private void registerPositionProviders() {\n+        monitorBridge.registerPositionProvider(\"DMNEditorGraph\", graphPositionUtils.getPositionProviderFunction());\n+        monitorBridge.registerPositionProvider(\"DMNEditorHTMLElement\", htmlPositionUtils.getPositionProviderFunction());\n+    }\n+\n+    private void registerObservers() {\n+        monitorBridge.registerObserver(graphObserver);\n+        monitorBridge.registerObserver(gridObserver);", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNzE1NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443907154", "bodyText": "Each GuidedTourObserver has it's own domain, and it's disposed by the bridge monitor when it's necessary. So, it's just a matter of separating responsibilities :-)", "author": "karreiro", "createdAt": "2020-06-23T01:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzODA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NDg2MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442344860", "body": "I think we can improve the naming. `Utils` suffix suggest to me set of public methods related to position, however the only one public method is a one of given `PositionProvider` interface. Should we rename `Utils` suffix?", "bodyText": "I think we can improve the naming. Utils suffix suggest to me set of public methods related to position, however the only one public method is a one of given PositionProvider interface. Should we rename Utils suffix?", "bodyHTML": "<p dir=\"auto\">I think we can improve the naming. <code>Utils</code> suffix suggest to me set of public methods related to position, however the only one public method is a one of given <code>PositionProvider</code> interface. Should we rename <code>Utils</code> suffix?</p>", "author": "jomarko", "createdAt": "2020-06-18T16:15:16Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/providers/GuidedTourGraphElementPositionUtils.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import javax.inject.Inject;\n+\n+import elemental2.dom.ClientRect;\n+import elemental2.dom.Element;\n+import elemental2.dom.HTMLElement;\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Rect;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.kie.workbench.common.dmn.client.graph.DMNGraphUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.common.GuidedTourUtils;\n+import org.kie.workbench.common.stunner.client.lienzo.canvas.wires.WiresCanvas;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.Bounds;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.graph.impl.NodeImpl;\n+\n+public class GuidedTourGraphElementPositionUtils implements PositionProvider {", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNzU4Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443907586", "bodyText": "Nice idea! Thanks! Now we have PositionProviderFactories :-)", "author": "karreiro", "createdAt": "2020-06-23T01:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NDg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0Nzk3NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442347974", "body": "Spotted here, it is more related to appformer part of ensemble, why we please need appformer `Rect` next to elemenatl2 `ClientRect`. They seem to have the same functionality.", "bodyText": "Spotted here, it is more related to appformer part of ensemble, why we please need appformer Rect next to elemenatl2 ClientRect. They seem to have the same functionality.", "bodyHTML": "<p dir=\"auto\">Spotted here, it is more related to appformer part of ensemble, why we please need appformer <code>Rect</code> next to elemenatl2 <code>ClientRect</code>. They seem to have the same functionality.</p>", "author": "jomarko", "createdAt": "2020-06-18T16:20:07Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/providers/GuidedTourGraphElementPositionUtils.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import javax.inject.Inject;\n+\n+import elemental2.dom.ClientRect;\n+import elemental2.dom.Element;\n+import elemental2.dom.HTMLElement;\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Rect;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.kie.workbench.common.dmn.client.graph.DMNGraphUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.common.GuidedTourUtils;\n+import org.kie.workbench.common.stunner.client.lienzo.canvas.wires.WiresCanvas;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.Bounds;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.graph.impl.NodeImpl;\n+\n+public class GuidedTourGraphElementPositionUtils implements PositionProvider {\n+\n+    private final DMNGraphUtils dmnGraphUtils;\n+\n+    private final GuidedTourUtils guidedTourUtils;\n+\n+    private final Elemental2DomUtil elemental2DomUtil;\n+\n+    @Inject\n+    public GuidedTourGraphElementPositionUtils(final DMNGraphUtils dmnGraphUtils,\n+                                               final GuidedTourUtils guidedTourUtils,\n+                                               final Elemental2DomUtil elemental2DomUtil) {\n+        this.dmnGraphUtils = dmnGraphUtils;\n+        this.guidedTourUtils = guidedTourUtils;\n+        this.elemental2DomUtil = elemental2DomUtil;\n+    }\n+\n+    public PositionProviderFunction getPositionProviderFunction() {\n+        return selector ->\n+                getGraphNodes()\n+                        .map(guidedTourUtils::asNodeImpl)\n+                        .filter(node -> Objects.equals(getName(node), selector))\n+                        .findFirst()\n+                        .map(this::calculateNodeRelativePosition)\n+                        .orElse(Rect.NONE());\n+    }\n+\n+    private Rect calculateNodeRelativePosition(final NodeImpl<View> node) {\n+\n+        final Bounds bounds = node.getContent().getBounds();\n+        final Optional<ClientRect> containerRect = getContainerRect();\n+        final double canvasLeft = containerRect.map(rect -> rect.left).orElse(0d);\n+        final double canvasTop = containerRect.map(rect -> rect.top).orElse(0d);\n+\n+        final int left = (int) (canvasLeft + bounds.getX());\n+        final int top = (int) (canvasTop + bounds.getY());\n+        final int height = (int) bounds.getHeight();\n+        final int width = (int) bounds.getWidth();\n+\n+        return makeRect(left, top, height, width);\n+    }\n+\n+    Rect makeRect(final int left,", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNzQzNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443907436", "bodyText": "The Rect belongs to the Guided Tour domain, it gives us more flexibility to evolve the API. So, I prefer not to couple the Guided Tour API the native ClientRect.", "author": "karreiro", "createdAt": "2020-06-23T01:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0Nzk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Mjk4NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442352985", "body": "Similar question, `Rect` vs `ClientRect`", "bodyText": "Similar question, Rect vs ClientRect", "bodyHTML": "<p dir=\"auto\">Similar question, <code>Rect</code> vs <code>ClientRect</code></p>", "author": "jomarko", "createdAt": "2020-06-18T16:28:09Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/providers/GuidedTourHTMLElementPositionUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers;\n+\n+import java.util.Optional;\n+\n+import elemental2.dom.ClientRect;\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.Element;\n+import elemental2.dom.HTMLDocument;\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Rect;\n+\n+public class GuidedTourHTMLElementPositionUtils implements PositionProvider {\n+\n+    public PositionProviderFunction getPositionProviderFunction() {\n+        return selector ->\n+                Optional.ofNullable(document().querySelector(selector))\n+                        .map(this::makeRect)\n+                        .orElse(Rect.NONE());\n+    }\n+\n+    private Rect makeRect(final Element element) {\n+\n+        final ClientRect clientRect = element.getBoundingClientRect();", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNzcyMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443907723", "bodyText": "I've answered here ;-)", "author": "karreiro", "createdAt": "2020-06-23T01:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1Mjk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NjAzNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442356037", "body": "Some of these are very hard to understand. I mean to know what part of our editor is is.\r\n\r\nIf we merge https://github.com/kiegroup/appformer/pull/987 and https://github.com/kiegroup/kie-wb-common/pull/3333 before this ensmeble, could be some of your locators improved? ", "bodyText": "Some of these are very hard to understand. I mean to know what part of our editor is is.\nIf we merge kiegroup/appformer#987 and #3333 before this ensmeble, could be some of your locators improved?", "bodyHTML": "<p dir=\"auto\">Some of these are very hard to understand. I mean to know what part of our editor is is.</p>\n<p dir=\"auto\">If we merge <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"639658521\" data-permission-text=\"Title is private\" data-url=\"https://github.com/kiegroup/appformer/issues/987\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/kiegroup/appformer/pull/987/hovercard\" href=\"https://github.com/kiegroup/appformer/pull/987\">kiegroup/appformer#987</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"639659222\" data-permission-text=\"Title is private\" data-url=\"https://github.com/kiegroup/kie-wb-common/issues/3333\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/kiegroup/kie-wb-common/pull/3333/hovercard\" href=\"https://github.com/kiegroup/kie-wb-common/pull/3333\">#3333</a> before this ensmeble, could be some of your locators improved?</p>", "author": "jomarko", "createdAt": "2020-06-18T16:32:55Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/tutorial/DMNTutorial.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.tutorial;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.core.JsArray;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.BlockMode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Mode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Step;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.uberfire.client.mvp.UberElemental;\n+\n+import static java.util.Arrays.asList;\n+\n+@ApplicationScoped\n+public class DMNTutorial {\n+\n+    private final View view;\n+\n+    @Inject\n+    public DMNTutorial(final View view) {\n+        this.view = view;\n+    }\n+\n+    @PostConstruct\n+    void setup() {\n+        view.init(this);\n+    }\n+\n+    public Tutorial getTutorial() {\n+        final List<String> commonAllowedElements = asList(\"canvas\",\n+                                                          \"body\",\n+                                                          \"div.nameEditBoxTable\",\n+                                                          \"i.fa.fa-chevron-right.fa-fw\",\n+                                                          \"i[data-field=\\\"saveButton\\\"].fa.fa-check.nameEditBoxButton.fa-2x\",\n+                                                          \"ul.nav.nav-tabs.uf-tabbar-panel-nav-tabs.nav-tabs-pf\",\n+                                                          \"input[data-field=\\\"nameField\\\"].form-control.nameEditBoxNameBox\");", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNzgyNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443907826", "bodyText": "Atm I'm trying to avoid to invest more effort on these steps, we will iterate over them after the next UX output, so I believe it's better to keep it as is for now.", "author": "karreiro", "createdAt": "2020-06-23T01:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NjAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NzI2Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442357266", "body": "Could you please explain this 101 number?", "bodyText": "Could you please explain this 101 number?", "bodyHTML": "<p dir=\"auto\">Could you please explain this 101 number?</p>", "author": "jomarko", "createdAt": "2020-06-18T16:35:04Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/tutorial/DMNTutorial.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.tutorial;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.core.JsArray;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.BlockMode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Mode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Step;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.uberfire.client.mvp.UberElemental;\n+\n+import static java.util.Arrays.asList;\n+\n+@ApplicationScoped\n+public class DMNTutorial {\n+\n+    private final View view;\n+\n+    @Inject\n+    public DMNTutorial(final View view) {\n+        this.view = view;\n+    }\n+\n+    @PostConstruct\n+    void setup() {\n+        view.init(this);\n+    }\n+\n+    public Tutorial getTutorial() {\n+        final List<String> commonAllowedElements = asList(\"canvas\",\n+                                                          \"body\",\n+                                                          \"div.nameEditBoxTable\",\n+                                                          \"i.fa.fa-chevron-right.fa-fw\",\n+                                                          \"i[data-field=\\\"saveButton\\\"].fa.fa-check.nameEditBoxButton.fa-2x\",\n+                                                          \"ul.nav.nav-tabs.uf-tabbar-panel-nav-tabs.nav-tabs-pf\",\n+                                                          \"input[data-field=\\\"nameField\\\"].form-control.nameEditBoxNameBox\");\n+        final Tutorial tutorial = new Tutorial();\n+        tutorial.setLabel(\"DMN 101 Tutorial\");", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwOTQyOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443909428", "bodyText": "Each tutorial can have any label, it enables the use of one tutorial referencing other at runtime. So, a tutorial can have any string label... regarding the 101 term:\n\n101 (\"one-o-one\") is a topic for beginners in any area. It has all the basic principles and concepts that are expected in a particular field. Source: https://en.wikipedia.org/wiki/101_(topic)", "author": "karreiro", "createdAt": "2020-06-23T01:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NzI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1ODY0MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442358640", "body": "We should pass action as `GuidedTourActions` instead of `String`. This way will clearly define set of allowed values.", "bodyText": "We should pass action as GuidedTourActions instead of String. This way will clearly define set of allowed values.", "bodyHTML": "<p dir=\"auto\">We should pass action as <code>GuidedTourActions</code> instead of <code>String</code>. This way will clearly define set of allowed values.</p>", "author": "jomarko", "createdAt": "2020-06-18T16:37:24Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/tutorial/DMNTutorial.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.tutorial;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.core.JsArray;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.BlockMode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Mode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Step;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.uberfire.client.mvp.UberElemental;\n+\n+import static java.util.Arrays.asList;\n+\n+@ApplicationScoped\n+public class DMNTutorial {\n+\n+    private final View view;\n+\n+    @Inject\n+    public DMNTutorial(final View view) {\n+        this.view = view;\n+    }\n+\n+    @PostConstruct\n+    void setup() {\n+        view.init(this);\n+    }\n+\n+    public Tutorial getTutorial() {\n+        final List<String> commonAllowedElements = asList(\"canvas\",\n+                                                          \"body\",\n+                                                          \"div.nameEditBoxTable\",\n+                                                          \"i.fa.fa-chevron-right.fa-fw\",\n+                                                          \"i[data-field=\\\"saveButton\\\"].fa.fa-check.nameEditBoxButton.fa-2x\",\n+                                                          \"ul.nav.nav-tabs.uf-tabbar-panel-nav-tabs.nav-tabs-pf\",\n+                                                          \"input[data-field=\\\"nameField\\\"].form-control.nameEditBoxNameBox\");\n+        final Tutorial tutorial = new Tutorial();\n+        tutorial.setLabel(\"DMN 101 Tutorial\");\n+        tutorial.setSteps(asJsArray(asList(\n+\n+                getStep(view.getStepContent(0),\n+                        blockMode(userInteraction(\"CREATED\", \"Decision-\"), allowedSelectors(commonAllowedElements, \"Decision-1\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::.kie-palette\",\n+                        \"Try to drag the rectangle icon from the palette to the canvas.\"),\n+\n+                getStep(view.getStepContent(1),\n+                        blockMode(userInteraction(\"UPDATED\", \"Can drive?\"), allowedSelectors(commonAllowedElements, \"Decision-1\")),\n+                        \"bottom\",\n+                        \"DMNEditorGraph:::Decision-1\",\n+                        \"Try to double-click on the decision node to rename it to \\\"Can drive?\\\".\"),\n+\n+                getStep(view.getStepContent(2),\n+                        blockMode(userInteraction(\"CREATED\", \"InputData-\"), allowedSelectors(commonAllowedElements, \"InputData-1\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::.kie-palette\",\n+                        \"Try to drag the rounded corner rectangle icon from the palette to the canvas.\"),\n+\n+                getStep(view.getStepContent(3),\n+                        blockMode(userInteraction(\"UPDATED\", \"Age\"), allowedSelectors(commonAllowedElements, \"InputData-1\")),\n+                        \"bottom\",\n+                        \"DMNEditorGraph:::InputData-1\",\n+                        \"Try to double-click on the input node to rename it to \\\"Age\\\".\"),\n+\n+                getStep(view.getStepContent(4),\n+                        blockMode(userInteraction(\"CLICK\", \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\"), allowedSelectors(commonAllowedElements, \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\")),\n+                        \"left\",\n+                        \"DMNEditorHTMLElement:::i.fa.fa-pencil-square-o.fa-lg.fa-fw\",\n+                        \"Open the properties panel by clicking on the pencil icon.\"),\n+\n+                getStep(view.getStepContent(5),\n+                        blockMode(userInteraction(\"CREATED\", \"BOXED_EXPRESSION\"), allowedSelectors(commonAllowedElements, \"Can drive?\", \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\")),\n+                        \"center\",\n+                        \"\",\n+                        \"Select the decision node and click on the pencil icon.\"),\n+\n+                getStep(view.getStepContent(6),\n+                        blockMode(userInteraction(\"CLICK\", \"span[data-field=\\\"text\\\"]\"), allowedSelectors(commonAllowedElements)),\n+                        \"center\",\n+                        \"\",\n+                        \"Select one of the available boxed expressions by clicking on \\\"Select expression\\\".\"),\n+\n+                getStep(view.getStepContent(7),\n+                        blockMode(userInteraction(\"CLICK\", \"a[data-field=\\\"returnToLink\\\"]\"), allowedSelectors(\"a[data-field=\\\"returnToLink\\\"]\", \"div.kie-dmn-return-to-link\")),\n+                        \"center\",\n+                        \"\",\n+                        \"Click on the \\\"Back to new-file\\\" link to go back to the canvas.\")\n+\n+        )));\n+        return tutorial;\n+    }\n+\n+    private BlockMode blockMode(final UserInteraction userInteraction,\n+                                final JsArray<String> allowedSelectors) {\n+        final BlockMode blockMode = new BlockMode();\n+        blockMode.setUserInteraction(userInteraction);\n+        blockMode.setAllowedSelectors(allowedSelectors);\n+        return blockMode;\n+    }\n+\n+    private UserInteraction userInteraction(final String action, final String target) {", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNzkyNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443907924", "bodyText": "UserInteraction belongs to Guided Tour domain, while the GuidedTourActions belongs to DMN web-app domain. From Guided Tour perspective, we want to be more flexible and leave it as string, so API users are able to define their own observers and trigger their own user interactions.", "author": "karreiro", "createdAt": "2020-06-23T01:17:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1ODY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1OTEwNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442359106", "body": "Similar comment as above, we should have enum to clearly define set of allowed values.", "bodyText": "Similar comment as above, we should have enum to clearly define set of allowed values.", "bodyHTML": "<p dir=\"auto\">Similar comment as above, we should have enum to clearly define set of allowed values.</p>", "author": "jomarko", "createdAt": "2020-06-18T16:38:07Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/tutorial/DMNTutorial.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.tutorial;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.core.JsArray;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.BlockMode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Mode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Step;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.uberfire.client.mvp.UberElemental;\n+\n+import static java.util.Arrays.asList;\n+\n+@ApplicationScoped\n+public class DMNTutorial {\n+\n+    private final View view;\n+\n+    @Inject\n+    public DMNTutorial(final View view) {\n+        this.view = view;\n+    }\n+\n+    @PostConstruct\n+    void setup() {\n+        view.init(this);\n+    }\n+\n+    public Tutorial getTutorial() {\n+        final List<String> commonAllowedElements = asList(\"canvas\",\n+                                                          \"body\",\n+                                                          \"div.nameEditBoxTable\",\n+                                                          \"i.fa.fa-chevron-right.fa-fw\",\n+                                                          \"i[data-field=\\\"saveButton\\\"].fa.fa-check.nameEditBoxButton.fa-2x\",\n+                                                          \"ul.nav.nav-tabs.uf-tabbar-panel-nav-tabs.nav-tabs-pf\",\n+                                                          \"input[data-field=\\\"nameField\\\"].form-control.nameEditBoxNameBox\");\n+        final Tutorial tutorial = new Tutorial();\n+        tutorial.setLabel(\"DMN 101 Tutorial\");\n+        tutorial.setSteps(asJsArray(asList(\n+\n+                getStep(view.getStepContent(0),\n+                        blockMode(userInteraction(\"CREATED\", \"Decision-\"), allowedSelectors(commonAllowedElements, \"Decision-1\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::.kie-palette\",\n+                        \"Try to drag the rectangle icon from the palette to the canvas.\"),\n+\n+                getStep(view.getStepContent(1),\n+                        blockMode(userInteraction(\"UPDATED\", \"Can drive?\"), allowedSelectors(commonAllowedElements, \"Decision-1\")),\n+                        \"bottom\",\n+                        \"DMNEditorGraph:::Decision-1\",\n+                        \"Try to double-click on the decision node to rename it to \\\"Can drive?\\\".\"),\n+\n+                getStep(view.getStepContent(2),\n+                        blockMode(userInteraction(\"CREATED\", \"InputData-\"), allowedSelectors(commonAllowedElements, \"InputData-1\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::.kie-palette\",\n+                        \"Try to drag the rounded corner rectangle icon from the palette to the canvas.\"),\n+\n+                getStep(view.getStepContent(3),\n+                        blockMode(userInteraction(\"UPDATED\", \"Age\"), allowedSelectors(commonAllowedElements, \"InputData-1\")),\n+                        \"bottom\",\n+                        \"DMNEditorGraph:::InputData-1\",\n+                        \"Try to double-click on the input node to rename it to \\\"Age\\\".\"),\n+\n+                getStep(view.getStepContent(4),\n+                        blockMode(userInteraction(\"CLICK\", \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\"), allowedSelectors(commonAllowedElements, \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\")),\n+                        \"left\",\n+                        \"DMNEditorHTMLElement:::i.fa.fa-pencil-square-o.fa-lg.fa-fw\",\n+                        \"Open the properties panel by clicking on the pencil icon.\"),\n+\n+                getStep(view.getStepContent(5),\n+                        blockMode(userInteraction(\"CREATED\", \"BOXED_EXPRESSION\"), allowedSelectors(commonAllowedElements, \"Can drive?\", \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\")),\n+                        \"center\",\n+                        \"\",\n+                        \"Select the decision node and click on the pencil icon.\"),\n+\n+                getStep(view.getStepContent(6),\n+                        blockMode(userInteraction(\"CLICK\", \"span[data-field=\\\"text\\\"]\"), allowedSelectors(commonAllowedElements)),\n+                        \"center\",\n+                        \"\",\n+                        \"Select one of the available boxed expressions by clicking on \\\"Select expression\\\".\"),\n+\n+                getStep(view.getStepContent(7),\n+                        blockMode(userInteraction(\"CLICK\", \"a[data-field=\\\"returnToLink\\\"]\"), allowedSelectors(\"a[data-field=\\\"returnToLink\\\"]\", \"div.kie-dmn-return-to-link\")),\n+                        \"center\",\n+                        \"\",\n+                        \"Click on the \\\"Back to new-file\\\" link to go back to the canvas.\")\n+\n+        )));\n+        return tutorial;\n+    }\n+\n+    private BlockMode blockMode(final UserInteraction userInteraction,\n+                                final JsArray<String> allowedSelectors) {\n+        final BlockMode blockMode = new BlockMode();\n+        blockMode.setUserInteraction(userInteraction);\n+        blockMode.setAllowedSelectors(allowedSelectors);\n+        return blockMode;\n+    }\n+\n+    private UserInteraction userInteraction(final String action, final String target) {\n+        final UserInteraction userInteraction = new UserInteraction();\n+        userInteraction.setAction(action);\n+        userInteraction.setTarget(target);\n+        return userInteraction;\n+    }\n+\n+    private JsArray<String> allowedSelectors(final String... selectors) {\n+        return asJsArray(asList(selectors));\n+    }\n+\n+    private JsArray<String> allowedSelectors(final List<String> selectorsList,\n+                                             final String... selectors) {\n+        final List<String> allowedSelectors = new ArrayList<>();\n+        allowedSelectors.addAll(selectorsList);\n+        allowedSelectors.addAll(asList(selectors));\n+        return asJsArray(allowedSelectors);\n+    }\n+\n+    private Step getStep(final String content,\n+                         final Mode mode,\n+                         final String position,", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwODEzMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443908131", "bodyText": "TypeScript defines, by using union types, allowed values for this. I prefer to keep it simple and just add a Java doc at the Step class for now, and see how this kind of API will evolve when BPMN start using this API.", "author": "karreiro", "createdAt": "2020-06-23T01:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1OTEwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MDEwMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442360102", "body": "Could we please implement `OuiaComponent` interface introduced as part of https://github.com/kiegroup/appformer/pull/987 and https://github.com/kiegroup/kie-wb-common/pull/333?", "bodyText": "Could we please implement OuiaComponent interface introduced as part of kiegroup/appformer#987 and #333?", "bodyHTML": "<p dir=\"auto\">Could we please implement <code>OuiaComponent</code> interface introduced as part of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"639658521\" data-permission-text=\"Title is private\" data-url=\"https://github.com/kiegroup/appformer/issues/987\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/kiegroup/appformer/pull/987/hovercard\" href=\"https://github.com/kiegroup/appformer/pull/987\">kiegroup/appformer#987</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"144325233\" data-permission-text=\"Title is private\" data-url=\"https://github.com/kiegroup/kie-wb-common/issues/333\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/kiegroup/kie-wb-common/pull/333/hovercard\" href=\"https://github.com/kiegroup/kie-wb-common/pull/333\">#333</a>?</p>", "author": "jomarko", "createdAt": "2020-06-18T16:39:46Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/tutorial/DMNTutorial.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.tutorial;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.core.JsArray;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.BlockMode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Mode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Step;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.uberfire.client.mvp.UberElemental;\n+\n+import static java.util.Arrays.asList;\n+\n+@ApplicationScoped\n+public class DMNTutorial {\n+\n+    private final View view;\n+\n+    @Inject\n+    public DMNTutorial(final View view) {\n+        this.view = view;\n+    }\n+\n+    @PostConstruct\n+    void setup() {\n+        view.init(this);\n+    }\n+\n+    public Tutorial getTutorial() {\n+        final List<String> commonAllowedElements = asList(\"canvas\",\n+                                                          \"body\",\n+                                                          \"div.nameEditBoxTable\",\n+                                                          \"i.fa.fa-chevron-right.fa-fw\",\n+                                                          \"i[data-field=\\\"saveButton\\\"].fa.fa-check.nameEditBoxButton.fa-2x\",\n+                                                          \"ul.nav.nav-tabs.uf-tabbar-panel-nav-tabs.nav-tabs-pf\",\n+                                                          \"input[data-field=\\\"nameField\\\"].form-control.nameEditBoxNameBox\");\n+        final Tutorial tutorial = new Tutorial();\n+        tutorial.setLabel(\"DMN 101 Tutorial\");\n+        tutorial.setSteps(asJsArray(asList(\n+\n+                getStep(view.getStepContent(0),\n+                        blockMode(userInteraction(\"CREATED\", \"Decision-\"), allowedSelectors(commonAllowedElements, \"Decision-1\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::.kie-palette\",\n+                        \"Try to drag the rectangle icon from the palette to the canvas.\"),\n+\n+                getStep(view.getStepContent(1),\n+                        blockMode(userInteraction(\"UPDATED\", \"Can drive?\"), allowedSelectors(commonAllowedElements, \"Decision-1\")),\n+                        \"bottom\",\n+                        \"DMNEditorGraph:::Decision-1\",\n+                        \"Try to double-click on the decision node to rename it to \\\"Can drive?\\\".\"),\n+\n+                getStep(view.getStepContent(2),\n+                        blockMode(userInteraction(\"CREATED\", \"InputData-\"), allowedSelectors(commonAllowedElements, \"InputData-1\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::.kie-palette\",\n+                        \"Try to drag the rounded corner rectangle icon from the palette to the canvas.\"),\n+\n+                getStep(view.getStepContent(3),\n+                        blockMode(userInteraction(\"UPDATED\", \"Age\"), allowedSelectors(commonAllowedElements, \"InputData-1\")),\n+                        \"bottom\",\n+                        \"DMNEditorGraph:::InputData-1\",\n+                        \"Try to double-click on the input node to rename it to \\\"Age\\\".\"),\n+\n+                getStep(view.getStepContent(4),\n+                        blockMode(userInteraction(\"CLICK\", \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\"), allowedSelectors(commonAllowedElements, \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\")),\n+                        \"left\",\n+                        \"DMNEditorHTMLElement:::i.fa.fa-pencil-square-o.fa-lg.fa-fw\",\n+                        \"Open the properties panel by clicking on the pencil icon.\"),\n+\n+                getStep(view.getStepContent(5),\n+                        blockMode(userInteraction(\"CREATED\", \"BOXED_EXPRESSION\"), allowedSelectors(commonAllowedElements, \"Can drive?\", \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\")),\n+                        \"center\",\n+                        \"\",\n+                        \"Select the decision node and click on the pencil icon.\"),\n+\n+                getStep(view.getStepContent(6),\n+                        blockMode(userInteraction(\"CLICK\", \"span[data-field=\\\"text\\\"]\"), allowedSelectors(commonAllowedElements)),\n+                        \"center\",\n+                        \"\",\n+                        \"Select one of the available boxed expressions by clicking on \\\"Select expression\\\".\"),\n+\n+                getStep(view.getStepContent(7),\n+                        blockMode(userInteraction(\"CLICK\", \"a[data-field=\\\"returnToLink\\\"]\"), allowedSelectors(\"a[data-field=\\\"returnToLink\\\"]\", \"div.kie-dmn-return-to-link\")),\n+                        \"center\",\n+                        \"\",\n+                        \"Click on the \\\"Back to new-file\\\" link to go back to the canvas.\")\n+\n+        )));\n+        return tutorial;\n+    }\n+\n+    private BlockMode blockMode(final UserInteraction userInteraction,\n+                                final JsArray<String> allowedSelectors) {\n+        final BlockMode blockMode = new BlockMode();\n+        blockMode.setUserInteraction(userInteraction);\n+        blockMode.setAllowedSelectors(allowedSelectors);\n+        return blockMode;\n+    }\n+\n+    private UserInteraction userInteraction(final String action, final String target) {\n+        final UserInteraction userInteraction = new UserInteraction();\n+        userInteraction.setAction(action);\n+        userInteraction.setTarget(target);\n+        return userInteraction;\n+    }\n+\n+    private JsArray<String> allowedSelectors(final String... selectors) {\n+        return asJsArray(asList(selectors));\n+    }\n+\n+    private JsArray<String> allowedSelectors(final List<String> selectorsList,\n+                                             final String... selectors) {\n+        final List<String> allowedSelectors = new ArrayList<>();\n+        allowedSelectors.addAll(selectorsList);\n+        allowedSelectors.addAll(asList(selectors));\n+        return asJsArray(allowedSelectors);\n+    }\n+\n+    private Step getStep(final String content,\n+                         final Mode mode,\n+                         final String position,\n+                         final String selector,\n+                         final String negativeReinforcementMessage) {\n+        final Step step = new Step();\n+        step.setContent(content);\n+        step.setMode(mode);\n+        step.setPosition(position);\n+        step.setSelector(selector);\n+        step.setNegativeReinforcementMessage(negativeReinforcementMessage);\n+        return step;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> JsArray<T> asJsArray(final List<T> javaList) {\n+        final JsArray<T> jsArray = new JsArray<>();\n+        javaList.forEach(jsArray::push);\n+        return jsArray;\n+    }\n+\n+    public interface View extends UberElemental<DMNTutorial>,\n+                                  IsElement {", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwODc1NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443908755", "bodyText": "Can we handle it in a separate JIRA? I'd like to deeply check the impact of this on the Guided Tour.", "author": "karreiro", "createdAt": "2020-06-23T01:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MDEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5Nzc0MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r447697740", "bodyText": "https://issues.redhat.com/browse/KOGITO-2595", "author": "jomarko", "createdAt": "2020-06-30T13:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MDEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2NjcxNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442366716", "body": "This test made mo to look on `asNodeImpl` implementation. Now I have concern there we try to make `NodeImpl` without any instanceof check.\r\n\r\nWhat if we have test\r\n```\r\n    @Test\r\n    public void testAsNodeImpl_Edge() {\r\n        final Element<View> e = new EdgeImpl<>(\"uuid\");\r\n        assertEquals(e, utils.asNodeImpl(e));\r\n    }\r\n```", "bodyText": "This test made mo to look on asNodeImpl implementation. Now I have concern there we try to make NodeImpl without any instanceof check.\nWhat if we have test\n    @Test\n    public void testAsNodeImpl_Edge() {\n        final Element<View> e = new EdgeImpl<>(\"uuid\");\n        assertEquals(e, utils.asNodeImpl(e));\n    }", "bodyHTML": "<p dir=\"auto\">This test made mo to look on <code>asNodeImpl</code> implementation. Now I have concern there we try to make <code>NodeImpl</code> without any instanceof check.</p>\n<p dir=\"auto\">What if we have test</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Test\n    public void testAsNodeImpl_Edge() {\n        final Element&lt;View&gt; e = new EdgeImpl&lt;&gt;(&quot;uuid&quot;);\n        assertEquals(e, utils.asNodeImpl(e));\n    }\"><pre><code>    @Test\n    public void testAsNodeImpl_Edge() {\n        final Element&lt;View&gt; e = new EdgeImpl&lt;&gt;(\"uuid\");\n        assertEquals(e, utils.asNodeImpl(e));\n    }\n</code></pre></div>", "author": "jomarko", "createdAt": "2020-06-18T16:50:00Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/common/GuidedTourUtilsTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.common;\n+\n+import java.util.Optional;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.actions.TextPropertyProvider;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.actions.TextPropertyProviderFactory;\n+import org.kie.workbench.common.stunner.core.client.canvas.event.registration.CanvasElementAddedEvent;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.graph.impl.EdgeImpl;\n+import org.kie.workbench.common.stunner.core.graph.impl.NodeImpl;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GuidedTourUtilsTest {\n+\n+    @Mock\n+    private TextPropertyProviderFactory textPropertyProviderFactory;\n+\n+    private GuidedTourUtils utils;\n+\n+    @Before\n+    public void setup() {\n+        utils = new GuidedTourUtils(textPropertyProviderFactory);\n+    }\n+\n+    @Test\n+    public void testGetNode() {\n+        final NodeImpl<View> expectedNode = new NodeImpl<>(\"uuid\");\n+        final CanvasHandler canvasHandler = mock(CanvasHandler.class);\n+        final CanvasElementAddedEvent event = new CanvasElementAddedEvent(canvasHandler, expectedNode);\n+\n+        final Optional<NodeImpl<View>> actualNode = utils.getNode(event);\n+\n+        assertTrue(actualNode.isPresent());\n+        assertEquals(expectedNode, actualNode.get());\n+    }\n+\n+    @Test\n+    public void testGetNodeWhenElementIsNotNodeImpl() {\n+        final EdgeImpl<View> edge = new EdgeImpl<>(\"uuid\");\n+        final CanvasHandler canvasHandler = mock(CanvasHandler.class);\n+        final CanvasElementAddedEvent event = new CanvasElementAddedEvent(canvasHandler, edge);\n+\n+        assertFalse(utils.getNode(event).isPresent());\n+    }\n+\n+    @Test\n+    public void testGetName() {\n+        final NodeImpl<View> node = new NodeImpl<>(\"uuid\");\n+        final TextPropertyProvider textPropertyProvider = mock(TextPropertyProvider.class);\n+        final String expectedNodeName = \"Decision-1\";\n+\n+        when(textPropertyProviderFactory.getProvider(node)).thenReturn(textPropertyProvider);\n+        when(textPropertyProvider.getText(node)).thenReturn(expectedNodeName);\n+\n+        final String actualNodeName = utils.getName(node);\n+\n+        assertEquals(expectedNodeName, actualNodeName);\n+    }\n+\n+    @Test\n+    public void testAsNodeImpl() {\n+        final NodeImpl<View> node = new NodeImpl<>(\"uuid\");\n+        assertEquals(node, utils.asNodeImpl(node));\n+    }", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwODg0Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443908843", "bodyText": "I've added the extra test ;-)", "author": "karreiro", "createdAt": "2020-06-23T01:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2NjcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MDU0NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442370545", "body": "I think to provide more context we should name the variable like `nodeName`.", "bodyText": "I think to provide more context we should name the variable like nodeName.", "bodyHTML": "<p dir=\"auto\">I think to provide more context we should name the variable like <code>nodeName</code>.</p>", "author": "jomarko", "createdAt": "2020-06-18T16:56:36Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/providers/GuidedTourGraphElementPositionUtilsTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers;\n+\n+import java.util.stream.Stream;\n+\n+import com.google.gwt.user.client.Element;\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.dom.ClientRect;\n+import elemental2.dom.HTMLElement;\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Rect;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.client.graph.DMNGraphUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.common.GuidedTourUtils;\n+import org.kie.workbench.common.stunner.client.lienzo.canvas.wires.WiresCanvas;\n+import org.kie.workbench.common.stunner.client.lienzo.canvas.wires.WiresCanvasView;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.graph.content.Bounds;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.graph.impl.NodeImpl;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class GuidedTourGraphElementPositionUtilsTest {\n+\n+    @Mock\n+    private DMNGraphUtils dmnGraphUtils;\n+\n+    @Mock\n+    private GuidedTourUtils guidedTourUtils;\n+\n+    @Mock\n+    private Elemental2DomUtil elemental2DomUtil;\n+\n+    private GuidedTourGraphElementPositionUtils utils;\n+\n+    @Before\n+    public void init() {\n+        utils = spy(new GuidedTourGraphElementPositionUtils(dmnGraphUtils, guidedTourUtils, elemental2DomUtil));\n+    }\n+\n+    @Test\n+    public void testGetPositionProviderFunction() {\n+        final PositionProviderFunction providerFunction = utils.getPositionProviderFunction();\n+        final NodeImpl<View> node = makeNodeImpl(\"0000\", 10, 10, 50, 100);\n+        final String decision1 = \"Decision-1\";", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwODg3NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443908875", "bodyText": "Fixed!", "author": "karreiro", "createdAt": "2020-06-23T01:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MDU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MDg2Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r442370862", "body": "similar comment as above", "bodyText": "similar comment as above", "bodyHTML": "<p dir=\"auto\">similar comment as above</p>", "author": "jomarko", "createdAt": "2020-06-18T16:57:06Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/providers/GuidedTourGraphElementPositionUtilsTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.providers;\n+\n+import java.util.stream.Stream;\n+\n+import com.google.gwt.user.client.Element;\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.dom.ClientRect;\n+import elemental2.dom.HTMLElement;\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Rect;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.client.graph.DMNGraphUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.common.GuidedTourUtils;\n+import org.kie.workbench.common.stunner.client.lienzo.canvas.wires.WiresCanvas;\n+import org.kie.workbench.common.stunner.client.lienzo.canvas.wires.WiresCanvasView;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.graph.content.Bounds;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.graph.impl.NodeImpl;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class GuidedTourGraphElementPositionUtilsTest {\n+\n+    @Mock\n+    private DMNGraphUtils dmnGraphUtils;\n+\n+    @Mock\n+    private GuidedTourUtils guidedTourUtils;\n+\n+    @Mock\n+    private Elemental2DomUtil elemental2DomUtil;\n+\n+    private GuidedTourGraphElementPositionUtils utils;\n+\n+    @Before\n+    public void init() {\n+        utils = spy(new GuidedTourGraphElementPositionUtils(dmnGraphUtils, guidedTourUtils, elemental2DomUtil));\n+    }\n+\n+    @Test\n+    public void testGetPositionProviderFunction() {\n+        final PositionProviderFunction providerFunction = utils.getPositionProviderFunction();\n+        final NodeImpl<View> node = makeNodeImpl(\"0000\", 10, 10, 50, 100);\n+        final String decision1 = \"Decision-1\";\n+        final CanvasHandler canvasHandler = mock(CanvasHandler.class);\n+        final WiresCanvas canvas = mock(WiresCanvas.class);\n+        final WiresCanvasView wiresCanvasView = mock(WiresCanvasView.class);\n+        final Element deprecatedElement = mock(Element.class);\n+        final HTMLElement htmlElement = mock(HTMLElement.class);\n+        final ClientRect clientRect = makeClientRect(10, 10);\n+        final Rect expected = mock(Rect.class);\n+\n+        when(guidedTourUtils.asNodeImpl(node)).thenReturn(node);\n+        when(guidedTourUtils.getName(node)).thenReturn(decision1);\n+        when(dmnGraphUtils.getNodeStream()).thenReturn(Stream.of(node));\n+\n+        when(dmnGraphUtils.getCanvasHandler()).thenReturn(canvasHandler);\n+        when(canvasHandler.getCanvas()).thenReturn(canvas);\n+        when(canvas.getView()).thenReturn(wiresCanvasView);\n+        when(wiresCanvasView.getElement()).thenReturn(deprecatedElement);\n+        when(elemental2DomUtil.asHTMLElement(deprecatedElement)).thenReturn(htmlElement);\n+        when(htmlElement.getBoundingClientRect()).thenReturn(clientRect);\n+\n+        when(utils.makeRect(20, 20, 50, 100)).thenReturn(expected);\n+\n+        final Rect actual = providerFunction.call(\"Decision-1\");\n+\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testGetPositionProviderFunctionWhenParentCanvasElementCannotBeFound() {\n+        final PositionProviderFunction providerFunction = utils.getPositionProviderFunction();\n+        final NodeImpl<View> node = makeNodeImpl(\"0000\", 10, 10, 50, 100);\n+        final String decision1 = \"Decision-1\";", "originalCommit": "80aa57e6aeaa4a92ff55924c484033851e054ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwODkwMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r443908901", "bodyText": "Fixed!", "author": "karreiro", "createdAt": "2020-06-23T01:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MDg2Mg=="}], "type": "inlineReview"}, {"oid": "3a09d8a5207892c04c65254060d1ccf165fe8a6b", "url": "https://github.com/kiegroup/kie-wb-common/commit/3a09d8a5207892c04c65254060d1ccf165fe8a6b", "message": "KOGITO-764: Create a Guided Tour for first time users on DMN editor", "committedDate": "2020-06-22T21:23:59Z", "type": "commit"}, {"oid": "18852a5b94b26fac106cd8428916e8d7fc430fc3", "url": "https://github.com/kiegroup/kie-wb-common/commit/18852a5b94b26fac106cd8428916e8d7fc430fc3", "message": "Fix issue 12 - Now 'GuidedTourGridObserver' provides the node name", "committedDate": "2020-06-22T21:23:59Z", "type": "commit"}, {"oid": "c6a199c852369d53c4b66e3890dc24c1d3e1eeec", "url": "https://github.com/kiegroup/kie-wb-common/commit/c6a199c852369d53c4b66e3890dc24c1d3e1eeec", "message": "Fix issue 4, 5, 6 and 8 - Now DMN tutorial has improved messages, and refined interaction", "committedDate": "2020-06-22T21:23:59Z", "type": "commit"}, {"oid": "c6a199c852369d53c4b66e3890dc24c1d3e1eeec", "url": "https://github.com/kiegroup/kie-wb-common/commit/c6a199c852369d53c4b66e3890dc24c1d3e1eeec", "message": "Fix issue 4, 5, 6 and 8 - Now DMN tutorial has improved messages, and refined interaction", "committedDate": "2020-06-22T21:23:59Z", "type": "forcePushed"}, {"oid": "80186ff3e7448e34aea54e06dbfc1db01387de90", "url": "https://github.com/kiegroup/kie-wb-common/commit/80186ff3e7448e34aea54e06dbfc1db01387de90", "message": "Apply review comments", "committedDate": "2020-06-23T01:10:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3NzI3Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r447677277", "body": "I think we need to remove some whitespaces here.", "bodyText": "I think we need to remove some whitespaces here.", "bodyHTML": "<p dir=\"auto\">I think we need to remove some whitespaces here.</p>", "author": "jomarko", "createdAt": "2020-06-30T13:22:26Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/tutorial/DMNTutorial.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.tour.tutorial;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.core.JsArray;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.BlockMode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Mode;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Step;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.uberfire.client.mvp.UberElemental;\n+\n+import static java.util.Arrays.asList;\n+\n+@ApplicationScoped\n+public class DMNTutorial {\n+\n+    private final View view;\n+\n+    @Inject\n+    public DMNTutorial(final View view) {\n+        this.view = view;\n+    }\n+\n+    @PostConstruct\n+    void setup() {\n+        view.init(this);\n+    }\n+\n+    public Tutorial getTutorial() {\n+        final List<String> commonAllowedElements = asList(\"canvas\",\n+                                                          \"body\",\n+                                                          \"img\",\n+                                                          \"div.nameEditBoxTable\",\n+                                                          \"i.fa.fa-chevron-right.fa-fw\",\n+                                                          \"i[data-field=\\\"saveButton\\\"].fa.fa-check.nameEditBoxButton.fa-2x\",\n+                                                          \"ul.nav.nav-tabs.uf-tabbar-panel-nav-tabs.nav-tabs-pf\",\n+                                                          \"input[data-field=\\\"nameField\\\"].form-control.nameEditBoxNameBox\");\n+        final Tutorial tutorial = new Tutorial();\n+        tutorial.setLabel(\"DMN 101 Tutorial\");\n+        tutorial.setSteps(asJsArray(asList(\n+\n+                getStep(view.getStepContent(0),\n+                        blockMode(userInteraction(\"CREATED\", \"Decision-\"), allowedSelectors(commonAllowedElements, \"Decision-1\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::.kie-palette\",\n+                        \"Try to drag the rectangle icon from the palette to the canvas.\"),\n+\n+                getStep(view.getStepContent(1),\n+                        blockMode(userInteraction(\"UPDATED\", \"Can drive?\"), allowedSelectors(commonAllowedElements, \"Decision-1\")),\n+                        \"bottom\",\n+                        \"DMNEditorGraph:::Decision-1\",\n+                        \"Try to double-click on the decision node to rename it to \\\"Can drive?\\\".\"),\n+\n+                getStep(view.getStepContent(2),\n+                        blockMode(userInteraction(\"CREATED\", \"InputData-\"), allowedSelectors(commonAllowedElements, \"InputData-1\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::.kie-palette\",\n+                        \"Try to drag the rounded corner rectangle icon from the palette to the canvas.\"),\n+\n+                getStep(view.getStepContent(3),\n+                        blockMode(userInteraction(\"UPDATED\", \"Age\"), allowedSelectors(commonAllowedElements, \"InputData-1\")),\n+                        \"bottom\",\n+                        \"DMNEditorGraph:::InputData-1\",\n+                        \"Try to double-click on the input node to rename it to \\\"Age\\\".\"),\n+\n+                getStep(view.getStepContent(4),\n+                        blockMode(userInteraction(\"CLICK\", \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\"), allowedSelectors(commonAllowedElements, \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\", \"button[data-animation=\\\"true\\\"][data-delay=\\\"{ \\\"show\\\": 0, \\\"hide\\\": 0 }\\\"][data-html=\\\"false\\\"][data-placement=\\\"left\\\"][data-template=\\\"<div class=\\\"tooltip\\\"><div class=\\\"tooltip-arrow\\\"></div><div class=\\\"tooltip-inner\\\"></div></div>\\\"][data-title=\\\"Properties\\\"][data-trigger=\\\"hover\\\"][data-viewport=\\\"{ \\\"selector\\\": \\\"body\\\", \\\"padding\\\": 0 }\\\"][data-container=\\\"body\\\"][data-original-title=\\\"\\\"].btn.btn-sm.GFVDQLFDIL.btn-link\")),\n+                        \"left\",\n+                        \"DMNEditorHTMLElement:::i.fa.fa-pencil-square-o.fa-lg.fa-fw\",\n+                        \"Open the properties panel by clicking on the pencil icon.\"),\n+\n+                getStep(view.getStepContent(5),\n+                        blockMode(userInteraction(\"CREATED\", \"BOXED_EXPRESSION:::Can drive?\"), allowedSelectors(commonAllowedElements, \"Age\", \"Can drive?\", \"i.fa.fa-pencil-square-o.fa-lg.fa-fw\", \"button[data-animation=\\\"true\\\"][data-delay=\\\"{ \\\"show\\\": 0, \\\"hide\\\": 0 }\\\"][data-html=\\\"false\\\"][data-placement=\\\"left\\\"][data-template=\\\"<div class=\\\"tooltip\\\"><div class=\\\"tooltip-arrow\\\"></div><div class=\\\"tooltip-inner\\\"></div></div>\\\"][data-title=\\\"Properties\\\"][data-trigger=\\\"hover\\\"][data-viewport=\\\"{ \\\"selector\\\": \\\"body\\\", \\\"padding\\\": 0 }\\\"][data-container=\\\"body\\\"][data-original-title=\\\"\\\"].btn.btn-sm.GFVDQLFDIL.btn-link\")),\n+                        \"center\",\n+                        \"\",\n+                        \"Select the decision \\\"Can drive?\\\" and click on the pencil icon that appears at the left side of the node.\"),\n+\n+                getStep(view.getStepContent(6),\n+                        blockMode(userInteraction(\"CLICK\", \"span[data-field=\\\"text\\\"]\"), allowedSelectors(commonAllowedElements, \"div.kie-dmn-return-to-link\", \"BOXED_EXPRESSION:::Can drive?\")),\n+                        \"center\",\n+                        \"\",\n+                        \"Select one of the available boxed expressions by clicking on \\\"Select expression\\\" or pressing \\\"Enter\\\".\"),\n+\n+                getStep(view.getStepContent(7),\n+                        blockMode(userInteraction(\"CLICK\", \"a[data-field=\\\"returnToLink\\\"]\"), allowedSelectors(\"a[data-field=\\\"returnToLink\\\"]\", \"div.kie-dmn-return-to-link\")),\n+                        \"right\",\n+                        \"DMNEditorHTMLElement:::    a[data-field=\\\"returnToLink\\\"]\",", "originalCommit": "80186ff3e7448e34aea54e06dbfc1db01387de90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4OTI4NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3336#discussion_r447689285", "bodyText": "Fixed, thanks!", "author": "karreiro", "createdAt": "2020-06-30T13:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3NzI3Nw=="}], "type": "inlineReview"}, {"oid": "5a8848b56c1a349a5118de79b158c635d141d5aa", "url": "https://github.com/kiegroup/kie-wb-common/commit/5a8848b56c1a349a5118de79b158c635d141d5aa", "message": "Fix whitespace", "committedDate": "2020-06-30T13:37:57Z", "type": "commit"}]}