{"pr_number": 3319, "pr_title": "JBPM-9175: Stunner - Usability improvements around selection / drag capabilities", "pr_author": "handreyrc", "pr_createdAt": "2020-06-02T22:28:53Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3319", "timeline": [{"oid": "c3de3e5f9b346e9a09a0caeb901010e3a73f4118", "url": "https://github.com/kiegroup/kie-wb-common/commit/c3de3e5f9b346e9a09a0caeb901010e3a73f4118", "message": "JBPM-8253: Stunner - node lose selection decorations", "committedDate": "2020-06-03T16:47:57Z", "type": "forcePushed"}, {"oid": "1125801c835837c4e8aced6a9dc1cc04ea95c367", "url": "https://github.com/kiegroup/kie-wb-common/commit/1125801c835837c4e8aced6a9dc1cc04ea95c367", "message": "JBPM-8253: Stunner - node lose selection decorations", "committedDate": "2020-06-04T19:48:35Z", "type": "forcePushed"}, {"oid": "22ddd80d1b90d6f753dae94420ef85fffe860bcb", "url": "https://github.com/kiegroup/kie-wb-common/commit/22ddd80d1b90d6f753dae94420ef85fffe860bcb", "message": "JBPM-8253: Stunner - node lose selection decorations", "committedDate": "2020-06-11T15:14:40Z", "type": "forcePushed"}, {"oid": "d575276a7a7a01c888b17b9930be8f9a650864da", "url": "https://github.com/kiegroup/kie-wb-common/commit/d575276a7a7a01c888b17b9930be8f9a650864da", "message": "JBPM-8253: Stunner - node lose selection decorations", "committedDate": "2020-06-11T15:47:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4ODExMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r443888112", "body": "I'm not following you on these changes about calling `ensureSelection` and about the flag for the `canvasHighlight.unhighLight` call. Which is the goal behind those changes, about usability? about performance?", "bodyText": "I'm not following you on these changes about calling ensureSelection and about the flag for the canvasHighlight.unhighLight call. Which is the goal behind those changes, about usability? about performance?", "bodyHTML": "<p dir=\"auto\">I'm not following you on these changes about calling <code>ensureSelection</code> and about the flag for the <code>canvasHighlight.unhighLight</code> call. Which is the goal behind those changes, about usability? about performance?</p>", "author": "romartin", "createdAt": "2020-06-23T00:01:40Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/ConnectionAcceptorControlImpl.java", "diffHunk": "@@ -257,18 +258,38 @@ private boolean isAccept(final CommandResult<CanvasViolation> result) {\n     private void highlight(final Node node,\n                            final Edge<ViewConnector<?>, Node> connector,\n                            final boolean valid) {\n-        canvasHighlight.unhighLight();\n+        // keep selected nodes\n+        ensureSelection(node);", "originalCommit": "d575276a7a7a01c888b17b9930be8f9a650864da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTQxMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r443889413", "body": "well it's true, but I think we should not consider a node being selected by its state for the shape (`ShapeState.SELECTED`). \r\nFor example, at some point it, if the node gets into an invalid state, the shape will have the state as `ShapeState.INVALID`, but it can be selected as well, so forms, toolbox and any other component that queries the actual selection via the canvas controls will consider it \"selected\".\r\nSo I think that we should consider a node selected by looking at the canvas `SelectionControl`, not looking at the visual attributes. We're already checking the state for the selection control in other \"controls\", so feel free to look at some example and let me know what you think.\r\nAnyway, look at my comment above, not really sure what's the goal for this, so maybe we've not to rely on selection at some point, let's keep brainstorming here", "bodyText": "well it's true, but I think we should not consider a node being selected by its state for the shape (ShapeState.SELECTED).\nFor example, at some point it, if the node gets into an invalid state, the shape will have the state as ShapeState.INVALID, but it can be selected as well, so forms, toolbox and any other component that queries the actual selection via the canvas controls will consider it \"selected\".\nSo I think that we should consider a node selected by looking at the canvas SelectionControl, not looking at the visual attributes. We're already checking the state for the selection control in other \"controls\", so feel free to look at some example and let me know what you think.\nAnyway, look at my comment above, not really sure what's the goal for this, so maybe we've not to rely on selection at some point, let's keep brainstorming here", "bodyHTML": "<p dir=\"auto\">well it's true, but I think we should not consider a node being selected by its state for the shape (<code>ShapeState.SELECTED</code>).<br>\nFor example, at some point it, if the node gets into an invalid state, the shape will have the state as <code>ShapeState.INVALID</code>, but it can be selected as well, so forms, toolbox and any other component that queries the actual selection via the canvas controls will consider it \"selected\".<br>\nSo I think that we should consider a node selected by looking at the canvas <code>SelectionControl</code>, not looking at the visual attributes. We're already checking the state for the selection control in other \"controls\", so feel free to look at some example and let me know what you think.<br>\nAnyway, look at my comment above, not really sure what's the goal for this, so maybe we've not to rely on selection at some point, let's keep brainstorming here</p>", "author": "romartin", "createdAt": "2020-06-23T00:06:00Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/ConnectionAcceptorControlImpl.java", "diffHunk": "@@ -257,18 +258,38 @@ private boolean isAccept(final CommandResult<CanvasViolation> result) {\n     private void highlight(final Node node,\n                            final Edge<ViewConnector<?>, Node> connector,\n                            final boolean valid) {\n-        canvasHighlight.unhighLight();\n+        // keep selected nodes\n+        ensureSelection(node);\n+        canvasHighlight.unhighLight(true);\n+\n         if (null != node && valid) {\n-            if (!node.getInEdges().contains(connector)) {\n+            if (!node.getInEdges().contains(connector) && !isNodeSelected(node)) {\n                 canvasHighlight.highLight(node);\n             }\n         } else if (null != node) {\n             canvasHighlight.invalid(node);\n         }\n     }\n \n+    private void ensureSelection(final Node node) {\n+        if (isNodeSelected(node)) {\n+            canvasHighlight.setSelectedUUID(node.getUUID());\n+        }\n+    }\n+\n+    private boolean isNodeSelected(final Node node) {", "originalCommit": "d575276a7a7a01c888b17b9930be8f9a650864da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxMzYwMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r444313602", "bodyText": "@romartin I tried the SelectionManager, however, I notice that the UUID of the selected shape recovered from the SelectionManager doesn't match the ones in the internal list kept by the CanvasHighlight. Thats why I changed the approach for checking the style.\nRegarding to possible issues with the INVALID state, it only happens when you try to stablish new connections by dragging sequence flows. In case of dragging a shape, the connections already stablished are aways valid. I couldn't detect any issue while testing.", "author": "handreyrc", "createdAt": "2020-06-23T15:28:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzNDQ0Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r448934446", "bodyText": "Yeah it makes not much sense that the SelectionManager ids do not match with the real selection on the UI.... anyway, please rely on the SelectionControl (Stunner), which it's the one that holds the selection state for the UI. Does it works?", "author": "romartin", "createdAt": "2020-07-02T11:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTU2Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r451809567", "bodyText": "hey @romartin, I've changed the approach to solve this issue. The root cause was in the methods allowTarget() and allowSource().", "author": "handreyrc", "createdAt": "2020-07-08T20:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MTUwOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r443891508", "body": "As also commented above, I need to figure out why you're adding this new `selectedUUID` field, added more state in the class, to achieve the overall goal. \r\nThe lifecycle for this `CanvasHighlight` stuff was supposed to be really simple - by calling the `highLight` method it's just changing the visual style for each node, and finally by calling `unhighLight` it will just get back to normal visualization. The implementation has some internal collection of uuids, but that's not exposed in the API and should not change the result of the public methods calls.\r\nOn the other hand by looking your the changes on the public methods, it's a bit more confusing to me the lifecycle.\r\nI'm not complaining about this, you've more feedback than me hehe, just let's try to clarify the goals to achieve and do collective thinking on the best way to do it :)", "bodyText": "As also commented above, I need to figure out why you're adding this new selectedUUID field, added more state in the class, to achieve the overall goal.\nThe lifecycle for this CanvasHighlight stuff was supposed to be really simple - by calling the highLight method it's just changing the visual style for each node, and finally by calling unhighLight it will just get back to normal visualization. The implementation has some internal collection of uuids, but that's not exposed in the API and should not change the result of the public methods calls.\nOn the other hand by looking your the changes on the public methods, it's a bit more confusing to me the lifecycle.\nI'm not complaining about this, you've more feedback than me hehe, just let's try to clarify the goals to achieve and do collective thinking on the best way to do it :)", "bodyHTML": "<p dir=\"auto\">As also commented above, I need to figure out why you're adding this new <code>selectedUUID</code> field, added more state in the class, to achieve the overall goal.<br>\nThe lifecycle for this <code>CanvasHighlight</code> stuff was supposed to be really simple - by calling the <code>highLight</code> method it's just changing the visual style for each node, and finally by calling <code>unhighLight</code> it will just get back to normal visualization. The implementation has some internal collection of uuids, but that's not exposed in the API and should not change the result of the public methods calls.<br>\nOn the other hand by looking your the changes on the public methods, it's a bit more confusing to me the lifecycle.<br>\nI'm not complaining about this, you've more feedback than me hehe, just let's try to clarify the goals to achieve and do collective thinking on the best way to do it :)</p>", "author": "romartin", "createdAt": "2020-06-23T00:14:13Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/util/CanvasHighlight.java", "diffHunk": "@@ -35,6 +35,7 @@\n \n     private final Set<String> uuids;\n     private AbstractCanvasHandler canvasHandler;\n+    private String selectedUUID = \"\";", "originalCommit": "d575276a7a7a01c888b17b9930be8f9a650864da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMDcyMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r444320720", "bodyText": "@romartin The ideia of this field it to tag the selected shape if there is one in the context.\nThis issue is happening in a very complex scenario, the highlight is called multiple times invloving the same shape when the inbounds and outbounds of the shape and also the sequence flows are evaluated.", "author": "handreyrc", "createdAt": "2020-06-23T15:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MTUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMDA2Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r451810062", "bodyText": "hey @romartin, I've changed the approach to solve this issue. The root cause was in the methods allowTarget() and allowSource().", "author": "handreyrc", "createdAt": "2020-07-08T20:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MTUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MTgxNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r443891816", "body": "a bit unclear... what does `keepSelection` flag means? which selection?", "bodyText": "a bit unclear... what does keepSelection flag means? which selection?", "bodyHTML": "<p dir=\"auto\">a bit unclear... what does <code>keepSelection</code> flag means? which selection?</p>", "author": "romartin", "createdAt": "2020-06-23T00:15:29Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/util/CanvasHighlight.java", "diffHunk": "@@ -77,16 +84,29 @@ public CanvasHighlight none(final Element<?> node) {\n         return this;\n     }\n \n+    public void setSelectedUUID(String selectedUUID) {\n+        this.selectedUUID = selectedUUID;\n+    }\n+\n     public CanvasHighlight unhighLight() {\n+        return unhighLight(false);\n+    }\n+\n+    public CanvasHighlight unhighLight(boolean keepSelection) {", "originalCommit": "d575276a7a7a01c888b17b9930be8f9a650864da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMDMxOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r451810318", "bodyText": "hey @romartin, I've changed the approach to solve this issue.", "author": "handreyrc", "createdAt": "2020-07-08T20:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MjM4MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r443892381", "body": "if we don't rely on the shape state in the connection acceptor maybe there will be no need to propagate all these delegate methods in all changes classes, although is stricly correct doing it as well, let's keep discussing it", "bodyText": "if we don't rely on the shape state in the connection acceptor maybe there will be no need to propagate all these delegate methods in all changes classes, although is stricly correct doing it as well, let's keep discussing it", "bodyHTML": "<p dir=\"auto\">if we don't rely on the shape state in the connection acceptor maybe there will be no need to propagate all these delegate methods in all changes classes, although is stricly correct doing it as well, let's keep discussing it</p>", "author": "romartin", "createdAt": "2020-06-23T00:17:29Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/shape/impl/ConnectorShape.java", "diffHunk": "@@ -85,4 +85,9 @@ public void applyPosition(final Edge<ViewConnector<W>, Node> element,\n     public void applyState(final ShapeState shapeState) {\n         getShape().applyState(shapeState);\n     }\n+\n+    @Override\n+    public ShapeState getShapeState() {", "originalCommit": "d575276a7a7a01c888b17b9930be8f9a650864da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMDU1Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r451810552", "bodyText": "hey @romartin, I've changed the approach to solve this issue. it is no longer needed.", "author": "handreyrc", "createdAt": "2020-07-08T20:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MjM4MQ=="}], "type": "inlineReview"}, {"oid": "0c99957dc9bbf2a4adb49897e259660010a50285", "url": "https://github.com/kiegroup/kie-wb-common/commit/0c99957dc9bbf2a4adb49897e259660010a50285", "message": "JBPM-8253: Stunner - node lose selection decorations", "committedDate": "2020-06-24T19:38:32Z", "type": "forcePushed"}, {"oid": "4259ed6228e393287a5e968fe16f4eded8899998", "url": "https://github.com/kiegroup/kie-wb-common/commit/4259ed6228e393287a5e968fe16f4eded8899998", "message": "JBPM-8253: Stunner - node lose selection decorations", "committedDate": "2020-06-25T20:53:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyODQzNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r449028434", "body": "```java\r\n(null != id && count > 1 && !id.equals(s)) || (null != id && count > 1 && id.equals(s))\r\n```\r\n\r\ncan be simplified to \r\n\r\n```java\r\n(null != id && count > 1)\r\n```", "bodyText": "(null != id && count > 1 && !id.equals(s)) || (null != id && count > 1 && id.equals(s))\ncan be simplified to\n(null != id && count > 1)", "bodyHTML": "<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"(null != id &amp;&amp; count &gt; 1 &amp;&amp; !id.equals(s)) || (null != id &amp;&amp; count &gt; 1 &amp;&amp; id.equals(s))\n\"><pre>(<span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> id <span class=\"pl-k\">&amp;&amp;</span> count <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>id<span class=\"pl-k\">.</span>equals(s)) <span class=\"pl-k\">||</span> (<span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> id <span class=\"pl-k\">&amp;&amp;</span> count <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">&amp;&amp;</span> id<span class=\"pl-k\">.</span>equals(s))</pre></div>\n<p dir=\"auto\">can be simplified to</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"(null != id &amp;&amp; count &gt; 1)\n\"><pre>(<span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> id <span class=\"pl-k\">&amp;&amp;</span> count <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>)</pre></div>", "author": "hasys", "createdAt": "2020-07-02T14:07:43Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/toolbox/AbstractToolboxControl.java", "diffHunk": "@@ -52,7 +52,10 @@\n \n         @Override\n         public boolean test(String s) {\n-            return (null == id && count == 0) || (null != id && count == 1 && id.equals(s)) || (null != id && count > 1 && !id.equals(s));\n+            return (null == id && count == 0) ||\n+                    (null != id && count == 1 && id.equals(s)) ||\n+                    (null != id && count > 1 && !id.equals(s)) ||", "originalCommit": "4259ed6228e393287a5e968fe16f4eded8899998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMTEyMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3319#discussion_r451811123", "bodyText": "Hey @hasys, good catch!\nI've already updated the code.", "author": "handreyrc", "createdAt": "2020-07-08T20:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyODQzNA=="}], "type": "inlineReview"}, {"oid": "d456ffc751d64ec7990f452eaa49ebb58e7637e9", "url": "https://github.com/kiegroup/kie-wb-common/commit/d456ffc751d64ec7990f452eaa49ebb58e7637e9", "message": "JBPM-9019: Stunner - The toolbox menu is not displayed when selected immediately after multiselection", "committedDate": "2020-07-06T21:03:19Z", "type": "commit"}, {"oid": "2ff0ebf0f4ab601d49d3b2c033c72c17a8938b5e", "url": "https://github.com/kiegroup/kie-wb-common/commit/2ff0ebf0f4ab601d49d3b2c033c72c17a8938b5e", "message": "JBPM-8253: Stunner - node lose selection decorations", "committedDate": "2020-07-06T21:03:19Z", "type": "commit"}, {"oid": "12092d3530a85683e249d5d0514038f1bc6d1692", "url": "https://github.com/kiegroup/kie-wb-common/commit/12092d3530a85683e249d5d0514038f1bc6d1692", "message": "JBPM-9019: Stunner - The toolbox menu is not displayed when selected immediately after multiselection", "committedDate": "2020-07-06T21:31:31Z", "type": "commit"}, {"oid": "12092d3530a85683e249d5d0514038f1bc6d1692", "url": "https://github.com/kiegroup/kie-wb-common/commit/12092d3530a85683e249d5d0514038f1bc6d1692", "message": "JBPM-9019: Stunner - The toolbox menu is not displayed when selected immediately after multiselection", "committedDate": "2020-07-06T21:31:31Z", "type": "forcePushed"}]}