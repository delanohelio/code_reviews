{"pr_number": 713, "pr_title": "Add step to check secure protocols supported by server", "pr_author": "uarlouski", "pr_createdAt": "2020-07-01T10:28:36Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/713", "timeline": [{"oid": "11dab07bd8f7707a6480fe39c1947bad2bb08da4", "url": "https://github.com/vividus-framework/vividus/commit/11dab07bd8f7707a6480fe39c1947bad2bb08da4", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-01T10:46:58Z", "type": "forcePushed"}, {"oid": "4387a7ee2ea9b5f61b7975ae846d5f71ec3d3c89", "url": "https://github.com/vividus-framework/vividus/commit/4387a7ee2ea9b5f61b7975ae846d5f71ec3d3c89", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-01T10:59:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5NzQwMg==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448597402", "body": "org.vividus.util.function.CheckedSupplier", "bodyText": "org.vividus.util.function.CheckedSupplier", "bodyHTML": "<p dir=\"auto\">org.vividus.util.function.CheckedSupplier</p>", "author": "valfirst", "createdAt": "2020-07-01T20:24:51Z", "path": "vividus-http-client/src/main/java/org/vividus/http/client/SslContextFactory.java", "diffHunk": "@@ -93,4 +96,10 @@ public void setPrivateKeyPassword(String privateKeyPassword)\n     {\n         this.privateKeyPassword = privateKeyPassword;\n     }\n+\n+    @FunctionalInterface\n+    private interface GeneralSecurityExceptionSupplier<T>", "originalCommit": "4387a7ee2ea9b5f61b7975ae846d5f71ec3d3c89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5OTE3OQ==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448599179", "body": "what about overloading method `getComparisonRule` to accept also array as input parameter?", "bodyText": "what about overloading method getComparisonRule to accept also array as input parameter?", "bodyHTML": "<p dir=\"auto\">what about overloading method <code>getComparisonRule</code> to accept also array as input parameter?</p>", "author": "valfirst", "createdAt": "2020-07-01T20:28:43Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/ssl/SslSteps.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.ssl;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.List;\n+\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import org.jbehave.core.annotations.Then;\n+import org.vividus.bdd.steps.ListComparisonRule;\n+import org.vividus.http.client.ISslContextFactory;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class SslSteps\n+{\n+    private static final int SSL_PORT = 443;\n+\n+    private final ISoftAssert softAssert;\n+    private final ISslContextFactory sslContextFactory;\n+\n+    public SslSteps(ISoftAssert softAssert, ISslContextFactory sslContextFactory)\n+    {\n+        this.softAssert = softAssert;\n+        this.sslContextFactory = sslContextFactory;\n+    }\n+\n+    /**\n+     * Checks that a server defined by the <b>hostname</b> supports secure protocols defined by the\n+     * <b>protocols</b> parameter.\n+     *\n+     * @param hostname server host e.g. example.com\n+     * @param rule one of the CONTAIN, ARE_EQUAL_TO, ARE_EQUAL_TO_ORDERED_LIST rules\n+     * @param protocols comma separated list of protocols\n+     * @throws GeneralSecurityException If a security exception occurred\n+     * @throws IOException If an input or output exception occurred\n+     */\n+    @Then(\"server `$hostname` supports secure protocols that $rule `$protocols`\")\n+    public void checkSupportedSecureProtocols(String hostname, ListComparisonRule rule, List<String> protocols)\n+            throws GeneralSecurityException, IOException\n+    {\n+        SSLSocketFactory socketFactory = sslContextFactory.getDefaultSslContext().getSocketFactory();\n+        try (SSLSocket socket = (SSLSocket) socketFactory.createSocket(hostname, SSL_PORT))\n+        {\n+            List<String> enabledProtocols = List.of(socket.getEnabledProtocols());\n+            softAssert.assertThat(\"Enabled secure protocols\", enabledProtocols, rule.getComparisonRule(protocols));", "originalCommit": "4387a7ee2ea9b5f61b7975ae846d5f71ec3d3c89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5OTQxMA==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448599410", "body": "would you mind adding the documentation for this rule?", "bodyText": "would you mind adding the documentation for this rule?", "bodyHTML": "<p dir=\"auto\">would you mind adding the documentation for this rule?</p>", "author": "valfirst", "createdAt": "2020-07-01T20:29:16Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ListComparisonRule.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+\n+public enum ListComparisonRule", "originalCommit": "4387a7ee2ea9b5f61b7975ae846d5f71ec3d3c89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwMDg0OQ==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448600849", "body": "`GeneralSecurityException` is not thrown", "bodyText": "GeneralSecurityException is not thrown", "bodyHTML": "<p dir=\"auto\"><code>GeneralSecurityException</code> is not thrown</p>", "author": "valfirst", "createdAt": "2020-07-01T20:32:21Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/ssl/SslSteps.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.ssl;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.List;\n+\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import org.jbehave.core.annotations.Then;\n+import org.vividus.bdd.steps.ListComparisonRule;\n+import org.vividus.http.client.ISslContextFactory;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class SslSteps\n+{\n+    private static final int SSL_PORT = 443;\n+\n+    private final ISoftAssert softAssert;\n+    private final ISslContextFactory sslContextFactory;\n+\n+    public SslSteps(ISoftAssert softAssert, ISslContextFactory sslContextFactory)\n+    {\n+        this.softAssert = softAssert;\n+        this.sslContextFactory = sslContextFactory;\n+    }\n+\n+    /**\n+     * Checks that a server defined by the <b>hostname</b> supports secure protocols defined by the\n+     * <b>protocols</b> parameter.\n+     *\n+     * @param hostname server host e.g. example.com\n+     * @param rule one of the CONTAIN, ARE_EQUAL_TO, ARE_EQUAL_TO_ORDERED_LIST rules\n+     * @param protocols comma separated list of protocols\n+     * @throws GeneralSecurityException If a security exception occurred\n+     * @throws IOException If an input or output exception occurred\n+     */\n+    @Then(\"server `$hostname` supports secure protocols that $rule `$protocols`\")\n+    public void checkSupportedSecureProtocols(String hostname, ListComparisonRule rule, List<String> protocols)\n+            throws GeneralSecurityException, IOException", "originalCommit": "4387a7ee2ea9b5f61b7975ae846d5f71ec3d3c89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNTQ1OQ==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448605459", "body": "`return Matchers.hasItems((T[]) values.toArray(new Object[0]));`", "bodyText": "return Matchers.hasItems((T[]) values.toArray(new Object[0]));", "bodyHTML": "<p dir=\"auto\"><code>return Matchers.hasItems((T[]) values.toArray(new Object[0]));</code></p>", "author": "valfirst", "createdAt": "2020-07-01T20:42:25Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/ListComparisonRule.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+\n+public enum ListComparisonRule\n+{\n+    CONTAIN\n+    {\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        @Override\n+        public <T> Matcher<Iterable<T>> getComparisonRule(List<T> values)\n+        {\n+            return values.stream()\n+                         .map(Matchers::hasItem)\n+                         .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                             m -> Matchers.allOf((List) m)));", "originalCommit": "4387a7ee2ea9b5f61b7975ae846d5f71ec3d3c89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNTY2Ng==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448605666", "bodyText": "the same for another items", "author": "valfirst", "createdAt": "2020-07-01T20:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNTQ1OQ=="}], "type": "inlineReview"}, {"oid": "304d798014d67226397b562faac7d5b4d27ad8e5", "url": "https://github.com/vividus-framework/vividus/commit/304d798014d67226397b562faac7d5b4d27ad8e5", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-02T09:39:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4MTgxNw==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448881817", "body": "why do you need `allOf` here?", "bodyText": "why do you need allOf here?", "bodyHTML": "<p dir=\"auto\">why do you need <code>allOf</code> here?</p>", "author": "valfirst", "createdAt": "2020-07-02T09:45:17Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/steps/CollectionComparisonRule.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+\n+public enum CollectionComparisonRule\n+{\n+    CONTAIN\n+    {\n+        @Override\n+        public <T> Matcher<Iterable<T>> getComparisonRule(List<T> items)\n+        {\n+            return Matchers.hasItems(asArray(items));\n+        }\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        @Override\n+        public <T> Matcher<T[]> getComparisonRule(T[] items)\n+        {\n+            return Stream.of(items)\n+                         .map(Matchers::hasItemInArray)\n+                         .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                             m -> Matchers.allOf((Iterable) m)));\n+        }\n+    },\n+    ARE_EQUAL_TO\n+    {\n+        @Override\n+        public <T> Matcher<Iterable<T>> getComparisonRule(List<T> items)\n+        {\n+            return Matchers.allOf(Matchers.containsInAnyOrder(asArray(items)));", "originalCommit": "304d798014d67226397b562faac7d5b4d27ad8e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNzcyMg==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448927722", "bodyText": "containsInAnyOrder returns Iterable<? extends T> while hasItems returns Iterable, so I use allOf to \"align\"  types", "author": "uarlouski", "createdAt": "2020-07-02T11:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4MTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzAyNA==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448933024", "bodyText": "public <T> Matcher<Iterable<? extends T>> getComparisonRule(List<T> items) ?", "author": "valfirst", "createdAt": "2020-07-02T11:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4MTgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzNjA3OA==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448936078", "bodyText": "Github hidden type param for hasItems, that's Iterable < T >", "author": "uarlouski", "createdAt": "2020-07-02T11:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4MTgxNw=="}], "type": "inlineReview"}, {"oid": "6375f0a4a0bc67c37790ab380ba56893a85548a4", "url": "https://github.com/vividus-framework/vividus/commit/6375f0a4a0bc67c37790ab380ba56893a85548a4", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-02T12:17:06Z", "type": "forcePushed"}, {"oid": "7f5244ee7e55f2a4a6217c1c2bdc14a7e8c42df7", "url": "https://github.com/vividus-framework/vividus/commit/7f5244ee7e55f2a4a6217c1c2bdc14a7e8c42df7", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-02T12:27:12Z", "type": "forcePushed"}, {"oid": "bdc557cae17552d6c9eeffb3e4657e1d4717d532", "url": "https://github.com/vividus-framework/vividus/commit/bdc557cae17552d6c9eeffb3e4657e1d4717d532", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-02T12:28:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NDY0NA==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r448994644", "body": "would you mind adding the documentation for this step?", "bodyText": "would you mind adding the documentation for this step?", "bodyHTML": "<p dir=\"auto\">would you mind adding the documentation for this step?</p>", "author": "valfirst", "createdAt": "2020-07-02T13:17:45Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/ssl/SslSteps.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.ssl;\n+\n+import java.io.IOException;\n+\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import org.jbehave.core.annotations.Then;\n+import org.vividus.bdd.steps.CollectionComparisonRule;\n+import org.vividus.http.client.ISslContextFactory;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class SslSteps\n+{\n+    private static final int SSL_PORT = 443;\n+\n+    private final ISoftAssert softAssert;\n+    private final ISslContextFactory sslContextFactory;\n+\n+    public SslSteps(ISoftAssert softAssert, ISslContextFactory sslContextFactory)\n+    {\n+        this.softAssert = softAssert;\n+        this.sslContextFactory = sslContextFactory;\n+    }\n+\n+    /**\n+     * Checks that a server defined by the <b>hostname</b> supports secure protocols defined by the\n+     * <b>protocols</b> parameter.\n+     *\n+     * @param hostname server host e.g. example.com\n+     * @param rule one of the CONTAIN, ARE_EQUAL_TO, ARE_EQUAL_TO_ORDERED_COLLECTION rules\n+     * @param protocols comma separated list of protocols\n+     * @throws IOException If an input or output exception occurred\n+     */\n+    @Then(\"server `$hostname` supports secure protocols that $rule `$protocols`\")", "originalCommit": "bdc557cae17552d6c9eeffb3e4657e1d4717d532", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da0e7fc87bb19e4431375eb2f42fdcd0bafa879c", "url": "https://github.com/vividus-framework/vividus/commit/da0e7fc87bb19e4431375eb2f42fdcd0bafa879c", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-02T13:44:27Z", "type": "forcePushed"}, {"oid": "fe07a9c54d31096c52b1f15bec6b8fa6b84684cf", "url": "https://github.com/vividus-framework/vividus/commit/fe07a9c54d31096c52b1f15bec6b8fa6b84684cf", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-02T13:50:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MDAzNw==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r449050037", "body": "From my point of view, it is easier to read using a data source\r\n\r\nCONTAIN, List.of(1, 0), List.of(1, 1, 1), false\r\nwhere\r\nrule, expected, actual, comparisonResult", "bodyText": "From my point of view, it is easier to read using a data source\nCONTAIN, List.of(1, 0), List.of(1, 1, 1), false\nwhere\nrule, expected, actual, comparisonResult", "bodyHTML": "<p dir=\"auto\">From my point of view, it is easier to read using a data source</p>\n<p dir=\"auto\">CONTAIN, List.of(1, 0), List.of(1, 1, 1), false<br>\nwhere<br>\nrule, expected, actual, comparisonResult</p>", "author": "ikalinin1", "createdAt": "2020-07-02T14:38:24Z", "path": "vividus-bdd-engine/src/test/java/org/vividus/bdd/steps/CollectionComparisonRuleTests.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.DynamicTest.dynamicTest;\n+import static org.vividus.bdd.steps.CollectionComparisonRule.ARE_EQUAL_TO;\n+import static org.vividus.bdd.steps.CollectionComparisonRule.ARE_EQUAL_TO_ORDERED_COLLECTION;\n+import static org.vividus.bdd.steps.CollectionComparisonRule.CONTAIN;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.DynamicTest;\n+import org.junit.jupiter.api.TestFactory;\n+\n+class CollectionComparisonRuleTests\n+{\n+    @TestFactory\n+    Stream<DynamicTest> listRules()", "originalCommit": "fe07a9c54d31096c52b1f15bec6b8fa6b84684cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NTA1Mg==", "url": "https://github.com/vividus-framework/vividus/pull/713#discussion_r449065052", "bodyText": "depends on :)", "author": "uarlouski", "createdAt": "2020-07-02T15:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MDAzNw=="}], "type": "inlineReview"}, {"oid": "4bd5acf11f7f83cc0c17228c6781991b44e037be", "url": "https://github.com/vividus-framework/vividus/commit/4bd5acf11f7f83cc0c17228c6781991b44e037be", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-02T14:59:56Z", "type": "commit"}, {"oid": "4bd5acf11f7f83cc0c17228c6781991b44e037be", "url": "https://github.com/vividus-framework/vividus/commit/4bd5acf11f7f83cc0c17228c6781991b44e037be", "message": "Add step to check secure protocols supported by server", "committedDate": "2020-07-02T14:59:56Z", "type": "forcePushed"}]}