{"pr_number": 1516, "pr_title": "Add a requireNonNull to ensure the extension XML serializer is not null when writeExtension() is called", "pr_author": "miovd", "pr_createdAt": "2020-10-13T08:52:03Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1516", "timeline": [{"oid": "171e431cc6a00ff8260984ee623031051ec22057", "url": "https://github.com/powsybl/powsybl-core/commit/171e431cc6a00ff8260984ee623031051ec22057", "message": "Add a requireNonNull to ensure the extension XML serializer is not null when writeExtension() is called + filter extensions not in options during export\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-10-13T08:49:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4NTEzOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1516#discussion_r503785139", "body": "This test is already performed in getExtensionXmlSerializer\r\n```\r\n    private static ExtensionXmlSerializer getExtensionXmlSerializer(ExportOptions options, Extension<? extends Identifiable<?>> extension) {\r\n        if (options.withExtension(extension.getName())) {\r\n        ....\r\n        }\r\n     }\r\n```", "bodyText": "This test is already performed in getExtensionXmlSerializer\n    private static ExtensionXmlSerializer getExtensionXmlSerializer(ExportOptions options, Extension<? extends Identifiable<?>> extension) {\n        if (options.withExtension(extension.getName())) {\n        ....\n        }\n     }", "bodyHTML": "<p dir=\"auto\">This test is already performed in getExtensionXmlSerializer</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    private static ExtensionXmlSerializer getExtensionXmlSerializer(ExportOptions options, Extension&lt;? extends Identifiable&lt;?&gt;&gt; extension) {\n        if (options.withExtension(extension.getName())) {\n        ....\n        }\n     }\"><pre><code>    private static ExtensionXmlSerializer getExtensionXmlSerializer(ExportOptions options, Extension&lt;? extends Identifiable&lt;?&gt;&gt; extension) {\n        if (options.withExtension(extension.getName())) {\n        ....\n        }\n     }\n</code></pre></div>", "author": "mathbagu", "createdAt": "2020-10-13T09:00:10Z", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "diffHunk": "@@ -216,6 +216,7 @@ private static void writeExtensions(Network n, NetworkXmlWriterContext context,\n \n             Collection<? extends Extension<? extends Identifiable<?>>> extensions = identifiable.getExtensions().stream()\n                     .filter(e -> getExtensionXmlSerializer(options, e) != null)\n+                    .filter(e -> context.getOptions().withExtension(e.getName()))", "originalCommit": "171e431cc6a00ff8260984ee623031051ec22057", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NjE0OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1516#discussion_r503796148", "bodyText": "You're right!", "author": "miovd", "createdAt": "2020-10-13T09:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4NTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NDAwMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1516#discussion_r503794003", "body": "`Objects.requireNonNull` throws a NullPointerException: do we need a more specific exception like it's thrown in getExtensionXmlSerializer?\r\n\r\nI think we never have a null extensionXmlSerializer there. The `getExtensionXmlSerializer` return null in two cases:\r\n- the extension should not be serialized (no data for the current variant). It never happens because these extensions are filtered in `writeExtensions`\r\n- the extension is skipped (options). It never happens because these extensions are filtered in `writeExtensions`\r\n\r\nFrom my point of view, we should throw an AssertionError here with an explicit message if the serializer is null because something really unexpected happened\r\n", "bodyText": "Objects.requireNonNull throws a NullPointerException: do we need a more specific exception like it's thrown in getExtensionXmlSerializer?\nI think we never have a null extensionXmlSerializer there. The getExtensionXmlSerializer return null in two cases:\n\nthe extension should not be serialized (no data for the current variant). It never happens because these extensions are filtered in writeExtensions\nthe extension is skipped (options). It never happens because these extensions are filtered in writeExtensions\n\nFrom my point of view, we should throw an AssertionError here with an explicit message if the serializer is null because something really unexpected happened", "bodyHTML": "<p dir=\"auto\"><code>Objects.requireNonNull</code> throws a NullPointerException: do we need a more specific exception like it's thrown in getExtensionXmlSerializer?</p>\n<p dir=\"auto\">I think we never have a null extensionXmlSerializer there. The <code>getExtensionXmlSerializer</code> return null in two cases:</p>\n<ul dir=\"auto\">\n<li>the extension should not be serialized (no data for the current variant). It never happens because these extensions are filtered in <code>writeExtensions</code></li>\n<li>the extension is skipped (options). It never happens because these extensions are filtered in <code>writeExtensions</code></li>\n</ul>\n<p dir=\"auto\">From my point of view, we should throw an AssertionError here with an explicit message if the serializer is null because something really unexpected happened</p>", "author": "mathbagu", "createdAt": "2020-10-13T09:13:36Z", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "diffHunk": "@@ -150,7 +150,7 @@ private static void writeExtensionNamespaces(Network n, ExportOptions options, X\n \n     private static void writeExtension(Extension<? extends Identifiable<?>> extension, NetworkXmlWriterContext context) throws XMLStreamException {\n         XMLStreamWriter writer = context.getExtensionsWriter();\n-        ExtensionXmlSerializer extensionXmlSerializer = getExtensionXmlSerializer(context.getOptions(), extension);\n+        ExtensionXmlSerializer extensionXmlSerializer = Objects.requireNonNull(getExtensionXmlSerializer(context.getOptions(), extension));", "originalCommit": "171e431cc6a00ff8260984ee623031051ec22057", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NzUwNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1516#discussion_r503797504", "bodyText": "As said in the comment of the PR, extensionXmlSerializer is never null because when writeExtension is called, it has already been checked that extension has an XML serializer. I added a requireNonNull to reinforce that when we go here, we are not supposed to have a null XML serializer. What bothers me is that getExtensionXmlSerializer twice though.", "author": "miovd", "createdAt": "2020-10-13T09:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NDAwMw=="}], "type": "inlineReview"}, {"oid": "53ea0f1a628718f4eeacdfa8ca0d7521fd0ba780", "url": "https://github.com/powsybl/powsybl-core/commit/53ea0f1a628718f4eeacdfa8ca0d7521fd0ba780", "message": "Don't make the same check twice\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-10-13T09:20:55Z", "type": "commit"}, {"oid": "dece4d24a5a018454ab531fbb6fb4423282133c0", "url": "https://github.com/powsybl/powsybl-core/commit/dece4d24a5a018454ab531fbb6fb4423282133c0", "message": "Replace requireNonNull by a check that throws an AssertionException\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-10-13T12:15:59Z", "type": "commit"}, {"oid": "5302cf75c532ff0e964be68ad33448f7bb859068", "url": "https://github.com/powsybl/powsybl-core/commit/5302cf75c532ff0e964be68ad33448f7bb859068", "message": "Merge branch 'master' into fix_extensions", "committedDate": "2020-10-15T12:27:36Z", "type": "commit"}, {"oid": "31b5f8c0dbce3d915c245e465ae86c599fcb94a1", "url": "https://github.com/powsybl/powsybl-core/commit/31b5f8c0dbce3d915c245e465ae86c599fcb94a1", "message": "Merge branch 'master' into fix_extensions", "committedDate": "2020-10-15T12:43:30Z", "type": "commit"}]}