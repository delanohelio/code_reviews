{"pr_number": 1319, "pr_title": "Addition of an alias system on Identifiables in IIDM", "pr_author": "murgeyseb", "pr_createdAt": "2020-05-22T04:36:47Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1319", "merge_commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "timeline": [{"oid": "10407b9a8bb1a451d5612ca1ef96946695037980", "url": "https://github.com/powsybl/powsybl-core/commit/10407b9a8bb1a451d5612ca1ef96946695037980", "message": "First version of IIDM aliases addition\n\nSigned-off-by: S\u00e9bastien Murgey <sebastien.murgey@gmail.com>", "committedDate": "2020-05-22T04:43:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNjg5MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430926891", "body": "@MioRtia do you confirm that we decided recently (2 or 3 weeks ago) to change the strategy for the default implementation of new methods to throw less exceptions?\r\nIf it's the case I propose:\r\n- getAliases -> return an empty set\r\n- addAlias -> silently ignore\r\n- removeAlias -> silently ignore\r\n- hasAliases -> return false", "bodyText": "@MioRtia do you confirm that we decided recently (2 or 3 weeks ago) to change the strategy for the default implementation of new methods to throw less exceptions?\nIf it's the case I propose:\n\ngetAliases -> return an empty set\naddAlias -> silently ignore\nremoveAlias -> silently ignore\nhasAliases -> return false", "bodyHTML": "<p dir=\"auto\">@MioRtia do you confirm that we decided recently (2 or 3 weeks ago) to change the strategy for the default implementation of new methods to throw less exceptions?<br>\nIf it's the case I propose:</p>\n<ul dir=\"auto\">\n<li>getAliases -&gt; return an empty set</li>\n<li>addAlias -&gt; silently ignore</li>\n<li>removeAlias -&gt; silently ignore</li>\n<li>hasAliases -&gt; return false</li>\n</ul>", "author": "mathbagu", "createdAt": "2020-05-27T07:57:15Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java", "diffHunk": "@@ -41,6 +38,35 @@ default String getName() {\n         return getNameOrId();\n     }\n \n+    /**\n+     * Get the aliases of the object.\n+     */\n+    default Set<String> getAliases() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Add an alias to the object. Aliases must be unique in associated Network, and different\n+     * from any identifiable ID.\n+     */\n+    default void addAlias(String alias) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Remove an alias of the object.\n+     */\n+    default void removeAlias(String alias) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Return true if identifiable has aliases.\n+     */\n+    default boolean hasAliases() {\n+        throw new UnsupportedOperationException();\n+    }\n+", "originalCommit": "2b49777ba791b911e76d984078a3094c523f9134", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10de9299bad16a575d3546c7723058962386d0f7", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\nindex c09b349fc..f02c50844 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n", "chunk": "@@ -50,21 +50,19 @@ public interface Identifiable<I extends Identifiable<I>> extends Extendable<I> {\n      * from any identifiable ID.\n      */\n     default void addAlias(String alias) {\n-        throw new UnsupportedOperationException();\n     }\n \n     /**\n      * Remove an alias of the object.\n      */\n     default void removeAlias(String alias) {\n-        throw new UnsupportedOperationException();\n     }\n \n     /**\n      * Return true if identifiable has aliases.\n      */\n     default boolean hasAliases() {\n-        throw new UnsupportedOperationException();\n+        return false;\n     }\n \n     /**\n", "next_change": {"commit": "1645bcd979eeff82197e98eeba786547e9f3e439", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\nindex f02c50844..67bd276ba 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n", "chunk": "@@ -38,33 +41,6 @@ public interface Identifiable<I extends Identifiable<I>> extends Extendable<I> {\n         return getNameOrId();\n     }\n \n-    /**\n-     * Get the aliases of the object.\n-     */\n-    default Set<String> getAliases() {\n-        return Collections.emptySet();\n-    }\n-\n-    /**\n-     * Add an alias to the object. Aliases must be unique in associated Network, and different\n-     * from any identifiable ID.\n-     */\n-    default void addAlias(String alias) {\n-    }\n-\n-    /**\n-     * Remove an alias of the object.\n-     */\n-    default void removeAlias(String alias) {\n-    }\n-\n-    /**\n-     * Return true if identifiable has aliases.\n-     */\n-    default boolean hasAliases() {\n-        return false;\n-    }\n-\n     /**\n      * Return an optional containing the name  of the object if it exists. If not, return an empty optional.\n      */\n", "next_change": {"commit": "21af21418db69dd7f47471a5c49919db118b97fd", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\nindex 67bd276ba..b70fb4eaf 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n", "chunk": "@@ -41,6 +38,28 @@ public interface Identifiable<I extends Identifiable<I>> extends Extendable<I> {\n         return getNameOrId();\n     }\n \n+    /**\n+     * Get the aliases of the object.\n+     */\n+    default Set<String> getAliases() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Add an alias to the object. Aliases must be unique in associated Network, and different\n+     * from any identifiable ID.\n+     */\n+    default void addAlias(String alias) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Remove an alias of the object.\n+     */\n+    default void removeAlias(String alias) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     /**\n      * Return an optional containing the name  of the object if it exists. If not, return an empty optional.\n      */\n", "next_change": {"commit": "bf669ce1ba598fe0149a51a75488350c00d18bd9", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\nindex b70fb4eaf..c09b349fc 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n", "chunk": "@@ -60,6 +60,13 @@ public interface Identifiable<I extends Identifiable<I>> extends Extendable<I> {\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Return true if identifiable has aliases.\n+     */\n+    default boolean hasAliases() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     /**\n      * Return an optional containing the name  of the object if it exists. If not, return an empty optional.\n      */\n", "next_change": {"commit": "996cd2a21c5eb2bd0b5beecf2796cb76e6347495", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\nindex c09b349fc..f02c50844 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n", "chunk": "@@ -50,21 +50,19 @@ public interface Identifiable<I extends Identifiable<I>> extends Extendable<I> {\n      * from any identifiable ID.\n      */\n     default void addAlias(String alias) {\n-        throw new UnsupportedOperationException();\n     }\n \n     /**\n      * Remove an alias of the object.\n      */\n     default void removeAlias(String alias) {\n-        throw new UnsupportedOperationException();\n     }\n \n     /**\n      * Return true if identifiable has aliases.\n      */\n     default boolean hasAliases() {\n-        throw new UnsupportedOperationException();\n+        return false;\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\nindex c09b349fc..f02c50844 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Identifiable.java\n", "chunk": "@@ -50,21 +50,19 @@ public interface Identifiable<I extends Identifiable<I>> extends Extendable<I> {\n      * from any identifiable ID.\n      */\n     default void addAlias(String alias) {\n-        throw new UnsupportedOperationException();\n     }\n \n     /**\n      * Remove an alias of the object.\n      */\n     default void removeAlias(String alias) {\n-        throw new UnsupportedOperationException();\n     }\n \n     /**\n      * Return true if identifiable has aliases.\n      */\n     default boolean hasAliases() {\n-        throw new UnsupportedOperationException();\n+        return false;\n     }\n \n     /**\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "5fedcc0e86fa8575824757cd6eb2785c74830fae", "committedDate": "2020-09-08 13:34:49 +0200", "message": "Add the possibility to associate a type to an alias (indicating what it corresponds to) (#1402)"}, {"oid": "8c0bd0517204c0efd43b936a80d1a5abd2df8c5e", "committedDate": "2020-11-27 09:53:12 +0100", "message": "Add possibility to ensure alias unicity (#1508)"}, {"oid": "4174a71debb06042aed28e8cdc146182f0e2cac3", "committedDate": "2021-02-03 11:42:52 +0100", "message": "Fix empty alias type management (#1611)"}, {"oid": "c96036d943ef0bb1669e29c045e4d1aef4eb85eb", "committedDate": "2021-11-02 13:19:33 +0100", "message": "Add Identifiable enum type (#1859)"}, {"oid": "1825804083a6cff7ba5a22e33681dc713c82b6df", "committedDate": "2021-11-29 12:40:24 +0100", "message": "Remove identifiable property (#1876)"}, {"oid": "86097970b7086042d5173a2100069b3c2187dcfb", "committedDate": "2022-04-13 11:57:37 +0200", "message": "Set Identifiable name (#2078)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODU0Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430928546", "body": "Do we really need this method: what is the risk to change the behavior of the `getIdentifiable(String id)` if we consider aliases like unique IDs. At the end, all the user code would use this new method, don't they?", "bodyText": "Do we really need this method: what is the risk to change the behavior of the getIdentifiable(String id) if we consider aliases like unique IDs. At the end, all the user code would use this new method, don't they?", "bodyHTML": "<p dir=\"auto\">Do we really need this method: what is the risk to change the behavior of the <code>getIdentifiable(String id)</code> if we consider aliases like unique IDs. At the end, all the user code would use this new method, don't they?</p>", "author": "mathbagu", "createdAt": "2020-05-27T08:00:02Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java", "diffHunk": "@@ -661,12 +661,22 @@ default HvdcLine getHvdcLine(HvdcConverterStation converterStation) {\n     HvdcLineAdder newHvdcLine();\n \n     /**\n-     * Get a equipment.\n+     * Get an equipment by its ID.\n      *\n      * @param id the id of the equipment\n      */\n     Identifiable<?> getIdentifiable(String id);\n \n+    /**\n+     * Get an equipment by its ID or eventually an alias.\n+     *\n+     * @param idOrAlias the id or an alias of the equipment\n+     * @param searchInAlias if true then searches in the alias and the IDs. If false, searches only by ID.\n+     */\n+    default Identifiable<?> getIdentifiable(String idOrAlias, boolean searchInAlias) {\n+        throw new UnsupportedOperationException();\n+    }\n+", "originalCommit": "2b49777ba791b911e76d984078a3094c523f9134", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0OTEyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430949120", "bodyText": "I do not know if it may be interesting to search objects by ID uniquely.", "author": "murgeyseb", "createdAt": "2020-05-27T08:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3MDQ3Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430970476", "bodyText": "As searching also with alias could impact performance, it might be interesting to keep the possibility to only seach with primary id", "author": "geofjamg", "createdAt": "2020-05-27T09:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "10de9299bad16a575d3546c7723058962386d0f7", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\nindex 0e3e571d2..654496176 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n", "chunk": "@@ -661,22 +661,12 @@ public interface Network extends Container<Network> {\n     HvdcLineAdder newHvdcLine();\n \n     /**\n-     * Get an equipment by its ID.\n+     * Get an equipment by its ID or alias\n      *\n-     * @param id the id of the equipment\n+     * @param id the id or an alias of the equipment\n      */\n     Identifiable<?> getIdentifiable(String id);\n \n-    /**\n-     * Get an equipment by its ID or eventually an alias.\n-     *\n-     * @param idOrAlias the id or an alias of the equipment\n-     * @param searchInAlias if true then searches in the alias and the IDs. If false, searches only by ID.\n-     */\n-    default Identifiable<?> getIdentifiable(String idOrAlias, boolean searchInAlias) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n     /**\n      * Get all identifiables of the network.\n      *\n", "next_change": {"commit": "1645bcd979eeff82197e98eeba786547e9f3e439", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\nindex 654496176..ee47384ba 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n", "chunk": "@@ -661,9 +661,9 @@ public interface Network extends Container<Network> {\n     HvdcLineAdder newHvdcLine();\n \n     /**\n-     * Get an equipment by its ID or alias\n+     * Get a equipment.\n      *\n-     * @param id the id or an alias of the equipment\n+     * @param id the id of the equipment\n      */\n     Identifiable<?> getIdentifiable(String id);\n \n", "next_change": {"commit": "21af21418db69dd7f47471a5c49919db118b97fd", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\nindex ee47384ba..0e3e571d2 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n", "chunk": "@@ -661,12 +661,22 @@ public interface Network extends Container<Network> {\n     HvdcLineAdder newHvdcLine();\n \n     /**\n-     * Get a equipment.\n+     * Get an equipment by its ID.\n      *\n      * @param id the id of the equipment\n      */\n     Identifiable<?> getIdentifiable(String id);\n \n+    /**\n+     * Get an equipment by its ID or eventually an alias.\n+     *\n+     * @param idOrAlias the id or an alias of the equipment\n+     * @param searchInAlias if true then searches in the alias and the IDs. If false, searches only by ID.\n+     */\n+    default Identifiable<?> getIdentifiable(String idOrAlias, boolean searchInAlias) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     /**\n      * Get all identifiables of the network.\n      *\n", "next_change": {"commit": "6fa473a2370f7d2a188ac064de0e5e4d3e5ed681", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\nindex 0e3e571d2..654496176 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n", "chunk": "@@ -661,22 +661,12 @@ public interface Network extends Container<Network> {\n     HvdcLineAdder newHvdcLine();\n \n     /**\n-     * Get an equipment by its ID.\n+     * Get an equipment by its ID or alias\n      *\n-     * @param id the id of the equipment\n+     * @param id the id or an alias of the equipment\n      */\n     Identifiable<?> getIdentifiable(String id);\n \n-    /**\n-     * Get an equipment by its ID or eventually an alias.\n-     *\n-     * @param idOrAlias the id or an alias of the equipment\n-     * @param searchInAlias if true then searches in the alias and the IDs. If false, searches only by ID.\n-     */\n-    default Identifiable<?> getIdentifiable(String idOrAlias, boolean searchInAlias) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n     /**\n      * Get all identifiables of the network.\n      *\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\nindex 0e3e571d2..ec533762d 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n", "chunk": "@@ -661,22 +661,12 @@ public interface Network extends Container<Network> {\n     HvdcLineAdder newHvdcLine();\n \n     /**\n-     * Get an equipment by its ID.\n+     * Get an equipment by its ID or alias\n      *\n-     * @param id the id of the equipment\n+     * @param id the id or an alias of the equipment\n      */\n     Identifiable<?> getIdentifiable(String id);\n \n-    /**\n-     * Get an equipment by its ID or eventually an alias.\n-     *\n-     * @param idOrAlias the id or an alias of the equipment\n-     * @param searchInAlias if true then searches in the alias and the IDs. If false, searches only by ID.\n-     */\n-    default Identifiable<?> getIdentifiable(String idOrAlias, boolean searchInAlias) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n     /**\n      * Get all identifiables of the network.\n      *\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "9e7ad715baa76b13ab836568c01860ace063c5b2", "committedDate": "2020-07-21 16:26:51 +0200", "message": "Update the javadoc with the Tables copied from the current website (#1397)"}, {"oid": "3140eba9be300d053e4d37e4d984479e3e2ba27b", "committedDate": "2021-05-11 11:13:45 +0200", "message": "Add synchronous and connected components num to ComponentResult  (#1719)"}, {"oid": "8917e96e8968a1c875062eece32a933689f37924", "committedDate": "2021-09-07 13:59:32 +0200", "message": "Make substations optional (#1796)"}, {"oid": "c96036d943ef0bb1669e29c045e4d1aef4eb85eb", "committedDate": "2021-11-02 13:19:33 +0100", "message": "Add Identifiable enum type (#1859)"}, {"oid": "47fb9fd45d1477f3776dfe3a37c2630d114908b8", "committedDate": "2022-02-02 14:56:06 +0100", "message": "Allow to delay network validation (#1819)"}, {"oid": "efd14391ed41ec6cfa23469a0fb1bd83030cf2bc", "committedDate": "2022-09-26 10:58:52 +0200", "message": "Add getConnectable(string) in network (#2297)"}, {"oid": "5475db078faff718b7bee7af07c9df786ec26602", "committedDate": "2022-10-28 15:40:53 +0200", "message": "New contingency list models (#2308)"}, {"oid": "b8476d79a6576d6185389848eee511e3d71871a2", "committedDate": "2022-11-03 15:54:11 +0100", "message": "Remove iidm-converter-api (merged with iidm-api) (#2350)"}, {"oid": "9e4593b29889e735207c201a89907006d3855e76", "committedDate": "2023-03-27 16:25:32 +0200", "message": "Fix identifiable stream (#2520)"}, {"oid": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "committedDate": "2023-05-12 17:26:38 +0200", "message": "Replace HalfLine by DanglingLine (#2437)"}, {"oid": "96b78a54eb3fc1d1ed989199cf0d2caf8bf129e4", "committedDate": "2023-06-06 11:56:15 +0200", "message": "Multiple data sources (#2600)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyOTg3MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430929870", "body": "From my point of view, we should automatically add the ids of the half line when a TieLine is created, not only in the merge function. Is there a risk to do it automatically in the add() method of the TieLineAdder?", "bodyText": "From my point of view, we should automatically add the ids of the half line when a TieLine is created, not only in the merge function. Is there a risk to do it automatically in the add() method of the TieLineAdder?", "bodyHTML": "<p dir=\"auto\">From my point of view, we should automatically add the ids of the half line when a TieLine is created, not only in the merge function. Is there a risk to do it automatically in the add() method of the TieLineAdder?</p>", "author": "mathbagu", "createdAt": "2020-05-27T08:02:28Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java", "diffHunk": "@@ -1101,13 +1111,15 @@ private void replaceDanglingLineByLine(List<MergedLine> lines, Multimap<Boundary\n             l.getTerminal1().setP(mergedLine.p1).setQ(mergedLine.q1);\n             l.getTerminal2().setP(mergedLine.p2).setQ(mergedLine.q2);\n             mergedLine.properties.forEach((key, val) -> l.setProperty(key.toString(), val.toString()));\n+            mergedLine.aliases.forEach(l::addAlias);", "originalCommit": "2b49777ba791b911e76d984078a3094c523f9134", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzMzIwMg==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r431033202", "bodyText": "Actually, the TieLineAdder does not have access to the aliases of the half lines, only the IDs. So a dedicated line for merging aliases is still needed.", "author": "murgeyseb", "createdAt": "2020-05-27T11:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyOTg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1645bcd979eeff82197e98eeba786547e9f3e439", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\nindex 6d4b032f3..9430028bf 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n", "chunk": "@@ -1111,7 +1101,6 @@ class NetworkImpl extends AbstractIdentifiable<Network> implements Network, Vari\n             l.getTerminal1().setP(mergedLine.p1).setQ(mergedLine.q1);\n             l.getTerminal2().setP(mergedLine.p2).setQ(mergedLine.q2);\n             mergedLine.properties.forEach((key, val) -> l.setProperty(key.toString(), val.toString()));\n-            mergedLine.aliases.forEach(l::addAlias);\n \n             mergedLineByBoundary.put(new Boundary(mergedLine.country1, mergedLine.country2), mergedLine);\n         }\n", "next_change": {"commit": "21af21418db69dd7f47471a5c49919db118b97fd", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\nindex 9430028bf..b9743b91d 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n", "chunk": "@@ -1101,6 +1111,7 @@ class NetworkImpl extends AbstractIdentifiable<Network> implements Network, Vari\n             l.getTerminal1().setP(mergedLine.p1).setQ(mergedLine.q1);\n             l.getTerminal2().setP(mergedLine.p2).setQ(mergedLine.q2);\n             mergedLine.properties.forEach((key, val) -> l.setProperty(key.toString(), val.toString()));\n+            mergedLine.aliases.forEach(l::addAlias);\n \n             mergedLineByBoundary.put(new Boundary(mergedLine.country1, mergedLine.country2), mergedLine);\n         }\n", "next_change": null}, {"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\nindex 9430028bf..b9743b91d 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n", "chunk": "@@ -1108,6 +1119,7 @@ class NetworkImpl extends AbstractIdentifiable<Network> implements Network, Vari\n \n     class MergedLine {\n         String id;\n+        Set<String> aliases;\n         String voltageLevel1;\n         String voltageLevel2;\n         String xnode;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "393b2ca1d01a24d416bf2136ff7dde5ecbd778c2", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\nindex 6d4b032f3..eb8f7a68d 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n", "chunk": "@@ -1106,8 +996,8 @@ class NetworkImpl extends AbstractIdentifiable<Network> implements Network, Vari\n                 la.setNode2(mergedLine.node2);\n             }\n             TieLineImpl l = la.add();\n-            l.setCurrentLimits(Side.ONE, (CurrentLimitsImpl) mergedLine.limits1);\n-            l.setCurrentLimits(Side.TWO, (CurrentLimitsImpl) mergedLine.limits2);\n+            l.getLimitsHolder1().setOperationalLimits(LimitType.CURRENT, mergedLine.limits1);\n+            l.getLimitsHolder2().setOperationalLimits(LimitType.CURRENT, mergedLine.limits2);\n             l.getTerminal1().setP(mergedLine.p1).setQ(mergedLine.q1);\n             l.getTerminal2().setP(mergedLine.p2).setQ(mergedLine.q2);\n             mergedLine.properties.forEach((key, val) -> l.setProperty(key.toString(), val.toString()));\n", "next_change": {"commit": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\nindex eb8f7a68d..cdef3ab0b 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n", "chunk": "@@ -840,211 +931,59 @@ class NetworkImpl extends AbstractIdentifiable<Network> implements Network, Vari\n         LOGGER.info(\"Merging of {} done in {} ms\", id, System.currentTimeMillis() - start);\n     }\n \n-    private DanglingLine getDanglingLineByTheOther(DanglingLine dl2, Map<String, DanglingLine> dl1byXnodeCode) {\n-        DanglingLine dl1 = getDanglingLine(dl2.getId());\n-        if (dl1 == null) {\n-            // mapping by ucte xnode code\n-            if (dl2.getUcteXnodeCode() != null) {\n-                dl1 = dl1byXnodeCode.get(dl2.getUcteXnodeCode());\n-            }\n-        } else {\n-            // mapping by id\n-            if (dl1.getUcteXnodeCode() != null && dl2.getUcteXnodeCode() != null\n-                    && !dl1.getUcteXnodeCode().equals(dl2.getUcteXnodeCode())) {\n-                throw new PowsyblException(\"Dangling line couple \" + dl1.getId()\n-                        + \" have inconsistent Xnodes (\" + dl1.getUcteXnodeCode()\n-                        + \"!=\" + dl2.getUcteXnodeCode() + \")\");\n-            }\n-        }\n-        return dl1;\n-    }\n-\n-    private void mergeDanglingLines(List<MergedLine> lines, DanglingLine dl1, DanglingLine dl2) {\n+    private void pairDanglingLines(List<DanglingLinePair> danglingLinePairs, DanglingLine dl1, DanglingLine dl2, Map<String, List<DanglingLine>> dl1byXnodeCode) {\n         if (dl1 != null) {\n-            MergedLine l = new MergedLine();\n-            l.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();\n-            l.aliases = new HashSet<>();\n-            l.aliases.add(dl1.getId());\n-            l.aliases.add(dl2.getId());\n-            l.aliases.addAll(dl1.getAliases());\n-            l.aliases.addAll(dl2.getAliases());\n-            Terminal t1 = dl1.getTerminal();\n-            Terminal t2 = dl2.getTerminal();\n-            VoltageLevel vl1 = t1.getVoltageLevel();\n-            VoltageLevel vl2 = t2.getVoltageLevel();\n-            l.voltageLevel1 = vl1.getId();\n-            l.voltageLevel2 = vl2.getId();\n-            l.xnode = dl1.getUcteXnodeCode();\n-            l.half1.id = dl1.getId();\n-            l.half1.name = dl1.getNameOrId();\n-            l.half1.r = dl1.getR();\n-            l.half1.x = dl1.getX();\n-            l.half1.g1 = dl1.getG();\n-            l.half1.g2 = 0;\n-            l.half1.b1 = dl1.getB();\n-            l.half1.b2 = 0;\n-            l.half1.fictitious = dl1.isFictitious();\n-            l.half2.id = dl2.getId();\n-            l.half2.name = dl2.getNameOrId();\n-            l.half2.r = dl2.getR();\n-            l.half2.x = dl2.getX();\n-            l.half2.g2 = dl2.getG();\n-            l.half2.g1 = 0;\n-            l.half2.b2 = dl2.getB();\n-            l.half2.b1 = 0;\n-            l.half2.fictitious = dl2.isFictitious();\n-            l.limits1 = dl1.getCurrentLimits();\n-            l.limits2 = dl2.getCurrentLimits();\n-            if (t1.getVoltageLevel().getTopologyKind() == TopologyKind.BUS_BREAKER) {\n-                Bus b1 = t1.getBusBreakerView().getBus();\n-                if (b1 != null) {\n-                    l.bus1 = b1.getId();\n-                }\n-                l.connectableBus1 = t1.getBusBreakerView().getConnectableBus().getId();\n-            } else {\n-                l.node1 = t1.getNodeBreakerView().getNode();\n-            }\n-            if (t2.getVoltageLevel().getTopologyKind() == TopologyKind.BUS_BREAKER) {\n-                Bus b2 = t2.getBusBreakerView().getBus();\n-                if (b2 != null) {\n-                    l.bus2 = b2.getId();\n-                }\n-                l.connectableBus2 = t2.getBusBreakerView().getConnectableBus().getId();\n-            } else {\n-                l.node2 = t2.getNodeBreakerView().getNode();\n+            if (dl1.getUcteXnodeCode() != null) {\n+                dl1byXnodeCode.get(dl1.getUcteXnodeCode()).remove(dl1);\n             }\n-            l.p1 = t1.getP();\n-            l.q1 = t1.getQ();\n-            l.p2 = t2.getP();\n-            l.q2 = t2.getQ();\n-            l.country1 = vl1.getSubstation().getCountry().orElse(null);\n-            l.country2 = vl2.getSubstation().getCountry().orElse(null);\n+            DanglingLinePair l = new DanglingLinePair();\n+            l.id = buildMergedId(dl1.getId(), dl2.getId());\n+            l.name = buildMergedName(dl1.getId(), dl2.getId(), dl1.getOptionalName().orElse(null), dl2.getOptionalName().orElse(null));\n+            l.dl1Id = dl1.getId();\n+            l.dl2Id = dl2.getId();\n+            l.aliases = new HashMap<>();\n             mergeProperties(dl1, dl2, l.properties);\n-            lines.add(l);\n+            danglingLinePairs.add(l);\n \n-            // remove the 2 dangling lines\n-            dl1.remove();\n-            dl2.remove();\n+            if (dl1.getId().equals(dl2.getId())) { // if identical IDs, rename dangling lines\n+                ((DanglingLineImpl) dl1).replaceId(l.dl1Id + \"_1\");\n+                ((DanglingLineImpl) dl2).replaceId(l.dl2Id + \"_2\");\n+                l.dl1Id = dl1.getId();\n+                l.dl2Id = dl2.getId();\n+            }\n+            mergeIdenticalAliases(dl1, dl2, l.aliases);\n         }\n     }\n \n-    private void mergeProperties(DanglingLine dl1, DanglingLine dl2, Properties properties) {\n-        Set<String> dl1Properties = dl1.getPropertyNames();\n-        Set<String> dl2Properties = dl2.getPropertyNames();\n-        Set<String> commonProperties = Sets.intersection(dl1Properties, dl2Properties);\n-        Sets.difference(dl1Properties, commonProperties).forEach(prop -> properties.setProperty(prop, dl1.getProperty(prop)));\n-        Sets.difference(dl2Properties, commonProperties).forEach(prop -> properties.setProperty(prop, dl2.getProperty(prop)));\n-        commonProperties.forEach(prop -> {\n-            if (dl1.getProperty(prop).equals(dl2.getProperty(prop))) {\n-                properties.setProperty(prop, dl1.getProperty(prop));\n-            } else if (dl1.getProperty(prop).isEmpty()) {\n-                LOGGER.debug(\"Inconsistencies of property '{}' between both sides of merged line. Side 1 is empty, keeping side 2 value '{}'\", prop, dl2.getProperty(prop));\n-                properties.setProperty(prop, dl2.getProperty(prop));\n-            } else if (dl2.getProperty(prop).isEmpty()) {\n-                LOGGER.debug(\"Inconsistencies of property '{}' between both sides of merged line. Side 2 is empty, keeping side 1 value '{}'\", prop, dl1.getProperty(prop));\n-                properties.setProperty(prop, dl1.getProperty(prop));\n-            } else {\n-                LOGGER.debug(\"Inconsistencies of property '{}' between both sides of merged line. '{}' on side 1 and '{}' on side 2. Removing the property of merged line\", prop, dl1.getProperty(prop), dl2.getProperty(prop));\n-            }\n-        });\n-        dl1Properties.forEach(prop -> properties.setProperty(prop + \"_1\", dl1.getProperty(prop)));\n-        dl2Properties.forEach(prop -> properties.setProperty(prop + \"_2\", dl2.getProperty(prop)));\n-    }\n-\n-    private void replaceDanglingLineByLine(List<MergedLine> lines, Multimap<Boundary, MergedLine> mergedLineByBoundary) {\n-        for (MergedLine mergedLine : lines) {\n-            LOGGER.debug(\"Replacing dangling line couple '{}' (xnode={}, country1={}, country2={}) by a line\",\n-                    mergedLine.id, mergedLine.xnode, mergedLine.country1, mergedLine.country2);\n-            TieLineAdderImpl la = newTieLine()\n-                    .setId(mergedLine.id)\n-                    .setName(mergedLine.half1.name + \" + \" + mergedLine.half2.name)\n-                    .setVoltageLevel1(mergedLine.voltageLevel1)\n-                    .setVoltageLevel2(mergedLine.voltageLevel2)\n-                    .newHalfLine1().setId(mergedLine.half1.id)\n-                        .setName(mergedLine.half1.name)\n-                        .setR(mergedLine.half1.r)\n-                        .setX(mergedLine.half1.x)\n-                        .setG1(mergedLine.half1.g1)\n-                        .setG2(mergedLine.half1.g2)\n-                        .setB1(mergedLine.half1.b1)\n-                        .setB2(mergedLine.half1.b2)\n-                        .setFictitious(mergedLine.half1.fictitious)\n-                    .add()\n-                    .newHalfLine2().setId(mergedLine.half2.id)\n-                        .setName(mergedLine.half2.name)\n-                        .setR(mergedLine.half2.r)\n-                        .setX(mergedLine.half2.x)\n-                        .setG1(mergedLine.half2.g1)\n-                        .setG2(mergedLine.half2.g2)\n-                        .setB1(mergedLine.half2.b1)\n-                        .setB2(mergedLine.half2.b2)\n-                        .setFictitious(mergedLine.half2.fictitious)\n-                    .add()\n-                    .setUcteXnodeCode(mergedLine.xnode);\n-            if (mergedLine.bus1 != null) {\n-                la.setBus1(mergedLine.bus1);\n-            }\n-            la.setConnectableBus1(mergedLine.connectableBus1);\n-            if (mergedLine.bus2 != null) {\n-                la.setBus2(mergedLine.bus2);\n-            }\n-            la.setConnectableBus2(mergedLine.connectableBus2);\n-            if (mergedLine.node1 != null) {\n-                la.setNode1(mergedLine.node1);\n-            }\n-            if (mergedLine.node2 != null) {\n-                la.setNode2(mergedLine.node2);\n-            }\n-            TieLineImpl l = la.add();\n-            l.getLimitsHolder1().setOperationalLimits(LimitType.CURRENT, mergedLine.limits1);\n-            l.getLimitsHolder2().setOperationalLimits(LimitType.CURRENT, mergedLine.limits2);\n-            l.getTerminal1().setP(mergedLine.p1).setQ(mergedLine.q1);\n-            l.getTerminal2().setP(mergedLine.p2).setQ(mergedLine.q2);\n-            mergedLine.properties.forEach((key, val) -> l.setProperty(key.toString(), val.toString()));\n-            mergedLine.aliases.forEach(l::addAlias);\n-\n-            mergedLineByBoundary.put(new Boundary(mergedLine.country1, mergedLine.country2), mergedLine);\n+    private void replaceDanglingLineByLine(List<DanglingLinePair> lines) {\n+        for (DanglingLinePair danglingLinePair : lines) {\n+            LOGGER.debug(\"Creating tie line '{}' between dangling line couple '{}' and '{}\",\n+                    danglingLinePair.id, danglingLinePair.dl1Id, danglingLinePair.dl2Id);\n+            TieLineImpl l = newTieLine()\n+                    .setId(danglingLinePair.id)\n+                    .setEnsureIdUnicity(true)\n+                    .setName(danglingLinePair.name)\n+                    .setDanglingLine1(danglingLinePair.dl1Id)\n+                    .setDanglingLine2(danglingLinePair.dl2Id)\n+                    .add();\n+            danglingLinePair.properties.forEach((key, val) -> l.setProperty(key.toString(), val.toString()));\n+            danglingLinePair.aliases.forEach((alias, type) -> {\n+                if (type.isEmpty()) {\n+                    l.addAlias(alias);\n+                } else {\n+                    l.addAlias(alias, type);\n+                }\n+            });\n         }\n     }\n \n-    class MergedLine {\n+    class DanglingLinePair {\n         String id;\n-        Set<String> aliases;\n-        String voltageLevel1;\n-        String voltageLevel2;\n-        String xnode;\n-        String bus1;\n-        String bus2;\n-        String connectableBus1;\n-        String connectableBus2;\n-        Integer node1;\n-        Integer node2;\n+        String name;\n+        String dl1Id;\n+        String dl2Id;\n+        Map<String, String> aliases;\n         Properties properties = new Properties();\n-\n-        class HalfMergedLine {\n-            String id;\n-            String name;\n-            double r;\n-            double x;\n-            double g1;\n-            double g2;\n-            double b1;\n-            double b2;\n-            boolean fictitious;\n-        }\n-\n-        final HalfMergedLine half1 = new HalfMergedLine();\n-        final HalfMergedLine half2 = new HalfMergedLine();\n-\n-        CurrentLimits limits1;\n-        CurrentLimits limits2;\n-        double p1;\n-        double q1;\n-        double p2;\n-        double q2;\n-\n-        Country country1;\n-        Country country2;\n     }\n \n     @Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "050e1d41b8b95ea1d0568393f7553f1ed598314e", "committedDate": "2020-08-27 11:22:29 +0200", "message": "Integration of merging view (#1445)"}, {"oid": "e2ef9188919a451b3a3e5809201a7ed784c7a940", "committedDate": "2020-09-22 09:53:22 +0200", "message": "Fix missing call to MultiVariantObject implementations (#1476)"}, {"oid": "cf533604721221defbb65620f6d95acce77b99c6", "committedDate": "2020-11-16 10:30:57 +0100", "message": "[IIDM] Allow to reuse TieLineAdder twice (#1507)"}, {"oid": "488d8ec4d30c978885962338a007cb0cc240ef6d", "committedDate": "2020-12-03 15:29:44 +0100", "message": "Introduce concept of Boundary for DanglingLine and TieLine (#1488)"}, {"oid": "393b2ca1d01a24d416bf2136ff7dde5ecbd778c2", "committedDate": "2021-01-11 13:39:45 +0100", "message": "IIDM operational limits  (#1359)"}, {"oid": "289083ba8916021f6ddc34493c06b5c9b42235c0", "committedDate": "2021-03-03 14:06:46 +0100", "message": "Optimise getBus in Bus/Breaker view for default Network implementation (#1645)"}, {"oid": "044aaaca72ea0d9d6e95a945096711b00296a1e3", "committedDate": "2021-05-07 10:49:21 +0200", "message": "Add a bus cache to network implementation (#1722)"}, {"oid": "3140eba9be300d053e4d37e4d984479e3e2ba27b", "committedDate": "2021-05-11 11:13:45 +0200", "message": "Add synchronous and connected components num to ComponentResult  (#1719)"}, {"oid": "8917e96e8968a1c875062eece32a933689f37924", "committedDate": "2021-09-07 13:59:32 +0200", "message": "Make substations optional (#1796)"}, {"oid": "7b4d32ab59ef531330ef00532a73d2b43083dba4", "committedDate": "2021-10-04 17:06:25 +0200", "message": "Fix bus breaker view cache (#1841)"}, {"oid": "47fb9fd45d1477f3776dfe3a37c2630d114908b8", "committedDate": "2022-02-02 14:56:06 +0100", "message": "Allow to delay network validation (#1819)"}, {"oid": "43db044de7bbf33d1697a4a8db7b2788141b1fec", "committedDate": "2022-03-22 15:16:42 +0100", "message": "TieLine: fix issues with line characteristics computation (#1755)"}, {"oid": "7635bc4bb7cf22f8cd2ccfb8a4a9d7719e9302c0", "committedDate": "2022-04-25 10:51:00 +0200", "message": "Fix NPE: no NPE thrown when equipment added and validation level has been invalidated (#2087)"}, {"oid": "9c7dcadff01acbdb2cc64dfb20346aae75058460", "committedDate": "2022-06-28 12:59:17 +0200", "message": "Limit getters return optionals (#2169)"}, {"oid": "efd14391ed41ec6cfa23469a0fb1bd83030cf2bc", "committedDate": "2022-09-26 10:58:52 +0200", "message": "Add getConnectable(string) in network (#2297)"}, {"oid": "c0a815f5f39746cbf97beefa738367e067848958", "committedDate": "2023-01-09 17:06:49 +0100", "message": "Implement new consistent behavior when calling merge method (uniform in NetworkImpl, MergingView and CGM import) (#2394)"}, {"oid": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "committedDate": "2023-05-12 17:26:38 +0200", "message": "Replace HalfLine by DanglingLine (#2437)"}, {"oid": "b7f9c3dfed7159ac75a69f5b3d1240598d4b0461", "committedDate": "2023-05-31 14:08:11 +0200", "message": "Branch does not extend connectable (#2591)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMjU3MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430932570", "body": "You should test if the object that already exists in the map is not the same than the `obj` argument, and silently ignore it. You could be possible to write something like this:\r\n```\r\naddAlias(obj, \"alias\"); // works because \"alias\" is not used\r\naddAlias(obj, \"alias\"); // works because \"alias\" is already an alias of obj\r\naddAlias(obj2, \"alias\"); // fails because \"alias\" is already an alias of obj, and obj != obj2\r\n```", "bodyText": "You should test if the object that already exists in the map is not the same than the obj argument, and silently ignore it. You could be possible to write something like this:\naddAlias(obj, \"alias\"); // works because \"alias\" is not used\naddAlias(obj, \"alias\"); // works because \"alias\" is already an alias of obj\naddAlias(obj2, \"alias\"); // fails because \"alias\" is already an alias of obj, and obj != obj2", "bodyHTML": "<p dir=\"auto\">You should test if the object that already exists in the map is not the same than the <code>obj</code> argument, and silently ignore it. You could be possible to write something like this:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"addAlias(obj, &quot;alias&quot;); // works because &quot;alias&quot; is not used\naddAlias(obj, &quot;alias&quot;); // works because &quot;alias&quot; is already an alias of obj\naddAlias(obj2, &quot;alias&quot;); // fails because &quot;alias&quot; is already an alias of obj, and obj != obj2\"><pre><code>addAlias(obj, \"alias\"); // works because \"alias\" is not used\naddAlias(obj, \"alias\"); // works because \"alias\" is already an alias of obj\naddAlias(obj2, \"alias\"); // fails because \"alias\" is already an alias of obj, and obj != obj2\n</code></pre></div>", "author": "mathbagu", "createdAt": "2020-05-27T08:07:21Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java", "diffHunk": "@@ -50,14 +53,53 @@ void checkAndAdd(Identifiable<?> obj) {\n         all.add(obj);\n     }\n \n+    void addAlias(Identifiable<?> obj, String alias) {\n+        if (objectsById.containsKey(alias)) {\n+            Identifiable<?> aliasConflict = objectsById.get(alias);\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        } else if (idByAlias.containsKey(alias)) {\n+            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        }\n+        idByAlias.put(alias, obj.getId());", "originalCommit": "2b49777ba791b911e76d984078a3094c523f9134", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10de9299bad16a575d3546c7723058962386d0f7", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex a478e2a5e..dd1a447e8 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -72,6 +80,7 @@ class NetworkIndex {\n             throw new PowsyblException(message);\n         }\n         idByAlias.put(alias, obj.getId());\n+        return true;\n     }\n \n     public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n", "next_change": {"commit": "1645bcd979eeff82197e98eeba786547e9f3e439", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..140d27358 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -53,54 +50,14 @@ class NetworkIndex {\n         all.add(obj);\n     }\n \n-    boolean addAlias(Identifiable<?> obj, String alias) {\n-        if (objectsById.containsKey(alias)) {\n-            if (objectsById.get(alias).equals(obj)) {\n-                // Silently ignore affecting the objects id to its own aliases\n-                return false;\n-            }\n-            Identifiable<?> aliasConflict = objectsById.get(alias);\n-            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n-                    obj.getClass(),\n-                    alias,\n-                    aliasConflict.getClass(),\n-                    aliasConflict.getId());\n-            throw new PowsyblException(message);\n-        } else if (idByAlias.containsKey(alias)) {\n-            if (objectsById.get(idByAlias.get(alias)).equals(obj)) {\n-                // Silently ignore affecting the same alias twice to an object\n-                return false;\n-            }\n-            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n-            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n-                    obj.getClass(),\n-                    alias,\n-                    aliasConflict.getClass(),\n-                    aliasConflict.getId());\n-            throw new PowsyblException(message);\n-        }\n-        idByAlias.put(alias, obj.getId());\n-        return true;\n-    }\n-\n-    public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n-        if (!idByAlias.containsKey(alias)) {\n-            throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n-        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n-            throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n-        } else {\n-            idByAlias.remove(alias);\n-        }\n-    }\n-\n-    Identifiable get(String idOrAlias) {\n-        String id = idByAlias.getOrDefault(idOrAlias, idOrAlias);\n+    Identifiable get(String id) {\n         checkId(id);\n         return objectsById.get(id);\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz) {\n-        Identifiable obj = get(id);\n+        checkId(id);\n+        Identifiable obj = objectsById.get(id);\n         if (obj != null && clazz.isAssignableFrom(obj.getClass())) {\n             return (T) obj;\n         } else {\n", "next_change": {"commit": "21af21418db69dd7f47471a5c49919db118b97fd", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex 140d27358..a478e2a5e 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -50,14 +53,53 @@ class NetworkIndex {\n         all.add(obj);\n     }\n \n+    void addAlias(Identifiable<?> obj, String alias) {\n+        if (objectsById.containsKey(alias)) {\n+            Identifiable<?> aliasConflict = objectsById.get(alias);\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        } else if (idByAlias.containsKey(alias)) {\n+            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        }\n+        idByAlias.put(alias, obj.getId());\n+    }\n+\n+    public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n+        if (!idByAlias.containsKey(alias)) {\n+            throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n+        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n+            throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n+        } else {\n+            idByAlias.remove(alias);\n+        }\n+    }\n+\n     Identifiable get(String id) {\n-        checkId(id);\n-        return objectsById.get(id);\n+        return get(id, false);\n+    }\n+\n+    Identifiable get(String id, boolean searchInAlias) {\n+        String idOrAlias = searchInAlias ? idByAlias.getOrDefault(id, id) : id;\n+        checkId(idOrAlias);\n+        return objectsById.get(idOrAlias);\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz) {\n-        checkId(id);\n-        Identifiable obj = objectsById.get(id);\n+        return get(id, clazz, false);\n+    }\n+\n+    <T extends Identifiable> T get(String id, Class<T> clazz, boolean searchInAlias) {\n+        Identifiable obj = get(id, searchInAlias);\n         if (obj != null && clazz.isAssignableFrom(obj.getClass())) {\n             return (T) obj;\n         } else {\n", "next_change": {"commit": "b1f099f8fc3e330331d51434e44281fb1b9156f6", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex a478e2a5e..cda44d9b5 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -95,7 +104,7 @@ class NetworkIndex {\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz) {\n-        return get(id, clazz, false);\n+        return get(id, clazz, true);\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz, boolean searchInAlias) {\n", "next_change": {"commit": "6fa473a2370f7d2a188ac064de0e5e4d3e5ed681", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex cda44d9b5..dd1a447e8 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -93,22 +93,14 @@ class NetworkIndex {\n         }\n     }\n \n-    Identifiable get(String id) {\n-        return get(id, false);\n-    }\n-\n-    Identifiable get(String id, boolean searchInAlias) {\n-        String idOrAlias = searchInAlias ? idByAlias.getOrDefault(id, id) : id;\n-        checkId(idOrAlias);\n-        return objectsById.get(idOrAlias);\n+    Identifiable get(String idOrAlias) {\n+        String id = idByAlias.getOrDefault(idOrAlias, idOrAlias);\n+        checkId(id);\n+        return objectsById.get(id);\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz) {\n-        return get(id, clazz, true);\n-    }\n-\n-    <T extends Identifiable> T get(String id, Class<T> clazz, boolean searchInAlias) {\n-        Identifiable obj = get(id, searchInAlias);\n+        Identifiable obj = get(id);\n         if (obj != null && clazz.isAssignableFrom(obj.getClass())) {\n             return (T) obj;\n         } else {\n", "next_change": {"commit": "58300149f6565566ccd50ec55d339171b823fd67", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..a15fa6712 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -84,23 +86,24 @@ class NetworkIndex {\n     }\n \n     public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n-        if (!idByAlias.containsKey(alias)) {\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias == null) {\n             throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n-        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n+        } else if (!idForAlias.equals(obj.getId())) {\n             throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n         } else {\n             idByAlias.remove(alias);\n         }\n     }\n \n-    Identifiable get(String idOrAlias) {\n+    Identifiable<?> get(String idOrAlias) {\n         String id = idByAlias.getOrDefault(idOrAlias, idOrAlias);\n         checkId(id);\n         return objectsById.get(id);\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz) {\n-        Identifiable obj = get(id);\n+        Identifiable<?> obj = get(id);\n         if (obj != null && clazz.isAssignableFrom(obj.getClass())) {\n             return (T) obj;\n         } else {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex a478e2a5e..ea2e62748 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -53,17 +53,27 @@ class NetworkIndex {\n         all.add(obj);\n     }\n \n-    void addAlias(Identifiable<?> obj, String alias) {\n-        if (objectsById.containsKey(alias)) {\n-            Identifiable<?> aliasConflict = objectsById.get(alias);\n+    boolean addAlias(Identifiable<?> obj, String alias) {\n+        Identifiable<?> aliasConflict = objectsById.get(alias);\n+        if (aliasConflict != null) {\n+            if (aliasConflict.equals(obj)) {\n+                // Silently ignore affecting the objects id to its own aliases\n+                return false;\n+            }\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n                     aliasConflict.getClass(),\n                     aliasConflict.getId());\n             throw new PowsyblException(message);\n-        } else if (idByAlias.containsKey(alias)) {\n-            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n+        }\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias != null) {\n+            aliasConflict = objectsById.get(idForAlias);\n+            if (aliasConflict.equals(obj)) {\n+                // Silently ignore affecting the same alias twice to an object\n+                return false;\n+            }\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n", "next_change": null}, {"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex a478e2a5e..ea2e62748 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -72,34 +82,28 @@ class NetworkIndex {\n             throw new PowsyblException(message);\n         }\n         idByAlias.put(alias, obj.getId());\n+        return true;\n     }\n \n     public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n-        if (!idByAlias.containsKey(alias)) {\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias == null) {\n             throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n-        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n+        } else if (!idForAlias.equals(obj.getId())) {\n             throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n         } else {\n             idByAlias.remove(alias);\n         }\n     }\n \n-    Identifiable get(String id) {\n-        return get(id, false);\n-    }\n-\n-    Identifiable get(String id, boolean searchInAlias) {\n-        String idOrAlias = searchInAlias ? idByAlias.getOrDefault(id, id) : id;\n-        checkId(idOrAlias);\n-        return objectsById.get(idOrAlias);\n+    Identifiable get(String idOrAlias) {\n+        String id = idByAlias.getOrDefault(idOrAlias, idOrAlias);\n+        checkId(id);\n+        return objectsById.get(id);\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz) {\n-        return get(id, clazz, false);\n-    }\n-\n-    <T extends Identifiable> T get(String id, Class<T> clazz, boolean searchInAlias) {\n-        Identifiable obj = get(id, searchInAlias);\n+        Identifiable<?> obj = get(id);\n         if (obj != null && clazz.isAssignableFrom(obj.getClass())) {\n             return (T) obj;\n         } else {\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMzgxMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430933810", "body": "Remove this test: a for loop on an empty list is OK", "bodyText": "Remove this test: a for loop on an empty list is OK", "bodyHTML": "<p dir=\"auto\">Remove this test: a for loop on an empty list is OK</p>", "author": "mathbagu", "createdAt": "2020-05-27T08:09:29Z", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml;\n+\n+import com.powsybl.iidm.network.Identifiable;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Sebastien Murgey <sebastien.murgey at rte-france.com>\n+ */\n+public final class AliasesXml {\n+\n+    static final String ALIAS = \"alias\";\n+\n+    public static void write(Identifiable<?> identifiable, NetworkXmlWriterContext context) throws XMLStreamException {\n+        if (identifiable.hasAliases()) {", "originalCommit": "2b49777ba791b911e76d984078a3094c523f9134", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10de9299bad16a575d3546c7723058962386d0f7", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\nindex e29966887..a1d5180dd 100644\n--- a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n+++ b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n", "chunk": "@@ -18,12 +18,10 @@ public final class AliasesXml {\n     static final String ALIAS = \"alias\";\n \n     public static void write(Identifiable<?> identifiable, NetworkXmlWriterContext context) throws XMLStreamException {\n-        if (identifiable.hasAliases()) {\n-            for (String alias : identifiable.getAliases()) {\n-                context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), ALIAS);\n-                context.getWriter().writeCharacters(context.getAnonymizer().anonymizeString(alias));\n-                context.getWriter().writeEndElement();\n-            }\n+        for (String alias : identifiable.getAliases()) {\n+            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), ALIAS);\n+            context.getWriter().writeCharacters(context.getAnonymizer().anonymizeString(alias));\n+            context.getWriter().writeEndElement();\n         }\n     }\n \n", "next_change": {"commit": "1645bcd979eeff82197e98eeba786547e9f3e439", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\ndeleted file mode 100644\nindex a1d5180dd..000000000\n--- a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-/*\n- * Copyright (c) 2020, RTE (http://www.rte-france.com)\n- * This Source Code Form is subject to the terms of the Mozilla Public\n- * License, v. 2.0. If a copy of the MPL was not distributed with this\n- * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n- */\n-package com.powsybl.iidm.xml;\n-\n-import com.powsybl.iidm.network.Identifiable;\n-\n-import javax.xml.stream.XMLStreamException;\n-\n-/**\n- * @author Sebastien Murgey <sebastien.murgey at rte-france.com>\n- */\n-public final class AliasesXml {\n-\n-    static final String ALIAS = \"alias\";\n-\n-    public static void write(Identifiable<?> identifiable, NetworkXmlWriterContext context) throws XMLStreamException {\n-        for (String alias : identifiable.getAliases()) {\n-            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), ALIAS);\n-            context.getWriter().writeCharacters(context.getAnonymizer().anonymizeString(alias));\n-            context.getWriter().writeEndElement();\n-        }\n-    }\n-\n-    public static void read(Identifiable identifiable, NetworkXmlReaderContext context) throws XMLStreamException {\n-        assert context.getReader().getLocalName().equals(ALIAS);\n-        String alias = context.getAnonymizer().deanonymizeString(context.getReader().getElementText());\n-        identifiable.addAlias(alias);\n-    }\n-\n-    private AliasesXml() {\n-    }\n-}\n", "next_change": {"commit": "21af21418db69dd7f47471a5c49919db118b97fd", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\nnew file mode 100644\nindex 000000000..42abca718\n--- /dev/null\n+++ b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n", "chunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml;\n+\n+import com.powsybl.iidm.network.Identifiable;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Sebastien Murgey <sebastien.murgey at rte-france.com>\n+ */\n+public final class AliasesXml {\n+\n+    static final String ALIAS = \"alias\";\n+\n+    public static void write(Identifiable<?> identifiable, NetworkXmlWriterContext context) throws XMLStreamException {\n+        if (!identifiable.getAliases().isEmpty()) {\n+            for (String alias : identifiable.getAliases()) {\n+                context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), ALIAS);\n+                context.getWriter().writeCharacters(context.getAnonymizer().anonymizeString(alias));\n+                context.getWriter().writeEndElement();\n+            }\n+        }\n+    }\n+\n+    public static void read(Identifiable identifiable, NetworkXmlReaderContext context) throws XMLStreamException {\n+        assert context.getReader().getLocalName().equals(ALIAS);\n+        String alias = context.getAnonymizer().deanonymizeString(context.getReader().getElementText());\n+        identifiable.addAlias(alias);\n+    }\n+\n+    private AliasesXml() {\n+    }\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\nindex e29966887..43b794f93 100644\n--- a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n+++ b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n", "chunk": "@@ -18,16 +18,14 @@ public final class AliasesXml {\n     static final String ALIAS = \"alias\";\n \n     public static void write(Identifiable<?> identifiable, NetworkXmlWriterContext context) throws XMLStreamException {\n-        if (identifiable.hasAliases()) {\n-            for (String alias : identifiable.getAliases()) {\n-                context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), ALIAS);\n-                context.getWriter().writeCharacters(context.getAnonymizer().anonymizeString(alias));\n-                context.getWriter().writeEndElement();\n-            }\n+        for (String alias : identifiable.getAliases()) {\n+            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), ALIAS);\n+            context.getWriter().writeCharacters(context.getAnonymizer().anonymizeString(alias));\n+            context.getWriter().writeEndElement();\n         }\n     }\n \n-    public static void read(Identifiable identifiable, NetworkXmlReaderContext context) throws XMLStreamException {\n+    public static void read(Identifiable<?> identifiable, NetworkXmlReaderContext context) throws XMLStreamException {\n         assert context.getReader().getLocalName().equals(ALIAS);\n         String alias = context.getAnonymizer().deanonymizeString(context.getReader().getElementText());\n         identifiable.addAlias(alias);\n", "next_change": {"commit": "5fedcc0e86fa8575824757cd6eb2785c74830fae", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\nindex 43b794f93..ee54b0654 100644\n--- a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n+++ b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n", "chunk": "@@ -27,8 +37,10 @@ public final class AliasesXml {\n \n     public static void read(Identifiable<?> identifiable, NetworkXmlReaderContext context) throws XMLStreamException {\n         assert context.getReader().getLocalName().equals(ALIAS);\n+        String[] aliasType = new String[1];\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_4, context, () -> aliasType[0] = context.getReader().getAttributeValue(null, \"type\"));\n         String alias = context.getAnonymizer().deanonymizeString(context.getReader().getElementText());\n-        identifiable.addAlias(alias);\n+        identifiable.addAlias(alias, aliasType[0]);\n     }\n \n     private AliasesXml() {\n", "next_change": {"commit": "ffeeb1b9ab0f18996f99550ad255e1b16a512a66", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\nindex ee54b0654..33eba4106 100644\n--- a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n+++ b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n", "chunk": "@@ -36,7 +36,9 @@ public final class AliasesXml {\n     }\n \n     public static void read(Identifiable<?> identifiable, NetworkXmlReaderContext context) throws XMLStreamException {\n-        assert context.getReader().getLocalName().equals(ALIAS);\n+        if (!context.getReader().getLocalName().equals(ALIAS)) {\n+            throw new IllegalStateException();\n+        }\n         String[] aliasType = new String[1];\n         IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_4, context, () -> aliasType[0] = context.getReader().getAttributeValue(null, \"type\"));\n         String alias = context.getAnonymizer().deanonymizeString(context.getReader().getElementText());\n", "next_change": {"commit": "14ceffaa7264062fec0653ee301e110d09385980", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\nindex 33eba4106..f648c02b4 100644\n--- a/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n+++ b/iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/AliasesXml.java\n", "chunk": "@@ -35,14 +37,22 @@ public final class AliasesXml {\n         }\n     }\n \n-    public static void read(Identifiable<?> identifiable, NetworkXmlReaderContext context) throws XMLStreamException {\n+    public static <T extends Identifiable> void read(T identifiable, NetworkXmlReaderContext context) throws XMLStreamException {\n+        read(context).accept(identifiable);\n+    }\n+\n+    public static <T extends Identifiable> void read(List<Consumer<T>> toApply, NetworkXmlReaderContext context) throws XMLStreamException {\n+        toApply.add(read(context));\n+    }\n+\n+    private static <T extends Identifiable> Consumer<T> read(NetworkXmlReaderContext context) throws XMLStreamException {\n         if (!context.getReader().getLocalName().equals(ALIAS)) {\n             throw new IllegalStateException();\n         }\n         String[] aliasType = new String[1];\n         IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_4, context, () -> aliasType[0] = context.getReader().getAttributeValue(null, \"type\"));\n         String alias = context.getAnonymizer().deanonymizeString(context.getReader().getElementText());\n-        identifiable.addAlias(alias, aliasType[0]);\n+        return identifiable -> identifiable.addAlias(alias, aliasType[0]);\n     }\n \n     private AliasesXml() {\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "ac947800e46cc0e8bfb4ea52f5330ea0dd87fc69", "committedDate": "2020-07-22 13:31:46 +0200", "message": "Small fixes after #1319: Add assert when reading and writing aliases in XIIDM (incorrect sub-elements names should be detected) + Network's aliases are read and written (#1406)"}, {"oid": "5fedcc0e86fa8575824757cd6eb2785c74830fae", "committedDate": "2020-09-08 13:34:49 +0200", "message": "Add the possibility to associate a type to an alias (indicating what it corresponds to) (#1402)"}, {"oid": "47fb9fd45d1477f3776dfe3a37c2630d114908b8", "committedDate": "2022-02-02 14:56:06 +0100", "message": "Allow to delay network validation (#1819)"}, {"oid": "ffeeb1b9ab0f18996f99550ad255e1b16a512a66", "committedDate": "2023-03-08 11:30:35 +0100", "message": "Replace AssertionError by IllegalStateException. (#2465)"}, {"oid": "14ceffaa7264062fec0653ee301e110d09385980", "committedDate": "2023-03-14 11:52:55 +0100", "message": "Refactoring XML IIDM serialization classes (#2481)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNDc2NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430934765", "body": "Impostor! :rofl: ", "bodyText": "Impostor! \ud83e\udd23", "bodyHTML": "<p dir=\"auto\">Impostor! <g-emoji class=\"g-emoji\" alias=\"rofl\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f923.png\">\ud83e\udd23</g-emoji></p>", "author": "mathbagu", "createdAt": "2020-05-27T08:11:09Z", "path": "iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.xml;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */", "originalCommit": "2b49777ba791b911e76d984078a3094c523f9134", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10de9299bad16a575d3546c7723058962386d0f7", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\nindex 3ea186843..62bae3e49 100644\n--- a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n+++ b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n", "chunk": "@@ -12,7 +12,7 @@ import org.junit.Test;\n import java.io.IOException;\n \n /**\n- * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ * @author Sebastien Murgey <sebastien.murgey@rte-france.com>\n  */\n public class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n \n", "next_change": {"commit": "1645bcd979eeff82197e98eeba786547e9f3e439", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\ndeleted file mode 100644\nindex 62bae3e49..000000000\n--- a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n+++ /dev/null\n", "chunk": "@@ -1,26 +0,0 @@\n-/*\n- * Copyright (c) 2020, RTE (http://www.rte-france.com)\n- * This Source Code Form is subject to the terms of the Mozilla Public\n- * License, v. 2.0. If a copy of the MPL was not distributed with this\n- * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n- */\n-\n-package com.powsybl.iidm.xml;\n-\n-import org.junit.Test;\n-\n-import java.io.IOException;\n-\n-/**\n- * @author Sebastien Murgey <sebastien.murgey@rte-france.com>\n- */\n-public class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n-\n-    @Test\n-    public void test() throws IOException {\n-        roundTripVersionedXmlTest(\"tielineWithAliases.xml\", IidmXmlConstants.CURRENT_IIDM_XML_VERSION);\n-\n-        // Tests for backward compatibility\n-        roundTripVersionedXmlFromMinToCurrentVersionTest(\"tielineWithAliases.xml\", IidmXmlVersion.V_1_3);\n-    }\n-}\n", "next_change": {"commit": "21af21418db69dd7f47471a5c49919db118b97fd", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\nnew file mode 100644\nindex 000000000..95a6170be\n--- /dev/null\n+++ b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n", "chunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.xml;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+public class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n+\n+    @Test\n+    public void test() throws IOException {\n+        roundTripVersionedXmlFromMinToCurrentVersionTest(\"tielineWithAliases.xml\", IidmXmlVersion.V_1_3);\n+    }\n+}\n", "next_change": {"commit": "bf669ce1ba598fe0149a51a75488350c00d18bd9", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\nindex 95a6170be..3ea186843 100644\n--- a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n+++ b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n", "chunk": "@@ -18,6 +18,9 @@ public class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n \n     @Test\n     public void test() throws IOException {\n+        roundTripVersionedXmlTest(\"tielineWithAliases.xml\", IidmXmlConstants.CURRENT_IIDM_XML_VERSION);\n+\n+        // Tests for backward compatibility\n         roundTripVersionedXmlFromMinToCurrentVersionTest(\"tielineWithAliases.xml\", IidmXmlVersion.V_1_3);\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\nindex 3ea186843..62bae3e49 100644\n--- a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n+++ b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n", "chunk": "@@ -12,7 +12,7 @@ import org.junit.Test;\n import java.io.IOException;\n \n /**\n- * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ * @author Sebastien Murgey <sebastien.murgey@rte-france.com>\n  */\n public class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n \n", "next_change": {"commit": "45ceb082286aa64e184d7853a528ed13f1e48f04", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\nindex 62bae3e49..44978e315 100644\n--- a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n+++ b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n", "chunk": "@@ -7,17 +7,17 @@\n \n package com.powsybl.iidm.xml;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n \n /**\n  * @author Sebastien Murgey <sebastien.murgey@rte-france.com>\n  */\n-public class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n+class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n \n     @Test\n-    public void test() throws IOException {\n+    void test() throws IOException {\n         roundTripVersionedXmlTest(\"tielineWithAliases.xml\", IidmXmlConstants.CURRENT_IIDM_XML_VERSION);\n \n         // Tests for backward compatibility\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "45ceb082286aa64e184d7853a528ed13f1e48f04", "committedDate": "2023-02-15 15:40:08 +0100", "message": "Bump to JUnit 5 (#2467)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTk4OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r430935989", "body": "Is really what you want? Maybe the elementName should be an alias, maybe \"VL1 VL2 order\" should be another one.\r\nMaybe it could be nice to create a function for that", "bodyText": "Is really what you want? Maybe the elementName should be an alias, maybe \"VL1 VL2 order\" should be another one.\nMaybe it could be nice to create a function for that", "bodyHTML": "<p dir=\"auto\">Is really what you want? Maybe the elementName should be an alias, maybe \"VL1 VL2 order\" should be another one.<br>\nMaybe it could be nice to create a function for that</p>", "author": "mathbagu", "createdAt": "2020-05-27T08:13:20Z", "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java", "diffHunk": "@@ -258,6 +258,9 @@ private static void createDanglingLine(UcteLine ucteLine, boolean connected,\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n+        if (ucteLine.getElementName() != null && !ucteLine.getElementName().isEmpty()) {\n+            dl.addAlias(String.format(\"%s %s %s\", ucteLine.getId().getNodeCode1().toString(), ucteLine.getId().getNodeCode2().toString(), ucteLine.getElementName()));", "originalCommit": "2b49777ba791b911e76d984078a3094c523f9134", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MTA1MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r431051051", "bodyText": "As \"node1/node1/order\" is already the id, no need of it as an alias.\nThe element name cannot be an alias itself, cause TSOs usually use it as a kind of order code (you can have same element name for different lines)", "author": "murgeyseb", "createdAt": "2020-05-27T11:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY0NDcwMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r431644703", "bodyText": "I know, it is the reason why I suggest \"VL1 VL2 co\" to complement the \"node1 node2 co\". If I remember, that was a way to reference equipments in UCTE process. Maybe it's not the case anymore.", "author": "mathbagu", "createdAt": "2020-05-28T07:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1MjMyNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r431652326", "bodyText": "Good remark, it's true that sometimes the node code is replaced by * in the input.", "author": "murgeyseb", "createdAt": "2020-05-28T08:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "10de9299bad16a575d3546c7723058962386d0f7", "changed_code": [{"header": "diff --git a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\nindex ab5c3997d..72aeb1407 100644\n--- a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n+++ b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n", "chunk": "@@ -258,9 +257,6 @@ public class UcteImporter implements Importer {\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n-        if (ucteLine.getElementName() != null && !ucteLine.getElementName().isEmpty()) {\n-            dl.addAlias(String.format(\"%s %s %s\", ucteLine.getId().getNodeCode1().toString(), ucteLine.getId().getNodeCode2().toString(), ucteLine.getElementName()));\n-        }\n         dl.newExtension(XnodeAdder.class).withCode(xnode.getCode().toString()).add();\n \n         if (ucteLine.getCurrentLimit() != null) {\n", "next_change": {"commit": "21af21418db69dd7f47471a5c49919db118b97fd", "changed_code": [{"header": "diff --git a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\nindex 72aeb1407..f33b8c57f 100644\n--- a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n+++ b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n", "chunk": "@@ -257,6 +257,9 @@ public class UcteImporter implements Importer {\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n+        if (ucteLine.getElementName() != null && !ucteLine.getElementName().isEmpty()) {\n+            dl.addAlias(String.format(\"%s %s %s\", ucteLine.getId().getNodeCode1().toString(), ucteLine.getId().getNodeCode2().toString(), ucteLine.getElementName()));\n+        }\n         dl.newExtension(XnodeAdder.class).withCode(xnode.getCode().toString()).add();\n \n         if (ucteLine.getCurrentLimit() != null) {\n", "next_change": {"commit": "a07003e0eb1f1c7a4521afa34ce1baf386231483", "changed_code": [{"header": "diff --git a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\nindex f33b8c57f..53cbc1947 100644\n--- a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n+++ b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n", "chunk": "@@ -257,9 +257,7 @@ public class UcteImporter implements Importer {\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n-        if (ucteLine.getElementName() != null && !ucteLine.getElementName().isEmpty()) {\n-            dl.addAlias(String.format(\"%s %s %s\", ucteLine.getId().getNodeCode1().toString(), ucteLine.getId().getNodeCode2().toString(), ucteLine.getElementName()));\n-        }\n+        addElementNameAlias(ucteLine, dl);\n         dl.newExtension(XnodeAdder.class).withCode(xnode.getCode().toString()).add();\n \n         if (ucteLine.getCurrentLimit() != null) {\n", "next_change": {"commit": "90f85c4a84e5a7881ef191a82fe5c0d1b6851444", "changed_code": [{"header": "diff --git a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\nindex 53cbc1947..a7a403c01 100644\n--- a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n+++ b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n", "chunk": "@@ -257,7 +257,6 @@ public class UcteImporter implements Importer {\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n-        addElementNameAlias(ucteLine, dl);\n         dl.newExtension(XnodeAdder.class).withCode(xnode.getCode().toString()).add();\n \n         if (ucteLine.getCurrentLimit() != null) {\n", "next_change": {"commit": "8ed7eb525819fd7e22ea60ab93135e0c250c4126", "changed_code": [{"header": "diff --git a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\nindex a7a403c01..85997c75e 100644\n--- a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n+++ b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n", "chunk": "@@ -256,6 +282,7 @@ public class UcteImporter implements Importer {\n                 .setP0(p0)\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n+                .setFictitious(isFictitious(ucteLine))\n                 .add();\n         dl.newExtension(XnodeAdder.class).withCode(xnode.getCode().toString()).add();\n \n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\nindex ab5c3997d..85997c75e 100644\n--- a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n+++ b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n", "chunk": "@@ -257,10 +282,8 @@ public class UcteImporter implements Importer {\n                 .setP0(p0)\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n+                .setFictitious(isFictitious(ucteLine))\n                 .add();\n-        if (ucteLine.getElementName() != null && !ucteLine.getElementName().isEmpty()) {\n-            dl.addAlias(String.format(\"%s %s %s\", ucteLine.getId().getNodeCode1().toString(), ucteLine.getId().getNodeCode2().toString(), ucteLine.getElementName()));\n-        }\n         dl.newExtension(XnodeAdder.class).withCode(xnode.getCode().toString()).add();\n \n         if (ucteLine.getCurrentLimit() != null) {\n", "next_change": {"commit": "f55b23c15d32af857bd646ee61ac7c7d60e9f8d6", "changed_code": [{"header": "diff --git a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\nindex 85997c75e..171407ff5 100644\n--- a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n+++ b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n", "chunk": "@@ -283,7 +273,24 @@ public class UcteImporter implements Importer {\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .setFictitious(isFictitious(ucteLine))\n+                .newGeneration()\n+                    .setTargetP(-targetP)\n+                    .setTargetQ(-targetQ)\n+                .add()\n                 .add();\n+\n+        if (xnode.isRegulatingVoltage()) {\n+            dl.getGeneration()\n+                    .setTargetV(xnode.getVoltageReference())\n+                    .setVoltageRegulationOn(true)\n+                    .setMaxP(-xnode.getMaximumPermissibleActivePowerGeneration())\n+                    .setMinP(-xnode.getMinimumPermissibleActivePowerGeneration());\n+            dl.getGeneration().newMinMaxReactiveLimits()\n+                    .setMinQ(-xnode.getMinimumPermissibleReactivePowerGeneration())\n+                    .setMaxQ(-xnode.getMaximumPermissibleReactivePowerGeneration())\n+                    .add();\n+        }\n+\n         dl.newExtension(XnodeAdder.class).withCode(xnode.getCode().toString()).add();\n \n         if (ucteLine.getCurrentLimit() != null) {\n", "next_change": {"commit": "ba4bd8aef0eb33c708911fdd67fb2d303b29a83f", "changed_code": [{"header": "diff --git a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\nindex 171407ff5..5ce353dba 100644\n--- a/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n+++ b/ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java\n", "chunk": "@@ -291,8 +321,6 @@ public class UcteImporter implements Importer {\n                     .add();\n         }\n \n-        dl.newExtension(XnodeAdder.class).withCode(xnode.getCode().toString()).add();\n-\n         if (ucteLine.getCurrentLimit() != null) {\n             dl.newCurrentLimits()\n                     .setPermanentLimit(ucteLine.getCurrentLimit())\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "f55b23c15d32af857bd646ee61ac7c7d60e9f8d6", "committedDate": "2020-07-17 22:45:50 +0200", "message": "DanglingLine with generation attributes (#1357)"}, {"oid": "1049045cd4bd8cfe496aebc4a4dd53db75c9990e", "committedDate": "2020-07-28 18:01:12 +0200", "message": "Slackbus extension: interface and implementation (#1381)"}, {"oid": "cf533604721221defbb65620f6d95acce77b99c6", "committedDate": "2020-11-16 10:30:57 +0100", "message": "[IIDM] Allow to reuse TieLineAdder twice (#1507)"}, {"oid": "488d8ec4d30c978885962338a007cb0cc240ef6d", "committedDate": "2020-12-03 15:29:44 +0100", "message": "Introduce concept of Boundary for DanglingLine and TieLine (#1488)"}, {"oid": "7d3dc38c3ee3385820b114907c0c74be5def2035", "committedDate": "2020-12-17 12:10:23 +0100", "message": "UCTE export: ignore fictitious YNodes introduced for transformers at boundary (#1566)"}, {"oid": "ca5f855d9b2f621327f458f5b85e15b4cb4a1df1", "committedDate": "2020-12-22 15:36:33 +0100", "message": "Kosovo (#1582)"}, {"oid": "5a53e97fd15de72751b2f273e83af8bd59c2fb3a", "committedDate": "2021-01-20 10:31:37 +0100", "message": "UCTE: quality of datasets and calculations support (#1567)"}, {"oid": "9d2a928fe4483a11a02331c84e7b9b036dec46b5", "committedDate": "2021-02-15 17:08:15 +0100", "message": "Add some information for mergedxnode extension (#1607)"}, {"oid": "a5a2fdc3c28ffbe40143c7a58234c1c4fc7e14a6", "committedDate": "2021-03-23 17:45:08 +0100", "message": "extending the min/max range if tap position is outside range with UCT import (#1663)"}, {"oid": "68407a50d8d6b14b2e096dcf8be95dbed5613c31", "committedDate": "2021-04-01 15:14:09 +0200", "message": "Functional logs POC (#1666)"}, {"oid": "50ec30f06860bc4a81491914c361bfad602dac81", "committedDate": "2021-06-08 16:36:02 +0200", "message": "UCTE, nominal power is optional (#1754)"}, {"oid": "d81ccc533461ee0e5c57fec3876385b592005999", "committedDate": "2021-06-24 14:19:21 +0200", "message": "Use double instead of float in UCTE model (#1774)"}, {"oid": "1fda314036cc7d7cf91e0b1a274a786111eca0c6", "committedDate": "2021-07-05 09:40:27 +0200", "message": "Allow Xnodes connected to more than 2 Nodes to be imported correctly if the number of connected branches s lower or equal than two. (#1780)"}, {"oid": "5af667ee783e0da7448d815f5399ce1eb11cb12a", "committedDate": "2021-09-08 08:37:21 +0200", "message": "UCTE report cleanup (#1814)"}, {"oid": "47fb9fd45d1477f3776dfe3a37c2630d114908b8", "committedDate": "2022-02-02 14:56:06 +0100", "message": "Allow to delay network validation (#1819)"}, {"oid": "928ad4cbbc27d9042af39557057122d60621637d", "committedDate": "2022-03-30 13:42:22 +0200", "message": "UCTE importer: fix phase changer regulation mode (#1804)"}, {"oid": "9c7dcadff01acbdb2cc64dfb20346aae75058460", "committedDate": "2022-06-28 12:59:17 +0200", "message": "Limit getters return optionals (#2169)"}, {"oid": "e18b0211b21f249b6289f64ec629cfa430020bb3", "committedDate": "2022-09-19 15:12:45 +0200", "message": "UCTE importer: ignore coupler with same bus at both ends (#2291)"}, {"oid": "688de514609c047a4cad98e1465b4c83c59c418c", "committedDate": "2022-09-30 09:29:53 +0200", "message": "Use PowSyBl Parent 9 (#2304)"}, {"oid": "201c3429df43693939ad992cc05eae862d4604ac", "committedDate": "2022-10-13 10:06:30 +0200", "message": "UCTE import, avoid empty element name properties (#2322)"}, {"oid": "b8476d79a6576d6185389848eee511e3d71871a2", "committedDate": "2022-11-03 15:54:11 +0100", "message": "Remove iidm-converter-api (merged with iidm-api) (#2350)"}, {"oid": "2e28f4e16f2f27b9d335a948e301ef178253e692", "committedDate": "2022-11-21 11:05:44 +0100", "message": "UCTE import: support of mixed ratio and phase tap changers (#2326)"}, {"oid": "5930ab665dbb3c830aea71ed81089f15292f4498", "committedDate": "2022-12-16 11:20:48 +0100", "message": "Fix UCTE importer conventions of PST active power flow regulation (#2410)"}, {"oid": "ffeeb1b9ab0f18996f99550ad255e1b16a512a66", "committedDate": "2023-03-08 11:30:35 +0100", "message": "Replace AssertionError by IllegalStateException. (#2465)"}, {"oid": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "committedDate": "2023-05-12 17:26:38 +0200", "message": "Replace HalfLine by DanglingLine (#2437)"}, {"oid": "ba4bd8aef0eb33c708911fdd67fb2d303b29a83f", "committedDate": "2023-05-16 17:25:15 +0200", "message": "Remove Xnode/mergedXnode extensions (#2568)"}]}, {"oid": "10de9299bad16a575d3546c7723058962386d0f7", "url": "https://github.com/powsybl/powsybl-core/commit/10de9299bad16a575d3546c7723058962386d0f7", "message": "Some fixes after rebase\n\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:08:34Z", "type": "forcePushed"}, {"oid": "1645bcd979eeff82197e98eeba786547e9f3e439", "url": "https://github.com/powsybl/powsybl-core/commit/1645bcd979eeff82197e98eeba786547e9f3e439", "message": "Prepare XIIDM files for IIDM v1.3 (#1312)\n\n* Prepare XIIDM files for IIDM v1.3\r\n\r\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>\r\n\r\n* Fix sonar issue\r\n\r\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "0b51ad139b5ace53d8669e9db1f3f6d6ddbc4fbf", "url": "https://github.com/powsybl/powsybl-core/commit/0b51ad139b5ace53d8669e9db1f3f6d6ddbc4fbf", "message": "Adapt tests of voltagePerReactivePowerControl, matpower converter and psse converter to XIIDM 1.3 (#1353)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "2f08dd0278eb8c3a81851aef347e0f4068b344bc", "url": "https://github.com/powsybl/powsybl-core/commit/2f08dd0278eb8c3a81851aef347e0f4068b344bc", "message": "cgmes model returns all terminals for a given conducting equipment (#1347)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "c2ea6093e702c79de6b5b1e0cc606e85e8d3d20c", "url": "https://github.com/powsybl/powsybl-core/commit/c2ea6093e702c79de6b5b1e0cc606e85e8d3d20c", "message": "Redesign IIDM shunt compensator allowing non linear shunts + updated conversions + updated serialization (#1322)\n\n* Change Shunt API/impl\r\n* Correct json parameters files\r\n* Change XML serialisation for shunts\r\n* Change importers\r\n* Correct IEEE converter tests\r\n* Correct groovy binding\r\n* Correct matpower tests\r\n* Correct merging view tests\r\n* Correct psse converter tests\r\n* Change methods name in Shunt API\r\n* Update sectionCount attribute in XIIDM\r\n* Delete methods for shunts using the concept of sectionIndex\r\n* Replace currentSectionCount parameters/fields by sectionCount\r\n* Rename currentSectionCount parameter\r\n* If the g is undefined in non linear shunt model adder, g per section is considered equal to 0 (g = g of last section)\r\n\r\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "10ffdc8cceebc72dc3f49d9b31710c5671f07f19", "url": "https://github.com/powsybl/powsybl-core/commit/10ffdc8cceebc72dc3f49d9b31710c5671f07f19", "message": "Add hasTemporaryLimits() to CurrentLimitsAdder + correct CGMES conversion (#1372)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "ab920673f4b65b630ba305a18fa744ebb0816be4", "url": "https://github.com/powsybl/powsybl-core/commit/ab920673f4b65b630ba305a18fa744ebb0816be4", "message": "Fix sonar bugs: \"Don't use fail() inside a try-catch catching an AssertionError.\" (#1370)\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>\r\n\r\nCo-authored-by: MioRtia <miora.ralambotiana@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "21af21418db69dd7f47471a5c49919db118b97fd", "url": "https://github.com/powsybl/powsybl-core/commit/21af21418db69dd7f47471a5c49919db118b97fd", "message": "First version of IIDM aliases addition\n\nSigned-off-by: S\u00e9bastien Murgey <sebastien.murgey@gmail.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "6d03e0f667f3ee1e62b2021fe766083a9d9e02dd", "url": "https://github.com/powsybl/powsybl-core/commit/6d03e0f667f3ee1e62b2021fe766083a9d9e02dd", "message": "Fix UCTE impoter TieLine creation that was lacking <DanglingLines ID as alias too\n\nSigned-off-by: S\u00e9bastien Murgey <sebastien.murgey@gmail.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "bf669ce1ba598fe0149a51a75488350c00d18bd9", "url": "https://github.com/powsybl/powsybl-core/commit/bf669ce1ba598fe0149a51a75488350c00d18bd9", "message": "Fix IIDM XML export\n\nSigned-off-by: S\u00e9bastien Murgey <sebastien.murgey@gmail.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "55a6fce77c2d54ed87c8737951eb92d917a10982", "url": "https://github.com/powsybl/powsybl-core/commit/55a6fce77c2d54ed87c8737951eb92d917a10982", "message": "Add tests\n\nSigned-off-by: S\u00e9bastien Murgey <sebastien.murgey@gmail.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "996cd2a21c5eb2bd0b5beecf2796cb76e6347495", "url": "https://github.com/powsybl/powsybl-core/commit/996cd2a21c5eb2bd0b5beecf2796cb76e6347495", "message": "Change default implementation of aliases management methods\n\nSigned-off-by: S\u00e9bastien MURGEY <sebastien.murgey@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:09Z", "type": "commit"}, {"oid": "d67448b3733e6ae66fd954c6099df7afe6e92d28", "url": "https://github.com/powsybl/powsybl-core/commit/d67448b3733e6ae66fd954c6099df7afe6e92d28", "message": "Adapt addAlias behaviour after review\n\nSigned-off-by: S\u00e9bastien MURGEY <sebastien.murgey@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "commit"}, {"oid": "eebaad271415f0191a6e41ed72d690d4e784df9a", "url": "https://github.com/powsybl/powsybl-core/commit/eebaad271415f0191a6e41ed72d690d4e784df9a", "message": "Fixes after review\n\nSigned-off-by: S\u00e9bastien MURGEY <sebastien.murgey@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "commit"}, {"oid": "a07003e0eb1f1c7a4521afa34ce1baf386231483", "url": "https://github.com/powsybl/powsybl-core/commit/a07003e0eb1f1c7a4521afa34ce1baf386231483", "message": "Refactor UCTE alias creation in UcteImporter\n\nSigned-off-by: S\u00e9bastien MURGEY <sebastien.murgey@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "commit"}, {"oid": "b3d5d8b23759366a5b366fca82c1d6dcced095eb", "url": "https://github.com/powsybl/powsybl-core/commit/b3d5d8b23759366a5b366fca82c1d6dcced095eb", "message": "Fix check style\n\nSigned-off-by: S\u00e9bastien MURGEY <sebastien.murgey@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "commit"}, {"oid": "90f85c4a84e5a7881ef191a82fe5c0d1b6851444", "url": "https://github.com/powsybl/powsybl-core/commit/90f85c4a84e5a7881ef191a82fe5c0d1b6851444", "message": "Remove aliases creation from UcteImporter and migrate it in a utility package\n\nSigned-off-by: S\u00e9bastien MURGEY <sebastien.murgey@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "commit"}, {"oid": "b1f099f8fc3e330331d51434e44281fb1b9156f6", "url": "https://github.com/powsybl/powsybl-core/commit/b1f099f8fc3e330331d51434e44281fb1b9156f6", "message": "Change default behaviour to change in aliases by default\n\nSigned-off-by: S\u00e9bastien MURGEY <sebastien.murgey@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "commit"}, {"oid": "6fa473a2370f7d2a188ac064de0e5e4d3e5ed681", "url": "https://github.com/powsybl/powsybl-core/commit/6fa473a2370f7d2a188ac064de0e5e4d3e5ed681", "message": "Remove research only by ID, and fix Ucte alias creation script to avoid duplicated aliases.\n\nSigned-off-by: S\u00e9bastien MURGEY <sebastien.murgey@rte-france.com>\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "commit"}, {"oid": "05e95ee5c2636602fa5385cd6c5e3dc2bbaf6b4f", "url": "https://github.com/powsybl/powsybl-core/commit/05e95ee5c2636602fa5385cd6c5e3dc2bbaf6b4f", "message": "Some fixes after rebase\n\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "commit"}, {"oid": "05e95ee5c2636602fa5385cd6c5e3dc2bbaf6b4f", "url": "https://github.com/powsybl/powsybl-core/commit/05e95ee5c2636602fa5385cd6c5e3dc2bbaf6b4f", "message": "Some fixes after rebase\n\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-06-30T15:18:10Z", "type": "forcePushed"}, {"oid": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "url": "https://github.com/powsybl/powsybl-core/commit/1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "message": "Merge branch 'master' into aliasesAddition", "committedDate": "2020-06-30T15:19:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MzU5NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450173595", "body": "There is a small typo here\r\n> or an**a** alias", "bodyText": "There is a small typo here\n\nor ana alias", "bodyHTML": "<p dir=\"auto\">There is a small typo here</p>\n<blockquote>\n<p dir=\"auto\">or an<strong>a</strong> alias</p>\n</blockquote>", "author": "mathbagu", "createdAt": "2020-07-06T12:02:55Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java", "diffHunk": "@@ -261,7 +261,7 @@ static PrettyNetworkFactory with(String name) {\n     /**\n      * Get a substation voltage level.\n      *\n-     * @param id the id of the substation voltage level\n+     * @param id the id or ana alias of the substation voltage level", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "295260068fdbabdab5d9339954860f1ad51067b0", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\nindex 654496176..ec533762d 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n", "chunk": "@@ -261,7 +261,7 @@ public interface Network extends Container<Network> {\n     /**\n      * Get a substation voltage level.\n      *\n-     * @param id the id or ana alias of the substation voltage level\n+     * @param id the id or an alias of the substation voltage level\n      */\n     VoltageLevel getVoltageLevel(String id);\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\nindex 654496176..ec533762d 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Network.java\n", "chunk": "@@ -261,7 +261,7 @@ public interface Network extends Container<Network> {\n     /**\n      * Get a substation voltage level.\n      *\n-     * @param id the id or ana alias of the substation voltage level\n+     * @param id the id or an alias of the substation voltage level\n      */\n     VoltageLevel getVoltageLevel(String id);\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "9e7ad715baa76b13ab836568c01860ace063c5b2", "committedDate": "2020-07-21 16:26:51 +0200", "message": "Update the javadoc with the Tables copied from the current website (#1397)"}, {"oid": "3140eba9be300d053e4d37e4d984479e3e2ba27b", "committedDate": "2021-05-11 11:13:45 +0200", "message": "Add synchronous and connected components num to ComponentResult  (#1719)"}, {"oid": "8917e96e8968a1c875062eece32a933689f37924", "committedDate": "2021-09-07 13:59:32 +0200", "message": "Make substations optional (#1796)"}, {"oid": "c96036d943ef0bb1669e29c045e4d1aef4eb85eb", "committedDate": "2021-11-02 13:19:33 +0100", "message": "Add Identifiable enum type (#1859)"}, {"oid": "47fb9fd45d1477f3776dfe3a37c2630d114908b8", "committedDate": "2022-02-02 14:56:06 +0100", "message": "Allow to delay network validation (#1819)"}, {"oid": "efd14391ed41ec6cfa23469a0fb1bd83030cf2bc", "committedDate": "2022-09-26 10:58:52 +0200", "message": "Add getConnectable(string) in network (#2297)"}, {"oid": "5475db078faff718b7bee7af07c9df786ec26602", "committedDate": "2022-10-28 15:40:53 +0200", "message": "New contingency list models (#2308)"}, {"oid": "b8476d79a6576d6185389848eee511e3d71871a2", "committedDate": "2022-11-03 15:54:11 +0100", "message": "Remove iidm-converter-api (merged with iidm-api) (#2350)"}, {"oid": "9e4593b29889e735207c201a89907006d3855e76", "committedDate": "2023-03-27 16:25:32 +0200", "message": "Fix identifiable stream (#2520)"}, {"oid": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "committedDate": "2023-05-12 17:26:38 +0200", "message": "Replace HalfLine by DanglingLine (#2437)"}, {"oid": "96b78a54eb3fc1d1ed989199cf0d2caf8bf129e4", "committedDate": "2023-06-06 11:56:15 +0200", "message": "Multiple data sources (#2600)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NDAyOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450174028", "body": "Is there a reason why you choose a TreeSet instead of a HashSet. Does the order important for you? Maybe for the XML round trip?", "bodyText": "Is there a reason why you choose a TreeSet instead of a HashSet. Does the order important for you? Maybe for the XML round trip?", "bodyHTML": "<p dir=\"auto\">Is there a reason why you choose a TreeSet instead of a HashSet. Does the order important for you? Maybe for the XML round trip?</p>", "author": "mathbagu", "createdAt": "2020-07-06T12:03:52Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n     protected boolean fictitious = false;\n \n+    protected Set<String> aliases = new TreeSet<>();", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2NDg1OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450664858", "bodyText": "I do not remember if it was for ensuring that roundtrip test work... Usually, I would sa that order is not important but it may be nice to keep aliases sorted, as you said for consistency in XML I/O. However, it may not impact a lot the performances as there is no reason, in current use case, that an Identifiable would have thousands of aliases...", "author": "murgeyseb", "createdAt": "2020-07-07T07:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NDAyOA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5fedcc0e86fa8575824757cd6eb2785c74830fae", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\nindex 45ab4ceca..c64e32ba7 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\n", "chunk": "@@ -24,10 +25,11 @@ abstract class AbstractIdentifiable<I extends Identifiable<I>> extends AbstractE\n \n     protected boolean fictitious = false;\n \n-    protected Set<String> aliases = new TreeSet<>();\n-\n     protected final Properties properties = new Properties();\n \n+    private final Set<String> aliasesWithoutType = new HashSet<>();\n+    private final Map<String, String> aliasesByType = new HashMap<>();\n+\n     AbstractIdentifiable(String id, String name) {\n         this.id = id;\n         this.name = name;\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "5fedcc0e86fa8575824757cd6eb2785c74830fae", "committedDate": "2020-09-08 13:34:49 +0200", "message": "Add the possibility to associate a type to an alias (indicating what it corresponds to) (#1402)"}, {"oid": "8c0bd0517204c0efd43b936a80d1a5abd2df8c5e", "committedDate": "2020-11-27 09:53:12 +0100", "message": "Add possibility to ensure alias unicity (#1508)"}, {"oid": "4174a71debb06042aed28e8cdc146182f0e2cac3", "committedDate": "2021-02-03 11:42:52 +0100", "message": "Fix empty alias type management (#1611)"}, {"oid": "1825804083a6cff7ba5a22e33681dc713c82b6df", "committedDate": "2021-11-29 12:40:24 +0100", "message": "Remove identifiable property (#1876)"}, {"oid": "86097970b7086042d5173a2100069b3c2187dcfb", "committedDate": "2022-04-13 11:57:37 +0200", "message": "Set Identifiable name (#2078)"}, {"oid": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "committedDate": "2023-05-12 17:26:38 +0200", "message": "Replace HalfLine by DanglingLine (#2437)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MzAyMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450193021", "body": "Should we change the mergeability check to consider also aliases?", "bodyText": "Should we change the mergeability check to consider also aliases?", "bodyHTML": "<p dir=\"auto\">Should we change the mergeability check to consider also aliases?</p>", "author": "mathbagu", "createdAt": "2020-07-06T12:41:41Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java", "diffHunk": "@@ -966,6 +966,11 @@ private void mergeDanglingLines(List<MergedLine> lines, DanglingLine dl1, Dangli\n         if (dl1 != null) {\n             MergedLine l = new MergedLine();\n             l.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();\n+            l.aliases = new HashSet<>();\n+            l.aliases.add(dl1.getId());\n+            l.aliases.add(dl2.getId());\n+            l.aliases.addAll(dl1.getAliases());\n+            l.aliases.addAll(dl2.getAliases());", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2NzI4NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450667284", "bodyText": "Should we enforce consistency (no duplicate aliases) or remove them in case of conflict during merging ?", "author": "murgeyseb", "createdAt": "2020-07-07T07:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MzAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MDkwMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r452690903", "bodyText": "What is the current behavior if you try to add an existing alias to another identifiable? If I remember well, an exception is thrown. So I think we should consider the network are not mergeable, specially if we consider alias as a kind of identifier.", "author": "mathbagu", "createdAt": "2020-07-10T08:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MzAyMQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "43db044de7bbf33d1697a4a8db7b2788141b1fec", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\nindex 0944371a2..69ee272f1 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n", "chunk": "@@ -964,6 +936,11 @@ class NetworkImpl extends AbstractIdentifiable<Network> implements Network, Vari\n \n     private void mergeDanglingLines(List<MergedLine> lines, DanglingLine dl1, DanglingLine dl2) {\n         if (dl1 != null) {\n+\n+            // Dangling line 2 must always be reoriented\n+            // setG1, setB1 and setG2, setB2 will be associated to the end1 and end2 of the reoriented branch\n+            ReorientedBranchCharacteristics brp2 = new ReorientedBranchCharacteristics(dl2.getR(), dl2.getX(), dl2.getG(), dl2.getB(), 0.0, 0.0);\n+\n             MergedLine l = new MergedLine();\n             l.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();\n             l.aliases = new HashSet<>();\n", "next_change": {"commit": "c0a815f5f39746cbf97beefa738367e067848958", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\nindex 69ee272f1..a52f71f05 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n", "chunk": "@@ -915,34 +921,18 @@ class NetworkImpl extends AbstractIdentifiable<Network> implements Network, Vari\n         LOGGER.info(\"Merging of {} done in {} ms\", id, System.currentTimeMillis() - start);\n     }\n \n-    private DanglingLine getDanglingLineByTheOther(DanglingLine dl2, Map<String, DanglingLine> dl1byXnodeCode) {\n-        DanglingLine dl1 = getDanglingLine(dl2.getId());\n-        if (dl1 == null) {\n-            // mapping by ucte xnode code\n-            if (dl2.getUcteXnodeCode() != null) {\n-                dl1 = dl1byXnodeCode.get(dl2.getUcteXnodeCode());\n-            }\n-        } else {\n-            // mapping by id\n-            if (dl1.getUcteXnodeCode() != null && dl2.getUcteXnodeCode() != null\n-                    && !dl1.getUcteXnodeCode().equals(dl2.getUcteXnodeCode())) {\n-                throw new PowsyblException(\"Dangling line couple \" + dl1.getId()\n-                        + \" have inconsistent Xnodes (\" + dl1.getUcteXnodeCode()\n-                        + \"!=\" + dl2.getUcteXnodeCode() + \")\");\n-            }\n-        }\n-        return dl1;\n-    }\n-\n-    private void mergeDanglingLines(List<MergedLine> lines, DanglingLine dl1, DanglingLine dl2) {\n+    private void mergeDanglingLines(List<MergedLine> lines, DanglingLine dl1, DanglingLine dl2, Map<String, List<DanglingLine>> dl1byXnodeCode) {\n         if (dl1 != null) {\n+            if (dl1.getUcteXnodeCode() != null) {\n+                dl1byXnodeCode.get(dl1.getUcteXnodeCode()).remove(dl1);\n+            }\n \n             // Dangling line 2 must always be reoriented\n             // setG1, setB1 and setG2, setB2 will be associated to the end1 and end2 of the reoriented branch\n             ReorientedBranchCharacteristics brp2 = new ReorientedBranchCharacteristics(dl2.getR(), dl2.getX(), dl2.getG(), dl2.getB(), 0.0, 0.0);\n \n             MergedLine l = new MergedLine();\n-            l.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();\n+            l.id = buildMergedId(dl1.getId(), dl2.getId());\n             l.aliases = new HashSet<>();\n             l.aliases.add(dl1.getId());\n             l.aliases.add(dl2.getId());\n", "next_change": {"commit": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\nindex a52f71f05..cdef3ab0b 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java\n", "chunk": "@@ -921,177 +931,59 @@ class NetworkImpl extends AbstractIdentifiable<Network> implements Network, Vari\n         LOGGER.info(\"Merging of {} done in {} ms\", id, System.currentTimeMillis() - start);\n     }\n \n-    private void mergeDanglingLines(List<MergedLine> lines, DanglingLine dl1, DanglingLine dl2, Map<String, List<DanglingLine>> dl1byXnodeCode) {\n+    private void pairDanglingLines(List<DanglingLinePair> danglingLinePairs, DanglingLine dl1, DanglingLine dl2, Map<String, List<DanglingLine>> dl1byXnodeCode) {\n         if (dl1 != null) {\n             if (dl1.getUcteXnodeCode() != null) {\n                 dl1byXnodeCode.get(dl1.getUcteXnodeCode()).remove(dl1);\n             }\n-\n-            // Dangling line 2 must always be reoriented\n-            // setG1, setB1 and setG2, setB2 will be associated to the end1 and end2 of the reoriented branch\n-            ReorientedBranchCharacteristics brp2 = new ReorientedBranchCharacteristics(dl2.getR(), dl2.getX(), dl2.getG(), dl2.getB(), 0.0, 0.0);\n-\n-            MergedLine l = new MergedLine();\n+            DanglingLinePair l = new DanglingLinePair();\n             l.id = buildMergedId(dl1.getId(), dl2.getId());\n-            l.aliases = new HashSet<>();\n-            l.aliases.add(dl1.getId());\n-            l.aliases.add(dl2.getId());\n-            l.aliases.addAll(dl1.getAliases());\n-            l.aliases.addAll(dl2.getAliases());\n-            Terminal t1 = dl1.getTerminal();\n-            Terminal t2 = dl2.getTerminal();\n-            VoltageLevel vl1 = t1.getVoltageLevel();\n-            VoltageLevel vl2 = t2.getVoltageLevel();\n-            l.voltageLevel1 = vl1.getId();\n-            l.voltageLevel2 = vl2.getId();\n-            l.xnode = Optional.ofNullable(dl1.getUcteXnodeCode()).orElseGet(dl2::getUcteXnodeCode);\n-            l.half1.id = dl1.getId();\n-            l.half1.name = dl1.getOptionalName().orElse(null);\n-            l.half1.r = dl1.getR();\n-            l.half1.x = dl1.getX();\n-            l.half1.g1 = dl1.getG();\n-            l.half1.b1 = dl1.getB();\n-            l.half1.g2 = 0;\n-            l.half1.b2 = 0;\n-            l.half1.fictitious = dl1.isFictitious();\n-            l.half2.id = dl2.getId();\n-            l.half2.name = dl2.getOptionalName().orElse(null);\n-            l.half2.r = brp2.getR();\n-            l.half2.x = brp2.getX();\n-            l.half2.g1 = brp2.getG1();\n-            l.half2.b1 = brp2.getB1();\n-            l.half2.g2 = brp2.getG2();\n-            l.half2.b2 = brp2.getB2();\n-            l.half2.fictitious = dl2.isFictitious();\n-            l.limits1 = dl1.getCurrentLimits().orElse(null);\n-            l.limits2 = dl2.getCurrentLimits().orElse(null);\n-            if (t1.getVoltageLevel().getTopologyKind() == TopologyKind.BUS_BREAKER) {\n-                Bus b1 = t1.getBusBreakerView().getBus();\n-                if (b1 != null) {\n-                    l.bus1 = b1.getId();\n-                }\n-                l.connectableBus1 = t1.getBusBreakerView().getConnectableBus().getId();\n-            } else {\n-                l.node1 = t1.getNodeBreakerView().getNode();\n-            }\n-            if (t2.getVoltageLevel().getTopologyKind() == TopologyKind.BUS_BREAKER) {\n-                Bus b2 = t2.getBusBreakerView().getBus();\n-                if (b2 != null) {\n-                    l.bus2 = b2.getId();\n-                }\n-                l.connectableBus2 = t2.getBusBreakerView().getConnectableBus().getId();\n-            } else {\n-                l.node2 = t2.getNodeBreakerView().getNode();\n-            }\n-            l.p1 = t1.getP();\n-            l.q1 = t1.getQ();\n-            l.p2 = t2.getP();\n-            l.q2 = t2.getQ();\n-            l.country1 = vl1.getSubstation().flatMap(Substation::getCountry).orElse(null);\n-            l.country2 = vl2.getSubstation().flatMap(Substation::getCountry).orElse(null);\n+            l.name = buildMergedName(dl1.getId(), dl2.getId(), dl1.getOptionalName().orElse(null), dl2.getOptionalName().orElse(null));\n+            l.dl1Id = dl1.getId();\n+            l.dl2Id = dl2.getId();\n+            l.aliases = new HashMap<>();\n             mergeProperties(dl1, dl2, l.properties);\n-            lines.add(l);\n+            danglingLinePairs.add(l);\n \n-            // remove the 2 dangling lines\n-            dl1.remove();\n-            dl2.remove();\n+            if (dl1.getId().equals(dl2.getId())) { // if identical IDs, rename dangling lines\n+                ((DanglingLineImpl) dl1).replaceId(l.dl1Id + \"_1\");\n+                ((DanglingLineImpl) dl2).replaceId(l.dl2Id + \"_2\");\n+                l.dl1Id = dl1.getId();\n+                l.dl2Id = dl2.getId();\n+            }\n+            mergeIdenticalAliases(dl1, dl2, l.aliases);\n         }\n     }\n \n-    private void replaceDanglingLineByLine(List<MergedLine> lines, Multimap<Boundary, MergedLine> mergedLineByBoundary) {\n-        for (MergedLine mergedLine : lines) {\n-            LOGGER.debug(\"Replacing dangling line couple '{}' (xnode={}, country1={}, country2={}) by a line\",\n-                    mergedLine.id, mergedLine.xnode, mergedLine.country1, mergedLine.country2);\n-            TieLineAdderImpl la = newTieLine()\n-                    .setId(mergedLine.id)\n-                    .setName(buildMergedName(mergedLine.half1.id, mergedLine.half2.id, mergedLine.half1.name, mergedLine.half2.name))\n-                    .setVoltageLevel1(mergedLine.voltageLevel1)\n-                    .setVoltageLevel2(mergedLine.voltageLevel2)\n-                    .newHalfLine1().setId(mergedLine.half1.id)\n-                    .setName(mergedLine.half1.name)\n-                    .setR(mergedLine.half1.r)\n-                    .setX(mergedLine.half1.x)\n-                    .setG1(mergedLine.half1.g1)\n-                    .setG2(mergedLine.half1.g2)\n-                    .setB1(mergedLine.half1.b1)\n-                    .setB2(mergedLine.half1.b2)\n-                    .setFictitious(mergedLine.half1.fictitious)\n-                    .add()\n-                    .newHalfLine2().setId(mergedLine.half2.id)\n-                    .setName(mergedLine.half2.name)\n-                    .setR(mergedLine.half2.r)\n-                    .setX(mergedLine.half2.x)\n-                    .setG1(mergedLine.half2.g1)\n-                    .setG2(mergedLine.half2.g2)\n-                    .setB1(mergedLine.half2.b1)\n-                    .setB2(mergedLine.half2.b2)\n-                    .setFictitious(mergedLine.half2.fictitious)\n-                    .add()\n-                    .setUcteXnodeCode(mergedLine.xnode);\n-            if (mergedLine.bus1 != null) {\n-                la.setBus1(mergedLine.bus1);\n-            }\n-            la.setConnectableBus1(mergedLine.connectableBus1);\n-            if (mergedLine.bus2 != null) {\n-                la.setBus2(mergedLine.bus2);\n-            }\n-            la.setConnectableBus2(mergedLine.connectableBus2);\n-            if (mergedLine.node1 != null) {\n-                la.setNode1(mergedLine.node1);\n-            }\n-            if (mergedLine.node2 != null) {\n-                la.setNode2(mergedLine.node2);\n-            }\n-            TieLineImpl l = la.add();\n-            l.getLimitsHolder1().setOperationalLimits(LimitType.CURRENT, mergedLine.limits1);\n-            l.getLimitsHolder2().setOperationalLimits(LimitType.CURRENT, mergedLine.limits2);\n-            l.getTerminal1().setP(mergedLine.p1).setQ(mergedLine.q1);\n-            l.getTerminal2().setP(mergedLine.p2).setQ(mergedLine.q2);\n-            mergedLine.properties.forEach((key, val) -> l.setProperty(key.toString(), val.toString()));\n-            mergedLine.aliases.forEach(l::addAlias);\n-\n-            mergedLineByBoundary.put(new Boundary(mergedLine.country1, mergedLine.country2), mergedLine);\n+    private void replaceDanglingLineByLine(List<DanglingLinePair> lines) {\n+        for (DanglingLinePair danglingLinePair : lines) {\n+            LOGGER.debug(\"Creating tie line '{}' between dangling line couple '{}' and '{}\",\n+                    danglingLinePair.id, danglingLinePair.dl1Id, danglingLinePair.dl2Id);\n+            TieLineImpl l = newTieLine()\n+                    .setId(danglingLinePair.id)\n+                    .setEnsureIdUnicity(true)\n+                    .setName(danglingLinePair.name)\n+                    .setDanglingLine1(danglingLinePair.dl1Id)\n+                    .setDanglingLine2(danglingLinePair.dl2Id)\n+                    .add();\n+            danglingLinePair.properties.forEach((key, val) -> l.setProperty(key.toString(), val.toString()));\n+            danglingLinePair.aliases.forEach((alias, type) -> {\n+                if (type.isEmpty()) {\n+                    l.addAlias(alias);\n+                } else {\n+                    l.addAlias(alias, type);\n+                }\n+            });\n         }\n     }\n \n-    class MergedLine {\n+    class DanglingLinePair {\n         String id;\n-        Set<String> aliases;\n-        String voltageLevel1;\n-        String voltageLevel2;\n-        String xnode;\n-        String bus1;\n-        String bus2;\n-        String connectableBus1;\n-        String connectableBus2;\n-        Integer node1;\n-        Integer node2;\n+        String name;\n+        String dl1Id;\n+        String dl2Id;\n+        Map<String, String> aliases;\n         Properties properties = new Properties();\n-\n-        class HalfMergedLine {\n-            String id;\n-            String name;\n-            double r;\n-            double x;\n-            double g1;\n-            double g2;\n-            double b1;\n-            double b2;\n-            boolean fictitious;\n-        }\n-\n-        final HalfMergedLine half1 = new HalfMergedLine();\n-        final HalfMergedLine half2 = new HalfMergedLine();\n-\n-        CurrentLimits limits1;\n-        CurrentLimits limits2;\n-        double p1;\n-        double q1;\n-        double p2;\n-        double q2;\n-\n-        Country country1;\n-        Country country2;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "050e1d41b8b95ea1d0568393f7553f1ed598314e", "committedDate": "2020-08-27 11:22:29 +0200", "message": "Integration of merging view (#1445)"}, {"oid": "e2ef9188919a451b3a3e5809201a7ed784c7a940", "committedDate": "2020-09-22 09:53:22 +0200", "message": "Fix missing call to MultiVariantObject implementations (#1476)"}, {"oid": "cf533604721221defbb65620f6d95acce77b99c6", "committedDate": "2020-11-16 10:30:57 +0100", "message": "[IIDM] Allow to reuse TieLineAdder twice (#1507)"}, {"oid": "488d8ec4d30c978885962338a007cb0cc240ef6d", "committedDate": "2020-12-03 15:29:44 +0100", "message": "Introduce concept of Boundary for DanglingLine and TieLine (#1488)"}, {"oid": "393b2ca1d01a24d416bf2136ff7dde5ecbd778c2", "committedDate": "2021-01-11 13:39:45 +0100", "message": "IIDM operational limits  (#1359)"}, {"oid": "289083ba8916021f6ddc34493c06b5c9b42235c0", "committedDate": "2021-03-03 14:06:46 +0100", "message": "Optimise getBus in Bus/Breaker view for default Network implementation (#1645)"}, {"oid": "044aaaca72ea0d9d6e95a945096711b00296a1e3", "committedDate": "2021-05-07 10:49:21 +0200", "message": "Add a bus cache to network implementation (#1722)"}, {"oid": "3140eba9be300d053e4d37e4d984479e3e2ba27b", "committedDate": "2021-05-11 11:13:45 +0200", "message": "Add synchronous and connected components num to ComponentResult  (#1719)"}, {"oid": "8917e96e8968a1c875062eece32a933689f37924", "committedDate": "2021-09-07 13:59:32 +0200", "message": "Make substations optional (#1796)"}, {"oid": "7b4d32ab59ef531330ef00532a73d2b43083dba4", "committedDate": "2021-10-04 17:06:25 +0200", "message": "Fix bus breaker view cache (#1841)"}, {"oid": "47fb9fd45d1477f3776dfe3a37c2630d114908b8", "committedDate": "2022-02-02 14:56:06 +0100", "message": "Allow to delay network validation (#1819)"}, {"oid": "43db044de7bbf33d1697a4a8db7b2788141b1fec", "committedDate": "2022-03-22 15:16:42 +0100", "message": "TieLine: fix issues with line characteristics computation (#1755)"}, {"oid": "7635bc4bb7cf22f8cd2ccfb8a4a9d7719e9302c0", "committedDate": "2022-04-25 10:51:00 +0200", "message": "Fix NPE: no NPE thrown when equipment added and validation level has been invalidated (#2087)"}, {"oid": "9c7dcadff01acbdb2cc64dfb20346aae75058460", "committedDate": "2022-06-28 12:59:17 +0200", "message": "Limit getters return optionals (#2169)"}, {"oid": "efd14391ed41ec6cfa23469a0fb1bd83030cf2bc", "committedDate": "2022-09-26 10:58:52 +0200", "message": "Add getConnectable(string) in network (#2297)"}, {"oid": "c0a815f5f39746cbf97beefa738367e067848958", "committedDate": "2023-01-09 17:06:49 +0100", "message": "Implement new consistent behavior when calling merge method (uniform in NetworkImpl, MergingView and CGM import) (#2394)"}, {"oid": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "committedDate": "2023-05-12 17:26:38 +0200", "message": "Replace HalfLine by DanglingLine (#2437)"}, {"oid": "b7f9c3dfed7159ac75a69f5b3d1240598d4b0461", "committedDate": "2023-05-31 14:08:11 +0200", "message": "Branch does not extend connectable (#2591)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NDUyMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450194521", "body": "It's not efficient: you search for the object 3 times. If the map is huge, it could lead to bad performance issue.", "bodyText": "It's not efficient: you search for the object 3 times. If the map is huge, it could lead to bad performance issue.", "bodyHTML": "<p dir=\"auto\">It's not efficient: you search for the object 3 times. If the map is huge, it could lead to bad performance issue.</p>", "author": "mathbagu", "createdAt": "2020-07-06T12:44:34Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java", "diffHunk": "@@ -50,14 +53,54 @@ void checkAndAdd(Identifiable<?> obj) {\n         all.add(obj);\n     }\n \n-    Identifiable get(String id) {\n+    boolean addAlias(Identifiable<?> obj, String alias) {\n+        if (objectsById.containsKey(alias)) {\n+            if (objectsById.get(alias).equals(obj)) {\n+                // Silently ignore affecting the objects id to its own aliases\n+                return false;\n+            }\n+            Identifiable<?> aliasConflict = objectsById.get(alias);", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "295260068fdbabdab5d9339954860f1ad51067b0", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..8c66a2440 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -54,24 +54,26 @@ class NetworkIndex {\n     }\n \n     boolean addAlias(Identifiable<?> obj, String alias) {\n-        if (objectsById.containsKey(alias)) {\n-            if (objectsById.get(alias).equals(obj)) {\n+        Identifiable<?> aliasConflict = objectsById.get(alias);\n+        if (aliasConflict != null) {\n+            if (aliasConflict.equals(obj)) {\n                 // Silently ignore affecting the objects id to its own aliases\n                 return false;\n             }\n-            Identifiable<?> aliasConflict = objectsById.get(alias);\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n                     aliasConflict.getClass(),\n                     aliasConflict.getId());\n             throw new PowsyblException(message);\n-        } else if (idByAlias.containsKey(alias)) {\n-            if (objectsById.get(idByAlias.get(alias)).equals(obj)) {\n+        }\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias != null) {\n+            aliasConflict = objectsById.get(idForAlias);\n+            if (aliasConflict.equals(obj)) {\n                 // Silently ignore affecting the same alias twice to an object\n                 return false;\n             }\n-            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..ea2e62748 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -54,24 +54,26 @@ class NetworkIndex {\n     }\n \n     boolean addAlias(Identifiable<?> obj, String alias) {\n-        if (objectsById.containsKey(alias)) {\n-            if (objectsById.get(alias).equals(obj)) {\n+        Identifiable<?> aliasConflict = objectsById.get(alias);\n+        if (aliasConflict != null) {\n+            if (aliasConflict.equals(obj)) {\n                 // Silently ignore affecting the objects id to its own aliases\n                 return false;\n             }\n-            Identifiable<?> aliasConflict = objectsById.get(alias);\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n                     aliasConflict.getClass(),\n                     aliasConflict.getId());\n             throw new PowsyblException(message);\n-        } else if (idByAlias.containsKey(alias)) {\n-            if (objectsById.get(idByAlias.get(alias)).equals(obj)) {\n+        }\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias != null) {\n+            aliasConflict = objectsById.get(idForAlias);\n+            if (aliasConflict.equals(obj)) {\n                 // Silently ignore affecting the same alias twice to an object\n                 return false;\n             }\n-            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NDcwMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450194700", "body": "Same kind of remark there", "bodyText": "Same kind of remark there", "bodyHTML": "<p dir=\"auto\">Same kind of remark there</p>", "author": "mathbagu", "createdAt": "2020-07-06T12:44:55Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java", "diffHunk": "@@ -50,14 +53,54 @@ void checkAndAdd(Identifiable<?> obj) {\n         all.add(obj);\n     }\n \n-    Identifiable get(String id) {\n+    boolean addAlias(Identifiable<?> obj, String alias) {\n+        if (objectsById.containsKey(alias)) {\n+            if (objectsById.get(alias).equals(obj)) {\n+                // Silently ignore affecting the objects id to its own aliases\n+                return false;\n+            }\n+            Identifiable<?> aliasConflict = objectsById.get(alias);\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        } else if (idByAlias.containsKey(alias)) {\n+            if (objectsById.get(idByAlias.get(alias)).equals(obj)) {\n+                // Silently ignore affecting the same alias twice to an object\n+                return false;\n+            }\n+            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "295260068fdbabdab5d9339954860f1ad51067b0", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..8c66a2440 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -54,24 +54,26 @@ class NetworkIndex {\n     }\n \n     boolean addAlias(Identifiable<?> obj, String alias) {\n-        if (objectsById.containsKey(alias)) {\n-            if (objectsById.get(alias).equals(obj)) {\n+        Identifiable<?> aliasConflict = objectsById.get(alias);\n+        if (aliasConflict != null) {\n+            if (aliasConflict.equals(obj)) {\n                 // Silently ignore affecting the objects id to its own aliases\n                 return false;\n             }\n-            Identifiable<?> aliasConflict = objectsById.get(alias);\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n                     aliasConflict.getClass(),\n                     aliasConflict.getId());\n             throw new PowsyblException(message);\n-        } else if (idByAlias.containsKey(alias)) {\n-            if (objectsById.get(idByAlias.get(alias)).equals(obj)) {\n+        }\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias != null) {\n+            aliasConflict = objectsById.get(idForAlias);\n+            if (aliasConflict.equals(obj)) {\n                 // Silently ignore affecting the same alias twice to an object\n                 return false;\n             }\n-            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..ea2e62748 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -54,24 +54,26 @@ class NetworkIndex {\n     }\n \n     boolean addAlias(Identifiable<?> obj, String alias) {\n-        if (objectsById.containsKey(alias)) {\n-            if (objectsById.get(alias).equals(obj)) {\n+        Identifiable<?> aliasConflict = objectsById.get(alias);\n+        if (aliasConflict != null) {\n+            if (aliasConflict.equals(obj)) {\n                 // Silently ignore affecting the objects id to its own aliases\n                 return false;\n             }\n-            Identifiable<?> aliasConflict = objectsById.get(alias);\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n                     aliasConflict.getClass(),\n                     aliasConflict.getId());\n             throw new PowsyblException(message);\n-        } else if (idByAlias.containsKey(alias)) {\n-            if (objectsById.get(idByAlias.get(alias)).equals(obj)) {\n+        }\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias != null) {\n+            aliasConflict = objectsById.get(idForAlias);\n+            if (aliasConflict.equals(obj)) {\n                 // Silently ignore affecting the same alias twice to an object\n                 return false;\n             }\n-            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n             String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n                     obj.getClass(),\n                     alias,\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NTU4NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450195584", "body": "Performance: you are searching for the same object multiple times.", "bodyText": "Performance: you are searching for the same object multiple times.", "bodyHTML": "<p dir=\"auto\">Performance: you are searching for the same object multiple times.</p>", "author": "mathbagu", "createdAt": "2020-07-06T12:46:33Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java", "diffHunk": "@@ -50,14 +53,54 @@ void checkAndAdd(Identifiable<?> obj) {\n         all.add(obj);\n     }\n \n-    Identifiable get(String id) {\n+    boolean addAlias(Identifiable<?> obj, String alias) {\n+        if (objectsById.containsKey(alias)) {\n+            if (objectsById.get(alias).equals(obj)) {\n+                // Silently ignore affecting the objects id to its own aliases\n+                return false;\n+            }\n+            Identifiable<?> aliasConflict = objectsById.get(alias);\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        } else if (idByAlias.containsKey(alias)) {\n+            if (objectsById.get(idByAlias.get(alias)).equals(obj)) {\n+                // Silently ignore affecting the same alias twice to an object\n+                return false;\n+            }\n+            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        }\n+        idByAlias.put(alias, obj.getId());\n+        return true;\n+    }\n+\n+    public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n+        if (!idByAlias.containsKey(alias)) {\n+            throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n+        } else if (!idByAlias.get(alias).equals(obj.getId())) {", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "295260068fdbabdab5d9339954860f1ad51067b0", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..8c66a2440 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -84,9 +86,10 @@ class NetworkIndex {\n     }\n \n     public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n-        if (!idByAlias.containsKey(alias)) {\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias == null) {\n             throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n-        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n+        } else if (!idForAlias.equals(obj.getId())) {\n             throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n         } else {\n             idByAlias.remove(alias);\n", "next_change": {"commit": "58300149f6565566ccd50ec55d339171b823fd67", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex 8c66a2440..a15fa6712 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -96,14 +96,14 @@ class NetworkIndex {\n         }\n     }\n \n-    Identifiable get(String idOrAlias) {\n+    Identifiable<?> get(String idOrAlias) {\n         String id = idByAlias.getOrDefault(idOrAlias, idOrAlias);\n         checkId(id);\n         return objectsById.get(id);\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz) {\n-        Identifiable obj = get(id);\n+        Identifiable<?> obj = get(id);\n         if (obj != null && clazz.isAssignableFrom(obj.getClass())) {\n             return (T) obj;\n         } else {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..ea2e62748 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -84,9 +86,10 @@ class NetworkIndex {\n     }\n \n     public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n-        if (!idByAlias.containsKey(alias)) {\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias == null) {\n             throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n-        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n+        } else if (!idForAlias.equals(obj.getId())) {\n             throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n         } else {\n             idByAlias.remove(alias);\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NjU4Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450196587", "body": "That means it's not possible to use the ID of an object as one of its alias. I know it doesn't make any sense, but if it's allowed by the code, does it work properly?", "bodyText": "That means it's not possible to use the ID of an object as one of its alias. I know it doesn't make any sense, but if it's allowed by the code, does it work properly?", "bodyHTML": "<p dir=\"auto\">That means it's not possible to use the ID of an object as one of its alias. I know it doesn't make any sense, but if it's allowed by the code, does it work properly?</p>", "author": "mathbagu", "createdAt": "2020-07-06T12:48:19Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java", "diffHunk": "@@ -50,14 +53,54 @@ void checkAndAdd(Identifiable<?> obj) {\n         all.add(obj);\n     }\n \n-    Identifiable get(String id) {\n+    boolean addAlias(Identifiable<?> obj, String alias) {\n+        if (objectsById.containsKey(alias)) {\n+            if (objectsById.get(alias).equals(obj)) {\n+                // Silently ignore affecting the objects id to its own aliases\n+                return false;\n+            }\n+            Identifiable<?> aliasConflict = objectsById.get(alias);\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        } else if (idByAlias.containsKey(alias)) {\n+            if (objectsById.get(idByAlias.get(alias)).equals(obj)) {\n+                // Silently ignore affecting the same alias twice to an object\n+                return false;\n+            }\n+            Identifiable<?> aliasConflict = objectsById.get(idByAlias.get(alias));\n+            String message = String.format(\"Object (%s) with alias '%s' cannot be created because alias already refers to object (%s) with ID '%s'\",\n+                    obj.getClass(),\n+                    alias,\n+                    aliasConflict.getClass(),\n+                    aliasConflict.getId());\n+            throw new PowsyblException(message);\n+        }\n+        idByAlias.put(alias, obj.getId());\n+        return true;\n+    }\n+\n+    public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n+        if (!idByAlias.containsKey(alias)) {\n+            throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n+        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n+            throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n+        } else {\n+            idByAlias.remove(alias);\n+        }\n+    }\n+\n+    Identifiable get(String idOrAlias) {\n+        String id = idByAlias.getOrDefault(idOrAlias, idOrAlias);", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2OTMwMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450669301", "bodyText": "In current implementation, ID is not in the alias list, but as it is the ID, it works to retrieve the object using the ID", "author": "murgeyseb", "createdAt": "2020-07-07T07:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NjU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "295260068fdbabdab5d9339954860f1ad51067b0", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..8c66a2440 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -84,9 +86,10 @@ class NetworkIndex {\n     }\n \n     public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n-        if (!idByAlias.containsKey(alias)) {\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias == null) {\n             throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n-        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n+        } else if (!idForAlias.equals(obj.getId())) {\n             throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n         } else {\n             idByAlias.remove(alias);\n", "next_change": {"commit": "58300149f6565566ccd50ec55d339171b823fd67", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex 8c66a2440..a15fa6712 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -96,14 +96,14 @@ class NetworkIndex {\n         }\n     }\n \n-    Identifiable get(String idOrAlias) {\n+    Identifiable<?> get(String idOrAlias) {\n         String id = idByAlias.getOrDefault(idOrAlias, idOrAlias);\n         checkId(id);\n         return objectsById.get(id);\n     }\n \n     <T extends Identifiable> T get(String id, Class<T> clazz) {\n-        Identifiable obj = get(id);\n+        Identifiable<?> obj = get(id);\n         if (obj != null && clazz.isAssignableFrom(obj.getClass())) {\n             return (T) obj;\n         } else {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\nindex dd1a447e8..ea2e62748 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkIndex.java\n", "chunk": "@@ -84,9 +86,10 @@ class NetworkIndex {\n     }\n \n     public <I extends Identifiable<I>> void removeAlias(Identifiable<?> obj, String alias) {\n-        if (!idByAlias.containsKey(alias)) {\n+        String idForAlias = idByAlias.get(alias);\n+        if (idForAlias == null) {\n             throw new PowsyblException(String.format(\"No alias '%s' found in the network\", alias));\n-        } else if (!idByAlias.get(alias).equals(obj.getId())) {\n+        } else if (!idForAlias.equals(obj.getId())) {\n             throw new PowsyblException(String.format(\"Alias '%s' do not correspond to object '%s'\", alias, obj.getId()));\n         } else {\n             idByAlias.remove(alias);\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NzI2Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450197262", "body": "Could you please add a test where you try to add as an alias the ID of an identifiable, and ensure you can get the object.", "bodyText": "Could you please add a test where you try to add as an alias the ID of an identifiable, and ensure you can get the object.", "bodyHTML": "<p dir=\"auto\">Could you please add a test where you try to add as an alias the ID of an identifiable, and ensure you can get the object.</p>", "author": "mathbagu", "createdAt": "2020-07-06T12:49:34Z", "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.Generator;\n+import com.powsybl.iidm.network.Load;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.test.NetworkTest1Factory;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author Sebastien Murgey <sebastien.murgey at rte-france.com>\n+ */\n+public class AliasesTest {\n+    @Test\n+    public void canAddAliases() {\n+        Network network = NetworkTest1Factory.create();\n+        Load load = network.getLoad(\"load1\");\n+        assertTrue(load.getAliases().isEmpty());\n+        load.addAlias(\"Load alias\");\n+\n+        assertEquals(1, load.getAliases().size());\n+        assertTrue(load.getAliases().contains(\"Load alias\"));\n+        assertNotNull(network.getLoad(\"Load alias\"));\n+        assertEquals(network.getLoad(\"Load alias\"), load);\n+    }\n+\n+    @Test\n+    public void canRemoveAliases() {\n+        Network network = NetworkTest1Factory.create();\n+        Load load = network.getLoad(\"load1\");\n+        assertTrue(load.getAliases().isEmpty());\n+        load.addAlias(\"Load alias\");\n+\n+        assertEquals(1, load.getAliases().size());\n+        assertTrue(load.getAliases().contains(\"Load alias\"));\n+\n+        load.removeAlias(\"Load alias\");\n+        assertTrue(load.getAliases().isEmpty());\n+    }\n+\n+    @Test\n+    public void silentlyIgnoreAffectingObjectsIdAsAlias() {\n+        Network network = NetworkTest1Factory.create();\n+        Load load = network.getLoad(\"load1\");\n+        assertTrue(load.getAliases().isEmpty());\n+        load.addAlias(\"load1\");\n+        assertTrue(load.getAliases().isEmpty());\n+    }\n+\n+    @Test\n+    public void silentlyIgnoreAffectingTwiceSameIdToAnObject() {\n+        Network network = NetworkTest1Factory.create();\n+        Load load = network.getLoad(\"load1\");\n+        assertTrue(load.getAliases().isEmpty());\n+        load.addAlias(\"Load alias\");\n+        load.addAlias(\"Load alias\");\n+\n+        assertEquals(1, load.getAliases().size());\n+        assertTrue(load.getAliases().contains(\"Load alias\"));\n+    }\n+\n+    @Test(expected = PowsyblException.class)\n+    public void failWhenDuplicatedAlias() {\n+        Network network = NetworkTest1Factory.create();\n+        Load load = network.getLoad(\"load1\");\n+        Generator generator = network.getGenerator(\"generator1\");\n+        load.addAlias(\"Alias\");\n+        generator.addAlias(\"Alias\");\n+    }\n+\n+    @Test(expected = PowsyblException.class)\n+    public void failWhenAliasEqualToAnId() {\n+        Network network = NetworkTest1Factory.create();\n+        Generator generator = network.getGenerator(\"generator1\");\n+        generator.addAlias(\"load1\");\n+    }\n+\n+    @Test(expected = PowsyblException.class)\n+    public void failWhenRemovingNonExistingAlias() {\n+        Network network = NetworkTest1Factory.create();\n+        Load load = network.getLoad(\"load1\");\n+        load.removeAlias(\"Load alias\");\n+    }\n+}", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDM2NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450670365", "bodyText": "The ID of the identifiable you are adding an alias to, or of another identifiable ?", "author": "murgeyseb", "createdAt": "2020-07-07T07:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NzI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c8f7711aa38d718072bc178efc7492b628ca97b5", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java b/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java\nindex 38e1e9347..4a06f83ff 100644\n--- a/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java\n+++ b/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java\n", "chunk": "@@ -89,4 +92,21 @@ public class AliasesTest {\n         Load load = network.getLoad(\"load1\");\n         load.removeAlias(\"Load alias\");\n     }\n+\n+    @Test(expected = PowsyblException.class)\n+    public void mergeFailWhenAliasEqualsToAnIdOfOtherNetwork() {\n+        Network network = EurostagTutorialExample1Factory.create();\n+        Network otherNetwork = FourSubstationsNodeBreakerFactory.create();\n+        otherNetwork.getGenerator(\"GH1\").addAlias(\"NHV2_NLOAD\");\n+        network.merge(otherNetwork);\n+    }\n+\n+    @Test(expected = PowsyblException.class)\n+    public void mergeFailWhenAliasEqualsToAnAliasOfOtherNetwork() {\n+        Network network = EurostagTutorialExample1Factory.create();\n+        Network otherNetwork = FourSubstationsNodeBreakerFactory.create();\n+        network.getTwoWindingsTransformer(\"NHV2_NLOAD\").addAlias(\"Alias\");\n+        otherNetwork.getGenerator(\"GH1\").addAlias(\"Alias\");\n+        network.merge(otherNetwork);\n+    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java b/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java\nindex 38e1e9347..4a06f83ff 100644\n--- a/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java\n+++ b/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/AliasesTest.java\n", "chunk": "@@ -89,4 +92,21 @@ public class AliasesTest {\n         Load load = network.getLoad(\"load1\");\n         load.removeAlias(\"Load alias\");\n     }\n+\n+    @Test(expected = PowsyblException.class)\n+    public void mergeFailWhenAliasEqualsToAnIdOfOtherNetwork() {\n+        Network network = EurostagTutorialExample1Factory.create();\n+        Network otherNetwork = FourSubstationsNodeBreakerFactory.create();\n+        otherNetwork.getGenerator(\"GH1\").addAlias(\"NHV2_NLOAD\");\n+        network.merge(otherNetwork);\n+    }\n+\n+    @Test(expected = PowsyblException.class)\n+    public void mergeFailWhenAliasEqualsToAnAliasOfOtherNetwork() {\n+        Network network = EurostagTutorialExample1Factory.create();\n+        Network otherNetwork = FourSubstationsNodeBreakerFactory.create();\n+        network.getTwoWindingsTransformer(\"NHV2_NLOAD\").addAlias(\"Alias\");\n+        otherNetwork.getGenerator(\"GH1\").addAlias(\"Alias\");\n+        network.merge(otherNetwork);\n+    }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "5fedcc0e86fa8575824757cd6eb2785c74830fae", "committedDate": "2020-09-08 13:34:49 +0200", "message": "Add the possibility to associate a type to an alias (indicating what it corresponds to) (#1402)"}, {"oid": "8c0bd0517204c0efd43b936a80d1a5abd2df8c5e", "committedDate": "2020-11-27 09:53:12 +0100", "message": "Add possibility to ensure alias unicity (#1508)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5ODA0NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450198044", "body": "Both are redundant?", "bodyText": "Both are redundant?", "bodyHTML": "<p dir=\"auto\">Both are redundant?</p>", "author": "mathbagu", "createdAt": "2020-07-06T12:50:55Z", "path": "iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.xml;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * @author Sebastien Murgey <sebastien.murgey@rte-france.com>\n+ */\n+public class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n+\n+    @Test\n+    public void test() throws IOException {\n+        roundTripVersionedXmlTest(\"tielineWithAliases.xml\", IidmXmlConstants.CURRENT_IIDM_XML_VERSION);\n+\n+        // Tests for backward compatibility\n+        roundTripVersionedXmlFromMinToCurrentVersionTest(\"tielineWithAliases.xml\", IidmXmlVersion.V_1_3);", "originalCommit": "1ac04dd93098c9b97fcfbc0c9bd2f1f20d62433a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDk4Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r450670987", "bodyText": "Not in next version of IIDM. If I understand well, second call does not run CURRENT_IIDM_XML_VERSION", "author": "murgeyseb", "createdAt": "2020-07-07T07:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5ODA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5NTc2NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r452695765", "bodyText": "You right, the current_version is ignored. I ask to @MioRtia if the expected behavior", "author": "mathbagu", "createdAt": "2020-07-10T08:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5ODA0NA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "45ceb082286aa64e184d7853a528ed13f1e48f04", "changed_code": [{"header": "diff --git a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\nindex 62bae3e49..44978e315 100644\n--- a/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n+++ b/iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/TieLineWithAliasesXmlTest.java\n", "chunk": "@@ -7,17 +7,17 @@\n \n package com.powsybl.iidm.xml;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n \n /**\n  * @author Sebastien Murgey <sebastien.murgey@rte-france.com>\n  */\n-public class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n+class TieLineWithAliasesXmlTest extends AbstractXmlConverterTest {\n \n     @Test\n-    public void test() throws IOException {\n+    void test() throws IOException {\n         roundTripVersionedXmlTest(\"tielineWithAliases.xml\", IidmXmlConstants.CURRENT_IIDM_XML_VERSION);\n \n         // Tests for backward compatibility\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "45ceb082286aa64e184d7853a528ed13f1e48f04", "committedDate": "2023-02-15 15:40:08 +0100", "message": "Bump to JUnit 5 (#2467)"}]}, {"oid": "295260068fdbabdab5d9339954860f1ad51067b0", "url": "https://github.com/powsybl/powsybl-core/commit/295260068fdbabdab5d9339954860f1ad51067b0", "message": "Take into account remarks from review\n\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-07-07T08:00:53Z", "type": "commit"}, {"oid": "e321e298553b5bf17e790aa9187844a25b6a166f", "url": "https://github.com/powsybl/powsybl-core/commit/e321e298553b5bf17e790aa9187844a25b6a166f", "message": "Merge branch 'master' into aliasesAddition", "committedDate": "2020-07-10T06:49:22Z", "type": "commit"}, {"oid": "8ed7eb525819fd7e22ea60ab93135e0c250c4126", "url": "https://github.com/powsybl/powsybl-core/commit/8ed7eb525819fd7e22ea60ab93135e0c250c4126", "message": "Merge branch 'master' into aliasesAddition", "committedDate": "2020-07-10T08:03:40Z", "type": "commit"}, {"oid": "c8f7711aa38d718072bc178efc7492b628ca97b5", "url": "https://github.com/powsybl/powsybl-core/commit/c8f7711aa38d718072bc178efc7492b628ca97b5", "message": "Add aliases in check mergeability check\n\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-07-10T08:59:16Z", "type": "commit"}, {"oid": "83c1f2d58e407b30b4ff9aeed152179bcc4570cf", "url": "https://github.com/powsybl/powsybl-core/commit/83c1f2d58e407b30b4ff9aeed152179bcc4570cf", "message": "Merge branch 'master' into aliasesAddition", "committedDate": "2020-07-16T07:50:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MDgwNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r455880807", "body": "I think you should return an unmodifable copy", "bodyText": "I think you should return an unmodifable copy", "bodyHTML": "<p dir=\"auto\">I think you should return an unmodifable copy</p>", "author": "miovd", "createdAt": "2020-07-16T15:37:12Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java", "diffHunk": "@@ -51,6 +53,29 @@ public String getNameOrId() {\n         return name != null ? name : id;\n     }\n \n+    @Override\n+    public Set<String> getAliases() {\n+        return aliases;", "originalCommit": "83c1f2d58e407b30b4ff9aeed152179bcc4570cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a8e478d79c1ce3449e0e1763ec552fdc6b3c4a", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\nindex 45ab4ceca..3259e9161 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\n", "chunk": "@@ -55,7 +55,7 @@ abstract class AbstractIdentifiable<I extends Identifiable<I>> extends AbstractE\n \n     @Override\n     public Set<String> getAliases() {\n-        return aliases;\n+        return Collections.unmodifiableSet(aliases);\n     }\n \n     @Override\n", "next_change": null}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\nindex 45ab4ceca..3259e9161 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\n", "chunk": "@@ -55,7 +55,7 @@ abstract class AbstractIdentifiable<I extends Identifiable<I>> extends AbstractE\n \n     @Override\n     public Set<String> getAliases() {\n-        return aliases;\n+        return Collections.unmodifiableSet(aliases);\n     }\n \n     @Override\n", "next_change": {"commit": "5fedcc0e86fa8575824757cd6eb2785c74830fae", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\nindex 3259e9161..c64e32ba7 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractIdentifiable.java\n", "chunk": "@@ -55,25 +57,62 @@ abstract class AbstractIdentifiable<I extends Identifiable<I>> extends AbstractE\n \n     @Override\n     public Set<String> getAliases() {\n+        Set<String> aliases = new HashSet<>();\n+        aliases.addAll(aliasesWithoutType);\n+        aliases.addAll(aliasesByType.values());\n         return Collections.unmodifiableSet(aliases);\n     }\n \n+    @Override\n+    public Optional<String> getAliasType(String alias) {\n+        Objects.requireNonNull(alias);\n+        if (aliasesWithoutType.contains(alias)) {\n+            return Optional.empty();\n+        }\n+        return aliasesByType.entrySet().stream().filter(entry -> entry.getValue().equals(alias)).map(Map.Entry::getKey).findFirst();\n+    }\n+\n+    @Override\n+    public Optional<String> getAliasFromType(String aliasType) {\n+        Objects.requireNonNull(aliasType);\n+        return Optional.ofNullable(aliasesByType.get(aliasType));\n+    }\n+\n     @Override\n     public void addAlias(String alias) {\n+        addAlias(alias, null);\n+    }\n+\n+    @Override\n+    public void addAlias(String alias, String aliasType) {\n+        Objects.requireNonNull(alias);\n+        if (aliasType != null && aliasesByType.containsKey(aliasType)) {\n+            throw new PowsyblException(id + \" already has an alias of type \" + aliasType);\n+        }\n         if (getNetwork().getIndex().addAlias(this, alias)) {\n-            aliases.add(alias);\n+            if (aliasType != null) {\n+                aliasesByType.put(aliasType, alias);\n+            } else {\n+                aliasesWithoutType.add(alias);\n+            }\n         }\n     }\n \n     @Override\n     public void removeAlias(String alias) {\n+        Objects.requireNonNull(alias);\n         getNetwork().getIndex().removeAlias(this, alias);\n-        aliases.remove(alias);\n+        String type = aliasesByType.entrySet().stream().filter(entry -> entry.getValue().contains(alias)).map(Map.Entry::getKey).filter(Objects::nonNull).findFirst().orElse(null);\n+        if (type != null) {\n+            aliasesByType.remove(type);\n+        } else {\n+            aliasesWithoutType.remove(alias);\n+        }\n     }\n \n     @Override\n     public boolean hasAliases() {\n-        return !aliases.isEmpty();\n+        return !aliasesWithoutType.isEmpty() || !aliasesByType.isEmpty();\n     }\n \n     @Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "5fedcc0e86fa8575824757cd6eb2785c74830fae", "committedDate": "2020-09-08 13:34:49 +0200", "message": "Add the possibility to associate a type to an alias (indicating what it corresponds to) (#1402)"}, {"oid": "8c0bd0517204c0efd43b936a80d1a5abd2df8c5e", "committedDate": "2020-11-27 09:53:12 +0100", "message": "Add possibility to ensure alias unicity (#1508)"}, {"oid": "4174a71debb06042aed28e8cdc146182f0e2cac3", "committedDate": "2021-02-03 11:42:52 +0100", "message": "Fix empty alias type management (#1611)"}, {"oid": "1825804083a6cff7ba5a22e33681dc713c82b6df", "committedDate": "2021-11-29 12:40:24 +0100", "message": "Remove identifiable property (#1876)"}, {"oid": "86097970b7086042d5173a2100069b3c2187dcfb", "committedDate": "2022-04-13 11:57:37 +0200", "message": "Set Identifiable name (#2078)"}, {"oid": "488bb2d67c34d3c2789d9cb060b96927aed993e3", "committedDate": "2023-05-12 17:26:38 +0200", "message": "Replace HalfLine by DanglingLine (#2437)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NjMzMg==", "url": "https://github.com/powsybl/powsybl-core/pull/1319#discussion_r455896332", "body": "Same remark", "bodyText": "Same remark", "bodyHTML": "<p dir=\"auto\">Same remark</p>", "author": "miovd", "createdAt": "2020-07-16T15:59:21Z", "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java", "diffHunk": "@@ -58,6 +60,11 @@ public String getNameOrId() {\n             return id;\n         }\n \n+        @Override\n+        public Set<String> getAliases() {\n+            return aliases;", "originalCommit": "83c1f2d58e407b30b4ff9aeed152179bcc4570cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a8e478d79c1ce3449e0e1763ec552fdc6b3c4a", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java b/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java\nindex 9ddec6fde..bae021b4c 100644\n--- a/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java\n+++ b/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java\n", "chunk": "@@ -62,7 +62,7 @@ public class VariantManagerImplTest {\n \n         @Override\n         public Set<String> getAliases() {\n-            return aliases;\n+            return Collections.unmodifiableSet(aliases);\n         }\n \n         @Override\n", "next_change": null}]}, "revised_code_in_main": {"commit": "909f66271f0f4c87b6b1644c0c53c15c23343919", "changed_code": [{"header": "diff --git a/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java b/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java\nindex 9ddec6fde..3b1b1fd15 100644\n--- a/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java\n+++ b/iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java\n", "chunk": "@@ -62,7 +62,7 @@ public class VariantManagerImplTest {\n \n         @Override\n         public Set<String> getAliases() {\n-            return aliases;\n+            return Collections.unmodifiableSet(aliases);\n         }\n \n         @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "909f66271f0f4c87b6b1644c0c53c15c23343919", "message": "Merge commit", "committedDate": null}, {"oid": "c96036d943ef0bb1669e29c045e4d1aef4eb85eb", "committedDate": "2021-11-02 13:19:33 +0100", "message": "Add Identifiable enum type (#1859)"}, {"oid": "1825804083a6cff7ba5a22e33681dc713c82b6df", "committedDate": "2021-11-29 12:40:24 +0100", "message": "Remove identifiable property (#1876)"}, {"oid": "688de514609c047a4cad98e1465b4c83c59c418c", "committedDate": "2022-09-30 09:29:53 +0200", "message": "Use PowSyBl Parent 9 (#2304)"}, {"oid": "45ceb082286aa64e184d7853a528ed13f1e48f04", "committedDate": "2023-02-15 15:40:08 +0100", "message": "Bump to JUnit 5 (#2467)"}, {"oid": "ffeeb1b9ab0f18996f99550ad255e1b16a512a66", "committedDate": "2023-03-08 11:30:35 +0100", "message": "Replace AssertionError by IllegalStateException. (#2465)"}]}, {"oid": "a7a8e478d79c1ce3449e0e1763ec552fdc6b3c4a", "url": "https://github.com/powsybl/powsybl-core/commit/a7a8e478d79c1ce3449e0e1763ec552fdc6b3c4a", "message": "Fix Shunt aliases handling\n\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-07-17T07:53:31Z", "type": "commit"}, {"oid": "91a5682b2e597bb6fa6f50e431c250f21e4c569a", "url": "https://github.com/powsybl/powsybl-core/commit/91a5682b2e597bb6fa6f50e431c250f21e4c569a", "message": "Merge remote-tracking branch 'origin/aliasesAddition' into aliasesAddition", "committedDate": "2020-07-17T07:53:50Z", "type": "commit"}, {"oid": "e8b1f4658615db03be66b9cd34d6a955511da9d7", "url": "https://github.com/powsybl/powsybl-core/commit/e8b1f4658615db03be66b9cd34d6a955511da9d7", "message": "Merge branch 'master' into aliasesAddition", "committedDate": "2020-07-17T07:54:58Z", "type": "commit"}, {"oid": "8a287a2e073ad173354a1d0a163371b275bdf1ef", "url": "https://github.com/powsybl/powsybl-core/commit/8a287a2e073ad173354a1d0a163371b275bdf1ef", "message": "Merge branch 'master' into aliasesAddition", "committedDate": "2020-07-17T07:58:47Z", "type": "commit"}, {"oid": "58300149f6565566ccd50ec55d339171b823fd67", "url": "https://github.com/powsybl/powsybl-core/commit/58300149f6565566ccd50ec55d339171b823fd67", "message": "Fixes some code smells\n\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-07-17T08:10:54Z", "type": "commit"}, {"oid": "1e4c179d46158408e0eeaee677619df8983f674e", "url": "https://github.com/powsybl/powsybl-core/commit/1e4c179d46158408e0eeaee677619df8983f674e", "message": "Merge remote-tracking branch 'origin/aliasesAddition' into aliasesAddition", "committedDate": "2020-07-17T08:11:03Z", "type": "commit"}, {"oid": "0d731048f19ff0a71a15aa0b06f81484492c21a8", "url": "https://github.com/powsybl/powsybl-core/commit/0d731048f19ff0a71a15aa0b06f81484492c21a8", "message": "Partial revert of code smell fixes\n\nSigned-off-by: Sebastien Murgey <sebastien.murgey@rte-france.com>", "committedDate": "2020-07-17T09:07:48Z", "type": "commit"}, {"oid": "2c13c63514d804f63afa5514a059a3359ab35e68", "url": "https://github.com/powsybl/powsybl-core/commit/2c13c63514d804f63afa5514a059a3359ab35e68", "message": "Merge branch 'master' into aliasesAddition", "committedDate": "2020-07-17T09:11:24Z", "type": "commit"}]}