{"pr_number": 1798, "pr_title": "Task/generic sql aggregator", "pr_author": "IvanHdzC", "pr_createdAt": "2020-01-22T12:28:29Z", "pr_url": "https://github.com/telefonicaid/fiware-cygnus/pull/1798", "timeline": [{"oid": "912f6eec957d03dd10609e492554c53d7ed1c6fb", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/912f6eec957d03dd10609e492554c53d7ed1c6fb", "message": "add generic classes", "committedDate": "2020-01-16T14:52:31Z", "type": "commit"}, {"oid": "6617a0e767e2ef53062a5828a08db363cce32da6", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/6617a0e767e2ef53062a5828a08db363cce32da6", "message": "Merge branch 'master' into task/generic_aggregator", "committedDate": "2020-01-16T15:17:05Z", "type": "commit"}, {"oid": "3bb42b44ab98662c6b3684b86d4c5bae463835db", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/3bb42b44ab98662c6b3684b86d4c5bae463835db", "message": "add generic aggregator to mysql sink", "committedDate": "2020-01-16T17:40:46Z", "type": "commit"}, {"oid": "0bbdad4a01fc63e5e292962c1d264bcf976dbbe4", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/0bbdad4a01fc63e5e292962c1d264bcf976dbbe4", "message": "refactor for aggregation clases and mysql sink fixes", "committedDate": "2020-01-17T11:35:29Z", "type": "commit"}, {"oid": "2e396e779e4f2debc6a7613c0e59c47ad4033c49", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/2e396e779e4f2debc6a7613c0e59c47ad4033c49", "message": "add generic aggregator to postgis", "committedDate": "2020-01-17T11:36:11Z", "type": "commit"}, {"oid": "5ea5c55619eebedd505d0e6bb5fe15ce4f16a059", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/5ea5c55619eebedd505d0e6bb5fe15ce4f16a059", "message": "add generic aggregator to postgresql", "committedDate": "2020-01-17T11:45:52Z", "type": "commit"}, {"oid": "f1eca62b3fd9be8519a3c00731fdc510a0d66066", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/f1eca62b3fd9be8519a3c00731fdc510a0d66066", "message": "Merge branch 'master' into task/generic_sql_aggregator", "committedDate": "2020-01-22T11:33:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MzI3Nw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1798#discussion_r369543277", "body": "Licence header in every new file, pls.\r\n\r\nIn addition, a proper line to CHANGES_NEXT_RELEASE regarding the changes in this PR should be added.", "bodyText": "Licence header in every new file, pls.\nIn addition, a proper line to CHANGES_NEXT_RELEASE regarding the changes in this PR should be added.", "bodyHTML": "<p dir=\"auto\">Licence header in every new file, pls.</p>\n<p dir=\"auto\">In addition, a proper line to CHANGES_NEXT_RELEASE regarding the changes in this PR should be added.</p>", "author": "fgalan", "createdAt": "2020-01-22T12:57:00Z", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java", "diffHunk": "@@ -0,0 +1,278 @@\n+package com.telefonica.iot.cygnus.aggregation;", "originalCommit": "f1eca62b3fd9be8519a3c00731fdc510a0d66066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3OTg4MA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1798#discussion_r369579880", "bodyText": "Fixed in e26b297", "author": "IvanHdzC", "createdAt": "2020-01-22T14:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MzI3Nw=="}], "type": "inlineReview"}, {"oid": "e26b29747c86742e4397bc57a6ad05d1cfe39ee8", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/e26b29747c86742e4397bc57a6ad05d1cfe39ee8", "message": "add license to new files and CNR entry", "committedDate": "2020-01-22T14:09:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5MTcxNQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1798#discussion_r369591715", "body": "```suggestion\r\n * Copyright 2014-2020 Telefonica Investigaci\u00f3n y Desarrollo, S.A.U\r\n```\r\n\r\n:D", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2014-2017 Telefonica Investigaci\u00f3n y Desarrollo, S.A.U\n          \n          \n            \n             * Copyright 2014-2020 Telefonica Investigaci\u00f3n y Desarrollo, S.A.U\n          \n      \n    \n    \n  \n\n:D", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> <span class=\"pl-c1\">2014</span><span class=\"pl-k\">-</span><span class=\"pl-c1 x x-first x-last\">2017</span> <span class=\"pl-smi\">Telefonica</span> <span class=\"pl-smi\">Investigaci</span>\u00f3n y <span class=\"pl-smi\">Desarrollo</span>, <span class=\"pl-smi\">S</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">A</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">U</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> <span class=\"pl-c1\">2014</span><span class=\"pl-k\">-</span><span class=\"pl-c1 x x-first x-last\">2020</span> <span class=\"pl-smi\">Telefonica</span> <span class=\"pl-smi\">Investigaci</span>\u00f3n y <span class=\"pl-smi\">Desarrollo</span>, <span class=\"pl-smi\">S</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">A</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">U</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">:D</p>", "author": "fgalan", "createdAt": "2020-01-22T14:29:38Z", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * Copyright 2014-2017 Telefonica Investigaci\u00f3n y Desarrollo, S.A.U", "originalCommit": "e26b29747c86742e4397bc57a6ad05d1cfe39ee8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMjM4Nw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1798#discussion_r369632387", "bodyText": "Fixed in 0d50fd2", "author": "IvanHdzC", "createdAt": "2020-01-22T15:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5MTcxNQ=="}], "type": "inlineReview"}, {"oid": "0d50fd2a1dd53ec6084568e6e2ce90bb3f64daba", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/0d50fd2a1dd53ec6084568e6e2ce90bb3f64daba", "message": "edited comments", "committedDate": "2020-01-22T15:34:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NzE3MA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1798#discussion_r370557170", "body": "I'm a bit confused regarding getServiceForNaming() and getServicePathForNaming(). Should they have the same arguments? Any reason for omitting the serviceForNaming var?", "bodyText": "I'm a bit confused regarding getServiceForNaming() and getServicePathForNaming(). Should they have the same arguments? Any reason for omitting the serviceForNaming var?", "bodyHTML": "<p dir=\"auto\">I'm a bit confused regarding getServiceForNaming() and getServicePathForNaming(). Should they have the same arguments? Any reason for omitting the serviceForNaming var?</p>", "author": "manucarrace", "createdAt": "2020-01-24T10:09:19Z", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIMySQLSink.java", "diffHunk": "@@ -301,371 +292,85 @@ public void expirateRecords(long expirationTime) throws CygnusExpiratingError {\n     } // expirateRecords\n     \n     /**\n-     * Class for aggregating.\n+     * Class for aggregating batches in row mode.\n      */\n-    protected abstract class MySQLAggregator {\n-        \n-        // object containing the aggregated data\n-        protected LinkedHashMap<String, ArrayList<JsonElement>> aggregation;\n+    private class RowAggregator extends NGSIGenericRowAggregator {\n \n-        private String service;\n-        private String servicePathForData;\n         private String servicePathForNaming;\n         private String entityForNaming;\n         private String entityType;\n         private String attribute;\n-        private String dbName;\n-        private String tableName;\n-        \n-        MySQLAggregator() {\n-            aggregation = new LinkedHashMap<>();\n-        } // MySQLAggregator\n-        \n-        protected LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n-            return aggregation;\n-        } //getAggregation\n-\n-        @SuppressWarnings(\"unused\")\n-        protected void setAggregation(LinkedHashMap<String, ArrayList<JsonElement>> aggregation) {\n-            this.aggregation = aggregation;\n-        } //setAggregation\n-\n-\n-        @SuppressWarnings(\"unused\")\n-        protected String getService() {\n-            return service;\n-        } //getService\n-\n-\n-        @SuppressWarnings(\"unused\")\n-        protected void setService(String service) {\n-            this.service = service;\n-        } //setService\n-\n-        protected String getServicePathForData() {\n-            return servicePathForData;\n-        } //getServicePathForData\n-\n-\n-        @SuppressWarnings(\"unused\")\n-        protected void setServicePathForData(String servicePathForData) {\n-            this.servicePathForData = servicePathForData;\n-        } //setServicePathForData\n-\n-\n-        @SuppressWarnings(\"unused\")\n-        protected String getServicePathForNaming() {\n-            return servicePathForNaming;\n-        } //getServicePathForNaming\n-\n-\n-        @SuppressWarnings(\"unused\")\n-        protected void setServicePathForNaming(String servicePathForNaming) {\n-            this.servicePathForNaming = servicePathForNaming;\n-        } //setServicePathForNaming\n-\n-\n-        @SuppressWarnings(\"unused\")\n-        protected String getTableName() {\n-            return tableName;\n-        } //getTableName\n-\n-        @SuppressWarnings(\"unused\")\n-        protected void setTableName(String tableName) {\n-            this.tableName = tableName;\n-        } //setTableName\n-\n \n+        /**\n+         * Instantiates a new Ngsi generic row aggregator.\n+         *\n+         * @param enableGrouping     the enable grouping flag for initialization\n+         * @param enableNameMappings the enable name mappings flag for initialization\n+         * @param enableEncoding     the enable encoding flag for initialization\n+         * @param enableGeoParse     the enable geo parse flag for initialization\n+         */\n+        protected RowAggregator(boolean enableGrouping, boolean enableNameMappings, boolean enableEncoding, boolean enableGeoParse) {\n+            super(enableGrouping, enableNameMappings, enableEncoding, enableGeoParse, false);\n+        }\n \n-        public String getDbName(boolean enableLowercase) {\n-            if (enableLowercase) {\n-                return dbName.toLowerCase();\n-            } else {\n-                return dbName;\n-            } // if else\n-        } // getDbName\n-        \n-        public String getTableName(boolean enableLowercase) {\n-            if (enableLowercase) {\n-                return tableName.toLowerCase();\n-            } else {\n-                return tableName;\n-            } // if else\n-        } // getTableName\n-        \n-        public String getValuesForInsert() {\n-            String valuesForInsert = \"\";\n-            int numEvents = aggregation.get(NGSIConstants.FIWARE_SERVICE_PATH).size();\n-            \n-            for (int i = 0; i < numEvents; i++) {\n-                if (i == 0) {\n-                    valuesForInsert += \"(\";\n-                } else {\n-                    valuesForInsert += \",(\";\n-                } // if else\n-                \n-                boolean first = true;\n-                Iterator<String> it = aggregation.keySet().iterator();\n-            \n-                while (it.hasNext()) {\n-                    String entry = (String) it.next();\n-                    ArrayList<JsonElement> values = (ArrayList<JsonElement>) aggregation.get(entry);\n-                    JsonElement value = values.get(i);\n-                    String stringValue = null;\n-                    if (attrNativeTypes && this instanceof ColumnAggregator) {\n-                        LOGGER.debug(\"[\" + getName() + \"] aggregation entry = \"  + entry );\n-                        if (value == null || value.isJsonNull()) {\n-                            stringValue = \"NULL\";\n-                        } else if (value.isJsonPrimitive()) {\n-                            if (value.getAsJsonPrimitive().isBoolean()) {\n-                                stringValue = value.getAsString().toUpperCase();\n-                            } else if (value.getAsJsonPrimitive().isNumber()) {\n-                                stringValue = value.getAsString();\n-                            }else {\n-                                stringValue = \"'\" + value.getAsString() + \"'\";\n-                            }\n-                        } else {\n-                            stringValue = \"'\" + value.toString() + \"'\";\n-                        }\n-                    } else {\n-                        if (value.isJsonPrimitive()) {\n-                            stringValue = \"'\" + value.getAsString() + \"'\";\n-                        } else {\n-                            stringValue = \"'\" + value.toString() + \"'\";\n-                        }\n-                    }\n-                    if (first) {\n-                        valuesForInsert += stringValue;\n-                        first = false;\n-                    } else {\n-                        valuesForInsert += \",\" + stringValue;\n-                    } // if else\n-                } // while\n-\n-                valuesForInsert += \")\";\n-            } // for\n-            \n-            return valuesForInsert;\n-        } // getValuesForInsert\n-        \n-        public String getFieldsForCreate() {\n-            String fieldsForCreate = \"(\";\n-            boolean first = true;\n-            Iterator<String> it = aggregation.keySet().iterator();\n-            \n-            while (it.hasNext()) {\n-                if (first) {\n-                    fieldsForCreate += (String) it.next() + \" text\";\n-                    first = false;\n-                } else {\n-                    fieldsForCreate += \",\" + (String) it.next() + \" text\";\n-                } // if else\n-            } // while\n-            \n-            return fieldsForCreate + \")\";\n-        } // getFieldsForCreate\n-        \n-        public String getFieldsForInsert() {\n-            String fieldsForInsert = \"(\";\n-            boolean first = true;\n-            Iterator<String> it = aggregation.keySet().iterator();\n-            while (it.hasNext()) {\n-                if (first) {\n-                    fieldsForInsert += (String) it.next();\n-                    first = false;\n-                } else {\n-                    fieldsForInsert += \",\" + (String) it.next();\n-                } // if else\n-            } // while\n-            return fieldsForInsert + \")\";\n-        } // getFieldsForInsert\n-        \n+        @Override\n         public void initialize(NGSIEvent event) throws CygnusBadConfiguration {\n-            service = event.getServiceForNaming(enableNameMappings);\n-            servicePathForData = event.getServicePathForData();\n+            super.initialize(event);\n             servicePathForNaming = event.getServicePathForNaming(enableGrouping, enableNameMappings);\n             entityForNaming = event.getEntityForNaming(enableGrouping, enableNameMappings, enableEncoding);\n             entityType = event.getEntityTypeForNaming(enableGrouping, enableNameMappings);\n             attribute = event.getAttributeForNaming(enableNameMappings);\n-            dbName = buildDbName(service);\n-            tableName = buildTableName(servicePathForNaming, entityForNaming, entityType, attribute);\n+            setDbName(buildDbName(event.getServiceForNaming(enableNameMappings)));", "originalCommit": "0d50fd2a1dd53ec6084568e6e2ce90bb3f64daba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MDkwOQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1798#discussion_r371740909", "body": "A space expected", "bodyText": "A space expected", "bodyHTML": "<p dir=\"auto\">A space expected</p>", "author": "AlvaroVega", "createdAt": "2020-01-28T11:12:26Z", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * Copyright 2014-2020 Telefonica Investigaci\u00f3n y Desarrollo, S.A.U\n+ *\n+ * This file is part of fiware-cygnus (FIWARE project).\n+ *\n+ * fiware-cygnus is free software: you can redistribute it and/or modify it under the terms of the GNU Affero\n+ * General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your\n+ * option) any later version.\n+ * fiware-cygnus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the\n+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n+ * for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License along with fiware-cygnus. If not, see\n+ * http://www.gnu.org/licenses/.\n+ *\n+ * For those usages not covered by the GNU Affero General Public License please contact with iot_support at tid dot es\n+ */\n+\n+\n+package com.telefonica.iot.cygnus.aggregation;\n+\n+import com.google.gson.JsonElement;\n+import com.telefonica.iot.cygnus.errors.CygnusBadConfiguration;\n+import com.telefonica.iot.cygnus.interceptors.NGSIEvent;\n+import com.telefonica.iot.cygnus.log.CygnusLogger;\n+import com.telefonica.iot.cygnus.utils.NGSIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * The type Ngsi generic aggregator.\n+ */\n+public abstract class NGSIGenericAggregator {\n+\n+    // Logger\n+    private static final CygnusLogger LOGGER = new CygnusLogger(NGSIGenericAggregator.class);\n+\n+    // Setup for casting to native persistance types\n+    private boolean attrNativeTypes;\n+    /**\n+     * The Enable grouping.\n+     */\n+    protected boolean enableGrouping;\n+    /**\n+     * The Enable encoding.\n+     */\n+    protected boolean enableEncoding;\n+    /**\n+     * The Enable name mappings.\n+     */\n+    protected boolean enableNameMappings;\n+    /**\n+     * The Enable geo parse.\n+     */\n+    protected boolean enableGeoParse;\n+\n+    // Default value for attrNativeTypes\n+    private static final String DEFAULT_ATTR_NATIVE_TYPES = \"false\";\n+\n+    /**\n+     * The Aggregation.\n+     */\n+// object containing the aggregated data\n+    protected LinkedHashMap<String, ArrayList<JsonElement>> aggregation;\n+\n+    private String service;\n+    private String servicePathForData;\n+    private String servicePathForNaming;\n+    private String entityForNaming;\n+    private String entityType;\n+    private String attribute;\n+    private String dbName;\n+    private String tableName;\n+\n+    /**\n+     * Instantiates a new Ngsi generic aggregator.\n+     *\n+     * @param enableGrouping     the enable grouping\n+     * @param enableNameMappings the enable name mappings\n+     * @param enableEncoding     the enable encoding\n+     * @param enableGeoParse     the enable geo parse\n+     * @param attrNativeTypes    the attr native types\n+     */\n+    NGSIGenericAggregator(boolean enableGrouping, boolean enableNameMappings, boolean enableEncoding, boolean enableGeoParse, boolean attrNativeTypes) {\n+        this.enableEncoding = enableEncoding;\n+        this.enableNameMappings = enableNameMappings;\n+        this.enableEncoding = enableEncoding;\n+        this.enableGeoParse = enableGeoParse;\n+        this.attrNativeTypes = attrNativeTypes;\n+        aggregation = new LinkedHashMap<>();\n+    } // MySQLAggregator\n+\n+    /**\n+     * Gets aggregation.\n+     *\n+     * @return the aggregation\n+     */\n+    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n+        return aggregation;\n+    } //getAggregation\n+\n+    /**\n+     * Gets service path for data.\n+     *\n+     * @return the service path for data\n+     */\n+    protected String getServicePathForData() {\n+        return servicePathForData;\n+    } //getServicePathForData\n+\n+    /**\n+     * Gets db name.\n+     *\n+     * @param enableLowercase the enable lowercase\n+     * @return the db name\n+     */\n+    public String getDbName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return dbName.toLowerCase();\n+        } else {\n+            return dbName;\n+        } // if else\n+    } // getDbName\n+\n+    /**\n+     * Gets table name.\n+     *\n+     * @param enableLowercase the enable lowercase\n+     * @return the table name\n+     */\n+    public String getTableName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return tableName.toLowerCase();\n+        } else {\n+            return tableName;\n+        } // if else\n+    } // getTableName\n+\n+\n+    /**\n+     * Sets db name.\n+     *\n+     * @param dbName the db name\n+     */\n+    public void setDbName(String dbName) {\n+        this.dbName = dbName;\n+    }\n+\n+    /**\n+     * Sets table name.\n+     *\n+     * @param tableName the table name\n+     */\n+    public void setTableName(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * Gets string value for json element.\n+     *\n+     * @param value the value\n+     * @return the string value for json element\n+     */\n+    public String getStringValueForJsonElement(JsonElement value) {\n+        String stringValue;\n+        if (attrNativeTypes) {\n+            if (value == null || value.isJsonNull()) {\n+                stringValue = \"NULL\";\n+            } else if (value.isJsonPrimitive()) {\n+                if (value.getAsJsonPrimitive().isBoolean()) {\n+                    stringValue = value.getAsString().toUpperCase();\n+                } else if (value.getAsJsonPrimitive().isNumber()) {\n+                    stringValue = value.getAsString();\n+                }else {", "originalCommit": "0d50fd2a1dd53ec6084568e6e2ce90bb3f64daba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf3b590347dd913dbba3ef0004c3573c0a01a383", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/cf3b590347dd913dbba3ef0004c3573c0a01a383", "message": "Merge branch 'master' into task/generic_sql_aggregator", "committedDate": "2020-01-28T11:15:59Z", "type": "commit"}, {"oid": "cbbbc68072719836aa277dcb004b3d5323933238", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/cbbbc68072719836aa277dcb004b3d5323933238", "message": "Merge branch 'master' into task/generic_sql_aggregator", "committedDate": "2020-01-28T11:34:06Z", "type": "commit"}]}