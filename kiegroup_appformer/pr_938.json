{"pr_number": 938, "pr_title": "RHPAM-2721 :Clone project via http can not be re-enabled", "pr_author": "RishiRajAnand", "pr_createdAt": "2020-04-07T07:04:48Z", "pr_url": "https://github.com/kiegroup/appformer/pull/938", "timeline": [{"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a", "url": "https://github.com/kiegroup/appformer/commit/72cdfa5173299a95c22821715bf0d6d079dc277a", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-07T07:10:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTUxMQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404639511", "body": "We could simplify as:\r\n```java\r\n    @Override\r\n    public void setPublicURI(Map<String, String> fullHostNames) {\r\n        if (fullHostNames != null && !fullHostNames.isEmpty()) {\r\n            toStringContent = fullHostNames.entrySet()\r\n                    .stream()\r\n                    .map(e -> e.getKey() + \"://\" + e.getValue() + \"/\" + name)\r\n                    .collect(Collectors.joining(\"\\n\"));\r\n        } else {\r\n            toStringContent = \"git://\" + name;\r\n        }\r\n    }\r\n```", "bodyText": "We could simplify as:\n    @Override\n    public void setPublicURI(Map<String, String> fullHostNames) {\n        if (fullHostNames != null && !fullHostNames.isEmpty()) {\n            toStringContent = fullHostNames.entrySet()\n                    .stream()\n                    .map(e -> e.getKey() + \"://\" + e.getValue() + \"/\" + name)\n                    .collect(Collectors.joining(\"\\n\"));\n        } else {\n            toStringContent = \"git://\" + name;\n        }\n    }", "bodyHTML": "<p dir=\"auto\">We could simplify as:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Override\n    public void setPublicURI(Map&lt;String, String&gt; fullHostNames) {\n        if (fullHostNames != null &amp;&amp; !fullHostNames.isEmpty()) {\n            toStringContent = fullHostNames.entrySet()\n                    .stream()\n                    .map(e -&gt; e.getKey() + &quot;://&quot; + e.getValue() + &quot;/&quot; + name)\n                    .collect(Collectors.joining(&quot;\\n&quot;));\n        } else {\n            toStringContent = &quot;git://&quot; + name;\n        }\n    }\"><pre>    <span class=\"pl-k\">@Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> setPublicURI(<span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span> fullHostNames) {\n        <span class=\"pl-k\">if</span> (fullHostNames <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>fullHostNames<span class=\"pl-k\">.</span>isEmpty()) {\n            toStringContent <span class=\"pl-k\">=</span> fullHostNames<span class=\"pl-k\">.</span>entrySet()\n                    .stream()\n                    .map(e <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> e<span class=\"pl-k\">.</span>getKey() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>://<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> e<span class=\"pl-k\">.</span>getValue() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> name)\n                    .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>joining(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>));\n        } <span class=\"pl-k\">else</span> {\n            toStringContent <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>git://<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> name;\n        }\n    }</pre></div>", "author": "jomarko", "createdAt": "2020-04-07T08:43:50Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImpl.java", "diffHunk": "@@ -559,4 +546,22 @@ public void filterBranchAccess(final UploadPack uploadPack,\n             JGitFSHooks.executeFSHooks(hook, FileSystemHooks.BranchAccessFilter, ctx);\n         }\n     }\n+\n+    @Override\n+    public void setPublicURI(Map<String, String> fullHostNames) {\n+        if (fullHostNames != null && !fullHostNames.isEmpty()) {\n+            final StringBuilder sb = new StringBuilder();\n+            final Iterator<Map.Entry<String, String>> iterator = fullHostNames.entrySet().iterator();\n+            while (iterator.hasNext()) {\n+                final Map.Entry<String, String> entry = iterator.next();\n+                sb.append(entry.getKey()).append(\"://\").append(entry.getValue()).append(\"/\").append(name);\n+                if (iterator.hasNext()) {\n+                    sb.append(\"\\n\");\n+                }\n+            }\n+            toStringContent = sb.toString();\n+        } else {\n+            toStringContent = \"git://\" + name;\n+        }\n+    }", "originalCommit": "72cdfa5173299a95c22821715bf0d6d079dc277a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MTU2OQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404871569", "bodyText": "looks neat. Thanks", "author": "RishiRajAnand", "createdAt": "2020-04-07T14:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTIyOQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404641229", "body": "formatting `if (...`", "bodyText": "formatting if (...", "bodyHTML": "<p dir=\"auto\">formatting <code>if (...</code></p>", "author": "jomarko", "createdAt": "2020-04-07T08:46:31Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java", "diffHunk": "@@ -78,6 +78,13 @@ public void newFileSystem(Supplier<Map<String, String>> fullHostNames,\n         fileSystemsRoot.addAll(parseFSRoots(fsName.get()));\n     }\n \n+    public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n+       if(getFsCache().containsKey(fsKey)) {", "originalCommit": "72cdfa5173299a95c22821715bf0d6d079dc277a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MzYxMw==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404643613", "body": "Could we please replace `uri.equals(protocolName)` with `Objects.equals(uri, protocolName)`? The later one doesn't throw an exception in case `uri` or `protocolName` is null.", "bodyText": "Could we please replace uri.equals(protocolName) with Objects.equals(uri, protocolName)? The later one doesn't throw an exception in case uri or protocolName is null.", "bodyHTML": "<p dir=\"auto\">Could we please replace <code>uri.equals(protocolName)</code> with <code>Objects.equals(uri, protocolName)</code>? The later one doesn't throw an exception in case <code>uri</code> or <code>protocolName</code> is null.</p>", "author": "jomarko", "createdAt": "2020-04-07T08:50:15Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/AbstractTestInfra.java", "diffHunk": "@@ -355,4 +356,10 @@ protected static String multiline(String prefix, String... lines) {\n                 .reduce((s1, s2) -> s1 + \"\\n\" + s2)\n                 .orElse(\"\");\n     }\n+    protected static boolean checkProtocolPresent(String hostNames, String protocolName) {\n+        final String[] uris = hostNames.toString().split(\"\\\\r?\\\\n\");\n+        return Arrays.stream(uris)\n+                .map(uri -> uri.substring(0, uri.indexOf(PROTOCOL_SEPARATOR)))\n+                .anyMatch(uri -> uri.equals(protocolName));", "originalCommit": "72cdfa5173299a95c22821715bf0d6d079dc277a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3Mjg0Mw==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404872843", "bodyText": "Nice catch, thanks", "author": "RishiRajAnand", "createdAt": "2020-04-07T14:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MzYxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Nzk5NQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404647995", "body": "In past, sonarcloud reported anonymous static initialization as possible risk. @hasys implemented different kind of builders due to this. \r\n\r\nCould we please replace all `HashMap` constructions in this way?\r\n```\r\nnew Maps.Builder<String, String>()\r\n   .put(\"ssh\", \"localhost:8080/git\")\r\n   .build()\r\n```\r\n\r\n", "bodyText": "In past, sonarcloud reported anonymous static initialization as possible risk. @hasys implemented different kind of builders due to this.\nCould we please replace all HashMap constructions in this way?\nnew Maps.Builder<String, String>()\n   .put(\"ssh\", \"localhost:8080/git\")\n   .build()", "bodyHTML": "<p dir=\"auto\">In past, sonarcloud reported anonymous static initialization as possible risk. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hasys/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hasys\">@hasys</a> implemented different kind of builders due to this.</p>\n<p dir=\"auto\">Could we please replace all <code>HashMap</code> constructions in this way?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"new Maps.Builder&lt;String, String&gt;()\n   .put(&quot;ssh&quot;, &quot;localhost:8080/git&quot;)\n   .build()\"><pre><code>new Maps.Builder&lt;String, String&gt;()\n   .put(\"ssh\", \"localhost:8080/git\")\n   .build()\n</code></pre></div>", "author": "jomarko", "createdAt": "2020-04-07T08:56:51Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java", "diffHunk": "@@ -516,4 +517,35 @@ public void lockTest() throws IOException, GitAPIException {\n         verify(lockSpy,\n                times(1)).physicalUnLockOnFS();\n     }\n+\n+    @Test\n+    public void testSetPublicURI() throws IOException, GitAPIException {\n+\n+        final JGitFileSystemProvider fsProvider = mock(JGitFileSystemProvider.class);\n+\n+        final Git git = setupGit();\n+\n+        final JGitFileSystemImpl fileSystem = new JGitFileSystemImpl(fsProvider,\n+                                                                     new HashMap<String, String>() {{\n+                                                                         put(\"ssh\", \"localhost:8080/git\");\n+                                                                     }},", "originalCommit": "72cdfa5173299a95c22821715bf0d6d079dc277a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3NDI4Ng==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404874286", "bodyText": "updated", "author": "RishiRajAnand", "createdAt": "2020-04-07T14:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Nzk5NQ=="}], "type": "inlineReview"}, {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "url": "https://github.com/kiegroup/appformer/commit/1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-07T14:47:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MDI1MA==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404940250", "body": "Just a suggestion.\r\nYou could replace the `collect() `by a `forEach` with the content of the for loop below.\r\nThis way you don't need to create a `List<JGitFileSystem>`.", "bodyText": "Just a suggestion.\nYou could replace the collect() by a forEach with the content of the for loop below.\nThis way you don't need to create a List<JGitFileSystem>.", "bodyHTML": "<p dir=\"auto\">Just a suggestion.<br>\nYou could replace the <code>collect() </code>by a <code>forEach</code> with the content of the for loop below.<br>\nThis way you don't need to create a <code>List&lt;JGitFileSystem&gt;</code>.</p>", "author": "caponetto", "createdAt": "2020-04-07T16:20:26Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemProvider.java", "diffHunk": "@@ -439,6 +440,18 @@ public void addHostName(final String protocol, String s) {\n         fullHostNames.put(protocol, s);\n     }\n \n+    public void updateCacheWithHostNames() {\n+        JGitFileSystemsCache fc = fsManager.getFsCache();\n+        List<JGitFileSystem> jGitFileSystems = fc.getFileSystems().stream()\n+                .map(fsName -> ((JGitFileSystemProxy) fsManager.get(fsName)).getRealJGitFileSystem()).collect(Collectors.toList());", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NTAyOQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r405285029", "bodyText": "done,Nice catch. Thanks @caponetto", "author": "RishiRajAnand", "createdAt": "2020-04-08T06:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MDI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MTk3OA==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404941978", "body": "```suggestion\r\n    public void updateFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\r\n```\r\nJust a suggestion.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n          \n          \n            \n                public void updateFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n          \n      \n    \n    \n  \n\nJust a suggestion.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">replaceFSCacheEntry</span>(<span class=\"pl-smi\">String</span> fsKey, <span class=\"pl-smi\">JGitFileSystem</span> jGitFileSystem) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">updateFSCacheEntry</span>(<span class=\"pl-smi\">String</span> fsKey, <span class=\"pl-smi\">JGitFileSystem</span> jGitFileSystem) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Just a suggestion.</p>", "author": "caponetto", "createdAt": "2020-04-07T16:22:53Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java", "diffHunk": "@@ -78,6 +77,14 @@ public void newFileSystem(Supplier<Map<String, String>> fullHostNames,\n         fileSystemsRoot.addAll(parseFSRoots(fsName.get()));\n     }\n \n+    public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NTE5NQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r405285195", "bodyText": "Makes sense", "author": "RishiRajAnand", "createdAt": "2020-04-08T06:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MTk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MzY5Mw==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404943693", "body": "You could use `assertTrue()` here instead of `assertThat().isEqualTo(true)`.", "bodyText": "You could use assertTrue() here instead of assertThat().isEqualTo(true).", "bodyHTML": "<p dir=\"auto\">You could use <code>assertTrue()</code> here instead of <code>assertThat().isEqualTo(true)</code>.</p>", "author": "caponetto", "createdAt": "2020-04-07T16:25:13Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java", "diffHunk": "@@ -516,4 +517,35 @@ public void lockTest() throws IOException, GitAPIException {\n         verify(lockSpy,\n                times(1)).physicalUnLockOnFS();\n     }\n+\n+    @Test\n+    public void testSetPublicURI() throws IOException, GitAPIException {\n+\n+        final JGitFileSystemProvider fsProvider = mock(JGitFileSystemProvider.class);\n+\n+        final Git git = setupGit();\n+\n+        final JGitFileSystemImpl fileSystem = new JGitFileSystemImpl(fsProvider,\n+                                                                     new Maps.Builder<String, String>()\n+                                                                             .put(\"ssh\", \"localhost:8080/git\")\n+                                                                             .build(),\n+                                                                     git,\n+                                                                     createFSLock(git),\n+                                                                     \"my-repo\",\n+                                                                     CredentialsProvider.getDefault(),\n+                                                                     null,\n+                                                                     null);\n+\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        fileSystem.setPublicURI(new Maps.Builder<String, String>()\n+                                        .put(\"http\", \"localhost:8080/git\")\n+                                        .put(\"ssh\", \"localhost:8080/git\")\n+                                        .build());\n+\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(true);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MzgyMQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404943821", "body": "You could use `assertTrue()` here instead of `assertThat().isEqualTo(true)`.", "bodyText": "You could use assertTrue() here instead of assertThat().isEqualTo(true).", "bodyHTML": "<p dir=\"auto\">You could use <code>assertTrue()</code> here instead of <code>assertThat().isEqualTo(true)</code>.</p>", "author": "caponetto", "createdAt": "2020-04-07T16:25:22Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);\n+        provider.updateCacheWithHostNames();\n+\n+        final FileSystem fileSystem2 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem2).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem2.toString(), \"http\")).isEqualTo(true);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjAwMg==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946002", "body": "You could use `isOne()` here instead of `isEqualTo(1)`.", "bodyText": "You could use isOne() here instead of isEqualTo(1).", "bodyHTML": "<p dir=\"auto\">You could use <code>isOne()</code> here instead of <code>isEqualTo(1)</code>.</p>", "author": "caponetto", "createdAt": "2020-04-07T16:28:12Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);\n+        provider.updateCacheWithHostNames();\n+\n+        final FileSystem fileSystem2 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem2).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem2.toString(), \"http\")).isEqualTo(true);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjI2NQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946265", "body": "You could use `assertFalse()` here instead of `assertThat().isEqualTo(false)`.", "bodyText": "You could use assertFalse() here instead of assertThat().isEqualTo(false).", "bodyHTML": "<p dir=\"auto\">You could use <code>assertFalse()</code> here instead of <code>assertThat().isEqualTo(false)</code>.</p>", "author": "caponetto", "createdAt": "2020-04-07T16:28:34Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjQzNw==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946437", "body": "You could use `isOne()` here instead of `isEqualTo(1)`.", "bodyText": "You could use isOne() here instead of isEqualTo(1).", "bodyHTML": "<p dir=\"auto\">You could use <code>isOne()</code> here instead of <code>isEqualTo(1)</code>.</p>", "author": "caponetto", "createdAt": "2020-04-07T16:28:49Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "url": "https://github.com/kiegroup/appformer/commit/12b2f75af6492094b25f6ef4eb50d480d51eb17d", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-08T06:23:15Z", "type": "forcePushed"}, {"oid": "1d0ba53dc9778bf524162c62f14bf45a46471e9b", "url": "https://github.com/kiegroup/appformer/commit/1d0ba53dc9778bf524162c62f14bf45a46471e9b", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-21T18:06:04Z", "type": "commit"}, {"oid": "1d0ba53dc9778bf524162c62f14bf45a46471e9b", "url": "https://github.com/kiegroup/appformer/commit/1d0ba53dc9778bf524162c62f14bf45a46471e9b", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-21T18:06:04Z", "type": "forcePushed"}]}