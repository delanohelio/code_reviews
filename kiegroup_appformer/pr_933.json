{"pr_number": 933, "pr_title": "AF-2456: Support Gradual Export in Data Transfer API", "pr_author": "jesuino", "pr_createdAt": "2020-03-25T16:59:12Z", "pr_url": "https://github.com/kiegroup/appformer/pull/933", "timeline": [{"oid": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "url": "https://github.com/kiegroup/appformer/commit/a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "message": "Export navigation adjustments", "committedDate": "2020-03-25T16:59:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMjQ1Mg==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402912452", "body": "```suggestion\r\n```", "bodyText": "Suggested change", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "caponetto", "createdAt": "2020-04-03T10:32:29Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.dashbuilder.transfer.DataTransferServices;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class DataTransferExportPopUp {\n+\n+    private View view;\n+\n+    private Caller<DataTransferServices> dataTransferServices;\n+\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+\n+    public interface View extends UberElemental<DataTransferExportPopUp> {\n+\n+        void show();\n+\n+        void setAssetsToExport(DataTransferAssets assetsToExport);\n+\n+        void showError(Throwable error);\n+\n+    }\n+\n+    @Inject\n+    public DataTransferExportPopUp(View view,\n+                                   Caller<DataTransferServices> dataTransferServices) {\n+        this.view = view;\n+        this.dataTransferServices = dataTransferServices;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n+\n+    }\n+\n+    public void load() {\n+        view.show();\n+        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n+                                  (message, error) -> {\n+                                      view.showError(error);\n+                                      return false;\n+                                  })\n+                            .assetsToExport();\n+", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\ndeleted file mode 100644\nindex 237ea2dc6..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n+++ /dev/null\n", "chunk": "@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.dashbuilder.transfer.DataTransferServices;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.uberfire.client.mvp.UberElemental;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class DataTransferExportPopUp {\n-\n-    private View view;\n-\n-    private Caller<DataTransferServices> dataTransferServices;\n-\n-    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n-\n-    public interface View extends UberElemental<DataTransferExportPopUp> {\n-\n-        void show();\n-\n-        void setAssetsToExport(DataTransferAssets assetsToExport);\n-\n-        void showError(Throwable error);\n-\n-    }\n-\n-    @Inject\n-    public DataTransferExportPopUp(View view,\n-                                   Caller<DataTransferServices> dataTransferServices) {\n-        this.view = view;\n-        this.dataTransferServices = dataTransferServices;\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        view.init(this);\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n-\n-    }\n-\n-    public void load() {\n-        view.show();\n-        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n-                                  (message, error) -> {\n-                                      view.showError(error);\n-                                      return false;\n-                                  })\n-                            .assetsToExport();\n-\n-    }\n-\n-    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n-        dataTransferExportModelCallback.execute(dataTransferExportModel);\n-\n-    }\n-}\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\nnew file mode 100644\nindex 000000000..237ea2dc6\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n", "chunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.dashbuilder.transfer.DataTransferServices;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class DataTransferExportPopUp {\n+\n+    private View view;\n+\n+    private Caller<DataTransferServices> dataTransferServices;\n+\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+\n+    public interface View extends UberElemental<DataTransferExportPopUp> {\n+\n+        void show();\n+\n+        void setAssetsToExport(DataTransferAssets assetsToExport);\n+\n+        void showError(Throwable error);\n+\n+    }\n+\n+    @Inject\n+    public DataTransferExportPopUp(View view,\n+                                   Caller<DataTransferServices> dataTransferServices) {\n+        this.view = view;\n+        this.dataTransferServices = dataTransferServices;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n+\n+    }\n+\n+    public void load() {\n+        view.show();\n+        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n+                                  (message, error) -> {\n+                                      view.showError(error);\n+                                      return false;\n+                                  })\n+                            .assetsToExport();\n+\n+    }\n+\n+    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n+        dataTransferExportModelCallback.execute(dataTransferExportModel);\n+\n+    }\n+}\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\ndeleted file mode 100644\nindex 237ea2dc6..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n+++ /dev/null\n", "chunk": "@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.dashbuilder.transfer.DataTransferServices;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.uberfire.client.mvp.UberElemental;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class DataTransferExportPopUp {\n-\n-    private View view;\n-\n-    private Caller<DataTransferServices> dataTransferServices;\n-\n-    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n-\n-    public interface View extends UberElemental<DataTransferExportPopUp> {\n-\n-        void show();\n-\n-        void setAssetsToExport(DataTransferAssets assetsToExport);\n-\n-        void showError(Throwable error);\n-\n-    }\n-\n-    @Inject\n-    public DataTransferExportPopUp(View view,\n-                                   Caller<DataTransferServices> dataTransferServices) {\n-        this.view = view;\n-        this.dataTransferServices = dataTransferServices;\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        view.init(this);\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n-\n-    }\n-\n-    public void load() {\n-        view.show();\n-        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n-                                  (message, error) -> {\n-                                      view.showError(error);\n-                                      return false;\n-                                  })\n-                            .assetsToExport();\n-\n-    }\n-\n-    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n-        dataTransferExportModelCallback.execute(dataTransferExportModel);\n-\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMjUwNg==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402912506", "body": "```suggestion\r\n```", "bodyText": "Suggested change", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "caponetto", "createdAt": "2020-04-03T10:32:36Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.dashbuilder.transfer.DataTransferServices;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class DataTransferExportPopUp {\n+\n+    private View view;\n+\n+    private Caller<DataTransferServices> dataTransferServices;\n+\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+\n+    public interface View extends UberElemental<DataTransferExportPopUp> {\n+\n+        void show();\n+\n+        void setAssetsToExport(DataTransferAssets assetsToExport);\n+\n+        void showError(Throwable error);\n+\n+    }\n+\n+    @Inject\n+    public DataTransferExportPopUp(View view,\n+                                   Caller<DataTransferServices> dataTransferServices) {\n+        this.view = view;\n+        this.dataTransferServices = dataTransferServices;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n+", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\ndeleted file mode 100644\nindex 237ea2dc6..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n+++ /dev/null\n", "chunk": "@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.dashbuilder.transfer.DataTransferServices;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.uberfire.client.mvp.UberElemental;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class DataTransferExportPopUp {\n-\n-    private View view;\n-\n-    private Caller<DataTransferServices> dataTransferServices;\n-\n-    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n-\n-    public interface View extends UberElemental<DataTransferExportPopUp> {\n-\n-        void show();\n-\n-        void setAssetsToExport(DataTransferAssets assetsToExport);\n-\n-        void showError(Throwable error);\n-\n-    }\n-\n-    @Inject\n-    public DataTransferExportPopUp(View view,\n-                                   Caller<DataTransferServices> dataTransferServices) {\n-        this.view = view;\n-        this.dataTransferServices = dataTransferServices;\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        view.init(this);\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n-\n-    }\n-\n-    public void load() {\n-        view.show();\n-        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n-                                  (message, error) -> {\n-                                      view.showError(error);\n-                                      return false;\n-                                  })\n-                            .assetsToExport();\n-\n-    }\n-\n-    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n-        dataTransferExportModelCallback.execute(dataTransferExportModel);\n-\n-    }\n-}\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\nnew file mode 100644\nindex 000000000..237ea2dc6\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n", "chunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.dashbuilder.transfer.DataTransferServices;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class DataTransferExportPopUp {\n+\n+    private View view;\n+\n+    private Caller<DataTransferServices> dataTransferServices;\n+\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+\n+    public interface View extends UberElemental<DataTransferExportPopUp> {\n+\n+        void show();\n+\n+        void setAssetsToExport(DataTransferAssets assetsToExport);\n+\n+        void showError(Throwable error);\n+\n+    }\n+\n+    @Inject\n+    public DataTransferExportPopUp(View view,\n+                                   Caller<DataTransferServices> dataTransferServices) {\n+        this.view = view;\n+        this.dataTransferServices = dataTransferServices;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n+\n+    }\n+\n+    public void load() {\n+        view.show();\n+        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n+                                  (message, error) -> {\n+                                      view.showError(error);\n+                                      return false;\n+                                  })\n+                            .assetsToExport();\n+\n+    }\n+\n+    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n+        dataTransferExportModelCallback.execute(dataTransferExportModel);\n+\n+    }\n+}\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\ndeleted file mode 100644\nindex 237ea2dc6..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n+++ /dev/null\n", "chunk": "@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.dashbuilder.transfer.DataTransferServices;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.uberfire.client.mvp.UberElemental;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class DataTransferExportPopUp {\n-\n-    private View view;\n-\n-    private Caller<DataTransferServices> dataTransferServices;\n-\n-    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n-\n-    public interface View extends UberElemental<DataTransferExportPopUp> {\n-\n-        void show();\n-\n-        void setAssetsToExport(DataTransferAssets assetsToExport);\n-\n-        void showError(Throwable error);\n-\n-    }\n-\n-    @Inject\n-    public DataTransferExportPopUp(View view,\n-                                   Caller<DataTransferServices> dataTransferServices) {\n-        this.view = view;\n-        this.dataTransferServices = dataTransferServices;\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        view.init(this);\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n-\n-    }\n-\n-    public void load() {\n-        view.show();\n-        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n-                                  (message, error) -> {\n-                                      view.showError(error);\n-                                      return false;\n-                                  })\n-                            .assetsToExport();\n-\n-    }\n-\n-    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n-        dataTransferExportModelCallback.execute(dataTransferExportModel);\n-\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMjU3Mg==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402912572", "body": "```suggestion\r\n```", "bodyText": "Suggested change", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "caponetto", "createdAt": "2020-04-03T10:32:43Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.dashbuilder.transfer.DataTransferServices;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class DataTransferExportPopUp {\n+\n+    private View view;\n+\n+    private Caller<DataTransferServices> dataTransferServices;\n+\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+\n+    public interface View extends UberElemental<DataTransferExportPopUp> {\n+\n+        void show();\n+\n+        void setAssetsToExport(DataTransferAssets assetsToExport);\n+\n+        void showError(Throwable error);\n+\n+    }\n+\n+    @Inject\n+    public DataTransferExportPopUp(View view,\n+                                   Caller<DataTransferServices> dataTransferServices) {\n+        this.view = view;\n+        this.dataTransferServices = dataTransferServices;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n+\n+    }\n+\n+    public void load() {\n+        view.show();\n+        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n+                                  (message, error) -> {\n+                                      view.showError(error);\n+                                      return false;\n+                                  })\n+                            .assetsToExport();\n+\n+    }\n+\n+    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n+        dataTransferExportModelCallback.execute(dataTransferExportModel);\n+", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\ndeleted file mode 100644\nindex 237ea2dc6..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n+++ /dev/null\n", "chunk": "@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.dashbuilder.transfer.DataTransferServices;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.uberfire.client.mvp.UberElemental;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class DataTransferExportPopUp {\n-\n-    private View view;\n-\n-    private Caller<DataTransferServices> dataTransferServices;\n-\n-    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n-\n-    public interface View extends UberElemental<DataTransferExportPopUp> {\n-\n-        void show();\n-\n-        void setAssetsToExport(DataTransferAssets assetsToExport);\n-\n-        void showError(Throwable error);\n-\n-    }\n-\n-    @Inject\n-    public DataTransferExportPopUp(View view,\n-                                   Caller<DataTransferServices> dataTransferServices) {\n-        this.view = view;\n-        this.dataTransferServices = dataTransferServices;\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        view.init(this);\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n-\n-    }\n-\n-    public void load() {\n-        view.show();\n-        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n-                                  (message, error) -> {\n-                                      view.showError(error);\n-                                      return false;\n-                                  })\n-                            .assetsToExport();\n-\n-    }\n-\n-    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n-        dataTransferExportModelCallback.execute(dataTransferExportModel);\n-\n-    }\n-}\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\nnew file mode 100644\nindex 000000000..237ea2dc6\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n", "chunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.dashbuilder.transfer.DataTransferServices;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class DataTransferExportPopUp {\n+\n+    private View view;\n+\n+    private Caller<DataTransferServices> dataTransferServices;\n+\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+\n+    public interface View extends UberElemental<DataTransferExportPopUp> {\n+\n+        void show();\n+\n+        void setAssetsToExport(DataTransferAssets assetsToExport);\n+\n+        void showError(Throwable error);\n+\n+    }\n+\n+    @Inject\n+    public DataTransferExportPopUp(View view,\n+                                   Caller<DataTransferServices> dataTransferServices) {\n+        this.view = view;\n+        this.dataTransferServices = dataTransferServices;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n+\n+    }\n+\n+    public void load() {\n+        view.show();\n+        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n+                                  (message, error) -> {\n+                                      view.showError(error);\n+                                      return false;\n+                                  })\n+                            .assetsToExport();\n+\n+    }\n+\n+    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n+        dataTransferExportModelCallback.execute(dataTransferExportModel);\n+\n+    }\n+}\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\ndeleted file mode 100644\nindex 237ea2dc6..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUp.java\n+++ /dev/null\n", "chunk": "@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.dashbuilder.transfer.DataTransferServices;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.uberfire.client.mvp.UberElemental;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class DataTransferExportPopUp {\n-\n-    private View view;\n-\n-    private Caller<DataTransferServices> dataTransferServices;\n-\n-    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n-\n-    public interface View extends UberElemental<DataTransferExportPopUp> {\n-\n-        void show();\n-\n-        void setAssetsToExport(DataTransferAssets assetsToExport);\n-\n-        void showError(Throwable error);\n-\n-    }\n-\n-    @Inject\n-    public DataTransferExportPopUp(View view,\n-                                   Caller<DataTransferServices> dataTransferServices) {\n-        this.view = view;\n-        this.dataTransferServices = dataTransferServices;\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        view.init(this);\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n-\n-    }\n-\n-    public void load() {\n-        view.show();\n-        dataTransferServices.call((DataTransferAssets v) -> view.setAssetsToExport(v),\n-                                  (message, error) -> {\n-                                      view.showError(error);\n-                                      return false;\n-                                  })\n-                            .assetsToExport();\n-\n-    }\n-\n-    public void receiveSelectedAssets(DataTransferExportModel dataTransferExportModel) {\n-        dataTransferExportModelCallback.execute(dataTransferExportModel);\n-\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0NTA1Ng==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402945056", "body": "Please add the copyright header to this file.", "bodyText": "Please add the copyright header to this file.", "bodyHTML": "<p dir=\"auto\">Please add the copyright header to this file.</p>", "author": "caponetto", "createdAt": "2020-04-03T11:39:25Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.dashbuilder.transfer;", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\nindex 203b1e0cd..3346f44a1 100644\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\n", "chunk": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.dashbuilder.transfer;\n \n import java.util.Collections;\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\nindex 3346f44a1..203b1e0cd 100644\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\n", "chunk": "@@ -1,19 +1,3 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n package org.dashbuilder.transfer;\n \n import java.util.Collections;\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\nindex 203b1e0cd..3346f44a1 100644\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/DataTransferExportModel.java\n", "chunk": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.dashbuilder.transfer;\n \n import java.util.Collections;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0NjEzNA==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402946134", "body": "```suggestion\r\n            final DataTransferExportPopUp dataTransferExportPopUp) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        DataTransferExportPopUp dataTransferExportPopUp) {\n          \n          \n            \n                        final DataTransferExportPopUp dataTransferExportPopUp) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">DataTransferExportPopUp</span> dataTransferExportPopUp) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">DataTransferExportPopUp</span> dataTransferExportPopUp) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "caponetto", "createdAt": "2020-04-03T11:41:43Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java", "diffHunk": "@@ -50,11 +55,13 @@ public DataTransferScreen() {\n     public DataTransferScreen(\n             final View view,\n             final DataTransferPopUp popUp,\n-            final Caller<DataTransferServices> dataTransferServices) {\n+            final Caller<DataTransferServices> dataTransferServices,\n+            DataTransferExportPopUp dataTransferExportPopUp) {", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex f2a08f786..d0c637527 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -44,24 +46,22 @@ public class DataTransferScreen {\n     private Caller<DataTransferServices> dataTransferServices;\n     private ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n     private DataTransferPopUp popUp;\n-    private DataTransferExportPopUp dataTransferExportPopUp;\n-    \n-    protected ParameterizedCommand<DataTransferExportModel> exportCallback;\n+    private ExportWizard exportWizard;\n \n-    public DataTransferScreen() {\n-    }\n+    protected ParameterizedCommand<DataTransferExportModel> gradualExportCallback;\n+\n+    public DataTransferScreen() {}\n \n     @Inject\n     public DataTransferScreen(\n-            final View view,\n-            final DataTransferPopUp popUp,\n-            final Caller<DataTransferServices> dataTransferServices,\n-            DataTransferExportPopUp dataTransferExportPopUp) {\n-\n+                              final View view,\n+                              final DataTransferPopUp popUp,\n+                              final Caller<DataTransferServices> dataTransferServices,\n+                              ExportWizard exportWizard) {\n         this.view = view;\n         this.popUp = popUp;\n         this.dataTransferServices = dataTransferServices;\n-        this.dataTransferExportPopUp = dataTransferExportPopUp;\n+        this.exportWizard = exportWizard;\n     }\n \n     @WorkbenchPartTitle\n", "next_change": {"commit": "d69d8664df26eb75dd81da41958168b149dde09d", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex d0c637527..962b858c3 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -57,11 +59,13 @@ public class DataTransferScreen {\n                               final View view,\n                               final DataTransferPopUp popUp,\n                               final Caller<DataTransferServices> dataTransferServices,\n-                              ExportWizard exportWizard) {\n+                              final ExportWizard exportWizard,\n+                              final BusyIndicatorView busyIndicatorView) {\n         this.view = view;\n         this.popUp = popUp;\n         this.dataTransferServices = dataTransferServices;\n         this.exportWizard = exportWizard;\n+        this.busyIndicatorView = busyIndicatorView;\n     }\n \n     @WorkbenchPartTitle\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex 962b858c3..f2a08f786 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -47,25 +44,24 @@ public class DataTransferScreen {\n     private Caller<DataTransferServices> dataTransferServices;\n     private ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n     private DataTransferPopUp popUp;\n-    private ExportWizard exportWizard;\n-    private BusyIndicatorView busyIndicatorView;\n+    private DataTransferExportPopUp dataTransferExportPopUp;\n+    \n+    protected ParameterizedCommand<DataTransferExportModel> exportCallback;\n \n-    protected ParameterizedCommand<DataTransferExportModel> gradualExportCallback;\n-\n-    public DataTransferScreen() {}\n+    public DataTransferScreen() {\n+    }\n \n     @Inject\n     public DataTransferScreen(\n-                              final View view,\n-                              final DataTransferPopUp popUp,\n-                              final Caller<DataTransferServices> dataTransferServices,\n-                              final ExportWizard exportWizard,\n-                              final BusyIndicatorView busyIndicatorView) {\n+            final View view,\n+            final DataTransferPopUp popUp,\n+            final Caller<DataTransferServices> dataTransferServices,\n+            DataTransferExportPopUp dataTransferExportPopUp) {\n+\n         this.view = view;\n         this.popUp = popUp;\n         this.dataTransferServices = dataTransferServices;\n-        this.exportWizard = exportWizard;\n-        this.busyIndicatorView = busyIndicatorView;\n+        this.dataTransferExportPopUp = dataTransferExportPopUp;\n     }\n \n     @WorkbenchPartTitle\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex f2a08f786..962b858c3 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -44,24 +47,25 @@ public class DataTransferScreen {\n     private Caller<DataTransferServices> dataTransferServices;\n     private ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n     private DataTransferPopUp popUp;\n-    private DataTransferExportPopUp dataTransferExportPopUp;\n-    \n-    protected ParameterizedCommand<DataTransferExportModel> exportCallback;\n+    private ExportWizard exportWizard;\n+    private BusyIndicatorView busyIndicatorView;\n \n-    public DataTransferScreen() {\n-    }\n+    protected ParameterizedCommand<DataTransferExportModel> gradualExportCallback;\n+\n+    public DataTransferScreen() {}\n \n     @Inject\n     public DataTransferScreen(\n-            final View view,\n-            final DataTransferPopUp popUp,\n-            final Caller<DataTransferServices> dataTransferServices,\n-            DataTransferExportPopUp dataTransferExportPopUp) {\n-\n+                              final View view,\n+                              final DataTransferPopUp popUp,\n+                              final Caller<DataTransferServices> dataTransferServices,\n+                              final ExportWizard exportWizard,\n+                              final BusyIndicatorView busyIndicatorView) {\n         this.view = view;\n         this.popUp = popUp;\n         this.dataTransferServices = dataTransferServices;\n-        this.dataTransferExportPopUp = dataTransferExportPopUp;\n+        this.exportWizard = exportWizard;\n+        this.busyIndicatorView = busyIndicatorView;\n     }\n \n     @WorkbenchPartTitle\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk1MDI2MA==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402950260", "body": "I'd suggest to extract each table on its own class following a common contract.\r\nThus, `DataTransferExportPopUpView` could add and treat each part of the Accordion in a generic way.\r\nAlso, it would allow to add any other kind of exporting item more easily.\r\nJust a thought :)", "bodyText": "I'd suggest to extract each table on its own class following a common contract.\nThus, DataTransferExportPopUpView could add and treat each part of the Accordion in a generic way.\nAlso, it would allow to add any other kind of exporting item more easily.\nJust a thought :)", "bodyHTML": "<p dir=\"auto\">I'd suggest to extract each table on its own class following a common contract.<br>\nThus, <code>DataTransferExportPopUpView</code> could add and treat each part of the Accordion in a generic way.<br>\nAlso, it would allow to add any other kind of exporting item more easily.<br>\nJust a thought :)</p>", "author": "caponetto", "createdAt": "2020-04-03T11:51:03Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.Element;\n+import elemental2.dom.Element.OnclickCallbackFn;\n+import elemental2.dom.HTMLCollection;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import elemental2.dom.HTMLInputElement;\n+import elemental2.dom.HTMLTableCellElement;\n+import elemental2.dom.HTMLTableElement;\n+import elemental2.dom.HTMLTableRowElement;\n+import elemental2.dom.NodeList;\n+import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n+import org.dashbuilder.client.cms.screen.util.DomFactory;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.gwtbootstrap3.client.ui.ModalFooter;\n+import org.gwtbootstrap3.extras.toggleswitch.client.ui.ToggleSwitch;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.uberfire.ext.editor.commons.client.file.popups.CommonModalBuilder;\n+import org.uberfire.ext.widgets.common.client.common.popups.BaseModal;\n+import org.uberfire.ext.widgets.common.client.common.popups.footers.ModalFooterOKCancelButtons;\n+import org.uberfire.workbench.events.NotificationEvent;\n+\n+@Templated\n+@Dependent\n+public class DataTransferExportPopUpView implements DataTransferExportPopUp.View {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DataTransferExportPopUpView.class);\n+\n+    private ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n+    private DataTransferExportPopUp presenter;\n+    private BaseModal modal;\n+    \n+    @Inject\n+    ToggleSwitch toggleSwitch;\n+    \n+    @Inject\n+    Elemental2DomUtil elem2Dom;\n+    \n+    @Inject\n+    @DataField \n+    HTMLDivElement toggleSwitchContainer;\n+\n+    @Inject\n+    @DataField\n+    HTMLTableElement datasetsTable;\n+\n+    @Inject\n+    @DataField\n+    HTMLTableElement pagesTable;\n+\n+    @Inject\n+    @DataField\n+    private HTMLDivElement dataTransferExportModalBody;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement searchDatasets;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement searchPages;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement selectAllDatasets;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement selectAllPages;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement progressIndicator;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement dataSelectionAccordion;\n+\n+    @Inject\n+    private Event<NotificationEvent> workbenchNotification;\n+\n+    @Inject\n+    DomFactory domFactory;\n+\n+    private DataTransferAssets assetsToExport;\n+\n+    @Override\n+    public HTMLElement getElement() {\n+        return dataTransferExportModalBody;\n+    }\n+\n+    @Override\n+    public void init(DataTransferExportPopUp presenter) {\n+        this.presenter = presenter;\n+        ModalFooter modalFooter = new ModalFooterOKCancelButtons(this::getSelectedAssets,\n+                                                                 () -> modal.hide());\n+        modal = new CommonModalBuilder().addHeader(i18n.dataTransferExportPopUpViewTitle())\n+                                        .addBody(dataTransferExportModalBody)\n+                                        .addFooter(modalFooter)\n+                                        .build();\n+\n+        selectAllPages.onclick = e -> {\n+            allInputsForTable(pagesTable).forEach(chk -> chk.checked = selectAllPages.checked);\n+            return null;\n+        };\n+\n+        selectAllDatasets.onclick = e -> {\n+            allInputsForTable(datasetsTable).forEach(chk -> chk.checked = selectAllDatasets.checked);\n+            return null;\n+        };\n+\n+        searchPages.onkeyup = e -> {\n+            filterTable(searchPages, pagesTable);\n+            return null;\n+        };\n+\n+        searchDatasets.onkeyup = e -> {\n+            filterTable(searchDatasets, datasetsTable);\n+            return null;\n+        };\n+        \n+        elem2Dom.appendWidgetToElement(toggleSwitchContainer, toggleSwitch);\n+        toggleSwitch.setValue(true);\n+\n+    }\n+\n+    @Override\n+    public void show() {\n+        modal.show();\n+        loading();\n+    }\n+\n+    @Override\n+    public void setAssetsToExport(DataTransferAssets assetsToExport) {\n+        this.assetsToExport = assetsToExport;\n+        finishedLoading();\n+    }\n+\n+    private void fillPagesTable() {", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java\ndeleted file mode 100644\nindex a13c9e4e2..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java\n+++ /dev/null\n", "chunk": "@@ -1,298 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-import java.util.stream.Stream;\n-\n-import javax.enterprise.context.Dependent;\n-import javax.enterprise.event.Event;\n-import javax.inject.Inject;\n-\n-import elemental2.dom.Element;\n-import elemental2.dom.Element.OnclickCallbackFn;\n-import elemental2.dom.HTMLCollection;\n-import elemental2.dom.HTMLDivElement;\n-import elemental2.dom.HTMLElement;\n-import elemental2.dom.HTMLInputElement;\n-import elemental2.dom.HTMLTableCellElement;\n-import elemental2.dom.HTMLTableElement;\n-import elemental2.dom.HTMLTableRowElement;\n-import elemental2.dom.NodeList;\n-import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n-import org.dashbuilder.client.cms.screen.util.DomFactory;\n-import org.dashbuilder.dataset.def.DataSetDef;\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.gwtbootstrap3.client.ui.ModalFooter;\n-import org.gwtbootstrap3.extras.toggleswitch.client.ui.ToggleSwitch;\n-import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n-import org.jboss.errai.ui.shared.api.annotations.DataField;\n-import org.jboss.errai.ui.shared.api.annotations.Templated;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.uberfire.ext.editor.commons.client.file.popups.CommonModalBuilder;\n-import org.uberfire.ext.widgets.common.client.common.popups.BaseModal;\n-import org.uberfire.ext.widgets.common.client.common.popups.footers.ModalFooterOKCancelButtons;\n-import org.uberfire.workbench.events.NotificationEvent;\n-\n-@Templated\n-@Dependent\n-public class DataTransferExportPopUpView implements DataTransferExportPopUp.View {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DataTransferExportPopUpView.class);\n-\n-    private ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n-    private DataTransferExportPopUp presenter;\n-    private BaseModal modal;\n-    \n-    @Inject\n-    ToggleSwitch toggleSwitch;\n-    \n-    @Inject\n-    Elemental2DomUtil elem2Dom;\n-    \n-    @Inject\n-    @DataField \n-    HTMLDivElement toggleSwitchContainer;\n-\n-    @Inject\n-    @DataField\n-    HTMLTableElement datasetsTable;\n-\n-    @Inject\n-    @DataField\n-    HTMLTableElement pagesTable;\n-\n-    @Inject\n-    @DataField\n-    private HTMLDivElement dataTransferExportModalBody;\n-\n-    @Inject\n-    @DataField\n-    HTMLInputElement searchDatasets;\n-\n-    @Inject\n-    @DataField\n-    HTMLInputElement searchPages;\n-\n-    @Inject\n-    @DataField\n-    HTMLInputElement selectAllDatasets;\n-\n-    @Inject\n-    @DataField\n-    HTMLInputElement selectAllPages;\n-\n-    @Inject\n-    @DataField\n-    HTMLDivElement progressIndicator;\n-\n-    @Inject\n-    @DataField\n-    HTMLDivElement dataSelectionAccordion;\n-\n-    @Inject\n-    private Event<NotificationEvent> workbenchNotification;\n-\n-    @Inject\n-    DomFactory domFactory;\n-\n-    private DataTransferAssets assetsToExport;\n-\n-    @Override\n-    public HTMLElement getElement() {\n-        return dataTransferExportModalBody;\n-    }\n-\n-    @Override\n-    public void init(DataTransferExportPopUp presenter) {\n-        this.presenter = presenter;\n-        ModalFooter modalFooter = new ModalFooterOKCancelButtons(this::getSelectedAssets,\n-                                                                 () -> modal.hide());\n-        modal = new CommonModalBuilder().addHeader(i18n.dataTransferExportPopUpViewTitle())\n-                                        .addBody(dataTransferExportModalBody)\n-                                        .addFooter(modalFooter)\n-                                        .build();\n-\n-        selectAllPages.onclick = e -> {\n-            allInputsForTable(pagesTable).forEach(chk -> chk.checked = selectAllPages.checked);\n-            return null;\n-        };\n-\n-        selectAllDatasets.onclick = e -> {\n-            allInputsForTable(datasetsTable).forEach(chk -> chk.checked = selectAllDatasets.checked);\n-            return null;\n-        };\n-\n-        searchPages.onkeyup = e -> {\n-            filterTable(searchPages, pagesTable);\n-            return null;\n-        };\n-\n-        searchDatasets.onkeyup = e -> {\n-            filterTable(searchDatasets, datasetsTable);\n-            return null;\n-        };\n-        \n-        elem2Dom.appendWidgetToElement(toggleSwitchContainer, toggleSwitch);\n-        toggleSwitch.setValue(true);\n-\n-    }\n-\n-    @Override\n-    public void show() {\n-        modal.show();\n-        loading();\n-    }\n-\n-    @Override\n-    public void setAssetsToExport(DataTransferAssets assetsToExport) {\n-        this.assetsToExport = assetsToExport;\n-        finishedLoading();\n-    }\n-\n-    private void fillPagesTable() {\n-        HTMLElement pageBody = pagesTable.tBodies.getAt(0);\n-        pageBody.innerHTML = \"\";\n-        for (String page : this.assetsToExport.getPages()) {\n-            HTMLTableCellElement pageCell = domFactory.tableCell();\n-            HTMLTableCellElement selectCell = domFactory.tableCell();\n-            HTMLInputElement select = createCheckBox();\n-            select.onclick = verifyAllCheck(selectAllPages, pagesTable);\n-            select.id = page;\n-            selectCell.appendChild(select);\n-            pageCell.innerHTML = page;\n-\n-            HTMLTableRowElement pageRow = domFactory.tableRow();\n-            pageRow.appendChild(selectCell);\n-            pageRow.appendChild(pageCell);\n-            pageBody.appendChild(pageRow);\n-        }\n-    }\n-\n-    private void fillDataSetsTable() {\n-        HTMLElement datasetsBody = datasetsTable.tBodies.getAt(0);\n-        datasetsBody.innerHTML = \"\";\n-        for (DataSetDef dataSetDef : this.assetsToExport.getDatasetsDefinitions()) {\n-            HTMLInputElement select = createCheckBox();\n-            select.onclick = verifyAllCheck(selectAllDatasets, datasetsTable);\n-            HTMLTableCellElement dsSelectCell = domFactory.tableCell();\n-            select.id = dataSetDef.getUUID();\n-            dsSelectCell.appendChild(select);\n-            HTMLTableRowElement dsRow = domFactory.tableRow();\n-            dsRow.appendChild(dsSelectCell);\n-            Stream.of(dataSetDef.getUUID(),\n-                      dataSetDef.getName(),\n-                      dataSetDef.getProvider().getName())\n-                  .map(this::createCell).forEach(dsRow::appendChild);\n-            datasetsBody.appendChild(dsRow);\n-        }\n-\n-    }\n-\n-    private OnclickCallbackFn verifyAllCheck(HTMLInputElement parent, HTMLTableElement table) {\n-        return e -> {\n-            parent.checked = allInputsForTable(table).allMatch(input -> input.checked);\n-            return null;\n-        };\n-    }\n-\n-    public void getSelectedAssets() {\n-        modal.hide();\n-\n-        List<DataSetDef> datasets = getSelectedRows(datasetsTable, assetsToExport.getDatasetsDefinitions());\n-        List<String> pages = getSelectedRows(pagesTable, assetsToExport.getPages());\n-\n-        DataTransferExportModel exportModel = new DataTransferExportModel(datasets,\n-                                                                          pages,\n-                                                                          toggleSwitch.getValue());\n-        presenter.receiveSelectedAssets(exportModel);\n-\n-    }\n-\n-    private HTMLInputElement createCheckBox() {\n-        HTMLInputElement checkbox = domFactory.input();\n-        checkbox.type = \"checkbox\";\n-        checkbox.checked = true;\n-        return checkbox;\n-    }\n-\n-    private HTMLTableCellElement createCell(String content) {\n-        HTMLTableCellElement cell = domFactory.tableCell();\n-        cell.innerHTML = content;\n-        return cell;\n-    }\n-\n-    private Stream<HTMLInputElement> allInputsForTable(HTMLTableElement table) {\n-        // asArray throws cast exception\n-        NodeList<Element> items = table.querySelectorAll(\"tbody > tr > td:first-of-type > input[type=checkbox]\");\n-        return IntStream.range(0, items.getLength()).mapToObj(i -> (HTMLInputElement) items.getAt(i));\n-    }\n-\n-    protected void filterTable(HTMLInputElement filter, HTMLTableElement table) {\n-        String query = filter.value.trim().toLowerCase();\n-        HTMLCollection<HTMLTableRowElement> rows = table.tBodies.getAt(0).rows;\n-        IntStream.range(0, rows.getLength()).mapToObj(rows::getAt).forEach(row -> {\n-            row.hidden = false;\n-            if (!query.isEmpty()) {\n-                row.hidden = IntStream.range(0, row.cells.getLength())\n-                                      .mapToObj(row.cells::getAt)\n-                                      .noneMatch(c -> c.textContent.toLowerCase().contains(query));\n-            }\n-\n-        });\n-\n-    }\n-\n-    private <T> List<T> getSelectedRows(HTMLTableElement table, List<T> list) {\n-        HTMLCollection<HTMLTableRowElement> rows = table.tBodies.getAt(0).rows;\n-        return IntStream.range(0, rows.getLength())\n-                        .filter(i -> {\n-                            Element checkBox = rows.getAt(i).querySelector(\"td > input[type=checkbox]\");\n-                            return ((HTMLInputElement) checkBox).checked;\n-                        }).mapToObj(list::get)\n-                        .collect(Collectors.toList());\n-    }\n-\n-    private void loading() {\n-        progressIndicator.hidden = false;\n-        dataSelectionAccordion.hidden = true;\n-    }\n-\n-    private void finishedLoading() {\n-        progressIndicator.hidden = true;\n-        dataSelectionAccordion.hidden = false;\n-        selectAllDatasets.checked = true;\n-        selectAllPages.checked = true;\n-        fillDataSetsTable();\n-        fillPagesTable();\n-    }\n-\n-    @Override\n-    public void showError(Throwable error) {\n-        String dataTransferExportError = i18n.dataTransferExportError();\n-        LOGGER.error(dataTransferExportError, error);\n-        NotificationEvent errorEvent = new NotificationEvent(dataTransferExportError,\n-                                                             NotificationEvent.NotificationType.ERROR);\n-        workbenchNotification.fire(errorEvent);\n-        modal.hide();\n-    }\n-\n-}\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java\nnew file mode 100644\nindex 000000000..786cacf28\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java\n", "chunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.Element;\n+import elemental2.dom.Element.OnclickCallbackFn;\n+import elemental2.dom.HTMLCollection;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import elemental2.dom.HTMLInputElement;\n+import elemental2.dom.HTMLTableCellElement;\n+import elemental2.dom.HTMLTableElement;\n+import elemental2.dom.HTMLTableRowElement;\n+import elemental2.dom.NodeList;\n+import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n+import org.dashbuilder.client.cms.screen.util.DomFactory;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.gwtbootstrap3.client.ui.ModalFooter;\n+import org.gwtbootstrap3.extras.toggleswitch.client.ui.ToggleSwitch;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.uberfire.ext.editor.commons.client.file.popups.CommonModalBuilder;\n+import org.uberfire.ext.widgets.common.client.common.popups.BaseModal;\n+import org.uberfire.ext.widgets.common.client.common.popups.footers.ModalFooterOKCancelButtons;\n+import org.uberfire.workbench.events.NotificationEvent;\n+\n+@Templated\n+@Dependent\n+public class DataTransferExportPopUpView implements DataTransferExportPopUp.View {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DataTransferExportPopUpView.class);\n+\n+    private ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n+    private DataTransferExportPopUp presenter;\n+    private BaseModal modal;\n+    \n+    @Inject\n+    ToggleSwitch toggleSwitch;\n+    \n+    @Inject\n+    Elemental2DomUtil elem2Dom;\n+    \n+    @Inject\n+    @DataField \n+    HTMLDivElement toggleSwitchContainer;\n+\n+    @Inject\n+    @DataField\n+    HTMLTableElement datasetsTable;\n+\n+    @Inject\n+    @DataField\n+    HTMLTableElement pagesTable;\n+\n+    @Inject\n+    @DataField\n+    private HTMLDivElement dataTransferExportModalBody;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement searchDatasets;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement searchPages;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement selectAllDatasets;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement selectAllPages;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement progressIndicator;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement dataSelectionAccordion;\n+\n+    @Inject\n+    private Event<NotificationEvent> workbenchNotification;\n+\n+    @Inject\n+    DomFactory domFactory;\n+\n+    private DataTransferAssets assetsToExport;\n+\n+    @Override\n+    public HTMLElement getElement() {\n+        return dataTransferExportModalBody;\n+    }\n+\n+    @Override\n+    public void init(DataTransferExportPopUp presenter) {\n+        this.presenter = presenter;\n+        ModalFooter modalFooter = new ModalFooterOKCancelButtons(this::getSelectedAssets,\n+                                                                 () -> modal.hide());\n+        modal = new CommonModalBuilder().addHeader(i18n.dataTransferExportPopUpViewTitle())\n+                                        .addBody(dataTransferExportModalBody)\n+                                        .addFooter(modalFooter)\n+                                        .build();\n+\n+        selectAllPages.onclick = e -> {\n+            allInputsForTable(pagesTable).forEach(chk -> chk.checked = selectAllPages.checked);\n+            return null;\n+        };\n+\n+        selectAllDatasets.onclick = e -> {\n+            allInputsForTable(datasetsTable).forEach(chk -> chk.checked = selectAllDatasets.checked);\n+            return null;\n+        };\n+\n+        searchPages.onkeyup = e -> {\n+            filterTable(searchPages, pagesTable);\n+            return null;\n+        };\n+\n+        searchDatasets.onkeyup = e -> {\n+            filterTable(searchDatasets, datasetsTable);\n+            return null;\n+        };\n+        \n+        elem2Dom.appendWidgetToElement(toggleSwitchContainer, toggleSwitch);\n+\n+    }\n+\n+    @Override\n+    public void show() {\n+        modal.show();\n+        loading();\n+    }\n+\n+    @Override\n+    public void setAssetsToExport(DataTransferAssets assetsToExport) {\n+        this.assetsToExport = assetsToExport;\n+        finishedLoading();\n+    }\n+\n+    private void fillPagesTable() {\n+        HTMLElement pageBody = pagesTable.tBodies.getAt(0);\n+        pageBody.innerHTML = \"\";\n+        for (String page : this.assetsToExport.getPages()) {\n+            HTMLTableCellElement pageCell = domFactory.tableCell();\n+            HTMLTableCellElement selectCell = domFactory.tableCell();\n+            HTMLInputElement select = createCheckBox();\n+            select.onclick = verifyAllCheck(selectAllPages, pagesTable);\n+            select.id = page;\n+            selectCell.appendChild(select);\n+            pageCell.innerHTML = page;\n+\n+            HTMLTableRowElement pageRow = domFactory.tableRow();\n+            pageRow.appendChild(selectCell);\n+            pageRow.appendChild(pageCell);\n+            pageBody.appendChild(pageRow);\n+        }\n+    }\n+\n+    private void fillDataSetsTable() {\n+        HTMLElement datasetsBody = datasetsTable.tBodies.getAt(0);\n+        datasetsBody.innerHTML = \"\";\n+        for (DataSetDef dataSetDef : this.assetsToExport.getDatasetsDefinitions()) {\n+            HTMLInputElement select = createCheckBox();\n+            select.onclick = verifyAllCheck(selectAllDatasets, datasetsTable);\n+            HTMLTableCellElement dsSelectCell = domFactory.tableCell();\n+            select.id = dataSetDef.getUUID();\n+            dsSelectCell.appendChild(select);\n+            HTMLTableRowElement dsRow = domFactory.tableRow();\n+            dsRow.appendChild(dsSelectCell);\n+            Stream.of(dataSetDef.getUUID(),\n+                      dataSetDef.getName(),\n+                      dataSetDef.getProvider().getName())\n+                  .map(this::createCell).forEach(dsRow::appendChild);\n+            datasetsBody.appendChild(dsRow);\n+        }\n+\n+    }\n+\n+    private OnclickCallbackFn verifyAllCheck(HTMLInputElement parent, HTMLTableElement table) {\n+        return e -> {\n+            parent.checked = allInputsForTable(table).allMatch(input -> input.checked);\n+            return null;\n+        };\n+    }\n+\n+    public void getSelectedAssets() {\n+        modal.hide();\n+\n+        List<DataSetDef> datasets = getSelectedRows(datasetsTable, assetsToExport.getDatasetsDefinitions());\n+        List<String> pages = getSelectedRows(pagesTable, assetsToExport.getPages());\n+\n+        DataTransferExportModel exportModel = new DataTransferExportModel(datasets,\n+                                                                          pages,\n+                                                                          toggleSwitch.getValue());\n+        presenter.receiveSelectedAssets(exportModel);\n+\n+    }\n+\n+    private HTMLInputElement createCheckBox() {\n+        HTMLInputElement checkbox = domFactory.input();\n+        checkbox.type = \"checkbox\";\n+        checkbox.checked = true;\n+        return checkbox;\n+    }\n+\n+    private HTMLTableCellElement createCell(String content) {\n+        HTMLTableCellElement cell = domFactory.tableCell();\n+        cell.innerHTML = content;\n+        return cell;\n+    }\n+\n+    private Stream<HTMLInputElement> allInputsForTable(HTMLTableElement table) {\n+        // asArray throws cast exception\n+        NodeList<Element> items = table.querySelectorAll(\"tbody > tr > td:first-of-type > input[type=checkbox]\");\n+        return IntStream.range(0, items.getLength()).mapToObj(i -> (HTMLInputElement) items.getAt(i));\n+    }\n+\n+    protected void filterTable(HTMLInputElement filter, HTMLTableElement table) {\n+        String query = filter.value.trim().toLowerCase();\n+        HTMLCollection<HTMLTableRowElement> rows = table.tBodies.getAt(0).rows;\n+        IntStream.range(0, rows.getLength()).mapToObj(rows::getAt).forEach(row -> {\n+            row.hidden = false;\n+            if (!query.isEmpty()) {\n+                row.hidden = IntStream.range(0, row.cells.getLength())\n+                                      .mapToObj(row.cells::getAt)\n+                                      .noneMatch(c -> c.textContent.toLowerCase().contains(query));\n+            }\n+\n+        });\n+\n+    }\n+\n+    private <T> List<T> getSelectedRows(HTMLTableElement table, List<T> list) {\n+        HTMLCollection<HTMLTableRowElement> rows = table.tBodies.getAt(0).rows;\n+        return IntStream.range(0, rows.getLength())\n+                        .filter(i -> {\n+                            Element checkBox = rows.getAt(i).querySelector(\"td > input[type=checkbox]\");\n+                            return ((HTMLInputElement) checkBox).checked;\n+                        }).mapToObj(list::get)\n+                        .collect(Collectors.toList());\n+    }\n+\n+    private void loading() {\n+        progressIndicator.hidden = false;\n+        dataSelectionAccordion.hidden = true;\n+    }\n+\n+    private void finishedLoading() {\n+        progressIndicator.hidden = true;\n+        dataSelectionAccordion.hidden = false;\n+        selectAllDatasets.checked = true;\n+        selectAllPages.checked = true;\n+        fillDataSetsTable();\n+        fillPagesTable();\n+    }\n+\n+    @Override\n+    public void showError(Throwable error) {\n+        String dataTransferExportError = i18n.dataTransferExportError();\n+        LOGGER.error(dataTransferExportError, error);\n+        NotificationEvent errorEvent = new NotificationEvent(dataTransferExportError,\n+                                                             NotificationEvent.NotificationType.ERROR);\n+        workbenchNotification.fire(errorEvent);\n+        modal.hide();\n+    }\n+\n+}\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java\ndeleted file mode 100644\nindex 786cacf28..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferExportPopUpView.java\n+++ /dev/null\n", "chunk": "@@ -1,297 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-import java.util.stream.Stream;\n-\n-import javax.enterprise.context.Dependent;\n-import javax.enterprise.event.Event;\n-import javax.inject.Inject;\n-\n-import elemental2.dom.Element;\n-import elemental2.dom.Element.OnclickCallbackFn;\n-import elemental2.dom.HTMLCollection;\n-import elemental2.dom.HTMLDivElement;\n-import elemental2.dom.HTMLElement;\n-import elemental2.dom.HTMLInputElement;\n-import elemental2.dom.HTMLTableCellElement;\n-import elemental2.dom.HTMLTableElement;\n-import elemental2.dom.HTMLTableRowElement;\n-import elemental2.dom.NodeList;\n-import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n-import org.dashbuilder.client.cms.screen.util.DomFactory;\n-import org.dashbuilder.dataset.def.DataSetDef;\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.gwtbootstrap3.client.ui.ModalFooter;\n-import org.gwtbootstrap3.extras.toggleswitch.client.ui.ToggleSwitch;\n-import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n-import org.jboss.errai.ui.shared.api.annotations.DataField;\n-import org.jboss.errai.ui.shared.api.annotations.Templated;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.uberfire.ext.editor.commons.client.file.popups.CommonModalBuilder;\n-import org.uberfire.ext.widgets.common.client.common.popups.BaseModal;\n-import org.uberfire.ext.widgets.common.client.common.popups.footers.ModalFooterOKCancelButtons;\n-import org.uberfire.workbench.events.NotificationEvent;\n-\n-@Templated\n-@Dependent\n-public class DataTransferExportPopUpView implements DataTransferExportPopUp.View {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DataTransferExportPopUpView.class);\n-\n-    private ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n-    private DataTransferExportPopUp presenter;\n-    private BaseModal modal;\n-    \n-    @Inject\n-    ToggleSwitch toggleSwitch;\n-    \n-    @Inject\n-    Elemental2DomUtil elem2Dom;\n-    \n-    @Inject\n-    @DataField \n-    HTMLDivElement toggleSwitchContainer;\n-\n-    @Inject\n-    @DataField\n-    HTMLTableElement datasetsTable;\n-\n-    @Inject\n-    @DataField\n-    HTMLTableElement pagesTable;\n-\n-    @Inject\n-    @DataField\n-    private HTMLDivElement dataTransferExportModalBody;\n-\n-    @Inject\n-    @DataField\n-    HTMLInputElement searchDatasets;\n-\n-    @Inject\n-    @DataField\n-    HTMLInputElement searchPages;\n-\n-    @Inject\n-    @DataField\n-    HTMLInputElement selectAllDatasets;\n-\n-    @Inject\n-    @DataField\n-    HTMLInputElement selectAllPages;\n-\n-    @Inject\n-    @DataField\n-    HTMLDivElement progressIndicator;\n-\n-    @Inject\n-    @DataField\n-    HTMLDivElement dataSelectionAccordion;\n-\n-    @Inject\n-    private Event<NotificationEvent> workbenchNotification;\n-\n-    @Inject\n-    DomFactory domFactory;\n-\n-    private DataTransferAssets assetsToExport;\n-\n-    @Override\n-    public HTMLElement getElement() {\n-        return dataTransferExportModalBody;\n-    }\n-\n-    @Override\n-    public void init(DataTransferExportPopUp presenter) {\n-        this.presenter = presenter;\n-        ModalFooter modalFooter = new ModalFooterOKCancelButtons(this::getSelectedAssets,\n-                                                                 () -> modal.hide());\n-        modal = new CommonModalBuilder().addHeader(i18n.dataTransferExportPopUpViewTitle())\n-                                        .addBody(dataTransferExportModalBody)\n-                                        .addFooter(modalFooter)\n-                                        .build();\n-\n-        selectAllPages.onclick = e -> {\n-            allInputsForTable(pagesTable).forEach(chk -> chk.checked = selectAllPages.checked);\n-            return null;\n-        };\n-\n-        selectAllDatasets.onclick = e -> {\n-            allInputsForTable(datasetsTable).forEach(chk -> chk.checked = selectAllDatasets.checked);\n-            return null;\n-        };\n-\n-        searchPages.onkeyup = e -> {\n-            filterTable(searchPages, pagesTable);\n-            return null;\n-        };\n-\n-        searchDatasets.onkeyup = e -> {\n-            filterTable(searchDatasets, datasetsTable);\n-            return null;\n-        };\n-        \n-        elem2Dom.appendWidgetToElement(toggleSwitchContainer, toggleSwitch);\n-\n-    }\n-\n-    @Override\n-    public void show() {\n-        modal.show();\n-        loading();\n-    }\n-\n-    @Override\n-    public void setAssetsToExport(DataTransferAssets assetsToExport) {\n-        this.assetsToExport = assetsToExport;\n-        finishedLoading();\n-    }\n-\n-    private void fillPagesTable() {\n-        HTMLElement pageBody = pagesTable.tBodies.getAt(0);\n-        pageBody.innerHTML = \"\";\n-        for (String page : this.assetsToExport.getPages()) {\n-            HTMLTableCellElement pageCell = domFactory.tableCell();\n-            HTMLTableCellElement selectCell = domFactory.tableCell();\n-            HTMLInputElement select = createCheckBox();\n-            select.onclick = verifyAllCheck(selectAllPages, pagesTable);\n-            select.id = page;\n-            selectCell.appendChild(select);\n-            pageCell.innerHTML = page;\n-\n-            HTMLTableRowElement pageRow = domFactory.tableRow();\n-            pageRow.appendChild(selectCell);\n-            pageRow.appendChild(pageCell);\n-            pageBody.appendChild(pageRow);\n-        }\n-    }\n-\n-    private void fillDataSetsTable() {\n-        HTMLElement datasetsBody = datasetsTable.tBodies.getAt(0);\n-        datasetsBody.innerHTML = \"\";\n-        for (DataSetDef dataSetDef : this.assetsToExport.getDatasetsDefinitions()) {\n-            HTMLInputElement select = createCheckBox();\n-            select.onclick = verifyAllCheck(selectAllDatasets, datasetsTable);\n-            HTMLTableCellElement dsSelectCell = domFactory.tableCell();\n-            select.id = dataSetDef.getUUID();\n-            dsSelectCell.appendChild(select);\n-            HTMLTableRowElement dsRow = domFactory.tableRow();\n-            dsRow.appendChild(dsSelectCell);\n-            Stream.of(dataSetDef.getUUID(),\n-                      dataSetDef.getName(),\n-                      dataSetDef.getProvider().getName())\n-                  .map(this::createCell).forEach(dsRow::appendChild);\n-            datasetsBody.appendChild(dsRow);\n-        }\n-\n-    }\n-\n-    private OnclickCallbackFn verifyAllCheck(HTMLInputElement parent, HTMLTableElement table) {\n-        return e -> {\n-            parent.checked = allInputsForTable(table).allMatch(input -> input.checked);\n-            return null;\n-        };\n-    }\n-\n-    public void getSelectedAssets() {\n-        modal.hide();\n-\n-        List<DataSetDef> datasets = getSelectedRows(datasetsTable, assetsToExport.getDatasetsDefinitions());\n-        List<String> pages = getSelectedRows(pagesTable, assetsToExport.getPages());\n-\n-        DataTransferExportModel exportModel = new DataTransferExportModel(datasets,\n-                                                                          pages,\n-                                                                          toggleSwitch.getValue());\n-        presenter.receiveSelectedAssets(exportModel);\n-\n-    }\n-\n-    private HTMLInputElement createCheckBox() {\n-        HTMLInputElement checkbox = domFactory.input();\n-        checkbox.type = \"checkbox\";\n-        checkbox.checked = true;\n-        return checkbox;\n-    }\n-\n-    private HTMLTableCellElement createCell(String content) {\n-        HTMLTableCellElement cell = domFactory.tableCell();\n-        cell.innerHTML = content;\n-        return cell;\n-    }\n-\n-    private Stream<HTMLInputElement> allInputsForTable(HTMLTableElement table) {\n-        // asArray throws cast exception\n-        NodeList<Element> items = table.querySelectorAll(\"tbody > tr > td:first-of-type > input[type=checkbox]\");\n-        return IntStream.range(0, items.getLength()).mapToObj(i -> (HTMLInputElement) items.getAt(i));\n-    }\n-\n-    protected void filterTable(HTMLInputElement filter, HTMLTableElement table) {\n-        String query = filter.value.trim().toLowerCase();\n-        HTMLCollection<HTMLTableRowElement> rows = table.tBodies.getAt(0).rows;\n-        IntStream.range(0, rows.getLength()).mapToObj(rows::getAt).forEach(row -> {\n-            row.hidden = false;\n-            if (!query.isEmpty()) {\n-                row.hidden = IntStream.range(0, row.cells.getLength())\n-                                      .mapToObj(row.cells::getAt)\n-                                      .noneMatch(c -> c.textContent.toLowerCase().contains(query));\n-            }\n-\n-        });\n-\n-    }\n-\n-    private <T> List<T> getSelectedRows(HTMLTableElement table, List<T> list) {\n-        HTMLCollection<HTMLTableRowElement> rows = table.tBodies.getAt(0).rows;\n-        return IntStream.range(0, rows.getLength())\n-                        .filter(i -> {\n-                            Element checkBox = rows.getAt(i).querySelector(\"td > input[type=checkbox]\");\n-                            return ((HTMLInputElement) checkBox).checked;\n-                        }).mapToObj(list::get)\n-                        .collect(Collectors.toList());\n-    }\n-\n-    private void loading() {\n-        progressIndicator.hidden = false;\n-        dataSelectionAccordion.hidden = true;\n-    }\n-\n-    private void finishedLoading() {\n-        progressIndicator.hidden = true;\n-        dataSelectionAccordion.hidden = false;\n-        selectAllDatasets.checked = true;\n-        selectAllPages.checked = true;\n-        fillDataSetsTable();\n-        fillPagesTable();\n-    }\n-\n-    @Override\n-    public void showError(Throwable error) {\n-        String dataTransferExportError = i18n.dataTransferExportError();\n-        LOGGER.error(dataTransferExportError, error);\n-        NotificationEvent errorEvent = new NotificationEvent(dataTransferExportError,\n-                                                             NotificationEvent.NotificationType.ERROR);\n-        workbenchNotification.fire(errorEvent);\n-        modal.hide();\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk1Mjk2MQ==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402952961", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated method stub", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> TODO Auto-generated method stub</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "caponetto", "createdAt": "2020-04-03T11:57:04Z", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java", "diffHunk": "@@ -181,19 +198,39 @@ public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {\n             }\n         });\n \n-        ioService.deleteIfExists(\n-                root.resolve(expectedPath));\n+        ioService.deleteIfExists(root.resolve(expectedPath));\n \n         return imported;\n     }\n \n-    private List<String> importFiles(Path path) throws Exception  {\n-        String tempPath = new StringBuilder()\n-            .append(System.getProperty(\"java.io.tmpdir\"))\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .toString();\n+    @Override\n+    public DataTransferAssets assetsToExport() {\n+        List<String> pages = listPaths(perspectivesFS,\n+                                       p -> p.endsWith(FILE_EXT)).stream()\n+                                                                 .map(p -> p.getName(p.getNameCount() - 2))\n+                                                                 .map(Object::toString)\n+                                                                 .collect(Collectors.toList());\n+\n+        List<DataSetDef> datasetsDefs = listPaths(datasetsFS,\n+                                                  p -> p.endsWith(DATASET_EXT)).stream()\n+                                                                               .map(this::getFileContent)\n+                                                                               .map(this::parseDataSetDefinition)\n+                                                                               .collect(Collectors.toList());\n+        return new DataTransferAssets(datasetsDefs, pages);\n+    }\n+\n+    @Override\n+    public Map<String, String> validateExport(DataTransferExportModel exportsModel) {\n+        // TODO Auto-generated method stub", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex e9767bb50..8f0ea1027 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -215,18 +215,13 @@ public class DataTransferServicesImpl implements DataTransferServices {\n                                                   p -> p.endsWith(DATASET_EXT)).stream()\n                                                                                .map(this::getFileContent)\n                                                                                .map(this::parseDataSetDefinition)\n+                                                                               .filter(DataSetDef::isPublic)\n                                                                                .collect(Collectors.toList());\n         return new DataTransferAssets(datasetsDefs, pages);\n     }\n \n-    @Override\n-    public Map<String, String> validateExport(DataTransferExportModel exportsModel) {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n     private List<String> importFiles(Path path) throws Exception {\n-        String tempPath = new StringBuilder().append(System.getProperty(\"java.io.tmpdir\"))\n+        String tempPath = new StringBuilder().append(TMP_DIR)\n                                              .append(File.separator)\n                                              .append(FILE_PATH)\n                                              .append(File.separator)\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 8f0ea1027..450ef58a8 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -198,34 +181,25 @@ public class DataTransferServicesImpl implements DataTransferServices {\n             }\n         });\n \n-        ioService.deleteIfExists(root.resolve(expectedPath));\n+        ioService.deleteIfExists(\n+                root.resolve(expectedPath));\n \n         return imported;\n     }\n \n-    @Override\n-    public DataTransferAssets assetsToExport() {\n-        List<String> pages = listPaths(perspectivesFS,\n-                                       p -> p.endsWith(FILE_EXT)).stream()\n-                                                                 .map(p -> p.getName(p.getNameCount() - 2))\n-                                                                 .map(Object::toString)\n-                                                                 .collect(Collectors.toList());\n-\n-        List<DataSetDef> datasetsDefs = listPaths(datasetsFS,\n-                                                  p -> p.endsWith(DATASET_EXT)).stream()\n-                                                                               .map(this::getFileContent)\n-                                                                               .map(this::parseDataSetDefinition)\n-                                                                               .filter(DataSetDef::isPublic)\n-                                                                               .collect(Collectors.toList());\n-        return new DataTransferAssets(datasetsDefs, pages);\n-    }\n+    private List<String> importFiles(Path path) throws Exception  {\n+\n+        String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+        if (tmpDir.lastIndexOf('/') == tmpDir.length() - 1) {\n+            tmpDir = tmpDir.substring(0, tmpDir.length() - 1);\n+        }\n \n-    private List<String> importFiles(Path path) throws Exception {\n-        String tempPath = new StringBuilder().append(TMP_DIR)\n-                                             .append(File.separator)\n-                                             .append(FILE_PATH)\n-                                             .append(File.separator)\n-                                             .toString();\n+        String tempPath = new StringBuilder()\n+            .append(tmpDir)\n+            .append(File.separator)\n+            .append(FILE_PATH)\n+            .append(File.separator)\n+            .toString();\n \n         List<String> imported = new ArrayList<>();\n         File destDir = new File(tempPath);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk1MzQ4Nw==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402953487", "body": "Double-checking: is it ok to return `null` here?", "bodyText": "Double-checking: is it ok to return null here?", "bodyHTML": "<p dir=\"auto\">Double-checking: is it ok to return <code>null</code> here?</p>", "author": "caponetto", "createdAt": "2020-04-03T11:58:16Z", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java", "diffHunk": "@@ -181,19 +198,39 @@ public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {\n             }\n         });\n \n-        ioService.deleteIfExists(\n-                root.resolve(expectedPath));\n+        ioService.deleteIfExists(root.resolve(expectedPath));\n \n         return imported;\n     }\n \n-    private List<String> importFiles(Path path) throws Exception  {\n-        String tempPath = new StringBuilder()\n-            .append(System.getProperty(\"java.io.tmpdir\"))\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .toString();\n+    @Override\n+    public DataTransferAssets assetsToExport() {\n+        List<String> pages = listPaths(perspectivesFS,\n+                                       p -> p.endsWith(FILE_EXT)).stream()\n+                                                                 .map(p -> p.getName(p.getNameCount() - 2))\n+                                                                 .map(Object::toString)\n+                                                                 .collect(Collectors.toList());\n+\n+        List<DataSetDef> datasetsDefs = listPaths(datasetsFS,\n+                                                  p -> p.endsWith(DATASET_EXT)).stream()\n+                                                                               .map(this::getFileContent)\n+                                                                               .map(this::parseDataSetDefinition)\n+                                                                               .collect(Collectors.toList());\n+        return new DataTransferAssets(datasetsDefs, pages);\n+    }\n+\n+    @Override\n+    public Map<String, String> validateExport(DataTransferExportModel exportsModel) {\n+        // TODO Auto-generated method stub\n+        return null;", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMzYwMA==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r409933600", "bodyText": "This method was removed, I would try to send this PR implementing two JIRAs, but it would be too much work for a PR review, but I forgot to remove this method.", "author": "jesuino", "createdAt": "2020-04-17T01:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk1MzQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex e9767bb50..8f0ea1027 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -215,18 +215,13 @@ public class DataTransferServicesImpl implements DataTransferServices {\n                                                   p -> p.endsWith(DATASET_EXT)).stream()\n                                                                                .map(this::getFileContent)\n                                                                                .map(this::parseDataSetDefinition)\n+                                                                               .filter(DataSetDef::isPublic)\n                                                                                .collect(Collectors.toList());\n         return new DataTransferAssets(datasetsDefs, pages);\n     }\n \n-    @Override\n-    public Map<String, String> validateExport(DataTransferExportModel exportsModel) {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n     private List<String> importFiles(Path path) throws Exception {\n-        String tempPath = new StringBuilder().append(System.getProperty(\"java.io.tmpdir\"))\n+        String tempPath = new StringBuilder().append(TMP_DIR)\n                                              .append(File.separator)\n                                              .append(FILE_PATH)\n                                              .append(File.separator)\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 8f0ea1027..450ef58a8 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -198,34 +181,25 @@ public class DataTransferServicesImpl implements DataTransferServices {\n             }\n         });\n \n-        ioService.deleteIfExists(root.resolve(expectedPath));\n+        ioService.deleteIfExists(\n+                root.resolve(expectedPath));\n \n         return imported;\n     }\n \n-    @Override\n-    public DataTransferAssets assetsToExport() {\n-        List<String> pages = listPaths(perspectivesFS,\n-                                       p -> p.endsWith(FILE_EXT)).stream()\n-                                                                 .map(p -> p.getName(p.getNameCount() - 2))\n-                                                                 .map(Object::toString)\n-                                                                 .collect(Collectors.toList());\n-\n-        List<DataSetDef> datasetsDefs = listPaths(datasetsFS,\n-                                                  p -> p.endsWith(DATASET_EXT)).stream()\n-                                                                               .map(this::getFileContent)\n-                                                                               .map(this::parseDataSetDefinition)\n-                                                                               .filter(DataSetDef::isPublic)\n-                                                                               .collect(Collectors.toList());\n-        return new DataTransferAssets(datasetsDefs, pages);\n-    }\n+    private List<String> importFiles(Path path) throws Exception  {\n+\n+        String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+        if (tmpDir.lastIndexOf('/') == tmpDir.length() - 1) {\n+            tmpDir = tmpDir.substring(0, tmpDir.length() - 1);\n+        }\n \n-    private List<String> importFiles(Path path) throws Exception {\n-        String tempPath = new StringBuilder().append(TMP_DIR)\n-                                             .append(File.separator)\n-                                             .append(FILE_PATH)\n-                                             .append(File.separator)\n-                                             .toString();\n+        String tempPath = new StringBuilder()\n+            .append(tmpDir)\n+            .append(File.separator)\n+            .append(FILE_PATH)\n+            .append(File.separator)\n+            .toString();\n \n         List<String> imported = new ArrayList<>();\n         File destDir = new File(tempPath);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk1NTcyNA==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402955724", "body": "Consider extracting `System.getProperty(\"java.io.tmpdir\")` to a constant. \r\nI see it being used more than once on this class.", "bodyText": "Consider extracting System.getProperty(\"java.io.tmpdir\") to a constant.\nI see it being used more than once on this class.", "bodyHTML": "<p dir=\"auto\">Consider extracting <code>System.getProperty(\"java.io.tmpdir\")</code> to a constant.<br>\nI see it being used more than once on this class.</p>", "author": "caponetto", "createdAt": "2020-04-03T12:02:44Z", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java", "diffHunk": "@@ -108,22 +114,37 @@ public DataTransferServicesImpl(\n     }\n \n     @Override\n-    public String doExport() throws java.io.IOException {\n-        String zipLocation = new StringBuilder()\n-            .append(System.getProperty(\"java.io.tmpdir\"))\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .append(EXPORT_FILE_NAME)\n-            .toString();\n+    public String doExport(DataTransferExportModel exportModel) throws java.io.IOException {\n+        String zipLocation = new StringBuilder().append(System.getProperty(\"java.io.tmpdir\"))", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10be9a94d516455fa2a51da0cff46e83a164d80f", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex e9767bb50..8f0ea1027 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -115,7 +115,7 @@ public class DataTransferServicesImpl implements DataTransferServices {\n \n     @Override\n     public String doExport(DataTransferExportModel exportModel) throws java.io.IOException {\n-        String zipLocation = new StringBuilder().append(System.getProperty(\"java.io.tmpdir\"))\n+        String zipLocation = new StringBuilder().append(TMP_DIR)\n                                                 .append(File.separator)\n                                                 .append(FILE_PATH)\n                                                 .append(File.separator)\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 8f0ea1027..450ef58a8 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -114,37 +108,22 @@ public class DataTransferServicesImpl implements DataTransferServices {\n     }\n \n     @Override\n-    public String doExport(DataTransferExportModel exportModel) throws java.io.IOException {\n-        String zipLocation = new StringBuilder().append(TMP_DIR)\n-                                                .append(File.separator)\n-                                                .append(FILE_PATH)\n-                                                .append(File.separator)\n-                                                .append(EXPORT_FILE_NAME)\n-                                                .toString();\n-\n-        Predicate<Path> readmeFilter = p -> p.toString().toLowerCase().endsWith(\"readme.md\");\n-        Predicate<Path> datasetsFilter = def -> true;\n-        Predicate<Path> pagesFilter = page -> true;\n-        boolean exportNavigation = true;\n-\n-        if (!exportModel.isExportAll()) {\n-            datasetsFilter = filterDatasets(exportModel.getDatasetDefinitions());\n-            pagesFilter = filterPages(exportModel.getPages());\n-            exportNavigation = exportModel.isExportNavigation();\n-        }\n+    public String doExport() throws java.io.IOException {\n+        String zipLocation = new StringBuilder()\n+            .append(System.getProperty(\"java.io.tmpdir\"))\n+            .append(File.separator)\n+            .append(FILE_PATH)\n+            .append(File.separator)\n+            .append(EXPORT_FILE_NAME)\n+            .toString();\n \n         new File(zipLocation).getParentFile().mkdirs();\n         FileOutputStream fos = new FileOutputStream(zipLocation);\n         ZipOutputStream zos = new ZipOutputStream(fos);\n \n-        zipFileSystem(datasetsFS, zos, readmeFilter.or(datasetsFilter));\n-        zipFileSystem(perspectivesFS, zos, readmeFilter.or(pagesFilter));\n-\n-        if (exportNavigation) {\n-            zipFileSystem(navigationFS, zos, p -> true);\n-        } else {\n-            zipFileSystem(navigationFS, zos, readmeFilter);\n-        }\n+        zipFileSystem(datasetsFS, zos);\n+        zipFileSystem(perspectivesFS, zos);\n+        zipFileSystem(navigationFS, zos);\n \n         zipFile(createVersionFile(), \"VERSION\", zos);\n \n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 450ef58a8..d386108f3 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -108,22 +113,37 @@ public class DataTransferServicesImpl implements DataTransferServices {\n     }\n \n     @Override\n-    public String doExport() throws java.io.IOException {\n-        String zipLocation = new StringBuilder()\n-            .append(System.getProperty(\"java.io.tmpdir\"))\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .append(EXPORT_FILE_NAME)\n-            .toString();\n+    public String doExport(DataTransferExportModel exportModel) throws java.io.IOException {\n+        String zipLocation = new StringBuilder().append(System.getProperty(\"java.io.tmpdir\"))\n+                                                .append(File.separator)\n+                                                .append(FILE_PATH)\n+                                                .append(File.separator)\n+                                                .append(EXPORT_FILE_NAME)\n+                                                .toString();\n+\n+        Predicate<Path> readmeFilter = p -> p.toString().toLowerCase().endsWith(\"readme.md\");\n+        Predicate<Path> datasetsFilter = def -> true;\n+        Predicate<Path> pagesFilter = page -> true;\n+        boolean exportNavigation = true;\n+\n+        if (!exportModel.isExportAll()) {\n+            datasetsFilter = filterDatasets(exportModel.getDatasetDefinitions());\n+            pagesFilter = filterPages(exportModel.getPages());\n+            exportNavigation = exportModel.isExportNavigation();\n+        }\n \n         new File(zipLocation).getParentFile().mkdirs();\n         FileOutputStream fos = new FileOutputStream(zipLocation);\n         ZipOutputStream zos = new ZipOutputStream(fos);\n \n-        zipFileSystem(datasetsFS, zos);\n-        zipFileSystem(perspectivesFS, zos);\n-        zipFileSystem(navigationFS, zos);\n+        zipFileSystem(datasetsFS, zos, readmeFilter.or(datasetsFilter));\n+        zipFileSystem(perspectivesFS, zos, readmeFilter.or(pagesFilter));\n+\n+        if (exportNavigation) {\n+            zipFileSystem(navigationFS, zos, p -> true);\n+        } else {\n+            zipFileSystem(navigationFS, zos, readmeFilter);\n+        }\n \n         zipFile(createVersionFile(), \"VERSION\", zos);\n \n", "next_change": null}, {"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 450ef58a8..d386108f3 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -132,38 +152,34 @@ public class DataTransferServicesImpl implements DataTransferServices {\n \n         moveZipToFileSystem(zipLocation, systemFS);\n \n-        return new StringBuilder()\n-            .append(SpacesAPI.Scheme.DEFAULT)\n-            .append(\"://\")\n-            .append(systemFS.getName())\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .append(EXPORT_FILE_NAME)\n-            .toString();\n+        return new StringBuilder().append(SpacesAPI.Scheme.GIT)\n+                                  .append(\"://\")\n+                                  .append(systemFS.getName())\n+                                  .append(File.separator)\n+                                  .append(FILE_PATH)\n+                                  .append(File.separator)\n+                                  .append(EXPORT_FILE_NAME)\n+                                  .toString();\n     }\n \n     @Override\n     public List<String> doImport() throws Exception {\n         List<String> imported = new ArrayList<>();\n \n-        Path root = Paths.get(\n-            URI.create(\n-                new StringBuilder()\n-                    .append(SpacesAPI.Scheme.DEFAULT)\n-                    .append(\"://\")\n-                    .append(systemFS.getName())\n-                    .append(File.separator)\n-                    .toString()));\n+        Path root = Paths.get(URI.create(new StringBuilder().append(SpacesAPI.Scheme.GIT)\n+                                                            .append(\"://\")\n+                                                            .append(systemFS.getName())\n+                                                            .append(File.separator)\n+                                                            .toString()));\n \n-        String expectedPath = new StringBuilder()\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .append(IMPORT_FILE_NAME)\n-            .toString();\n+        String expectedPath = new StringBuilder().append(File.separator)\n+                                                 .append(FILE_PATH)\n+                                                 .append(File.separator)\n+                                                 .append(IMPORT_FILE_NAME)\n+                                                 .toString();\n \n         Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+\n             @Override\n             public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {\n                 if (!path.toString().equalsIgnoreCase(expectedPath)) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk1Nzk2Ng==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r402957966", "body": "Consider using `DirectoryStream` here.", "bodyText": "Consider using DirectoryStream here.", "bodyHTML": "<p dir=\"auto\">Consider using <code>DirectoryStream</code> here.</p>", "author": "caponetto", "createdAt": "2020-04-03T12:06:44Z", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java", "diffHunk": "@@ -384,4 +415,70 @@ private File createVersionFile() throws java.io.IOException {\n \n         return version;\n     }\n+\n+    private List<Path> listPaths(FileSystem fs, Predicate<String> pathTester) {\n+        List<Path> files = new ArrayList<>();\n+        Path root = fs.getRootDirectories().iterator().next();\n+        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+\n+            @Override\n+            public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {\n+                try {\n+                    if (pathTester.test(path.toString())) {\n+                        files.add(path);\n+                    }\n+                    return FileVisitResult.CONTINUE;\n+\n+                } catch (Exception e) {\n+                    LOGGER.error(e.getMessage(), e);\n+                    return FileVisitResult.TERMINATE;\n+                }\n+            }\n+        });", "originalCommit": "a74b4a7f646b14ef763d402579c8e86d10cbb7a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyNDkyMw==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r409924923", "bodyText": "I tried using it, The code was clearer:\n        final Filter<Path> dirTest = p -> {\n            return pathTester.test(p.toString());\n        };\n        try (DirectoryStream<Path> dirStream = Files.newDirectoryStream(root, dirTest)) {\n            dirStream.forEach(files::add);\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Error walking directory\", e);\n        }\n\nbut for some reason it was not going through some paths, specifically pages paths (plugin_content) hence it was not correctly helping me to filter the assets I wanted, so I went back to Files.walk", "author": "jesuino", "createdAt": "2020-04-17T00:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk1Nzk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex e9767bb50..450ef58a8 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -415,70 +390,4 @@ public class DataTransferServicesImpl implements DataTransferServices {\n \n         return version;\n     }\n-\n-    private List<Path> listPaths(FileSystem fs, Predicate<String> pathTester) {\n-        List<Path> files = new ArrayList<>();\n-        Path root = fs.getRootDirectories().iterator().next();\n-        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-            @Override\n-            public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {\n-                try {\n-                    if (pathTester.test(path.toString())) {\n-                        files.add(path);\n-                    }\n-                    return FileVisitResult.CONTINUE;\n-\n-                } catch (Exception e) {\n-                    LOGGER.error(e.getMessage(), e);\n-                    return FileVisitResult.TERMINATE;\n-                }\n-            }\n-        });\n-        return files;\n-    }\n-\n-    private String getFileContent(Path path) {\n-        return Files.readAllLines(path, StandardCharsets.UTF_8).stream().collect(Collectors.joining());\n-    }\n-\n-    private DataSetDef parseDataSetDefinition(String defJson) {\n-        try {\n-            return dataSetDefRegistryCDI.getDataSetDefJsonMarshaller().fromJson(defJson);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Error parsing dataset definition\", e);\n-            LOGGER.debug(\"Json Definition: {}\", defJson);\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n-    private Predicate<Path> filterPages(List<String> pages) {\n-        return page -> {\n-            if (pages.isEmpty()) {\n-                return false;\n-            }\n-            int nameCount = page.getNameCount();\n-            if (nameCount > 1) {\n-                return pages.stream()\n-                            .anyMatch(p -> page.getName(nameCount - 2).toString().equals(p));\n-            }\n-            return false;\n-        };\n-    }\n-    \n-    private Predicate<Path> filterDatasets(List<DataSetDef> datasets) {\n-        return dsPath -> {\n-            if (datasets.isEmpty()) {\n-                return false;\n-            }\n-            int nameCount = dsPath.getNameCount();\n-            if (nameCount > 1) {\n-                String fileName = dsPath.getName(nameCount - 1)\n-                                        .toString()\n-                                        .split(\"\\\\.\")[0];\n-                return datasets.stream().anyMatch(ds -> ds.getUUID().equals(fileName));\n-            }\n-            return false;\n-        };\n-    }\n }\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 450ef58a8..d386108f3 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -390,4 +420,71 @@ public class DataTransferServicesImpl implements DataTransferServices {\n \n         return version;\n     }\n+\n+    private List<Path> listPaths(FileSystem fs, Predicate<String> pathTester) {\n+        List<Path> files = new ArrayList<>();\n+        Path root = fs.getRootDirectories().iterator().next();\n+        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+\n+            @Override\n+            public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {\n+                try {\n+                    if (pathTester.test(path.toString())) {\n+                        files.add(path);\n+                    }\n+                    return FileVisitResult.CONTINUE;\n+\n+                } catch (Exception e) {\n+                    LOGGER.error(e.getMessage(), e);\n+                    return FileVisitResult.TERMINATE;\n+                }\n+            }\n+        });\n+        return files;\n+    }\n+\n+    private String getFileContent(Path path) {\n+        return Files.readAllLines(path, StandardCharsets.UTF_8).stream().collect(Collectors.joining());\n+    }\n+\n+    private DataSetDef parseDataSetDefinition(String defJson) {\n+        try {\n+            return dataSetDefRegistryCDI.getDataSetDefJsonMarshaller().fromJson(defJson);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Error parsing dataset definition\", e);\n+            LOGGER.debug(\"Json Definition: {}\", defJson);\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    private Predicate<Path> filterPages(List<String> pages) {\n+        return page -> {\n+            if (pages.isEmpty()) {\n+                return false;\n+            }\n+            int nameCount = page.getNameCount();\n+            if (nameCount > 1) {\n+                return pages.stream()\n+                            .anyMatch(p -> page.getName(nameCount - 2).toString().equals(p));\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private Predicate<Path> filterDatasets(List<DataSetDef> datasets) {\n+        return dsPath -> {\n+            if (datasets.isEmpty()) {\n+                return false;\n+            }\n+            int nameCount = dsPath.getNameCount();\n+            if (nameCount > 1) {\n+                String fileName = dsPath.getName(nameCount - 1)\n+                                        .toString()\n+                                        .split(\"\\\\.\")[0];\n+                return datasets.stream()\n+                               .anyMatch(ds -> ds.getUUID().equals(fileName));\n+            }\n+            return false;\n+        };\n+    }\n }\n", "next_change": null}]}}]}}, {"oid": "10be9a94d516455fa2a51da0cff46e83a164d80f", "url": "https://github.com/kiegroup/appformer/commit/10be9a94d516455fa2a51da0cff46e83a164d80f", "message": "Changing from PopUp to Wizard", "committedDate": "2020-04-20T20:25:17Z", "type": "forcePushed"}, {"oid": "d69d8664df26eb75dd81da41958168b149dde09d", "url": "https://github.com/kiegroup/appformer/commit/d69d8664df26eb75dd81da41958168b149dde09d", "message": "Changing from PopUp to Wizard", "committedDate": "2020-04-20T20:45:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0NDEyNw==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413744127", "body": "I think it won't work for other languages, like Japanese.", "bodyText": "I think it won't work for other languages, like Japanese.", "bodyHTML": "<p dir=\"auto\">I think it won't work for other languages, like Japanese.</p>", "author": "caponetto", "createdAt": "2020-04-23T11:42:05Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import elemental2.dom.HTMLAnchorElement;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import elemental2.dom.HTMLHeadingElement;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.EventHandler;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Templated\n+@ApplicationScoped\n+public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View {\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement exportWizardSummary;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"span\")\n+    HTMLElement datasetsInformation;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"span\")\n+    HTMLElement pagesInformation;\n+\n+    @Inject\n+    @DataField\n+    HTMLAnchorElement datasetsInfoAnchor;\n+\n+    @Inject\n+    @DataField\n+    HTMLAnchorElement pagesInfoAnchor;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement downloadExport;\n+    \n+    @Inject\n+    @DataField\n+    @Named(\"h1\")\n+    HTMLHeadingElement exportHeading;\n+    \n+    private ExportSummaryWizardPage presenter;\n+\n+    @Override\n+    public void init(ExportSummaryWizardPage presenter) {\n+        this.presenter = presenter;\n+    }\n+\n+    @Override\n+    public HTMLElement getElement() {\n+        return exportWizardSummary;\n+    }\n+\n+    @EventHandler(\"downloadExport\")\n+    public void downloadAction(ClickEvent click) {\n+        presenter.confirmDownload();\n+    }\n+\n+    @EventHandler(\"datasetsInfoAnchor\")\n+    public void datasetsInfoAnchorClicked(ClickEvent click) {\n+        presenter.goToDataSetsPage();\n+    }\n+\n+    @EventHandler(\"pagesInfoAnchor\")\n+    public void pagesInfoAnchorClicked(ClickEvent click) {\n+        presenter.goToPagesPage();\n+    }\n+\n+    @Override\n+    public void show(DataTransferExportModel dataTransferExportModel) {\n+        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(), \"page\");\n+        datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n+                                                      \"dataset\");\n+    }\n+\n+    private String checkPlural(int size, String text) {\n+        String finalText = size + \" \" + text;\n+        if (size == 1) {\n+            return finalText;\n+        }\n+        return finalText.concat(\"s\");", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99820b5d5dc802107e6d814671e6632247ea0cf6", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex 4ba6508d0..fe1256bc0 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -95,17 +98,17 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n \n     @Override\n     public void show(DataTransferExportModel dataTransferExportModel) {\n-        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(), \"page\");\n+        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(),\n+                                                   i18n.pageLabel(),\n+                                                   i18n.pagesLabel());\n         datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n-                                                      \"dataset\");\n+                                                      i18n.datasetLabel(),\n+                                                      i18n.datasetsLabel());\n     }\n \n-    private String checkPlural(int size, String text) {\n-        String finalText = size + \" \" + text;\n-        if (size == 1) {\n-            return finalText;\n-        }\n-        return finalText.concat(\"s\");\n+    private String checkPlural(int size, String text, String pluralText) {\n+        String result = size + \" \";\n+        return size == 1 ? result + text : result + pluralText;\n     }\n \n }\n\\ No newline at end of file\n", "next_change": {"commit": "82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex fe1256bc0..209c2aa6f 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -111,4 +175,10 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n         return size == 1 ? result + text : result + pluralText;\n     }\n \n+    private Element pageMissingDataSetsList(List<String> datasets) {\n+        Element list = domFactory.element(\"ul\");\n+        datasets.stream().map(domFactory::listItem).forEach(list::appendChild);\n+        return list;\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\ndeleted file mode 100644\nindex 209c2aa6f..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ /dev/null\n", "chunk": "@@ -1,184 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-\n-import com.google.gwt.event.dom.client.ClickEvent;\n-import elemental2.dom.Element;\n-import elemental2.dom.HTMLAnchorElement;\n-import elemental2.dom.HTMLButtonElement;\n-import elemental2.dom.HTMLDivElement;\n-import elemental2.dom.HTMLElement;\n-import elemental2.dom.HTMLHeadingElement;\n-import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n-import org.dashbuilder.client.cms.screen.util.DomFactory;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.jboss.errai.ui.shared.api.annotations.DataField;\n-import org.jboss.errai.ui.shared.api.annotations.EventHandler;\n-import org.jboss.errai.ui.shared.api.annotations.Templated;\n-\n-@Templated\n-@ApplicationScoped\n-public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View {\n-\n-    ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n-\n-    @Inject\n-    @DataField\n-    HTMLDivElement exportWizardSummary;\n-\n-    @Inject\n-    @DataField\n-    @Named(\"span\")\n-    HTMLElement datasetsInformation;\n-\n-    @Inject\n-    @DataField\n-    @Named(\"span\")\n-    HTMLElement pagesInformation;\n-\n-    @Inject\n-    @DataField\n-    HTMLAnchorElement datasetsInfoAnchor;\n-\n-    @Inject\n-    @DataField\n-    HTMLAnchorElement pagesInfoAnchor;\n-\n-    @Inject\n-    @DataField\n-    HTMLButtonElement downloadExport;\n-\n-    @Inject\n-    @DataField\n-    @Named(\"h1\")\n-    HTMLHeadingElement exportHeading;\n-\n-    @Inject\n-    @DataField\n-    @Named(\"span\")\n-    HTMLElement iconSpan;\n-\n-    @Inject\n-    @DataField\n-    HTMLDivElement alertContainer;\n-\n-    @Inject\n-    DomFactory domFactory;\n-\n-    private ExportSummaryWizardPage presenter;\n-\n-    @Override\n-    public void init(ExportSummaryWizardPage presenter) {\n-        this.presenter = presenter;\n-        alertContainer.hidden = true;\n-    }\n-\n-    @Override\n-    public HTMLElement getElement() {\n-        return exportWizardSummary;\n-    }\n-\n-    @EventHandler(\"downloadExport\")\n-    public void downloadAction(ClickEvent click) {\n-        presenter.confirmDownload();\n-    }\n-\n-    @EventHandler(\"datasetsInfoAnchor\")\n-    public void datasetsInfoAnchorClicked(ClickEvent click) {\n-        presenter.goToDataSetsPage();\n-    }\n-\n-    @EventHandler(\"pagesInfoAnchor\")\n-    public void pagesInfoAnchorClicked(ClickEvent click) {\n-        presenter.goToPagesPage();\n-    }\n-\n-    @Override\n-    public void success(DataTransferExportModel dataTransferExportModel) {\n-        exportHeading.textContent = i18n.exportWizardHeadingSuccess();\n-        iconSpan.className = \"pficon pficon-ok\";\n-        alertContainer.hidden = true;\n-        downloadExport.disabled = false;\n-        alertContainer.hidden = true;\n-        showSummary(dataTransferExportModel);\n-    }\n-\n-    @Override\n-    public void validationErrors(DataTransferExportModel dataTransferExportModel,\n-                                 Map<String, List<String>> pageDependencies) {\n-        exportHeading.textContent = i18n.exportWizardHeadingError();\n-        alertContainer.hidden = false;\n-        alertContainer.className = \"errorMsg alert alert-danger\";\n-        alertContainer.innerHTML = \"\";\n-        iconSpan.className = \"pficon pficon-error-circle-o\";\n-        downloadExport.disabled = true;\n-        \n-        Element errorHeader = domFactory.element(\"strong\");\n-        errorHeader.textContent = i18n.missingDependencies();\n-        alertContainer.appendChild(errorHeader);\n-        \n-        Element pageList = domFactory.element(\"ul\");\n-        pageDependencies.forEach((page, ds) -> {\n-            Element li = domFactory.listItem(i18n.pageMissingDataSets(page));\n-            li.appendChild(pageMissingDataSetsList(ds));\n-            pageList.appendChild(li);\n-        });\n-        alertContainer.appendChild(pageList);\n-        \n-        showSummary(dataTransferExportModel);\n-    }\n-\n-    @Override\n-    public void warning(DataTransferExportModel dataTransferExportModel, String warningMessage) {\n-        alertContainer.hidden = false;\n-        iconSpan.className = \"pficon pficon-warning-triangle-o\";\n-        exportHeading.textContent = i18n.exportWizardHeadingWarning();\n-        alertContainer.className = \"errorMsg alert alert-warning\";\n-        alertContainer.innerHTML = \"\";\n-        alertContainer.textContent = warningMessage;\n-        downloadExport.disabled = true;\n-        showSummary(dataTransferExportModel);\n-    }\n-\n-    private void showSummary(DataTransferExportModel dataTransferExportModel) {\n-        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(),\n-                                                   i18n.pageLabel(),\n-                                                   i18n.pagesLabel());\n-        datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n-                                                      i18n.datasetLabel(),\n-                                                      i18n.datasetsLabel());\n-    }\n-\n-    private String checkPlural(int size, String text, String pluralText) {\n-        String result = size + \" \";\n-        return size == 1 ? result + text : result + pluralText;\n-    }\n-\n-    private Element pageMissingDataSetsList(List<String> datasets) {\n-        Element list = domFactory.element(\"ul\");\n-        datasets.stream().map(domFactory::listItem).forEach(list::appendChild);\n-        return list;\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nnew file mode 100644\nindex 000000000..4ba6508d0\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import elemental2.dom.HTMLAnchorElement;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import elemental2.dom.HTMLHeadingElement;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.EventHandler;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Templated\n+@ApplicationScoped\n+public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View {\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement exportWizardSummary;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"span\")\n+    HTMLElement datasetsInformation;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"span\")\n+    HTMLElement pagesInformation;\n+\n+    @Inject\n+    @DataField\n+    HTMLAnchorElement datasetsInfoAnchor;\n+\n+    @Inject\n+    @DataField\n+    HTMLAnchorElement pagesInfoAnchor;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement downloadExport;\n+    \n+    @Inject\n+    @DataField\n+    @Named(\"h1\")\n+    HTMLHeadingElement exportHeading;\n+    \n+    private ExportSummaryWizardPage presenter;\n+\n+    @Override\n+    public void init(ExportSummaryWizardPage presenter) {\n+        this.presenter = presenter;\n+    }\n+\n+    @Override\n+    public HTMLElement getElement() {\n+        return exportWizardSummary;\n+    }\n+\n+    @EventHandler(\"downloadExport\")\n+    public void downloadAction(ClickEvent click) {\n+        presenter.confirmDownload();\n+    }\n+\n+    @EventHandler(\"datasetsInfoAnchor\")\n+    public void datasetsInfoAnchorClicked(ClickEvent click) {\n+        presenter.goToDataSetsPage();\n+    }\n+\n+    @EventHandler(\"pagesInfoAnchor\")\n+    public void pagesInfoAnchorClicked(ClickEvent click) {\n+        presenter.goToPagesPage();\n+    }\n+\n+    @Override\n+    public void show(DataTransferExportModel dataTransferExportModel) {\n+        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(), \"page\");\n+        datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n+                                                      \"dataset\");\n+    }\n+\n+    private String checkPlural(int size, String text) {\n+        String finalText = size + \" \" + text;\n+        if (size == 1) {\n+            return finalText;\n+        }\n+        return finalText.concat(\"s\");\n+    }\n+\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "273f310214667b23f4cc2c172072c174f7d0edfc", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex 4ba6508d0..fe1256bc0 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -95,17 +98,17 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n \n     @Override\n     public void show(DataTransferExportModel dataTransferExportModel) {\n-        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(), \"page\");\n+        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(),\n+                                                   i18n.pageLabel(),\n+                                                   i18n.pagesLabel());\n         datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n-                                                      \"dataset\");\n+                                                      i18n.datasetLabel(),\n+                                                      i18n.datasetsLabel());\n     }\n \n-    private String checkPlural(int size, String text) {\n-        String finalText = size + \" \" + text;\n-        if (size == 1) {\n-            return finalText;\n-        }\n-        return finalText.concat(\"s\");\n+    private String checkPlural(int size, String text, String pluralText) {\n+        String result = size + \" \";\n+        return size == 1 ? result + text : result + pluralText;\n     }\n \n }\n\\ No newline at end of file\n", "next_change": {"commit": "d863679893a098fd2e06912a33033cc54b1ac273", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex fe1256bc0..209c2aa6f 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -111,4 +175,10 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n         return size == 1 ? result + text : result + pluralText;\n     }\n \n+    private Element pageMissingDataSetsList(List<String> datasets) {\n+        Element list = domFactory.element(\"ul\");\n+        datasets.stream().map(domFactory::listItem).forEach(list::appendChild);\n+        return list;\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "f47be2a2c35557d63568897e9899406ec1257cc5", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex 209c2aa6f..5fb8b734f 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -181,4 +180,39 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n         return list;\n     }\n \n+    @Override\n+    public void emptyState() {\n+        state(\"pficon-running\",\n+              \"\",\n+              true,\n+              true);\n+        pagesInformation.textContent = \"\";\n+        datasetsInformation.textContent = \"\";\n+    }\n+\n+    private void errorState() {\n+        state(\"pficon pficon-error-circle-o\",\n+              i18n.exportWizardHeadingError(),\n+              false,\n+              true);\n+        alertContainer.innerHTML = \"\";\n+    }\n+\n+    private void successState() {\n+        state(\"pficon pficon-ok\",\n+              i18n.exportWizardHeadingSuccess(),\n+              true,\n+              false);\n+    }\n+\n+    private void state(String iconSpanClass,\n+                       String headingText,\n+                       boolean hideAlert,\n+                       boolean hideDownload) {\n+        iconSpan.className = iconSpanClass;\n+        exportHeading.textContent = headingText;\n+        alertContainer.hidden = hideAlert;\n+        downloadExport.disabled = hideDownload;\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0NTQwMg==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413745402", "body": "Consider using i18n for \"page\" and \"dataset\".", "bodyText": "Consider using i18n for \"page\" and \"dataset\".", "bodyHTML": "<p dir=\"auto\">Consider using i18n for \"page\" and \"dataset\".</p>", "author": "caponetto", "createdAt": "2020-04-23T11:44:24Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import elemental2.dom.HTMLAnchorElement;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import elemental2.dom.HTMLHeadingElement;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.EventHandler;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Templated\n+@ApplicationScoped\n+public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View {\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement exportWizardSummary;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"span\")\n+    HTMLElement datasetsInformation;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"span\")\n+    HTMLElement pagesInformation;\n+\n+    @Inject\n+    @DataField\n+    HTMLAnchorElement datasetsInfoAnchor;\n+\n+    @Inject\n+    @DataField\n+    HTMLAnchorElement pagesInfoAnchor;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement downloadExport;\n+    \n+    @Inject\n+    @DataField\n+    @Named(\"h1\")\n+    HTMLHeadingElement exportHeading;\n+    \n+    private ExportSummaryWizardPage presenter;\n+\n+    @Override\n+    public void init(ExportSummaryWizardPage presenter) {\n+        this.presenter = presenter;\n+    }\n+\n+    @Override\n+    public HTMLElement getElement() {\n+        return exportWizardSummary;\n+    }\n+\n+    @EventHandler(\"downloadExport\")\n+    public void downloadAction(ClickEvent click) {\n+        presenter.confirmDownload();\n+    }\n+\n+    @EventHandler(\"datasetsInfoAnchor\")\n+    public void datasetsInfoAnchorClicked(ClickEvent click) {\n+        presenter.goToDataSetsPage();\n+    }\n+\n+    @EventHandler(\"pagesInfoAnchor\")\n+    public void pagesInfoAnchorClicked(ClickEvent click) {\n+        presenter.goToPagesPage();\n+    }\n+\n+    @Override\n+    public void show(DataTransferExportModel dataTransferExportModel) {\n+        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(), \"page\");\n+        datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n+                                                      \"dataset\");", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99820b5d5dc802107e6d814671e6632247ea0cf6", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex 4ba6508d0..fe1256bc0 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -95,17 +98,17 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n \n     @Override\n     public void show(DataTransferExportModel dataTransferExportModel) {\n-        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(), \"page\");\n+        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(),\n+                                                   i18n.pageLabel(),\n+                                                   i18n.pagesLabel());\n         datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n-                                                      \"dataset\");\n+                                                      i18n.datasetLabel(),\n+                                                      i18n.datasetsLabel());\n     }\n \n-    private String checkPlural(int size, String text) {\n-        String finalText = size + \" \" + text;\n-        if (size == 1) {\n-            return finalText;\n-        }\n-        return finalText.concat(\"s\");\n+    private String checkPlural(int size, String text, String pluralText) {\n+        String result = size + \" \";\n+        return size == 1 ? result + text : result + pluralText;\n     }\n \n }\n\\ No newline at end of file\n", "next_change": {"commit": "82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex fe1256bc0..209c2aa6f 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -111,4 +175,10 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n         return size == 1 ? result + text : result + pluralText;\n     }\n \n+    private Element pageMissingDataSetsList(List<String> datasets) {\n+        Element list = domFactory.element(\"ul\");\n+        datasets.stream().map(domFactory::listItem).forEach(list::appendChild);\n+        return list;\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\ndeleted file mode 100644\nindex 209c2aa6f..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ /dev/null\n", "chunk": "@@ -1,184 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-\n-import com.google.gwt.event.dom.client.ClickEvent;\n-import elemental2.dom.Element;\n-import elemental2.dom.HTMLAnchorElement;\n-import elemental2.dom.HTMLButtonElement;\n-import elemental2.dom.HTMLDivElement;\n-import elemental2.dom.HTMLElement;\n-import elemental2.dom.HTMLHeadingElement;\n-import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n-import org.dashbuilder.client.cms.screen.util.DomFactory;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.jboss.errai.ui.shared.api.annotations.DataField;\n-import org.jboss.errai.ui.shared.api.annotations.EventHandler;\n-import org.jboss.errai.ui.shared.api.annotations.Templated;\n-\n-@Templated\n-@ApplicationScoped\n-public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View {\n-\n-    ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n-\n-    @Inject\n-    @DataField\n-    HTMLDivElement exportWizardSummary;\n-\n-    @Inject\n-    @DataField\n-    @Named(\"span\")\n-    HTMLElement datasetsInformation;\n-\n-    @Inject\n-    @DataField\n-    @Named(\"span\")\n-    HTMLElement pagesInformation;\n-\n-    @Inject\n-    @DataField\n-    HTMLAnchorElement datasetsInfoAnchor;\n-\n-    @Inject\n-    @DataField\n-    HTMLAnchorElement pagesInfoAnchor;\n-\n-    @Inject\n-    @DataField\n-    HTMLButtonElement downloadExport;\n-\n-    @Inject\n-    @DataField\n-    @Named(\"h1\")\n-    HTMLHeadingElement exportHeading;\n-\n-    @Inject\n-    @DataField\n-    @Named(\"span\")\n-    HTMLElement iconSpan;\n-\n-    @Inject\n-    @DataField\n-    HTMLDivElement alertContainer;\n-\n-    @Inject\n-    DomFactory domFactory;\n-\n-    private ExportSummaryWizardPage presenter;\n-\n-    @Override\n-    public void init(ExportSummaryWizardPage presenter) {\n-        this.presenter = presenter;\n-        alertContainer.hidden = true;\n-    }\n-\n-    @Override\n-    public HTMLElement getElement() {\n-        return exportWizardSummary;\n-    }\n-\n-    @EventHandler(\"downloadExport\")\n-    public void downloadAction(ClickEvent click) {\n-        presenter.confirmDownload();\n-    }\n-\n-    @EventHandler(\"datasetsInfoAnchor\")\n-    public void datasetsInfoAnchorClicked(ClickEvent click) {\n-        presenter.goToDataSetsPage();\n-    }\n-\n-    @EventHandler(\"pagesInfoAnchor\")\n-    public void pagesInfoAnchorClicked(ClickEvent click) {\n-        presenter.goToPagesPage();\n-    }\n-\n-    @Override\n-    public void success(DataTransferExportModel dataTransferExportModel) {\n-        exportHeading.textContent = i18n.exportWizardHeadingSuccess();\n-        iconSpan.className = \"pficon pficon-ok\";\n-        alertContainer.hidden = true;\n-        downloadExport.disabled = false;\n-        alertContainer.hidden = true;\n-        showSummary(dataTransferExportModel);\n-    }\n-\n-    @Override\n-    public void validationErrors(DataTransferExportModel dataTransferExportModel,\n-                                 Map<String, List<String>> pageDependencies) {\n-        exportHeading.textContent = i18n.exportWizardHeadingError();\n-        alertContainer.hidden = false;\n-        alertContainer.className = \"errorMsg alert alert-danger\";\n-        alertContainer.innerHTML = \"\";\n-        iconSpan.className = \"pficon pficon-error-circle-o\";\n-        downloadExport.disabled = true;\n-        \n-        Element errorHeader = domFactory.element(\"strong\");\n-        errorHeader.textContent = i18n.missingDependencies();\n-        alertContainer.appendChild(errorHeader);\n-        \n-        Element pageList = domFactory.element(\"ul\");\n-        pageDependencies.forEach((page, ds) -> {\n-            Element li = domFactory.listItem(i18n.pageMissingDataSets(page));\n-            li.appendChild(pageMissingDataSetsList(ds));\n-            pageList.appendChild(li);\n-        });\n-        alertContainer.appendChild(pageList);\n-        \n-        showSummary(dataTransferExportModel);\n-    }\n-\n-    @Override\n-    public void warning(DataTransferExportModel dataTransferExportModel, String warningMessage) {\n-        alertContainer.hidden = false;\n-        iconSpan.className = \"pficon pficon-warning-triangle-o\";\n-        exportHeading.textContent = i18n.exportWizardHeadingWarning();\n-        alertContainer.className = \"errorMsg alert alert-warning\";\n-        alertContainer.innerHTML = \"\";\n-        alertContainer.textContent = warningMessage;\n-        downloadExport.disabled = true;\n-        showSummary(dataTransferExportModel);\n-    }\n-\n-    private void showSummary(DataTransferExportModel dataTransferExportModel) {\n-        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(),\n-                                                   i18n.pageLabel(),\n-                                                   i18n.pagesLabel());\n-        datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n-                                                      i18n.datasetLabel(),\n-                                                      i18n.datasetsLabel());\n-    }\n-\n-    private String checkPlural(int size, String text, String pluralText) {\n-        String result = size + \" \";\n-        return size == 1 ? result + text : result + pluralText;\n-    }\n-\n-    private Element pageMissingDataSetsList(List<String> datasets) {\n-        Element list = domFactory.element(\"ul\");\n-        datasets.stream().map(domFactory::listItem).forEach(list::appendChild);\n-        return list;\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nnew file mode 100644\nindex 000000000..4ba6508d0\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import elemental2.dom.HTMLAnchorElement;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import elemental2.dom.HTMLHeadingElement;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.EventHandler;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Templated\n+@ApplicationScoped\n+public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View {\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement exportWizardSummary;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"span\")\n+    HTMLElement datasetsInformation;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"span\")\n+    HTMLElement pagesInformation;\n+\n+    @Inject\n+    @DataField\n+    HTMLAnchorElement datasetsInfoAnchor;\n+\n+    @Inject\n+    @DataField\n+    HTMLAnchorElement pagesInfoAnchor;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement downloadExport;\n+    \n+    @Inject\n+    @DataField\n+    @Named(\"h1\")\n+    HTMLHeadingElement exportHeading;\n+    \n+    private ExportSummaryWizardPage presenter;\n+\n+    @Override\n+    public void init(ExportSummaryWizardPage presenter) {\n+        this.presenter = presenter;\n+    }\n+\n+    @Override\n+    public HTMLElement getElement() {\n+        return exportWizardSummary;\n+    }\n+\n+    @EventHandler(\"downloadExport\")\n+    public void downloadAction(ClickEvent click) {\n+        presenter.confirmDownload();\n+    }\n+\n+    @EventHandler(\"datasetsInfoAnchor\")\n+    public void datasetsInfoAnchorClicked(ClickEvent click) {\n+        presenter.goToDataSetsPage();\n+    }\n+\n+    @EventHandler(\"pagesInfoAnchor\")\n+    public void pagesInfoAnchorClicked(ClickEvent click) {\n+        presenter.goToPagesPage();\n+    }\n+\n+    @Override\n+    public void show(DataTransferExportModel dataTransferExportModel) {\n+        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(), \"page\");\n+        datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n+                                                      \"dataset\");\n+    }\n+\n+    private String checkPlural(int size, String text) {\n+        String finalText = size + \" \" + text;\n+        if (size == 1) {\n+            return finalText;\n+        }\n+        return finalText.concat(\"s\");\n+    }\n+\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "273f310214667b23f4cc2c172072c174f7d0edfc", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex 4ba6508d0..fe1256bc0 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -95,17 +98,17 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n \n     @Override\n     public void show(DataTransferExportModel dataTransferExportModel) {\n-        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(), \"page\");\n+        pagesInformation.textContent = checkPlural(dataTransferExportModel.getPages().size(),\n+                                                   i18n.pageLabel(),\n+                                                   i18n.pagesLabel());\n         datasetsInformation.textContent = checkPlural(dataTransferExportModel.getDatasetDefinitions().size(),\n-                                                      \"dataset\");\n+                                                      i18n.datasetLabel(),\n+                                                      i18n.datasetsLabel());\n     }\n \n-    private String checkPlural(int size, String text) {\n-        String finalText = size + \" \" + text;\n-        if (size == 1) {\n-            return finalText;\n-        }\n-        return finalText.concat(\"s\");\n+    private String checkPlural(int size, String text, String pluralText) {\n+        String result = size + \" \";\n+        return size == 1 ? result + text : result + pluralText;\n     }\n \n }\n\\ No newline at end of file\n", "next_change": {"commit": "d863679893a098fd2e06912a33033cc54b1ac273", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex fe1256bc0..209c2aa6f 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -111,4 +175,10 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n         return size == 1 ? result + text : result + pluralText;\n     }\n \n+    private Element pageMissingDataSetsList(List<String> datasets) {\n+        Element list = domFactory.element(\"ul\");\n+        datasets.stream().map(domFactory::listItem).forEach(list::appendChild);\n+        return list;\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "f47be2a2c35557d63568897e9899406ec1257cc5", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\nindex 209c2aa6f..5fb8b734f 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPageView.java\n", "chunk": "@@ -181,4 +180,39 @@ public class ExportSummaryWizardPageView implements ExportSummaryWizardPage.View\n         return list;\n     }\n \n+    @Override\n+    public void emptyState() {\n+        state(\"pficon-running\",\n+              \"\",\n+              true,\n+              true);\n+        pagesInformation.textContent = \"\";\n+        datasetsInformation.textContent = \"\";\n+    }\n+\n+    private void errorState() {\n+        state(\"pficon pficon-error-circle-o\",\n+              i18n.exportWizardHeadingError(),\n+              false,\n+              true);\n+        alertContainer.innerHTML = \"\";\n+    }\n+\n+    private void successState() {\n+        state(\"pficon pficon-ok\",\n+              i18n.exportWizardHeadingSuccess(),\n+              true,\n+              false);\n+    }\n+\n+    private void state(String iconSpanClass,\n+                       String headingText,\n+                       boolean hideAlert,\n+                       boolean hideDownload) {\n+        iconSpan.className = iconSpanClass;\n+        exportHeading.textContent = headingText;\n+        alertContainer.hidden = hideAlert;\n+        downloadExport.disabled = hideDownload;\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0OTA5MA==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413749090", "body": "Is it a TODO?", "bodyText": "Is it a TODO?", "bodyHTML": "<p dir=\"auto\">Is it a TODO?</p>", "author": "caponetto", "createdAt": "2020-04-23T11:50:51Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import java.util.function.Supplier;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.client.callbacks.Callback;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n+import org.uberfire.mvp.Command;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class ExportSummaryWizardPage implements WizardPage {\n+\n+    @Inject\n+    View view;\n+\n+    private Supplier<DataTransferExportModel> exportModelSupplier;\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+    private DataTransferExportModel dataTransferExportModel;\n+\n+    private Command goToDataSetsCommand = () -> {\n+    };\n+\n+    private Command goToPagesPage = () -> {\n+    };\n+\n+    public interface View extends UberElemental<ExportSummaryWizardPage> {\n+\n+        void show(DataTransferExportModel dataTransferExportModel);\n+\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    @Override\n+    public Widget asWidget() {\n+        return ElementWrapperWidget.getWidget(view.getElement());\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Export Summary\";\n+    }\n+\n+    @Override\n+    public void isComplete(Callback<Boolean> callback) {\n+        // add validation here when it is ready", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99820b5d5dc802107e6d814671e6632247ea0cf6", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex 1779e9477..ad02c06b3 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -70,7 +70,6 @@ public class ExportSummaryWizardPage implements WizardPage {\n \n     @Override\n     public void isComplete(Callback<Boolean> callback) {\n-        // add validation here when it is ready\n         callback.callback(true);\n     }\n \n", "next_change": {"commit": "82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex ad02c06b3..c95bdd2a8 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -65,7 +84,7 @@ public class ExportSummaryWizardPage implements WizardPage {\n \n     @Override\n     public String getTitle() {\n-        return \"Export Summary\";\n+        return i18n.exportWizardTitle();\n     }\n \n     @Override\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\ndeleted file mode 100644\nindex c95bdd2a8..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ /dev/null\n", "chunk": "@@ -1,151 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Supplier;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import com.google.gwt.user.client.ui.Widget;\n-import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.dashbuilder.transfer.ExportModelValidationService;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n-import org.uberfire.client.callbacks.Callback;\n-import org.uberfire.client.mvp.UberElemental;\n-import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n-import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n-import org.uberfire.mvp.Command;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class ExportSummaryWizardPage implements WizardPage {\n-\n-    ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n-\n-    @Inject\n-    View view;\n-\n-    @Inject\n-    Caller<ExportModelValidationService> exportModelValidationService;\n-\n-    @Inject\n-    private BusyIndicatorView busyIndicatorView;\n-\n-    private Supplier<DataTransferExportModel> exportModelSupplier;\n-    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n-    private DataTransferExportModel exportModel;\n-\n-    private Command goToDataSetsCommand = () -> {\n-    };\n-\n-    private Command goToPagesCommand = () -> {\n-    };\n-\n-    public interface View extends UberElemental<ExportSummaryWizardPage> {\n-\n-        void success(DataTransferExportModel dataTransferExportModel);\n-\n-        void validationErrors(DataTransferExportModel dataTransferExportModel,\n-                              Map<String, List<String>> pageDependencies);\n-        \n-        void warning(DataTransferExportModel dataTransferExportModel, String message);\n-\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        view.init(this);\n-    }\n-\n-    @Override\n-    public Widget asWidget() {\n-        return ElementWrapperWidget.getWidget(view.getElement());\n-    }\n-\n-    @Override\n-    public String getTitle() {\n-        return i18n.exportWizardTitle();\n-    }\n-\n-    @Override\n-    public void isComplete(Callback<Boolean> callback) {\n-        callback.callback(true);\n-    }\n-\n-    @Override\n-    public void initialise() {\n-        view.init(this);\n-    }\n-\n-    @Override\n-    public void prepareView() {\n-        validateAndUpdateView();\n-    }\n-\n-    public void setGoToDataSetsCommand(Command goToDatasets) {\n-        this.goToDataSetsCommand = goToDatasets;\n-    }\n-\n-    public void setGoToPagesCommand(Command goToPages) {\n-        this.goToPagesCommand = goToPages;\n-    }\n-\n-    public void setExportSummary(Supplier<DataTransferExportModel> exportModelSupplier) {\n-        this.exportModelSupplier = exportModelSupplier;\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n-    }\n-\n-    void confirmDownload() {\n-        dataTransferExportModelCallback.execute(exportModel);\n-    }\n-\n-    public void goToDataSetsPage() {\n-        goToDataSetsCommand.execute();\n-    }\n-\n-    public void goToPagesPage() {\n-        goToPagesCommand.execute();\n-    }\n-\n-    private void validateAndUpdateView() {\n-        exportModel = exportModelSupplier.get();\n-        if (exportModel.getPages().isEmpty()) {\n-            view.warning(exportModel, i18n.noPagesExported());\n-            return;\n-        }\n-        \n-        busyIndicatorView.showBusyIndicator(i18n.validatingExport());\n-        exportModelValidationService.call((Map<String, List<String>> validation) -> {\n-            busyIndicatorView.hideBusyIndicator();\n-            if (validation.isEmpty()) {\n-                view.success(exportModel);\n-            } else {\n-                view.validationErrors(exportModel, validation);\n-            }\n-        }).checkMissingDatasets(exportModel);\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nnew file mode 100644\nindex 000000000..1779e9477\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import java.util.function.Supplier;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.client.callbacks.Callback;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n+import org.uberfire.mvp.Command;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class ExportSummaryWizardPage implements WizardPage {\n+\n+    @Inject\n+    View view;\n+\n+    private Supplier<DataTransferExportModel> exportModelSupplier;\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+    private DataTransferExportModel dataTransferExportModel;\n+\n+    private Command goToDataSetsCommand = () -> {\n+    };\n+\n+    private Command goToPagesPage = () -> {\n+    };\n+\n+    public interface View extends UberElemental<ExportSummaryWizardPage> {\n+\n+        void show(DataTransferExportModel dataTransferExportModel);\n+\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    @Override\n+    public Widget asWidget() {\n+        return ElementWrapperWidget.getWidget(view.getElement());\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Export Summary\";\n+    }\n+\n+    @Override\n+    public void isComplete(Callback<Boolean> callback) {\n+        // add validation here when it is ready\n+        callback.callback(true);\n+    }\n+\n+    @Override\n+    public void initialise() {\n+        view.init(this);\n+    }\n+\n+    @Override\n+    public void prepareView() {\n+        dataTransferExportModel = exportModelSupplier.get();\n+        view.show(dataTransferExportModel);\n+    }\n+\n+    public void setGoToDataSetsCommand(Command goToDatasets) {\n+        this.goToDataSetsCommand = goToDatasets;\n+    }\n+\n+    public void setGoToPagesCommand(Command goToPages) {\n+        this.goToPagesPage = goToPages;\n+    }\n+\n+    public void setExportSummary(Supplier<DataTransferExportModel> exportModelSupplier) {\n+        this.exportModelSupplier = exportModelSupplier;\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n+    }\n+\n+    void confirmDownload() {\n+        dataTransferExportModelCallback.execute(dataTransferExportModel);\n+    }\n+\n+    public void goToDataSetsPage() {\n+        goToDataSetsCommand.execute();\n+    }\n+\n+    public void goToPagesPage() {\n+        goToPagesPage.execute();\n+    }\n+    \n+}\n\\ No newline at end of file\n", "next_change": {"commit": "273f310214667b23f4cc2c172072c174f7d0edfc", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex 1779e9477..ad02c06b3 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -110,7 +109,7 @@ public class ExportSummaryWizardPage implements WizardPage {\n     }\n \n     public void goToPagesPage() {\n-        goToPagesPage.execute();\n+        goToPagesCommand.execute();\n     }\n-    \n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "d863679893a098fd2e06912a33033cc54b1ac273", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex ad02c06b3..c95bdd2a8 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -112,4 +130,22 @@ public class ExportSummaryWizardPage implements WizardPage {\n         goToPagesCommand.execute();\n     }\n \n+    private void validateAndUpdateView() {\n+        exportModel = exportModelSupplier.get();\n+        if (exportModel.getPages().isEmpty()) {\n+            view.warning(exportModel, i18n.noPagesExported());\n+            return;\n+        }\n+        \n+        busyIndicatorView.showBusyIndicator(i18n.validatingExport());\n+        exportModelValidationService.call((Map<String, List<String>> validation) -> {\n+            busyIndicatorView.hideBusyIndicator();\n+            if (validation.isEmpty()) {\n+                view.success(exportModel);\n+            } else {\n+                view.validationErrors(exportModel, validation);\n+            }\n+        }).checkMissingDatasets(exportModel);\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "f47be2a2c35557d63568897e9899406ec1257cc5", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex c95bdd2a8..ad64fb743 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -132,20 +140,45 @@ public class ExportSummaryWizardPage implements WizardPage {\n \n     private void validateAndUpdateView() {\n         exportModel = exportModelSupplier.get();\n+        \n+        if (exportModel.getPages().isEmpty() && exportModel.getDatasetDefinitions().isEmpty()) {\n+            view.exportError(exportModel, i18n.nothingToExport());\n+            return;\n+        }\n         if (exportModel.getPages().isEmpty()) {\n-            view.warning(exportModel, i18n.noPagesExported());\n+            view.exportError(exportModel, i18n.noPagesExported());\n             return;\n         }\n         \n+        view.emptyState();\n         busyIndicatorView.showBusyIndicator(i18n.validatingExport());\n         exportModelValidationService.call((Map<String, List<String>> validation) -> {\n             busyIndicatorView.hideBusyIndicator();\n             if (validation.isEmpty()) {\n                 view.success(exportModel);\n             } else {\n+                remapMissingDependencies(validation);\n                 view.validationErrors(exportModel, validation);\n             }\n         }).checkMissingDatasets(exportModel);\n     }\n \n+    void remapMissingDependencies(Map<String, List<String>> validation) {\n+        if (assets == null) {\n+            return;\n+        }\n+        List<DataSetDef> datasets = assets.getDatasetsDefinitions();\n+        validation.replaceAll((page, deps) -> {\n+            return deps.stream()\n+                       .map(uuid -> datasets.stream()\n+                                            .filter(ds -> ds.getUUID().equals(uuid))\n+                                            .map(ds -> ds.getName()).findAny().orElse(uuid))\n+                       .collect(toList());\n+        });\n+    }\n+\n+    public void setAssets(DataTransferAssets assets) {\n+        this.assets = assets;\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1MDEzNQ==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413750135", "body": "```suggestion\r\n    private Command goToPagesCommand = () -> {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Command goToPagesPage = () -> {\n          \n          \n            \n                private Command goToPagesCommand = () -> {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Command</span> <span class=\"x x-first x-last\">goToPagesPage</span> <span class=\"pl-k\">=</span> () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Command</span> <span class=\"x x-first x-last\">goToPagesCommand</span> <span class=\"pl-k\">=</span> () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "caponetto", "createdAt": "2020-04-23T11:52:33Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import java.util.function.Supplier;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.client.callbacks.Callback;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n+import org.uberfire.mvp.Command;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class ExportSummaryWizardPage implements WizardPage {\n+\n+    @Inject\n+    View view;\n+\n+    private Supplier<DataTransferExportModel> exportModelSupplier;\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+    private DataTransferExportModel dataTransferExportModel;\n+\n+    private Command goToDataSetsCommand = () -> {\n+    };\n+\n+    private Command goToPagesPage = () -> {", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99820b5d5dc802107e6d814671e6632247ea0cf6", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex 1779e9477..ad02c06b3 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -44,7 +44,7 @@ public class ExportSummaryWizardPage implements WizardPage {\n     private Command goToDataSetsCommand = () -> {\n     };\n \n-    private Command goToPagesPage = () -> {\n+    private Command goToPagesCommand = () -> {\n     };\n \n     public interface View extends UberElemental<ExportSummaryWizardPage> {\n", "next_change": {"commit": "82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex ad02c06b3..c95bdd2a8 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -49,7 +63,12 @@ public class ExportSummaryWizardPage implements WizardPage {\n \n     public interface View extends UberElemental<ExportSummaryWizardPage> {\n \n-        void show(DataTransferExportModel dataTransferExportModel);\n+        void success(DataTransferExportModel dataTransferExportModel);\n+\n+        void validationErrors(DataTransferExportModel dataTransferExportModel,\n+                              Map<String, List<String>> pageDependencies);\n+        \n+        void warning(DataTransferExportModel dataTransferExportModel, String message);\n \n     }\n \n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\ndeleted file mode 100644\nindex c95bdd2a8..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ /dev/null\n", "chunk": "@@ -1,151 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Supplier;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import com.google.gwt.user.client.ui.Widget;\n-import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.dashbuilder.transfer.ExportModelValidationService;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n-import org.uberfire.client.callbacks.Callback;\n-import org.uberfire.client.mvp.UberElemental;\n-import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n-import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n-import org.uberfire.mvp.Command;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class ExportSummaryWizardPage implements WizardPage {\n-\n-    ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n-\n-    @Inject\n-    View view;\n-\n-    @Inject\n-    Caller<ExportModelValidationService> exportModelValidationService;\n-\n-    @Inject\n-    private BusyIndicatorView busyIndicatorView;\n-\n-    private Supplier<DataTransferExportModel> exportModelSupplier;\n-    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n-    private DataTransferExportModel exportModel;\n-\n-    private Command goToDataSetsCommand = () -> {\n-    };\n-\n-    private Command goToPagesCommand = () -> {\n-    };\n-\n-    public interface View extends UberElemental<ExportSummaryWizardPage> {\n-\n-        void success(DataTransferExportModel dataTransferExportModel);\n-\n-        void validationErrors(DataTransferExportModel dataTransferExportModel,\n-                              Map<String, List<String>> pageDependencies);\n-        \n-        void warning(DataTransferExportModel dataTransferExportModel, String message);\n-\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        view.init(this);\n-    }\n-\n-    @Override\n-    public Widget asWidget() {\n-        return ElementWrapperWidget.getWidget(view.getElement());\n-    }\n-\n-    @Override\n-    public String getTitle() {\n-        return i18n.exportWizardTitle();\n-    }\n-\n-    @Override\n-    public void isComplete(Callback<Boolean> callback) {\n-        callback.callback(true);\n-    }\n-\n-    @Override\n-    public void initialise() {\n-        view.init(this);\n-    }\n-\n-    @Override\n-    public void prepareView() {\n-        validateAndUpdateView();\n-    }\n-\n-    public void setGoToDataSetsCommand(Command goToDatasets) {\n-        this.goToDataSetsCommand = goToDatasets;\n-    }\n-\n-    public void setGoToPagesCommand(Command goToPages) {\n-        this.goToPagesCommand = goToPages;\n-    }\n-\n-    public void setExportSummary(Supplier<DataTransferExportModel> exportModelSupplier) {\n-        this.exportModelSupplier = exportModelSupplier;\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n-    }\n-\n-    void confirmDownload() {\n-        dataTransferExportModelCallback.execute(exportModel);\n-    }\n-\n-    public void goToDataSetsPage() {\n-        goToDataSetsCommand.execute();\n-    }\n-\n-    public void goToPagesPage() {\n-        goToPagesCommand.execute();\n-    }\n-\n-    private void validateAndUpdateView() {\n-        exportModel = exportModelSupplier.get();\n-        if (exportModel.getPages().isEmpty()) {\n-            view.warning(exportModel, i18n.noPagesExported());\n-            return;\n-        }\n-        \n-        busyIndicatorView.showBusyIndicator(i18n.validatingExport());\n-        exportModelValidationService.call((Map<String, List<String>> validation) -> {\n-            busyIndicatorView.hideBusyIndicator();\n-            if (validation.isEmpty()) {\n-                view.success(exportModel);\n-            } else {\n-                view.validationErrors(exportModel, validation);\n-            }\n-        }).checkMissingDatasets(exportModel);\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nnew file mode 100644\nindex 000000000..1779e9477\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import java.util.function.Supplier;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.client.callbacks.Callback;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n+import org.uberfire.mvp.Command;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class ExportSummaryWizardPage implements WizardPage {\n+\n+    @Inject\n+    View view;\n+\n+    private Supplier<DataTransferExportModel> exportModelSupplier;\n+    private ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback;\n+    private DataTransferExportModel dataTransferExportModel;\n+\n+    private Command goToDataSetsCommand = () -> {\n+    };\n+\n+    private Command goToPagesPage = () -> {\n+    };\n+\n+    public interface View extends UberElemental<ExportSummaryWizardPage> {\n+\n+        void show(DataTransferExportModel dataTransferExportModel);\n+\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    @Override\n+    public Widget asWidget() {\n+        return ElementWrapperWidget.getWidget(view.getElement());\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Export Summary\";\n+    }\n+\n+    @Override\n+    public void isComplete(Callback<Boolean> callback) {\n+        // add validation here when it is ready\n+        callback.callback(true);\n+    }\n+\n+    @Override\n+    public void initialise() {\n+        view.init(this);\n+    }\n+\n+    @Override\n+    public void prepareView() {\n+        dataTransferExportModel = exportModelSupplier.get();\n+        view.show(dataTransferExportModel);\n+    }\n+\n+    public void setGoToDataSetsCommand(Command goToDatasets) {\n+        this.goToDataSetsCommand = goToDatasets;\n+    }\n+\n+    public void setGoToPagesCommand(Command goToPages) {\n+        this.goToPagesPage = goToPages;\n+    }\n+\n+    public void setExportSummary(Supplier<DataTransferExportModel> exportModelSupplier) {\n+        this.exportModelSupplier = exportModelSupplier;\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        this.dataTransferExportModelCallback = dataTransferExportModelCallback;\n+    }\n+\n+    void confirmDownload() {\n+        dataTransferExportModelCallback.execute(dataTransferExportModel);\n+    }\n+\n+    public void goToDataSetsPage() {\n+        goToDataSetsCommand.execute();\n+    }\n+\n+    public void goToPagesPage() {\n+        goToPagesPage.execute();\n+    }\n+    \n+}\n\\ No newline at end of file\n", "next_change": {"commit": "273f310214667b23f4cc2c172072c174f7d0edfc", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex 1779e9477..ad02c06b3 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -110,7 +109,7 @@ public class ExportSummaryWizardPage implements WizardPage {\n     }\n \n     public void goToPagesPage() {\n-        goToPagesPage.execute();\n+        goToPagesCommand.execute();\n     }\n-    \n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "d863679893a098fd2e06912a33033cc54b1ac273", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex ad02c06b3..c95bdd2a8 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -112,4 +130,22 @@ public class ExportSummaryWizardPage implements WizardPage {\n         goToPagesCommand.execute();\n     }\n \n+    private void validateAndUpdateView() {\n+        exportModel = exportModelSupplier.get();\n+        if (exportModel.getPages().isEmpty()) {\n+            view.warning(exportModel, i18n.noPagesExported());\n+            return;\n+        }\n+        \n+        busyIndicatorView.showBusyIndicator(i18n.validatingExport());\n+        exportModelValidationService.call((Map<String, List<String>> validation) -> {\n+            busyIndicatorView.hideBusyIndicator();\n+            if (validation.isEmpty()) {\n+                view.success(exportModel);\n+            } else {\n+                view.validationErrors(exportModel, validation);\n+            }\n+        }).checkMissingDatasets(exportModel);\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "f47be2a2c35557d63568897e9899406ec1257cc5", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\nindex c95bdd2a8..ad64fb743 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportSummaryWizardPage.java\n", "chunk": "@@ -132,20 +140,45 @@ public class ExportSummaryWizardPage implements WizardPage {\n \n     private void validateAndUpdateView() {\n         exportModel = exportModelSupplier.get();\n+        \n+        if (exportModel.getPages().isEmpty() && exportModel.getDatasetDefinitions().isEmpty()) {\n+            view.exportError(exportModel, i18n.nothingToExport());\n+            return;\n+        }\n         if (exportModel.getPages().isEmpty()) {\n-            view.warning(exportModel, i18n.noPagesExported());\n+            view.exportError(exportModel, i18n.noPagesExported());\n             return;\n         }\n         \n+        view.emptyState();\n         busyIndicatorView.showBusyIndicator(i18n.validatingExport());\n         exportModelValidationService.call((Map<String, List<String>> validation) -> {\n             busyIndicatorView.hideBusyIndicator();\n             if (validation.isEmpty()) {\n                 view.success(exportModel);\n             } else {\n+                remapMissingDependencies(validation);\n                 view.validationErrors(exportModel, validation);\n             }\n         }).checkMissingDatasets(exportModel);\n     }\n \n+    void remapMissingDependencies(Map<String, List<String>> validation) {\n+        if (assets == null) {\n+            return;\n+        }\n+        List<DataSetDef> datasets = assets.getDatasetsDefinitions();\n+        validation.replaceAll((page, deps) -> {\n+            return deps.stream()\n+                       .map(uuid -> datasets.stream()\n+                                            .filter(ds -> ds.getUUID().equals(uuid))\n+                                            .map(ds -> ds.getName()).findAny().orElse(uuid))\n+                       .collect(toList());\n+        });\n+    }\n+\n+    public void setAssets(DataTransferAssets assets) {\n+        this.assets = assets;\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1MDkzNA==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413750934", "body": "Consider using i18n for \"Select Datasets\".", "bodyText": "Consider using i18n for \"Select Datasets\".", "bodyHTML": "<p dir=\"auto\">Consider using i18n for \"Select Datasets\".</p>", "author": "caponetto", "createdAt": "2020-04-23T11:53:50Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/DataSetsWizardPage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.client.cms.screen.transfer.export.wizard.widget.DataSetsTable;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.client.callbacks.Callback;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n+\n+@ApplicationScoped\n+public class DataSetsWizardPage implements WizardPage {\n+\n+    @Inject\n+    DataSetsTable dataSetsTable;\n+\n+    @Override\n+    public Widget asWidget() {\n+        return ElementWrapperWidget.getWidget(dataSetsTable.getElement());\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Select Datasets\";", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/DataSetsWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/DataSetsWizardPage.java\ndeleted file mode 100644\nindex fc3687933..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/DataSetsWizardPage.java\n+++ /dev/null\n", "chunk": "@@ -1,68 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n-\n-import java.util.List;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import com.google.gwt.user.client.ui.Widget;\n-import org.dashbuilder.client.cms.screen.transfer.export.wizard.widget.DataSetsTable;\n-import org.dashbuilder.dataset.def.DataSetDef;\n-import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n-import org.uberfire.client.callbacks.Callback;\n-import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n-\n-@ApplicationScoped\n-public class DataSetsWizardPage implements WizardPage {\n-\n-    @Inject\n-    DataSetsTable dataSetsTable;\n-\n-    @Override\n-    public Widget asWidget() {\n-        return ElementWrapperWidget.getWidget(dataSetsTable.getElement());\n-    }\n-\n-    @Override\n-    public String getTitle() {\n-        return \"Select Datasets\";\n-    }\n-\n-    @Override\n-    public void isComplete(Callback<Boolean> callback) {\n-        callback.callback(true);\n-    }\n-\n-    @Override\n-    public void initialise() {}\n-\n-    @Override\n-    public void prepareView() {\n-        dataSetsTable.refresh();\n-    }\n-\n-    public void setDataSets(List<DataSetDef> datasetDefinitions) {\n-        dataSetsTable.setData(datasetDefinitions);\n-    }\n-\n-    public List<DataSetDef> getSelectedDataSetDefs() {\n-        return dataSetsTable.getSelectedData();\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/DataSetsWizardPage.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/DataSetsWizardPage.java\nnew file mode 100644\nindex 000000000..fc3687933\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/DataSetsWizardPage.java\n", "chunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.client.cms.screen.transfer.export.wizard.widget.DataSetsTable;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.client.callbacks.Callback;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n+\n+@ApplicationScoped\n+public class DataSetsWizardPage implements WizardPage {\n+\n+    @Inject\n+    DataSetsTable dataSetsTable;\n+\n+    @Override\n+    public Widget asWidget() {\n+        return ElementWrapperWidget.getWidget(dataSetsTable.getElement());\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Select Datasets\";\n+    }\n+\n+    @Override\n+    public void isComplete(Callback<Boolean> callback) {\n+        callback.callback(true);\n+    }\n+\n+    @Override\n+    public void initialise() {}\n+\n+    @Override\n+    public void prepareView() {\n+        dataSetsTable.refresh();\n+    }\n+\n+    public void setDataSets(List<DataSetDef> datasetDefinitions) {\n+        dataSetsTable.setData(datasetDefinitions);\n+    }\n+\n+    public List<DataSetDef> getSelectedDataSetDefs() {\n+        return dataSetsTable.getSelectedData();\n+    }\n+\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1NjMxMQ==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413756311", "body": "Are you using this variable? \r\nCan it be injected on the constructor just like the others?", "bodyText": "Are you using this variable?\nCan it be injected on the constructor just like the others?", "bodyHTML": "<p dir=\"auto\">Are you using this variable?<br>\nCan it be injected on the constructor just like the others?</p>", "author": "caponetto", "createdAt": "2020-04-23T12:02:29Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java", "diffHunk": "@@ -55,6 +54,8 @@\n     private Elemental2DomUtil elem2Dom;\n     private Event<NotificationEvent> workbenchNotification;\n     private PathUrlFactory pathUrlFactory;\n+    \n+    @Inject PagesTable pagesTable;", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99820b5d5dc802107e6d814671e6632247ea0cf6", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\nindex ce3594c3b..292c98c37 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\n", "chunk": "@@ -54,23 +53,20 @@ public class DataTransferView implements DataTransferScreen.View, IsElement {\n     private Elemental2DomUtil elem2Dom;\n     private Event<NotificationEvent> workbenchNotification;\n     private PathUrlFactory pathUrlFactory;\n-    \n-    @Inject PagesTable pagesTable;\n \n-    public DataTransferView() {\n-    }\n+    public DataTransferView() {}\n \n     @Inject\n     public DataTransferView(\n-            final @DataField HTMLDivElement root,\n-            final @DataField HTMLDivElement fileUploadContainer,\n-            final @DataField HTMLButtonElement btnImport,\n-            final @DataField HTMLButtonElement btnExport,\n-            final @DataField HTMLButtonElement btnGradualExport,\n-            final FileUploadEditor fileUploadEditor,\n-            final Elemental2DomUtil elem2Dom,\n-            final Event<NotificationEvent> workbenchNotification,\n-            final PathUrlFactory pathUrlFactory) {\n+                            final @DataField HTMLDivElement root,\n+                            final @DataField HTMLDivElement fileUploadContainer,\n+                            final @DataField HTMLButtonElement btnImport,\n+                            final @DataField HTMLButtonElement btnExport,\n+                            final @DataField HTMLButtonElement btnGradualExport,\n+                            final FileUploadEditor fileUploadEditor,\n+                            final Elemental2DomUtil elem2Dom,\n+                            final Event<NotificationEvent> workbenchNotification,\n+                            final PathUrlFactory pathUrlFactory) {\n \n         this.root = root;\n         this.fileUploadContainer = fileUploadContainer;\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\nindex 292c98c37..4b01ab092 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\n", "chunk": "@@ -54,19 +56,19 @@ public class DataTransferView implements DataTransferScreen.View, IsElement {\n     private Event<NotificationEvent> workbenchNotification;\n     private PathUrlFactory pathUrlFactory;\n \n-    public DataTransferView() {}\n+    public DataTransferView() {\n+    }\n \n     @Inject\n     public DataTransferView(\n-                            final @DataField HTMLDivElement root,\n-                            final @DataField HTMLDivElement fileUploadContainer,\n-                            final @DataField HTMLButtonElement btnImport,\n-                            final @DataField HTMLButtonElement btnExport,\n-                            final @DataField HTMLButtonElement btnGradualExport,\n-                            final FileUploadEditor fileUploadEditor,\n-                            final Elemental2DomUtil elem2Dom,\n-                            final Event<NotificationEvent> workbenchNotification,\n-                            final PathUrlFactory pathUrlFactory) {\n+            final @DataField HTMLDivElement root,\n+            final @DataField HTMLDivElement fileUploadContainer,\n+            final @DataField HTMLButtonElement btnImport,\n+            final @DataField HTMLButtonElement btnExport,\n+            final FileUploadEditor fileUploadEditor,\n+            final Elemental2DomUtil elem2Dom,\n+            final Event<NotificationEvent> workbenchNotification,\n+            final PathUrlFactory pathUrlFactory) {\n \n         this.root = root;\n         this.fileUploadContainer = fileUploadContainer;\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\nindex 4b01ab092..638b9fc6b 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferView.java\n", "chunk": "@@ -65,6 +66,7 @@ public class DataTransferView implements DataTransferScreen.View, IsElement {\n             final @DataField HTMLDivElement fileUploadContainer,\n             final @DataField HTMLButtonElement btnImport,\n             final @DataField HTMLButtonElement btnExport,\n+            final @DataField HTMLButtonElement btnGradualExport,\n             final FileUploadEditor fileUploadEditor,\n             final Elemental2DomUtil elem2Dom,\n             final Event<NotificationEvent> workbenchNotification,\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MDk3Mg==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413760972", "body": "Consider using i18n for \"Export Wizard\".", "bodyText": "Consider using i18n for \"Export Wizard\".", "bodyHTML": "<p dir=\"auto\">Consider using i18n for \"Export Wizard\".</p>", "author": "caponetto", "createdAt": "2020-04-23T12:10:04Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.uberfire.client.callbacks.Callback;\n+import org.uberfire.ext.widgets.core.client.wizards.AbstractWizard;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPageSelectedEvent;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class ExportWizard extends AbstractWizard {\n+\n+    @Inject\n+    DataSetsWizardPage dataSetsWizardPage;\n+\n+    @Inject\n+    PagesWizardPage pagesWizardPage;\n+\n+    @Inject\n+    ExportSummaryWizardPage exportSummaryWizardPage;\n+\n+    @Inject\n+    Event<WizardPageSelectedEvent> wizardPageSelectedEvent;\n+\n+    private List<WizardPage> wizardPages;\n+\n+    private boolean canConclude;\n+\n+    @PostConstruct\n+    void init() {\n+        wizardPages = new ArrayList<>();\n+        wizardPages.add(dataSetsWizardPage);\n+        wizardPages.add(pagesWizardPage);\n+        wizardPages.add(exportSummaryWizardPage);\n+\n+        exportSummaryWizardPage.setExportSummary(this::getDataTransferExportModel);\n+        exportSummaryWizardPage.setGoToDataSetsCommand(() -> goTo(dataSetsWizardPage));\n+        exportSummaryWizardPage.setGoToPagesCommand(() -> goTo(pagesWizardPage));\n+    }\n+\n+    public void start(DataTransferAssets assets) {\n+        dataSetsWizardPage.setDataSets(assets.getDatasetsDefinitions());\n+        pagesWizardPage.setPages(assets.getPages());\n+\n+        this.start();\n+    }\n+\n+    @Override\n+    public List<WizardPage> getPages() {\n+        return wizardPages;\n+    }\n+\n+    @Override\n+    public Widget getPageWidget(int pageNumber) {\n+        return wizardPages.get(pageNumber).asWidget();\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Export Wizard\";", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99820b5d5dc802107e6d814671e6632247ea0cf6", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\nindex fbfc5fa3c..30cb12b87 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\n", "chunk": "@@ -84,7 +87,7 @@ public class ExportWizard extends AbstractWizard {\n \n     @Override\n     public String getTitle() {\n-        return \"Export Wizard\";\n+        return i18n.exportWizardTitle();\n     }\n \n     @Override\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\ndeleted file mode 100644\nindex 30cb12b87..000000000\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\n+++ /dev/null\n", "chunk": "@@ -1,132 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.annotation.PostConstruct;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.enterprise.event.Event;\n-import javax.enterprise.event.Observes;\n-import javax.inject.Inject;\n-\n-import com.google.gwt.user.client.ui.Widget;\n-import org.dashbuilder.client.cms.resources.i18n.ContentManagerConstants;\n-import org.dashbuilder.transfer.DataTransferAssets;\n-import org.dashbuilder.transfer.DataTransferExportModel;\n-import org.uberfire.client.callbacks.Callback;\n-import org.uberfire.ext.widgets.core.client.wizards.AbstractWizard;\n-import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n-import org.uberfire.ext.widgets.core.client.wizards.WizardPageSelectedEvent;\n-import org.uberfire.mvp.ParameterizedCommand;\n-\n-@ApplicationScoped\n-public class ExportWizard extends AbstractWizard {\n-    \n-    ContentManagerConstants i18n = ContentManagerConstants.INSTANCE;\n-\n-    @Inject\n-    DataSetsWizardPage dataSetsWizardPage;\n-\n-    @Inject\n-    PagesWizardPage pagesWizardPage;\n-\n-    @Inject\n-    ExportSummaryWizardPage exportSummaryWizardPage;\n-\n-    @Inject\n-    Event<WizardPageSelectedEvent> wizardPageSelectedEvent;\n-\n-    private List<WizardPage> wizardPages;\n-\n-    private boolean canConclude;\n-\n-    @PostConstruct\n-    void init() {\n-        wizardPages = new ArrayList<>();\n-        wizardPages.add(dataSetsWizardPage);\n-        wizardPages.add(pagesWizardPage);\n-        wizardPages.add(exportSummaryWizardPage);\n-\n-        exportSummaryWizardPage.setExportSummary(this::getDataTransferExportModel);\n-        exportSummaryWizardPage.setGoToDataSetsCommand(() -> goTo(dataSetsWizardPage));\n-        exportSummaryWizardPage.setGoToPagesCommand(() -> goTo(pagesWizardPage));\n-    }\n-\n-    public void start(DataTransferAssets assets) {\n-        dataSetsWizardPage.setDataSets(assets.getDatasetsDefinitions());\n-        pagesWizardPage.setPages(assets.getPages());\n-\n-        this.start();\n-    }\n-\n-    @Override\n-    public List<WizardPage> getPages() {\n-        return wizardPages;\n-    }\n-\n-    @Override\n-    public Widget getPageWidget(int pageNumber) {\n-        return wizardPages.get(pageNumber).asWidget();\n-    }\n-\n-    @Override\n-    public String getTitle() {\n-        return i18n.exportWizardTitle();\n-    }\n-\n-    @Override\n-    public int getPreferredWidth() {\n-        return 900;\n-    }\n-\n-    @Override\n-    public int getPreferredHeight() {\n-        return 600;\n-    }\n-\n-    @Override\n-    public void isComplete(Callback<Boolean> callback) {\n-        callback.callback(canConclude);\n-    }\n-\n-    private void goTo(WizardPage page) {\n-        wizardPageSelectedEvent.fire(new WizardPageSelectedEvent(page));\n-    }\n-\n-    public DataTransferExportModel getDataTransferExportModel() {\n-        return new DataTransferExportModel(dataSetsWizardPage.getSelectedDataSetDefs(),\n-                                           pagesWizardPage.getSelectedPages(),\n-                                           true);\n-    }\n-\n-    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n-        exportSummaryWizardPage.setCallback(dataTransferExportModelCallback);\n-    }\n-\n-    public void pageChanged(final @Observes WizardPageSelectedEvent event) {\n-        // prepareView is not being called, hence need to call it manually\n-        WizardPage page = event.getSelectedPage();\n-        if (getPages().contains(page)) {\n-            page.prepareView();\n-            this.canConclude = page == exportSummaryWizardPage;\n-            checkPagesState();\n-        }\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\nnew file mode 100644\nindex 000000000..fbfc5fa3c\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\n", "chunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.cms.screen.transfer.export.wizard;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.transfer.DataTransferAssets;\n+import org.dashbuilder.transfer.DataTransferExportModel;\n+import org.uberfire.client.callbacks.Callback;\n+import org.uberfire.ext.widgets.core.client.wizards.AbstractWizard;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPage;\n+import org.uberfire.ext.widgets.core.client.wizards.WizardPageSelectedEvent;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@ApplicationScoped\n+public class ExportWizard extends AbstractWizard {\n+\n+    @Inject\n+    DataSetsWizardPage dataSetsWizardPage;\n+\n+    @Inject\n+    PagesWizardPage pagesWizardPage;\n+\n+    @Inject\n+    ExportSummaryWizardPage exportSummaryWizardPage;\n+\n+    @Inject\n+    Event<WizardPageSelectedEvent> wizardPageSelectedEvent;\n+\n+    private List<WizardPage> wizardPages;\n+\n+    private boolean canConclude;\n+\n+    @PostConstruct\n+    void init() {\n+        wizardPages = new ArrayList<>();\n+        wizardPages.add(dataSetsWizardPage);\n+        wizardPages.add(pagesWizardPage);\n+        wizardPages.add(exportSummaryWizardPage);\n+\n+        exportSummaryWizardPage.setExportSummary(this::getDataTransferExportModel);\n+        exportSummaryWizardPage.setGoToDataSetsCommand(() -> goTo(dataSetsWizardPage));\n+        exportSummaryWizardPage.setGoToPagesCommand(() -> goTo(pagesWizardPage));\n+    }\n+\n+    public void start(DataTransferAssets assets) {\n+        dataSetsWizardPage.setDataSets(assets.getDatasetsDefinitions());\n+        pagesWizardPage.setPages(assets.getPages());\n+\n+        this.start();\n+    }\n+\n+    @Override\n+    public List<WizardPage> getPages() {\n+        return wizardPages;\n+    }\n+\n+    @Override\n+    public Widget getPageWidget(int pageNumber) {\n+        return wizardPages.get(pageNumber).asWidget();\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return \"Export Wizard\";\n+    }\n+\n+    @Override\n+    public int getPreferredWidth() {\n+        return 900;\n+    }\n+\n+    @Override\n+    public int getPreferredHeight() {\n+        return 600;\n+    }\n+\n+    @Override\n+    public void isComplete(Callback<Boolean> callback) {\n+        callback.callback(canConclude);\n+    }\n+\n+    private void goTo(WizardPage page) {\n+        wizardPageSelectedEvent.fire(new WizardPageSelectedEvent(page));\n+    }\n+\n+    public DataTransferExportModel getDataTransferExportModel() {\n+        return new DataTransferExportModel(dataSetsWizardPage.getSelectedDataSetDefs(),\n+                                           pagesWizardPage.getSelectedPages(),\n+                                           true);\n+    }\n+\n+    public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n+        exportSummaryWizardPage.setCallback(dataTransferExportModelCallback);\n+    }\n+\n+    public void pageChanged(final @Observes WizardPageSelectedEvent event) {\n+        // prepareView is not being called, hence need to call it manually\n+        WizardPage page = event.getSelectedPage();\n+        if (getPages().contains(page)) {\n+            page.prepareView();\n+            this.canConclude = page == exportSummaryWizardPage;\n+            checkPagesState();\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "54bf8e0681f81a07315d12d78582583e3c2ab23a", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\nindex fbfc5fa3c..1fce3850f 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/export/wizard/ExportWizard.java\n", "chunk": "@@ -115,15 +118,14 @@ public class ExportWizard extends AbstractWizard {\n     public void setCallback(ParameterizedCommand<DataTransferExportModel> dataTransferExportModelCallback) {\n         exportSummaryWizardPage.setCallback(dataTransferExportModelCallback);\n     }\n-\n-    public void pageChanged(final @Observes WizardPageSelectedEvent event) {\n-        // prepareView is not being called, hence need to call it manually\n-        WizardPage page = event.getSelectedPage();\n-        if (getPages().contains(page)) {\n-            page.prepareView();\n-            this.canConclude = page == exportSummaryWizardPage;\n-            checkPagesState();\n-        }\n+    \n+    @Override\n+    public void pageSelected(int pageNumber) {\n+        super.pageSelected(pageNumber);\n+        WizardPage page = getPages().get(pageNumber);\n+        page.prepareView();\n+        this.canConclude = page == exportSummaryWizardPage;\n+        checkPagesState();\n     }\n \n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2Nzk2Mw==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413767963", "body": "Consider using i18n for \"Loading Export Wizard\".", "bodyText": "Consider using i18n for \"Loading Export Wizard\".", "bodyHTML": "<p dir=\"auto\">Consider using i18n for \"Loading Export Wizard\".</p>", "author": "caponetto", "createdAt": "2020-04-23T12:21:00Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java", "diffHunk": "@@ -70,49 +81,53 @@ public View part() {\n     @PostConstruct\n     public void init() {\n         view.init(this);\n+        exportWizard.setCallback(this::callExportService);\n     }\n \n     public void doExport() {\n-        try {\n-            dataTransferServices.call(\n-                (RemoteCallback<String>) path -> {\n-                    view.exportOK();\n-                    view.download(path);\n-\n-                }, (ErrorCallback<Exception>) (message, throwable) -> {\n-                    view.exportError(throwable);\n-                    return false;\n-\n-                }).doExport();\n+        callExportService(DataTransferExportModel.exportAll());\n+    }\n \n-        } catch (Exception e) {\n-            view.exportError(e);\n-        }\n+    public void doGradualExport() {\n+        busyIndicatorView.showBusyIndicator(\"Loading Export Wizard\");", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99820b5d5dc802107e6d814671e6632247ea0cf6", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex 962b858c3..91fa954b8 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -89,7 +89,7 @@ public class DataTransferScreen {\n     }\n \n     public void doGradualExport() {\n-        busyIndicatorView.showBusyIndicator(\"Loading Export Wizard\");\n+        busyIndicatorView.showBusyIndicator(i18n.loadingExportWizard());\n         dataTransferServices.call((DataTransferAssets v) -> {\n             busyIndicatorView.hideBusyIndicator();\n             exportWizard.start(v);\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex 91fa954b8..f2a08f786 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -81,53 +77,53 @@ public class DataTransferScreen {\n     @PostConstruct\n     public void init() {\n         view.init(this);\n-        exportWizard.setCallback(this::callExportService);\n+        exportCallback = dataTransferExportModel -> {\n+            try {\n+                dataTransferServices.call(\n+                    (RemoteCallback<String>) path -> {\n+                        view.exportOK();\n+                        view.download(path);\n+\n+                    }, (ErrorCallback<Exception>) (message, throwable) -> {\n+                        view.exportError(throwable);\n+                        return false;\n+\n+                    }).doExport(dataTransferExportModel);\n+\n+            } catch (Exception e) {\n+                view.exportError(e);\n+            }\n+        };\n+        dataTransferExportPopUp.setCallback(exportCallback);\n     }\n \n     public void doExport() {\n-        callExportService(DataTransferExportModel.exportAll());\n-    }\n-\n-    public void doGradualExport() {\n-        busyIndicatorView.showBusyIndicator(i18n.loadingExportWizard());\n-        dataTransferServices.call((DataTransferAssets v) -> {\n-            busyIndicatorView.hideBusyIndicator();\n-            exportWizard.start(v);\n-        }, (message, error) -> {\n-            busyIndicatorView.hideBusyIndicator();\n-            view.exportError(error);\n-            return false;\n-        }).assetsToExport();\n+        dataTransferExportPopUp.load();\n     }\n \n     public void doImport() {\n         try {\n             dataTransferServices.call(\n-                                      (RemoteCallback<List<String>>) imported -> {\n-                                          view.importOK();\n-                                          popUp.show(imported);\n+                (RemoteCallback<List<String>>) imported -> {\n+                    view.importOK();\n+                    popUp.show(imported);\n \n-                                      }, (ErrorCallback<Throwable>) (message, throwable) -> {\n-                                          view.importError(throwable);\n-                                          return false;\n+                }, (ErrorCallback<Throwable>) (message, throwable) -> {\n+                    view.importError(throwable);\n+                    return false;\n \n-                                      }).doImport();\n+                }).doImport();\n \n-        } catch (Exception e) {\n-            view.importError(e);\n+            } catch (Exception e) {\n+                view.importError(e);\n         }\n     }\n \n     public interface View extends UberElemental<DataTransferScreen> {\n-\n         void importOK();\n-\n         void exportOK();\n-\n         void importError(Throwable throwable);\n-\n         void exportError(Throwable throwable);\n-\n         void download(String path);\n     }\n \n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex f2a08f786..962b858c3 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -77,53 +81,53 @@ public class DataTransferScreen {\n     @PostConstruct\n     public void init() {\n         view.init(this);\n-        exportCallback = dataTransferExportModel -> {\n-            try {\n-                dataTransferServices.call(\n-                    (RemoteCallback<String>) path -> {\n-                        view.exportOK();\n-                        view.download(path);\n-\n-                    }, (ErrorCallback<Exception>) (message, throwable) -> {\n-                        view.exportError(throwable);\n-                        return false;\n-\n-                    }).doExport(dataTransferExportModel);\n-\n-            } catch (Exception e) {\n-                view.exportError(e);\n-            }\n-        };\n-        dataTransferExportPopUp.setCallback(exportCallback);\n+        exportWizard.setCallback(this::callExportService);\n     }\n \n     public void doExport() {\n-        dataTransferExportPopUp.load();\n+        callExportService(DataTransferExportModel.exportAll());\n+    }\n+\n+    public void doGradualExport() {\n+        busyIndicatorView.showBusyIndicator(\"Loading Export Wizard\");\n+        dataTransferServices.call((DataTransferAssets v) -> {\n+            busyIndicatorView.hideBusyIndicator();\n+            exportWizard.start(v);\n+        }, (message, error) -> {\n+            busyIndicatorView.hideBusyIndicator();\n+            view.exportError(error);\n+            return false;\n+        }).assetsToExport();\n     }\n \n     public void doImport() {\n         try {\n             dataTransferServices.call(\n-                (RemoteCallback<List<String>>) imported -> {\n-                    view.importOK();\n-                    popUp.show(imported);\n+                                      (RemoteCallback<List<String>>) imported -> {\n+                                          view.importOK();\n+                                          popUp.show(imported);\n \n-                }, (ErrorCallback<Throwable>) (message, throwable) -> {\n-                    view.importError(throwable);\n-                    return false;\n+                                      }, (ErrorCallback<Throwable>) (message, throwable) -> {\n+                                          view.importError(throwable);\n+                                          return false;\n \n-                }).doImport();\n+                                      }).doImport();\n \n-            } catch (Exception e) {\n-                view.importError(e);\n+        } catch (Exception e) {\n+            view.importError(e);\n         }\n     }\n \n     public interface View extends UberElemental<DataTransferScreen> {\n+\n         void importOK();\n+\n         void exportOK();\n+\n         void importError(Throwable throwable);\n+\n         void exportError(Throwable throwable);\n+\n         void download(String path);\n     }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MTIwNw==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r413771207", "body": "Could this call take noticeable time? If so, consider using `BusyIndicator` here as well.", "bodyText": "Could this call take noticeable time? If so, consider using BusyIndicator here as well.", "bodyHTML": "<p dir=\"auto\">Could this call take noticeable time? If so, consider using <code>BusyIndicator</code> here as well.</p>", "author": "caponetto", "createdAt": "2020-04-23T12:25:53Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java", "diffHunk": "@@ -127,4 +142,22 @@ public String getExportFileName() {\n     public String getImportFileName() {\n         return DataTransferServices.IMPORT_FILE_NAME;\n     }\n-}\n+\n+    private void callExportService(DataTransferExportModel dataTransferExportModel) {\n+        try {\n+            dataTransferServices.call((RemoteCallback<String>) path -> {", "originalCommit": "d69d8664df26eb75dd81da41958168b149dde09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99820b5d5dc802107e6d814671e6632247ea0cf6", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex 962b858c3..91fa954b8 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -144,12 +144,15 @@ public class DataTransferScreen {\n     }\n \n     private void callExportService(DataTransferExportModel dataTransferExportModel) {\n+        busyIndicatorView.showBusyIndicator(i18n.preparingExportDownload());\n         try {\n             dataTransferServices.call((RemoteCallback<String>) path -> {\n+                busyIndicatorView.hideBusyIndicator();\n                 view.exportOK();\n                 view.download(path);\n \n             }, (ErrorCallback<Exception>) (message, throwable) -> {\n+                busyIndicatorView.hideBusyIndicator();\n                 view.exportError(throwable);\n                 return false;\n \n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex 91fa954b8..f2a08f786 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -142,25 +138,4 @@ public class DataTransferScreen {\n     public String getImportFileName() {\n         return DataTransferServices.IMPORT_FILE_NAME;\n     }\n-\n-    private void callExportService(DataTransferExportModel dataTransferExportModel) {\n-        busyIndicatorView.showBusyIndicator(i18n.preparingExportDownload());\n-        try {\n-            dataTransferServices.call((RemoteCallback<String>) path -> {\n-                busyIndicatorView.hideBusyIndicator();\n-                view.exportOK();\n-                view.download(path);\n-\n-            }, (ErrorCallback<Exception>) (message, throwable) -> {\n-                busyIndicatorView.hideBusyIndicator();\n-                view.exportError(throwable);\n-                return false;\n-\n-            }).doExport(dataTransferExportModel);\n-\n-        } catch (Exception e) {\n-            view.exportError(e);\n-        }\n-    }\n-\n-}\n\\ No newline at end of file\n+}\n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\nindex f2a08f786..962b858c3 100644\n--- a/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n+++ b/dashbuilder/dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/screen/transfer/DataTransferScreen.java\n", "chunk": "@@ -138,4 +142,22 @@ public class DataTransferScreen {\n     public String getImportFileName() {\n         return DataTransferServices.IMPORT_FILE_NAME;\n     }\n-}\n+\n+    private void callExportService(DataTransferExportModel dataTransferExportModel) {\n+        try {\n+            dataTransferServices.call((RemoteCallback<String>) path -> {\n+                view.exportOK();\n+                view.download(path);\n+\n+            }, (ErrorCallback<Exception>) (message, throwable) -> {\n+                view.exportError(throwable);\n+                return false;\n+\n+            }).doExport(dataTransferExportModel);\n+\n+        } catch (Exception e) {\n+            view.exportError(e);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}, {"oid": "99820b5d5dc802107e6d814671e6632247ea0cf6", "url": "https://github.com/kiegroup/appformer/commit/99820b5d5dc802107e6d814671e6632247ea0cf6", "message": "i18n correctly and minor corrections", "committedDate": "2020-04-24T20:48:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1NTE2Ng==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r417255166", "body": "```suggestion\r\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 202 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> <span class=\"pl-c1 x x-first x-last\">202</span> <span class=\"pl-smi\">Red</span> <span class=\"pl-smi\">Hat</span>, <span class=\"pl-smi\">Inc</span>. and<span class=\"pl-k\">/</span>or its affiliates.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> <span class=\"pl-c1 x x-first x-last\">2020</span> <span class=\"pl-smi\">Red</span> <span class=\"pl-smi\">Hat</span>, <span class=\"pl-smi\">Inc</span>. and<span class=\"pl-k\">/</span>or its affiliates.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "caponetto", "createdAt": "2020-04-29T11:49:15Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 202 Red Hat, Inc. and/or its affiliates.", "originalCommit": "fcf9c5b4296277f31107e6642cc5d30b8db6fe1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\nindex 295d99908..089d4a2a9 100644\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 202 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\ndeleted file mode 100644\nindex 089d4a2a9..000000000\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n+++ /dev/null\n", "chunk": "@@ -1,40 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.dashbuilder.transfer;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.jboss.errai.bus.server.annotations.Remote;\n-\n-/**\n- * Perform validations on an ExportModel\n- *\n- */\n-@Remote\n-public interface ExportModelValidationService {\n-\n-    /**\n-     * Check if there is datasets not exported for the given export model\n-     * \n-     * @param exportModel\n-     * The export model to be validated\n-     * @return\n-     * A map of pages with missing dependencies and the list of dependencies for each page.\n-     */\n-    Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel);\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "d863679893a098fd2e06912a33033cc54b1ac273", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\nnew file mode 100644\nindex 000000000..295d99908\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n", "chunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 202 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.transfer;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jboss.errai.bus.server.annotations.Remote;\n+\n+/**\n+ * Perform validations on an ExportModel\n+ *\n+ */\n+@Remote\n+public interface ExportModelValidationService {\n+\n+    /**\n+     * Check if there is datasets not exported for the given export model\n+     * \n+     * @param exportModel\n+     * @return\n+     */\n+    Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel);\n+\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "61a3f5760e97054e0be085b7a03ac7451dd1841a", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\nindex 295d99908..089d4a2a9 100644\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n", "chunk": "@@ -31,7 +31,9 @@ public interface ExportModelValidationService {\n      * Check if there is datasets not exported for the given export model\n      * \n      * @param exportModel\n+     * The export model to be validated\n      * @return\n+     * A map of pages with missing dependencies and the list of dependencies for each page.\n      */\n     Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel);\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1NTMwMA==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r417255300", "body": "```suggestion\r\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 202 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> <span class=\"pl-c1 x x-first x-last\">202</span> <span class=\"pl-smi\">Red</span> <span class=\"pl-smi\">Hat</span>, <span class=\"pl-smi\">Inc</span>. and<span class=\"pl-k\">/</span>or its affiliates.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> <span class=\"pl-c1 x x-first x-last\">2020</span> <span class=\"pl-smi\">Red</span> <span class=\"pl-smi\">Hat</span>, <span class=\"pl-smi\">Inc</span>. and<span class=\"pl-k\">/</span>or its affiliates.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "caponetto", "createdAt": "2020-04-29T11:49:31Z", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 202 Red Hat, Inc. and/or its affiliates.", "originalCommit": "fcf9c5b4296277f31107e6642cc5d30b8db6fe1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\nindex 8cb16e327..323cd149d 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 202 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\ndeleted file mode 100644\nindex 323cd149d..000000000\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,87 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.dashbuilder.transfer;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import org.dashbuilder.dataset.def.DataSetDef;\n-import org.dashbuilder.displayer.json.DisplayerSettingsJSONMarshaller;\n-import org.dashbuilder.navigation.service.PerspectivePluginServices;\n-import org.jboss.errai.bus.server.annotations.Service;\n-\n-@Service\n-@ApplicationScoped\n-public class ExportModelValidationServiceImpl implements ExportModelValidationService {\n-\n-    PerspectivePluginServices perspectivePluginServices;\n-\n-    DisplayerSettingsJSONMarshaller marshaller;\n-\n-    public ExportModelValidationServiceImpl() {}\n-\n-    @Inject\n-    public ExportModelValidationServiceImpl(PerspectivePluginServices perspectivePluginServices) {\n-        this(perspectivePluginServices, DisplayerSettingsJSONMarshaller.get());\n-    }\n-\n-    ExportModelValidationServiceImpl(PerspectivePluginServices perspectivePluginServices,\n-                                     DisplayerSettingsJSONMarshaller marshaller) {\n-        this.perspectivePluginServices = perspectivePluginServices;\n-        this.marshaller = marshaller;\n-    }\n-\n-    @Override\n-    public Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel) {\n-        Map<String, List<String>> deps = exportModel.getPages()\n-                                                    .stream()\n-                                                    .collect(Collectors.toMap(p -> p,\n-                                                                              p -> datasetsUsedInPage(p, exportModel)));\n-\n-        deps.entrySet().removeIf(e -> e.getValue().isEmpty());\n-        return deps;\n-    }\n-\n-    private List<String> datasetsUsedInPage(String p, DataTransferExportModel exportModel) {\n-        List<DataSetDef> exportedDefs = exportModel.getDatasetDefinitions();\n-        return allDataSetsFromPage(p).filter(uuid -> isDataSetMissing(uuid, exportedDefs))\n-                                     .distinct()\n-                                     .collect(Collectors.toList());\n-    }\n-\n-    private boolean isDataSetMissing(String uuid, List<DataSetDef> exportedDefs) {\n-        return exportedDefs.isEmpty() || exportedDefs.stream().noneMatch(ds -> ds.getUUID().equals(uuid));\n-    }\n-\n-    private Stream<String> allDataSetsFromPage(String p) {\n-        return perspectivePluginServices.getLayoutTemplate(p)\n-                                        .getRows().stream()\n-                                        .flatMap(r -> r.getLayoutColumns().stream())\n-                                        .flatMap(cl -> cl.getLayoutComponents().stream())\n-                                        .map(lc -> lc.getProperties().get(\"json\"))\n-                                        .filter(Objects::nonNull)\n-                                        .map(marshaller::fromJsonString)\n-                                        .map(settings -> settings.getDataSetLookup().getDataSetUUID());\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "d863679893a098fd2e06912a33033cc54b1ac273", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\nnew file mode 100644\nindex 000000000..8cb16e327\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\n", "chunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 202 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.transfer;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.displayer.json.DisplayerSettingsJSONMarshaller;\n+import org.dashbuilder.navigation.service.PerspectivePluginServices;\n+import org.jboss.errai.bus.server.annotations.Service;\n+\n+@Service\n+@ApplicationScoped\n+public class ExportModelValidationServiceImpl implements ExportModelValidationService {\n+\n+    PerspectivePluginServices perspectivePluginServices;\n+\n+    DisplayerSettingsJSONMarshaller marshaller;\n+\n+    public ExportModelValidationServiceImpl() {}\n+\n+    @Inject\n+    public ExportModelValidationServiceImpl(PerspectivePluginServices perspectivePluginServices) {\n+        this(perspectivePluginServices, DisplayerSettingsJSONMarshaller.get());\n+    }\n+\n+    ExportModelValidationServiceImpl(PerspectivePluginServices perspectivePluginServices,\n+                                     DisplayerSettingsJSONMarshaller marshaller) {\n+        this.perspectivePluginServices = perspectivePluginServices;\n+        this.marshaller = marshaller;\n+    }\n+\n+    @Override\n+    public Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel) {\n+        Map<String, List<String>> deps = exportModel.getPages()\n+                                                    .stream()\n+                                                    .collect(Collectors.toMap(p -> p,\n+                                                                              p -> datasetsUsedInPage(p, exportModel)));\n+\n+        deps.entrySet().removeIf(e -> e.getValue().isEmpty());\n+        return deps;\n+    }\n+\n+    private List<String> datasetsUsedInPage(String p, DataTransferExportModel exportModel) {\n+        List<DataSetDef> exportedDefs = exportModel.getDatasetDefinitions();\n+        return allDataSetsFromPage(p).filter(uuid -> isDataSetMissing(uuid, exportedDefs))\n+                                     .distinct()\n+                                     .collect(Collectors.toList());\n+    }\n+\n+    private boolean isDataSetMissing(String uuid, List<DataSetDef> exportedDefs) {\n+        return exportedDefs.isEmpty() || exportedDefs.stream().noneMatch(ds -> ds.getUUID().equals(uuid));\n+    }\n+\n+    private Stream<String> allDataSetsFromPage(String p) {\n+        return perspectivePluginServices.getLayoutTemplate(p)\n+                                        .getRows().stream()\n+                                        .flatMap(r -> r.getLayoutColumns().stream())\n+                                        .flatMap(cl -> cl.getLayoutComponents().stream())\n+                                        .map(lc -> lc.getProperties().get(\"json\"))\n+                                        .filter(Objects::nonNull)\n+                                        .map(marshaller::fromJsonString)\n+                                        .map(settings -> settings.getDataSetLookup().getDataSetUUID());\n+    }\n+\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "9582833a1dd2938ed65dfbcb8cf0ce7f11b6d964", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\nindex 8cb16e327..14774a5fd 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/ExportModelValidationServiceImpl.java\n", "chunk": "@@ -81,7 +87,11 @@ public class ExportModelValidationServiceImpl implements ExportModelValidationSe\n                                         .map(lc -> lc.getProperties().get(\"json\"))\n                                         .filter(Objects::nonNull)\n                                         .map(marshaller::fromJsonString)\n-                                        .map(settings -> settings.getDataSetLookup().getDataSetUUID());\n+                                        .map(DisplayerSettings::getDataSetLookup)\n+                                        .filter(Objects::nonNull)\n+                                        .map(DataSetLookup::getDataSetUUID)\n+                                        .filter(Objects::nonNull)\n+                                        ;\n     }\n \n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1NTg2MQ==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r417255861", "body": "Consider adding what's returned.", "bodyText": "Consider adding what's returned.", "bodyHTML": "<p dir=\"auto\">Consider adding what's returned.</p>", "author": "caponetto", "createdAt": "2020-04-29T11:50:44Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 202 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.transfer;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jboss.errai.bus.server.annotations.Remote;\n+\n+/**\n+ * Perform validations on an ExportModel\n+ *\n+ */\n+@Remote\n+public interface ExportModelValidationService {\n+\n+    /**\n+     * Check if there is datasets not exported for the given export model\n+     * \n+     * @param exportModel\n+     * @return", "originalCommit": "fcf9c5b4296277f31107e6642cc5d30b8db6fe1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\nindex 295d99908..089d4a2a9 100644\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n", "chunk": "@@ -31,7 +31,9 @@ public interface ExportModelValidationService {\n      * Check if there is datasets not exported for the given export model\n      * \n      * @param exportModel\n+     * The export model to be validated\n      * @return\n+     * A map of pages with missing dependencies and the list of dependencies for each page.\n      */\n     Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel);\n \n", "next_change": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\ndeleted file mode 100644\nindex 089d4a2a9..000000000\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n+++ /dev/null\n", "chunk": "@@ -1,40 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.dashbuilder.transfer;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.jboss.errai.bus.server.annotations.Remote;\n-\n-/**\n- * Perform validations on an ExportModel\n- *\n- */\n-@Remote\n-public interface ExportModelValidationService {\n-\n-    /**\n-     * Check if there is datasets not exported for the given export model\n-     * \n-     * @param exportModel\n-     * The export model to be validated\n-     * @return\n-     * A map of pages with missing dependencies and the list of dependencies for each page.\n-     */\n-    Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel);\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "d863679893a098fd2e06912a33033cc54b1ac273", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\nnew file mode 100644\nindex 000000000..295d99908\n--- /dev/null\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n", "chunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 202 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.transfer;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jboss.errai.bus.server.annotations.Remote;\n+\n+/**\n+ * Perform validations on an ExportModel\n+ *\n+ */\n+@Remote\n+public interface ExportModelValidationService {\n+\n+    /**\n+     * Check if there is datasets not exported for the given export model\n+     * \n+     * @param exportModel\n+     * @return\n+     */\n+    Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel);\n+\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "61a3f5760e97054e0be085b7a03ac7451dd1841a", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\nindex 295d99908..089d4a2a9 100644\n--- a/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n+++ b/dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/transfer/ExportModelValidationService.java\n", "chunk": "@@ -31,7 +31,9 @@ public interface ExportModelValidationService {\n      * Check if there is datasets not exported for the given export model\n      * \n      * @param exportModel\n+     * The export model to be validated\n      * @return\n+     * A map of pages with missing dependencies and the list of dependencies for each page.\n      */\n     Map<String, List<String>> checkMissingDatasets(DataTransferExportModel exportModel);\n \n", "next_change": null}]}}]}}]}}]}}, {"oid": "82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "url": "https://github.com/kiegroup/appformer/commit/82d355a81ad264dbe5d6cc86c238cb1fb5916d66", "message": "Comments minor fixes", "committedDate": "2020-05-04T20:17:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3OTc4Ng==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r420679786", "body": "is the `isExportNavigation()` still relevant? the navigation is always exported in the custom export", "bodyText": "is the isExportNavigation() still relevant? the navigation is always exported in the custom export", "bodyHTML": "<p dir=\"auto\">is the <code>isExportNavigation()</code> still relevant? the navigation is always exported in the custom export</p>", "author": "barboras7", "createdAt": "2020-05-06T10:09:18Z", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java", "diffHunk": "@@ -108,22 +114,37 @@ public DataTransferServicesImpl(\n     }\n \n     @Override\n-    public String doExport() throws java.io.IOException {\n-        String zipLocation = new StringBuilder()\n-            .append(System.getProperty(\"java.io.tmpdir\"))\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .append(EXPORT_FILE_NAME)\n-            .toString();\n+    public String doExport(DataTransferExportModel exportModel) throws java.io.IOException {\n+        String zipLocation = new StringBuilder().append(TMP_DIR)\n+                                                .append(File.separator)\n+                                                .append(FILE_PATH)\n+                                                .append(File.separator)\n+                                                .append(EXPORT_FILE_NAME)\n+                                                .toString();\n+\n+        Predicate<Path> readmeFilter = p -> p.toString().toLowerCase().endsWith(\"readme.md\");\n+        Predicate<Path> datasetsFilter = def -> true;\n+        Predicate<Path> pagesFilter = page -> true;\n+        boolean exportNavigation = true;\n+\n+        if (!exportModel.isExportAll()) {\n+            datasetsFilter = filterDatasets(exportModel.getDatasetDefinitions());\n+            pagesFilter = filterPages(exportModel.getPages());\n+            exportNavigation = exportModel.isExportNavigation();", "originalCommit": "b07f076cea68660be763a5d5056e9d928657876a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzOTMzNg==", "url": "https://github.com/kiegroup/appformer/pull/933#discussion_r420939336", "bodyText": "I would let it in case we want to allow users to select this option in future. For example, I did create [1] so users could export a single page along its dependencies so they can it on runtime. In that case navigation would not be needed.\n[1] https://issues.redhat.com/browse/AF-2459", "author": "jesuino", "createdAt": "2020-05-06T16:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3OTc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "65d2327089f0cd11e8d2a192e16d72914b344064", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 8f0ea1027..450ef58a8 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -114,37 +108,22 @@ public class DataTransferServicesImpl implements DataTransferServices {\n     }\n \n     @Override\n-    public String doExport(DataTransferExportModel exportModel) throws java.io.IOException {\n-        String zipLocation = new StringBuilder().append(TMP_DIR)\n-                                                .append(File.separator)\n-                                                .append(FILE_PATH)\n-                                                .append(File.separator)\n-                                                .append(EXPORT_FILE_NAME)\n-                                                .toString();\n-\n-        Predicate<Path> readmeFilter = p -> p.toString().toLowerCase().endsWith(\"readme.md\");\n-        Predicate<Path> datasetsFilter = def -> true;\n-        Predicate<Path> pagesFilter = page -> true;\n-        boolean exportNavigation = true;\n-\n-        if (!exportModel.isExportAll()) {\n-            datasetsFilter = filterDatasets(exportModel.getDatasetDefinitions());\n-            pagesFilter = filterPages(exportModel.getPages());\n-            exportNavigation = exportModel.isExportNavigation();\n-        }\n+    public String doExport() throws java.io.IOException {\n+        String zipLocation = new StringBuilder()\n+            .append(System.getProperty(\"java.io.tmpdir\"))\n+            .append(File.separator)\n+            .append(FILE_PATH)\n+            .append(File.separator)\n+            .append(EXPORT_FILE_NAME)\n+            .toString();\n \n         new File(zipLocation).getParentFile().mkdirs();\n         FileOutputStream fos = new FileOutputStream(zipLocation);\n         ZipOutputStream zos = new ZipOutputStream(fos);\n \n-        zipFileSystem(datasetsFS, zos, readmeFilter.or(datasetsFilter));\n-        zipFileSystem(perspectivesFS, zos, readmeFilter.or(pagesFilter));\n-\n-        if (exportNavigation) {\n-            zipFileSystem(navigationFS, zos, p -> true);\n-        } else {\n-            zipFileSystem(navigationFS, zos, readmeFilter);\n-        }\n+        zipFileSystem(datasetsFS, zos);\n+        zipFileSystem(perspectivesFS, zos);\n+        zipFileSystem(navigationFS, zos);\n \n         zipFile(createVersionFile(), \"VERSION\", zos);\n \n", "next_change": {"commit": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "changed_code": [{"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 450ef58a8..d386108f3 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -108,22 +113,37 @@ public class DataTransferServicesImpl implements DataTransferServices {\n     }\n \n     @Override\n-    public String doExport() throws java.io.IOException {\n-        String zipLocation = new StringBuilder()\n-            .append(System.getProperty(\"java.io.tmpdir\"))\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .append(EXPORT_FILE_NAME)\n-            .toString();\n+    public String doExport(DataTransferExportModel exportModel) throws java.io.IOException {\n+        String zipLocation = new StringBuilder().append(System.getProperty(\"java.io.tmpdir\"))\n+                                                .append(File.separator)\n+                                                .append(FILE_PATH)\n+                                                .append(File.separator)\n+                                                .append(EXPORT_FILE_NAME)\n+                                                .toString();\n+\n+        Predicate<Path> readmeFilter = p -> p.toString().toLowerCase().endsWith(\"readme.md\");\n+        Predicate<Path> datasetsFilter = def -> true;\n+        Predicate<Path> pagesFilter = page -> true;\n+        boolean exportNavigation = true;\n+\n+        if (!exportModel.isExportAll()) {\n+            datasetsFilter = filterDatasets(exportModel.getDatasetDefinitions());\n+            pagesFilter = filterPages(exportModel.getPages());\n+            exportNavigation = exportModel.isExportNavigation();\n+        }\n \n         new File(zipLocation).getParentFile().mkdirs();\n         FileOutputStream fos = new FileOutputStream(zipLocation);\n         ZipOutputStream zos = new ZipOutputStream(fos);\n \n-        zipFileSystem(datasetsFS, zos);\n-        zipFileSystem(perspectivesFS, zos);\n-        zipFileSystem(navigationFS, zos);\n+        zipFileSystem(datasetsFS, zos, readmeFilter.or(datasetsFilter));\n+        zipFileSystem(perspectivesFS, zos, readmeFilter.or(pagesFilter));\n+\n+        if (exportNavigation) {\n+            zipFileSystem(navigationFS, zos, p -> true);\n+        } else {\n+            zipFileSystem(navigationFS, zos, readmeFilter);\n+        }\n \n         zipFile(createVersionFile(), \"VERSION\", zos);\n \n", "next_change": null}, {"header": "diff --git a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\nindex 450ef58a8..d386108f3 100644\n--- a/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n+++ b/dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java\n", "chunk": "@@ -132,38 +152,34 @@ public class DataTransferServicesImpl implements DataTransferServices {\n \n         moveZipToFileSystem(zipLocation, systemFS);\n \n-        return new StringBuilder()\n-            .append(SpacesAPI.Scheme.DEFAULT)\n-            .append(\"://\")\n-            .append(systemFS.getName())\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .append(EXPORT_FILE_NAME)\n-            .toString();\n+        return new StringBuilder().append(SpacesAPI.Scheme.GIT)\n+                                  .append(\"://\")\n+                                  .append(systemFS.getName())\n+                                  .append(File.separator)\n+                                  .append(FILE_PATH)\n+                                  .append(File.separator)\n+                                  .append(EXPORT_FILE_NAME)\n+                                  .toString();\n     }\n \n     @Override\n     public List<String> doImport() throws Exception {\n         List<String> imported = new ArrayList<>();\n \n-        Path root = Paths.get(\n-            URI.create(\n-                new StringBuilder()\n-                    .append(SpacesAPI.Scheme.DEFAULT)\n-                    .append(\"://\")\n-                    .append(systemFS.getName())\n-                    .append(File.separator)\n-                    .toString()));\n+        Path root = Paths.get(URI.create(new StringBuilder().append(SpacesAPI.Scheme.GIT)\n+                                                            .append(\"://\")\n+                                                            .append(systemFS.getName())\n+                                                            .append(File.separator)\n+                                                            .toString()));\n \n-        String expectedPath = new StringBuilder()\n-            .append(File.separator)\n-            .append(FILE_PATH)\n-            .append(File.separator)\n-            .append(IMPORT_FILE_NAME)\n-            .toString();\n+        String expectedPath = new StringBuilder().append(File.separator)\n+                                                 .append(FILE_PATH)\n+                                                 .append(File.separator)\n+                                                 .append(IMPORT_FILE_NAME)\n+                                                 .toString();\n \n         Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+\n             @Override\n             public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {\n                 if (!path.toString().equalsIgnoreCase(expectedPath)) {\n", "next_change": null}]}}]}}, {"oid": "65d2327089f0cd11e8d2a192e16d72914b344064", "url": "https://github.com/kiegroup/appformer/commit/65d2327089f0cd11e8d2a192e16d72914b344064", "message": "AF-2456: Support Gradual Export in Data Transfer API", "committedDate": "2020-05-11T13:06:15Z", "type": "commit"}, {"oid": "4a0d3d4c77b671e9acd4c3e6b092bc1a1a5dbb4b", "url": "https://github.com/kiegroup/appformer/commit/4a0d3d4c77b671e9acd4c3e6b092bc1a1a5dbb4b", "message": "Export navigation adjustments", "committedDate": "2020-05-11T13:06:15Z", "type": "commit"}, {"oid": "2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "url": "https://github.com/kiegroup/appformer/commit/2bb1e5354d8b2d4249b75e87a0d5e4cb8761a924", "message": "Changing from PopUp to Wizard", "committedDate": "2020-05-11T13:09:23Z", "type": "commit"}, {"oid": "273f310214667b23f4cc2c172072c174f7d0edfc", "url": "https://github.com/kiegroup/appformer/commit/273f310214667b23f4cc2c172072c174f7d0edfc", "message": "i18n correctly and minor corrections", "committedDate": "2020-05-11T13:10:03Z", "type": "commit"}, {"oid": "d863679893a098fd2e06912a33033cc54b1ac273", "url": "https://github.com/kiegroup/appformer/commit/d863679893a098fd2e06912a33033cc54b1ac273", "message": "AF-2458: Validate Exported Dashboards", "committedDate": "2020-05-11T13:10:03Z", "type": "commit"}, {"oid": "61a3f5760e97054e0be085b7a03ac7451dd1841a", "url": "https://github.com/kiegroup/appformer/commit/61a3f5760e97054e0be085b7a03ac7451dd1841a", "message": "Comments minor fixes", "committedDate": "2020-05-11T13:10:04Z", "type": "commit"}, {"oid": "54bf8e0681f81a07315d12d78582583e3c2ab23a", "url": "https://github.com/kiegroup/appformer/commit/54bf8e0681f81a07315d12d78582583e3c2ab23a", "message": "Fix on page select", "committedDate": "2020-05-11T13:10:04Z", "type": "commit"}, {"oid": "f47be2a2c35557d63568897e9899406ec1257cc5", "url": "https://github.com/kiegroup/appformer/commit/f47be2a2c35557d63568897e9899406ec1257cc5", "message": "Removing Warning state and improving export wizard", "committedDate": "2020-05-11T13:10:04Z", "type": "commit"}, {"oid": "9582833a1dd2938ed65dfbcb8cf0ce7f11b6d964", "url": "https://github.com/kiegroup/appformer/commit/9582833a1dd2938ed65dfbcb8cf0ce7f11b6d964", "message": "Avoid validation of null UUID", "committedDate": "2020-05-11T13:10:04Z", "type": "commit"}, {"oid": "83584de59e0e5a2e847d4ee97661fbf3fa8a431d", "url": "https://github.com/kiegroup/appformer/commit/83584de59e0e5a2e847d4ee97661fbf3fa8a431d", "message": "leftovers after rebase", "committedDate": "2020-05-11T17:33:35Z", "type": "commit"}, {"oid": "83584de59e0e5a2e847d4ee97661fbf3fa8a431d", "url": "https://github.com/kiegroup/appformer/commit/83584de59e0e5a2e847d4ee97661fbf3fa8a431d", "message": "leftovers after rebase", "committedDate": "2020-05-11T17:33:35Z", "type": "forcePushed"}, {"oid": "35eeb29f56eb660ce71d6716279860b6ea5c1274", "url": "https://github.com/kiegroup/appformer/commit/35eeb29f56eb660ce71d6716279860b6ea5c1274", "message": "Add data transfer to a Dashbuilder menu", "committedDate": "2020-05-11T17:55:54Z", "type": "commit"}]}