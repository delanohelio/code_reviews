{"pr_number": 891, "pr_title": "Http extension", "pr_author": "randomboolean", "pr_createdAt": "2020-12-18T21:03:43Z", "pr_url": "https://github.com/senx/warp10-platform/pull/891", "timeline": [{"oid": "597ba9cc61d0c7600de0a84106cd58cb47f93f77", "url": "https://github.com/senx/warp10-platform/commit/597ba9cc61d0c7600de0a84106cd58cb47f93f77", "message": "refactor URLFETCH extension to HTTP extension", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "70f7a55f7ac3f0a5ca9416ab68f4a21a9a709986", "url": "https://github.com/senx/warp10-platform/commit/70f7a55f7ac3f0a5ca9416ab68f4a21a9a709986", "message": "add back URLFETCH extension", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "3bd4ba087c37d68af070ad3fd92a7a7a77f05d24", "url": "https://github.com/senx/warp10-platform/commit/3bd4ba087c37d68af070ad3fd92a7a7a77f05d24", "message": "refactor to use formatted design pattern", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "0ebac0ae369e0b5b04f376d4d77b101e729cc361", "url": "https://github.com/senx/warp10-platform/commit/0ebac0ae369e0b5b04f376d4d77b101e729cc361", "message": "add capability to HTTP", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "5ff2a6e86c88dace356ddab30297805e7dff25ba", "url": "https://github.com/senx/warp10-platform/commit/5ff2a6e86c88dace356ddab30297805e7dff25ba", "message": "handle arguments", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "cf668197948071dfc54415c59c5d4fb68679f04d", "url": "https://github.com/senx/warp10-platform/commit/cf668197948071dfc54415c59c5d4fb68679f04d", "message": "change anum", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "3d2230053edbf159a0a36599a6a963d018cbebb1", "url": "https://github.com/senx/warp10-platform/commit/3d2230053edbf159a0a36599a6a963d018cbebb1", "message": "add every method to HTTP", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "f74bba9d00999e84f04c32c27c912dea2a67797e", "url": "https://github.com/senx/warp10-platform/commit/f74bba9d00999e84f04c32c27c912dea2a67797e", "message": "bugfix on HTTP capability", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "0ca8da93d73359c33b0ce13247fd36ac31bf5383", "url": "https://github.com/senx/warp10-platform/commit/0ca8da93d73359c33b0ce13247fd36ac31bf5383", "message": "dep nit", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "c6449ea0c25aea6533c6abca13871ded1a21ae9f", "url": "https://github.com/senx/warp10-platform/commit/c6449ea0c25aea6533c6abca13871ded1a21ae9f", "message": "update conf templates", "committedDate": "2020-12-18T20:49:11Z", "type": "commit"}, {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a", "url": "https://github.com/senx/warp10-platform/commit/822e405ec4807f902d2e351d438174bd0ab9678a", "message": "fix check permission for HTTP", "committedDate": "2020-12-18T21:00:54Z", "type": "commit"}, {"oid": "4ccea80f8cbe3b8071f5c7a38641cbc5a46eb452", "url": "https://github.com/senx/warp10-platform/commit/4ccea80f8cbe3b8071f5c7a38641cbc5a46eb452", "message": "Typo", "committedDate": "2020-12-19T08:31:39Z", "type": "commit"}, {"oid": "d33061df5b124a215e4956ac26a792fc500aae86", "url": "https://github.com/senx/warp10-platform/commit/d33061df5b124a215e4956ac26a792fc500aae86", "message": "Fix doc", "committedDate": "2020-12-19T08:34:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDIxNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210215", "body": "2020", "bodyText": "2020", "bodyHTML": "<p dir=\"auto\">2020</p>", "author": "hbs", "createdAt": "2020-12-19T08:22:24Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDMyNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210325", "body": "Use extends NamedWarpScriptFunction implements WarpScriptStackFunction for clarity. The FormattedWarpScriptFunction approach does cripple the overall readability and may be removed in future versions of Warp 10.", "bodyText": "Use extends NamedWarpScriptFunction implements WarpScriptStackFunction for clarity. The FormattedWarpScriptFunction approach does cripple the overall readability and may be removed in future versions of Warp 10.", "bodyHTML": "<p dir=\"auto\">Use extends NamedWarpScriptFunction implements WarpScriptStackFunction for clarity. The FormattedWarpScriptFunction approach does cripple the overall readability and may be removed in future versions of Warp 10.</p>", "author": "hbs", "createdAt": "2020-12-19T08:23:33Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxNzUwMg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546217502", "bodyText": "I think after knowing how to use the FormattedWarpScriptFunction class it is the opposite. I find it handy to declare functions with multiple arguments to retrieve from the stack and handle defaults, while also hiding the stack syntax particularity. Also it is convenient to generate documentation files.\nMaybe the logic of this class can be transferred to a stack method: stack.retrieveArguments(args)\nAnd documentation generation to a function of args, output and function.", "author": "randomboolean", "createdAt": "2020-12-19T09:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -38,12 +38,11 @@ import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Properties;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.locks.ReentrantLock;\n \n /**\n- * Apply an HTTP method over an url\n+ * Send an HTTP request to an url\n  */\n public class HTTP extends FormattedWarpScriptFunction {\n \n", "next_change": {"commit": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..a09a8b7f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -34,12 +34,10 @@ import java.net.HttpURLConnection;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.locks.ReentrantLock;\n \n /**\n  * Send an HTTP request to an url\n", "next_change": {"commit": "593ae663acc4444f2db9948ebd4bcb1941fb95b9", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex a09a8b7f..c5f58511 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -41,6 +41,10 @@ import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * Send an HTTP request to an url\n+ * \n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n  */\n public class HTTP extends FormattedWarpScriptFunction {\n \n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c5f58511..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -41,7 +41,7 @@ import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * Send an HTTP request to an url\n- * \n+ *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * .cap:http.requests\n  * .cap:http.size\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,8 +46,22 @@ import java.util.concurrent.atomic.AtomicLong;\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * .cap:http.requests\n  * .cap:http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n  */\n-public class HTTP extends FormattedWarpScriptFunction {\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n \n   //\n   // Arguments\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDQ1MQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210451", "body": "The documentation will be elsewhere but this is no longer limited to the GET method.", "bodyText": "The documentation will be elsewhere but this is no longer limited to the GET method.", "bodyHTML": "<p dir=\"auto\">The documentation will be elsewhere but this is no longer limited to the GET method.</p>", "author": "hbs", "createdAt": "2020-12-19T08:24:54Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ccea80f8cbe3b8071f5c7a38641cbc5a46eb452", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..2d1f045f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,9 +90,9 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n", "next_change": {"commit": "d33061df5b124a215e4956ac26a792fc500aae86", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2d1f045f..4dda5423 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -96,7 +96,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n   }\n \n", "next_change": {"commit": "5e69b4b49e3b4debc57c2ef45f95dbe97b65cf3d", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4dda5423..5ac2d3e0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,13 +90,13 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n   }\n \n", "next_change": {"commit": "7200e3cf96ffff0373e2ce0ffdc251b26476412f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..4dda5423 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,13 +90,13 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n   }\n \n", "next_change": {"commit": "f198c0f946767df0a942435880c3003e04862e32", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4dda5423..2fb6c38f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -98,28 +111,38 @@ public class HTTP extends FormattedWarpScriptFunction {\n     output = new ArgumentsBuilder()\n       .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n+\n+    // define authorization type from conf\n+    auth = Authorization.valueOf(WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE, HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE_DEFAULT));\n+    if (Authorization.capability == auth) {\n+      capName = WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY, HttpWarpScriptExtension.HTTP_CAPABILITY_DEFAULT);\n+    } else {\n+      capName = null;\n+    }\n   }\n \n   @Override\n   public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n \n     //\n-    // Check capability if set in configuration, or else check stack authentication\n+    // Check authorization\n     //\n \n-    Properties props = WarpConfig.getProperties();\n-\n-    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n-      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n-        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+    switch (auth) {\n+      case authenticated:\n+        if (!stack.isAuthenticated()) {\n+          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+        }\n+        break;\n \n-        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n-          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+      case capability:\n+        if (null == Capabilities.get(stack, capName)) {\n+          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n         }\n-      }\n+        break;\n \n-    } else if (!stack.isAuthenticated()) {\n-      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+      default:\n+        break;\n     }\n \n     //\n", "next_change": {"commit": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2fb6c38f..4119f1c9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -128,21 +125,12 @@ public class HTTP extends FormattedWarpScriptFunction {\n     // Check authorization\n     //\n \n-    switch (auth) {\n-      case authenticated:\n-        if (!stack.isAuthenticated()) {\n-          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n-        }\n-        break;\n-\n-      case capability:\n-        if (null == Capabilities.get(stack, capName)) {\n-          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n-        }\n-        break;\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n \n-      default:\n-        break;\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n     }\n \n     //\n", "next_change": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4119f1c9..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +138,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +146,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -147,7 +147,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    String body = (String) formattedArgs.get(BODY);\n+    Object body = formattedArgs.get(BODY);\n+\n \n     //\n     // Check URL\n", "next_change": {"commit": "1310de4c8047c041d1708afae93887a974fdd1b0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..0b9ea8c0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -148,7 +152,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     Object body = formattedArgs.get(BODY);\n-\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 0b9ea8c0..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -154,6 +178,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     Object body = formattedArgs.get(BODY);\n     List authInfo = (List) formattedArgs.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -156,38 +173,48 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT));\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_LIMIT;\n+      maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+      maxsize = base_maxsize;\n     }\n \n     //\n     // Retrieve arguments\n     //\n \n-    String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    Object body = formattedArgs.get(BODY);\n-    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n-    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n     //\n \n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n     URL url = null;\n     try {\n-      url = new URL((String) formattedArgs.get(URL));\n+      url = new URL((String) urlParam);\n     } catch (MalformedURLException mue) {\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -219,14 +214,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n \n-    if (!webAccessController.checkURL(url)) {\n-      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n-    }\n-\n     if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n       throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n     }\n \n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n     //\n     // Check that we do not exceed the limits\n     //\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDU1OA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210558", "body": "The content must be returned as BYTES, not base 64 encoded as STRING. And returning a MAP is probably wiser.", "bodyText": "The content must be returned as BYTES, not base 64 encoded as STRING. And returning a MAP is probably wiser.", "bodyHTML": "<p dir=\"auto\">The content must be returned as BYTES, not base 64 encoded as STRING. And returning a MAP is probably wiser.</p>", "author": "hbs", "createdAt": "2020-12-19T08:25:58Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ccea80f8cbe3b8071f5c7a38641cbc5a46eb452", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..2d1f045f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,9 +90,9 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n", "next_change": {"commit": "d33061df5b124a215e4956ac26a792fc500aae86", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2d1f045f..4dda5423 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -96,7 +96,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n   }\n \n", "next_change": {"commit": "5e69b4b49e3b4debc57c2ef45f95dbe97b65cf3d", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4dda5423..5ac2d3e0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,13 +90,13 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n   }\n \n", "next_change": {"commit": "7200e3cf96ffff0373e2ce0ffdc251b26476412f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..4dda5423 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,13 +90,13 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n   }\n \n", "next_change": {"commit": "f198c0f946767df0a942435880c3003e04862e32", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4dda5423..2fb6c38f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -98,28 +111,38 @@ public class HTTP extends FormattedWarpScriptFunction {\n     output = new ArgumentsBuilder()\n       .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n+\n+    // define authorization type from conf\n+    auth = Authorization.valueOf(WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE, HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE_DEFAULT));\n+    if (Authorization.capability == auth) {\n+      capName = WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY, HttpWarpScriptExtension.HTTP_CAPABILITY_DEFAULT);\n+    } else {\n+      capName = null;\n+    }\n   }\n \n   @Override\n   public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n \n     //\n-    // Check capability if set in configuration, or else check stack authentication\n+    // Check authorization\n     //\n \n-    Properties props = WarpConfig.getProperties();\n-\n-    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n-      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n-        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+    switch (auth) {\n+      case authenticated:\n+        if (!stack.isAuthenticated()) {\n+          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+        }\n+        break;\n \n-        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n-          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+      case capability:\n+        if (null == Capabilities.get(stack, capName)) {\n+          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n         }\n-      }\n+        break;\n \n-    } else if (!stack.isAuthenticated()) {\n-      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+      default:\n+        break;\n     }\n \n     //\n", "next_change": {"commit": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2fb6c38f..4119f1c9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -128,21 +125,12 @@ public class HTTP extends FormattedWarpScriptFunction {\n     // Check authorization\n     //\n \n-    switch (auth) {\n-      case authenticated:\n-        if (!stack.isAuthenticated()) {\n-          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n-        }\n-        break;\n-\n-      case capability:\n-        if (null == Capabilities.get(stack, capName)) {\n-          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n-        }\n-        break;\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n \n-      default:\n-        break;\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n     }\n \n     //\n", "next_change": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4119f1c9..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +138,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +146,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -147,7 +147,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    String body = (String) formattedArgs.get(BODY);\n+    Object body = formattedArgs.get(BODY);\n+\n \n     //\n     // Check URL\n", "next_change": {"commit": "1310de4c8047c041d1708afae93887a974fdd1b0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..0b9ea8c0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -148,7 +152,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     Object body = formattedArgs.get(BODY);\n-\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 0b9ea8c0..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -154,6 +178,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     Object body = formattedArgs.get(BODY);\n     List authInfo = (List) formattedArgs.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -156,38 +173,48 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT));\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_LIMIT;\n+      maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+      maxsize = base_maxsize;\n     }\n \n     //\n     // Retrieve arguments\n     //\n \n-    String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    Object body = formattedArgs.get(BODY);\n-    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n-    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n     //\n \n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n     URL url = null;\n     try {\n-      url = new URL((String) formattedArgs.get(URL));\n+      url = new URL((String) urlParam);\n     } catch (MalformedURLException mue) {\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -219,14 +214,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n \n-    if (!webAccessController.checkURL(url)) {\n-      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n-    }\n-\n     if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n       throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n     }\n \n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n     //\n     // Check that we do not exceed the limits\n     //\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDcyMw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210723", "body": "This must not be called at each invocation. Extract the capability name once at instantiation time and refer to that in apply.", "bodyText": "This must not be called at each invocation. Extract the capability name once at instantiation time and refer to that in apply.", "bodyHTML": "<p dir=\"auto\">This must not be called at each invocation. Extract the capability name once at instantiation time and refer to that in apply.</p>", "author": "hbs", "createdAt": "2020-12-19T08:27:17Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f198c0f946767df0a942435880c3003e04862e32", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..2fb6c38f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,36 +103,46 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n+\n+    // define authorization type from conf\n+    auth = Authorization.valueOf(WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE, HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE_DEFAULT));\n+    if (Authorization.capability == auth) {\n+      capName = WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY, HttpWarpScriptExtension.HTTP_CAPABILITY_DEFAULT);\n+    } else {\n+      capName = null;\n+    }\n   }\n \n   @Override\n   public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n \n     //\n-    // Check capability if set in configuration, or else check stack authentication\n+    // Check authorization\n     //\n \n-    Properties props = WarpConfig.getProperties();\n-\n-    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n-      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n-        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+    switch (auth) {\n+      case authenticated:\n+        if (!stack.isAuthenticated()) {\n+          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+        }\n+        break;\n \n-        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n-          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+      case capability:\n+        if (null == Capabilities.get(stack, capName)) {\n+          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n         }\n-      }\n+        break;\n \n-    } else if (!stack.isAuthenticated()) {\n-      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+      default:\n+        break;\n     }\n \n     //\n", "next_change": {"commit": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2fb6c38f..4119f1c9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -128,21 +125,12 @@ public class HTTP extends FormattedWarpScriptFunction {\n     // Check authorization\n     //\n \n-    switch (auth) {\n-      case authenticated:\n-        if (!stack.isAuthenticated()) {\n-          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n-        }\n-        break;\n-\n-      case capability:\n-        if (null == Capabilities.get(stack, capName)) {\n-          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n-        }\n-        break;\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n \n-      default:\n-        break;\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n     }\n \n     //\n", "next_change": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4119f1c9..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +138,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +146,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -147,7 +147,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    String body = (String) formattedArgs.get(BODY);\n+    Object body = formattedArgs.get(BODY);\n+\n \n     //\n     // Check URL\n", "next_change": {"commit": "1310de4c8047c041d1708afae93887a974fdd1b0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..0b9ea8c0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -148,7 +152,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     Object body = formattedArgs.get(BODY);\n-\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 0b9ea8c0..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -154,6 +178,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     Object body = formattedArgs.get(BODY);\n     List authInfo = (List) formattedArgs.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -156,38 +173,48 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT));\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_LIMIT;\n+      maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+      maxsize = base_maxsize;\n     }\n \n     //\n     // Retrieve arguments\n     //\n \n-    String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    Object body = formattedArgs.get(BODY);\n-    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n-    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n     //\n \n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n     URL url = null;\n     try {\n-      url = new URL((String) formattedArgs.get(URL));\n+      url = new URL((String) urlParam);\n     } catch (MalformedURLException mue) {\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -219,14 +214,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n \n-    if (!webAccessController.checkURL(url)) {\n-      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n-    }\n-\n     if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n       throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n     }\n \n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n     //\n     // Check that we do not exceed the limits\n     //\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDg2Mw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210863", "body": "Capabilities are checked using Capabilities#get", "bodyText": "Capabilities are checked using Capabilities#get", "bodyHTML": "<p dir=\"auto\">Capabilities are checked using Capabilities#get</p>", "author": "hbs", "createdAt": "2020-12-19T08:28:46Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f198c0f946767df0a942435880c3003e04862e32", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..2fb6c38f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,36 +103,46 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n+\n+    // define authorization type from conf\n+    auth = Authorization.valueOf(WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE, HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE_DEFAULT));\n+    if (Authorization.capability == auth) {\n+      capName = WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY, HttpWarpScriptExtension.HTTP_CAPABILITY_DEFAULT);\n+    } else {\n+      capName = null;\n+    }\n   }\n \n   @Override\n   public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n \n     //\n-    // Check capability if set in configuration, or else check stack authentication\n+    // Check authorization\n     //\n \n-    Properties props = WarpConfig.getProperties();\n-\n-    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n-      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n-        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+    switch (auth) {\n+      case authenticated:\n+        if (!stack.isAuthenticated()) {\n+          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+        }\n+        break;\n \n-        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n-          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+      case capability:\n+        if (null == Capabilities.get(stack, capName)) {\n+          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n         }\n-      }\n+        break;\n \n-    } else if (!stack.isAuthenticated()) {\n-      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+      default:\n+        break;\n     }\n \n     //\n", "next_change": {"commit": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2fb6c38f..4119f1c9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -128,21 +125,12 @@ public class HTTP extends FormattedWarpScriptFunction {\n     // Check authorization\n     //\n \n-    switch (auth) {\n-      case authenticated:\n-        if (!stack.isAuthenticated()) {\n-          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n-        }\n-        break;\n-\n-      case capability:\n-        if (null == Capabilities.get(stack, capName)) {\n-          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n-        }\n-        break;\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n \n-      default:\n-        break;\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n     }\n \n     //\n", "next_change": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4119f1c9..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +138,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +146,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -147,7 +147,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    String body = (String) formattedArgs.get(BODY);\n+    Object body = formattedArgs.get(BODY);\n+\n \n     //\n     // Check URL\n", "next_change": {"commit": "1310de4c8047c041d1708afae93887a974fdd1b0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..0b9ea8c0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -148,7 +152,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     Object body = formattedArgs.get(BODY);\n-\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 0b9ea8c0..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -154,6 +178,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     Object body = formattedArgs.get(BODY);\n     List authInfo = (List) formattedArgs.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -156,38 +173,48 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT));\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_LIMIT;\n+      maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+      maxsize = base_maxsize;\n     }\n \n     //\n     // Retrieve arguments\n     //\n \n-    String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    Object body = formattedArgs.get(BODY);\n-    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n-    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n     //\n \n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n     URL url = null;\n     try {\n-      url = new URL((String) formattedArgs.get(URL));\n+      url = new URL((String) urlParam);\n     } catch (MalformedURLException mue) {\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -219,14 +214,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n \n-    if (!webAccessController.checkURL(url)) {\n-      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n-    }\n-\n     if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n       throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n     }\n \n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n     //\n     // Check that we do not exceed the limits\n     //\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTAzMA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211030", "body": "The authorization type should be configurable, either none, i.e. the function can be used by anyone if the extension is loaded, authenticated, AUTHENTICATE must have been called, and capability to inspect a capability.", "bodyText": "The authorization type should be configurable, either none, i.e. the function can be used by anyone if the extension is loaded, authenticated, AUTHENTICATE must have been called, and capability to inspect a capability.", "bodyHTML": "<p dir=\"auto\">The authorization type should be configurable, either none, i.e. the function can be used by anyone if the extension is loaded, authenticated, AUTHENTICATE must have been called, and capability to inspect a capability.</p>", "author": "hbs", "createdAt": "2020-12-19T08:30:57Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxNzkzMQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546217931", "bodyText": "I was thinking of enforcing authentication in each case (capability or not), since it allows for checking if another thread in the jvm has a stack that is authenticated with the same token and also try to use HTTP, so that we can prevent nested call of HTTP and network loops.\nIs it a valid concern?", "author": "randomboolean", "createdAt": "2020-12-19T09:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTAzMA=="}], "type": "inlineReview", "revised_code": {"commit": "f198c0f946767df0a942435880c3003e04862e32", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..2fb6c38f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,36 +103,46 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n+\n+    // define authorization type from conf\n+    auth = Authorization.valueOf(WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE, HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE_DEFAULT));\n+    if (Authorization.capability == auth) {\n+      capName = WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY, HttpWarpScriptExtension.HTTP_CAPABILITY_DEFAULT);\n+    } else {\n+      capName = null;\n+    }\n   }\n \n   @Override\n   public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n \n     //\n-    // Check capability if set in configuration, or else check stack authentication\n+    // Check authorization\n     //\n \n-    Properties props = WarpConfig.getProperties();\n-\n-    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n-      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n-        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+    switch (auth) {\n+      case authenticated:\n+        if (!stack.isAuthenticated()) {\n+          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+        }\n+        break;\n \n-        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n-          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+      case capability:\n+        if (null == Capabilities.get(stack, capName)) {\n+          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n         }\n-      }\n+        break;\n \n-    } else if (!stack.isAuthenticated()) {\n-      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+      default:\n+        break;\n     }\n \n     //\n", "next_change": {"commit": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2fb6c38f..4119f1c9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -128,21 +125,12 @@ public class HTTP extends FormattedWarpScriptFunction {\n     // Check authorization\n     //\n \n-    switch (auth) {\n-      case authenticated:\n-        if (!stack.isAuthenticated()) {\n-          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n-        }\n-        break;\n-\n-      case capability:\n-        if (null == Capabilities.get(stack, capName)) {\n-          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n-        }\n-        break;\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n \n-      default:\n-        break;\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n     }\n \n     //\n", "next_change": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4119f1c9..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +138,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +146,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -147,7 +147,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    String body = (String) formattedArgs.get(BODY);\n+    Object body = formattedArgs.get(BODY);\n+\n \n     //\n     // Check URL\n", "next_change": {"commit": "1310de4c8047c041d1708afae93887a974fdd1b0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..0b9ea8c0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -148,7 +152,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     Object body = formattedArgs.get(BODY);\n-\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 0b9ea8c0..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -154,6 +178,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     Object body = formattedArgs.get(BODY);\n     List authInfo = (List) formattedArgs.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -156,38 +173,48 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT));\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_LIMIT;\n+      maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+      maxsize = base_maxsize;\n     }\n \n     //\n     // Retrieve arguments\n     //\n \n-    String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    Object body = formattedArgs.get(BODY);\n-    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n-    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n     //\n \n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n     URL url = null;\n     try {\n-      url = new URL((String) formattedArgs.get(URL));\n+      url = new URL((String) urlParam);\n     } catch (MalformedURLException mue) {\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -219,14 +214,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n \n-    if (!webAccessController.checkURL(url)) {\n-      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n-    }\n-\n     if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n       throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n     }\n \n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n     //\n     // Check that we do not exceed the limits\n     //\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTE3OQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211179", "body": "We don't need synchronization, the rare cases where the count would be incorrect (use in CEVAL) don't need to be handled as their consequence is not important.", "bodyText": "We don't need synchronization, the rare cases where the count would be incorrect (use in CEVAL) don't need to be handled as their consequence is not important.", "bodyHTML": "<p dir=\"auto\">We don't need synchronization, the rare cases where the count would be incorrect (use in CEVAL) don't need to be handled as their consequence is not important.</p>", "author": "hbs", "createdAt": "2020-12-19T08:33:19Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f794c39f29441072747f797bb141ff61679066b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..a432457b 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -149,62 +169,73 @@ public class HTTP extends FormattedWarpScriptFunction {\n     AtomicLong urlCount;\n     AtomicLong downloadSize;\n \n-    try {\n-      stackCountersLock.lockInterruptibly();\n+//    try {\n+//      stackCountersLock.lockInterruptibly();\n \n-      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n-      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n \n-      if (null == ufCount || null == ufSize) {\n-        urlCount = new AtomicLong();\n-        downloadSize = new AtomicLong();\n-        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n-        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n-      } else {\n-        urlCount = (AtomicLong) ufCount;\n-        downloadSize = (AtomicLong) ufSize;\n-      }\n-    } catch (InterruptedException ie) {\n-      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n-    } finally {\n-      if (stackCountersLock.isHeldByCurrentThread()) {\n-        stackCountersLock.unlock();\n-      }\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n     }\n \n-    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n-      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n-    }\n+//    } catch (InterruptedException ie) {\n+//      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+//    } finally {\n+//      if (stackCountersLock.isHeldByCurrentThread()) {\n+//        stackCountersLock.unlock();\n+//      }\n+//    }\n \n-    // Recheck the count here in case of concurrent runs\n     if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n       throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n     }\n \n     HttpURLConnection conn = null;\n \n-    List<Object> res = new ArrayList<Object>();\n+    Map<String, Object> res = new HashMap<>();\n \n     try {\n       conn = (HttpURLConnection) url.openConnection();\n \n       if (null != url.getUserInfo()) {\n         String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n-        properties.put(\"Authorization\", basicAuth);\n+        headers.put(\"Authorization\", basicAuth);\n       }\n \n-      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n         conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n       }\n \n       conn.setDoInput(true);\n-      conn.setDoOutput(body.length() > 0);\n       conn.setRequestMethod(method.toUpperCase());\n \n-      if (body.length() > 0) {\n-        try (OutputStream os = conn.getOutputStream()) {\n-          os.write(body.getBytes());\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n         }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n       byte[] buf = new byte[8192];\n", "next_change": {"commit": "bd42862c9fb7fd24bdb447524992f349d2aaa426", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex a432457b..56903a87 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -238,6 +289,10 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n+      //\n+      // Read response\n+      //\n+\n       byte[] buf = new byte[8192];\n \n       ByteArrayOutputStream baos = new ByteArrayOutputStream();\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 56903a87..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -289,38 +299,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n-      //\n-      // Read response\n-      //\n-\n-      byte[] buf = new byte[8192];\n-\n-      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-      InputStream in = null;\n-      // When there is an error (response code is 404 for instance), body is in the error stream.\n-      try {\n-        in = conn.getInputStream();\n-      } catch (IOException ioe) {\n-        in = conn.getErrorStream();\n-      }\n-\n-      while (true) {\n-        int len = in.read(buf);\n-\n-        if (len < 0) {\n-          break;\n-        }\n-\n-        if (downloadSize.get() + baos.size() + len > maxsize) {\n-          throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-        }\n-\n-        baos.write(buf, 0, len);\n-      }\n-\n-      downloadSize.addAndGet(baos.size());\n-\n       //\n       // Form response\n       //\n", "next_change": {"commit": "bbab796621d6951bee7159d9f652238992bb50f3", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..1ec6927a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -295,7 +318,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n           }\n         }\n \n-      } else {\n+      } else if (null != body) {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n", "next_change": {"commit": "6078808fc5af6567e7d842cedcf38edb38cf8067", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1ec6927a..42a007b3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -300,26 +314,29 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set body\n       //\n \n-      if (body instanceof String) {\n-        String bodyS = (String) body;\n-        conn.setDoOutput(bodyS.length() > 0);\n-        if (bodyS.length() > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n           }\n-        }\n \n-      } else if (body instanceof byte[]) {\n-        byte[] bodyB = (byte[]) body;\n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n-        }\n \n-      } else if (null != body) {\n-        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n       }\n \n       //\n", "next_change": {"commit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 42a007b3..17865ac2 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -337,6 +383,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n \n       //\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTMxMg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211312", "body": "Simply do the check with  addAndGet(1), it is an AtomicLong", "bodyText": "Simply do the check with  addAndGet(1), it is an AtomicLong", "bodyHTML": "<p dir=\"auto\">Simply do the check with  addAndGet(1), it is an AtomicLong</p>", "author": "hbs", "createdAt": "2020-12-19T08:34:46Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f794c39f29441072747f797bb141ff61679066b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..a432457b 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -149,62 +169,73 @@ public class HTTP extends FormattedWarpScriptFunction {\n     AtomicLong urlCount;\n     AtomicLong downloadSize;\n \n-    try {\n-      stackCountersLock.lockInterruptibly();\n+//    try {\n+//      stackCountersLock.lockInterruptibly();\n \n-      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n-      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n \n-      if (null == ufCount || null == ufSize) {\n-        urlCount = new AtomicLong();\n-        downloadSize = new AtomicLong();\n-        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n-        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n-      } else {\n-        urlCount = (AtomicLong) ufCount;\n-        downloadSize = (AtomicLong) ufSize;\n-      }\n-    } catch (InterruptedException ie) {\n-      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n-    } finally {\n-      if (stackCountersLock.isHeldByCurrentThread()) {\n-        stackCountersLock.unlock();\n-      }\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n     }\n \n-    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n-      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n-    }\n+//    } catch (InterruptedException ie) {\n+//      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+//    } finally {\n+//      if (stackCountersLock.isHeldByCurrentThread()) {\n+//        stackCountersLock.unlock();\n+//      }\n+//    }\n \n-    // Recheck the count here in case of concurrent runs\n     if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n       throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n     }\n \n     HttpURLConnection conn = null;\n \n-    List<Object> res = new ArrayList<Object>();\n+    Map<String, Object> res = new HashMap<>();\n \n     try {\n       conn = (HttpURLConnection) url.openConnection();\n \n       if (null != url.getUserInfo()) {\n         String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n-        properties.put(\"Authorization\", basicAuth);\n+        headers.put(\"Authorization\", basicAuth);\n       }\n \n-      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n         conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n       }\n \n       conn.setDoInput(true);\n-      conn.setDoOutput(body.length() > 0);\n       conn.setRequestMethod(method.toUpperCase());\n \n-      if (body.length() > 0) {\n-        try (OutputStream os = conn.getOutputStream()) {\n-          os.write(body.getBytes());\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n         }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n       byte[] buf = new byte[8192];\n", "next_change": {"commit": "bd42862c9fb7fd24bdb447524992f349d2aaa426", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex a432457b..56903a87 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -238,6 +289,10 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n+      //\n+      // Read response\n+      //\n+\n       byte[] buf = new byte[8192];\n \n       ByteArrayOutputStream baos = new ByteArrayOutputStream();\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 56903a87..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -289,38 +299,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n-      //\n-      // Read response\n-      //\n-\n-      byte[] buf = new byte[8192];\n-\n-      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-      InputStream in = null;\n-      // When there is an error (response code is 404 for instance), body is in the error stream.\n-      try {\n-        in = conn.getInputStream();\n-      } catch (IOException ioe) {\n-        in = conn.getErrorStream();\n-      }\n-\n-      while (true) {\n-        int len = in.read(buf);\n-\n-        if (len < 0) {\n-          break;\n-        }\n-\n-        if (downloadSize.get() + baos.size() + len > maxsize) {\n-          throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-        }\n-\n-        baos.write(buf, 0, len);\n-      }\n-\n-      downloadSize.addAndGet(baos.size());\n-\n       //\n       // Form response\n       //\n", "next_change": {"commit": "bbab796621d6951bee7159d9f652238992bb50f3", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..1ec6927a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -295,7 +318,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n           }\n         }\n \n-      } else {\n+      } else if (null != body) {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n", "next_change": {"commit": "6078808fc5af6567e7d842cedcf38edb38cf8067", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1ec6927a..42a007b3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -300,26 +314,29 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set body\n       //\n \n-      if (body instanceof String) {\n-        String bodyS = (String) body;\n-        conn.setDoOutput(bodyS.length() > 0);\n-        if (bodyS.length() > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n           }\n-        }\n \n-      } else if (body instanceof byte[]) {\n-        byte[] bodyB = (byte[]) body;\n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n-        }\n \n-      } else if (null != body) {\n-        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n       }\n \n       //\n", "next_change": {"commit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 42a007b3..17865ac2 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -337,6 +383,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n \n       //\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTQyNA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211424", "body": "I think it it better to disallow user infos in the URL and to provide a macro to encode basic authentication which can then be passed in the headers.", "bodyText": "I think it it better to disallow user infos in the URL and to provide a macro to encode basic authentication which can then be passed in the headers.", "bodyHTML": "<p dir=\"auto\">I think it it better to disallow user infos in the URL and to provide a macro to encode basic authentication which can then be passed in the headers.</p>", "author": "hbs", "createdAt": "2020-12-19T08:35:48Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs\n+    if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    HttpURLConnection conn = null;\n+\n+    List<Object> res = new ArrayList<Object>();\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      if (null != url.getUserInfo()) {", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -190,10 +201,10 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n       if (null != url.getUserInfo()) {\n         String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n-        properties.put(\"Authorization\", basicAuth);\n+        headers.put(\"Authorization\", basicAuth);\n       }\n \n-      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n         conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n       }\n \n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -209,13 +218,28 @@ public class HTTP extends FormattedWarpScriptFunction {\n       }\n \n       conn.setDoInput(true);\n-      conn.setDoOutput(body.length() > 0);\n       conn.setRequestMethod(method.toUpperCase());\n \n-      if (body.length() > 0) {\n-        try (OutputStream os = conn.getOutputStream()) {\n-          os.write(body.getBytes());\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n         }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n       byte[] buf = new byte[8192];\n", "next_change": {"commit": "bd42862c9fb7fd24bdb447524992f349d2aaa426", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..56903a87 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -242,6 +289,10 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n+      //\n+      // Read response\n+      //\n+\n       byte[] buf = new byte[8192];\n \n       ByteArrayOutputStream baos = new ByteArrayOutputStream();\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 56903a87..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -289,38 +299,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n-      //\n-      // Read response\n-      //\n-\n-      byte[] buf = new byte[8192];\n-\n-      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-      InputStream in = null;\n-      // When there is an error (response code is 404 for instance), body is in the error stream.\n-      try {\n-        in = conn.getInputStream();\n-      } catch (IOException ioe) {\n-        in = conn.getErrorStream();\n-      }\n-\n-      while (true) {\n-        int len = in.read(buf);\n-\n-        if (len < 0) {\n-          break;\n-        }\n-\n-        if (downloadSize.get() + baos.size() + len > maxsize) {\n-          throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-        }\n-\n-        baos.write(buf, 0, len);\n-      }\n-\n-      downloadSize.addAndGet(baos.size());\n-\n       //\n       // Form response\n       //\n", "next_change": {"commit": "bbab796621d6951bee7159d9f652238992bb50f3", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..1ec6927a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -295,7 +318,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n           }\n         }\n \n-      } else {\n+      } else if (null != body) {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n", "next_change": {"commit": "6078808fc5af6567e7d842cedcf38edb38cf8067", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1ec6927a..42a007b3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -300,26 +314,29 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set body\n       //\n \n-      if (body instanceof String) {\n-        String bodyS = (String) body;\n-        conn.setDoOutput(bodyS.length() > 0);\n-        if (bodyS.length() > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n           }\n-        }\n \n-      } else if (body instanceof byte[]) {\n-        byte[] bodyB = (byte[]) body;\n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n-        }\n \n-      } else if (null != body) {\n-        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n       }\n \n       //\n", "next_change": {"commit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 42a007b3..17865ac2 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -337,6 +383,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n \n       //\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTUxNA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211514", "body": "Call them headers", "bodyText": "Call them headers", "bodyHTML": "<p dir=\"auto\">Call them headers</p>", "author": "hbs", "createdAt": "2020-12-19T08:36:29Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f198c0f946767df0a942435880c3003e04862e32", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..2fb6c38f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,36 +103,46 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n+\n+    // define authorization type from conf\n+    auth = Authorization.valueOf(WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE, HttpWarpScriptExtension.HTTP_AUTHORIZATION_TYPE_DEFAULT));\n+    if (Authorization.capability == auth) {\n+      capName = WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY, HttpWarpScriptExtension.HTTP_CAPABILITY_DEFAULT);\n+    } else {\n+      capName = null;\n+    }\n   }\n \n   @Override\n   public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n \n     //\n-    // Check capability if set in configuration, or else check stack authentication\n+    // Check authorization\n     //\n \n-    Properties props = WarpConfig.getProperties();\n-\n-    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n-      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n-        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+    switch (auth) {\n+      case authenticated:\n+        if (!stack.isAuthenticated()) {\n+          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+        }\n+        break;\n \n-        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n-          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+      case capability:\n+        if (null == Capabilities.get(stack, capName)) {\n+          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n         }\n-      }\n+        break;\n \n-    } else if (!stack.isAuthenticated()) {\n-      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+      default:\n+        break;\n     }\n \n     //\n", "next_change": {"commit": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2fb6c38f..4119f1c9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -128,21 +125,12 @@ public class HTTP extends FormattedWarpScriptFunction {\n     // Check authorization\n     //\n \n-    switch (auth) {\n-      case authenticated:\n-        if (!stack.isAuthenticated()) {\n-          throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n-        }\n-        break;\n-\n-      case capability:\n-        if (null == Capabilities.get(stack, capName)) {\n-          throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n-        }\n-        break;\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n \n-      default:\n-        break;\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n     }\n \n     //\n", "next_change": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4119f1c9..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +138,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +146,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -147,7 +147,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    String body = (String) formattedArgs.get(BODY);\n+    Object body = formattedArgs.get(BODY);\n+\n \n     //\n     // Check URL\n", "next_change": {"commit": "1310de4c8047c041d1708afae93887a974fdd1b0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..0b9ea8c0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -148,7 +152,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     Object body = formattedArgs.get(BODY);\n-\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 0b9ea8c0..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -154,6 +178,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     Object body = formattedArgs.get(BODY);\n     List authInfo = (List) formattedArgs.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -156,38 +173,48 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT));\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_LIMIT;\n+      maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+      maxsize = base_maxsize;\n     }\n \n     //\n     // Retrieve arguments\n     //\n \n-    String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    Object body = formattedArgs.get(BODY);\n-    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n-    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n     //\n \n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n     URL url = null;\n     try {\n-      url = new URL((String) formattedArgs.get(URL));\n+      url = new URL((String) urlParam);\n     } catch (MalformedURLException mue) {\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -219,14 +214,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n \n-    if (!webAccessController.checkURL(url)) {\n-      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n-    }\n-\n     if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n       throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n     }\n \n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n     //\n     // Check that we do not exceed the limits\n     //\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTgyNg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211826", "body": "the body parameter could contain a STRING or BYTES to let the user choose the charset used.", "bodyText": "the body parameter could contain a STRING or BYTES to let the user choose the charset used.", "bodyHTML": "<p dir=\"auto\">the body parameter could contain a STRING or BYTES to let the user choose the charset used.</p>", "author": "hbs", "createdAt": "2020-12-19T08:39:16Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..4119f1c9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -90,38 +97,42 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     args = new ArgumentsBuilder()\n       .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n       .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .addOptionalArgument(String.class, BODY, \"An optional body.\", \"\")\n       .build();\n \n     output = new ArgumentsBuilder()\n-      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .addArgument(List.class, RESPONSE, \"A 4-element list that contains, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n       .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n   }\n \n   @Override\n   public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n \n     //\n-    // Check capability if set in configuration, or else check stack authentication\n+    // Check authorization\n     //\n \n-    Properties props = WarpConfig.getProperties();\n-\n-    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n-      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n-        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n-\n-        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n-          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n-        }\n-      }\n-\n-    } else if (!stack.isAuthenticated()) {\n+    if (auth && !stack.isAuthenticated()) {\n       throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n     }\n \n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n     //\n     // Retrieve arguments\n     //\n", "next_change": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 4119f1c9..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +138,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -138,7 +146,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADER);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     String body = (String) formattedArgs.get(BODY);\n \n     //\n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -147,7 +147,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    String body = (String) formattedArgs.get(BODY);\n+    Object body = formattedArgs.get(BODY);\n+\n \n     //\n     // Check URL\n", "next_change": {"commit": "1310de4c8047c041d1708afae93887a974fdd1b0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..0b9ea8c0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -148,7 +152,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     String method = (String) formattedArgs.get(METHOD);\n     Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n     Object body = formattedArgs.get(BODY);\n-\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 0b9ea8c0..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -154,6 +178,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n     Object body = formattedArgs.get(BODY);\n     List authInfo = (List) formattedArgs.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -156,38 +173,48 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT));\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_LIMIT;\n+      maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+      maxsize = base_maxsize;\n     }\n \n     //\n     // Retrieve arguments\n     //\n \n-    String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    Object body = formattedArgs.get(BODY);\n-    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n-    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n     //\n \n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n     URL url = null;\n     try {\n-      url = new URL((String) formattedArgs.get(URL));\n+      url = new URL((String) urlParam);\n     } catch (MalformedURLException mue) {\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -219,14 +214,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n \n-    if (!webAccessController.checkURL(url)) {\n-      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n-    }\n-\n     if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n       throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n     }\n \n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n     //\n     // Check that we do not exceed the limits\n     //\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTg0Mw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211843", "body": "body could be a STRING or BYTES", "bodyText": "body could be a STRING or BYTES", "bodyHTML": "<p dir=\"auto\">body could be a STRING or BYTES</p>", "author": "hbs", "createdAt": "2020-12-19T08:39:37Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs\n+    if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    HttpURLConnection conn = null;\n+\n+    List<Object> res = new ArrayList<Object>();\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      if (null != url.getUserInfo()) {\n+        String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n+        properties.put(\"Authorization\", basicAuth);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setDoOutput(body.length() > 0);", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..eff5fdc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -190,10 +201,10 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n       if (null != url.getUserInfo()) {\n         String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n-        properties.put(\"Authorization\", basicAuth);\n+        headers.put(\"Authorization\", basicAuth);\n       }\n \n-      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n         conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n       }\n \n", "next_change": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex eff5fdc1..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -209,13 +218,28 @@ public class HTTP extends FormattedWarpScriptFunction {\n       }\n \n       conn.setDoInput(true);\n-      conn.setDoOutput(body.length() > 0);\n       conn.setRequestMethod(method.toUpperCase());\n \n-      if (body.length() > 0) {\n-        try (OutputStream os = conn.getOutputStream()) {\n-          os.write(body.getBytes());\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n         }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n       byte[] buf = new byte[8192];\n", "next_change": {"commit": "bd42862c9fb7fd24bdb447524992f349d2aaa426", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..56903a87 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -242,6 +289,10 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n+      //\n+      // Read response\n+      //\n+\n       byte[] buf = new byte[8192];\n \n       ByteArrayOutputStream baos = new ByteArrayOutputStream();\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 56903a87..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -289,38 +299,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n-      //\n-      // Read response\n-      //\n-\n-      byte[] buf = new byte[8192];\n-\n-      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-      InputStream in = null;\n-      // When there is an error (response code is 404 for instance), body is in the error stream.\n-      try {\n-        in = conn.getInputStream();\n-      } catch (IOException ioe) {\n-        in = conn.getErrorStream();\n-      }\n-\n-      while (true) {\n-        int len = in.read(buf);\n-\n-        if (len < 0) {\n-          break;\n-        }\n-\n-        if (downloadSize.get() + baos.size() + len > maxsize) {\n-          throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-        }\n-\n-        baos.write(buf, 0, len);\n-      }\n-\n-      downloadSize.addAndGet(baos.size());\n-\n       //\n       // Form response\n       //\n", "next_change": {"commit": "bbab796621d6951bee7159d9f652238992bb50f3", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..1ec6927a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -295,7 +318,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n           }\n         }\n \n-      } else {\n+      } else if (null != body) {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n", "next_change": {"commit": "6078808fc5af6567e7d842cedcf38edb38cf8067", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1ec6927a..42a007b3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -300,26 +314,29 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set body\n       //\n \n-      if (body instanceof String) {\n-        String bodyS = (String) body;\n-        conn.setDoOutput(bodyS.length() > 0);\n-        if (bodyS.length() > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n           }\n-        }\n \n-      } else if (body instanceof byte[]) {\n-        byte[] bodyB = (byte[]) body;\n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n-        }\n \n-      } else if (null != body) {\n-        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n       }\n \n       //\n", "next_change": {"commit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 42a007b3..17865ac2 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -337,6 +383,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n \n       //\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTg4Mw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211883", "body": "Use StandardCharsets.UTF8 explicitely", "bodyText": "Use StandardCharsets.UTF8 explicitely", "bodyHTML": "<p dir=\"auto\">Use StandardCharsets.UTF8 explicitely</p>", "author": "hbs", "createdAt": "2020-12-19T08:40:00Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs\n+    if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    HttpURLConnection conn = null;\n+\n+    List<Object> res = new ArrayList<Object>();\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      if (null != url.getUserInfo()) {\n+        String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n+        properties.put(\"Authorization\", basicAuth);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setDoOutput(body.length() > 0);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      if (body.length() > 0) {\n+        try (OutputStream os = conn.getOutputStream()) {\n+          os.write(body.getBytes());", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..1e131198 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -183,28 +203,43 @@ public class HTTP extends FormattedWarpScriptFunction {\n \n     HttpURLConnection conn = null;\n \n-    List<Object> res = new ArrayList<Object>();\n+    Map<String, Object> res = new HashMap<>();\n \n     try {\n       conn = (HttpURLConnection) url.openConnection();\n \n       if (null != url.getUserInfo()) {\n         String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n-        properties.put(\"Authorization\", basicAuth);\n+        headers.put(\"Authorization\", basicAuth);\n       }\n \n-      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n         conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n       }\n \n       conn.setDoInput(true);\n-      conn.setDoOutput(body.length() > 0);\n       conn.setRequestMethod(method.toUpperCase());\n \n-      if (body.length() > 0) {\n-        try (OutputStream os = conn.getOutputStream()) {\n-          os.write(body.getBytes());\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n         }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n       byte[] buf = new byte[8192];\n", "next_change": {"commit": "bd42862c9fb7fd24bdb447524992f349d2aaa426", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1e131198..56903a87 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -242,6 +289,10 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n+      //\n+      // Read response\n+      //\n+\n       byte[] buf = new byte[8192];\n \n       ByteArrayOutputStream baos = new ByteArrayOutputStream();\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 56903a87..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -289,38 +299,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n-      //\n-      // Read response\n-      //\n-\n-      byte[] buf = new byte[8192];\n-\n-      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n-      InputStream in = null;\n-      // When there is an error (response code is 404 for instance), body is in the error stream.\n-      try {\n-        in = conn.getInputStream();\n-      } catch (IOException ioe) {\n-        in = conn.getErrorStream();\n-      }\n-\n-      while (true) {\n-        int len = in.read(buf);\n-\n-        if (len < 0) {\n-          break;\n-        }\n-\n-        if (downloadSize.get() + baos.size() + len > maxsize) {\n-          throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-        }\n-\n-        baos.write(buf, 0, len);\n-      }\n-\n-      downloadSize.addAndGet(baos.size());\n-\n       //\n       // Form response\n       //\n", "next_change": {"commit": "bbab796621d6951bee7159d9f652238992bb50f3", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..1ec6927a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -295,7 +318,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n           }\n         }\n \n-      } else {\n+      } else if (null != body) {\n         throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n       }\n \n", "next_change": {"commit": "6078808fc5af6567e7d842cedcf38edb38cf8067", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1ec6927a..42a007b3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -300,26 +314,29 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set body\n       //\n \n-      if (body instanceof String) {\n-        String bodyS = (String) body;\n-        conn.setDoOutput(bodyS.length() > 0);\n-        if (bodyS.length() > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n           }\n-        }\n \n-      } else if (body instanceof byte[]) {\n-        byte[] bodyB = (byte[]) body;\n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n-        }\n \n-      } else if (null != body) {\n-        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n       }\n \n       //\n", "next_change": {"commit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 42a007b3..17865ac2 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -337,6 +383,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n \n       //\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjAwOQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212009", "body": "request to", "bodyText": "request to", "bodyHTML": "<p dir=\"auto\">request to</p>", "author": "hbs", "createdAt": "2020-12-19T08:42:02Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs\n+    if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    HttpURLConnection conn = null;\n+\n+    List<Object> res = new ArrayList<Object>();\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      if (null != url.getUserInfo()) {\n+        String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n+        properties.put(\"Authorization\", basicAuth);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setDoOutput(body.length() > 0);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      if (body.length() > 0) {\n+        try (OutputStream os = conn.getOutputStream()) {\n+          os.write(body.getBytes());\n+        }\n+      }\n+\n+      byte[] buf = new byte[8192];\n+\n+      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+      InputStream in = null;\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      while (true) {\n+        int len = in.read(buf);\n+\n+        if (len < 0) {\n+          break;\n+        }\n+\n+        if (downloadSize.get() + baos.size() + len > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_MAXSIZE)) {\n+          throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_MAXSIZE) + \" bytes)\");\n+        }\n+\n+        baos.write(buf, 0, len);\n+      }\n+\n+      downloadSize.addAndGet(baos.size());\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.add(conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.add(statusMsg.get(0));\n+        } else {\n+          res.add(\"\");\n+        }\n+      } else {\n+        res.add(\"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.add(hdrs);\n+      res.add(Base64.encodeBase64String(baos.toByteArray()));\n+\n+    } catch (IOException ioe) {\n+      throw new WarpScriptException(getName() + \" encountered an error while making an HTTP \" + method + \" request over '\" + url + \"'\", ioe);", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f198c0f946767df0a942435880c3003e04862e32", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 5ac2d3e0..2fb6c38f 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -264,7 +287,7 @@ public class HTTP extends FormattedWarpScriptFunction {\n       res.add(Base64.encodeBase64String(baos.toByteArray()));\n \n     } catch (IOException ioe) {\n-      throw new WarpScriptException(getName() + \" encountered an error while making an HTTP \" + method + \" request over '\" + url + \"'\", ioe);\n+      throw new WarpScriptException(getName() + \" encountered an error while making an HTTP \" + method + \" request to '\" + url + \"'\", ioe);\n     } finally {\n       if (null != conn) {\n         conn.disconnect();\n", "next_change": {"commit": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2fb6c38f..703e9205 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -283,8 +279,9 @@ public class HTTP extends FormattedWarpScriptFunction {\n       hdrs = new HashMap<String, List<String>>(hdrs);\n       hdrs.remove(null);\n \n-      res.add(hdrs);\n-      res.add(Base64.encodeBase64String(baos.toByteArray()));\n+      res.put(RESPONSE_HEADERS, hdrs);\n+      //res.add(Base64.encodeBase64String(baos.toByteArray()));\n+      res.put(CONTENT, baos.toByteArray());\n \n     } catch (IOException ioe) {\n       throw new WarpScriptException(getName() + \" encountered an error while making an HTTP \" + method + \" request to '\" + url + \"'\", ioe);\n", "next_change": {"commit": "3f794c39f29441072747f797bb141ff61679066b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 703e9205..a432457b 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -280,7 +292,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n       hdrs.remove(null);\n \n       res.put(RESPONSE_HEADERS, hdrs);\n-      //res.add(Base64.encodeBase64String(baos.toByteArray()));\n       res.put(CONTENT, baos.toByteArray());\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "288666824ba884e3689ab8713870e6d7566b4ba6", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex a432457b..91a4667a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -292,7 +325,65 @@ public class HTTP extends FormattedWarpScriptFunction {\n       hdrs.remove(null);\n \n       res.put(RESPONSE_HEADERS, hdrs);\n-      res.put(CONTENT, baos.toByteArray());\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.get() + baos.size() + len > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          baos.write(buf, 0, len);\n+        }\n+\n+        downloadSize.addAndGet(baos.size());\n+        res.put(CONTENT, baos.toByteArray());\n+\n+      } else {\n+        byte[] buf = new byte[chunkSize.intValue()];\n+\n+        int chunkNumber = 0;\n+        while (true) {\n+          chunkNumber++;\n+\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.addAndGet(len) > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          Map<String, Object> chunkRes = new HashMap<>(res);\n+          chunkRes.put(CONTENT, buf);\n+          chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+          stack.push(chunkRes);\n+          stack.exec(CHUNK_MACRO);\n+        }\n+\n+        res.put(CONTENT, new byte[0]);\n+      }\n \n     } catch (IOException ioe) {\n       throw new WarpScriptException(getName() + \" encountered an error while making an HTTP \" + method + \" request to '\" + url + \"'\", ioe);\n", "next_change": {"commit": "bd4324a8a49aa57d835c0eee70cbfcbed32dbf60", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91a4667a..e445d964 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +376,18 @@ public class HTTP extends FormattedWarpScriptFunction {\n           }\n \n           Map<String, Object> chunkRes = new HashMap<>(res);\n-          chunkRes.put(CONTENT, buf);\n+          if (len == chunkSize) {\n+            chunkRes.put(CONTENT, buf);\n+          } else {\n+            byte[] buf2 = new byte[len];\n+            for (int i = 0; i < buf2.length; i++) {\n+              buf2[i] = buf[i];\n+            }\n+            chunkRes.put(CONTENT, buf2);\n+          }\n           chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n           stack.push(chunkRes);\n-          stack.exec(CHUNK_MACRO);\n+          stack.exec(chunkMacro);\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex e445d964..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -387,7 +414,9 @@ public class HTTP extends FormattedWarpScriptFunction {\n           }\n           chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n           stack.push(chunkRes);\n-          stack.exec(chunkMacro);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -367,56 +362,66 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       }\n \n       if (chunkSize <= 0) {\n-        byte[] buf = new byte[8192];\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-        while (true) {\n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-          if (downloadSize.get() + baos.size() + len > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n           }\n \n-          baos.write(buf, 0, len);\n-        }\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n \n-        downloadSize.addAndGet(baos.size());\n-        res.put(CONTENT, baos.toByteArray());\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n \n       } else {\n-        byte[] buf = new byte[chunkSize.intValue()];\n-        Map<String, Object> chunkRes = new HashMap<>(res);\n \n-        int chunkNumber = 0;\n-        while (true) {\n-          chunkNumber++;\n+        if (null != in) {\n+          byte[] buf = new byte[chunkSize.intValue()];\n+          Map<String, Object> chunkRes = new HashMap<>(res);\n \n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n \n-          if (downloadSize.addAndGet(len) > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-          }\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n \n-          if (len == chunkSize) {\n-            chunkRes.put(CONTENT, buf);\n-          } else {\n-            byte[] buf2 = new byte[len];\n-            for (int i = 0; i < buf2.length; i++) {\n-              buf2[i] = buf[i];\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              chunkRes.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              chunkRes.put(CONTENT, buf2);\n+            }\n+            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n             }\n-            chunkRes.put(CONTENT, buf2);\n-          }\n-          chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n           }\n+\n+        } else {\n+          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b32344c8..aba557e3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -421,7 +422,13 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           }\n \n         } else {\n-          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n+          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n+          chunkRes.put(CHUNK_NUMBER, 1L);\n+          chunkRes.put(CONTENT, new byte[0]);\n+          stack.push(chunkRes);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -408,30 +472,40 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (len == chunkSize) {\n-              chunkRes.put(CONTENT, buf);\n+              res.put(CONTENT, buf);\n             } else {\n               byte[] buf2 = new byte[len];\n               System.arraycopy(buf, 0, buf2, 0, buf2.length);\n-              chunkRes.put(CONTENT, buf2);\n+              res.put(CONTENT, buf2);\n             }\n-            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n+\n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n             stack.push(chunkRes);\n             if (null != chunkMacro) {\n               stack.exec(chunkMacro);\n             }\n           }\n-\n-        } else {\n-          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n-          chunkRes.put(CHUNK_NUMBER, 1L);\n-          chunkRes.put(CONTENT, new byte[0]);\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n-          }\n         }\n \n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n         res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -506,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjIwNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212205", "body": "These functions do not need to exist. Rely on capabilities to modify the limits.", "bodyText": "These functions do not need to exist. Rely on capabilities to modify the limits.", "bodyHTML": "<p dir=\"auto\">These functions do not need to exist. Rely on capabilities to modify the limits.</p>", "author": "hbs", "createdAt": "2020-12-19T08:44:22Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f198c0f946767df0a942435880c3003e04862e32", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..f3d14630 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -30,13 +30,23 @@ import java.util.Map;\n public class HttpWarpScriptExtension extends WarpScriptExtension {\n \n   //\n-  // CAPABILITIES\n+  // AUTHORIZATION\n   //\n \n   /**\n-   * If this configuration is set, then HTTP function will check for this capability.\n+   * Authorization type for using HTTP function, can be either:\n+   * - none (default: no authorization required)\n+   * - authenticated (stack must be authenticated)\n+   * - capability (inspect HTTP_CAPABILITY)\n+   */\n+  public static final String HTTP_AUTHORIZATION_TYPE = \"warpscript.http.authorization.type\";\n+  public static final String HTTP_AUTHORIZATION_TYPE_DEFAULT = \"none\";\n+\n+  /**\n+   * This capability is inspected if <HTTP_AUTHORIZATION_TYPE>=capability\n    */\n   public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+  public static final String HTTP_CAPABILITY_DEFAULT = \".cap:HTTP\";\n \n   //\n   // CONFIGURATION\n", "next_change": {"commit": "48c93d60435ad1dd7e16721cfab16357f54bb244", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex f3d14630..697e51e9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -46,7 +46,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n    * This capability is inspected if <HTTP_AUTHORIZATION_TYPE>=capability\n    */\n   public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n-  public static final String HTTP_CAPABILITY_DEFAULT = \".cap:HTTP\";\n+  public static final String HTTP_CAPABILITY_DEFAULT = WarpScriptStack.CAPABILITIES_PREFIX + \"HTTP\";\n \n   //\n   // CONFIGURATION\n", "next_change": {"commit": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 697e51e9..8eda4d91 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -34,19 +34,14 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Authorization type for using HTTP function, can be either:\n-   * - none (default: no authorization required)\n-   * - authenticated (stack must be authenticated)\n-   * - capability (inspect HTTP_CAPABILITY)\n+   * If set to true, HTTP requires the stack to be authenticated\n    */\n-  public static final String HTTP_AUTHORIZATION_TYPE = \"warpscript.http.authorization.type\";\n-  public static final String HTTP_AUTHORIZATION_TYPE_DEFAULT = \"none\";\n+  public static final String HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n \n   /**\n-   * This capability is inspected if <HTTP_AUTHORIZATION_TYPE>=capability\n+   * If set, this capability is inspected\n    */\n   public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n-  public static final String HTTP_CAPABILITY_DEFAULT = WarpScriptStack.CAPABILITIES_PREFIX + \"HTTP\";\n \n   //\n   // CONFIGURATION\n", "next_change": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 8eda4d91..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Maximum number of calls to HTTP in a session\n    */\n-  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"maxrequests\";\n   public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n \n   /**\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -47,18 +44,6 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // CONFIGURATION\n   //\n \n-  /**\n-   * Maximum number of calls to HTTP in a session\n-   */\n-  public static final String WARPSCRIPT_HTTP_LIMIT = \"maxrequests\";\n-  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n-\n-  /**\n-   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n-   */\n-  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n-  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n-\n   /**\n    * Allowed and excluded host patterns.\n    */\n", "next_change": {"commit": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -27,21 +27,21 @@ import java.util.Map;\n public class HttpWarpScriptExtension extends WarpScriptExtension {\n \n   //\n-  // AUTHORIZATION\n+  // Authorization\n   //\n \n   /**\n    * If set to true, HTTP requires the stack to be authenticated\n    */\n-  public static final String HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n+  public static final String WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n \n   /**\n    * If set, this capability is inspected\n    */\n-  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+  public static final String WARPSCRIPT_HTTP_CAPABILITY = \"warpscript.http.capability\";\n \n   //\n-  // CONFIGURATION\n+  // Web control\n   //\n \n   /**\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // Stack attributes (configurable via capabilities)\n+  // Stack attributes\n   //\n \n   /**\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -56,7 +56,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n+  public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n    * Current  HTTP so far in the sessions\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -54,15 +54,20 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Number of calls to HTTP so far in the sessions\n+   * Number of calls to HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n-   * Current  HTTP so far in the sessions\n+   * Current HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n+  /**\n+   * Cap name for raising max chunk size\n+   */\n+  public static final String ATTRIBUTE_CHUNK_SIZE = \"http.chunksize\";\n+\n   //\n   // Configurable limits (can be raised with capabilities)\n   //\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // STACK\n+  // Stack attributes (configurable via capabilities)\n   //\n \n   /**\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // Stack attributes (configurable via capabilities)\n+  // Stack attributes\n   //\n \n   /**\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -56,7 +56,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n+  public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n    * Current  HTTP so far in the sessions\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -54,15 +54,20 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Number of calls to HTTP so far in the sessions\n+   * Number of calls to HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n-   * Current  HTTP so far in the sessions\n+   * Current HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n+  /**\n+   * Cap name for raising max chunk size\n+   */\n+  public static final String ATTRIBUTE_CHUNK_SIZE = \"http.chunksize\";\n+\n   //\n   // Configurable limits (can be raised with capabilities)\n   //\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjMwMg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212302", "body": "change the name to maxrequests", "bodyText": "change the name to maxrequests", "bodyHTML": "<p dir=\"auto\">change the name to maxrequests</p>", "author": "hbs", "createdAt": "2020-12-19T08:45:23Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -45,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Maximum number of calls to HTTP in a session\n    */\n-  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"maxrequests\";\n   public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n \n   /**\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -47,18 +44,6 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // CONFIGURATION\n   //\n \n-  /**\n-   * Maximum number of calls to HTTP in a session\n-   */\n-  public static final String WARPSCRIPT_HTTP_LIMIT = \"maxrequests\";\n-  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n-\n-  /**\n-   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n-   */\n-  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n-  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n-\n   /**\n    * Allowed and excluded host patterns.\n    */\n", "next_change": {"commit": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -27,21 +27,21 @@ import java.util.Map;\n public class HttpWarpScriptExtension extends WarpScriptExtension {\n \n   //\n-  // AUTHORIZATION\n+  // Authorization\n   //\n \n   /**\n    * If set to true, HTTP requires the stack to be authenticated\n    */\n-  public static final String HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n+  public static final String WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n \n   /**\n    * If set, this capability is inspected\n    */\n-  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+  public static final String WARPSCRIPT_HTTP_CAPABILITY = \"warpscript.http.capability\";\n \n   //\n-  // CONFIGURATION\n+  // Web control\n   //\n \n   /**\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // Stack attributes (configurable via capabilities)\n+  // Stack attributes\n   //\n \n   /**\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -56,7 +56,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n+  public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n    * Current  HTTP so far in the sessions\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -54,15 +54,20 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Number of calls to HTTP so far in the sessions\n+   * Number of calls to HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n-   * Current  HTTP so far in the sessions\n+   * Current HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n+  /**\n+   * Cap name for raising max chunk size\n+   */\n+  public static final String ATTRIBUTE_CHUNK_SIZE = \"http.chunksize\";\n+\n   //\n   // Configurable limits (can be raised with capabilities)\n   //\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // STACK\n+  // Stack attributes (configurable via capabilities)\n   //\n \n   /**\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // Stack attributes (configurable via capabilities)\n+  // Stack attributes\n   //\n \n   /**\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -56,7 +56,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n+  public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n    * Current  HTTP so far in the sessions\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -54,15 +54,20 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Number of calls to HTTP so far in the sessions\n+   * Number of calls to HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n-   * Current  HTTP so far in the sessions\n+   * Current HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n+  /**\n+   * Cap name for raising max chunk size\n+   */\n+  public static final String ATTRIBUTE_CHUNK_SIZE = \"http.chunksize\";\n+\n   //\n   // Configurable limits (can be raised with capabilities)\n   //\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjM2Nw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212367", "body": "remove the hard limit and use token capabilities.", "bodyText": "remove the hard limit and use token capabilities.", "bodyHTML": "<p dir=\"auto\">remove the hard limit and use token capabilities.</p>", "author": "hbs", "createdAt": "2020-12-19T08:45:50Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -45,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Maximum number of calls to HTTP in a session\n    */\n-  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"maxrequests\";\n   public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n \n   /**\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -47,18 +44,6 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // CONFIGURATION\n   //\n \n-  /**\n-   * Maximum number of calls to HTTP in a session\n-   */\n-  public static final String WARPSCRIPT_HTTP_LIMIT = \"maxrequests\";\n-  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n-\n-  /**\n-   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n-   */\n-  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n-  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n-\n   /**\n    * Allowed and excluded host patterns.\n    */\n", "next_change": {"commit": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -27,21 +27,21 @@ import java.util.Map;\n public class HttpWarpScriptExtension extends WarpScriptExtension {\n \n   //\n-  // AUTHORIZATION\n+  // Authorization\n   //\n \n   /**\n    * If set to true, HTTP requires the stack to be authenticated\n    */\n-  public static final String HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n+  public static final String WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n \n   /**\n    * If set, this capability is inspected\n    */\n-  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+  public static final String WARPSCRIPT_HTTP_CAPABILITY = \"warpscript.http.capability\";\n \n   //\n-  // CONFIGURATION\n+  // Web control\n   //\n \n   /**\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // Stack attributes (configurable via capabilities)\n+  // Stack attributes\n   //\n \n   /**\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -56,7 +56,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n+  public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n    * Current  HTTP so far in the sessions\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -54,15 +54,20 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Number of calls to HTTP so far in the sessions\n+   * Number of calls to HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n-   * Current  HTTP so far in the sessions\n+   * Current HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n+  /**\n+   * Cap name for raising max chunk size\n+   */\n+  public static final String ATTRIBUTE_CHUNK_SIZE = \"http.chunksize\";\n+\n   //\n   // Configurable limits (can be raised with capabilities)\n   //\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // STACK\n+  // Stack attributes (configurable via capabilities)\n   //\n \n   /**\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // Stack attributes (configurable via capabilities)\n+  // Stack attributes\n   //\n \n   /**\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -56,7 +56,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n+  public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n    * Current  HTTP so far in the sessions\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -54,15 +54,20 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Number of calls to HTTP so far in the sessions\n+   * Number of calls to HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n-   * Current  HTTP so far in the sessions\n+   * Current HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n+  /**\n+   * Cap name for raising max chunk size\n+   */\n+  public static final String ATTRIBUTE_CHUNK_SIZE = \"http.chunksize\";\n+\n   //\n   // Configurable limits (can be raised with capabilities)\n   //\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjM3Mg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212372", "body": "remove hard limit", "bodyText": "remove hard limit", "bodyHTML": "<p dir=\"auto\">remove hard limit</p>", "author": "hbs", "createdAt": "2020-12-19T08:45:57Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -45,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Maximum number of calls to HTTP in a session\n    */\n-  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"maxrequests\";\n   public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n \n   /**\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -47,18 +44,6 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // CONFIGURATION\n   //\n \n-  /**\n-   * Maximum number of calls to HTTP in a session\n-   */\n-  public static final String WARPSCRIPT_HTTP_LIMIT = \"maxrequests\";\n-  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n-\n-  /**\n-   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n-   */\n-  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n-  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n-\n   /**\n    * Allowed and excluded host patterns.\n    */\n", "next_change": {"commit": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -27,21 +27,21 @@ import java.util.Map;\n public class HttpWarpScriptExtension extends WarpScriptExtension {\n \n   //\n-  // AUTHORIZATION\n+  // Authorization\n   //\n \n   /**\n    * If set to true, HTTP requires the stack to be authenticated\n    */\n-  public static final String HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n+  public static final String WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED = \"warpscript.http.authentication.required\";\n \n   /**\n    * If set, this capability is inspected\n    */\n-  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+  public static final String WARPSCRIPT_HTTP_CAPABILITY = \"warpscript.http.capability\";\n \n   //\n-  // CONFIGURATION\n+  // Web control\n   //\n \n   /**\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // Stack attributes (configurable via capabilities)\n+  // Stack attributes\n   //\n \n   /**\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -56,7 +56,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n+  public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n    * Current  HTTP so far in the sessions\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -54,15 +54,20 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Number of calls to HTTP so far in the sessions\n+   * Number of calls to HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n-   * Current  HTTP so far in the sessions\n+   * Current HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n+  /**\n+   * Cap name for raising max chunk size\n+   */\n+  public static final String ATTRIBUTE_CHUNK_SIZE = \"http.chunksize\";\n+\n   //\n   // Configurable limits (can be raised with capabilities)\n   //\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // STACK\n+  // Stack attributes (configurable via capabilities)\n   //\n \n   /**\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -50,7 +50,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n \n   //\n-  // Stack attributes (configurable via capabilities)\n+  // Stack attributes\n   //\n \n   /**\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -56,7 +56,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n+  public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n    * Current  HTTP so far in the sessions\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -54,15 +54,20 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   //\n \n   /**\n-   * Number of calls to HTTP so far in the sessions\n+   * Number of calls to HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_REQUESTS = \"http.requests\";\n \n   /**\n-   * Current  HTTP so far in the sessions\n+   * Current HTTP so far in the sessions and cap name for raising related limit\n    */\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n+  /**\n+   * Cap name for raising max chunk size\n+   */\n+  public static final String ATTRIBUTE_CHUNK_SIZE = \"http.chunksize\";\n+\n   //\n   // Configurable limits (can be raised with capabilities)\n   //\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjQzOA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212438", "body": "rename to http.requests", "bodyText": "rename to http.requests", "bodyHTML": "<p dir=\"auto\">rename to http.requests</p>", "author": "hbs", "createdAt": "2020-12-19T08:46:30Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -66,13 +71,13 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Maximum number of calls to HTTP in a session\n    */\n-  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.maxrequests\";\n   public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n \n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n \n   /**\n    * Maximum cumulative size of content retrieved via calls to HTTP in a session\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -68,23 +53,11 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // STACK\n   //\n \n-  /**\n-   * Maximum number of calls to HTTP in a session\n-   */\n-  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.maxrequests\";\n-  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n-\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n   public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n \n-  /**\n-   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n-   */\n-  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n-  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n-\n   /**\n    * Current  HTTP so far in the sessions\n    */\n", "next_change": {"commit": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -64,7 +64,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n   //\n-  // DEFAULTS\n+  // Defaults\n   //\n \n   public static final long DEFAULT_HTTP_LIMIT = 1L;\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -64,7 +64,22 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n   //\n-  // Defaults\n+  // Configurable limits (can be raised with capabilities)\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP\n+   */\n+  public static final String WARPSCRIPT_HTTP_COUNT = \"warpscript.http.requests\";\n+\n+\n+  /**\n+   * Maximum cumulative size allowed to be downloaded by HTTP\n+   */\n+  public static final String WARPSCRIPT_HTTP_SIZE = \"warpscript.http.size\";\n+\n+  //\n+  // Defaults limits if configuration not present\n   //\n \n   public static final long DEFAULT_HTTP_LIMIT = 1L;\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -82,7 +82,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // Defaults limits if configuration not present\n   //\n \n-  public static final long DEFAULT_HTTP_LIMIT = 1L;\n+  public static final long DEFAULT_HTTP_REQUESTS = 1L;\n   public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n \n   //\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -84,6 +93,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n \n   public static final long DEFAULT_HTTP_REQUESTS = 1L;\n   public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n+  public static final long DEFAULT_HTTP_CHUNK_SIZE = 65536L;\n \n   //\n   // Init extension\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjQ2OA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212468", "body": "rename to http.maxrequests", "bodyText": "rename to http.maxrequests", "bodyHTML": "<p dir=\"auto\">rename to http.maxrequests</p>", "author": "hbs", "createdAt": "2020-12-19T08:46:44Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -66,13 +71,13 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Maximum number of calls to HTTP in a session\n    */\n-  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.maxrequests\";\n   public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n \n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n \n   /**\n    * Maximum cumulative size of content retrieved via calls to HTTP in a session\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -68,23 +53,11 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // STACK\n   //\n \n-  /**\n-   * Maximum number of calls to HTTP in a session\n-   */\n-  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.maxrequests\";\n-  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n-\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n   public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n \n-  /**\n-   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n-   */\n-  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n-  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n-\n   /**\n    * Current  HTTP so far in the sessions\n    */\n", "next_change": {"commit": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -64,7 +64,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n   //\n-  // DEFAULTS\n+  // Defaults\n   //\n \n   public static final long DEFAULT_HTTP_LIMIT = 1L;\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -64,7 +64,22 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n   //\n-  // Defaults\n+  // Configurable limits (can be raised with capabilities)\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP\n+   */\n+  public static final String WARPSCRIPT_HTTP_COUNT = \"warpscript.http.requests\";\n+\n+\n+  /**\n+   * Maximum cumulative size allowed to be downloaded by HTTP\n+   */\n+  public static final String WARPSCRIPT_HTTP_SIZE = \"warpscript.http.size\";\n+\n+  //\n+  // Defaults limits if configuration not present\n   //\n \n   public static final long DEFAULT_HTTP_LIMIT = 1L;\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -82,7 +82,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // Defaults limits if configuration not present\n   //\n \n-  public static final long DEFAULT_HTTP_LIMIT = 1L;\n+  public static final long DEFAULT_HTTP_REQUESTS = 1L;\n   public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n \n   //\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -84,6 +93,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n \n   public static final long DEFAULT_HTTP_REQUESTS = 1L;\n   public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n+  public static final long DEFAULT_HTTP_CHUNK_SIZE = 65536L;\n \n   //\n   // Init extension\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjU4NQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212585", "body": "remove hard limit", "bodyText": "remove hard limit", "bodyHTML": "<p dir=\"auto\">remove hard limit</p>", "author": "hbs", "createdAt": "2020-12-19T08:48:01Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -66,13 +71,13 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   /**\n    * Maximum number of calls to HTTP in a session\n    */\n-  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.maxrequests\";\n   public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n \n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n-  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n \n   /**\n    * Maximum cumulative size of content retrieved via calls to HTTP in a session\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -68,23 +53,11 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // STACK\n   //\n \n-  /**\n-   * Maximum number of calls to HTTP in a session\n-   */\n-  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.maxrequests\";\n-  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n-\n   /**\n    * Number of calls to HTTP so far in the sessions\n    */\n   public static final String ATTRIBUTE_HTTP_COUNT = \"http.requests\";\n \n-  /**\n-   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n-   */\n-  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n-  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n-\n   /**\n    * Current  HTTP so far in the sessions\n    */\n", "next_change": {"commit": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 238055dc..6997467d 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -64,7 +64,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n   //\n-  // DEFAULTS\n+  // Defaults\n   //\n \n   public static final long DEFAULT_HTTP_LIMIT = 1L;\n", "next_change": {"commit": "3801230ee2faca1993d62c4645fc4284f284e322", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 6997467d..a605c83e 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -64,7 +64,22 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n \n   //\n-  // Defaults\n+  // Configurable limits (can be raised with capabilities)\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP\n+   */\n+  public static final String WARPSCRIPT_HTTP_COUNT = \"warpscript.http.requests\";\n+\n+\n+  /**\n+   * Maximum cumulative size allowed to be downloaded by HTTP\n+   */\n+  public static final String WARPSCRIPT_HTTP_SIZE = \"warpscript.http.size\";\n+\n+  //\n+  // Defaults limits if configuration not present\n   //\n \n   public static final long DEFAULT_HTTP_LIMIT = 1L;\n", "next_change": {"commit": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex a605c83e..60626995 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -82,7 +82,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // Defaults limits if configuration not present\n   //\n \n-  public static final long DEFAULT_HTTP_LIMIT = 1L;\n+  public static final long DEFAULT_HTTP_REQUESTS = 1L;\n   public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n \n   //\n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 60626995..b3cfa8a6 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -84,6 +93,7 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n \n   public static final long DEFAULT_HTTP_REQUESTS = 1L;\n   public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n+  public static final long DEFAULT_HTTP_CHUNK_SIZE = 65536L;\n \n   //\n   // Init extension\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjcwMw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212703", "body": "this is too high, limit to 1 so users explicitly set the configuration.", "bodyText": "this is too high, limit to 1 so users explicitly set the configuration.", "bodyHTML": "<p dir=\"auto\">this is too high, limit to 1 so users explicitly set the configuration.</p>", "author": "hbs", "createdAt": "2020-12-19T08:49:00Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n+\n+  /**\n+   * Current  HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n+\n+  //\n+  // DEFAULTS\n+  //\n+\n+  public static final long DEFAULT_HTTP_LIMIT = 64L;", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzY1OTA5MQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r597659091", "bodyText": "Limit has been set to 1L. But since auth_macro may need to make requests as well (e.g. digest authentication), should we raise this default to a few more ?", "author": "randomboolean", "createdAt": "2021-03-19T13:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -89,8 +94,8 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // DEFAULTS\n   //\n \n-  public static final long DEFAULT_HTTP_LIMIT = 64L;\n-  public static final long DEFAULT_HTTP_MAXSIZE = 1000000L;\n+  public static final long DEFAULT_HTTP_LIMIT = 1L;\n+  public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n \n   //\n   // ASSOCIATIONS attributes to either configuration or defaults\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -98,80 +71,15 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n \n   //\n-  // ASSOCIATIONS attributes to either configuration or defaults\n+  // Init extension\n   //\n \n-  /**\n-   * Associates the attribute name to the configuration name\n-   */\n-  private static final Map<String, String> attributeToConf;\n-\n-  /**\n-   * Associates the attribute name to its default value\n-   */\n-  private static final Map<String, Long> attributeToDefault;\n-\n-  private static final Map<String, Object> functions;\n-\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   static {\n-    // Initialize attribute->configuration\n-    Map<String, String> a2c = new HashMap<String, String>();\n-    a2c.put(ATTRIBUTE_HTTP_LIMIT, WARPSCRIPT_HTTP_LIMIT);\n-    a2c.put(ATTRIBUTE_HTTP_MAXSIZE, WARPSCRIPT_HTTP_MAXSIZE);\n-    a2c.put(ATTRIBUTE_HTTP_LIMIT_HARD, WARPSCRIPT_HTTP_LIMIT_HARD);\n-    a2c.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, WARPSCRIPT_HTTP_MAXSIZE_HARD);\n-    attributeToConf = Collections.unmodifiableMap(a2c);\n-\n-    // Initialize attribute->default\n-    Map<String, Long> a2d = new HashMap<String, Long>();\n-    a2d.put(ATTRIBUTE_HTTP_LIMIT, DEFAULT_HTTP_LIMIT);\n-    a2d.put(ATTRIBUTE_HTTP_MAXSIZE, DEFAULT_HTTP_MAXSIZE);\n-    a2d.put(ATTRIBUTE_HTTP_LIMIT_HARD, DEFAULT_HTTP_LIMIT);\n-    a2d.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, DEFAULT_HTTP_MAXSIZE);\n-    attributeToDefault = Collections.unmodifiableMap(a2d);\n-\n-    // Create functions and map\n-    functions = new HashMap<String, Object>();\n-\n     functions.put(\"HTTP\", new HTTP(\"HTTP\"));\n-    functions.put(\"MAXURLCOUNT\", new MAXURLCOUNT(\"MAXURLCOUNT\"));\n-    functions.put(\"MAXDOWNLOADSIZE\", new MAXDOWNLOADSIZE(\"MAXDOWNLOADSIZE\"));\n   }\n \n   public Map<String, Object> getFunctions() {\n     return functions;\n   }\n-\n-  /**\n-   * Get the value of the attribute in the stack, if not present get the value in the configuration and it not present either, get the default value.\n-   * Also set the attribute in the stack once the value is found.\n-   *\n-   * @param stack     The stack the get the attribute from, if present.\n-   * @param attribute The attribute name to get.\n-   * @return The first available value in the list: attribute value, configuration value, default.\n-   */\n-  public static Long getLongAttribute(WarpScriptStack stack, String attribute) {\n-    // Get the value from stack attributes if available\n-    Object attributeValue = stack.getAttribute(attribute);\n-\n-    if (null != attributeValue) {\n-      return (Long) attributeValue;\n-    }\n-\n-    // Get the value from conf or default\n-    String associatedConf = attributeToConf.get(attribute);\n-\n-    Long longValue = attributeToDefault.get(attribute);\n-\n-    // Overwrite the default with the conf, if available\n-    String confValue = WarpConfig.getProperty(associatedConf);\n-    if (null != confValue) {\n-      longValue = Long.valueOf(confValue);\n-    }\n-\n-    // The the stack attribute for future usage\n-    stack.setAttribute(attribute, longValue);\n-\n-    return longValue;\n-  }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjcyMg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212722", "body": "Lower that to 65536", "bodyText": "Lower that to 65536", "bodyHTML": "<p dir=\"auto\">Lower that to 65536</p>", "author": "hbs", "createdAt": "2020-12-19T08:49:17Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n+\n+  /**\n+   * Current  HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n+\n+  //\n+  // DEFAULTS\n+  //\n+\n+  public static final long DEFAULT_HTTP_LIMIT = 64L;\n+  public static final long DEFAULT_HTTP_MAXSIZE = 1000000L;", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..268acbc4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -89,8 +94,8 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // DEFAULTS\n   //\n \n-  public static final long DEFAULT_HTTP_LIMIT = 64L;\n-  public static final long DEFAULT_HTTP_MAXSIZE = 1000000L;\n+  public static final long DEFAULT_HTTP_LIMIT = 1L;\n+  public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n \n   //\n   // ASSOCIATIONS attributes to either configuration or defaults\n", "next_change": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 268acbc4..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -98,80 +71,15 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n \n   //\n-  // ASSOCIATIONS attributes to either configuration or defaults\n+  // Init extension\n   //\n \n-  /**\n-   * Associates the attribute name to the configuration name\n-   */\n-  private static final Map<String, String> attributeToConf;\n-\n-  /**\n-   * Associates the attribute name to its default value\n-   */\n-  private static final Map<String, Long> attributeToDefault;\n-\n-  private static final Map<String, Object> functions;\n-\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   static {\n-    // Initialize attribute->configuration\n-    Map<String, String> a2c = new HashMap<String, String>();\n-    a2c.put(ATTRIBUTE_HTTP_LIMIT, WARPSCRIPT_HTTP_LIMIT);\n-    a2c.put(ATTRIBUTE_HTTP_MAXSIZE, WARPSCRIPT_HTTP_MAXSIZE);\n-    a2c.put(ATTRIBUTE_HTTP_LIMIT_HARD, WARPSCRIPT_HTTP_LIMIT_HARD);\n-    a2c.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, WARPSCRIPT_HTTP_MAXSIZE_HARD);\n-    attributeToConf = Collections.unmodifiableMap(a2c);\n-\n-    // Initialize attribute->default\n-    Map<String, Long> a2d = new HashMap<String, Long>();\n-    a2d.put(ATTRIBUTE_HTTP_LIMIT, DEFAULT_HTTP_LIMIT);\n-    a2d.put(ATTRIBUTE_HTTP_MAXSIZE, DEFAULT_HTTP_MAXSIZE);\n-    a2d.put(ATTRIBUTE_HTTP_LIMIT_HARD, DEFAULT_HTTP_LIMIT);\n-    a2d.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, DEFAULT_HTTP_MAXSIZE);\n-    attributeToDefault = Collections.unmodifiableMap(a2d);\n-\n-    // Create functions and map\n-    functions = new HashMap<String, Object>();\n-\n     functions.put(\"HTTP\", new HTTP(\"HTTP\"));\n-    functions.put(\"MAXURLCOUNT\", new MAXURLCOUNT(\"MAXURLCOUNT\"));\n-    functions.put(\"MAXDOWNLOADSIZE\", new MAXDOWNLOADSIZE(\"MAXDOWNLOADSIZE\"));\n   }\n \n   public Map<String, Object> getFunctions() {\n     return functions;\n   }\n-\n-  /**\n-   * Get the value of the attribute in the stack, if not present get the value in the configuration and it not present either, get the default value.\n-   * Also set the attribute in the stack once the value is found.\n-   *\n-   * @param stack     The stack the get the attribute from, if present.\n-   * @param attribute The attribute name to get.\n-   * @return The first available value in the list: attribute value, configuration value, default.\n-   */\n-  public static Long getLongAttribute(WarpScriptStack stack, String attribute) {\n-    // Get the value from stack attributes if available\n-    Object attributeValue = stack.getAttribute(attribute);\n-\n-    if (null != attributeValue) {\n-      return (Long) attributeValue;\n-    }\n-\n-    // Get the value from conf or default\n-    String associatedConf = attributeToConf.get(attribute);\n-\n-    Long longValue = attributeToDefault.get(attribute);\n-\n-    // Overwrite the default with the conf, if available\n-    String confValue = WarpConfig.getProperty(associatedConf);\n-    if (null != confValue) {\n-      longValue = Long.valueOf(confValue);\n-    }\n-\n-    // The the stack attribute for future usage\n-    stack.setAttribute(attribute, longValue);\n-\n-    return longValue;\n-  }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjg2NA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212864", "body": "Remove this. We can consider adding a method to StackUtils to enforce a similar logic but with a simpler behavior, i.e. no attributeToConf structure but simply an extraneous parameter to the call.", "bodyText": "Remove this. We can consider adding a method to StackUtils to enforce a similar logic but with a simpler behavior, i.e. no attributeToConf structure but simply an extraneous parameter to the call.", "bodyHTML": "<p dir=\"auto\">Remove this. We can consider adding a method to StackUtils to enforce a similar logic but with a simpler behavior, i.e. no attributeToConf structure but simply an extraneous parameter to the call.</p>", "author": "hbs", "createdAt": "2020-12-19T08:51:48Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n+\n+  /**\n+   * Current  HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n+\n+  //\n+  // DEFAULTS\n+  //\n+\n+  public static final long DEFAULT_HTTP_LIMIT = 64L;\n+  public static final long DEFAULT_HTTP_MAXSIZE = 1000000L;\n+\n+  //\n+  // ASSOCIATIONS attributes to either configuration or defaults\n+  //\n+\n+  /**\n+   * Associates the attribute name to the configuration name\n+   */\n+  private static final Map<String, String> attributeToConf;\n+\n+  /**\n+   * Associates the attribute name to its default value\n+   */\n+  private static final Map<String, Long> attributeToDefault;\n+\n+  private static final Map<String, Object> functions;\n+\n+  static {\n+    // Initialize attribute->configuration\n+    Map<String, String> a2c = new HashMap<String, String>();\n+    a2c.put(ATTRIBUTE_HTTP_LIMIT, WARPSCRIPT_HTTP_LIMIT);\n+    a2c.put(ATTRIBUTE_HTTP_MAXSIZE, WARPSCRIPT_HTTP_MAXSIZE);\n+    a2c.put(ATTRIBUTE_HTTP_LIMIT_HARD, WARPSCRIPT_HTTP_LIMIT_HARD);\n+    a2c.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, WARPSCRIPT_HTTP_MAXSIZE_HARD);\n+    attributeToConf = Collections.unmodifiableMap(a2c);\n+\n+    // Initialize attribute->default\n+    Map<String, Long> a2d = new HashMap<String, Long>();\n+    a2d.put(ATTRIBUTE_HTTP_LIMIT, DEFAULT_HTTP_LIMIT);\n+    a2d.put(ATTRIBUTE_HTTP_MAXSIZE, DEFAULT_HTTP_MAXSIZE);\n+    a2d.put(ATTRIBUTE_HTTP_LIMIT_HARD, DEFAULT_HTTP_LIMIT);\n+    a2d.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, DEFAULT_HTTP_MAXSIZE);\n+    attributeToDefault = Collections.unmodifiableMap(a2d);\n+\n+    // Create functions and map\n+    functions = new HashMap<String, Object>();\n+\n+    functions.put(\"HTTP\", new HTTP(\"HTTP\"));\n+    functions.put(\"MAXURLCOUNT\", new MAXURLCOUNT(\"MAXURLCOUNT\"));\n+    functions.put(\"MAXDOWNLOADSIZE\", new MAXDOWNLOADSIZE(\"MAXDOWNLOADSIZE\"));\n+  }\n+\n+  public Map<String, Object> getFunctions() {\n+    return functions;\n+  }\n+\n+  /**\n+   * Get the value of the attribute in the stack, if not present get the value in the configuration and it not present either, get the default value.\n+   * Also set the attribute in the stack once the value is found.\n+   *\n+   * @param stack     The stack the get the attribute from, if present.\n+   * @param attribute The attribute name to get.\n+   * @return The first available value in the list: attribute value, configuration value, default.\n+   */\n+  public static Long getLongAttribute(WarpScriptStack stack, String attribute) {", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28a0cb52d252c5c04842994fe78d3005043efaaa", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\nindex 58a17670..238055dc 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java\n", "chunk": "@@ -89,84 +67,19 @@ public class HttpWarpScriptExtension extends WarpScriptExtension {\n   // DEFAULTS\n   //\n \n-  public static final long DEFAULT_HTTP_LIMIT = 64L;\n-  public static final long DEFAULT_HTTP_MAXSIZE = 1000000L;\n+  public static final long DEFAULT_HTTP_LIMIT = 1L;\n+  public static final long DEFAULT_HTTP_MAXSIZE = 65536L;\n \n   //\n-  // ASSOCIATIONS attributes to either configuration or defaults\n+  // Init extension\n   //\n \n-  /**\n-   * Associates the attribute name to the configuration name\n-   */\n-  private static final Map<String, String> attributeToConf;\n-\n-  /**\n-   * Associates the attribute name to its default value\n-   */\n-  private static final Map<String, Long> attributeToDefault;\n-\n-  private static final Map<String, Object> functions;\n-\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   static {\n-    // Initialize attribute->configuration\n-    Map<String, String> a2c = new HashMap<String, String>();\n-    a2c.put(ATTRIBUTE_HTTP_LIMIT, WARPSCRIPT_HTTP_LIMIT);\n-    a2c.put(ATTRIBUTE_HTTP_MAXSIZE, WARPSCRIPT_HTTP_MAXSIZE);\n-    a2c.put(ATTRIBUTE_HTTP_LIMIT_HARD, WARPSCRIPT_HTTP_LIMIT_HARD);\n-    a2c.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, WARPSCRIPT_HTTP_MAXSIZE_HARD);\n-    attributeToConf = Collections.unmodifiableMap(a2c);\n-\n-    // Initialize attribute->default\n-    Map<String, Long> a2d = new HashMap<String, Long>();\n-    a2d.put(ATTRIBUTE_HTTP_LIMIT, DEFAULT_HTTP_LIMIT);\n-    a2d.put(ATTRIBUTE_HTTP_MAXSIZE, DEFAULT_HTTP_MAXSIZE);\n-    a2d.put(ATTRIBUTE_HTTP_LIMIT_HARD, DEFAULT_HTTP_LIMIT);\n-    a2d.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, DEFAULT_HTTP_MAXSIZE);\n-    attributeToDefault = Collections.unmodifiableMap(a2d);\n-\n-    // Create functions and map\n-    functions = new HashMap<String, Object>();\n-\n     functions.put(\"HTTP\", new HTTP(\"HTTP\"));\n-    functions.put(\"MAXURLCOUNT\", new MAXURLCOUNT(\"MAXURLCOUNT\"));\n-    functions.put(\"MAXDOWNLOADSIZE\", new MAXDOWNLOADSIZE(\"MAXDOWNLOADSIZE\"));\n   }\n \n   public Map<String, Object> getFunctions() {\n     return functions;\n   }\n-\n-  /**\n-   * Get the value of the attribute in the stack, if not present get the value in the configuration and it not present either, get the default value.\n-   * Also set the attribute in the stack once the value is found.\n-   *\n-   * @param stack     The stack the get the attribute from, if present.\n-   * @param attribute The attribute name to get.\n-   * @return The first available value in the list: attribute value, configuration value, default.\n-   */\n-  public static Long getLongAttribute(WarpScriptStack stack, String attribute) {\n-    // Get the value from stack attributes if available\n-    Object attributeValue = stack.getAttribute(attribute);\n-\n-    if (null != attributeValue) {\n-      return (Long) attributeValue;\n-    }\n-\n-    // Get the value from conf or default\n-    String associatedConf = attributeToConf.get(attribute);\n-\n-    Long longValue = attributeToDefault.get(attribute);\n-\n-    // Overwrite the default with the conf, if available\n-    String confValue = WarpConfig.getProperty(associatedConf);\n-    if (null != confValue) {\n-      longValue = Long.valueOf(confValue);\n-    }\n-\n-    // The the stack attribute for future usage\n-    stack.setAttribute(attribute, longValue);\n-\n-    return longValue;\n-  }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjg5OA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212898", "body": "2020", "bodyText": "2020", "bodyHTML": "<p dir=\"auto\">2020</p>", "author": "hbs", "createdAt": "2020-12-19T08:52:12Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.", "originalCommit": "822e405ec4807f902d2e351d438174bd0ab9678a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5e69b4b49e3b4debc57c2ef45f95dbe97b65cf3d", "url": "https://github.com/senx/warp10-platform/commit/5e69b4b49e3b4debc57c2ef45f95dbe97b65cf3d", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP", "committedDate": "2021-01-28T15:26:38Z", "type": "commit"}, {"oid": "40a37df1a059faaff0319bbc52820a677360c78e", "url": "https://github.com/senx/warp10-platform/commit/40a37df1a059faaff0319bbc52820a677360c78e", "message": "modify config", "committedDate": "2021-01-28T15:51:50Z", "type": "commit"}, {"oid": "7200e3cf96ffff0373e2ce0ffdc251b26476412f", "url": "https://github.com/senx/warp10-platform/commit/7200e3cf96ffff0373e2ce0ffdc251b26476412f", "message": "Merge branch 'HTTP' of github.com:randomboolean/warp10-platform into HTTP", "committedDate": "2021-01-28T15:57:43Z", "type": "commit"}, {"oid": "79e81264d233abadff65f772a9bff1d218de18b7", "url": "https://github.com/senx/warp10-platform/commit/79e81264d233abadff65f772a9bff1d218de18b7", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP", "committedDate": "2021-03-17T15:42:55Z", "type": "commit"}, {"oid": "f198c0f946767df0a942435880c3003e04862e32", "url": "https://github.com/senx/warp10-platform/commit/f198c0f946767df0a942435880c3003e04862e32", "message": "resolve some points", "committedDate": "2021-03-17T16:54:16Z", "type": "commit"}, {"oid": "48c93d60435ad1dd7e16721cfab16357f54bb244", "url": "https://github.com/senx/warp10-platform/commit/48c93d60435ad1dd7e16721cfab16357f54bb244", "message": "nit", "committedDate": "2021-03-17T17:01:18Z", "type": "commit"}, {"oid": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "url": "https://github.com/senx/warp10-platform/commit/ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "message": "change authorization handling", "committedDate": "2021-03-18T09:22:48Z", "type": "commit"}, {"oid": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "url": "https://github.com/senx/warp10-platform/commit/7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "message": "resolve some comments", "committedDate": "2021-03-18T09:32:25Z", "type": "commit"}, {"oid": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "url": "https://github.com/senx/warp10-platform/commit/0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "message": "replace list output by map", "committedDate": "2021-03-18T10:08:26Z", "type": "commit"}, {"oid": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "url": "https://github.com/senx/warp10-platform/commit/0e958230cc93081b2f79bc7182b43bc2f91e9c64", "message": "request body can be BYTES or STRING", "committedDate": "2021-03-18T10:27:10Z", "type": "commit"}, {"oid": "3f794c39f29441072747f797bb141ff61679066b", "url": "https://github.com/senx/warp10-platform/commit/3f794c39f29441072747f797bb141ff61679066b", "message": "remove sync", "committedDate": "2021-03-18T11:10:14Z", "type": "commit"}, {"oid": "e6f39969814200600fdc582732aa65d57813a3fc", "url": "https://github.com/senx/warp10-platform/commit/e6f39969814200600fdc582732aa65d57813a3fc", "message": "check protocol", "committedDate": "2021-03-18T15:26:33Z", "type": "commit"}, {"oid": "1310de4c8047c041d1708afae93887a974fdd1b0", "url": "https://github.com/senx/warp10-platform/commit/1310de4c8047c041d1708afae93887a974fdd1b0", "message": "basic authentication", "committedDate": "2021-03-18T16:06:16Z", "type": "commit"}, {"oid": "28a0cb52d252c5c04842994fe78d3005043efaaa", "url": "https://github.com/senx/warp10-platform/commit/28a0cb52d252c5c04842994fe78d3005043efaaa", "message": "replace conf with capabilities", "committedDate": "2021-03-18T17:37:27Z", "type": "commit"}, {"oid": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "url": "https://github.com/senx/warp10-platform/commit/f15a316845fcfbbad9f7cd4c49a6a031182e9143", "message": "conf and web access control", "committedDate": "2021-03-18T17:51:35Z", "type": "commit"}, {"oid": "bd42862c9fb7fd24bdb447524992f349d2aaa426", "url": "https://github.com/senx/warp10-platform/commit/bd42862c9fb7fd24bdb447524992f349d2aaa426", "message": "comments", "committedDate": "2021-03-18T18:01:45Z", "type": "commit"}, {"oid": "593ae663acc4444f2db9948ebd4bcb1941fb95b9", "url": "https://github.com/senx/warp10-platform/commit/593ae663acc4444f2db9948ebd4bcb1941fb95b9", "message": "comments and conf", "committedDate": "2021-03-19T10:26:19Z", "type": "commit"}, {"oid": "288666824ba884e3689ab8713870e6d7566b4ba6", "url": "https://github.com/senx/warp10-platform/commit/288666824ba884e3689ab8713870e6d7566b4ba6", "message": "add chunk option for streaming", "committedDate": "2021-03-19T12:09:25Z", "type": "commit"}, {"oid": "bd4324a8a49aa57d835c0eee70cbfcbed32dbf60", "url": "https://github.com/senx/warp10-platform/commit/bd4324a8a49aa57d835c0eee70cbfcbed32dbf60", "message": "bugfix", "committedDate": "2021-03-19T15:46:33Z", "type": "commit"}, {"oid": "19463b6059adc8c8c16749fa42857cefc53d2967", "url": "https://github.com/senx/warp10-platform/commit/19463b6059adc8c8c16749fa42857cefc53d2967", "message": " allow null as default value", "committedDate": "2021-03-19T15:47:01Z", "type": "commit"}, {"oid": "af665abf2583a7095f6c986547af6c2392e83c1a", "url": "https://github.com/senx/warp10-platform/commit/af665abf2583a7095f6c986547af6c2392e83c1a", "message": "reuse same map in chunk mode", "committedDate": "2021-03-20T21:59:31Z", "type": "commit"}, {"oid": "3801230ee2faca1993d62c4645fc4284f284e322", "url": "https://github.com/senx/warp10-platform/commit/3801230ee2faca1993d62c4645fc4284f284e322", "message": "configurable defaults", "committedDate": "2021-03-21T09:39:21Z", "type": "commit"}, {"oid": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "url": "https://github.com/senx/warp10-platform/commit/7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "message": "conf variable renaming", "committedDate": "2021-03-21T09:40:35Z", "type": "commit"}, {"oid": "1fc33e4f1c7a26d4d8163a82d6c16e12ed6de823", "url": "https://github.com/senx/warp10-platform/commit/1fc33e4f1c7a26d4d8163a82d6c16e12ed6de823", "message": "nit", "committedDate": "2021-03-21T09:40:56Z", "type": "commit"}, {"oid": "30451cad079f54f5a33feb96241cfe64274fb6c6", "url": "https://github.com/senx/warp10-platform/commit/30451cad079f54f5a33feb96241cfe64274fb6c6", "message": "more comments in conf template", "committedDate": "2021-03-23T09:43:26Z", "type": "commit"}, {"oid": "1533d967b38596ac6a3d9628d4406ed89e09ec1e", "url": "https://github.com/senx/warp10-platform/commit/1533d967b38596ac6a3d9628d4406ed89e09ec1e", "message": "typo fix", "committedDate": "2021-03-23T09:45:18Z", "type": "commit"}, {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "url": "https://github.com/senx/warp10-platform/commit/fe84c89749836226e250b13c2ff55a9a83e94ce1", "message": "update a comment", "committedDate": "2021-03-23T09:49:22Z", "type": "commit"}, {"oid": "82afa6105025a768f57476cd108ccbbbd774c0d0", "url": "https://github.com/senx/warp10-platform/commit/82afa6105025a768f57476cd108ccbbbd774c0d0", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP", "committedDate": "2021-03-23T14:29:40Z", "type": "commit"}, {"oid": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "url": "https://github.com/senx/warp10-platform/commit/de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "message": "remove formatted class", "committedDate": "2021-03-23T14:57:43Z", "type": "commit"}, {"oid": "9c3c4e3991645dd8e5f4ab4ec684c4a7da9d6fbe", "url": "https://github.com/senx/warp10-platform/commit/9c3c4e3991645dd8e5f4ab4ec684c4a7da9d6fbe", "message": "remove changes to formatted class from PR", "committedDate": "2021-03-23T15:16:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUxMTk3Mg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599511972", "body": "Do not prefix with `WarpScriptStack.CAPABILITIES_PREFIX`.\r\nIf a token has the attribute `.cap:http` you're looking for the `http` capability, not the `.cap:http` capability.", "bodyText": "Do not prefix with WarpScriptStack.CAPABILITIES_PREFIX.\nIf a token has the attribute .cap:http you're looking for the http capability, not the .cap:http capability.", "bodyHTML": "<p dir=\"auto\">Do not prefix with <code>WarpScriptStack.CAPABILITIES_PREFIX</code>.<br>\nIf a token has the attribute <code>.cap:http</code> you're looking for the <code>http</code> capability, not the <code>.cap:http</code> capability.</p>", "author": "ftence", "createdAt": "2021-03-23T12:12:18Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1MDg5Ng==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599550896", "bodyText": "Fixing this will make the if useless.", "author": "ftence", "createdAt": "2021-03-23T13:08:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUxMTk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -114,23 +119,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n       webAccessController = new WebAccessController(patternConf);\n     }\n \n-    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n-\n-    args = new ArgumentsBuilder()\n-      .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n-      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n-      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n-      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n-      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n-      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n-      .build();\n-\n-    output = new ArgumentsBuilder()\n-      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n-      .build();\n-\n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n \n", "next_change": {"commit": "2c235401d813184d73fc400c1085988a8b18d508", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..3e3a21da 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -123,12 +123,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n \n     // retrieve capName\n-    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n-    if (null != capNameSuffix) {\n-      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n-    } else {\n-      capName = null;\n-    }\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n     Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n", "next_change": {"commit": "16123a0e979db93d06e632bd81c20876f3583b87", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3e3a21da..184046b7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -126,18 +126,18 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n-    if (null == conf_maxrequests) {\n-      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n     }\n \n-    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n-    if (null == conf_maxsize) {\n-      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      base_maxsize = Long.valueOf((String) conf_maxsize);\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n     }\n   }\n \n", "next_change": {"commit": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 184046b7..b4cb3858 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -141,6 +146,10 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     }\n   }\n \n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUxNjU0Mg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599516542", "body": "Do not prefix with `WarpScriptStack.CAPABILITIES_PREFIX` (x2).", "bodyText": "Do not prefix with WarpScriptStack.CAPABILITIES_PREFIX (x2).", "bodyHTML": "<p dir=\"auto\">Do not prefix with <code>WarpScriptStack.CAPABILITIES_PREFIX</code> (x2).</p>", "author": "ftence", "createdAt": "2021-03-23T12:19:26Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c235401d813184d73fc400c1085988a8b18d508", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..3e3a21da 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -178,15 +168,15 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n       maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n-      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n       maxsize = base_maxsize;\n     }\n", "next_change": {"commit": "16123a0e979db93d06e632bd81c20876f3583b87", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3e3a21da..184046b7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -171,14 +171,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n       maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = base_maxrequests;\n+      maxrequests = baseMaxRequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = base_maxsize;\n+      maxsize = baseMaxSize;\n     }\n \n     //\n", "next_change": {"commit": "d2d871c514ccbef22f9552b7fc121e064fd6dca4", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 184046b7..622b48ef 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -187,11 +189,11 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n     String method = (String) params.get(METHOD);\n     if (null == method) {\n-      throw new WarpScriptException(getName() + \" expects an http method.\");\n+      method = \"GET\";\n     }\n \n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n-    Object body = params.getOrDefault(BODY,\"\");\n+    Object body = params.get(BODY);\n \n     List authInfo = (List) params.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 622b48ef..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -195,8 +198,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n-    List authInfo = (List) params.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    o = params.get(HEADERS_MACRO);\n+    if (!(o instanceof WarpScriptStack.Macro)) {\n+      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    }\n+    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n+\n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..198565de 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -205,6 +217,16 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    long maxchunksize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxchunksize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxchunksize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n+    }\n+\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n", "next_change": {"commit": "1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 198565de..e9a73618 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -210,20 +210,23 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n+    WarpScriptStack.Macro headersMacro = null;\n     o = params.get(HEADERS_MACRO);\n-    if (!(o instanceof WarpScriptStack.Macro)) {\n-      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n     }\n-    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n-    long maxchunksize;\n+    long maxChunkSize;\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n-      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n     } else {\n-      maxchunksize = baseMaxChunkSize;\n+      maxChunkSize = baseMaxChunkSize;\n     }\n-    if (chunkSize > maxchunksize) {\n+    if (chunkSize > maxChunkSize) {\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n", "next_change": {"commit": "99706f330bc85ff7fc92c8203428653e96ce1d11", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex e9a73618..c8d44737 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -230,7 +230,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n \n     //\n     // Check URL\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8d44737..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -246,6 +276,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Object urlParam = params.get(URL);\n     if (null == urlParam) {\n       throw new WarpScriptException(getName() + \" expects a url.\");\n+\n+    } else if (!(urlParam instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects \" + URL + \" to be a STRING.\");\n     }\n \n     URL url = null;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUxNjYxMA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599516610", "body": "Do not prefix with `WarpScriptStack.CAPABILITIES_PREFIX` (x2).", "bodyText": "Do not prefix with WarpScriptStack.CAPABILITIES_PREFIX (x2).", "bodyHTML": "<p dir=\"auto\">Do not prefix with <code>WarpScriptStack.CAPABILITIES_PREFIX</code> (x2).</p>", "author": "ftence", "createdAt": "2021-03-23T12:19:33Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c235401d813184d73fc400c1085988a8b18d508", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..3e3a21da 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -178,15 +168,15 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n       maxrequests = base_maxrequests;\n     }\n \n     long maxsize;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n-      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n       maxsize = base_maxsize;\n     }\n", "next_change": {"commit": "16123a0e979db93d06e632bd81c20876f3583b87", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3e3a21da..184046b7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -171,14 +171,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n       maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = base_maxrequests;\n+      maxrequests = baseMaxRequests;\n     }\n \n     long maxsize;\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n       maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = base_maxsize;\n+      maxsize = baseMaxSize;\n     }\n \n     //\n", "next_change": {"commit": "d2d871c514ccbef22f9552b7fc121e064fd6dca4", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 184046b7..622b48ef 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -187,11 +189,11 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n     String method = (String) params.get(METHOD);\n     if (null == method) {\n-      throw new WarpScriptException(getName() + \" expects an http method.\");\n+      method = \"GET\";\n     }\n \n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n-    Object body = params.getOrDefault(BODY,\"\");\n+    Object body = params.get(BODY);\n \n     List authInfo = (List) params.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 622b48ef..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -195,8 +198,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n-    List authInfo = (List) params.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    o = params.get(HEADERS_MACRO);\n+    if (!(o instanceof WarpScriptStack.Macro)) {\n+      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    }\n+    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n+\n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..198565de 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -205,6 +217,16 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    long maxchunksize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxchunksize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxchunksize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n+    }\n+\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n", "next_change": {"commit": "1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 198565de..e9a73618 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -210,20 +210,23 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n+    WarpScriptStack.Macro headersMacro = null;\n     o = params.get(HEADERS_MACRO);\n-    if (!(o instanceof WarpScriptStack.Macro)) {\n-      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n     }\n-    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n-    long maxchunksize;\n+    long maxChunkSize;\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n-      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n     } else {\n-      maxchunksize = baseMaxChunkSize;\n+      maxChunkSize = baseMaxChunkSize;\n     }\n-    if (chunkSize > maxchunksize) {\n+    if (chunkSize > maxChunkSize) {\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n", "next_change": {"commit": "99706f330bc85ff7fc92c8203428653e96ce1d11", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex e9a73618..c8d44737 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -230,7 +230,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n \n     //\n     // Check URL\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8d44737..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -246,6 +276,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Object urlParam = params.get(URL);\n     if (null == urlParam) {\n       throw new WarpScriptException(getName() + \" expects a url.\");\n+\n+    } else if (!(urlParam instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects \" + URL + \" to be a STRING.\");\n     }\n \n     URL url = null;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzMzQ5NQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599533495", "body": "No \".cap:\" prefix.", "bodyText": "No \".cap:\" prefix.", "bodyHTML": "<p dir=\"auto\">No \".cap:\" prefix.</p>", "author": "ftence", "createdAt": "2021-03-23T12:45:03Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,8 +46,22 @@ import java.util.concurrent.atomic.AtomicLong;\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * .cap:http.requests\n  * .cap:http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n  */\n-public class HTTP extends FormattedWarpScriptFunction {\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n \n   //\n   // Arguments\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzNTQ1MA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599535450", "body": "Parameter names do not have spaces in other functions, I'd go with dots instead, ie \"auth.info\", etc.", "bodyText": "Parameter names do not have spaces in other functions, I'd go with dots instead, ie \"auth.info\", etc.", "bodyHTML": "<p dir=\"auto\">Parameter names do not have spaces in other functions, I'd go with dots instead, ie \"auth.info\", etc.</p>", "author": "ftence", "createdAt": "2021-03-23T12:47:41Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -61,11 +76,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n   public static final String CHUNK_SIZE = \"chunk size\";\n   public static final String CHUNK_MACRO = \"chunk macro\";\n \n-  private final Arguments args;\n-  protected Arguments getArguments() {\n-    return args;\n-  }\n-\n   //\n   // Output\n   //\n", "next_change": {"commit": "16123a0e979db93d06e632bd81c20876f3583b87", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..184046b7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -71,21 +71,21 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   public static final String URL = \"url\";\n   public static final String HEADERS = \"headers\";\n   public static final String BODY = \"body\";\n-  public static final String AUTH_INFO = \"auth info\";\n-  public static final String AUTH_MACRO = \"auth macro\";\n-  public static final String CHUNK_SIZE = \"chunk size\";\n-  public static final String CHUNK_MACRO = \"chunk macro\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n \n   //\n   // Output\n   //\n \n   public static final String RESPONSE = \"response\";\n-  public static final String STATUS_CODE = \"status code\";\n-  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n   public static final String RESPONSE_HEADERS = \"headers\";\n   public static final String CONTENT = \"content\";\n-  public static final String CHUNK_NUMBER = \"chunk number\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n \n   //\n   // Control\n", "next_change": {"commit": "5d6751d06c32bc52be446ef748408004e8654a04", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 184046b7..1eae4859 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -91,7 +92,17 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   // Control\n   //\n \n-  private final WebAccessController webAccessController;\n+  private static final WebAccessController webAccessController;\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+  }\n \n   //\n   // Authorization\n", "next_change": {"commit": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1eae4859..b4cb3858 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -93,33 +95,34 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   //\n \n   private static final WebAccessController webAccessController;\n-  static {\n-    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n-\n-    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n-    if (null == patternConf) {\n-      webAccessController = StandaloneWebCallService.getWebAccessController();\n-    } else {\n-      webAccessController = new WebAccessController(patternConf);\n-    }\n-  }\n \n   //\n   // Authorization\n   //\n \n-  private final boolean auth;\n-  private final String capName;\n+  private static final boolean auth;\n+  private static final String capName;\n \n   //\n   // Limits\n   //\n \n-  private final long baseMaxRequests;\n-  private final long baseMaxSize;\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n \n-  public HTTP(String name) {\n-    super(name);\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n \n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b4cb3858..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -131,18 +134,25 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    String confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n     if (null == confMaxRequests) {\n       baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+      baseMaxRequests = Long.parseLong(confMaxRequests);\n     }\n \n-    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    String confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n     if (null == confMaxSize) {\n       baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      baseMaxSize = Long.parseLong((String) confMaxSize);\n+      baseMaxSize = Long.parseLong(confMaxSize);\n+    }\n+\n+    String confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong(confMaxChunkSize);\n     }\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzNTg2Mw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599535863", "body": "Same here with spaces in keys, prefer dots.", "bodyText": "Same here with spaces in keys, prefer dots.", "bodyHTML": "<p dir=\"auto\">Same here with spaces in keys, prefer dots.</p>", "author": "ftence", "createdAt": "2021-03-23T12:48:19Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -77,11 +87,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n   public static final String CONTENT = \"content\";\n   public static final String CHUNK_NUMBER = \"chunk number\";\n \n-  private final Arguments output;\n-  protected Arguments getOutput() {\n-    return output;\n-  }\n-\n   //\n   // Control\n   //\n", "next_change": {"commit": "16123a0e979db93d06e632bd81c20876f3583b87", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..184046b7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -71,21 +71,21 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   public static final String URL = \"url\";\n   public static final String HEADERS = \"headers\";\n   public static final String BODY = \"body\";\n-  public static final String AUTH_INFO = \"auth info\";\n-  public static final String AUTH_MACRO = \"auth macro\";\n-  public static final String CHUNK_SIZE = \"chunk size\";\n-  public static final String CHUNK_MACRO = \"chunk macro\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n \n   //\n   // Output\n   //\n \n   public static final String RESPONSE = \"response\";\n-  public static final String STATUS_CODE = \"status code\";\n-  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n   public static final String RESPONSE_HEADERS = \"headers\";\n   public static final String CONTENT = \"content\";\n-  public static final String CHUNK_NUMBER = \"chunk number\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n \n   //\n   // Control\n", "next_change": {"commit": "5d6751d06c32bc52be446ef748408004e8654a04", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 184046b7..1eae4859 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -91,7 +92,17 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   // Control\n   //\n \n-  private final WebAccessController webAccessController;\n+  private static final WebAccessController webAccessController;\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+  }\n \n   //\n   // Authorization\n", "next_change": {"commit": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1eae4859..b4cb3858 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -93,33 +95,34 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   //\n \n   private static final WebAccessController webAccessController;\n-  static {\n-    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n-\n-    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n-    if (null == patternConf) {\n-      webAccessController = StandaloneWebCallService.getWebAccessController();\n-    } else {\n-      webAccessController = new WebAccessController(patternConf);\n-    }\n-  }\n \n   //\n   // Authorization\n   //\n \n-  private final boolean auth;\n-  private final String capName;\n+  private static final boolean auth;\n+  private static final String capName;\n \n   //\n   // Limits\n   //\n \n-  private final long baseMaxRequests;\n-  private final long baseMaxSize;\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n \n-  public HTTP(String name) {\n-    super(name);\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n \n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b4cb3858..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -131,18 +134,25 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    String confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n     if (null == confMaxRequests) {\n       baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+      baseMaxRequests = Long.parseLong(confMaxRequests);\n     }\n \n-    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    String confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n     if (null == confMaxSize) {\n       baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      baseMaxSize = Long.parseLong((String) confMaxSize);\n+      baseMaxSize = Long.parseLong(confMaxSize);\n+    }\n+\n+    String confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong(confMaxChunkSize);\n     }\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzNzk1Nw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599537957", "body": "Use camelCase.", "bodyText": "Use camelCase.", "bodyHTML": "<p dir=\"auto\">Use camelCase.</p>", "author": "ftence", "createdAt": "2021-03-23T12:50:52Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16123a0e979db93d06e632bd81c20876f3583b87", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..184046b7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -99,8 +104,8 @@ public class HTTP extends FormattedWarpScriptFunction {\n   // Limits\n   //\n \n-  private final long base_maxrequests;\n-  private final long base_maxsize;\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n \n   public HTTP(String name) {\n     super(name);\n", "next_change": {"commit": "5d6751d06c32bc52be446ef748408004e8654a04", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 184046b7..1eae4859 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -110,15 +121,6 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   public HTTP(String name) {\n     super(name);\n \n-    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n-\n-    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n-    if (null == patternConf) {\n-      webAccessController = StandaloneWebCallService.getWebAccessController();\n-    } else {\n-      webAccessController = new WebAccessController(patternConf);\n-    }\n-\n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n \n", "next_change": {"commit": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1eae4859..b4cb3858 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -93,33 +95,34 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   //\n \n   private static final WebAccessController webAccessController;\n-  static {\n-    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n-\n-    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n-    if (null == patternConf) {\n-      webAccessController = StandaloneWebCallService.getWebAccessController();\n-    } else {\n-      webAccessController = new WebAccessController(patternConf);\n-    }\n-  }\n \n   //\n   // Authorization\n   //\n \n-  private final boolean auth;\n-  private final String capName;\n+  private static final boolean auth;\n+  private static final String capName;\n \n   //\n   // Limits\n   //\n \n-  private final long baseMaxRequests;\n-  private final long baseMaxSize;\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n \n-  public HTTP(String name) {\n-    super(name);\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n \n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b4cb3858..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -131,18 +134,25 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    String confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n     if (null == confMaxRequests) {\n       baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+      baseMaxRequests = Long.parseLong(confMaxRequests);\n     }\n \n-    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    String confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n     if (null == confMaxSize) {\n       baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      baseMaxSize = Long.parseLong((String) confMaxSize);\n+      baseMaxSize = Long.parseLong(confMaxSize);\n+    }\n+\n+    String confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong(confMaxChunkSize);\n     }\n   }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU0OTY4Mw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599549683", "body": "Use `parseLong` to avoid unnecessary boxing.", "bodyText": "Use parseLong to avoid unnecessary boxing.", "bodyHTML": "<p dir=\"auto\">Use <code>parseLong</code> to avoid unnecessary boxing.</p>", "author": "ftence", "createdAt": "2021-03-23T13:06:58Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c235401d813184d73fc400c1085988a8b18d508", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..3e3a21da 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -114,33 +119,11 @@ public class HTTP extends FormattedWarpScriptFunction {\n       webAccessController = new WebAccessController(patternConf);\n     }\n \n-    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n-\n-    args = new ArgumentsBuilder()\n-      .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n-      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n-      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n-      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n-      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n-      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n-      .build();\n-\n-    output = new ArgumentsBuilder()\n-      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n-      .build();\n-\n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n \n     // retrieve capName\n-    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n-    if (null != capNameSuffix) {\n-      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n-    } else {\n-      capName = null;\n-    }\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n     Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n", "next_change": {"commit": "16123a0e979db93d06e632bd81c20876f3583b87", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3e3a21da..184046b7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -126,18 +126,18 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n-    if (null == conf_maxrequests) {\n-      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n     }\n \n-    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n-    if (null == conf_maxsize) {\n-      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      base_maxsize = Long.valueOf((String) conf_maxsize);\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n     }\n   }\n \n", "next_change": {"commit": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 184046b7..b4cb3858 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -141,6 +146,10 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     }\n   }\n \n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU0OTc2Nw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599549767", "body": "Ditto.", "bodyText": "Ditto.", "bodyHTML": "<p dir=\"auto\">Ditto.</p>", "author": "ftence", "createdAt": "2021-03-23T13:07:06Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -159,7 +147,14 @@ public class HTTP extends FormattedWarpScriptFunction {\n   }\n \n   @Override\n-  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n \n     //\n     // Check authorization\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU2MzI2Nw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599563267", "body": "Can throw NPE because `conn.getErrorStream();` can return `null`.", "bodyText": "Can throw NPE because conn.getErrorStream(); can return null.", "bodyHTML": "<p dir=\"auto\">Can throw NPE because <code>conn.getErrorStream();</code> can return <code>null</code>.</p>", "author": "ftence", "createdAt": "2021-03-23T13:24:25Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n+    Object body = formattedArgs.get(BODY);\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,54 +362,66 @@ public class HTTP extends FormattedWarpScriptFunction {\n       }\n \n       if (chunkSize <= 0) {\n-        byte[] buf = new byte[8192];\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-        while (true) {\n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-          if (downloadSize.get() + baos.size() + len > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n           }\n \n-          baos.write(buf, 0, len);\n-        }\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n \n-        downloadSize.addAndGet(baos.size());\n-        res.put(CONTENT, baos.toByteArray());\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n \n       } else {\n-        byte[] buf = new byte[chunkSize.intValue()];\n-        Map<String, Object> chunkRes = new HashMap<>(res);\n \n-        int chunkNumber = 0;\n-        while (true) {\n-          chunkNumber++;\n+        if (null != in) {\n+          byte[] buf = new byte[chunkSize.intValue()];\n+          Map<String, Object> chunkRes = new HashMap<>(res);\n \n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n \n-          if (downloadSize.addAndGet(len) > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-          }\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n \n-          if (len == chunkSize) {\n-            chunkRes.put(CONTENT, buf);\n-          } else {\n-            byte[] buf2 = new byte[len];\n-            for (int i = 0; i < buf2.length; i++) {\n-              buf2[i] = buf[i];\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              chunkRes.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              chunkRes.put(CONTENT, buf2);\n+            }\n+            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n             }\n-            chunkRes.put(CONTENT, buf2);\n           }\n-          chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n-          stack.push(chunkRes);\n-          stack.exec(chunkMacro);\n+\n+        } else {\n+          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b32344c8..aba557e3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -421,7 +422,13 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           }\n \n         } else {\n-          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n+          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n+          chunkRes.put(CHUNK_NUMBER, 1L);\n+          chunkRes.put(CONTENT, new byte[0]);\n+          stack.push(chunkRes);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -408,30 +472,40 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (len == chunkSize) {\n-              chunkRes.put(CONTENT, buf);\n+              res.put(CONTENT, buf);\n             } else {\n               byte[] buf2 = new byte[len];\n               System.arraycopy(buf, 0, buf2, 0, buf2.length);\n-              chunkRes.put(CONTENT, buf2);\n+              res.put(CONTENT, buf2);\n             }\n-            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n+\n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n             stack.push(chunkRes);\n             if (null != chunkMacro) {\n               stack.exec(chunkMacro);\n             }\n           }\n-\n-        } else {\n-          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n-          chunkRes.put(CHUNK_NUMBER, 1L);\n-          chunkRes.put(CONTENT, new byte[0]);\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n-          }\n         }\n \n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n         res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -506,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3MTA0OQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599571049", "body": "Already checked by `webAccessController.checkURL`.", "bodyText": "Already checked by webAccessController.checkURL.", "bodyHTML": "<p dir=\"auto\">Already checked by <code>webAccessController.checkURL</code>.</p>", "author": "ftence", "createdAt": "2021-03-23T13:33:26Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n+    Object body = formattedArgs.get(BODY);\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -178,50 +168,60 @@ public class HTTP extends FormattedWarpScriptFunction {\n     //\n \n     long maxrequests;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n-      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n     } else {\n-      maxrequests = base_maxrequests;\n+      maxrequests = baseMaxRequests;\n     }\n \n     long maxsize;\n-    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n-      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n     } else {\n-      maxsize = base_maxsize;\n+      maxsize = baseMaxSize;\n     }\n \n     //\n     // Retrieve arguments\n     //\n \n-    String method = (String) formattedArgs.get(METHOD);\n-    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n-    Object body = formattedArgs.get(BODY);\n-    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n-    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n     // Check URL\n     //\n \n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n     URL url = null;\n     try {\n-      url = new URL((String) formattedArgs.get(URL));\n+      url = new URL((String) urlParam);\n     } catch (MalformedURLException mue) {\n       throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n     }\n \n-    if (!webAccessController.checkURL(url)) {\n-      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n-    }\n-\n     if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n       throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n     }\n \n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n     //\n     // Check that we do not exceed the limits\n     //\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU5NTgxMA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599595810", "body": "This will leak headers between calls, use `null` or do not use `FormattedWarpScriptFunction`.", "bodyText": "This will leak headers between calls, use null or do not use FormattedWarpScriptFunction.", "bodyHTML": "<p dir=\"auto\">This will leak headers between calls, use <code>null</code> or do not use <code>FormattedWarpScriptFunction</code>.</p>", "author": "ftence", "createdAt": "2021-03-23T14:02:09Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -114,23 +119,6 @@ public class HTTP extends FormattedWarpScriptFunction {\n       webAccessController = new WebAccessController(patternConf);\n     }\n \n-    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n-\n-    args = new ArgumentsBuilder()\n-      .addArgument(String.class, METHOD, \"The http method.\")\n-      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n-      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n-      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n-      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n-      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n-      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n-      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n-      .build();\n-\n-    output = new ArgumentsBuilder()\n-      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n-      .build();\n-\n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n \n", "next_change": {"commit": "2c235401d813184d73fc400c1085988a8b18d508", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..3e3a21da 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -123,12 +123,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n \n     // retrieve capName\n-    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n-    if (null != capNameSuffix) {\n-      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n-    } else {\n-      capName = null;\n-    }\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n     Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n", "next_change": {"commit": "16123a0e979db93d06e632bd81c20876f3583b87", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3e3a21da..184046b7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -126,18 +126,18 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n-    if (null == conf_maxrequests) {\n-      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n     }\n \n-    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n-    if (null == conf_maxsize) {\n-      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      base_maxsize = Long.valueOf((String) conf_maxsize);\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n     }\n   }\n \n", "next_change": {"commit": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 184046b7..b4cb3858 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -141,6 +146,10 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     }\n   }\n \n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTYxMjg5NA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599612894", "body": "I'm not convinced by the usefulness of this.\r\nFor the simple auth, one can do\r\n```\r\n  'headers' {\r\n    'Authorization' 'Basic ' 'user:password' ->B64 +\r\n  }\r\n```\r\nand for the macro case, the macro can directly update the headers.", "bodyText": "I'm not convinced by the usefulness of this.\nFor the simple auth, one can do\n  'headers' {\n    'Authorization' 'Basic ' 'user:password' ->B64 +\n  }\n\nand for the macro case, the macro can directly update the headers.", "bodyHTML": "<p dir=\"auto\">I'm not convinced by the usefulness of this.<br>\nFor the simple auth, one can do</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  'headers' {\n    'Authorization' 'Basic ' 'user:password' -&gt;B64 +\n  }\"><pre><code>  'headers' {\n    'Authorization' 'Basic ' 'user:password' -&gt;B64 +\n  }\n</code></pre></div>\n<p dir=\"auto\">and for the macro case, the macro can directly update the headers.</p>", "author": "ftence", "createdAt": "2021-03-23T14:21:04Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n+    Object body = formattedArgs.get(BODY);\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTcxMDk0NA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599710944", "bodyText": "IMO basic authentication is so common that saving a few lines and hiding the encoding is worth it", "author": "randomboolean", "createdAt": "2021-03-23T16:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTYxMjg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -254,38 +263,44 @@ public class HTTP extends FormattedWarpScriptFunction {\n       conn = (HttpURLConnection) url.openConnection();\n \n       //\n-      // Encode userinfo and set headers\n+      // Set headers\n       //\n \n-      if (null != authInfo) {\n+      if (null == headersMacro) {\n \n-        Map additionalHeaders;\n-        if (null != authMacro) {\n-          stack.push(authInfo);\n-          stack.exec(authMacro);\n-          additionalHeaders = (Map) stack.pop();\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n \n-        } else {\n-          // doing basic auth\n-          if (authInfo.size() != 2) {\n-            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n-          }\n+        if (null != username && null != password) {\n \n-          if (!(authInfo.get(0) instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n           }\n \n-          if (!(authInfo.get(1) instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n           }\n \n-          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n           String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n-          additionalHeaders =  new HashMap<Object, Object>();\n-          additionalHeaders.put(\"Authorization\", basicAuth);\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n         }\n \n-        headers.putAll(additionalHeaders);\n+        headers = (Map) o;\n       }\n \n       for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -266,41 +304,26 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set headers\n       //\n \n-      if (null == headersMacro) {\n+      Object username = params.get(USERNAME);\n+      Object password = params.get(PASSWORD);\n \n-        Object username = params.get(USERNAME);\n-        Object password = params.get(PASSWORD);\n+      if (null != username && null != password) {\n \n-        if (null != username && null != password) {\n-\n-          //\n-          // Compute basic auth\n-          //\n-\n-          if (!(username instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n-          }\n-\n-          if (!(password instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n-          }\n+        //\n+        // Compute basic auth\n+        //\n \n-          String userInfo = ((String) username) + \":\" + ((String) password);\n-          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n-          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        if (!(username instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n         }\n \n-      } else {\n-\n-        stack.push(params);\n-        stack.exec(headersMacro);\n-        o = stack.pop();\n-\n-        if (!(o instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        if (!(password instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n         }\n \n-        headers = (Map) o;\n+        String userInfo = ((String) username) + \":\" + ((String) password);\n+        String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+        conn.setRequestProperty(\"Authorization\", basicAuth);\n       }\n \n       for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTYzOTQwNA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599639404", "body": "Use `System.arraycopy(buf, 0, buf2, 0, buf2.length);`", "bodyText": "Use System.arraycopy(buf, 0, buf2, 0, buf2.length);", "bodyHTML": "<p dir=\"auto\">Use <code>System.arraycopy(buf, 0, buf2, 0, buf2.length);</code></p>", "author": "ftence", "createdAt": "2021-03-23T14:47:57Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n+    Object body = formattedArgs.get(BODY);\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.get() + baos.size() + len > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          baos.write(buf, 0, len);\n+        }\n+\n+        downloadSize.addAndGet(baos.size());\n+        res.put(CONTENT, baos.toByteArray());\n+\n+      } else {\n+        byte[] buf = new byte[chunkSize.intValue()];\n+        Map<String, Object> chunkRes = new HashMap<>(res);\n+\n+        int chunkNumber = 0;\n+        while (true) {\n+          chunkNumber++;\n+\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.addAndGet(len) > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          if (len == chunkSize) {\n+            chunkRes.put(CONTENT, buf);\n+          } else {\n+            byte[] buf2 = new byte[len];\n+            for (int i = 0; i < buf2.length; i++) {\n+              buf2[i] = buf[i];\n+            }", "originalCommit": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 91eab109..43c58be4 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -409,7 +414,9 @@ public class HTTP extends FormattedWarpScriptFunction {\n           }\n           chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n           stack.push(chunkRes);\n-          stack.exec(chunkMacro);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -367,56 +362,66 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       }\n \n       if (chunkSize <= 0) {\n-        byte[] buf = new byte[8192];\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-        while (true) {\n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-          if (downloadSize.get() + baos.size() + len > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n           }\n \n-          baos.write(buf, 0, len);\n-        }\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n \n-        downloadSize.addAndGet(baos.size());\n-        res.put(CONTENT, baos.toByteArray());\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n \n       } else {\n-        byte[] buf = new byte[chunkSize.intValue()];\n-        Map<String, Object> chunkRes = new HashMap<>(res);\n \n-        int chunkNumber = 0;\n-        while (true) {\n-          chunkNumber++;\n+        if (null != in) {\n+          byte[] buf = new byte[chunkSize.intValue()];\n+          Map<String, Object> chunkRes = new HashMap<>(res);\n \n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n \n-          if (downloadSize.addAndGet(len) > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-          }\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n \n-          if (len == chunkSize) {\n-            chunkRes.put(CONTENT, buf);\n-          } else {\n-            byte[] buf2 = new byte[len];\n-            for (int i = 0; i < buf2.length; i++) {\n-              buf2[i] = buf[i];\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              chunkRes.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              chunkRes.put(CONTENT, buf2);\n+            }\n+            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n             }\n-            chunkRes.put(CONTENT, buf2);\n-          }\n-          chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n           }\n+\n+        } else {\n+          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b32344c8..aba557e3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -421,7 +422,13 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           }\n \n         } else {\n-          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n+          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n+          chunkRes.put(CHUNK_NUMBER, 1L);\n+          chunkRes.put(CONTENT, new byte[0]);\n+          stack.push(chunkRes);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -408,30 +472,40 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (len == chunkSize) {\n-              chunkRes.put(CONTENT, buf);\n+              res.put(CONTENT, buf);\n             } else {\n               byte[] buf2 = new byte[len];\n               System.arraycopy(buf, 0, buf2, 0, buf2.length);\n-              chunkRes.put(CONTENT, buf2);\n+              res.put(CONTENT, buf2);\n             }\n-            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n+\n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n             stack.push(chunkRes);\n             if (null != chunkMacro) {\n               stack.exec(chunkMacro);\n             }\n           }\n-\n-        } else {\n-          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n-          chunkRes.put(CHUNK_NUMBER, 1L);\n-          chunkRes.put(CONTENT, new byte[0]);\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n-          }\n         }\n \n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n         res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -506,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTY2Nzk2Ng==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599667966", "body": "You should always make a copy.\r\nThis isn't great performance-wise but if someone leave the byte[] on the stack, it will be modified and will confuse the user.\r\nIt may be OK to reuse the same Map but I think this should be discussed.", "bodyText": "You should always make a copy.\nThis isn't great performance-wise but if someone leave the byte[] on the stack, it will be modified and will confuse the user.\nIt may be OK to reuse the same Map but I think this should be discussed.", "bodyHTML": "<p dir=\"auto\">You should always make a copy.<br>\nThis isn't great performance-wise but if someone leave the byte[] on the stack, it will be modified and will confuse the user.<br>\nIt may be OK to reuse the same Map but I think this should be discussed.</p>", "author": "ftence", "createdAt": "2021-03-23T15:17:41Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,437 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.get() + baos.size() + len > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          baos.write(buf, 0, len);\n+        }\n+\n+        downloadSize.addAndGet(baos.size());\n+        res.put(CONTENT, baos.toByteArray());\n+\n+      } else {\n+        byte[] buf = new byte[chunkSize.intValue()];\n+        Map<String, Object> chunkRes = new HashMap<>(res);\n+\n+        int chunkNumber = 0;\n+        while (true) {\n+          chunkNumber++;\n+\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.addAndGet(len) > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          if (len == chunkSize) {\n+            chunkRes.put(CONTENT, buf);", "originalCommit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -367,56 +362,66 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       }\n \n       if (chunkSize <= 0) {\n-        byte[] buf = new byte[8192];\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-        while (true) {\n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-          if (downloadSize.get() + baos.size() + len > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n           }\n \n-          baos.write(buf, 0, len);\n-        }\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n \n-        downloadSize.addAndGet(baos.size());\n-        res.put(CONTENT, baos.toByteArray());\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n \n       } else {\n-        byte[] buf = new byte[chunkSize.intValue()];\n-        Map<String, Object> chunkRes = new HashMap<>(res);\n \n-        int chunkNumber = 0;\n-        while (true) {\n-          chunkNumber++;\n+        if (null != in) {\n+          byte[] buf = new byte[chunkSize.intValue()];\n+          Map<String, Object> chunkRes = new HashMap<>(res);\n \n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n \n-          if (downloadSize.addAndGet(len) > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-          }\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n \n-          if (len == chunkSize) {\n-            chunkRes.put(CONTENT, buf);\n-          } else {\n-            byte[] buf2 = new byte[len];\n-            for (int i = 0; i < buf2.length; i++) {\n-              buf2[i] = buf[i];\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              chunkRes.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              chunkRes.put(CONTENT, buf2);\n+            }\n+            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n             }\n-            chunkRes.put(CONTENT, buf2);\n-          }\n-          chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n           }\n+\n+        } else {\n+          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b32344c8..aba557e3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -421,7 +422,13 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           }\n \n         } else {\n-          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n+          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n+          chunkRes.put(CHUNK_NUMBER, 1L);\n+          chunkRes.put(CONTENT, new byte[0]);\n+          stack.push(chunkRes);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -408,30 +472,40 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (len == chunkSize) {\n-              chunkRes.put(CONTENT, buf);\n+              res.put(CONTENT, buf);\n             } else {\n               byte[] buf2 = new byte[len];\n               System.arraycopy(buf, 0, buf2, 0, buf2.length);\n-              chunkRes.put(CONTENT, buf2);\n+              res.put(CONTENT, buf2);\n             }\n-            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n+\n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n             stack.push(chunkRes);\n             if (null != chunkMacro) {\n               stack.exec(chunkMacro);\n             }\n           }\n-\n-        } else {\n-          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n-          chunkRes.put(CHUNK_NUMBER, 1L);\n-          chunkRes.put(CONTENT, new byte[0]);\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n-          }\n         }\n \n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n         res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -506,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTY3MjU5OA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599672598", "body": "If you make the macro optional, the content Map must be a copy, like discussed above.", "bodyText": "If you make the macro optional, the content Map must be a copy, like discussed above.", "bodyHTML": "<p dir=\"auto\">If you make the macro optional, the content Map must be a copy, like discussed above.</p>", "author": "ftence", "createdAt": "2021-03-23T15:22:41Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,437 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.get() + baos.size() + len > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          baos.write(buf, 0, len);\n+        }\n+\n+        downloadSize.addAndGet(baos.size());\n+        res.put(CONTENT, baos.toByteArray());\n+\n+      } else {\n+        byte[] buf = new byte[chunkSize.intValue()];\n+        Map<String, Object> chunkRes = new HashMap<>(res);\n+\n+        int chunkNumber = 0;\n+        while (true) {\n+          chunkNumber++;\n+\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.addAndGet(len) > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          if (len == chunkSize) {\n+            chunkRes.put(CONTENT, buf);\n+          } else {\n+            byte[] buf2 = new byte[len];\n+            for (int i = 0; i < buf2.length; i++) {\n+              buf2[i] = buf[i];\n+            }\n+            chunkRes.put(CONTENT, buf2);\n+          }\n+          chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+          stack.push(chunkRes);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }", "originalCommit": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 43c58be4..b32344c8 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -367,56 +362,66 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       }\n \n       if (chunkSize <= 0) {\n-        byte[] buf = new byte[8192];\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-        while (true) {\n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \n-          if (downloadSize.get() + baos.size() + len > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n           }\n \n-          baos.write(buf, 0, len);\n-        }\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n \n-        downloadSize.addAndGet(baos.size());\n-        res.put(CONTENT, baos.toByteArray());\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n \n       } else {\n-        byte[] buf = new byte[chunkSize.intValue()];\n-        Map<String, Object> chunkRes = new HashMap<>(res);\n \n-        int chunkNumber = 0;\n-        while (true) {\n-          chunkNumber++;\n+        if (null != in) {\n+          byte[] buf = new byte[chunkSize.intValue()];\n+          Map<String, Object> chunkRes = new HashMap<>(res);\n \n-          int len = in.read(buf);\n-          if (len < 0) {\n-            break;\n-          }\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n \n-          if (downloadSize.addAndGet(len) > maxsize) {\n-            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n-          }\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n \n-          if (len == chunkSize) {\n-            chunkRes.put(CONTENT, buf);\n-          } else {\n-            byte[] buf2 = new byte[len];\n-            for (int i = 0; i < buf2.length; i++) {\n-              buf2[i] = buf[i];\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              chunkRes.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              chunkRes.put(CONTENT, buf2);\n+            }\n+            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n             }\n-            chunkRes.put(CONTENT, buf2);\n-          }\n-          chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n           }\n+\n+        } else {\n+          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b32344c8..aba557e3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -421,7 +422,13 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           }\n \n         } else {\n-          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n+          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n+          chunkRes.put(CHUNK_NUMBER, 1L);\n+          chunkRes.put(CONTENT, new byte[0]);\n+          stack.push(chunkRes);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -408,30 +472,40 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (len == chunkSize) {\n-              chunkRes.put(CONTENT, buf);\n+              res.put(CONTENT, buf);\n             } else {\n               byte[] buf2 = new byte[len];\n               System.arraycopy(buf, 0, buf2, 0, buf2.length);\n-              chunkRes.put(CONTENT, buf2);\n+              res.put(CONTENT, buf2);\n             }\n-            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n+\n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n             stack.push(chunkRes);\n             if (null != chunkMacro) {\n               stack.exec(chunkMacro);\n             }\n           }\n-\n-        } else {\n-          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n-          chunkRes.put(CHUNK_NUMBER, 1L);\n-          chunkRes.put(CONTENT, new byte[0]);\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n-          }\n         }\n \n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n         res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -506,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}]}}]}}]}}, {"oid": "2c235401d813184d73fc400c1085988a8b18d508", "url": "https://github.com/senx/warp10-platform/commit/2c235401d813184d73fc400c1085988a8b18d508", "message": "resolve cap related comments", "committedDate": "2021-03-23T15:40:29Z", "type": "commit"}, {"oid": "16123a0e979db93d06e632bd81c20876f3583b87", "url": "https://github.com/senx/warp10-platform/commit/16123a0e979db93d06e632bd81c20876f3583b87", "message": "resolve string names", "committedDate": "2021-03-23T15:47:21Z", "type": "commit"}, {"oid": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "url": "https://github.com/senx/warp10-platform/commit/36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "message": "resolve some comments", "committedDate": "2021-03-23T16:08:28Z", "type": "commit"}, {"oid": "0f1f981474321577d6dcdb451c4b0da4c12e5b8b", "url": "https://github.com/senx/warp10-platform/commit/0f1f981474321577d6dcdb451c4b0da4c12e5b8b", "message": "dont reuse same buffer between chunks", "committedDate": "2021-03-23T17:22:44Z", "type": "commit"}, {"oid": "8d8ba19cf9b66d06017c236487a5b233b97c6956", "url": "https://github.com/senx/warp10-platform/commit/8d8ba19cf9b66d06017c236487a5b233b97c6956", "message": "dont reuse same map between chunk", "committedDate": "2021-03-23T17:43:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5OTUzNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600599535", "body": "You should return an empty content, like for the non-chunked case, and let the user handle the error. Throwing an exception will make it very difficult to debug why the stream is empty.", "bodyText": "You should return an empty content, like for the non-chunked case, and let the user handle the error. Throwing an exception will make it very difficult to debug why the stream is empty.", "bodyHTML": "<p dir=\"auto\">You should return an empty content, like for the non-chunked case, and let the user handle the error. Throwing an exception will make it very difficult to debug why the stream is empty.</p>", "author": "ftence", "createdAt": "2021-03-24T15:34:54Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n+\n+            Map<String, Object> chunkRes = new HashMap<>(res);\n+            byte[] buf = new byte[chunkSize.intValue()];\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              chunkRes.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              chunkRes.put(CONTENT, buf2);\n+            }\n+            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n+            }\n+          }\n+\n+        } else {\n+          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");", "originalCommit": "8d8ba19cf9b66d06017c236487a5b233b97c6956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 55c6a7e3..aba557e3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -421,7 +422,13 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           }\n \n         } else {\n-          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");\n+          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n+          chunkRes.put(CHUNK_NUMBER, 1L);\n+          chunkRes.put(CONTENT, new byte[0]);\n+          stack.push(chunkRes);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }\n         }\n \n         res.put(CONTENT, new byte[0]);\n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -408,30 +472,40 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (len == chunkSize) {\n-              chunkRes.put(CONTENT, buf);\n+              res.put(CONTENT, buf);\n             } else {\n               byte[] buf2 = new byte[len];\n               System.arraycopy(buf, 0, buf2, 0, buf2.length);\n-              chunkRes.put(CONTENT, buf2);\n+              res.put(CONTENT, buf2);\n             }\n-            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n+\n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n             stack.push(chunkRes);\n             if (null != chunkMacro) {\n               stack.exec(chunkMacro);\n             }\n           }\n-\n-        } else {\n-          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n-          chunkRes.put(CHUNK_NUMBER, 1L);\n-          chunkRes.put(CONTENT, new byte[0]);\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n-          }\n         }\n \n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n         res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -506,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDYxODg3OQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600618879", "body": "Use a `LinkedHashMap` instead of `HashMap`, because that's usually what is on the stack when we put a Map.", "bodyText": "Use a LinkedHashMap instead of HashMap, because that's usually what is on the stack when we put a Map.", "bodyHTML": "<p dir=\"auto\">Use a <code>LinkedHashMap</code> instead of <code>HashMap</code>, because that's usually what is on the stack when we put a Map.</p>", "author": "ftence", "createdAt": "2021-03-24T15:53:41Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n+\n+            Map<String, Object> chunkRes = new HashMap<>(res);", "originalCommit": "8d8ba19cf9b66d06017c236487a5b233b97c6956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbab796621d6951bee7159d9f652238992bb50f3", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 55c6a7e3..1ec6927a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -395,7 +396,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           while (true) {\n             chunkNumber++;\n \n-            Map<String, Object> chunkRes = new HashMap<>(res);\n+            Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n             byte[] buf = new byte[chunkSize.intValue()];\n             int len = in.read(buf);\n             if (len < 0) {\n", "next_change": {"commit": "2b045f07639c578549d61a84253c11b0bfa88fb0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1ec6927a..2ad14231 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -398,8 +447,17 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n             Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n             byte[] buf = new byte[chunkSize.intValue()];\n-            int len = in.read(buf);\n-            if (len < 0) {\n+            int len = 0;\n+            boolean eof = false;\n+            while (len < chunkSize.intValue()) {\n+              int read = in.read(buf, len,chunkSize.intValue() - len);\n+              if (read <= 0) {\n+                eof = true;\n+                break;\n+              }\n+              len += read;\n+            }\n+            if (len <= 0) {\n               break;\n             }\n \n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2ad14231..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -466,35 +472,40 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (len == chunkSize) {\n-              chunkRes.put(CONTENT, buf);\n+              res.put(CONTENT, buf);\n             } else {\n               byte[] buf2 = new byte[len];\n               System.arraycopy(buf, 0, buf2, 0, buf2.length);\n-              chunkRes.put(CONTENT, buf2);\n+              res.put(CONTENT, buf2);\n             }\n-            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n \n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n             stack.push(chunkRes);\n             if (null != chunkMacro) {\n               stack.exec(chunkMacro);\n             }\n-            \n-            if (eof) {\n-              break;\n-            }\n-          }\n-\n-        } else {\n-          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n-          chunkRes.put(CHUNK_NUMBER, 1L);\n-          chunkRes.put(CONTENT, new byte[0]);\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n           }\n         }\n \n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n         res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -506,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDYxOTM1Ng==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600619356", "body": "Use `LinkedHashMap`.", "bodyText": "Use LinkedHashMap.", "bodyHTML": "<p dir=\"auto\">Use <code>LinkedHashMap</code>.</p>", "author": "ftence", "createdAt": "2021-03-24T15:54:15Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);", "originalCommit": "8d8ba19cf9b66d06017c236487a5b233b97c6956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbab796621d6951bee7159d9f652238992bb50f3", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 55c6a7e3..1ec6927a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -343,7 +344,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Make the headers map modifiable\n       //\n \n-      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n       hdrs.remove(null);\n \n       res.put(RESPONSE_HEADERS, hdrs);\n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1ec6927a..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -340,15 +400,6 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         res.put(STATUS_MESSAGE, \"\");\n       }\n \n-      //\n-      // Make the headers map modifiable\n-      //\n-\n-      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n-      hdrs.remove(null);\n-\n-      res.put(RESPONSE_HEADERS, hdrs);\n-\n       //\n       // Read response\n       //\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDYzMjIyMw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600632223", "body": "You can simply use `get`, which will default to `null`, thus skipping both `instanceof` conditionals.", "bodyText": "You can simply use get, which will default to null, thus skipping both instanceof conditionals.", "bodyHTML": "<p dir=\"auto\">You can simply use <code>get</code>, which will default to <code>null</code>, thus skipping both <code>instanceof</code> conditionals.</p>", "author": "ftence", "createdAt": "2021-03-24T16:06:03Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");", "originalCommit": "8d8ba19cf9b66d06017c236487a5b233b97c6956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbab796621d6951bee7159d9f652238992bb50f3", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 55c6a7e3..1ec6927a 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -191,7 +192,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     }\n \n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n-    Object body = params.getOrDefault(BODY,\"\");\n+    Object body = params.get(BODY);\n \n     List authInfo = (List) params.get(AUTH_INFO);\n     WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n", "next_change": {"commit": "d2d871c514ccbef22f9552b7fc121e064fd6dca4", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1ec6927a..622b48ef 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -188,7 +189,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n     String method = (String) params.get(METHOD);\n     if (null == method) {\n-      throw new WarpScriptException(getName() + \" expects an http method.\");\n+      method = \"GET\";\n     }\n \n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 622b48ef..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -195,8 +198,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n-    List authInfo = (List) params.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    o = params.get(HEADERS_MACRO);\n+    if (!(o instanceof WarpScriptStack.Macro)) {\n+      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    }\n+    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n+\n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..198565de 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -205,6 +217,16 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    long maxchunksize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxchunksize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxchunksize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n+    }\n+\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n", "next_change": {"commit": "1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 198565de..e9a73618 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -210,20 +210,23 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n+    WarpScriptStack.Macro headersMacro = null;\n     o = params.get(HEADERS_MACRO);\n-    if (!(o instanceof WarpScriptStack.Macro)) {\n-      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n     }\n-    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n-    long maxchunksize;\n+    long maxChunkSize;\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n-      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n     } else {\n-      maxchunksize = baseMaxChunkSize;\n+      maxChunkSize = baseMaxChunkSize;\n     }\n-    if (chunkSize > maxchunksize) {\n+    if (chunkSize > maxChunkSize) {\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n", "next_change": {"commit": "99706f330bc85ff7fc92c8203428653e96ce1d11", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex e9a73618..c8d44737 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -230,7 +230,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n \n     //\n     // Check URL\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8d44737..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -246,6 +276,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Object urlParam = params.get(URL);\n     if (null == urlParam) {\n       throw new WarpScriptException(getName() + \" expects a url.\");\n+\n+    } else if (!(urlParam instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects \" + URL + \" to be a STRING.\");\n     }\n \n     URL url = null;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDY3OTQ0NA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600679444", "body": "I think the macro.auth mechanism will not add any value to the HTTP method. For instance, it will not help in generating the digest auth authorization header, especially when doing multiple authenticated requests.", "bodyText": "I think the macro.auth mechanism will not add any value to the HTTP method. For instance, it will not help in generating the digest auth authorization header, especially when doing multiple authenticated requests.", "bodyHTML": "<p dir=\"auto\">I think the macro.auth mechanism will not add any value to the HTTP method. For instance, it will not help in generating the digest auth authorization header, especially when doing multiple authenticated requests.</p>", "author": "ftence", "createdAt": "2021-03-24T16:57:50Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();", "originalCommit": "8d8ba19cf9b66d06017c236487a5b233b97c6956", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjMxOTY4OA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602319688", "bodyText": "I don't see why it can not be used to generate digest auth. But I see it can be painful to write the auth macro for digest auth without another extension (one could wraps another java function, like for example DigestScheme.authenticate)..", "author": "randomboolean", "createdAt": "2021-03-26T14:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDY3OTQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 55c6a7e3..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -254,38 +263,44 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       conn = (HttpURLConnection) url.openConnection();\n \n       //\n-      // Encode userinfo and set headers\n+      // Set headers\n       //\n \n-      if (null != authInfo) {\n+      if (null == headersMacro) {\n \n-        Map additionalHeaders;\n-        if (null != authMacro) {\n-          stack.push(authInfo);\n-          stack.exec(authMacro);\n-          additionalHeaders = (Map) stack.pop();\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n \n-        } else {\n-          // doing basic auth\n-          if (authInfo.size() != 2) {\n-            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n-          }\n+        if (null != username && null != password) {\n \n-          if (!(authInfo.get(0) instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n           }\n \n-          if (!(authInfo.get(1) instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n           }\n \n-          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n           String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n-          additionalHeaders =  new HashMap<Object, Object>();\n-          additionalHeaders.put(\"Authorization\", basicAuth);\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n         }\n \n-        headers.putAll(additionalHeaders);\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n       }\n \n       for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -266,41 +304,26 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set headers\n       //\n \n-      if (null == headersMacro) {\n+      Object username = params.get(USERNAME);\n+      Object password = params.get(PASSWORD);\n \n-        Object username = params.get(USERNAME);\n-        Object password = params.get(PASSWORD);\n+      if (null != username && null != password) {\n \n-        if (null != username && null != password) {\n-\n-          //\n-          // Compute basic auth\n-          //\n-\n-          if (!(username instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n-          }\n-\n-          if (!(password instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n-          }\n+        //\n+        // Compute basic auth\n+        //\n \n-          String userInfo = ((String) username) + \":\" + ((String) password);\n-          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n-          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        if (!(username instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n         }\n \n-      } else {\n-\n-        stack.push(params);\n-        stack.exec(headersMacro);\n-        o = stack.pop();\n-\n-        if (!(o instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        if (!(password instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n         }\n \n-        headers = (Map) o;\n+        String userInfo = ((String) username) + \":\" + ((String) password);\n+        String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+        conn.setRequestProperty(\"Authorization\", basicAuth);\n       }\n \n       for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n", "next_change": null}]}}]}}, {"oid": "bbab796621d6951bee7159d9f652238992bb50f3", "url": "https://github.com/senx/warp10-platform/commit/bbab796621d6951bee7159d9f652238992bb50f3", "message": "resolve some comments", "committedDate": "2021-03-25T16:12:28Z", "type": "commit"}, {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179", "url": "https://github.com/senx/warp10-platform/commit/29a75c953830c4f95ec65f63afac4e0d0904e179", "message": "dont throw error if first chunk is empty", "committedDate": "2021-03-26T13:58:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NTU5NQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602495595", "body": "to a URL", "bodyText": "to a URL", "bodyHTML": "<p dir=\"auto\">to a URL</p>", "author": "hbs", "createdAt": "2021-03-26T18:05:42Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..c8e34da7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -42,21 +42,21 @@ import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * method The http method\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n+ * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8e34da7..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -49,14 +50,15 @@ import java.util.concurrent.atomic.AtomicLong;\n  * http.size\n  *\n  * Params:\n- * method The http method\n  * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n- * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NTg0NQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602495845", "body": "The param names are in lower case", "bodyText": "The param names are in lower case", "bodyHTML": "<p dir=\"auto\">The param names are in lower case</p>", "author": "hbs", "createdAt": "2021-03-26T18:06:11Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..c8e34da7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -42,21 +42,21 @@ import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * method The http method\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n+ * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8e34da7..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -49,14 +50,15 @@ import java.util.concurrent.atomic.AtomicLong;\n  * http.size\n  *\n  * Params:\n- * method The http method\n  * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n- * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NjAwNg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602496006", "body": "header map", "bodyText": "header map", "bodyHTML": "<p dir=\"auto\">header map</p>", "author": "hbs", "createdAt": "2021-03-26T18:06:28Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..c8e34da7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -42,21 +42,21 @@ import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * method The http method\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n+ * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8e34da7..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -49,14 +50,15 @@ import java.util.concurrent.atomic.AtomicLong;\n  * http.size\n  *\n  * Params:\n- * method The http method\n  * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n- * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NjE3Ng==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602496176", "body": "Specify the charset used if the body is a STRING", "bodyText": "Specify the charset used if the body is a STRING", "bodyHTML": "<p dir=\"auto\">Specify the charset used if the body is a STRING</p>", "author": "hbs", "createdAt": "2021-03-26T18:06:42Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..c8e34da7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -42,21 +42,21 @@ import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * method The http method\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n+ * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8e34da7..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -49,14 +50,15 @@ import java.util.concurrent.atomic.AtomicLong;\n  * http.size\n  *\n  * Params:\n- * method The http method\n  * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n- * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5Njc3MQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602496771", "body": "Since this ends up being a header, maybe it is better to provide a helper function or macro to pack username and password as a value suitable for a header", "bodyText": "Since this ends up being a header, maybe it is better to provide a helper function or macro to pack username and password as a value suitable for a header", "bodyHTML": "<p dir=\"auto\">Since this ends up being a header, maybe it is better to provide a helper function or macro to pack username and password as a value suitable for a header</p>", "author": "hbs", "createdAt": "2021-03-26T18:07:43Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..c8e34da7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -42,21 +42,21 @@ import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * method The http method\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n+ * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8e34da7..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -49,14 +50,15 @@ import java.util.concurrent.atomic.AtomicLong;\n  * http.size\n  *\n  * Params:\n- * method The http method\n  * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n- * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NzA4OA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602497088", "body": "see above", "bodyText": "see above", "bodyHTML": "<p dir=\"auto\">see above</p>", "author": "hbs", "createdAt": "2021-03-26T18:08:15Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..c8e34da7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -42,21 +42,21 @@ import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * method The http method\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n+ * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8e34da7..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -49,14 +50,15 @@ import java.util.concurrent.atomic.AtomicLong;\n  * http.size\n  *\n  * Params:\n- * method The http method\n  * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n- * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NzU0NQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602497545", "body": "The chunk size should have a configurable upper limit to avoid giant allocations", "bodyText": "The chunk size should have a configurable upper limit to avoid giant allocations", "bodyHTML": "<p dir=\"auto\">The chunk size should have a configurable upper limit to avoid giant allocations</p>", "author": "hbs", "createdAt": "2021-03-26T18:08:58Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..c8e34da7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -42,21 +42,21 @@ import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * method The http method\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n+ * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8e34da7..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -49,14 +50,15 @@ import java.util.concurrent.atomic.AtomicLong;\n  * http.size\n  *\n  * Params:\n- * method The http method\n  * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * auth.info Authentication arguments. For example for basic authentication, provide [username, password]\n- * auth.macro A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5ODgxNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602498815", "body": "Parameter extraction should be done in a static way so other instances of HTTP do not repeat it.", "bodyText": "Parameter extraction should be done in a static way so other instances of HTTP do not repeat it.", "bodyHTML": "<p dir=\"auto\">Parameter extraction should be done in a static way so other instances of HTTP do not repeat it.</p>", "author": "hbs", "createdAt": "2021-03-26T18:11:02Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d6751d06c32bc52be446ef748408004e8654a04", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..1eae4859 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -111,15 +121,6 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   public HTTP(String name) {\n     super(name);\n \n-    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n-\n-    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n-    if (null == patternConf) {\n-      webAccessController = StandaloneWebCallService.getWebAccessController();\n-    } else {\n-      webAccessController = new WebAccessController(patternConf);\n-    }\n-\n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n \n", "next_change": {"commit": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 1eae4859..b4cb3858 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -93,33 +95,34 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   //\n \n   private static final WebAccessController webAccessController;\n-  static {\n-    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n-\n-    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n-    if (null == patternConf) {\n-      webAccessController = StandaloneWebCallService.getWebAccessController();\n-    } else {\n-      webAccessController = new WebAccessController(patternConf);\n-    }\n-  }\n \n   //\n   // Authorization\n   //\n \n-  private final boolean auth;\n-  private final String capName;\n+  private static final boolean auth;\n+  private static final String capName;\n \n   //\n   // Limits\n   //\n \n-  private final long baseMaxRequests;\n-  private final long baseMaxSize;\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n \n-  public HTTP(String name) {\n-    super(name);\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n \n     // retrieve authentication required\n     auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex b4cb3858..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -131,18 +134,25 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    String confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n     if (null == confMaxRequests) {\n       baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+      baseMaxRequests = Long.parseLong(confMaxRequests);\n     }\n \n-    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    String confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n     if (null == confMaxSize) {\n       baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      baseMaxSize = Long.parseLong((String) confMaxSize);\n+      baseMaxSize = Long.parseLong(confMaxSize);\n+    }\n+\n+    String confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong(confMaxChunkSize);\n     }\n   }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5OTI0Mw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602499243", "body": "missing function name", "bodyText": "missing function name", "bodyHTML": "<p dir=\"auto\">missing function name</p>", "author": "hbs", "createdAt": "2021-03-26T18:11:51Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f01bef6962b2683769cfaa91149813e42390f5cc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..91690658 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -161,7 +177,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     }\n \n     if (null != capName && null == Capabilities.get(stack, capName)) {\n-      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n     }\n \n     //\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5OTU4OQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602499589", "body": "could default to GET", "bodyText": "could default to GET", "bodyHTML": "<p dir=\"auto\">could default to GET</p>", "author": "hbs", "createdAt": "2021-03-26T18:12:29Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2d871c514ccbef22f9552b7fc121e064fd6dca4", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..622b48ef 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -188,7 +189,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n     String method = (String) params.get(METHOD);\n     if (null == method) {\n-      throw new WarpScriptException(getName() + \" expects an http method.\");\n+      method = \"GET\";\n     }\n \n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 622b48ef..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -195,8 +198,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n-    List authInfo = (List) params.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    o = params.get(HEADERS_MACRO);\n+    if (!(o instanceof WarpScriptStack.Macro)) {\n+      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    }\n+    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n+\n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..198565de 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -205,6 +217,16 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    long maxchunksize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxchunksize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxchunksize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n+    }\n+\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n", "next_change": {"commit": "1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 198565de..e9a73618 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -210,20 +210,23 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n+    WarpScriptStack.Macro headersMacro = null;\n     o = params.get(HEADERS_MACRO);\n-    if (!(o instanceof WarpScriptStack.Macro)) {\n-      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n     }\n-    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n-    long maxchunksize;\n+    long maxChunkSize;\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n-      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n     } else {\n-      maxchunksize = baseMaxChunkSize;\n+      maxChunkSize = baseMaxChunkSize;\n     }\n-    if (chunkSize > maxchunksize) {\n+    if (chunkSize > maxChunkSize) {\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n", "next_change": {"commit": "99706f330bc85ff7fc92c8203428653e96ce1d11", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex e9a73618..c8d44737 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -230,7 +230,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n \n     //\n     // Check URL\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8d44737..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -246,6 +276,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Object urlParam = params.get(URL);\n     if (null == urlParam) {\n       throw new WarpScriptException(getName() + \" expects a url.\");\n+\n+    } else if (!(urlParam instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects \" + URL + \" to be a STRING.\");\n     }\n \n     URL url = null;\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5OTkxMQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602499911", "body": "You are not checking if the parameter is a Macro, this will throw an exception if that is not the case", "bodyText": "You are not checking if the parameter is a Macro, this will throw an exception if that is not the case", "bodyHTML": "<p dir=\"auto\">You are not checking if the parameter is a Macro, this will throw an exception if that is not the case</p>", "author": "hbs", "createdAt": "2021-03-26T18:13:07Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2d871c514ccbef22f9552b7fc121e064fd6dca4", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..622b48ef 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -188,7 +189,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n     String method = (String) params.get(METHOD);\n     if (null == method) {\n-      throw new WarpScriptException(getName() + \" expects an http method.\");\n+      method = \"GET\";\n     }\n \n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n", "next_change": {"commit": "a2139d91b7562c514d22825c690f13b4c73530a2", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 622b48ef..3808e517 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -195,8 +198,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n-    List authInfo = (List) params.get(AUTH_INFO);\n-    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    o = params.get(HEADERS_MACRO);\n+    if (!(o instanceof WarpScriptStack.Macro)) {\n+      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    }\n+    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n+\n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n", "next_change": {"commit": "8fce1b164818478eff47493dddccfb14d4e62a0b", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3808e517..198565de 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -205,6 +217,16 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    long maxchunksize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxchunksize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxchunksize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n+    }\n+\n     WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n \n     //\n", "next_change": {"commit": "1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 198565de..e9a73618 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -210,20 +210,23 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n     Object body = params.get(BODY);\n \n+    WarpScriptStack.Macro headersMacro = null;\n     o = params.get(HEADERS_MACRO);\n-    if (!(o instanceof WarpScriptStack.Macro)) {\n-      throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n     }\n-    WarpScriptStack.Macro headersMacro = (WarpScriptStack.Macro) o;\n \n     Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n-    long maxchunksize;\n+    long maxChunkSize;\n     if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n-      maxchunksize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n     } else {\n-      maxchunksize = baseMaxChunkSize;\n+      maxChunkSize = baseMaxChunkSize;\n     }\n-    if (chunkSize > maxchunksize) {\n+    if (chunkSize > maxChunkSize) {\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n", "next_change": {"commit": "99706f330bc85ff7fc92c8203428653e96ce1d11", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex e9a73618..c8d44737 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -230,7 +230,14 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + chunkSize + \".\");\n     }\n \n-    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n \n     //\n     // Check URL\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex c8d44737..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -246,6 +276,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Object urlParam = params.get(URL);\n     if (null == urlParam) {\n       throw new WarpScriptException(getName() + \" expects a url.\");\n+\n+    } else if (!(urlParam instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects \" + URL + \" to be a STRING.\");\n     }\n \n     URL url = null;\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMDAxNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602500015", "body": "a URL", "bodyText": "a URL", "bodyHTML": "<p dir=\"auto\">a URL</p>", "author": "hbs", "createdAt": "2021-03-26T18:13:18Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdecc3f3e125e34f4d18c77f112229af88dc7521", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..709db595 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -205,7 +206,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n     Object urlParam = params.get(URL);\n     if (null == urlParam) {\n-      throw new WarpScriptException(getName() + \" expects an url.\");\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n     }\n \n     URL url = null;\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 709db595..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -207,6 +276,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Object urlParam = params.get(URL);\n     if (null == urlParam) {\n       throw new WarpScriptException(getName() + \" expects a url.\");\n+\n+    } else if (!(urlParam instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects \" + URL + \" to be a STRING.\");\n     }\n \n     URL url = null;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMDUzMw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602500533", "body": "per script execution", "bodyText": "per script execution", "bodyHTML": "<p dir=\"auto\">per script execution</p>", "author": "hbs", "createdAt": "2021-03-26T18:14:16Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdecc3f3e125e34f4d18c77f112229af88dc7521", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..709db595 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -245,7 +246,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     }\n \n     if (urlCount.addAndGet(1) > maxrequests) {\n-      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n     }\n \n     Map<String, Object> res = new HashMap<>();\n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 709db595..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -249,45 +295,51 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n     }\n \n-    Map<String, Object> res = new HashMap<>();\n+    Map<String, Object> res = new LinkedHashMap<>();\n     HttpURLConnection conn = null;\n \n     try {\n       conn = (HttpURLConnection) url.openConnection();\n \n       //\n-      // Encode userinfo and set headers\n+      // Set headers\n       //\n \n-      if (null != authInfo) {\n+      if (null == headersMacro) {\n \n-        Map additionalHeaders;\n-        if (null != authMacro) {\n-          stack.push(authInfo);\n-          stack.exec(authMacro);\n-          additionalHeaders = (Map) stack.pop();\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n \n-        } else {\n-          // doing basic auth\n-          if (authInfo.size() != 2) {\n-            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n-          }\n+        if (null != username && null != password) {\n \n-          if (!(authInfo.get(0) instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n           }\n \n-          if (!(authInfo.get(1) instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n           }\n \n-          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n           String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n-          additionalHeaders =  new HashMap<Object, Object>();\n-          additionalHeaders.put(\"Authorization\", basicAuth);\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n         }\n \n-        headers.putAll(additionalHeaders);\n+        headers = (Map) o;\n       }\n \n       for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -305,41 +304,26 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set headers\n       //\n \n-      if (null == headersMacro) {\n-\n-        Object username = params.get(USERNAME);\n-        Object password = params.get(PASSWORD);\n+      Object username = params.get(USERNAME);\n+      Object password = params.get(PASSWORD);\n \n-        if (null != username && null != password) {\n+      if (null != username && null != password) {\n \n-          //\n-          // Compute basic auth\n-          //\n-\n-          if (!(username instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n-          }\n-\n-          if (!(password instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n-          }\n+        //\n+        // Compute basic auth\n+        //\n \n-          String userInfo = ((String) username) + \":\" + ((String) password);\n-          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n-          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        if (!(username instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n         }\n \n-      } else {\n-\n-        stack.push(params);\n-        stack.exec(headersMacro);\n-        o = stack.pop();\n-\n-        if (!(o instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        if (!(password instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n         }\n \n-        headers = (Map) o;\n+        String userInfo = ((String) username) + \":\" + ((String) password);\n+        String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+        conn.setRequestProperty(\"Authorization\", basicAuth);\n       }\n \n       for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMTcwMg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602501702", "body": "This will probably produce a weird behavior if method is not POST as setting doOutput to true normally forces the method to be POST", "bodyText": "This will probably produce a weird behavior if method is not POST as setting doOutput to true normally forces the method to be POST", "bodyHTML": "<p dir=\"auto\">This will probably produce a weird behavior if method is not POST as setting doOutput to true normally forces the method to be POST</p>", "author": "hbs", "createdAt": "2021-03-26T18:16:16Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6078808fc5af6567e7d842cedcf38edb38cf8067", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..42a007b3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -300,26 +314,29 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set body\n       //\n \n-      if (body instanceof String) {\n-        String bodyS = (String) body;\n-        conn.setDoOutput(bodyS.length() > 0);\n-        if (bodyS.length() > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n           }\n-        }\n \n-      } else if (body instanceof byte[]) {\n-        byte[] bodyB = (byte[]) body;\n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n-        }\n \n-      } else if (null != body) {\n-        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n       }\n \n       //\n", "next_change": {"commit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 42a007b3..17865ac2 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -337,6 +383,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n \n       //\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMjA3MA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602502070", "body": "ditto, body should be ignored if method is GET or another method which does not allow a body", "bodyText": "ditto, body should be ignored if method is GET or another method which does not allow a body", "bodyHTML": "<p dir=\"auto\">ditto, body should be ignored if method is GET or another method which does not allow a body</p>", "author": "hbs", "createdAt": "2021-03-26T18:16:50Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6078808fc5af6567e7d842cedcf38edb38cf8067", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..42a007b3 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -300,26 +314,29 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set body\n       //\n \n-      if (body instanceof String) {\n-        String bodyS = (String) body;\n-        conn.setDoOutput(bodyS.length() > 0);\n-        if (bodyS.length() > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n           }\n-        }\n \n-      } else if (body instanceof byte[]) {\n-        byte[] bodyB = (byte[]) body;\n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n-        }\n \n-      } else if (null != body) {\n-        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n       }\n \n       //\n", "next_change": {"commit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 42a007b3..17865ac2 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -337,6 +383,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n \n       //\n", "next_change": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMjk0OQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602502949", "body": "are the lists inside of the original hdrs map modifiable?", "bodyText": "are the lists inside of the original hdrs map modifiable?", "bodyHTML": "<p dir=\"auto\">are the lists inside of the original hdrs map modifiable?</p>", "author": "hbs", "createdAt": "2021-03-26T18:18:18Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -340,15 +400,6 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         res.put(STATUS_MESSAGE, \"\");\n       }\n \n-      //\n-      // Make the headers map modifiable\n-      //\n-\n-      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n-      hdrs.remove(null);\n-\n-      res.put(RESPONSE_HEADERS, hdrs);\n-\n       //\n       // Read response\n       //\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMzQ5MQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602503491", "body": "per script execution", "bodyText": "per script execution", "bodyHTML": "<p dir=\"auto\">per script execution</p>", "author": "hbs", "createdAt": "2021-03-26T18:19:16Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdecc3f3e125e34f4d18c77f112229af88dc7521", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..709db595 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -375,7 +376,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (downloadSize.get() + baos.size() + len > maxsize) {\n-              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes) per script execution.\");\n             }\n \n             baos.write(buf, 0, len);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMzczOQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602503739", "body": "what semantics does a negatice chunkSize have?", "bodyText": "what semantics does a negatice chunkSize have?", "bodyHTML": "<p dir=\"auto\">what semantics does a negatice chunkSize have?</p>", "author": "hbs", "createdAt": "2021-03-26T18:19:41Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTA1MDI2MQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r605050261", "bodyText": "none other than not using chunk option", "author": "randomboolean", "createdAt": "2021-03-31T16:34:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMzczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d53c56d0b43b965421d719ff704d0a27890ee44", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..33b40110 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,7 +417,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         in = conn.getErrorStream();\n       }\n \n-      if (chunkSize <= 0) {\n+      if (null == chunkSize) {\n \n         if (null != in) {\n           byte[] buf = new byte[8192];\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwNDgyNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602504825", "body": "If EOF is reached while attempting to read buf.length bytes you will exit the loop and miss the last part of the data", "bodyText": "If EOF is reached while attempting to read buf.length bytes you will exit the loop and miss the last part of the data", "bodyHTML": "<p dir=\"auto\">If EOF is reached while attempting to read buf.length bytes you will exit the loop and miss the last part of the data</p>", "author": "hbs", "createdAt": "2021-03-26T18:21:48Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n+\n+            Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n+            byte[] buf = new byte[chunkSize.intValue()];\n+            int len = in.read(buf);\n+            if (len < 0) {", "originalCommit": "29a75c953830c4f95ec65f63afac4e0d0904e179", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b045f07639c578549d61a84253c11b0bfa88fb0", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex aba557e3..2ad14231 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -398,8 +447,17 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n             Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n             byte[] buf = new byte[chunkSize.intValue()];\n-            int len = in.read(buf);\n-            if (len < 0) {\n+            int len = 0;\n+            boolean eof = false;\n+            while (len < chunkSize.intValue()) {\n+              int read = in.read(buf, len,chunkSize.intValue() - len);\n+              if (read <= 0) {\n+                eof = true;\n+                break;\n+              }\n+              len += read;\n+            }\n+            if (len <= 0) {\n               break;\n             }\n \n", "next_change": {"commit": "b16009fa72bf3e056852d6249d372e7523b36421", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 2ad14231..49e70dc1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -466,35 +472,40 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n             }\n \n             if (len == chunkSize) {\n-              chunkRes.put(CONTENT, buf);\n+              res.put(CONTENT, buf);\n             } else {\n               byte[] buf2 = new byte[len];\n               System.arraycopy(buf, 0, buf2, 0, buf2.length);\n-              chunkRes.put(CONTENT, buf2);\n+              res.put(CONTENT, buf2);\n             }\n-            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n \n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n             stack.push(chunkRes);\n             if (null != chunkMacro) {\n               stack.exec(chunkMacro);\n             }\n-            \n-            if (eof) {\n-              break;\n-            }\n-          }\n-\n-        } else {\n-          Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n-          chunkRes.put(CHUNK_NUMBER, 1L);\n-          chunkRes.put(CONTENT, new byte[0]);\n-          stack.push(chunkRes);\n-          if (null != chunkMacro) {\n-            stack.exec(chunkMacro);\n           }\n         }\n \n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n         res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 49e70dc1..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -506,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}]}}]}}, {"oid": "e4a7ea3f2ae976e4cb1db0582f5557b9ef2db77a", "url": "https://github.com/senx/warp10-platform/commit/e4a7ea3f2ae976e4cb1db0582f5557b9ef2db77a", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP", "committedDate": "2021-03-31T16:24:14Z", "type": "commit"}, {"oid": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "url": "https://github.com/senx/warp10-platform/commit/13af41720935ba62647ec38d4a0fdf13d7d50a34", "message": "comment fix", "committedDate": "2021-03-31T16:27:54Z", "type": "commit"}, {"oid": "5d6751d06c32bc52be446ef748408004e8654a04", "url": "https://github.com/senx/warp10-platform/commit/5d6751d06c32bc52be446ef748408004e8654a04", "message": "static web control", "committedDate": "2021-03-31T16:30:20Z", "type": "commit"}, {"oid": "d2d871c514ccbef22f9552b7fc121e064fd6dca4", "url": "https://github.com/senx/warp10-platform/commit/d2d871c514ccbef22f9552b7fc121e064fd6dca4", "message": "default to get", "committedDate": "2021-03-31T16:32:31Z", "type": "commit"}, {"oid": "bdecc3f3e125e34f4d18c77f112229af88dc7521", "url": "https://github.com/senx/warp10-platform/commit/bdecc3f3e125e34f4d18c77f112229af88dc7521", "message": "fix some comments", "committedDate": "2021-03-31T16:34:44Z", "type": "commit"}, {"oid": "a2139d91b7562c514d22825c690f13b4c73530a2", "url": "https://github.com/senx/warp10-platform/commit/a2139d91b7562c514d22825c690f13b4c73530a2", "message": "headers.macro", "committedDate": "2021-03-31T17:08:55Z", "type": "commit"}, {"oid": "6078808fc5af6567e7d842cedcf38edb38cf8067", "url": "https://github.com/senx/warp10-platform/commit/6078808fc5af6567e7d842cedcf38edb38cf8067", "message": "dont set body for every methods", "committedDate": "2021-03-31T17:30:56Z", "type": "commit"}, {"oid": "02fb358d3dde284fae783d1db5b4c3a2b74303bb", "url": "https://github.com/senx/warp10-platform/commit/02fb358d3dde284fae783d1db5b4c3a2b74303bb", "message": "nit", "committedDate": "2021-03-31T17:37:51Z", "type": "commit"}, {"oid": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "url": "https://github.com/senx/warp10-platform/commit/6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "message": "make static parameter extraction", "committedDate": "2021-04-01T09:22:02Z", "type": "commit"}, {"oid": "8fce1b164818478eff47493dddccfb14d4e62a0b", "url": "https://github.com/senx/warp10-platform/commit/8fce1b164818478eff47493dddccfb14d4e62a0b", "message": "max chunk size", "committedDate": "2021-04-01T09:36:04Z", "type": "commit"}, {"oid": "1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "url": "https://github.com/senx/warp10-platform/commit/1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "message": "bugfix", "committedDate": "2021-04-01T10:07:03Z", "type": "commit"}, {"oid": "99706f330bc85ff7fc92c8203428653e96ce1d11", "url": "https://github.com/senx/warp10-platform/commit/99706f330bc85ff7fc92c8203428653e96ce1d11", "message": "bugfix handle wrong type argument", "committedDate": "2021-04-01T10:11:36Z", "type": "commit"}, {"oid": "ad711e3b82914cc998872683a0a16ea702455698", "url": "https://github.com/senx/warp10-platform/commit/ad711e3b82914cc998872683a0a16ea702455698", "message": "bugfix", "committedDate": "2021-04-01T10:16:04Z", "type": "commit"}, {"oid": "996d5009eed896ba339fa9739b491c39f864d928", "url": "https://github.com/senx/warp10-platform/commit/996d5009eed896ba339fa9739b491c39f864d928", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP", "committedDate": "2021-04-01T11:10:18Z", "type": "commit"}, {"oid": "2b045f07639c578549d61a84253c11b0bfa88fb0", "url": "https://github.com/senx/warp10-platform/commit/2b045f07639c578549d61a84253c11b0bfa88fb0", "message": "fully read chunk size", "committedDate": "2021-04-01T11:11:19Z", "type": "commit"}, {"oid": "401b96c0b722523887abb096a0e8f9bc21c23017", "url": "https://github.com/senx/warp10-platform/commit/401b96c0b722523887abb096a0e8f9bc21c23017", "message": "revert mistakenly added nit change", "committedDate": "2021-04-01T11:15:04Z", "type": "commit"}, {"oid": "7a02cc10d5a8287cfff52bdbfab5328bd2f7b0d4", "url": "https://github.com/senx/warp10-platform/commit/7a02cc10d5a8287cfff52bdbfab5328bd2f7b0d4", "message": "simplify", "committedDate": "2021-04-01T11:29:05Z", "type": "commit"}, {"oid": "6d53c56d0b43b965421d719ff704d0a27890ee44", "url": "https://github.com/senx/warp10-platform/commit/6d53c56d0b43b965421d719ff704d0a27890ee44", "message": "negative or nul chunksize throws error", "committedDate": "2021-04-06T14:21:05Z", "type": "commit"}, {"oid": "f01bef6962b2683769cfaa91149813e42390f5cc", "url": "https://github.com/senx/warp10-platform/commit/f01bef6962b2683769cfaa91149813e42390f5cc", "message": "getName swap", "committedDate": "2021-04-06T14:22:18Z", "type": "commit"}, {"oid": "b16009fa72bf3e056852d6249d372e7523b36421", "url": "https://github.com/senx/warp10-platform/commit/b16009fa72bf3e056852d6249d372e7523b36421", "message": "chunk macro now receive an unmodifiable view, add final chunk macro execution", "committedDate": "2021-04-06T15:13:35Z", "type": "commit"}, {"oid": "99770409dad5b8431803c10b4282565232471b6d", "url": "https://github.com/senx/warp10-platform/commit/99770409dad5b8431803c10b4282565232471b6d", "message": "POST default if non empty body", "committedDate": "2021-04-06T15:39:43Z", "type": "commit"}, {"oid": "ff64fe4d38ffc937f5ca8246f149405590a38479", "url": "https://github.com/senx/warp10-platform/commit/ff64fe4d38ffc937f5ca8246f149405590a38479", "message": "nit", "committedDate": "2021-04-06T15:42:53Z", "type": "commit"}, {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "url": "https://github.com/senx/warp10-platform/commit/a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "message": "fails if body is unused with certain methods", "committedDate": "2021-04-06T15:57:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTU5NTgyMw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611595823", "body": "An optional", "bodyText": "An optional", "bodyHTML": "<p dir=\"auto\">An optional</p>", "author": "ftence", "createdAt": "2021-04-12T12:46:04Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -35,28 +35,30 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYwMDYxNA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611600614", "body": "Maybe you could list all the capabilities related to this function?", "bodyText": "Maybe you could list all the capabilities related to this function?", "bodyHTML": "<p dir=\"auto\">Maybe you could list all the capabilities related to this function?</p>", "author": "ftence", "createdAt": "2021-04-12T12:52:51Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -45,16 +45,19 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Send an HTTP request to a url\n  *\n- * To raise maximum number of calls and download size limit, use these capabilities:\n- * http.requests\n- * http.size\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n  *\n  * Params:\n  * url The URL to send the request to. Must begin with http:// or https://\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n  * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n", "next_change": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -57,11 +57,10 @@ import java.util.concurrent.atomic.AtomicLong;\n  * method The optional http method. Default to GET\n  * headers An optional header map\n  * body An optional body. UTF-8 STRING or BYTES\n- * headers.macro An optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n  * chunk.size Chunk size\n  * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n- * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n- * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n  *\n  * Output:\n  * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYwMTE3MA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611601170", "body": "`chunkSize` can be null so it may throw a NPE.", "bodyText": "chunkSize can be null so it may throw a NPE.", "bodyHTML": "<p dir=\"auto\"><code>chunkSize</code> can be null so it may throw a NPE.</p>", "author": "ftence", "createdAt": "2021-04-12T12:53:42Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -232,16 +235,16 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       if (0 >= chunkSize) {\n         throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n       }\n-    }\n \n-    long maxChunkSize;\n-    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n-      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n-    } else {\n-      maxChunkSize = baseMaxChunkSize;\n-    }\n-    if (chunkSize > maxChunkSize) {\n-      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+      long maxChunkSize;\n+      if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+        maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      } else {\n+        maxChunkSize = baseMaxChunkSize;\n+      }\n+      if (chunkSize > maxChunkSize) {\n+        throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+      }\n     }\n \n     WarpScriptStack.Macro chunkMacro = null;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYxOTExNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611619115", "body": "Don't duplicate the code, simply convert the String to byte[], with `bodyS.getBytes(StandardCharsets.UTF_8)`, then do the logic on the body as byte[].", "bodyText": "Don't duplicate the code, simply convert the String to byte[], with bodyS.getBytes(StandardCharsets.UTF_8), then do the logic on the body as byte[].", "bodyHTML": "<p dir=\"auto\">Don't duplicate the code, simply convert the String to byte[], with <code>bodyS.getBytes(StandardCharsets.UTF_8)</code>, then do the logic on the body as byte[].</p>", "author": "ftence", "createdAt": "2021-04-12T13:17:09Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {\n+\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n+\n+        if (null != username && null != password) {\n+\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+          }\n+\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+          }\n+\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n+          }\n+\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n+          }", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYyNzU3Nw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611627577", "body": "In fact, only TRACE cannot have a body, see the source code of [HttpURLConnection](https://github.com/JetBrains/jdk8u_jdk/blob/master/src/share/classes/sun/net/www/protocol/http/HttpURLConnection.java#L1319). So either check for TRACE (using `equals`, not `==`) or handle the IOException it may throw.\r\n\r\nThe method is changed from GET to POST if there is a body by the getOutputStream. My opinion is to let that happen. This is coherent with defaulting to \"POST\" if no method is defined and there is a body.", "bodyText": "In fact, only TRACE cannot have a body, see the source code of HttpURLConnection. So either check for TRACE (using equals, not ==) or handle the IOException it may throw.\nThe method is changed from GET to POST if there is a body by the getOutputStream. My opinion is to let that happen. This is coherent with defaulting to \"POST\" if no method is defined and there is a body.", "bodyHTML": "<p dir=\"auto\">In fact, only TRACE cannot have a body, see the source code of <a href=\"https://github.com/JetBrains/jdk8u_jdk/blob/master/src/share/classes/sun/net/www/protocol/http/HttpURLConnection.java#L1319\">HttpURLConnection</a>. So either check for TRACE (using <code>equals</code>, not <code>==</code>) or handle the IOException it may throw.</p>\n<p dir=\"auto\">The method is changed from GET to POST if there is a body by the getOutputStream. My opinion is to let that happen. This is coherent with defaulting to \"POST\" if no method is defined and there is a body.</p>", "author": "ftence", "createdAt": "2021-04-12T13:27:36Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {\n+\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n+\n+        if (null != username && null != password) {\n+\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+          }\n+\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+          }\n+\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTI3ODE1Nw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r621278157", "bodyText": "I think it can be confusing if a method is explicit in the arguments and it gets changed to POST.", "author": "randomboolean", "createdAt": "2021-04-27T14:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYyNzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjA5MTk3MQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622091971", "bodyText": "You're right. It that case, just check for TRACE and GET.", "author": "ftence", "createdAt": "2021-04-28T11:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYyNzU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..751dd208 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -362,28 +365,24 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n \n       if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n \n+        byte[] bodyB = null;\n         if (body instanceof String) {\n-          String bodyS = (String) body;\n-          conn.setDoOutput(bodyS.length() > 0);\n-          if (bodyS.length() > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n-            }\n-          }\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n \n         } else if (body instanceof byte[]) {\n-          byte[] bodyB = (byte[]) body;\n-          conn.setDoOutput(bodyB.length > 0);\n-          if (bodyB.length > 0) {\n-            try (OutputStream os = conn.getOutputStream()) {\n-              os.write(bodyB);\n-            }\n-          }\n+          bodyB = (byte[]) body;\n \n         } else if (null != body) {\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n       } else if (null != body) {\n         throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n       }\n", "next_change": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 751dd208..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -376,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYzNDQ4MQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611634481", "body": "I'm, again, not convinced by the usefulness of this parameter. This does not offer more feature or readability than coding that in WarpScript:\r\n```\r\n{\r\n  /* All your HTTP parameters */\r\n}\r\n@your_macro_updating_headers\r\nHTTP\r\n```", "bodyText": "I'm, again, not convinced by the usefulness of this parameter. This does not offer more feature or readability than coding that in WarpScript:\n{\n  /* All your HTTP parameters */\n}\n@your_macro_updating_headers\nHTTP", "bodyHTML": "<p dir=\"auto\">I'm, again, not convinced by the usefulness of this parameter. This does not offer more feature or readability than coding that in WarpScript:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  /* All your HTTP parameters */\n}\n@your_macro_updating_headers\nHTTP\"><pre><code>{\n  /* All your HTTP parameters */\n}\n@your_macro_updating_headers\nHTTP\n</code></pre></div>", "author": "ftence", "createdAt": "2021-04-12T13:35:54Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -74,7 +76,6 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n   public static final String URL = \"url\";\n   public static final String HEADERS = \"headers\";\n   public static final String BODY = \"body\";\n-  public static final String HEADERS_MACRO = \"headers.macro\";\n   public static final String CHUNK_SIZE = \"chunk.size\";\n   public static final String CHUNK_MACRO = \"chunk.macro\";\n   public static final String USERNAME = \"username\";\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYzNTkxOA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611635918", "body": "I don't see why basic auth and header modification should be exclusive.", "bodyText": "I don't see why basic auth and header modification should be exclusive.", "bodyHTML": "<p dir=\"auto\">I don't see why basic auth and header modification should be exclusive.</p>", "author": "ftence", "createdAt": "2021-04-12T13:37:38Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fc506c69ec9e2f617160092cae15145086ffae5", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..a035bbb1 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -312,41 +304,26 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       // Set headers\n       //\n \n-      if (null == headersMacro) {\n-\n-        Object username = params.get(USERNAME);\n-        Object password = params.get(PASSWORD);\n-\n-        if (null != username && null != password) {\n-\n-          //\n-          // Compute basic auth\n-          //\n+      Object username = params.get(USERNAME);\n+      Object password = params.get(PASSWORD);\n \n-          if (!(username instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n-          }\n+      if (null != username && null != password) {\n \n-          if (!(password instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n-          }\n+        //\n+        // Compute basic auth\n+        //\n \n-          String userInfo = ((String) username) + \":\" + ((String) password);\n-          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n-          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        if (!(username instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n         }\n \n-      } else {\n-\n-        stack.push(params);\n-        stack.exec(headersMacro);\n-        o = stack.pop();\n-\n-        if (!(o instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        if (!(password instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n         }\n \n-        headers = (Map) o;\n+        String userInfo = ((String) username) + \":\" + ((String) password);\n+        String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+        conn.setRequestProperty(\"Authorization\", basicAuth);\n       }\n \n       for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTY0MjY4NA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611642684", "body": "`chunk.number` is 1-indexed. I'm wondering if that's coherent with other indexes in WarpScript.", "bodyText": "chunk.number is 1-indexed. I'm wondering if that's coherent with other indexes in WarpScript.", "bodyHTML": "<p dir=\"auto\"><code>chunk.number</code> is 1-indexed. I'm wondering if that's coherent with other indexes in WarpScript.</p>", "author": "ftence", "createdAt": "2021-04-12T13:45:52Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {\n+\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n+\n+        if (null != username && null != password) {\n+\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+          }\n+\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+          }\n+\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n+          }\n+\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n+          }\n+\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      // headers map is immutable\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      // also put status_message in a separate field\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (null == chunkSize) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes) per script execution.\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        //\n+        // Chunk processing\n+        //\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTI3MjExMw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r621272113", "bodyText": "TIMESPLIT for example is 1-indexed, but CHUNK is indexed with the first tick of the partial GTS.", "author": "randomboolean", "createdAt": "2021-04-27T14:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTY0MjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjA5MzQ4MQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622093481", "bodyText": "OK, that's fine as long as it will be documented ;).", "author": "ftence", "createdAt": "2021-04-28T11:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTY0MjY4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTY0Mzc4Mw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611643783", "body": "You can also remove `CONTENT`.", "bodyText": "You can also remove CONTENT.", "bodyHTML": "<p dir=\"auto\">You can also remove <code>CONTENT</code>.</p>", "author": "ftence", "createdAt": "2021-04-12T13:47:09Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {\n+\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n+\n+        if (null != username && null != password) {\n+\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+          }\n+\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+          }\n+\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n+          }\n+\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n+          }\n+\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      // headers map is immutable\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      // also put status_message in a separate field\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (null == chunkSize) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes) per script execution.\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        //\n+        // Chunk processing\n+        //\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;\n+          boolean eof = false;\n+\n+          while (!eof) {\n+            chunkNumber++;\n+\n+            byte[] buf = new byte[chunkSize.intValue()];\n+            int len = 0;\n+            while (len < chunkSize.intValue()) {\n+              int read = in.read(buf, len,chunkSize.intValue() - len);\n+              if (read <= 0) {\n+                eof = true;\n+                break;\n+              }\n+              len += read;\n+            }\n+            if (len <= 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              res.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              res.put(CONTENT, buf2);\n+            }\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n+\n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n+            }\n+          }\n+        }\n+\n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n+        res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);", "originalCommit": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 17865ac2..0746a3d0 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -516,6 +489,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n         //\n \n         res.remove(CHUNK_NUMBER);\n+        res.remove(CONTENT);\n       }\n \n     } catch (IOException ioe) {\n", "next_change": null}]}}, {"oid": "596910daa03caca89530bcfb0597c5f07493db0d", "url": "https://github.com/senx/warp10-platform/commit/596910daa03caca89530bcfb0597c5f07493db0d", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP", "committedDate": "2021-04-27T09:05:22Z", "type": "commit"}, {"oid": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "url": "https://github.com/senx/warp10-platform/commit/2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "message": "resolve some comments", "committedDate": "2021-04-27T14:27:03Z", "type": "commit"}, {"oid": "2fc506c69ec9e2f617160092cae15145086ffae5", "url": "https://github.com/senx/warp10-platform/commit/2fc506c69ec9e2f617160092cae15145086ffae5", "message": "remove headers macro", "committedDate": "2021-04-27T14:32:57Z", "type": "commit"}, {"oid": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "url": "https://github.com/senx/warp10-platform/commit/75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "message": "remove content when finalyzing chunk processing", "committedDate": "2021-04-27T14:39:03Z", "type": "commit"}, {"oid": "8bf885fa82d3726a0309c624f6d7d9cc0d09772c", "url": "https://github.com/senx/warp10-platform/commit/8bf885fa82d3726a0309c624f6d7d9cc0d09772c", "message": "check only GET and TRACE to not set body", "committedDate": "2021-04-28T11:53:12Z", "type": "commit"}, {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079", "url": "https://github.com/senx/warp10-platform/commit/f2d6d357d866539715bb76e6da8d79d2a4325079", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP", "committedDate": "2021-04-28T11:53:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwMTA3Ng==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622301076", "body": "Check for `bodyB` nullity, else it can throw a NPE.", "bodyText": "Check for bodyB nullity, else it can throw a NPE.", "bodyHTML": "<p dir=\"auto\">Check for <code>bodyB</code> nullity, else it can throw a NPE.</p>", "author": "ftence", "createdAt": "2021-04-28T15:35:06Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+\n+      long maxChunkSize;\n+      if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+        maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      } else {\n+        maxChunkSize = baseMaxChunkSize;\n+      }\n+      if (chunkSize > maxChunkSize) {\n+        throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+      }\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      Object username = params.get(USERNAME);\n+      Object password = params.get(PASSWORD);\n+\n+      if (null != username && null != password) {\n+\n+        //\n+        // Compute basic auth\n+        //\n+\n+        if (!(username instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+        }\n+\n+        if (!(password instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+        }\n+\n+        String userInfo = ((String) username) + \":\" + ((String) password);\n+        String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+        conn.setRequestProperty(\"Authorization\", basicAuth);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (!\"GET\".equals(method) && !\"TRACE\".equals(method)) {\n+\n+        byte[] bodyB = null;\n+        if (body instanceof String) {\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n+\n+        } else if (body instanceof byte[]) {\n+          bodyB = (byte[]) body;\n+\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n+\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -350,10 +377,12 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n           throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n         }\n \n-        conn.setDoOutput(bodyB.length > 0);\n-        if (bodyB.length > 0) {\n-          try (OutputStream os = conn.getOutputStream()) {\n-            os.write(bodyB);\n+        if (null != bodyB) {\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n           }\n         }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNTUxNw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622305517", "body": "Make `confMaxRequests` a `String` and remove the cast.", "bodyText": "Make confMaxRequests a String and remove the cast.", "bodyHTML": "<p dir=\"auto\">Make <code>confMaxRequests</code> a <code>String</code> and remove the cast.</p>", "author": "ftence", "createdAt": "2021-04-28T15:39:59Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -134,25 +134,25 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    String confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n     if (null == confMaxRequests) {\n       baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+      baseMaxRequests = Long.parseLong(confMaxRequests);\n     }\n \n-    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    String confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n     if (null == confMaxSize) {\n       baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      baseMaxSize = Long.parseLong((String) confMaxSize);\n+      baseMaxSize = Long.parseLong(confMaxSize);\n     }\n \n-    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    String confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n     if (null == confMaxChunkSize) {\n       baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n     } else {\n-      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+      baseMaxChunkSize = Long.parseLong(confMaxChunkSize);\n     }\n   }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNTc1Mw==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622305753", "body": "Same with `confMaxSize`.", "bodyText": "Same with confMaxSize.", "bodyHTML": "<p dir=\"auto\">Same with <code>confMaxSize</code>.</p>", "author": "ftence", "createdAt": "2021-04-28T15:40:15Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -134,25 +134,25 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    String confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n     if (null == confMaxRequests) {\n       baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+      baseMaxRequests = Long.parseLong(confMaxRequests);\n     }\n \n-    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    String confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n     if (null == confMaxSize) {\n       baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      baseMaxSize = Long.parseLong((String) confMaxSize);\n+      baseMaxSize = Long.parseLong(confMaxSize);\n     }\n \n-    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    String confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n     if (null == confMaxChunkSize) {\n       baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n     } else {\n-      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+      baseMaxChunkSize = Long.parseLong(confMaxChunkSize);\n     }\n   }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNTkxNQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622305915", "body": "Same with `confMaxChunkSize`.", "bodyText": "Same with confMaxChunkSize.", "bodyHTML": "<p dir=\"auto\">Same with <code>confMaxChunkSize</code>.</p>", "author": "ftence", "createdAt": "2021-04-28T15:40:27Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -134,25 +134,25 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n \n     // retrieve limits\n-    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    String confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n     if (null == confMaxRequests) {\n       baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n     } else {\n-      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+      baseMaxRequests = Long.parseLong(confMaxRequests);\n     }\n \n-    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    String confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n     if (null == confMaxSize) {\n       baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n     } else {\n-      baseMaxSize = Long.parseLong((String) confMaxSize);\n+      baseMaxSize = Long.parseLong(confMaxSize);\n     }\n \n-    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    String confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n     if (null == confMaxChunkSize) {\n       baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n     } else {\n-      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+      baseMaxChunkSize = Long.parseLong(confMaxChunkSize);\n     }\n   }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNzgwMg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622307802", "body": "`new HashMap<Object, Object>`", "bodyText": "new HashMap<Object, Object>", "bodyHTML": "<p dir=\"auto\"><code>new HashMap&lt;Object, Object&gt;</code></p>", "author": "ftence", "createdAt": "2021-04-28T15:42:33Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMxNjk4NQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622316985", "bodyText": "Also check the type before casting to Map.", "author": "ftence", "createdAt": "2021-04-28T15:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNzgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -215,12 +215,36 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       } else {\n         method = \"POST\";\n       }\n+\n+    } else if (oo instanceof String) {\n+      method = (String) oo;\n+\n+    } else {\n+      throw new WarpScriptException(getName() + \" expects \" + METHOD + \" to be a STRING.\");\n+    }\n+\n+    Map<Object, Object> headers;\n+    oo = params.get(HEADERS);\n+    if (null == oo) {\n+      headers = new HashMap<Object, Object>();\n+    } else if (oo instanceof Map) {\n+      headers = (Map) oo;\n+    } else {\n+     throw new WarpScriptException(getName() + \" expects \" + HEADERS + \" to be a MAP.\");\n     }\n \n-    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Long chunkSize = null;\n+    oo = params.get(CHUNK_SIZE);\n+\n+    if (null != oo) {\n+\n+      if (oo instanceof Long) {\n+        chunkSize = (Long) oo;\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" to be a LONG.\");\n+      }\n \n-    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n-    if (null != chunkSize) {\n       if (0 >= chunkSize) {\n         throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n       }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwODIzOA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622308238", "body": "`new LinkedHashMap<String, Object>()`", "bodyText": "new LinkedHashMap<String, Object>()", "bodyHTML": "<p dir=\"auto\"><code>new LinkedHashMap&lt;String, Object&gt;()</code></p>", "author": "ftence", "createdAt": "2021-04-28T15:43:02Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+\n+      long maxChunkSize;\n+      if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+        maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      } else {\n+        maxChunkSize = baseMaxChunkSize;\n+      }\n+      if (chunkSize > maxChunkSize) {\n+        throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+      }\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -294,7 +321,7 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n     }\n \n-    Map<String, Object> res = new LinkedHashMap<>();\n+    Map<String, Object> res = new LinkedHashMap<String, Object>();\n     HttpURLConnection conn = null;\n \n     try {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMxNDg1Mg==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622314852", "body": "Check type before casting to `String`.", "bodyText": "Check type before casting to String.", "bodyHTML": "<p dir=\"auto\">Check type before casting to <code>String</code>.</p>", "author": "ftence", "createdAt": "2021-04-28T15:50:42Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -205,9 +205,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     //\n \n     Object body = params.get(BODY);\n-    String method = (String) params.get(METHOD);\n-\n-    if (null == method) {\n+    Object oo = params.get(METHOD);\n+    String method;\n+    if (null == oo) {\n \n       if (null == body) {\n         method = \"GET\";\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMxNzI2OQ==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622317269", "body": "Check type before cast.", "bodyText": "Check type before cast.", "bodyHTML": "<p dir=\"auto\">Check type before cast.</p>", "author": "ftence", "createdAt": "2021-04-28T15:53:35Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -215,12 +215,36 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n       } else {\n         method = \"POST\";\n       }\n+\n+    } else if (oo instanceof String) {\n+      method = (String) oo;\n+\n+    } else {\n+      throw new WarpScriptException(getName() + \" expects \" + METHOD + \" to be a STRING.\");\n+    }\n+\n+    Map<Object, Object> headers;\n+    oo = params.get(HEADERS);\n+    if (null == oo) {\n+      headers = new HashMap<Object, Object>();\n+    } else if (oo instanceof Map) {\n+      headers = (Map) oo;\n+    } else {\n+     throw new WarpScriptException(getName() + \" expects \" + HEADERS + \" to be a MAP.\");\n     }\n \n-    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Long chunkSize = null;\n+    oo = params.get(CHUNK_SIZE);\n+\n+    if (null != oo) {\n+\n+      if (oo instanceof Long) {\n+        chunkSize = (Long) oo;\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" to be a LONG.\");\n+      }\n \n-    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n-    if (null != chunkSize) {\n       if (0 >= chunkSize) {\n         throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n       }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMxODQ0OA==", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622318448", "body": "Check type before cast.", "bodyText": "Check type before cast.", "bodyHTML": "<p dir=\"auto\">Check type before cast.</p>", "author": "ftence", "createdAt": "2021-04-28T15:55:00Z", "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+\n+      long maxChunkSize;\n+      if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+        maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      } else {\n+        maxChunkSize = baseMaxChunkSize;\n+      }\n+      if (chunkSize > maxChunkSize) {\n+        throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+      }\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);", "originalCommit": "f2d6d357d866539715bb76e6da8d79d2a4325079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "changed_code": [{"header": "diff --git a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\nindex 3161459e..bdff0df7 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/http/HTTP.java\n", "chunk": "@@ -252,6 +276,9 @@ public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunc\n     Object urlParam = params.get(URL);\n     if (null == urlParam) {\n       throw new WarpScriptException(getName() + \" expects a url.\");\n+\n+    } else if (!(urlParam instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects \" + URL + \" to be a STRING.\");\n     }\n \n     URL url = null;\n", "next_change": null}]}}, {"oid": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "url": "https://github.com/senx/warp10-platform/commit/d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "message": "type checking", "committedDate": "2021-04-28T16:48:25Z", "type": "commit"}]}