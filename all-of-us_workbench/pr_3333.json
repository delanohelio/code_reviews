{"pr_number": 3333, "pr_title": "[RW-4249][Risk=low] Srubenst/data page objects", "pr_author": "s-rubenstein", "pr_createdAt": "2020-04-02T15:15:07Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3333", "timeline": [{"oid": "e5e3b4546b9b48bb1984e245e6cd5a3fc4f5d40d", "url": "https://github.com/all-of-us/workbench/commit/e5e3b4546b9b48bb1984e245e6cd5a3fc4f5d40d", "message": "WIP getDataPageObjects", "committedDate": "2020-03-27T19:45:30Z", "type": "commit"}, {"oid": "a9e1375f51acec0a66c8a2d7a08b8e254b61fb94", "url": "https://github.com/all-of-us/workbench/commit/a9e1375f51acec0a66c8a2d7a08b8e254b61fb94", "message": "WIP", "committedDate": "2020-03-27T20:14:29Z", "type": "commit"}, {"oid": "d623274002393e9835bf6ee7ddcd22b6e5e02a75", "url": "https://github.com/all-of-us/workbench/commit/d623274002393e9835bf6ee7ddcd22b6e5e02a75", "message": "Working getDataPageObjects", "committedDate": "2020-03-31T20:58:19Z", "type": "commit"}, {"oid": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "url": "https://github.com/all-of-us/workbench/commit/1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "message": "Fix warnings for mappers", "committedDate": "2020-04-02T15:12:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMTY1Ng==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402421656", "body": "So the ignore directives always make me a bit nervous. It silently sets up clients for unpleasant surprises.\r\n\r\nWhat about making this method a `dbModelToClientLight` and having another one that fetches everything?\r\n\r\nOr, you could have a parameter to describe what to fetch.", "bodyText": "So the ignore directives always make me a bit nervous. It silently sets up clients for unpleasant surprises.\nWhat about making this method a dbModelToClientLight and having another one that fetches everything?\nOr, you could have a parameter to describe what to fetch.", "bodyHTML": "<p dir=\"auto\">So the ignore directives always make me a bit nervous. It silently sets up clients for unpleasant surprises.</p>\n<p dir=\"auto\">What about making this method a <code>dbModelToClientLight</code> and having another one that fetches everything?</p>\n<p dir=\"auto\">Or, you could have a parameter to describe what to fetch.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T15:52:19Z", "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.pmiops.workbench.cohortreview;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.CohortReview;\n+import org.pmiops.workbench.model.ReviewStatus;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {CommonMappers.class})\n+public interface CohortReviewMapper {\n+  @Mapping(target = \"etag\", source = \"version\")\n+  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination, we don't want this on all results", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyMTQxNg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402521416", "bodyText": "I talked to Brian, and they're actually talking about moving all this out of the object anyway.", "author": "s-rubenstein", "createdAt": "2020-04-02T18:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMTY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex 4d419d4814..8ad341e0d1 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -13,12 +13,12 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"page\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"pageSize\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"sortOrder\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"sortColumn\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"participantCohortStatuses\", ignore = true) // this fetches all participants, and can be large, we don't want to fetch by default.\n+  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"page\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"pageSize\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"sortOrder\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"sortColumn\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"participantCohortStatuses\", ignore = true) // this fetches all participants, and can be large, we don't want to fetch by default. May be removed from object pending design\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n \n   default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n", "next_change": {"commit": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex 8ad341e0d1..ce8c1e4e17 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -13,12 +13,35 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"page\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"pageSize\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"sortOrder\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"sortColumn\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"participantCohortStatuses\", ignore = true) // this fetches all participants, and can be large, we don't want to fetch by default. May be removed from object pending design\n+  @Mapping(\n+      target = \"queryResultSize\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"page\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"pageSize\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"sortOrder\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"sortColumn\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"participantCohortStatuses\",\n+      ignore = true) // this fetches all participants, and can be large, we don't want to fetch by\n+  // default. May be removed from object pending design\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n \n   default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n", "next_change": {"commit": "3ff3f97c40400a9beea5cb484a39fb08aaccb6c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex ce8c1e4e17..a648969043 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -13,35 +13,15 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(\n-      target = \"queryResultSize\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"page\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"pageSize\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"sortOrder\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"sortColumn\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"participantCohortStatuses\",\n-      ignore = true) // this fetches all participants, and can be large, we don't want to fetch by\n+  // used for pagination. Effectively deprecated, to remove with RW-4706\n+  @Mapping(target = \"queryResultSize\", ignore = true)\n+  @Mapping(target = \"page\", ignore = true)\n+  @Mapping(target = \"pageSize\", ignore = true)\n+  @Mapping(target = \"sortOrder\", ignore = true)\n+  @Mapping(target = \"sortColumn\", ignore = true)\n+  // this fetches all participants, and can be large, we don't want to fetch by\n   // default. May be removed from object pending design\n+  @Mapping(target = \"participantCohortStatuses\", ignore = true)\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n \n   default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex a648969043..5006a1cdad 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -23,8 +22,4 @@ public interface CohortReviewMapper {\n   // default. May be removed from object pending design\n   @Mapping(target = \"participantCohortStatuses\", ignore = true)\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n-\n-  default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n-    return DbStorageEnums.reviewStatusFromStorage(reviewStatus);\n-  }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNDgzNA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402424834", "body": "Please change this comment to just \"field not present on source\". In other words, it's not really about what's useful, but what can be provided.\r\n\r\nIf there were another object you could pass in to the converter (like a POJO CohortReviewPaginationOptions) that would provide values for these fields, even better. You could declare a static final instance of that class like `DEFAULT_COHORT_REVIEW_PAGINATION` and use it in a one-arg conversion function that calls the 2-arg one.", "bodyText": "Please change this comment to just \"field not present on source\". In other words, it's not really about what's useful, but what can be provided.\nIf there were another object you could pass in to the converter (like a POJO CohortReviewPaginationOptions) that would provide values for these fields, even better. You could declare a static final instance of that class like DEFAULT_COHORT_REVIEW_PAGINATION and use it in a one-arg conversion function that calls the 2-arg one.", "bodyHTML": "<p dir=\"auto\">Please change this comment to just \"field not present on source\". In other words, it's not really about what's useful, but what can be provided.</p>\n<p dir=\"auto\">If there were another object you could pass in to the converter (like a POJO CohortReviewPaginationOptions) that would provide values for these fields, even better. You could declare a static final instance of that class like <code>DEFAULT_COHORT_REVIEW_PAGINATION</code> and use it in a one-arg conversion function that calls the 2-arg one.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T15:56:25Z", "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.pmiops.workbench.cohortreview;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.CohortReview;\n+import org.pmiops.workbench.model.ReviewStatus;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {CommonMappers.class})\n+public interface CohortReviewMapper {\n+  @Mapping(target = \"etag\", source = \"version\")\n+  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination, we don't want this on all results\n+  @Mapping(target = \"page\", ignore = true) // used for pagination, we don't want this on all results", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyMTU0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402521547", "bodyText": "I can change that. Will do.\nRegarding the POJO, I don't want to spend too much time on this, given @freemabd1 says he's going to be refactoring this object soon anyway.", "author": "s-rubenstein", "createdAt": "2020-04-02T18:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNDgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex 4d419d4814..8ad341e0d1 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -13,12 +13,12 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"page\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"pageSize\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"sortOrder\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"sortColumn\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"participantCohortStatuses\", ignore = true) // this fetches all participants, and can be large, we don't want to fetch by default.\n+  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"page\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"pageSize\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"sortOrder\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"sortColumn\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n+  @Mapping(target = \"participantCohortStatuses\", ignore = true) // this fetches all participants, and can be large, we don't want to fetch by default. May be removed from object pending design\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n \n   default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n", "next_change": {"commit": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex 8ad341e0d1..ce8c1e4e17 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -13,12 +13,35 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"page\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"pageSize\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"sortOrder\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"sortColumn\", ignore = true) // used for pagination. Design is in progress that will remove from this object, and currently mostly unused\n-  @Mapping(target = \"participantCohortStatuses\", ignore = true) // this fetches all participants, and can be large, we don't want to fetch by default. May be removed from object pending design\n+  @Mapping(\n+      target = \"queryResultSize\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"page\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"pageSize\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"sortOrder\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"sortColumn\",\n+      ignore =\n+          true) // used for pagination. Design is in progress that will remove from this object, and\n+  // currently mostly unused\n+  @Mapping(\n+      target = \"participantCohortStatuses\",\n+      ignore = true) // this fetches all participants, and can be large, we don't want to fetch by\n+  // default. May be removed from object pending design\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n \n   default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n", "next_change": {"commit": "3ff3f97c40400a9beea5cb484a39fb08aaccb6c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex ce8c1e4e17..a648969043 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -13,35 +13,15 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(\n-      target = \"queryResultSize\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"page\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"pageSize\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"sortOrder\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"sortColumn\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"participantCohortStatuses\",\n-      ignore = true) // this fetches all participants, and can be large, we don't want to fetch by\n+  // used for pagination. Effectively deprecated, to remove with RW-4706\n+  @Mapping(target = \"queryResultSize\", ignore = true)\n+  @Mapping(target = \"page\", ignore = true)\n+  @Mapping(target = \"pageSize\", ignore = true)\n+  @Mapping(target = \"sortOrder\", ignore = true)\n+  @Mapping(target = \"sortColumn\", ignore = true)\n+  // this fetches all participants, and can be large, we don't want to fetch by\n   // default. May be removed from object pending design\n+  @Mapping(target = \"participantCohortStatuses\", ignore = true)\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n \n   default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex a648969043..5006a1cdad 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -23,8 +22,4 @@ public interface CohortReviewMapper {\n   // default. May be removed from object pending design\n   @Mapping(target = \"participantCohortStatuses\", ignore = true)\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n-\n-  default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n-    return DbStorageEnums.reviewStatusFromStorage(reviewStatus);\n-  }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402426036", "body": "I'm surprised you need to write this method at all. I would've expected MapStruct to look for a `toString` override on the source object and give you this functionality for free.\r\n\r\nFrom section 5.1 of the [reference doc](https://mapstruct.org/documentation/stable/reference/html/#implicit-type-conversions), there are several date & timestamp objects with implicit string conversion to String, but maybe the sql flavors are tripping up the process.", "bodyText": "I'm surprised you need to write this method at all. I would've expected MapStruct to look for a toString override on the source object and give you this functionality for free.\nFrom section 5.1 of the reference doc, there are several date & timestamp objects with implicit string conversion to String, but maybe the sql flavors are tripping up the process.", "bodyHTML": "<p dir=\"auto\">I'm surprised you need to write this method at all. I would've expected MapStruct to look for a <code>toString</code> override on the source object and give you this functionality for free.</p>\n<p dir=\"auto\">From section 5.1 of the <a href=\"https://mapstruct.org/documentation/stable/reference/html/#implicit-type-conversions\" rel=\"nofollow\">reference doc</a>, there are several date &amp; timestamp objects with implicit string conversion to String, but maybe the sql flavors are tripping up the process.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T15:58:00Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -34,6 +34,13 @@ public Long timestamp(Timestamp timestamp) {\n     return null;\n   }\n \n+  public String timestampToString(Timestamp timestamp) {", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyMzU3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402523579", "bodyText": "Mapstruct has a toString override, and it does the wrong thing. Or at least has different behavior than our current converter.", "author": "s-rubenstein", "createdAt": "2020-04-02T18:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNDE2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403234169", "bodyText": "Can you please make a gist of what the generated code does if this method is commented out?", "author": "jaycarlton", "createdAt": "2020-04-03T18:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MTI4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403261289", "bodyText": "cohortReview.setCreationTime( xmlGregorianCalendarToString( dateToXmlGregorianCalendar( dbCohortReview.getCreationTime() ), null ) );\n\nis what happens if I don't write the helper here.", "author": "s-rubenstein", "createdAt": "2020-04-03T19:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NDQ4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403264485", "bodyText": "That may actually work if XmlGregorianCalendar has the requisite precision.", "author": "jaycarlton", "createdAt": "2020-04-03T19:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4MTE5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404181199", "bodyText": "Mainly it is different behavior from what we currently have. I would much rather use the same conversion method than what is already being used in the conversion, and clean up if we think we should later.", "author": "s-rubenstein", "createdAt": "2020-04-06T15:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5NTQwOA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404195408", "bodyText": "Have you established that it's different functional behavior? Or just a different implementation? It would be neat to have a test case that runs through a bunch of timestamps to do the conversions.\nThe main advantage of MapStruct is that it makes the easy things trivial. If we don't trust it here, then it calls into question where we can trust it.", "author": "jaycarlton", "createdAt": "2020-04-06T15:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNDc0MA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404304740", "bodyText": "I have just checked different implementation. I can check functional behavior.", "author": "s-rubenstein", "createdAt": "2020-04-06T18:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4ODQ2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404388461", "bodyText": "It is largely the same, with minor differences:\nGregorian: 2020-03-30T18:31:50.000Z\ntoString: 2020-03-30 18:31:50.0\n\nI think gregorian is probably the right one to use, but should wait for the work on unifying date format.", "author": "s-rubenstein", "createdAt": "2020-04-06T21:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxOTIwMQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404919201", "bodyText": "You're right; that's a functional change. Please put a comment with that difference in.", "author": "jaycarlton", "createdAt": "2020-04-07T15:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "52e27d9d2842e004c5e2380b8cda000a20b13e57", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java b/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\nindex 820865363a..b64d302e85 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\n", "chunk": "@@ -35,6 +35,9 @@ public class CommonMappers {\n   }\n \n   public String timestampToString(Timestamp timestamp) {\n+    // We are using this method because mapstruct defaults to gregorian conversion. The difference is:\n+    // Gregorian: \"2020-03-30T18:31:50.000Z\"\n+    // toString: \"2020-03-30 18:31:50.0\"\n     if (timestamp != null) {\n       return timestamp.toString();\n     }\n", "next_change": {"commit": "9b188cffa7355e05a30ff1fb991459bdd11c723b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java b/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\nindex b64d302e85..332fa93bcd 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java\n", "chunk": "@@ -35,7 +35,8 @@ public class CommonMappers {\n   }\n \n   public String timestampToString(Timestamp timestamp) {\n-    // We are using this method because mapstruct defaults to gregorian conversion. The difference is:\n+    // We are using this method because mapstruct defaults to gregorian conversion. The difference\n+    // is:\n     // Gregorian: \"2020-03-30T18:31:50.000Z\"\n     // toString: \"2020-03-30 18:31:50.0\"\n     if (timestamp != null) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjM1Ng==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402432356", "body": "If it's not too late, could you please split out the rename refactorings into a follow-on PR? It's a bit difficult to follow everything that's happening.", "bodyText": "If it's not too late, could you please split out the rename refactorings into a follow-on PR? It's a bit difficult to follow everything that's happening.", "bodyHTML": "<p dir=\"auto\">If it's not too late, could you please split out the rename refactorings into a follow-on PR? It's a bit difficult to follow everything that's happening.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:07:02Z", "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -167,7 +167,7 @@ public void setDistinctWorkspaceLimit(int limit) {\n \n   /** Gets the list of all resources recently access by user in order of access date time */\n   @Override\n-  public ResponseEntity<RecentResourceResponse> getUserRecentResources() {\n+  public ResponseEntity<WorkspaceResourceResponse> getUserRecentResources() {", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyMDY0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402520642", "bodyText": "Sure. I can try to do that. We will have a bit of a weird in-between state if that's okay?", "author": "s-rubenstein", "createdAt": "2020-04-02T18:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNTQ5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403225497", "bodyText": "Discussed offline: if it's not trivial to do this, it's not worth it.", "author": "jaycarlton", "createdAt": "2020-04-03T18:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjM1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNTU2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402435565", "body": "Since the mapper is a Spring bean itself, you can write a little method to do these mappings using the real DAO. \r\n\r\nWhen I use a mapper, I expect everything that can be mapped to be mapped.", "bodyText": "Since the mapper is a Spring bean itself, you can write a little method to do these mappings using the real DAO.\nWhen I use a mapper, I expect everything that can be mapped to be mapped.", "bodyHTML": "<p dir=\"auto\">Since the mapper is a Spring bean itself, you can write a little method to do these mappings using the real DAO.</p>\n<p dir=\"auto\">When I use a mapper, I expect everything that can be mapped to be mapped.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:11:44Z", "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,29 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyMzE2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402523161", "bodyText": "That is a behavior change from our current mapper, and I actually disagree in this case, because it would require more database lookups. I am okay making it a dataSetLight if we want though. The controller lookup for these objects is something @als364 recommended while we were pairing.", "author": "s-rubenstein", "createdAt": "2020-04-02T18:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNTU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex b89006d113..4013147005 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -15,12 +16,13 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n   @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n   @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n   @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n   @Mapping(target = \"etag\", source = \"version\")\n-  DataSet dbModelToClient(DbDataset dbDataset);\n+  DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n     return DbStorageEnums.prePackagedConceptSetsFromStorage(prePackagedConceptSet);\n", "next_change": {"commit": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex 4013147005..cb86b10f99 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -16,11 +15,20 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n-  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra data\n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n+  // data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n-  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(\n+      target = \"conceptSets\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"cohorts\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"domainValuePairs\",\n+      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n   @Mapping(target = \"etag\", source = \"version\")\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n", "next_change": {"commit": "793c483bdbfc04ffe0de1190650f2527d33d0e70", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex cb86b10f99..e5bc40f5df 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -29,7 +29,7 @@ public interface DataSetMapper {\n   @Mapping(\n       target = \"domainValuePairs\",\n       ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n-  @Mapping(target = \"etag\", source = \"version\")\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex e5bc40f5df..1af0a0321f 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -18,18 +18,14 @@ public interface DataSetMapper {\n   // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n   // data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n-  @Mapping(\n-      target = \"conceptSets\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"cohorts\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"domainValuePairs\",\n-      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"conceptSets\", ignore = true)\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true)\n+  // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"domainValuePairs\", ignore = true)\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  // TODO (RW-4756): Define a DatasetLight type.\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNjcyMA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402436720", "body": "OK. I think what we want then is another target class, such as DatasetLight. A mapper with a target class of `DataSet` should be expected to do whatever it takes to build a fully populated `DataSet`.", "bodyText": "OK. I think what we want then is another target class, such as DatasetLight. A mapper with a target class of DataSet should be expected to do whatever it takes to build a fully populated DataSet.", "bodyHTML": "<p dir=\"auto\">OK. I think what we want then is another target class, such as DatasetLight. A mapper with a target class of <code>DataSet</code> should be expected to do whatever it takes to build a fully populated <code>DataSet</code>.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:13:17Z", "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,29 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex b89006d113..4013147005 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -15,12 +16,13 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n   @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n   @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n   @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n   @Mapping(target = \"etag\", source = \"version\")\n-  DataSet dbModelToClient(DbDataset dbDataset);\n+  DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n     return DbStorageEnums.prePackagedConceptSetsFromStorage(prePackagedConceptSet);\n", "next_change": {"commit": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex 4013147005..cb86b10f99 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -16,11 +15,20 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n-  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra data\n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n+  // data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n-  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(\n+      target = \"conceptSets\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"cohorts\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"domainValuePairs\",\n+      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n   @Mapping(target = \"etag\", source = \"version\")\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n", "next_change": {"commit": "793c483bdbfc04ffe0de1190650f2527d33d0e70", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex cb86b10f99..e5bc40f5df 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -29,7 +29,7 @@ public interface DataSetMapper {\n   @Mapping(\n       target = \"domainValuePairs\",\n       ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n-  @Mapping(target = \"etag\", source = \"version\")\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex e5bc40f5df..1af0a0321f 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -18,18 +18,14 @@ public interface DataSetMapper {\n   // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n   // data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n-  @Mapping(\n-      target = \"conceptSets\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"cohorts\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"domainValuePairs\",\n-      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"conceptSets\", ignore = true)\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true)\n+  // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"domainValuePairs\", ignore = true)\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  // TODO (RW-4756): Define a DatasetLight type.\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNzMzNw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402437337", "body": "You shouldn't need to write this method. You can simply import the appropriate StorageEnums class and MapStruct will scan it to find a method from `Short` to `PrePackagedConceptSetEnum`. ", "bodyText": "You shouldn't need to write this method. You can simply import the appropriate StorageEnums class and MapStruct will scan it to find a method from Short to PrePackagedConceptSetEnum.", "bodyHTML": "<p dir=\"auto\">You shouldn't need to write this method. You can simply import the appropriate StorageEnums class and MapStruct will scan it to find a method from <code>Short</code> to <code>PrePackagedConceptSetEnum</code>.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:14:08Z", "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,29 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"etag\", source = \"version\")\n+  DataSet dbModelToClient(DbDataset dbDataset);\n+\n+  default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex b89006d113..4013147005 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -15,12 +16,13 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n   @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n   @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n   @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n   @Mapping(target = \"etag\", source = \"version\")\n-  DataSet dbModelToClient(DbDataset dbDataset);\n+  DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n     return DbStorageEnums.prePackagedConceptSetsFromStorage(prePackagedConceptSet);\n", "next_change": {"commit": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex 4013147005..cb86b10f99 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -16,11 +15,20 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n-  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra data\n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n+  // data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n-  @Mapping(target = \"conceptSets\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(target = \"cohorts\", ignore = true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(target = \"domainValuePairs\", ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(\n+      target = \"conceptSets\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"cohorts\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"domainValuePairs\",\n+      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n   @Mapping(target = \"etag\", source = \"version\")\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n", "next_change": {"commit": "793c483bdbfc04ffe0de1190650f2527d33d0e70", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex cb86b10f99..e5bc40f5df 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -29,7 +29,7 @@ public interface DataSetMapper {\n   @Mapping(\n       target = \"domainValuePairs\",\n       ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n-  @Mapping(target = \"etag\", source = \"version\")\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex e5bc40f5df..1af0a0321f 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -18,18 +18,14 @@ public interface DataSetMapper {\n   // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n   // data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n-  @Mapping(\n-      target = \"conceptSets\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"cohorts\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"domainValuePairs\",\n-      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"conceptSets\", ignore = true)\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true)\n+  // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"domainValuePairs\", ignore = true)\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  // TODO (RW-4756): Define a DatasetLight type.\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzODcwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402438705", "body": "The introduction of 7 new services at once makes me think perhaps there's an opportunity to define 2-3 high-level intermediate services.\r\n\r\nWe're going to break all of @ericsong's workspace tools again by increasing the argument list, and testing is going to get increasingly hairy.", "bodyText": "The introduction of 7 new services at once makes me think perhaps there's an opportunity to define 2-3 high-level intermediate services.\nWe're going to break all of @ericsong's workspace tools again by increasing the argument list, and testing is going to get increasingly hairy.", "bodyHTML": "<p dir=\"auto\">The introduction of 7 new services at once makes me think perhaps there's an opportunity to define 2-3 high-level intermediate services.</p>\n<p dir=\"auto\">We're going to break all of <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ericsong/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ericsong\">@ericsong</a>'s workspace tools again by increasing the argument list, and testing is going to get increasingly hairy.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:16:17Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -141,6 +161,13 @@ public WorkspacesController(\n       BillingProjectBufferService billingProjectBufferService,\n       WorkspaceService workspaceService,\n       CdrVersionDao cdrVersionDao,\n+      CohortMapper cohortMapper,", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNDEyMg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402524122", "bodyText": "I think that sort of new service should be a new PR. I am incredibly worried about the amount of scope creep happening on this ticket.", "author": "s-rubenstein", "createdAt": "2020-04-02T18:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzODcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzOTA1OA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403239058", "bodyText": "I hear you. I am concerned, though, with the direct dependency creep in this service. One compromise is to check this PR in but keep the ticket open and let it spill over. That keeps you from having to push another developer PR back through the pipeline.\nIt's not scope creep w/r/t the ticket. We just underestimated the implementation time. We target the ticket's functional description and sometimes that involves more work than anticipated if we're to hit our acceptance criteria, which always includes certain principles of good service design. In this case, the main functional goal is speed, and hopefully we can measure that soon after checking this in.\nIf all of these new dependencies are only needed by your new function, then you can make a WorkspaceHydratorService and inject that. It will have only the method you've already got. So it's basically adding one class and pasting the code you have below.", "author": "jaycarlton", "createdAt": "2020-04-03T18:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzODcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1NzIxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403257215", "bodyText": "That works for me. I can try to do that. Are you familiar with how to do that? Is it just create a wrapper service that has getters for each of those things? Or do you have a different picture in your mind?", "author": "s-rubenstein", "createdAt": "2020-04-03T19:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzODcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex be43633756..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -160,14 +154,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n   public WorkspacesController(\n       BillingProjectBufferService billingProjectBufferService,\n       WorkspaceService workspaceService,\n+      CdrSelectorService cdrSelectorService,\n       CdrVersionDao cdrVersionDao,\n-      CohortMapper cohortMapper,\n-      CohortReviewMapper cohortReviewMapper,\n-      CohortReviewService cohortReviewService,\n-      ConceptSetMapper conceptSetMapper,\n-      ConceptSetService conceptSetService,\n-      DataSetDao dataSetDao,\n-      DataSetMapper dataSetMapper,\n       UserDao userDao,\n       Provider<DbUser> userProvider,\n       FireCloudService fireCloudService,\n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -154,7 +144,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n   public WorkspacesController(\n       BillingProjectBufferService billingProjectBufferService,\n       WorkspaceService workspaceService,\n-      CdrSelectorService cdrSelectorService,\n+      WorkspaceResourcesService workspaceResourcesService,\n       CdrVersionDao cdrVersionDao,\n       UserDao userDao,\n       Provider<DbUser> userProvider,\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDY4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402440683", "body": "This could be another (tiny) mapper.", "bodyText": "This could be another (tiny) mapper.", "bodyHTML": "<p dir=\"auto\">This could be another (tiny) mapper.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:19:14Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNDM2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402524367", "bodyText": "Sure, I can do that.", "author": "s-rubenstein", "createdAt": "2020-04-02T18:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex be43633756..18b229a100 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1044,74 +1047,63 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n-  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n-    return new WorkspaceResource()\n-        .workspaceFirecloudName(workspace.getFirecloudName())\n-        .workspaceId(workspace.getWorkspaceId())\n-        .workspaceNamespace(workspace.getWorkspaceNamespace())\n-        .workspaceBillingStatus(workspace.getBillingStatus());\n-  }\n-\n   @Override\n-  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n       String workspaceNamespace, String workspaceId) {\n     // This also enforces registered auth domain.\n-    workspaceService.enforceWorkspaceAccessLevel(\n+    WorkspaceAccessLevel workspaceAccessLevel = workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    DbWorkspace workspace =\n+    final DbWorkspace workspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    Set<DbCohort> cohorts = workspace.getCohorts();\n-    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n-    workspaceResources.addAll(\n+    final Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n+    workspaceResourceResponse.addAll(\n         cohorts.stream()\n             .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .cohort(cohort)\n                         .modifiedTime(cohort.getLastModifiedTime().toString()))\n             .collect(Collectors.toList()));\n-    // TODO: Convert cohorts to resources\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         reviews.stream()\n             .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(cohortReview.getLastModifiedTime().toString())\n                         .cohortReview(cohortReview))\n             .collect(Collectors.toList()));\n-    // TODO convert cohort reviews to resources\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         conceptSets.stream()\n             .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(conceptSet.getLastModifiedTime().toString())\n                         .conceptSet(conceptSet))\n             .collect(Collectors.toList()));\n-    // TODO: Convert concept sets to resources\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClient)\n+            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .dataSet(dataSet)\n                         .modifiedTime(\n                             Optional.ofNullable(dataSet.getLastModifiedTime())\n                                 .map(Object::toString)\n                                 .orElse(null)))\n             .collect(Collectors.toList()));\n-    return ResponseEntity.ok(workspaceResources);\n+    return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n   private <T> T recordOperationTime(Supplier<T> operation, String operationName) {\n", "next_change": {"commit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 18b229a100..a875b36c94 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1060,48 +1056,43 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))\n             .collect(Collectors.toList()));\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n     workspaceResourceResponse.addAll(\n         conceptSets.stream()\n-            .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(conceptSet.getLastModifiedTime().toString())\n-                        .conceptSet(conceptSet))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        conceptSetMapper.dbModelToClient(conceptSet)))\n             .collect(Collectors.toList()));\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n     workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .dataSet(dataSet)\n-                        .modifiedTime(\n-                            Optional.ofNullable(dataSet.getLastModifiedTime())\n-                                .map(Object::toString)\n-                                .orElse(null)))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        dataSetMapper.dbModelToClientLight(dataSet)))\n             .collect(Collectors.toList()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n", "next_change": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTQ0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402441449", "body": "What about `getWorkspaceWithResources`? We try not to refer to UI constructs like individual pages/frames/panes from the backend.", "bodyText": "What about getWorkspaceWithResources? We try not to refer to UI constructs like individual pages/frames/panes from the backend.", "bodyHTML": "<p dir=\"auto\">What about <code>getWorkspaceWithResources</code>? We try not to refer to UI constructs like individual pages/frames/panes from the backend.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:20:25Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNTAzMg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402525032", "bodyText": "It doesn't return a workspace though. Maybe getWorkspaceResources? Except it doesn't return all resources. (There was an hour or so brainstorming in slack, but we couldn't really come up with something I liked. If you have other ideas, I would love to hear them)", "author": "s-rubenstein", "createdAt": "2020-04-02T18:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex be43633756..18b229a100 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1044,74 +1047,63 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n-  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n-    return new WorkspaceResource()\n-        .workspaceFirecloudName(workspace.getFirecloudName())\n-        .workspaceId(workspace.getWorkspaceId())\n-        .workspaceNamespace(workspace.getWorkspaceNamespace())\n-        .workspaceBillingStatus(workspace.getBillingStatus());\n-  }\n-\n   @Override\n-  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n       String workspaceNamespace, String workspaceId) {\n     // This also enforces registered auth domain.\n-    workspaceService.enforceWorkspaceAccessLevel(\n+    WorkspaceAccessLevel workspaceAccessLevel = workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    DbWorkspace workspace =\n+    final DbWorkspace workspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    Set<DbCohort> cohorts = workspace.getCohorts();\n-    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n-    workspaceResources.addAll(\n+    final Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n+    workspaceResourceResponse.addAll(\n         cohorts.stream()\n             .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .cohort(cohort)\n                         .modifiedTime(cohort.getLastModifiedTime().toString()))\n             .collect(Collectors.toList()));\n-    // TODO: Convert cohorts to resources\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         reviews.stream()\n             .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(cohortReview.getLastModifiedTime().toString())\n                         .cohortReview(cohortReview))\n             .collect(Collectors.toList()));\n-    // TODO convert cohort reviews to resources\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         conceptSets.stream()\n             .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(conceptSet.getLastModifiedTime().toString())\n                         .conceptSet(conceptSet))\n             .collect(Collectors.toList()));\n-    // TODO: Convert concept sets to resources\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClient)\n+            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .dataSet(dataSet)\n                         .modifiedTime(\n                             Optional.ofNullable(dataSet.getLastModifiedTime())\n                                 .map(Object::toString)\n                                 .orElse(null)))\n             .collect(Collectors.toList()));\n-    return ResponseEntity.ok(workspaceResources);\n+    return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n   private <T> T recordOperationTime(Supplier<T> operation, String operationName) {\n", "next_change": {"commit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 18b229a100..a875b36c94 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1060,48 +1056,43 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))\n             .collect(Collectors.toList()));\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n     workspaceResourceResponse.addAll(\n         conceptSets.stream()\n-            .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(conceptSet.getLastModifiedTime().toString())\n-                        .conceptSet(conceptSet))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        conceptSetMapper.dbModelToClient(conceptSet)))\n             .collect(Collectors.toList()));\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n     workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .dataSet(dataSet)\n-                        .modifiedTime(\n-                            Optional.ofNullable(dataSet.getLastModifiedTime())\n-                                .map(Object::toString)\n-                                .orElse(null)))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        dataSetMapper.dbModelToClientLight(dataSet)))\n             .collect(Collectors.toList()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n", "next_change": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MjI0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402442247", "body": "Please make this `final`.", "bodyText": "Please make this final.", "bodyHTML": "<p dir=\"auto\">Please make this <code>final</code>.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:21:36Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNTA5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402525093", "bodyText": "Sure. Will do.", "author": "s-rubenstein", "createdAt": "2020-04-02T18:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MjI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex be43633756..18b229a100 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1044,74 +1047,63 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n-  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n-    return new WorkspaceResource()\n-        .workspaceFirecloudName(workspace.getFirecloudName())\n-        .workspaceId(workspace.getWorkspaceId())\n-        .workspaceNamespace(workspace.getWorkspaceNamespace())\n-        .workspaceBillingStatus(workspace.getBillingStatus());\n-  }\n-\n   @Override\n-  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n       String workspaceNamespace, String workspaceId) {\n     // This also enforces registered auth domain.\n-    workspaceService.enforceWorkspaceAccessLevel(\n+    WorkspaceAccessLevel workspaceAccessLevel = workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    DbWorkspace workspace =\n+    final DbWorkspace workspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    Set<DbCohort> cohorts = workspace.getCohorts();\n-    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n-    workspaceResources.addAll(\n+    final Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n+    workspaceResourceResponse.addAll(\n         cohorts.stream()\n             .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .cohort(cohort)\n                         .modifiedTime(cohort.getLastModifiedTime().toString()))\n             .collect(Collectors.toList()));\n-    // TODO: Convert cohorts to resources\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         reviews.stream()\n             .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(cohortReview.getLastModifiedTime().toString())\n                         .cohortReview(cohortReview))\n             .collect(Collectors.toList()));\n-    // TODO convert cohort reviews to resources\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         conceptSets.stream()\n             .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(conceptSet.getLastModifiedTime().toString())\n                         .conceptSet(conceptSet))\n             .collect(Collectors.toList()));\n-    // TODO: Convert concept sets to resources\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClient)\n+            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .dataSet(dataSet)\n                         .modifiedTime(\n                             Optional.ofNullable(dataSet.getLastModifiedTime())\n                                 .map(Object::toString)\n                                 .orElse(null)))\n             .collect(Collectors.toList()));\n-    return ResponseEntity.ok(workspaceResources);\n+    return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n   private <T> T recordOperationTime(Supplier<T> operation, String operationName) {\n", "next_change": {"commit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 18b229a100..a875b36c94 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1060,48 +1056,43 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))\n             .collect(Collectors.toList()));\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n     workspaceResourceResponse.addAll(\n         conceptSets.stream()\n-            .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(conceptSet.getLastModifiedTime().toString())\n-                        .conceptSet(conceptSet))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        conceptSetMapper.dbModelToClient(conceptSet)))\n             .collect(Collectors.toList()));\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n     workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .dataSet(dataSet)\n-                        .modifiedTime(\n-                            Optional.ofNullable(dataSet.getLastModifiedTime())\n-                                .map(Object::toString)\n-                                .orElse(null)))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        dataSetMapper.dbModelToClientLight(dataSet)))\n             .collect(Collectors.toList()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n", "next_change": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NzI4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402447287", "body": "This conversion can live in the ConceptSetMapper as well. We can have a `WorkspaceResource conceptSetToWorkspaceResource(DbConceptSet dbConceptSet, Workspace workspace)`. `WorkspaceMapper` has some examples of this.\r\n\r\nWe can do the same for the dataset, cohort, etc.", "bodyText": "This conversion can live in the ConceptSetMapper as well. We can have a WorkspaceResource conceptSetToWorkspaceResource(DbConceptSet dbConceptSet, Workspace workspace). WorkspaceMapper has some examples of this.\nWe can do the same for the dataset, cohort, etc.", "bodyHTML": "<p dir=\"auto\">This conversion can live in the ConceptSetMapper as well. We can have a <code>WorkspaceResource conceptSetToWorkspaceResource(DbConceptSet dbConceptSet, Workspace workspace)</code>. <code>WorkspaceMapper</code> has some examples of this.</p>\n<p dir=\"auto\">We can do the same for the dataset, cohort, etc.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:29:17Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =\n+        workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n+    Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n+    workspaceResources.addAll(\n+        cohorts.stream()\n+            .map(cohortMapper::dbModelToClient)\n+            .map(\n+                cohort ->\n+                    createWorkspaceResourceFromWorkspace(workspace)\n+                        .cohort(cohort)\n+                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+            .collect(Collectors.toList()));\n+    // TODO: Convert cohorts to resources\n+    List<DbCohortReview> reviews =\n+        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n+    workspaceResources.addAll(\n+        reviews.stream()\n+            .map(cohortReviewMapper::dbModelToClient)\n+            .map(\n+                cohortReview ->\n+                    createWorkspaceResourceFromWorkspace(workspace)\n+                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n+                        .cohortReview(cohortReview))\n+            .collect(Collectors.toList()));\n+    // TODO convert cohort reviews to resources\n+    List<DbConceptSet> conceptSets =\n+        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n+    workspaceResources.addAll(\n+        conceptSets.stream()\n+            .map(conceptSetMapper::dbModelToClient)\n+            .map(\n+                conceptSet ->", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex be43633756..18b229a100 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1044,74 +1047,63 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n-  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n-    return new WorkspaceResource()\n-        .workspaceFirecloudName(workspace.getFirecloudName())\n-        .workspaceId(workspace.getWorkspaceId())\n-        .workspaceNamespace(workspace.getWorkspaceNamespace())\n-        .workspaceBillingStatus(workspace.getBillingStatus());\n-  }\n-\n   @Override\n-  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n       String workspaceNamespace, String workspaceId) {\n     // This also enforces registered auth domain.\n-    workspaceService.enforceWorkspaceAccessLevel(\n+    WorkspaceAccessLevel workspaceAccessLevel = workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    DbWorkspace workspace =\n+    final DbWorkspace workspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    Set<DbCohort> cohorts = workspace.getCohorts();\n-    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n-    workspaceResources.addAll(\n+    final Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n+    workspaceResourceResponse.addAll(\n         cohorts.stream()\n             .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .cohort(cohort)\n                         .modifiedTime(cohort.getLastModifiedTime().toString()))\n             .collect(Collectors.toList()));\n-    // TODO: Convert cohorts to resources\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         reviews.stream()\n             .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(cohortReview.getLastModifiedTime().toString())\n                         .cohortReview(cohortReview))\n             .collect(Collectors.toList()));\n-    // TODO convert cohort reviews to resources\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         conceptSets.stream()\n             .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(conceptSet.getLastModifiedTime().toString())\n                         .conceptSet(conceptSet))\n             .collect(Collectors.toList()));\n-    // TODO: Convert concept sets to resources\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClient)\n+            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .dataSet(dataSet)\n                         .modifiedTime(\n                             Optional.ofNullable(dataSet.getLastModifiedTime())\n                                 .map(Object::toString)\n                                 .orElse(null)))\n             .collect(Collectors.toList()));\n-    return ResponseEntity.ok(workspaceResources);\n+    return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n   private <T> T recordOperationTime(Supplier<T> operation, String operationName) {\n", "next_change": {"commit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 18b229a100..a875b36c94 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1060,48 +1056,43 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))\n             .collect(Collectors.toList()));\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n     workspaceResourceResponse.addAll(\n         conceptSets.stream()\n-            .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(conceptSet.getLastModifiedTime().toString())\n-                        .conceptSet(conceptSet))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        conceptSetMapper.dbModelToClient(conceptSet)))\n             .collect(Collectors.toList()));\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n     workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .dataSet(dataSet)\n-                        .modifiedTime(\n-                            Optional.ofNullable(dataSet.getLastModifiedTime())\n-                                .map(Object::toString)\n-                                .orElse(null)))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        dataSetMapper.dbModelToClientLight(dataSet)))\n             .collect(Collectors.toList()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n", "next_change": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0ODA5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402448095", "body": "Please name this `workspaceResourceResponse`, as it's not a collection.", "bodyText": "Please name this workspaceResourceResponse, as it's not a collection.", "bodyHTML": "<p dir=\"auto\">Please name this <code>workspaceResourceResponse</code>, as it's not a collection.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:30:22Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =\n+        workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n+    Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex be43633756..18b229a100 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1044,74 +1047,63 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n-  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n-    return new WorkspaceResource()\n-        .workspaceFirecloudName(workspace.getFirecloudName())\n-        .workspaceId(workspace.getWorkspaceId())\n-        .workspaceNamespace(workspace.getWorkspaceNamespace())\n-        .workspaceBillingStatus(workspace.getBillingStatus());\n-  }\n-\n   @Override\n-  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n       String workspaceNamespace, String workspaceId) {\n     // This also enforces registered auth domain.\n-    workspaceService.enforceWorkspaceAccessLevel(\n+    WorkspaceAccessLevel workspaceAccessLevel = workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    DbWorkspace workspace =\n+    final DbWorkspace workspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    Set<DbCohort> cohorts = workspace.getCohorts();\n-    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n-    workspaceResources.addAll(\n+    final Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n+    workspaceResourceResponse.addAll(\n         cohorts.stream()\n             .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .cohort(cohort)\n                         .modifiedTime(cohort.getLastModifiedTime().toString()))\n             .collect(Collectors.toList()));\n-    // TODO: Convert cohorts to resources\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         reviews.stream()\n             .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(cohortReview.getLastModifiedTime().toString())\n                         .cohortReview(cohortReview))\n             .collect(Collectors.toList()));\n-    // TODO convert cohort reviews to resources\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         conceptSets.stream()\n             .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(conceptSet.getLastModifiedTime().toString())\n                         .conceptSet(conceptSet))\n             .collect(Collectors.toList()));\n-    // TODO: Convert concept sets to resources\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClient)\n+            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .dataSet(dataSet)\n                         .modifiedTime(\n                             Optional.ofNullable(dataSet.getLastModifiedTime())\n                                 .map(Object::toString)\n                                 .orElse(null)))\n             .collect(Collectors.toList()));\n-    return ResponseEntity.ok(workspaceResources);\n+    return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n   private <T> T recordOperationTime(Supplier<T> operation, String operationName) {\n", "next_change": {"commit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 18b229a100..a875b36c94 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1060,48 +1056,43 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))\n             .collect(Collectors.toList()));\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n     workspaceResourceResponse.addAll(\n         conceptSets.stream()\n-            .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(conceptSet.getLastModifiedTime().toString())\n-                        .conceptSet(conceptSet))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        conceptSetMapper.dbModelToClient(conceptSet)))\n             .collect(Collectors.toList()));\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n     workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .dataSet(dataSet)\n-                        .modifiedTime(\n-                            Optional.ofNullable(dataSet.getLastModifiedTime())\n-                                .map(Object::toString)\n-                                .orElse(null)))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        dataSetMapper.dbModelToClientLight(dataSet)))\n             .collect(Collectors.toList()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n", "next_change": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MjU1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402452555", "body": "We can actually stuff all of the rest of this code into the mappers, since it's just a fetch & hydrate block. There's no real decision-making logic going on here.", "bodyText": "We can actually stuff all of the rest of this code into the mappers, since it's just a fetch & hydrate block. There's no real decision-making logic going on here.", "bodyHTML": "<p dir=\"auto\">We can actually stuff all of the rest of this code into the mappers, since it's just a fetch &amp; hydrate block. There's no real decision-making logic going on here.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:37:09Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =\n+        workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n+    Set<DbCohort> cohorts = workspace.getCohorts();", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex be43633756..18b229a100 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1044,74 +1047,63 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n-  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n-    return new WorkspaceResource()\n-        .workspaceFirecloudName(workspace.getFirecloudName())\n-        .workspaceId(workspace.getWorkspaceId())\n-        .workspaceNamespace(workspace.getWorkspaceNamespace())\n-        .workspaceBillingStatus(workspace.getBillingStatus());\n-  }\n-\n   @Override\n-  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n       String workspaceNamespace, String workspaceId) {\n     // This also enforces registered auth domain.\n-    workspaceService.enforceWorkspaceAccessLevel(\n+    WorkspaceAccessLevel workspaceAccessLevel = workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    DbWorkspace workspace =\n+    final DbWorkspace workspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    Set<DbCohort> cohorts = workspace.getCohorts();\n-    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n-    workspaceResources.addAll(\n+    final Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n+    workspaceResourceResponse.addAll(\n         cohorts.stream()\n             .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .cohort(cohort)\n                         .modifiedTime(cohort.getLastModifiedTime().toString()))\n             .collect(Collectors.toList()));\n-    // TODO: Convert cohorts to resources\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         reviews.stream()\n             .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(cohortReview.getLastModifiedTime().toString())\n                         .cohortReview(cohortReview))\n             .collect(Collectors.toList()));\n-    // TODO convert cohort reviews to resources\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         conceptSets.stream()\n             .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(conceptSet.getLastModifiedTime().toString())\n                         .conceptSet(conceptSet))\n             .collect(Collectors.toList()));\n-    // TODO: Convert concept sets to resources\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClient)\n+            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .dataSet(dataSet)\n                         .modifiedTime(\n                             Optional.ofNullable(dataSet.getLastModifiedTime())\n                                 .map(Object::toString)\n                                 .orElse(null)))\n             .collect(Collectors.toList()));\n-    return ResponseEntity.ok(workspaceResources);\n+    return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n   private <T> T recordOperationTime(Supplier<T> operation, String operationName) {\n", "next_change": {"commit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 18b229a100..a875b36c94 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1060,48 +1056,43 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))\n             .collect(Collectors.toList()));\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n     workspaceResourceResponse.addAll(\n         conceptSets.stream()\n-            .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(conceptSet.getLastModifiedTime().toString())\n-                        .conceptSet(conceptSet))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        conceptSetMapper.dbModelToClient(conceptSet)))\n             .collect(Collectors.toList()));\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n     workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .dataSet(dataSet)\n-                        .modifiedTime(\n-                            Optional.ofNullable(dataSet.getLastModifiedTime())\n-                                .map(Object::toString)\n-                                .orElse(null)))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        dataSetMapper.dbModelToClientLight(dataSet)))\n             .collect(Collectors.toList()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n", "next_change": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzAwNg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402453006", "body": "Can we bite this off all at once? How much does that blow up the ticket?\r\n\r\nI'll be happy to help. I haven't actually written any backend code in like six weeks.", "bodyText": "Can we bite this off all at once? How much does that blow up the ticket?\nI'll be happy to help. I haven't actually written any backend code in like six weeks.", "bodyHTML": "<p dir=\"auto\">Can we bite this off all at once? How much does that blow up the ticket?</p>\n<p dir=\"auto\">I'll be happy to help. I haven't actually written any backend code in like six weeks.</p>", "author": "jaycarlton", "createdAt": "2020-04-02T16:37:48Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1044,76 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n+    return new WorkspaceResource()\n+        .workspaceFirecloudName(workspace.getFirecloudName())\n+        .workspaceId(workspace.getWorkspaceId())\n+        .workspaceNamespace(workspace.getWorkspaceNamespace())\n+        .workspaceBillingStatus(workspace.getBillingStatus());\n+  }\n+\n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.\n+    workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n+\n+    DbWorkspace workspace =\n+        workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n+    Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n+    workspaceResources.addAll(\n+        cohorts.stream()\n+            .map(cohortMapper::dbModelToClient)\n+            .map(\n+                cohort ->\n+                    createWorkspaceResourceFromWorkspace(workspace)\n+                        .cohort(cohort)\n+                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+            .collect(Collectors.toList()));\n+    // TODO: Convert cohorts to resources", "originalCommit": "1015bcab57f80ad44fb2d9c4c26dee47f1c27210", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMDIyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r402510221", "bodyText": "That's a stale todo, this is already done :D", "author": "s-rubenstein", "createdAt": "2020-04-02T18:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex be43633756..18b229a100 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1044,74 +1047,63 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n-  private WorkspaceResource createWorkspaceResourceFromWorkspace(DbWorkspace workspace) {\n-    return new WorkspaceResource()\n-        .workspaceFirecloudName(workspace.getFirecloudName())\n-        .workspaceId(workspace.getWorkspaceId())\n-        .workspaceNamespace(workspace.getWorkspaceNamespace())\n-        .workspaceBillingStatus(workspace.getBillingStatus());\n-  }\n-\n   @Override\n-  public ResponseEntity<WorkspaceResourceResponse> getDataPageItems(\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n       String workspaceNamespace, String workspaceId) {\n     // This also enforces registered auth domain.\n-    workspaceService.enforceWorkspaceAccessLevel(\n+    WorkspaceAccessLevel workspaceAccessLevel = workspaceService.enforceWorkspaceAccessLevel(\n         workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    DbWorkspace workspace =\n+    final DbWorkspace workspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    Set<DbCohort> cohorts = workspace.getCohorts();\n-    WorkspaceResourceResponse workspaceResources = new WorkspaceResourceResponse();\n-    workspaceResources.addAll(\n+    final Set<DbCohort> cohorts = workspace.getCohorts();\n+    WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n+    workspaceResourceResponse.addAll(\n         cohorts.stream()\n             .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .cohort(cohort)\n                         .modifiedTime(cohort.getLastModifiedTime().toString()))\n             .collect(Collectors.toList()));\n-    // TODO: Convert cohorts to resources\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         reviews.stream()\n             .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(cohortReview.getLastModifiedTime().toString())\n                         .cohortReview(cohortReview))\n             .collect(Collectors.toList()));\n-    // TODO convert cohort reviews to resources\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         conceptSets.stream()\n             .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .modifiedTime(conceptSet.getLastModifiedTime().toString())\n                         .conceptSet(conceptSet))\n             .collect(Collectors.toList()));\n-    // TODO: Convert concept sets to resources\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n+    workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClient)\n+            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    createWorkspaceResourceFromWorkspace(workspace)\n+                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n                         .dataSet(dataSet)\n                         .modifiedTime(\n                             Optional.ofNullable(dataSet.getLastModifiedTime())\n                                 .map(Object::toString)\n                                 .orElse(null)))\n             .collect(Collectors.toList()));\n-    return ResponseEntity.ok(workspaceResources);\n+    return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n   private <T> T recordOperationTime(Supplier<T> operation, String operationName) {\n", "next_change": {"commit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 18b229a100..a875b36c94 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1060,48 +1056,43 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))\n             .collect(Collectors.toList()));\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n     workspaceResourceResponse.addAll(\n         conceptSets.stream()\n-            .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(conceptSet.getLastModifiedTime().toString())\n-                        .conceptSet(conceptSet))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        conceptSetMapper.dbModelToClient(conceptSet)))\n             .collect(Collectors.toList()));\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n     workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    workspaceResourceMapper.workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .dataSet(dataSet)\n-                        .modifiedTime(\n-                            Optional.ofNullable(dataSet.getLastModifiedTime())\n-                                .map(Object::toString)\n-                                .orElse(null)))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        dataSetMapper.dbModelToClientLight(dataSet)))\n             .collect(Collectors.toList()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n", "next_change": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"oid": "dbc2e08996166344aca7b418d622e0b8ea3b9543", "url": "https://github.com/all-of-us/workbench/commit/dbc2e08996166344aca7b418d622e0b8ea3b9543", "message": "Fix UI tests", "committedDate": "2020-04-02T18:17:42Z", "type": "commit"}, {"oid": "dd15a2f41ff14760bab18d69ddd54866b65d9485", "url": "https://github.com/all-of-us/workbench/commit/dd15a2f41ff14760bab18d69ddd54866b65d9485", "message": "Fix linting", "committedDate": "2020-04-02T18:33:21Z", "type": "commit"}, {"oid": "882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "url": "https://github.com/all-of-us/workbench/commit/882fac2621696ec7b0031d8b1f8d57cebdc4bfec", "message": "Start addressing PR feedback and try to fix tests", "committedDate": "2020-04-03T15:49:23Z", "type": "commit"}, {"oid": "507031200481ec6c82b5aed503c2d8ad4f21ba87", "url": "https://github.com/all-of-us/workbench/commit/507031200481ec6c82b5aed503c2d8ad4f21ba87", "message": "Fix tests again", "committedDate": "2020-04-03T17:56:24Z", "type": "commit"}, {"oid": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "url": "https://github.com/all-of-us/workbench/commit/c8546ffa02128e89d06e1435c6aac41f7df00d4f", "message": "Fix spotless", "committedDate": "2020-04-03T18:33:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NDk2MA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403244960", "body": "Can you rename the method to indicate this? e.g. `enforceAccessLevelAndAuthDomain()`", "bodyText": "Can you rename the method to indicate this? e.g. enforceAccessLevelAndAuthDomain()", "bodyHTML": "<p dir=\"auto\">Can you rename the method to indicate this? e.g. <code>enforceAccessLevelAndAuthDomain()</code></p>", "author": "jaycarlton", "createdAt": "2020-04-03T18:56:10Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1010,6 +1043,70 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     return ResponseEntity.ok(recentWorkspaceResponse);\n   }\n \n+  @Override\n+  public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n+      String workspaceNamespace, String workspaceId) {\n+    // This also enforces registered auth domain.", "originalCommit": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1NzQ2MA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403257460", "bodyText": "Will do.", "author": "s-rubenstein", "createdAt": "2020-04-03T19:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NDk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "3ff3f97c40400a9beea5cb484a39fb08aaccb6c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 005edeedc8..9b8539bab1 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1046,9 +1046,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n   @Override\n   public ResponseEntity<WorkspaceResourceResponse> getCdrSelectors(\n       String workspaceNamespace, String workspaceId) {\n-    // This also enforces registered auth domain.\n     WorkspaceAccessLevel workspaceAccessLevel =\n-        workspaceService.enforceWorkspaceAccessLevel(\n+        workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n     final DbWorkspace workspace =\n", "next_change": {"commit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 9b8539bab1..a875b36c94 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1056,52 +1056,43 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceMapper\n-                        .workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceMapper\n-                        .workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))\n             .collect(Collectors.toList()));\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n     workspaceResourceResponse.addAll(\n         conceptSets.stream()\n-            .map(conceptSetMapper::dbModelToClient)\n             .map(\n                 conceptSet ->\n-                    workspaceMapper\n-                        .workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(conceptSet.getLastModifiedTime().toString())\n-                        .conceptSet(conceptSet))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        conceptSetMapper.dbModelToClient(conceptSet)))\n             .collect(Collectors.toList()));\n     List<DbDataset> dataSets =\n         dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n     workspaceResourceResponse.addAll(\n         dataSets.stream()\n-            .map(dataSetMapper::dbModelToClientLight)\n             .map(\n                 dataSet ->\n-                    workspaceMapper\n-                        .workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .dataSet(dataSet)\n-                        .modifiedTime(\n-                            Optional.ofNullable(dataSet.getLastModifiedTime())\n-                                .map(Object::toString)\n-                                .orElse(null)))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        dataSetMapper.dbModelToClientLight(dataSet)))\n             .collect(Collectors.toList()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n", "next_change": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTc0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403249745", "body": "You can just say \"Pagination fields are effectively deprecated; see RW-XXXX\". You can file & assign it if it's not already and let them know you needed a ticket #.", "bodyText": "You can just say \"Pagination fields are effectively deprecated; see RW-XXXX\". You can file & assign it if it's not already and let them know you needed a ticket #.", "bodyHTML": "<p dir=\"auto\">You can just say \"Pagination fields are effectively deprecated; see RW-XXXX\". You can file &amp; assign it if it's not already and let them know you needed a ticket #.</p>", "author": "jaycarlton", "createdAt": "2020-04-03T19:02:01Z", "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java", "diffHunk": "@@ -13,12 +13,35 @@\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(target = \"queryResultSize\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"page\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"pageSize\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"sortOrder\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"sortColumn\", ignore = true) // used for pagination, we don't want this on all results\n-  @Mapping(target = \"participantCohortStatuses\", ignore = true) // this fetches all participants, and can be large, we don't want to fetch by default.\n+  @Mapping(", "originalCommit": "c8546ffa02128e89d06e1435c6aac41f7df00d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1OTc3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403259772", "bodyText": "I am checking if there is a ticket for that now.", "author": "s-rubenstein", "createdAt": "2020-04-03T19:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NjcyMw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r403266723", "bodyText": "Filed one https://precisionmedicineinitiative.atlassian.net/browse/RW-4706", "author": "s-rubenstein", "createdAt": "2020-04-03T19:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ff3f97c40400a9beea5cb484a39fb08aaccb6c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex ce8c1e4e17..a648969043 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -13,35 +13,15 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n     uses = {CommonMappers.class})\n public interface CohortReviewMapper {\n   @Mapping(target = \"etag\", source = \"version\")\n-  @Mapping(\n-      target = \"queryResultSize\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"page\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"pageSize\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"sortOrder\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"sortColumn\",\n-      ignore =\n-          true) // used for pagination. Design is in progress that will remove from this object, and\n-  // currently mostly unused\n-  @Mapping(\n-      target = \"participantCohortStatuses\",\n-      ignore = true) // this fetches all participants, and can be large, we don't want to fetch by\n+  // used for pagination. Effectively deprecated, to remove with RW-4706\n+  @Mapping(target = \"queryResultSize\", ignore = true)\n+  @Mapping(target = \"page\", ignore = true)\n+  @Mapping(target = \"pageSize\", ignore = true)\n+  @Mapping(target = \"sortOrder\", ignore = true)\n+  @Mapping(target = \"sortColumn\", ignore = true)\n+  // this fetches all participants, and can be large, we don't want to fetch by\n   // default. May be removed from object pending design\n+  @Mapping(target = \"participantCohortStatuses\", ignore = true)\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n \n   default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex a648969043..5006a1cdad 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -23,8 +22,4 @@ public interface CohortReviewMapper {\n   // default. May be removed from object pending design\n   @Mapping(target = \"participantCohortStatuses\", ignore = true)\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n-\n-  default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n-    return DbStorageEnums.reviewStatusFromStorage(reviewStatus);\n-  }\n }\n", "next_change": null}]}}]}}, {"oid": "3ff3f97c40400a9beea5cb484a39fb08aaccb6c1", "url": "https://github.com/all-of-us/workbench/commit/3ff3f97c40400a9beea5cb484a39fb08aaccb6c1", "message": "PR Feedback", "committedDate": "2020-04-03T19:33:08Z", "type": "commit"}, {"oid": "55ef370767ff4b59936e5f478e303d7efad22044", "url": "https://github.com/all-of-us/workbench/commit/55ef370767ff4b59936e5f478e303d7efad22044", "message": "Fix tests", "committedDate": "2020-04-03T20:12:48Z", "type": "commit"}, {"oid": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "url": "https://github.com/all-of-us/workbench/commit/c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "message": "More PR feedback", "committedDate": "2020-04-06T18:30:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMjgwNg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404302806", "body": "@jaycarlton do you know if there's a way to avoid all this repeated boilerplate? It feels like it should be abstractable. ", "bodyText": "@jaycarlton do you know if there's a way to avoid all this repeated boilerplate? It feels like it should be abstractable.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jaycarlton/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jaycarlton\">@jaycarlton</a> do you know if there's a way to avoid all this repeated boilerplate? It feels like it should be abstractable.</p>", "author": "s-rubenstein", "createdAt": "2020-04-06T18:31:56Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -100,6 +104,67 @@ void mergeResearchPurposeIntoWorkspace(\n   WorkspaceResource workspaceResourceFromDbWorkspace(\n       DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n \n+  @Mapping(target = \"workspaceFirecloudName\", source = \"dbWorkspace.firecloudName\")", "originalCommit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1OTU4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405059585", "bodyText": "When the corresponding fields are named the same in the source and target, it just works.", "author": "jaycarlton", "createdAt": "2020-04-07T19:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMjgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\nindex 2812f48308..6d6cba228e 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n", "chunk": "@@ -104,10 +108,11 @@ public interface WorkspaceMapper {\n   WorkspaceResource workspaceResourceFromDbWorkspace(\n       DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n \n+  @Mapping(target = \"workspaceId\", source = \"dbWorkspace.workspaceId\")\n   @Mapping(target = \"workspaceFirecloudName\", source = \"dbWorkspace.firecloudName\")\n   @Mapping(target = \"workspaceBillingStatus\", source = \"dbWorkspace.billingStatus\")\n   @Mapping(target = \"permission\", source = \"accessLevel\")\n-  @Mapping(target = \"cohort\", source = \"cohort\")\n+  @Mapping(target = \"cohort\", source = \"dbCohort\")\n   // All workspaceResources have one object and all others are null. That should be\n   // defined by a setter where used\n   @Mapping(target = \"cohortReview\", ignore = true)\n", "next_change": {"commit": "52e27d9d2842e004c5e2380b8cda000a20b13e57", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\nindex 6d6cba228e..73ec6d05ce 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n", "chunk": "@@ -121,7 +112,7 @@ public interface WorkspaceMapper {\n   @Mapping(target = \"notebook\", ignore = true)\n   // This should be set when the resource is set\n   @Mapping(target = \"modifiedTime\", source = \"dbCohort.lastModifiedTime\")\n-  WorkspaceResource workspaceResourceFromDbWorkspaceAndDbCohort(\n+  WorkspaceResource dbWorkspaceAndDbCohortToWorkspaceResource(\n       DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel, DbCohort dbCohort);\n \n   @Mapping(target = \"workspaceId\", source = \"dbWorkspace.workspaceId\")\n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\nindex 73ec6d05ce..df1de7df5f 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n", "chunk": "@@ -120,8 +119,7 @@ public interface WorkspaceMapper {\n   @Mapping(target = \"workspaceBillingStatus\", source = \"dbWorkspace.billingStatus\")\n   @Mapping(target = \"permission\", source = \"accessLevel\")\n   @Mapping(target = \"cohortReview\", source = \"dbCohortReview\")\n-  // All workspaceResources have one object and all others are null. That should be\n-  // defined by a setter where used\n+  // All workspaceResources have one object and all others are null.\n   @Mapping(target = \"cohort\", ignore = true)\n   @Mapping(target = \"conceptSet\", ignore = true)\n   @Mapping(target = \"dataSet\", ignore = true)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMzYzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r404303639", "body": "@jaycarlton is there a way to do this in the mapper? Ideally it gets passed a dbModel object, and knows how to do the mapping?", "bodyText": "@jaycarlton is there a way to do this in the mapper? Ideally it gets passed a dbModel object, and knows how to do the mapping?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jaycarlton/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jaycarlton\">@jaycarlton</a> is there a way to do this in the mapper? Ideally it gets passed a dbModel object, and knows how to do the mapping?</p>", "author": "s-rubenstein", "createdAt": "2020-04-06T18:33:19Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -1056,52 +1056,43 @@ static String notebookLockingEmailHash(String bucket, String email) {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         cohorts.stream()\n-            .map(cohortMapper::dbModelToClient)\n             .map(\n                 cohort ->\n-                    workspaceMapper\n-                        .workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .cohort(cohort)\n-                        .modifiedTime(cohort.getLastModifiedTime().toString()))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n+                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n             .collect(Collectors.toList()));\n     List<DbCohortReview> reviews =\n         cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n     workspaceResourceResponse.addAll(\n         reviews.stream()\n-            .map(cohortReviewMapper::dbModelToClient)\n             .map(\n                 cohortReview ->\n-                    workspaceMapper\n-                        .workspaceResourceFromDbWorkspace(workspace, workspaceAccessLevel)\n-                        .modifiedTime(cohortReview.getLastModifiedTime().toString())\n-                        .cohortReview(cohortReview))\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        workspace,\n+                        workspaceAccessLevel,\n+                        cohortReviewMapper.dbModelToClient(cohortReview)))", "originalCommit": "c61e6366c8a3a9d67204ec7915db1dce8968dc0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77501af8fc6371ed1b8489e0675545e565a26204", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex a875b36c94..925d5d6f73 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1050,50 +1033,10 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n             workspaceNamespace, workspaceId, WorkspaceAccessLevel.READER);\n \n-    final DbWorkspace workspace =\n+    final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n-    final Set<DbCohort> cohorts = workspace.getCohorts();\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohort(\n-                        workspace, workspaceAccessLevel, cohortMapper.dbModelToClient(cohort)))\n-            .collect(Collectors.toList()));\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(workspaceNamespace, workspaceId);\n-    workspaceResourceResponse.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        cohortReviewMapper.dbModelToClient(cohortReview)))\n-            .collect(Collectors.toList()));\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(workspace.getWorkspaceId());\n-    workspaceResourceResponse.addAll(\n-        conceptSets.stream()\n-            .map(\n-                conceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        conceptSetMapper.dbModelToClient(conceptSet)))\n-            .collect(Collectors.toList()));\n-    List<DbDataset> dataSets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(workspace.getWorkspaceId(), false);\n-    workspaceResourceResponse.addAll(\n-        dataSets.stream()\n-            .map(\n-                dataSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n-                        workspace,\n-                        workspaceAccessLevel,\n-                        dataSetMapper.dbModelToClientLight(dataSet)))\n-            .collect(Collectors.toList()));\n+    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..f6f8ff2576 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1036,7 +1025,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     final DbWorkspace dbWorkspace =\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n-    workspaceResourceResponse.addAll(cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+    workspaceResourceResponse.addAll(\n+        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1026,7 +1027,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        cdrSelectorService.getCdrSelectorsInWorkspace(dbWorkspace, workspaceAccessLevel));\n+        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 1ecddcfcff..b018ffc427 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1027,7 +1027,8 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n         workspaceService.getRequiredWithCohorts(workspaceNamespace, workspaceId);\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n-        workspaceResourcesService.getWorkspaceResources(dbWorkspace, workspaceAccessLevel, resourceTypes));\n+        workspaceResourcesService.getWorkspaceResources(\n+            dbWorkspace, workspaceAccessLevel, resourceTypes));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex b018ffc427..764fcee8d3 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -1028,7 +1028,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n     WorkspaceResourceResponse workspaceResourceResponse = new WorkspaceResourceResponse();\n     workspaceResourceResponse.addAll(\n         workspaceResourcesService.getWorkspaceResources(\n-            dbWorkspace, workspaceAccessLevel, resourceTypes));\n+            dbWorkspace, workspaceAccessLevel, workspaceResourcesRequest.getTypesToFetch()));\n     return ResponseEntity.ok(workspaceResourceResponse);\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "ff2eaddce0c4f1768a996324f4a86a0837868e48", "url": "https://github.com/all-of-us/workbench/commit/ff2eaddce0c4f1768a996324f4a86a0837868e48", "message": "Wrapper object", "committedDate": "2020-04-07T13:21:53Z", "type": "commit"}, {"oid": "77501af8fc6371ed1b8489e0675545e565a26204", "url": "https://github.com/all-of-us/workbench/commit/77501af8fc6371ed1b8489e0675545e565a26204", "message": "Separate service", "committedDate": "2020-04-07T18:45:50Z", "type": "commit"}, {"oid": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "url": "https://github.com/all-of-us/workbench/commit/e8adab6ce204e9fb06245f7f6ad785b449614bcd", "message": "test fixes", "committedDate": "2020-04-07T20:17:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4Mzk2NA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405083964", "body": "A little comment about what a CDR selector is would help here.\r\n\r\nIs `WorkspaceResource` already in use? If not, maybe we could change it (unless a CDR Selector is a subset of workspace resource).", "bodyText": "A little comment about what a CDR selector is would help here.\nIs WorkspaceResource already in use? If not, maybe we could change it (unless a CDR Selector is a subset of workspace resource).", "bodyHTML": "<p dir=\"auto\">A little comment about what a CDR selector is would help here.</p>\n<p dir=\"auto\">Is <code>WorkspaceResource</code> already in use? If not, maybe we could change it (unless a CDR Selector is a subset of workspace resource).</p>", "author": "jaycarlton", "createdAt": "2020-04-07T20:14:25Z", "path": "api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+\n+import java.util.List;\n+", "originalCommit": "77501af8fc6371ed1b8489e0675545e565a26204", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5ODE0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405098146", "bodyText": "A CDR Selector is a subset of workspace resource.", "author": "s-rubenstein", "createdAt": "2020-04-07T20:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4Mzk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java\nindex 9741752607..9835a3a427 100644\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java\n+++ b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java\n", "chunk": "@@ -1,11 +1,11 @@\n package org.pmiops.workbench.cdrselector;\n \n+import java.util.List;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n import org.pmiops.workbench.model.WorkspaceResource;\n \n-import java.util.List;\n-\n public interface CdrSelectorService {\n-  public List<WorkspaceResource> getCdrSelectorsInWorkspace(DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n+  public List<WorkspaceResource> getCdrSelectorsInWorkspace(\n+      DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n }\n", "next_change": {"commit": "52e27d9d2842e004c5e2380b8cda000a20b13e57", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java\nindex 9835a3a427..c54d934e03 100644\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java\n+++ b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java\n", "chunk": "@@ -5,6 +5,8 @@ import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n import org.pmiops.workbench.model.WorkspaceResource;\n \n+// This is a service for accessing objects that describe selections of CDR information. For\n+// example, datasets and cohorts, both of which define subsets of the CDR.\n public interface CdrSelectorService {\n   public List<WorkspaceResource> getCdrSelectorsInWorkspace(\n       DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java b/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesService.java\nsimilarity index 61%\nrename from api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java\nrename to api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesService.java\nindex c54d934e03..8690b1eb3c 100644\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorService.java\n+++ b/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesService.java\n", "chunk": "@@ -2,12 +2,13 @@ package org.pmiops.workbench.cdrselector;\n \n import java.util.List;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.ResourceType;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n import org.pmiops.workbench.model.WorkspaceResource;\n \n // This is a service for accessing objects that describe selections of CDR information. For\n // example, datasets and cohorts, both of which define subsets of the CDR.\n-public interface CdrSelectorService {\n-  public List<WorkspaceResource> getCdrSelectorsInWorkspace(\n-      DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n+public interface WorkspaceResourcesService {\n+  public List<WorkspaceResource> getWorkspaceResources(\n+      DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel, List<ResourceType> resourceTypes);\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDcwNA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405084704", "body": "Please put a blank line between each category.", "bodyText": "Please put a blank line between each category.", "bodyHTML": "<p dir=\"auto\">Please put a blank line between each category.</p>", "author": "jaycarlton", "createdAt": "2020-04-07T20:15:50Z", "path": "api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import org.pmiops.workbench.cohortreview.CohortReviewService;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+import org.pmiops.workbench.model.WorkspaceResourceResponse;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class CdrSelectorServiceImpl implements CdrSelectorService {\n+  private final CohortReviewService cohortReviewService;\n+  private final ConceptSetService conceptSetService;\n+  private final DataSetDao dataSetDao;\n+  private final WorkspaceMapper workspaceMapper;\n+\n+  @Autowired\n+  public CdrSelectorServiceImpl(\n+      CohortReviewService cohortReviewService,\n+      ConceptSetService conceptSetService,\n+      DataSetDao dataSetDao,\n+      WorkspaceMapper workspaceMapper\n+  ) {\n+    this.cohortReviewService = cohortReviewService;\n+    this.conceptSetService = conceptSetService;\n+    this.dataSetDao = dataSetDao;\n+    this.workspaceMapper = workspaceMapper;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResource> getCdrSelectorsInWorkspace(DbWorkspace dbWorkspace, WorkspaceAccessLevel workspaceAccessLevel) {\n+    List<WorkspaceResource> workspaceResources = new ArrayList<WorkspaceResource>();\n+    final Set<DbCohort> cohorts = dbWorkspace.getCohorts();\n+    workspaceResources.addAll(\n+        cohorts.stream()\n+            .map(\n+                cohort ->\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDbCohort(\n+                        dbWorkspace, workspaceAccessLevel, cohort))\n+            .collect(Collectors.toList()));\n+    List<DbCohortReview> reviews =\n+        cohortReviewService.getRequiredWithCohortReviews(dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+    workspaceResources.addAll(\n+        reviews.stream()\n+            .map(\n+                cohortReview ->\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                        dbWorkspace,\n+                        workspaceAccessLevel,\n+                        cohortReview))\n+            .collect(Collectors.toList()));\n+    List<DbConceptSet> conceptSets =\n+        conceptSetService.findByWorkspaceId(dbWorkspace.getWorkspaceId());\n+    workspaceResources.addAll(\n+        conceptSets.stream()\n+            .map(\n+                dbConceptSet ->\n+                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                        dbWorkspace,\n+                        workspaceAccessLevel,\n+                        dbConceptSet))\n+            .collect(Collectors.toList()));\n+    List<DbDataset> datasets =", "originalCommit": "77501af8fc6371ed1b8489e0675545e565a26204", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\nindex d8ff2afb83..28576a78d5 100644\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\n", "chunk": "@@ -69,9 +66,7 @@ public class CdrSelectorServiceImpl implements CdrSelectorService {\n             .map(\n                 dbConceptSet ->\n                     workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n-                        dbWorkspace,\n-                        workspaceAccessLevel,\n-                        dbConceptSet))\n+                        dbWorkspace, workspaceAccessLevel, dbConceptSet))\n             .collect(Collectors.toList()));\n     List<DbDataset> datasets =\n         dataSetDao.findByWorkspaceIdAndInvalid(dbWorkspace.getWorkspaceId(), false);\n", "next_change": {"commit": "52e27d9d2842e004c5e2380b8cda000a20b13e57", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\nindex 28576a78d5..820d336091 100644\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\n", "chunk": "@@ -56,27 +58,30 @@ public class CdrSelectorServiceImpl implements CdrSelectorService {\n         reviews.stream()\n             .map(\n                 cohortReview ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndCohortReview(\n+                    workspaceMapper.dbWorkspaceAndDbCohortReviewToWorkspaceResource(\n                         dbWorkspace, workspaceAccessLevel, cohortReview))\n             .collect(Collectors.toList()));\n+\n     List<DbConceptSet> conceptSets =\n         conceptSetService.findByWorkspaceId(dbWorkspace.getWorkspaceId());\n     workspaceResources.addAll(\n         conceptSets.stream()\n             .map(\n                 dbConceptSet ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndConceptSet(\n+                    workspaceMapper.dbWorkspaceAndDbConceptSetToWorkspaceResource(\n                         dbWorkspace, workspaceAccessLevel, dbConceptSet))\n             .collect(Collectors.toList()));\n+\n     List<DbDataset> datasets =\n         dataSetDao.findByWorkspaceIdAndInvalid(dbWorkspace.getWorkspaceId(), false);\n     workspaceResources.addAll(\n         datasets.stream()\n             .map(\n                 dbDataset ->\n-                    workspaceMapper.workspaceResourceFromDbWorkspaceAndDataSet(\n+                    workspaceMapper.dbWorkspaceAndDbDatasetToWorkspaceResource(\n                         dbWorkspace, workspaceAccessLevel, dbDataset))\n             .collect(Collectors.toList()));\n+\n     return workspaceResources;\n   }\n }\n", "next_change": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\ndeleted file mode 100644\nindex 820d336091..0000000000\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,87 +0,0 @@\n-package org.pmiops.workbench.cdrselector;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import org.pmiops.workbench.cohortreview.CohortReviewService;\n-import org.pmiops.workbench.conceptset.ConceptSetService;\n-import org.pmiops.workbench.db.dao.DataSetDao;\n-import org.pmiops.workbench.db.model.DbCohort;\n-import org.pmiops.workbench.db.model.DbCohortReview;\n-import org.pmiops.workbench.db.model.DbConceptSet;\n-import org.pmiops.workbench.db.model.DbDataset;\n-import org.pmiops.workbench.db.model.DbWorkspace;\n-import org.pmiops.workbench.model.WorkspaceAccessLevel;\n-import org.pmiops.workbench.model.WorkspaceResource;\n-import org.pmiops.workbench.utils.WorkspaceMapper;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-@Service\n-public class CdrSelectorServiceImpl implements CdrSelectorService {\n-  private final CohortReviewService cohortReviewService;\n-  private final ConceptSetService conceptSetService;\n-  private final DataSetDao dataSetDao;\n-  private final WorkspaceMapper workspaceMapper;\n-\n-  @Autowired\n-  public CdrSelectorServiceImpl(\n-      CohortReviewService cohortReviewService,\n-      ConceptSetService conceptSetService,\n-      DataSetDao dataSetDao,\n-      WorkspaceMapper workspaceMapper) {\n-    this.cohortReviewService = cohortReviewService;\n-    this.conceptSetService = conceptSetService;\n-    this.dataSetDao = dataSetDao;\n-    this.workspaceMapper = workspaceMapper;\n-  }\n-\n-  @Override\n-  public List<WorkspaceResource> getCdrSelectorsInWorkspace(\n-      DbWorkspace dbWorkspace, WorkspaceAccessLevel workspaceAccessLevel) {\n-    List<WorkspaceResource> workspaceResources = new ArrayList<>();\n-\n-    final Set<DbCohort> cohorts = dbWorkspace.getCohorts();\n-    workspaceResources.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.dbWorkspaceAndDbCohortToWorkspaceResource(\n-                        dbWorkspace, workspaceAccessLevel, cohort))\n-            .collect(Collectors.toList()));\n-\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(\n-            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n-    workspaceResources.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.dbWorkspaceAndDbCohortReviewToWorkspaceResource(\n-                        dbWorkspace, workspaceAccessLevel, cohortReview))\n-            .collect(Collectors.toList()));\n-\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(dbWorkspace.getWorkspaceId());\n-    workspaceResources.addAll(\n-        conceptSets.stream()\n-            .map(\n-                dbConceptSet ->\n-                    workspaceMapper.dbWorkspaceAndDbConceptSetToWorkspaceResource(\n-                        dbWorkspace, workspaceAccessLevel, dbConceptSet))\n-            .collect(Collectors.toList()));\n-\n-    List<DbDataset> datasets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(dbWorkspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n-        datasets.stream()\n-            .map(\n-                dbDataset ->\n-                    workspaceMapper.dbWorkspaceAndDbDatasetToWorkspaceResource(\n-                        dbWorkspace, workspaceAccessLevel, dbDataset))\n-            .collect(Collectors.toList()));\n-\n-    return workspaceResources;\n-  }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTE2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405085166", "body": "Please list these one per line like we do in import statements in the test classes.", "bodyText": "Please list these one per line like we do in import statements in the test classes.", "bodyHTML": "<p dir=\"auto\">Please list these one per line like we do in import statements in the test classes.</p>", "author": "jaycarlton", "createdAt": "2020-04-07T20:16:41Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -28,7 +32,7 @@\n @Mapper(\n     componentModel = \"spring\",\n     collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,\n-    uses = {CommonMappers.class})\n+    uses = {CommonMappers.class, CohortMapper.class, CohortReviewMapper.class, ConceptSetMapper.class, DataSetMapper.class})", "originalCommit": "77501af8fc6371ed1b8489e0675545e565a26204", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8adab6ce204e9fb06245f7f6ad785b449614bcd", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\nindex 6d6cba228e..cdfcad6c5c 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n", "chunk": "@@ -32,7 +32,13 @@ import org.pmiops.workbench.utils.mappers.CommonMappers;\n @Mapper(\n     componentModel = \"spring\",\n     collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,\n-    uses = {CommonMappers.class, CohortMapper.class, CohortReviewMapper.class, ConceptSetMapper.class, DataSetMapper.class})\n+    uses = {\n+      CommonMappers.class,\n+      CohortMapper.class,\n+      CohortReviewMapper.class,\n+      ConceptSetMapper.class,\n+      DataSetMapper.class\n+    })\n public interface WorkspaceMapper {\n \n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NjQ1Mw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405086453", "body": "Our emerging naming convention for these appears to be xAndYToZ(), not zFromXAndY().", "bodyText": "Our emerging naming convention for these appears to be xAndYToZ(), not zFromXAndY().", "bodyHTML": "<p dir=\"auto\">Our emerging naming convention for these appears to be xAndYToZ(), not zFromXAndY().</p>", "author": "jaycarlton", "createdAt": "2020-04-07T20:18:57Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -104,66 +108,69 @@ void mergeResearchPurposeIntoWorkspace(\n   WorkspaceResource workspaceResourceFromDbWorkspace(\n       DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel);\n \n+  @Mapping(target = \"workspaceId\", source = \"dbWorkspace.workspaceId\")\n   @Mapping(target = \"workspaceFirecloudName\", source = \"dbWorkspace.firecloudName\")\n   @Mapping(target = \"workspaceBillingStatus\", source = \"dbWorkspace.billingStatus\")\n   @Mapping(target = \"permission\", source = \"accessLevel\")\n-  @Mapping(target = \"cohort\", source = \"cohort\")\n+  @Mapping(target = \"cohort\", source = \"dbCohort\")\n   // All workspaceResources have one object and all others are null. That should be\n   // defined by a setter where used\n   @Mapping(target = \"cohortReview\", ignore = true)\n   @Mapping(target = \"conceptSet\", ignore = true)\n   @Mapping(target = \"dataSet\", ignore = true)\n   @Mapping(target = \"notebook\", ignore = true)\n   // This should be set when the resource is set\n-  @Mapping(target = \"modifiedTime\", source = \"cohort.lastModifiedTime\")\n-  WorkspaceResource workspaceResourceFromDbWorkspaceAndCohort(\n-      DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel, Cohort cohort);\n+  @Mapping(target = \"modifiedTime\", source = \"dbCohort.lastModifiedTime\")\n+  WorkspaceResource workspaceResourceFromDbWorkspaceAndDbCohort(", "originalCommit": "77501af8fc6371ed1b8489e0675545e565a26204", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52e27d9d2842e004c5e2380b8cda000a20b13e57", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\nindex 6d6cba228e..73ec6d05ce 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n", "chunk": "@@ -121,7 +112,7 @@ public interface WorkspaceMapper {\n   @Mapping(target = \"notebook\", ignore = true)\n   // This should be set when the resource is set\n   @Mapping(target = \"modifiedTime\", source = \"dbCohort.lastModifiedTime\")\n-  WorkspaceResource workspaceResourceFromDbWorkspaceAndDbCohort(\n+  WorkspaceResource dbWorkspaceAndDbCohortToWorkspaceResource(\n       DbWorkspace dbWorkspace, WorkspaceAccessLevel accessLevel, DbCohort dbCohort);\n \n   @Mapping(target = \"workspaceId\", source = \"dbWorkspace.workspaceId\")\n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\nindex 73ec6d05ce..df1de7df5f 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n", "chunk": "@@ -120,8 +119,7 @@ public interface WorkspaceMapper {\n   @Mapping(target = \"workspaceBillingStatus\", source = \"dbWorkspace.billingStatus\")\n   @Mapping(target = \"permission\", source = \"accessLevel\")\n   @Mapping(target = \"cohortReview\", source = \"dbCohortReview\")\n-  // All workspaceResources have one object and all others are null. That should be\n-  // defined by a setter where used\n+  // All workspaceResources have one object and all others are null.\n   @Mapping(target = \"cohort\", ignore = true)\n   @Mapping(target = \"conceptSet\", ignore = true)\n   @Mapping(target = \"dataSet\", ignore = true)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NzgxNA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r405087814", "body": "This is much cleaner. Thanks.", "bodyText": "This is much cleaner. Thanks.", "bodyHTML": "<p dir=\"auto\">This is much cleaner. Thanks.</p>", "author": "jaycarlton", "createdAt": "2020-04-07T20:21:26Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -132,16 +133,10 @@\n           .build();\n \n   private final BillingProjectBufferService billingProjectBufferService;\n+  private final CdrSelectorService cdrSelectorService;", "originalCommit": "77501af8fc6371ed1b8489e0675545e565a26204", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex 925d5d6f73..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -133,7 +123,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n           .build();\n \n   private final BillingProjectBufferService billingProjectBufferService;\n-  private final CdrSelectorService cdrSelectorService;\n+  private final WorkspaceResourcesService workspaceResourcesService;\n   private final CdrVersionDao cdrVersionDao;\n   private final Clock clock;\n   private final CloudStorageService cloudStorageService;\n", "next_change": null}]}}, {"oid": "a609b41557f6e82695c3341d3797c0f4fa98f312", "url": "https://github.com/all-of-us/workbench/commit/a609b41557f6e82695c3341d3797c0f4fa98f312", "message": "Attempt to fix tests", "committedDate": "2020-04-07T20:33:01Z", "type": "commit"}, {"oid": "34328bcb555ef940cfc6423ed811e2234df8a306", "url": "https://github.com/all-of-us/workbench/commit/34328bcb555ef940cfc6423ed811e2234df8a306", "message": "Attempt to fix bq tests", "committedDate": "2020-04-07T20:45:53Z", "type": "commit"}, {"oid": "52e27d9d2842e004c5e2380b8cda000a20b13e57", "url": "https://github.com/all-of-us/workbench/commit/52e27d9d2842e004c5e2380b8cda000a20b13e57", "message": "More PR feedback", "committedDate": "2020-04-08T20:37:10Z", "type": "commit"}, {"oid": "5ecdeb48cf95ddc1c9e40bf0f3b1db363bddb9fc", "url": "https://github.com/all-of-us/workbench/commit/5ecdeb48cf95ddc1c9e40bf0f3b1db363bddb9fc", "message": "Attempt to fix BQ tests", "committedDate": "2020-04-08T20:49:34Z", "type": "commit"}, {"oid": "7fb55fd3444a2d3d334485108ab2042b7bb3b452", "url": "https://github.com/all-of-us/workbench/commit/7fb55fd3444a2d3d334485108ab2042b7bb3b452", "message": "Attempt to fix all tests", "committedDate": "2020-04-09T14:22:25Z", "type": "commit"}, {"oid": "9b188cffa7355e05a30ff1fb991459bdd11c723b", "url": "https://github.com/all-of-us/workbench/commit/9b188cffa7355e05a30ff1fb991459bdd11c723b", "message": "Fix linting", "committedDate": "2020-04-09T15:22:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NTQ1Nw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406285457", "body": "Our linter is opinionated about having these on one line. FYI.", "bodyText": "Our linter is opinionated about having these on one line. FYI.", "bodyHTML": "<p dir=\"auto\">Our linter is opinionated about having these on one line. FYI.</p>", "author": "s-rubenstein", "createdAt": "2020-04-09T15:24:32Z", "path": "api/src/test/java/org/pmiops/workbench/utils/mappers/WorkspaceMapperTest.java", "diffHunk": "@@ -63,8 +68,15 @@\n   @Autowired private WorkspaceMapper workspaceMapper;\n \n   @TestConfiguration\n-  @Import({WorkspaceMapperImpl.class, CommonMappers.class})\n-  @MockBean({WorkspaceDao.class})\n+  @Import({\n+    CohortMapperImpl.class,\n+    CohortReviewMapperImpl.class,\n+    CommonMappers.class,\n+    ConceptSetMapperImpl.class,\n+    DataSetMapperImpl.class,\n+    WorkspaceMapperImpl.class,\n+  })\n+  @MockBean({UserDao.class, WorkspaceDao.class})", "originalCommit": "9b188cffa7355e05a30ff1fb991459bdd11c723b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "793c483bdbfc04ffe0de1190650f2527d33d0e70", "url": "https://github.com/all-of-us/workbench/commit/793c483bdbfc04ffe0de1190650f2527d33d0e70", "message": "Add a unit test", "committedDate": "2020-04-09T21:00:27Z", "type": "commit"}, {"oid": "30393d60dea7a257ca7db7ca6f671179ee10b5c6", "url": "https://github.com/all-of-us/workbench/commit/30393d60dea7a257ca7db7ca6f671179ee10b5c6", "message": "Fix tests", "committedDate": "2020-04-10T13:55:52Z", "type": "commit"}, {"oid": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "url": "https://github.com/all-of-us/workbench/commit/7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "message": "Fix linting", "committedDate": "2020-04-10T14:46:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTk2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406915967", "body": "Would be good to capture the discussion around this name somewhere. In my view I think this it's a coincidence of current product requirements that these all happen to relate to CDR selections - for example, in the future it's conceivable we'd allow users to upload their own data files, and we could expect these to show up on the data tab. It may be cleaner to just have a single API for \"workspace resources\" or \"workspace items\" (which we may already have), then use a filter if you only want certain types.\r\n\r\nConceptually the unifying principle around these resources is that they are logically \"contained by\" the workspace.", "bodyText": "Would be good to capture the discussion around this name somewhere. In my view I think this it's a coincidence of current product requirements that these all happen to relate to CDR selections - for example, in the future it's conceivable we'd allow users to upload their own data files, and we could expect these to show up on the data tab. It may be cleaner to just have a single API for \"workspace resources\" or \"workspace items\" (which we may already have), then use a filter if you only want certain types.\nConceptually the unifying principle around these resources is that they are logically \"contained by\" the workspace.", "bodyHTML": "<p dir=\"auto\">Would be good to capture the discussion around this name somewhere. In my view I think this it's a coincidence of current product requirements that these all happen to relate to CDR selections - for example, in the future it's conceivable we'd allow users to upload their own data files, and we could expect these to show up on the data tab. It may be cleaner to just have a single API for \"workspace resources\" or \"workspace items\" (which we may already have), then use a filter if you only want certain types.</p>\n<p dir=\"auto\">Conceptually the unifying principle around these resources is that they are logically \"contained by\" the workspace.</p>", "author": "calbach", "createdAt": "2020-04-10T19:52:33Z", "path": "api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.cohortreview.CohortReviewService;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class CdrSelectorServiceImpl implements CdrSelectorService {\n+  private final CohortReviewService cohortReviewService;\n+  private final ConceptSetService conceptSetService;\n+  private final DataSetDao dataSetDao;\n+  private final WorkspaceMapper workspaceMapper;\n+\n+  @Autowired\n+  public CdrSelectorServiceImpl(\n+      CohortReviewService cohortReviewService,\n+      ConceptSetService conceptSetService,\n+      DataSetDao dataSetDao,\n+      WorkspaceMapper workspaceMapper) {\n+    this.cohortReviewService = cohortReviewService;\n+    this.conceptSetService = conceptSetService;\n+    this.dataSetDao = dataSetDao;\n+    this.workspaceMapper = workspaceMapper;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResource> getCdrSelectorsInWorkspace(", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNjg3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406926872", "bodyText": "Yeah, but if we added sharing of datasets or cohorts across workspaces, we'd need another new name. I.e. these items are workspace-scoped today, but that's not really a defining characteristic.\nSome of this discussion will now doubt be in Scout's forthcoming paper.", "author": "jaycarlton", "createdAt": "2020-04-10T20:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5Mjk1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406992952", "bodyText": "That's not something you can just casually tack on. It would involve such a fundamental redesign of the current model that it's not useful to speculate about how we might name that.\nIn frontend work, there's often a pattern of combining many things that are commonly request together into one endpoint to reduce rendering latency. The common thread connecting these things is that there is a page in the UI that is trying to render all of them at once. I would not overfit to that (alternatively: be transparent about overfitting) or you run the risk of being too inflexible when the product requirements inevitably evolve, e.g.: \"going forward, lets split cohorts out into it's own tab\" or \"lets add notebooks here too\".\nAnyways, that's fine - I'll wait for the document.", "author": "calbach", "createdAt": "2020-04-11T00:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyOTM0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407229346", "bodyText": "Hmmm... Let me actually give that a shot. I think it may be possible to have it take an array of Resource types. I will try to add that. If it is a lot of extra work, it may be worth splitting out until after discussion, but that sounds better. I pushed back against it a while ago, but thinking more, it shouldn't blow up too much scope if I just make the other types unsupported for now.", "author": "s-rubenstein", "createdAt": "2020-04-12T17:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java b/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\ndeleted file mode 100644\nindex 820d336091..0000000000\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/CdrSelectorServiceImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,87 +0,0 @@\n-package org.pmiops.workbench.cdrselector;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import org.pmiops.workbench.cohortreview.CohortReviewService;\n-import org.pmiops.workbench.conceptset.ConceptSetService;\n-import org.pmiops.workbench.db.dao.DataSetDao;\n-import org.pmiops.workbench.db.model.DbCohort;\n-import org.pmiops.workbench.db.model.DbCohortReview;\n-import org.pmiops.workbench.db.model.DbConceptSet;\n-import org.pmiops.workbench.db.model.DbDataset;\n-import org.pmiops.workbench.db.model.DbWorkspace;\n-import org.pmiops.workbench.model.WorkspaceAccessLevel;\n-import org.pmiops.workbench.model.WorkspaceResource;\n-import org.pmiops.workbench.utils.WorkspaceMapper;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-@Service\n-public class CdrSelectorServiceImpl implements CdrSelectorService {\n-  private final CohortReviewService cohortReviewService;\n-  private final ConceptSetService conceptSetService;\n-  private final DataSetDao dataSetDao;\n-  private final WorkspaceMapper workspaceMapper;\n-\n-  @Autowired\n-  public CdrSelectorServiceImpl(\n-      CohortReviewService cohortReviewService,\n-      ConceptSetService conceptSetService,\n-      DataSetDao dataSetDao,\n-      WorkspaceMapper workspaceMapper) {\n-    this.cohortReviewService = cohortReviewService;\n-    this.conceptSetService = conceptSetService;\n-    this.dataSetDao = dataSetDao;\n-    this.workspaceMapper = workspaceMapper;\n-  }\n-\n-  @Override\n-  public List<WorkspaceResource> getCdrSelectorsInWorkspace(\n-      DbWorkspace dbWorkspace, WorkspaceAccessLevel workspaceAccessLevel) {\n-    List<WorkspaceResource> workspaceResources = new ArrayList<>();\n-\n-    final Set<DbCohort> cohorts = dbWorkspace.getCohorts();\n-    workspaceResources.addAll(\n-        cohorts.stream()\n-            .map(\n-                cohort ->\n-                    workspaceMapper.dbWorkspaceAndDbCohortToWorkspaceResource(\n-                        dbWorkspace, workspaceAccessLevel, cohort))\n-            .collect(Collectors.toList()));\n-\n-    List<DbCohortReview> reviews =\n-        cohortReviewService.getRequiredWithCohortReviews(\n-            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n-    workspaceResources.addAll(\n-        reviews.stream()\n-            .map(\n-                cohortReview ->\n-                    workspaceMapper.dbWorkspaceAndDbCohortReviewToWorkspaceResource(\n-                        dbWorkspace, workspaceAccessLevel, cohortReview))\n-            .collect(Collectors.toList()));\n-\n-    List<DbConceptSet> conceptSets =\n-        conceptSetService.findByWorkspaceId(dbWorkspace.getWorkspaceId());\n-    workspaceResources.addAll(\n-        conceptSets.stream()\n-            .map(\n-                dbConceptSet ->\n-                    workspaceMapper.dbWorkspaceAndDbConceptSetToWorkspaceResource(\n-                        dbWorkspace, workspaceAccessLevel, dbConceptSet))\n-            .collect(Collectors.toList()));\n-\n-    List<DbDataset> datasets =\n-        dataSetDao.findByWorkspaceIdAndInvalid(dbWorkspace.getWorkspaceId(), false);\n-    workspaceResources.addAll(\n-        datasets.stream()\n-            .map(\n-                dbDataset ->\n-                    workspaceMapper.dbWorkspaceAndDbDatasetToWorkspaceResource(\n-                        dbWorkspace, workspaceAccessLevel, dbDataset))\n-            .collect(Collectors.toList()));\n-\n-    return workspaceResources;\n-  }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNzkzOA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406837938", "body": "you can do a map to the concept set and then filter on `Objects.nonNull()`", "bodyText": "you can do a map to the concept set and then filter on Objects.nonNull()", "bodyHTML": "<p dir=\"auto\">you can do a map to the concept set and then filter on <code>Objects.nonNull()</code></p>", "author": "jaycarlton", "createdAt": "2020-04-10T16:36:46Z", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3229,19 +3231,31 @@ public void getCdrSelectors() {\n                             new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n             .getBody();\n \n-\n-    WorkspaceResourceResponse workspaceResourceResponse = workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+    WorkspaceResourceResponse workspaceResourceResponse =\n+        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n     assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n-    List<WorkspaceResource> cohorts = workspaceResourceResponse.stream().filter(workspaceResource -> workspaceResource.getCohort() != null).collect(Collectors.toList());\n-    List<WorkspaceResource> cohortReviews = workspaceResourceResponse.stream().filter(workspaceResource -> workspaceResource.getCohortReview() != null).collect(Collectors.toList());\n-    List<WorkspaceResource> conceptSets = workspaceResourceResponse.stream().filter(workspaceResource -> workspaceResource.getConceptSet() != null).collect(Collectors.toList());\n-    List<WorkspaceResource> dataSets = workspaceResourceResponse.stream().filter(workspaceResource -> workspaceResource.getDataSet() != null).collect(Collectors.toList());\n+    List<WorkspaceResource> cohorts =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> cohortReviews =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> conceptSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\nindex 72268d354d..e171be50c9 100644\n--- a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n", "chunk": "@@ -3231,33 +3245,48 @@ public class WorkspacesControllerTest {\n                             new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n             .getBody();\n \n+    WorkspaceResourcesRequest workspaceResourcesRequest = new WorkspaceResourcesRequest();\n+    workspaceResourcesRequest.addAll(\n+        ImmutableList.of(\n+            ResourceType.COHORT,\n+            ResourceType.COHORT_REVIEW,\n+            ResourceType.CONCEPT_SET,\n+            ResourceType.DATASET));\n+\n     WorkspaceResourceResponse workspaceResourceResponse =\n-        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+        workspacesController\n+            .getWorkspaceResources(\n+                workspace.getNamespace(), workspace.getId(), workspaceResourcesRequest)\n+            .getBody();\n     assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n-    List<WorkspaceResource> cohorts =\n+    List<Cohort> cohorts =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .map(WorkspaceResource::getCohort)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> cohortReviews =\n+    List<CohortReview> cohortReviews =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .map(WorkspaceResource::getCohortReview)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> conceptSets =\n+    List<ConceptSet> conceptSets =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)\n+            .map(WorkspaceResource::getConceptSet)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> dataSets =\n+    List<DataSet> dataSets =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getDataSet() != null)\n+            .map(WorkspaceResource::getDataSet)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    assertThat(cohorts.size()).isEqualTo(1);\n-    assertThat(cohorts.get(0).getCohort()).isEqualTo(cohort);\n-    assertThat(cohortReviews.size()).isEqualTo(1);\n-    compareCohortReviewFields(cohortReviews.get(0).getCohortReview(), cohortReview);\n-    assertThat(conceptSets.size()).isEqualTo(1);\n+    assertThat(cohorts).hasSize(1);\n+    assertThat(cohorts.get(0)).isEqualTo(cohort);\n+    assertThat(cohortReviews).hasSize(1);\n+    compareCohortReviewFields(cohortReviews.get(0), cohortReview);\n+    assertThat(conceptSets).hasSize(1);\n     // Ignore arrays in subtables.\n-    assertThat(conceptSets.get(0).getConceptSet()).isEqualTo(conceptSet.concepts(null));\n-    assertThat(dataSets.size()).isEqualTo(1);\n-    compareDatasetMetadata(dataSets.get(0).getDataSet(), dataSet);\n+    assertThat(conceptSets.get(0)).isEqualTo(conceptSet.concepts(null));\n+    assertThat(dataSets).hasSize(1);\n+    compareDatasetMetadata(dataSets.get(0), dataSet);\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzQ4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406927485", "body": "Can you add `DbStorageEnums` to the `uses` directive and see if you get this method call for free? I'm pretty sure it'll pick up public static methods that have the desired signature.", "bodyText": "Can you add DbStorageEnums to the uses directive and see if you get this method call for free? I'm pretty sure it'll pick up public static methods that have the desired signature.", "bodyHTML": "<p dir=\"auto\">Can you add <code>DbStorageEnums</code> to the <code>uses</code> directive and see if you get this method call for free? I'm pretty sure it'll pick up public static methods that have the desired signature.</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:26:21Z", "path": "api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.pmiops.workbench.cohortreview;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.CohortReview;\n+import org.pmiops.workbench.model.ReviewStatus;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {CommonMappers.class})\n+public interface CohortReviewMapper {\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  // used for pagination. Effectively deprecated, to remove with RW-4706\n+  @Mapping(target = \"queryResultSize\", ignore = true)\n+  @Mapping(target = \"page\", ignore = true)\n+  @Mapping(target = \"pageSize\", ignore = true)\n+  @Mapping(target = \"sortOrder\", ignore = true)\n+  @Mapping(target = \"sortColumn\", ignore = true)\n+  // this fetches all participants, and can be large, we don't want to fetch by\n+  // default. May be removed from object pending design\n+  @Mapping(target = \"participantCohortStatuses\", ignore = true)\n+  CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n+\n+  default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n+    return DbStorageEnums.reviewStatusFromStorage(reviewStatus);", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\nindex 40375440de..5006a1cdad 100644\n--- a/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/cohortreview/CohortReviewMapper.java\n", "chunk": "@@ -23,8 +22,4 @@ public interface CohortReviewMapper {\n   // default. May be removed from object pending design\n   @Mapping(target = \"participantCohortStatuses\", ignore = true)\n   CohortReview dbModelToClient(DbCohortReview dbCohortReview);\n-\n-  default ReviewStatus reviewStatusFromStorage(Short reviewStatus) {\n-    return DbStorageEnums.reviewStatusFromStorage(reviewStatus);\n-  }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyODU0MA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406928540", "body": "If you move the comment above the `@Mapping`, it shouldn't have this issue.", "bodyText": "If you move the comment above the @Mapping, it shouldn't have this issue.", "bodyHTML": "<p dir=\"auto\">If you move the comment above the <code>@Mapping</code>, it shouldn't have this issue.</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:29:04Z", "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,39 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n+  // data\n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(\n+      target = \"conceptSets\",\n+      ignore =", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex e5bc40f5df..1af0a0321f 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -18,18 +18,14 @@ public interface DataSetMapper {\n   // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n   // data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n-  @Mapping(\n-      target = \"conceptSets\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"cohorts\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"domainValuePairs\",\n-      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"conceptSets\", ignore = true)\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true)\n+  // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"domainValuePairs\", ignore = true)\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  // TODO (RW-4756): Define a DatasetLight type.\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyOTQzNA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406929434", "body": "I'd put a TODO here to define a new DatasetLight type and potentially have the real dataset extend it.", "bodyText": "I'd put a TODO here to define a new DatasetLight type and potentially have the real dataset extend it.", "bodyHTML": "<p dir=\"auto\">I'd put a TODO here to define a new DatasetLight type and potentially have the real dataset extend it.</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:30:20Z", "path": "api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java", "diffHunk": "@@ -3,14 +3,39 @@\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n     uses = {CommonMappers.class})\n public interface DataSetMapper {\n \n+  // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n+  // data\n+  @Mapping(target = \"id\", source = \"dataSetId\")\n+  @Mapping(\n+      target = \"conceptSets\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"cohorts\",\n+      ignore =\n+          true) // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(\n+      target = \"domainValuePairs\",\n+      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  DataSet dbModelToClientLight(DbDataset dbDataset);", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3NDAzMg==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407474032", "bodyText": "The real dataset is swagger generated, so we can't do direct inheritance, but a parameterized wrapper would be doable. Will add a todo.", "author": "s-rubenstein", "createdAt": "2020-04-13T13:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyOTQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\nindex e5bc40f5df..1af0a0321f 100644\n--- a/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/dataset/DataSetMapper.java\n", "chunk": "@@ -18,18 +18,14 @@ public interface DataSetMapper {\n   // This is a lightweight version of a client mapper that doesn't make any extra db calls for extra\n   // data\n   @Mapping(target = \"id\", source = \"dataSetId\")\n-  @Mapping(\n-      target = \"conceptSets\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"cohorts\",\n-      ignore =\n-          true) // This is stored as a list of ids. Look those up in the controller for entities\n-  @Mapping(\n-      target = \"domainValuePairs\",\n-      ignore = true) // This is stored in a subtable, we may not want to fetch all the time\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"conceptSets\", ignore = true)\n+  // This is stored as a list of ids. Look those up in the controller for entities\n+  @Mapping(target = \"cohorts\", ignore = true)\n+  // This is stored in a subtable, we may not want to fetch all the time\n+  @Mapping(target = \"domainValuePairs\", ignore = true)\n   @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  // TODO (RW-4756): Define a DatasetLight type.\n   DataSet dbModelToClientLight(DbDataset dbDataset);\n \n   default PrePackagedConceptSetEnum prePackagedConceptSetFromStorage(Short prePackagedConceptSet) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMDYyMA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406930620", "body": "What should be defined by a setter?", "bodyText": "What should be defined by a setter?", "bodyHTML": "<p dir=\"auto\">What should be defined by a setter?</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:32:00Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -84,6 +99,70 @@ void mergeResearchPurposeIntoWorkspace(\n   @Mapping(target = \"role\", source = \"acl\")\n   UserRole toApiUserRole(DbUser user, FirecloudWorkspaceAccessEntry acl);\n \n+  @Mapping(target = \"workspaceId\", source = \"dbWorkspace.workspaceId\")\n+  @Mapping(target = \"workspaceFirecloudName\", source = \"dbWorkspace.firecloudName\")\n+  @Mapping(target = \"workspaceBillingStatus\", source = \"dbWorkspace.billingStatus\")\n+  @Mapping(target = \"permission\", source = \"accessLevel\")\n+  @Mapping(target = \"cohort\", source = \"dbCohort\")\n+  // All workspaceResources have one object and all others are null. That should be", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3NjA0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407476043", "bodyText": "That was leftover from a previous commit. Removing", "author": "s-rubenstein", "createdAt": "2020-04-13T13:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMDYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\nindex 73ec6d05ce..df1de7df5f 100644\n--- a/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n+++ b/api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java\n", "chunk": "@@ -104,8 +104,7 @@ public interface WorkspaceMapper {\n   @Mapping(target = \"workspaceBillingStatus\", source = \"dbWorkspace.billingStatus\")\n   @Mapping(target = \"permission\", source = \"accessLevel\")\n   @Mapping(target = \"cohort\", source = \"dbCohort\")\n-  // All workspaceResources have one object and all others are null. That should be\n-  // defined by a setter where used\n+  // All workspaceResources have one object and all others are null.\n   @Mapping(target = \"cohortReview\", ignore = true)\n   @Mapping(target = \"conceptSet\", ignore = true)\n   @Mapping(target = \"dataSet\", ignore = true)\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMTY1OQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406931659", "body": "\ud83d\udc4f I love how this dependency bundling worked out.", "bodyText": "\ud83d\udc4f I love how this dependency bundling worked out.", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"clap\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png\">\ud83d\udc4f</g-emoji> I love how this dependency bundling worked out.</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:34:02Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -140,6 +143,7 @@\n   public WorkspacesController(\n       BillingProjectBufferService billingProjectBufferService,\n       WorkspaceService workspaceService,\n+      CdrSelectorService cdrSelectorService,", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\nindex f6f8ff2576..1ecddcfcff 100644\n--- a/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n+++ b/api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java\n", "chunk": "@@ -143,7 +144,7 @@ public class WorkspacesController implements WorkspacesApiDelegate {\n   public WorkspacesController(\n       BillingProjectBufferService billingProjectBufferService,\n       WorkspaceService workspaceService,\n-      CdrSelectorService cdrSelectorService,\n+      WorkspaceResourcesService workspaceResourcesService,\n       CdrVersionDao cdrVersionDao,\n       UserDao userDao,\n       Provider<DbUser> userProvider,\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzODkzNA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406938934", "body": "nit: there are a few places where the `when().thenReturn()` family doesn't work well. I prefer to use `doReturn().when(object).action` form.", "bodyText": "nit: there are a few places where the when().thenReturn() family doesn't work well. I prefer to use doReturn().when(object).action form.", "bodyHTML": "<p dir=\"auto\">nit: there are a few places where the <code>when().thenReturn()</code> family doesn't work well. I prefer to use <code>doReturn().when(object).action</code> form.</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:51:21Z", "path": "api/src/test/java/org/pmiops/workbench/api/CohortAnnotationDefinitionControllerTest.java", "diffHunk": "@@ -476,7 +476,8 @@ private void setupWorkspaceServiceMock() {\n     mockWorkspace.setFirecloudName(NAME);\n     mockWorkspace.setWorkspaceId(workspace.getWorkspaceId());\n \n-    when(workspaceService.enforceWorkspaceAccessLevel(NAMESPACE, NAME, WorkspaceAccessLevel.WRITER))\n+    when(workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/api/CohortAnnotationDefinitionControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/CohortAnnotationDefinitionControllerTest.java\nindex 194ea803e4..edf9b7323d 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/CohortAnnotationDefinitionControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/CohortAnnotationDefinitionControllerTest.java\n", "chunk": "@@ -476,9 +477,10 @@ public class CohortAnnotationDefinitionControllerTest {\n     mockWorkspace.setFirecloudName(NAME);\n     mockWorkspace.setWorkspaceId(workspace.getWorkspaceId());\n \n-    when(workspaceService.enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n-            NAMESPACE, NAME, WorkspaceAccessLevel.WRITER))\n-        .thenReturn(WorkspaceAccessLevel.OWNER);\n+    doReturn(WorkspaceAccessLevel.OWNER)\n+        .when(workspaceService)\n+        .enforceWorkspaceAccessLevelAndRegisteredAuthDomain(\n+            NAMESPACE, NAME, WorkspaceAccessLevel.WRITER);\n     when(workspaceService.getRequired(NAMESPACE, NAME)).thenReturn(mockWorkspace);\n   }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTIyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406939229", "body": "nit: I don't know why we're interspersing white lines like a candy cane or something in this file.", "bodyText": "nit: I don't know why we're interspersing white lines like a candy cane or something in this file.", "bodyHTML": "<p dir=\"auto\">nit: I don't know why we're interspersing white lines like a candy cane or something in this file.</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:52:16Z", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -193,6 +201,8 @@\n \n   @Autowired CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n \n+  @Autowired CdrSelectorService cdrSelectorService;", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\nindex d2e88038f2..60133d5044 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\n", "chunk": "@@ -201,7 +201,8 @@ public class DataSetControllerTest {\n \n   @Autowired CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n \n-  @Autowired CdrSelectorService cdrSelectorService;\n+  @Autowired\n+  WorkspaceResourcesService workspaceResourcesService;\n \n   @Autowired CdrVersionDao cdrVersionDao;\n \n", "next_change": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java b/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\nindex 60133d5044..f010896cd0 100644\n--- a/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java\n", "chunk": "@@ -196,86 +196,45 @@ public class DataSetControllerTest {\n   private Workspace workspace;\n \n   @Autowired BillingProjectBufferService billingProjectBufferService;\n-\n   @Autowired BigQueryService bigQueryService;\n-\n   @Autowired CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n-\n-  @Autowired\n-  WorkspaceResourcesService workspaceResourcesService;\n-\n+  @Autowired WorkspaceResourcesService workspaceResourcesService;\n   @Autowired CdrVersionDao cdrVersionDao;\n-\n   @Autowired CdrVersionService cdrVersionService;\n-\n   @Autowired CloudStorageService cloudStorageService;\n-\n   @Autowired Provider<Cloudbilling> cloudBillingProvider;\n-\n   @Autowired CohortDao cohortDao;\n-\n   @Autowired CohortFactory cohortFactory;\n-\n   @Autowired CohortMapper cohortMapper;\n-\n   @Autowired CohortMaterializationService cohortMaterializationService;\n-\n   @Autowired CohortReviewDao cohortReviewDao;\n-\n   @Autowired CohortReviewMapper cohortReviewMapper;\n-\n   @Autowired CohortReviewService cohortReviewService;\n-\n   @Autowired ConceptBigQueryService conceptBigQueryService;\n-\n   @Autowired ConceptDao conceptDao;\n-\n   @Autowired ConceptService conceptService;\n-\n   @Autowired ConceptSetService conceptSetService;\n-\n   @Autowired ConceptSetDao conceptSetDao;\n-\n   @Autowired DataDictionaryEntryDao dataDictionaryEntryDao;\n-\n   @Autowired DataSetDao dataSetDao;\n-\n   @Mock DataSetMapper dataSetMapper;\n-\n   @Autowired ConceptSetMapper conceptSetMapper;\n-\n   @Autowired DataSetService dataSetService;\n-\n   @Autowired FireCloudService fireCloudService;\n-\n   @Autowired FreeTierBillingService freeTierBillingService;\n-\n   @Autowired CohortQueryBuilder cohortQueryBuilder;\n-\n   @Autowired TestBigQueryCdrSchemaConfig testBigQueryCdrSchemaConfig;\n-\n   @Autowired UserDao userDao;\n-\n   @Mock Provider<DbUser> userProvider;\n-\n   @Autowired Provider<WorkbenchConfig> workbenchConfigProvider;\n-\n   @Autowired NotebooksService notebooksService;\n-\n   @Autowired UserRecentResourceService userRecentResourceService;\n-\n   @Autowired UserService userService;\n-\n   @Autowired WorkspaceDao workspaceDao;\n-\n   @Autowired WorkspaceService workspaceService;\n-\n   @Autowired WorkspaceAuditor workspaceAuditor;\n-\n   @Autowired WorkspaceMapper workspaceMapper;\n-\n   @Autowired LogsBasedMetricService logsBasedMetricService;\n-\n   @Autowired Provider<Zendesk> mockZendeskProvider;\n   @MockBean MonitoringService mockMonitoringService;\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTUyNw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406939527", "body": "nit: alphabetize concept/common, here and below", "bodyText": "nit: alphabetize concept/common, here and below", "bodyHTML": "<p dir=\"auto\">nit: alphabetize concept/common, here and below</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:53:17Z", "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java", "diffHunk": "@@ -69,7 +73,15 @@\n   private static final String WORKSPACE_NAME = \"name\";\n \n   @TestConfiguration\n-  @Import({WorkspaceAdminController.class, WorkspaceMapperImpl.class, CommonMappers.class})\n+  @Import({\n+    CohortMapperImpl.class,\n+    CohortReviewMapperImpl.class,\n+    ConceptSetMapperImpl.class,", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java b/api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java\nindex 94f42f091a..b047bc016c 100644\n--- a/api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java\n", "chunk": "@@ -76,8 +76,8 @@ public class WorkspaceAdminControllerTest {\n   @Import({\n     CohortMapperImpl.class,\n     CohortReviewMapperImpl.class,\n-    ConceptSetMapperImpl.class,\n     CommonMappers.class,\n+    ConceptSetMapperImpl.class,\n     DataSetMapperImpl.class,\n     WorkspaceAdminController.class,\n     WorkspaceMapperImpl.class,\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDYyNw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406940627", "body": "If there are fields you explicitly don't want to compare, then please list those.\r\n\r\nIf CohortReview doesn't implement `equals()`, I'd say look into adding it there. Truth should format the error message usefully depending on which field is different I think.", "bodyText": "If there are fields you explicitly don't want to compare, then please list those.\nIf CohortReview doesn't implement equals(), I'd say look into adding it there. Truth should format the error message usefully depending on which field is different I think.", "bodyHTML": "<p dir=\"auto\">If there are fields you explicitly don't want to compare, then please list those.</p>\n<p dir=\"auto\">If CohortReview doesn't implement <code>equals()</code>, I'd say look into adding it there. Truth should format the error message usefully depending on which field is different I think.</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:56:32Z", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3145,4 +3162,102 @@ public void copyNotebook_validateActiveBilling() {\n             workspacesController.copyNotebook(\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n+\n+  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MjU5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407482596", "bodyText": "CohortReview is generated so we can't add equals()", "author": "s-rubenstein", "createdAt": "2020-04-13T13:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\nindex 72268d354d..e171be50c9 100644\n--- a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n", "chunk": "@@ -3163,31 +3166,42 @@ public class WorkspacesControllerTest {\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n \n-  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {\n-    assertThat(cohortReview.getCdrVersionId()).isEqualTo(cohortReview2.getCdrVersionId());\n-    assertThat(cohortReview.getCohortDefinition()).isEqualTo(cohortReview2.getCohortDefinition());\n-    assertThat(cohortReview.getCohortId()).isEqualTo(cohortReview2.getCohortId());\n-    assertThat(cohortReview.getCohortName()).isEqualTo(cohortReview2.getCohortName());\n-    assertThat(cohortReview.getCohortReviewId()).isEqualTo(cohortReview2.getCohortReviewId());\n-    assertThat(cohortReview.getCreationTime()).isEqualTo(cohortReview2.getCreationTime());\n-    assertThat(cohortReview.getDescription()).isEqualTo(cohortReview2.getDescription());\n-    assertThat(cohortReview.getMatchedParticipantCount())\n-        .isEqualTo(cohortReview2.getMatchedParticipantCount());\n-  }\n-\n-  private void compareDatasetMetadata(DataSet dataSet, DataSet dataSet2) {\n-    assertThat(dataSet.getDescription()).isEqualTo(dataSet2.getDescription());\n-    assertThat(dataSet.getEtag()).isEqualTo(dataSet2.getEtag());\n-    assertThat(dataSet.getId()).isEqualTo(dataSet2.getId());\n-    assertThat(dataSet.getIncludesAllParticipants())\n-        .isEqualTo(dataSet2.getIncludesAllParticipants());\n-    assertThat(dataSet.getLastModifiedTime()).isEqualTo(dataSet2.getLastModifiedTime());\n-    assertThat(dataSet.getName()).isEqualTo(dataSet2.getName());\n-    assertThat(dataSet.getPrePackagedConceptSet()).isEqualTo(dataSet2.getPrePackagedConceptSet());\n-  }\n-\n-  @Test\n-  public void getCdrSelectors() {\n+  // Does not compare: etag, lastModifiedTime, page, pageSize, participantCohortStatuses,\n+  // queryResultSize, reviewedCount, reviewSize, reviewStatus, sortColumn, sortOrder\n+  private void compareCohortReviewFields(\n+      CohortReview observedCohortReview, CohortReview expectedCohortReview) {\n+    assertThat(observedCohortReview.getCdrVersionId())\n+        .isEqualTo(expectedCohortReview.getCdrVersionId());\n+    assertThat(observedCohortReview.getCohortDefinition())\n+        .isEqualTo(expectedCohortReview.getCohortDefinition());\n+    assertThat(observedCohortReview.getCohortId()).isEqualTo(expectedCohortReview.getCohortId());\n+    assertThat(observedCohortReview.getCohortName())\n+        .isEqualTo(expectedCohortReview.getCohortName());\n+    assertThat(observedCohortReview.getCohortReviewId())\n+        .isEqualTo(expectedCohortReview.getCohortReviewId());\n+    assertThat(observedCohortReview.getCreationTime())\n+        .isEqualTo(expectedCohortReview.getCreationTime());\n+    assertThat(observedCohortReview.getDescription())\n+        .isEqualTo(expectedCohortReview.getDescription());\n+    assertThat(observedCohortReview.getMatchedParticipantCount())\n+        .isEqualTo(expectedCohortReview.getMatchedParticipantCount());\n+  }\n+\n+  private void compareDatasetMetadata(DataSet observedDataSet, DataSet expectedDataSet) {\n+    assertThat(observedDataSet.getDescription()).isEqualTo(expectedDataSet.getDescription());\n+    assertThat(observedDataSet.getEtag()).isEqualTo(expectedDataSet.getEtag());\n+    assertThat(observedDataSet.getId()).isEqualTo(expectedDataSet.getId());\n+    assertThat(observedDataSet.getIncludesAllParticipants())\n+        .isEqualTo(expectedDataSet.getIncludesAllParticipants());\n+    assertThat(observedDataSet.getLastModifiedTime())\n+        .isEqualTo(expectedDataSet.getLastModifiedTime());\n+    assertThat(observedDataSet.getName()).isEqualTo(expectedDataSet.getName());\n+    assertThat(observedDataSet.getPrePackagedConceptSet())\n+        .isEqualTo(expectedDataSet.getPrePackagedConceptSet());\n+  }\n+\n+  @Test\n+  public void getWorkspaceResources() {\n     CdrVersionContext.setCdrVersionNoCheckAuthDomain(cdrVersion);\n     Workspace workspace = workspacesController.createWorkspace(createWorkspace()).getBody();\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MTc4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406941783", "body": "nit: can you name the arguments `observedDataset` and `expectedDataset`? Likewise for your cohort comparison function.\r\n\r\n(There's a story somewhere to change this spelling across the board)", "bodyText": "nit: can you name the arguments observedDataset and expectedDataset? Likewise for your cohort comparison function.\n(There's a story somewhere to change this spelling across the board)", "bodyHTML": "<p dir=\"auto\">nit: can you name the arguments <code>observedDataset</code> and <code>expectedDataset</code>? Likewise for your cohort comparison function.</p>\n<p dir=\"auto\">(There's a story somewhere to change this spelling across the board)</p>", "author": "jaycarlton", "createdAt": "2020-04-10T20:58:52Z", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3145,4 +3162,102 @@ public void copyNotebook_validateActiveBilling() {\n             workspacesController.copyNotebook(\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n+\n+  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {\n+    assertThat(cohortReview.getCdrVersionId()).isEqualTo(cohortReview2.getCdrVersionId());\n+    assertThat(cohortReview.getCohortDefinition()).isEqualTo(cohortReview2.getCohortDefinition());\n+    assertThat(cohortReview.getCohortId()).isEqualTo(cohortReview2.getCohortId());\n+    assertThat(cohortReview.getCohortName()).isEqualTo(cohortReview2.getCohortName());\n+    assertThat(cohortReview.getCohortReviewId()).isEqualTo(cohortReview2.getCohortReviewId());\n+    assertThat(cohortReview.getCreationTime()).isEqualTo(cohortReview2.getCreationTime());\n+    assertThat(cohortReview.getDescription()).isEqualTo(cohortReview2.getDescription());\n+    assertThat(cohortReview.getMatchedParticipantCount())\n+        .isEqualTo(cohortReview2.getMatchedParticipantCount());\n+  }\n+\n+  private void compareDatasetMetadata(DataSet dataSet, DataSet dataSet2) {", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\nindex 72268d354d..e171be50c9 100644\n--- a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n", "chunk": "@@ -3163,31 +3166,42 @@ public class WorkspacesControllerTest {\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n \n-  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {\n-    assertThat(cohortReview.getCdrVersionId()).isEqualTo(cohortReview2.getCdrVersionId());\n-    assertThat(cohortReview.getCohortDefinition()).isEqualTo(cohortReview2.getCohortDefinition());\n-    assertThat(cohortReview.getCohortId()).isEqualTo(cohortReview2.getCohortId());\n-    assertThat(cohortReview.getCohortName()).isEqualTo(cohortReview2.getCohortName());\n-    assertThat(cohortReview.getCohortReviewId()).isEqualTo(cohortReview2.getCohortReviewId());\n-    assertThat(cohortReview.getCreationTime()).isEqualTo(cohortReview2.getCreationTime());\n-    assertThat(cohortReview.getDescription()).isEqualTo(cohortReview2.getDescription());\n-    assertThat(cohortReview.getMatchedParticipantCount())\n-        .isEqualTo(cohortReview2.getMatchedParticipantCount());\n-  }\n-\n-  private void compareDatasetMetadata(DataSet dataSet, DataSet dataSet2) {\n-    assertThat(dataSet.getDescription()).isEqualTo(dataSet2.getDescription());\n-    assertThat(dataSet.getEtag()).isEqualTo(dataSet2.getEtag());\n-    assertThat(dataSet.getId()).isEqualTo(dataSet2.getId());\n-    assertThat(dataSet.getIncludesAllParticipants())\n-        .isEqualTo(dataSet2.getIncludesAllParticipants());\n-    assertThat(dataSet.getLastModifiedTime()).isEqualTo(dataSet2.getLastModifiedTime());\n-    assertThat(dataSet.getName()).isEqualTo(dataSet2.getName());\n-    assertThat(dataSet.getPrePackagedConceptSet()).isEqualTo(dataSet2.getPrePackagedConceptSet());\n-  }\n-\n-  @Test\n-  public void getCdrSelectors() {\n+  // Does not compare: etag, lastModifiedTime, page, pageSize, participantCohortStatuses,\n+  // queryResultSize, reviewedCount, reviewSize, reviewStatus, sortColumn, sortOrder\n+  private void compareCohortReviewFields(\n+      CohortReview observedCohortReview, CohortReview expectedCohortReview) {\n+    assertThat(observedCohortReview.getCdrVersionId())\n+        .isEqualTo(expectedCohortReview.getCdrVersionId());\n+    assertThat(observedCohortReview.getCohortDefinition())\n+        .isEqualTo(expectedCohortReview.getCohortDefinition());\n+    assertThat(observedCohortReview.getCohortId()).isEqualTo(expectedCohortReview.getCohortId());\n+    assertThat(observedCohortReview.getCohortName())\n+        .isEqualTo(expectedCohortReview.getCohortName());\n+    assertThat(observedCohortReview.getCohortReviewId())\n+        .isEqualTo(expectedCohortReview.getCohortReviewId());\n+    assertThat(observedCohortReview.getCreationTime())\n+        .isEqualTo(expectedCohortReview.getCreationTime());\n+    assertThat(observedCohortReview.getDescription())\n+        .isEqualTo(expectedCohortReview.getDescription());\n+    assertThat(observedCohortReview.getMatchedParticipantCount())\n+        .isEqualTo(expectedCohortReview.getMatchedParticipantCount());\n+  }\n+\n+  private void compareDatasetMetadata(DataSet observedDataSet, DataSet expectedDataSet) {\n+    assertThat(observedDataSet.getDescription()).isEqualTo(expectedDataSet.getDescription());\n+    assertThat(observedDataSet.getEtag()).isEqualTo(expectedDataSet.getEtag());\n+    assertThat(observedDataSet.getId()).isEqualTo(expectedDataSet.getId());\n+    assertThat(observedDataSet.getIncludesAllParticipants())\n+        .isEqualTo(expectedDataSet.getIncludesAllParticipants());\n+    assertThat(observedDataSet.getLastModifiedTime())\n+        .isEqualTo(expectedDataSet.getLastModifiedTime());\n+    assertThat(observedDataSet.getName()).isEqualTo(expectedDataSet.getName());\n+    assertThat(observedDataSet.getPrePackagedConceptSet())\n+        .isEqualTo(expectedDataSet.getPrePackagedConceptSet());\n+  }\n+\n+  @Test\n+  public void getWorkspaceResources() {\n     CdrVersionContext.setCdrVersionNoCheckAuthDomain(cdrVersion);\n     Workspace workspace = workspacesController.createWorkspace(createWorkspace()).getBody();\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MjY3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406942675", "body": "can you filter on the type code?", "bodyText": "can you filter on the type code?", "bodyHTML": "<p dir=\"auto\">can you filter on the type code?</p>", "author": "jaycarlton", "createdAt": "2020-04-10T21:00:42Z", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3145,4 +3162,102 @@ public void copyNotebook_validateActiveBilling() {\n             workspacesController.copyNotebook(\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n+\n+  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {\n+    assertThat(cohortReview.getCdrVersionId()).isEqualTo(cohortReview2.getCdrVersionId());\n+    assertThat(cohortReview.getCohortDefinition()).isEqualTo(cohortReview2.getCohortDefinition());\n+    assertThat(cohortReview.getCohortId()).isEqualTo(cohortReview2.getCohortId());\n+    assertThat(cohortReview.getCohortName()).isEqualTo(cohortReview2.getCohortName());\n+    assertThat(cohortReview.getCohortReviewId()).isEqualTo(cohortReview2.getCohortReviewId());\n+    assertThat(cohortReview.getCreationTime()).isEqualTo(cohortReview2.getCreationTime());\n+    assertThat(cohortReview.getDescription()).isEqualTo(cohortReview2.getDescription());\n+    assertThat(cohortReview.getMatchedParticipantCount())\n+        .isEqualTo(cohortReview2.getMatchedParticipantCount());\n+  }\n+\n+  private void compareDatasetMetadata(DataSet dataSet, DataSet dataSet2) {\n+    assertThat(dataSet.getDescription()).isEqualTo(dataSet2.getDescription());\n+    assertThat(dataSet.getEtag()).isEqualTo(dataSet2.getEtag());\n+    assertThat(dataSet.getId()).isEqualTo(dataSet2.getId());\n+    assertThat(dataSet.getIncludesAllParticipants())\n+        .isEqualTo(dataSet2.getIncludesAllParticipants());\n+    assertThat(dataSet.getLastModifiedTime()).isEqualTo(dataSet2.getLastModifiedTime());\n+    assertThat(dataSet.getName()).isEqualTo(dataSet2.getName());\n+    assertThat(dataSet.getPrePackagedConceptSet()).isEqualTo(dataSet2.getPrePackagedConceptSet());\n+  }\n+\n+  @Test\n+  public void getCdrSelectors() {\n+    CdrVersionContext.setCdrVersionNoCheckAuthDomain(cdrVersion);\n+    Workspace workspace = workspacesController.createWorkspace(createWorkspace()).getBody();\n+\n+    Cohort cohort =\n+        cohortsController\n+            .createCohort(\n+                workspace.getNamespace(), workspace.getId(), createDefaultCohort(\"cohort\"))\n+            .getBody();\n+    stubBigQueryCohortCalls();\n+    CohortReview cohortReview =\n+        cohortReviewController\n+            .createCohortReview(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                cohort.getId(),\n+                cdrVersion.getCdrVersionId(),\n+                new CreateReviewRequest().size(1))\n+            .getBody();\n+    ConceptSet conceptSet =\n+        conceptSetsController\n+            .createConceptSet(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                new CreateConceptSetRequest()\n+                    .conceptSet(\n+                        new ConceptSet().name(\"cs1\").description(\"d1\").domain(Domain.CONDITION))\n+                    .addAddedIdsItem(CONCEPT_1.getConceptId()))\n+            .getBody();\n+    DataSet dataSet =\n+        dataSetController\n+            .createDataSet(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                new DataSetRequest()\n+                    .prePackagedConceptSet(PrePackagedConceptSetEnum.NONE)\n+                    .addConceptSetIdsItem(conceptSet.getId())\n+                    .addCohortIdsItem(cohort.getId())\n+                    .name(\"dataset\")\n+                    .domainValuePairs(\n+                        ImmutableList.of(\n+                            new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n+            .getBody();\n+\n+    WorkspaceResourceResponse workspaceResourceResponse =\n+        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+    assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n+    List<WorkspaceResource> cohorts =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> cohortReviews =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> conceptSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> dataSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getDataSet() != null)", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\nindex 72268d354d..e171be50c9 100644\n--- a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n", "chunk": "@@ -3231,33 +3245,48 @@ public class WorkspacesControllerTest {\n                             new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n             .getBody();\n \n+    WorkspaceResourcesRequest workspaceResourcesRequest = new WorkspaceResourcesRequest();\n+    workspaceResourcesRequest.addAll(\n+        ImmutableList.of(\n+            ResourceType.COHORT,\n+            ResourceType.COHORT_REVIEW,\n+            ResourceType.CONCEPT_SET,\n+            ResourceType.DATASET));\n+\n     WorkspaceResourceResponse workspaceResourceResponse =\n-        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+        workspacesController\n+            .getWorkspaceResources(\n+                workspace.getNamespace(), workspace.getId(), workspaceResourcesRequest)\n+            .getBody();\n     assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n-    List<WorkspaceResource> cohorts =\n+    List<Cohort> cohorts =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .map(WorkspaceResource::getCohort)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> cohortReviews =\n+    List<CohortReview> cohortReviews =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .map(WorkspaceResource::getCohortReview)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> conceptSets =\n+    List<ConceptSet> conceptSets =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)\n+            .map(WorkspaceResource::getConceptSet)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> dataSets =\n+    List<DataSet> dataSets =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getDataSet() != null)\n+            .map(WorkspaceResource::getDataSet)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    assertThat(cohorts.size()).isEqualTo(1);\n-    assertThat(cohorts.get(0).getCohort()).isEqualTo(cohort);\n-    assertThat(cohortReviews.size()).isEqualTo(1);\n-    compareCohortReviewFields(cohortReviews.get(0).getCohortReview(), cohortReview);\n-    assertThat(conceptSets.size()).isEqualTo(1);\n+    assertThat(cohorts).hasSize(1);\n+    assertThat(cohorts.get(0)).isEqualTo(cohort);\n+    assertThat(cohortReviews).hasSize(1);\n+    compareCohortReviewFields(cohortReviews.get(0), cohortReview);\n+    assertThat(conceptSets).hasSize(1);\n     // Ignore arrays in subtables.\n-    assertThat(conceptSets.get(0).getConceptSet()).isEqualTo(conceptSet.concepts(null));\n-    assertThat(dataSets.size()).isEqualTo(1);\n-    compareDatasetMetadata(dataSets.get(0).getDataSet(), dataSet);\n+    assertThat(conceptSets.get(0)).isEqualTo(conceptSet.concepts(null));\n+    assertThat(dataSets).hasSize(1);\n+    compareDatasetMetadata(dataSets.get(0), dataSet);\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MjgxOA==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r406942818", "body": "please use `assertThat(conceptSets).hasSize(1);` here and wherever you're checking a collection's size", "bodyText": "please use assertThat(conceptSets).hasSize(1); here and wherever you're checking a collection's size", "bodyHTML": "<p dir=\"auto\">please use <code>assertThat(conceptSets).hasSize(1);</code> here and wherever you're checking a collection's size</p>", "author": "jaycarlton", "createdAt": "2020-04-10T21:01:12Z", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -3145,4 +3162,102 @@ public void copyNotebook_validateActiveBilling() {\n             workspacesController.copyNotebook(\n                 workspace.getNamespace(), workspace.getId(), \"z\", copyNotebookRequest));\n   }\n+\n+  private void compareCohortReviewFields(CohortReview cohortReview, CohortReview cohortReview2) {\n+    assertThat(cohortReview.getCdrVersionId()).isEqualTo(cohortReview2.getCdrVersionId());\n+    assertThat(cohortReview.getCohortDefinition()).isEqualTo(cohortReview2.getCohortDefinition());\n+    assertThat(cohortReview.getCohortId()).isEqualTo(cohortReview2.getCohortId());\n+    assertThat(cohortReview.getCohortName()).isEqualTo(cohortReview2.getCohortName());\n+    assertThat(cohortReview.getCohortReviewId()).isEqualTo(cohortReview2.getCohortReviewId());\n+    assertThat(cohortReview.getCreationTime()).isEqualTo(cohortReview2.getCreationTime());\n+    assertThat(cohortReview.getDescription()).isEqualTo(cohortReview2.getDescription());\n+    assertThat(cohortReview.getMatchedParticipantCount())\n+        .isEqualTo(cohortReview2.getMatchedParticipantCount());\n+  }\n+\n+  private void compareDatasetMetadata(DataSet dataSet, DataSet dataSet2) {\n+    assertThat(dataSet.getDescription()).isEqualTo(dataSet2.getDescription());\n+    assertThat(dataSet.getEtag()).isEqualTo(dataSet2.getEtag());\n+    assertThat(dataSet.getId()).isEqualTo(dataSet2.getId());\n+    assertThat(dataSet.getIncludesAllParticipants())\n+        .isEqualTo(dataSet2.getIncludesAllParticipants());\n+    assertThat(dataSet.getLastModifiedTime()).isEqualTo(dataSet2.getLastModifiedTime());\n+    assertThat(dataSet.getName()).isEqualTo(dataSet2.getName());\n+    assertThat(dataSet.getPrePackagedConceptSet()).isEqualTo(dataSet2.getPrePackagedConceptSet());\n+  }\n+\n+  @Test\n+  public void getCdrSelectors() {\n+    CdrVersionContext.setCdrVersionNoCheckAuthDomain(cdrVersion);\n+    Workspace workspace = workspacesController.createWorkspace(createWorkspace()).getBody();\n+\n+    Cohort cohort =\n+        cohortsController\n+            .createCohort(\n+                workspace.getNamespace(), workspace.getId(), createDefaultCohort(\"cohort\"))\n+            .getBody();\n+    stubBigQueryCohortCalls();\n+    CohortReview cohortReview =\n+        cohortReviewController\n+            .createCohortReview(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                cohort.getId(),\n+                cdrVersion.getCdrVersionId(),\n+                new CreateReviewRequest().size(1))\n+            .getBody();\n+    ConceptSet conceptSet =\n+        conceptSetsController\n+            .createConceptSet(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                new CreateConceptSetRequest()\n+                    .conceptSet(\n+                        new ConceptSet().name(\"cs1\").description(\"d1\").domain(Domain.CONDITION))\n+                    .addAddedIdsItem(CONCEPT_1.getConceptId()))\n+            .getBody();\n+    DataSet dataSet =\n+        dataSetController\n+            .createDataSet(\n+                workspace.getNamespace(),\n+                workspace.getId(),\n+                new DataSetRequest()\n+                    .prePackagedConceptSet(PrePackagedConceptSetEnum.NONE)\n+                    .addConceptSetIdsItem(conceptSet.getId())\n+                    .addCohortIdsItem(cohort.getId())\n+                    .name(\"dataset\")\n+                    .domainValuePairs(\n+                        ImmutableList.of(\n+                            new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n+            .getBody();\n+\n+    WorkspaceResourceResponse workspaceResourceResponse =\n+        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+    assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n+    List<WorkspaceResource> cohorts =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> cohortReviews =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> conceptSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)\n+            .collect(Collectors.toList());\n+    List<WorkspaceResource> dataSets =\n+        workspaceResourceResponse.stream()\n+            .filter(workspaceResource -> workspaceResource.getDataSet() != null)\n+            .collect(Collectors.toList());\n+    assertThat(cohorts.size()).isEqualTo(1);\n+    assertThat(cohorts.get(0).getCohort()).isEqualTo(cohort);\n+    assertThat(cohortReviews.size()).isEqualTo(1);\n+    compareCohortReviewFields(cohortReviews.get(0).getCohortReview(), cohortReview);\n+    assertThat(conceptSets.size()).isEqualTo(1);", "originalCommit": "7bc82c33c700e06be9d677f8b2ce0d8de73cdef2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\nindex 72268d354d..e171be50c9 100644\n--- a/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n+++ b/api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java\n", "chunk": "@@ -3231,33 +3245,48 @@ public class WorkspacesControllerTest {\n                             new DomainValuePair().value(\"VALUE\").domain(Domain.CONDITION))))\n             .getBody();\n \n+    WorkspaceResourcesRequest workspaceResourcesRequest = new WorkspaceResourcesRequest();\n+    workspaceResourcesRequest.addAll(\n+        ImmutableList.of(\n+            ResourceType.COHORT,\n+            ResourceType.COHORT_REVIEW,\n+            ResourceType.CONCEPT_SET,\n+            ResourceType.DATASET));\n+\n     WorkspaceResourceResponse workspaceResourceResponse =\n-        workspacesController.getCdrSelectors(workspace.getNamespace(), workspace.getId()).getBody();\n+        workspacesController\n+            .getWorkspaceResources(\n+                workspace.getNamespace(), workspace.getId(), workspaceResourcesRequest)\n+            .getBody();\n     assertThat(workspaceResourceResponse.size()).isEqualTo(4);\n-    List<WorkspaceResource> cohorts =\n+    List<Cohort> cohorts =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getCohort() != null)\n+            .map(WorkspaceResource::getCohort)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> cohortReviews =\n+    List<CohortReview> cohortReviews =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getCohortReview() != null)\n+            .map(WorkspaceResource::getCohortReview)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> conceptSets =\n+    List<ConceptSet> conceptSets =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getConceptSet() != null)\n+            .map(WorkspaceResource::getConceptSet)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    List<WorkspaceResource> dataSets =\n+    List<DataSet> dataSets =\n         workspaceResourceResponse.stream()\n-            .filter(workspaceResource -> workspaceResource.getDataSet() != null)\n+            .map(WorkspaceResource::getDataSet)\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n-    assertThat(cohorts.size()).isEqualTo(1);\n-    assertThat(cohorts.get(0).getCohort()).isEqualTo(cohort);\n-    assertThat(cohortReviews.size()).isEqualTo(1);\n-    compareCohortReviewFields(cohortReviews.get(0).getCohortReview(), cohortReview);\n-    assertThat(conceptSets.size()).isEqualTo(1);\n+    assertThat(cohorts).hasSize(1);\n+    assertThat(cohorts.get(0)).isEqualTo(cohort);\n+    assertThat(cohortReviews).hasSize(1);\n+    compareCohortReviewFields(cohortReviews.get(0), cohortReview);\n+    assertThat(conceptSets).hasSize(1);\n     // Ignore arrays in subtables.\n-    assertThat(conceptSets.get(0).getConceptSet()).isEqualTo(conceptSet.concepts(null));\n-    assertThat(dataSets.size()).isEqualTo(1);\n-    compareDatasetMetadata(dataSets.get(0).getDataSet(), dataSet);\n+    assertThat(conceptSets.get(0)).isEqualTo(conceptSet.concepts(null));\n+    assertThat(dataSets).hasSize(1);\n+    compareDatasetMetadata(dataSets.get(0), dataSet);\n   }\n }\n", "next_change": null}]}}, {"oid": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "url": "https://github.com/all-of-us/workbench/commit/7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "message": "Make take resource types as input", "committedDate": "2020-04-12T18:35:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MjM1Ng==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407482356", "body": "This statement is brittle, since we could add other resource types later and they might not get added here. If you really want to validate these things, I'd do a SUPPORTED_RESOURCE_TYPES.containsAll(resourceTypes) at the top.\r\n\r\nBut what might be the bigger flag here is that this endpoint only supports a subset of the enum values in `ResourceType`. I think it wold be simpler if you had a `WorkspaceResourceType` and supported all of those. Then you'd never be able to  have this error (by definition). It's not that you can't filter only a hard-coded subset of enum values, but it just leads to edge cases you need to keep up with and test.", "bodyText": "This statement is brittle, since we could add other resource types later and they might not get added here. If you really want to validate these things, I'd do a SUPPORTED_RESOURCE_TYPES.containsAll(resourceTypes) at the top.\nBut what might be the bigger flag here is that this endpoint only supports a subset of the enum values in ResourceType. I think it wold be simpler if you had a WorkspaceResourceType and supported all of those. Then you'd never be able to  have this error (by definition). It's not that you can't filter only a hard-coded subset of enum values, but it just leads to edge cases you need to keep up with and test.", "bodyHTML": "<p dir=\"auto\">This statement is brittle, since we could add other resource types later and they might not get added here. If you really want to validate these things, I'd do a SUPPORTED_RESOURCE_TYPES.containsAll(resourceTypes) at the top.</p>\n<p dir=\"auto\">But what might be the bigger flag here is that this endpoint only supports a subset of the enum values in <code>ResourceType</code>. I think it wold be simpler if you had a <code>WorkspaceResourceType</code> and supported all of those. Then you'd never be able to  have this error (by definition). It's not that you can't filter only a hard-coded subset of enum values, but it just leads to edge cases you need to keep up with and test.</p>", "author": "jaycarlton", "createdAt": "2020-04-13T13:38:55Z", "path": "api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.cdrselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.cohortreview.CohortReviewService;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbCohortReview;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.BadRequestException;\n+import org.pmiops.workbench.exceptions.ServerErrorException;\n+import org.pmiops.workbench.model.ResourceType;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResource;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class WorkspaceResourcesServiceImpl implements WorkspaceResourcesService {\n+  private final CohortReviewService cohortReviewService;\n+  private final ConceptSetService conceptSetService;\n+  private final DataSetDao dataSetDao;\n+  private final WorkspaceMapper workspaceMapper;\n+\n+  @Autowired\n+  public WorkspaceResourcesServiceImpl(\n+      CohortReviewService cohortReviewService,\n+      ConceptSetService conceptSetService,\n+      DataSetDao dataSetDao,\n+      WorkspaceMapper workspaceMapper) {\n+    this.cohortReviewService = cohortReviewService;\n+    this.conceptSetService = conceptSetService;\n+    this.dataSetDao = dataSetDao;\n+    this.workspaceMapper = workspaceMapper;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResource> getWorkspaceResources(\n+      DbWorkspace dbWorkspace, WorkspaceAccessLevel workspaceAccessLevel, List<ResourceType> resourceTypes) {\n+    if (resourceTypes.size() == 0) {\n+      throw new BadRequestException(\"Must provide at least one resource type\");\n+    }\n+\n+    List<WorkspaceResource> workspaceResources = new ArrayList<>();\n+\n+    if (resourceTypes.contains(ResourceType.COHORT)) {\n+      final Set<DbCohort> cohorts = dbWorkspace.getCohorts();\n+      workspaceResources.addAll(\n+          cohorts.stream()\n+              .map(\n+                  cohort ->\n+                      workspaceMapper.dbWorkspaceAndDbCohortToWorkspaceResource(\n+                          dbWorkspace, workspaceAccessLevel, cohort))\n+              .collect(Collectors.toList()));\n+    }\n+    if (resourceTypes.contains(ResourceType.COHORT_REVIEW)) {\n+      List<DbCohortReview> reviews =\n+          cohortReviewService.getRequiredWithCohortReviews(\n+              dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n+      workspaceResources.addAll(\n+          reviews.stream()\n+              .map(\n+                  cohortReview ->\n+                      workspaceMapper.dbWorkspaceAndDbCohortReviewToWorkspaceResource(\n+                          dbWorkspace, workspaceAccessLevel, cohortReview))\n+              .collect(Collectors.toList()));\n+    }\n+    if (resourceTypes.contains(ResourceType.CONCEPT_SET)) {\n+      List<DbConceptSet> conceptSets =\n+          conceptSetService.findByWorkspaceId(dbWorkspace.getWorkspaceId());\n+      workspaceResources.addAll(\n+          conceptSets.stream()\n+              .map(\n+                  dbConceptSet ->\n+                      workspaceMapper.dbWorkspaceAndDbConceptSetToWorkspaceResource(\n+                          dbWorkspace, workspaceAccessLevel, dbConceptSet))\n+              .collect(Collectors.toList()));\n+    }\n+    if (resourceTypes.contains(ResourceType.DATASET)) {\n+      List<DbDataset> datasets =\n+          dataSetDao.findByWorkspaceIdAndInvalid(dbWorkspace.getWorkspaceId(), false);\n+      workspaceResources.addAll(\n+          datasets.stream()\n+              .map(\n+                  dbDataset ->\n+                      workspaceMapper.dbWorkspaceAndDbDatasetToWorkspaceResource(\n+                          dbWorkspace, workspaceAccessLevel, dbDataset))\n+              .collect(Collectors.toList()));\n+    }\n+    if (resourceTypes.contains(ResourceType.COHORT_SEARCH_GROUP) || resourceTypes.contains(ResourceType.COHORT_SEARCH_ITEM) || resourceTypes.contains((ResourceType.NOTEBOOK)) || resourceTypes.contains((ResourceType.WORKSPACE))) {", "originalCommit": "7c1b72a2aea4d4807b6ae4c03b16a25a205cb7c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5ODk1MQ==", "url": "https://github.com/all-of-us/workbench/pull/3333#discussion_r407498951", "bodyText": "I think we will want to add the other resource types eventually. (I don't know some of them, @freemabd1 might know better)\nBut I will move to the SUPPORTED_RESOURCE_TYPES model. I think a list of supported types is probably better than a list of unsupported types.", "author": "s-rubenstein", "createdAt": "2020-04-13T14:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MjM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java b/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\nindex d045800897..d0dd39b6df 100644\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\n", "chunk": "@@ -93,8 +95,12 @@ public class WorkspaceResourcesServiceImpl implements WorkspaceResourcesService\n                           dbWorkspace, workspaceAccessLevel, dbDataset))\n               .collect(Collectors.toList()));\n     }\n-    if (resourceTypes.contains(ResourceType.COHORT_SEARCH_GROUP) || resourceTypes.contains(ResourceType.COHORT_SEARCH_ITEM) || resourceTypes.contains((ResourceType.NOTEBOOK)) || resourceTypes.contains((ResourceType.WORKSPACE))) {\n-      throw new ServerErrorException(\"Only supported resource types are Cohorts, Cohort Reviews, Concept Sets, and Datasets\");\n+    if (resourceTypes.contains(ResourceType.COHORT_SEARCH_GROUP)\n+        || resourceTypes.contains(ResourceType.COHORT_SEARCH_ITEM)\n+        || resourceTypes.contains((ResourceType.NOTEBOOK))\n+        || resourceTypes.contains((ResourceType.WORKSPACE))) {\n+      throw new ServerErrorException(\n+          \"Only supported resource types are Cohorts, Cohort Reviews, Concept Sets, and Datasets\");\n     }\n     return workspaceResources;\n   }\n", "next_change": {"commit": "459c082d5e94a12d0eb2654775f792bdff2cf884", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java b/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\nindex d0dd39b6df..8c34a4fc48 100644\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\n", "chunk": "@@ -95,10 +98,7 @@ public class WorkspaceResourcesServiceImpl implements WorkspaceResourcesService\n                           dbWorkspace, workspaceAccessLevel, dbDataset))\n               .collect(Collectors.toList()));\n     }\n-    if (resourceTypes.contains(ResourceType.COHORT_SEARCH_GROUP)\n-        || resourceTypes.contains(ResourceType.COHORT_SEARCH_ITEM)\n-        || resourceTypes.contains((ResourceType.NOTEBOOK))\n-        || resourceTypes.contains((ResourceType.WORKSPACE))) {\n+    if (resourceTypes.stream().filter(resourceType -> !supportedTypes.contains(resourceType)).collect(Collectors.toList()).size() > 0) {\n       throw new ServerErrorException(\n           \"Only supported resource types are Cohorts, Cohort Reviews, Concept Sets, and Datasets\");\n     }\n", "next_change": {"commit": "1e6f8d9c7bfedbc64f74abb4b4839b27aa717c2c", "changed_code": [{"header": "diff --git a/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java b/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\nindex 8c34a4fc48..d8a41bc580 100644\n--- a/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\n+++ b/api/src/main/java/org/pmiops/workbench/cdrselector/WorkspaceResourcesServiceImpl.java\n", "chunk": "@@ -98,7 +102,11 @@ public class WorkspaceResourcesServiceImpl implements WorkspaceResourcesService\n                           dbWorkspace, workspaceAccessLevel, dbDataset))\n               .collect(Collectors.toList()));\n     }\n-    if (resourceTypes.stream().filter(resourceType -> !supportedTypes.contains(resourceType)).collect(Collectors.toList()).size() > 0) {\n+    if (resourceTypes.stream()\n+            .filter(resourceType -> !supportedTypes.contains(resourceType))\n+            .collect(Collectors.toList())\n+            .size()\n+        > 0) {\n       throw new ServerErrorException(\n           \"Only supported resource types are Cohorts, Cohort Reviews, Concept Sets, and Datasets\");\n     }\n", "next_change": null}]}}]}}]}}, {"oid": "c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "url": "https://github.com/all-of-us/workbench/commit/c6961cd916366fd07bf4e0cf6e487f8c0f7e39d5", "message": "PR feedback", "committedDate": "2020-04-13T13:54:30Z", "type": "commit"}, {"oid": "c76bca43b522d26bf622984623fb02149d9e0039", "url": "https://github.com/all-of-us/workbench/commit/c76bca43b522d26bf622984623fb02149d9e0039", "message": "Add comment", "committedDate": "2020-04-13T13:56:01Z", "type": "commit"}, {"oid": "459c082d5e94a12d0eb2654775f792bdff2cf884", "url": "https://github.com/all-of-us/workbench/commit/459c082d5e94a12d0eb2654775f792bdff2cf884", "message": "More PR feedback", "committedDate": "2020-04-13T14:26:03Z", "type": "commit"}, {"oid": "2d1652584c69ce1cfac671b1d6532ba2b3165dcb", "url": "https://github.com/all-of-us/workbench/commit/2d1652584c69ce1cfac671b1d6532ba2b3165dcb", "message": "Fix UI test", "committedDate": "2020-04-13T14:40:06Z", "type": "commit"}, {"oid": "1e6f8d9c7bfedbc64f74abb4b4839b27aa717c2c", "url": "https://github.com/all-of-us/workbench/commit/1e6f8d9c7bfedbc64f74abb4b4839b27aa717c2c", "message": "Fix linting", "committedDate": "2020-04-13T15:01:59Z", "type": "commit"}]}