{"pr_number": 1121, "pr_title": "Fix queryByRaft readIndex failed", "pr_author": "Linary", "pr_createdAt": "2020-07-29T14:28:10Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1121", "timeline": [{"oid": "176005976453a77f619f20cc14588fd6cb0a2750", "url": "https://github.com/hugegraph/hugegraph/commit/176005976453a77f619f20cc14588fd6cb0a2750", "message": "Fix queryByRaft readIndex failed\n\nReadIndex request rejected because leader has not committed any log entry at its term\n\nChange-Id: I6f5c6fd3770da732caf0c6acd41f0441aa4acb55", "committedDate": "2020-07-29T14:21:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMDY2Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462720666", "body": "rename StoreClosure closure to future", "bodyText": "rename StoreClosure closure to future", "bodyHTML": "<p dir=\"auto\">rename StoreClosure closure to future</p>", "author": "javeme", "createdAt": "2020-07-30T04:00:47Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -229,12 +237,25 @@ public void run(Status status, long index, byte[] reqCtx) {\n                             query, status));\n                 }\n             }\n-        });\n-        try {\n-            return closure.waitFinished();\n-        } catch (Throwable t) {\n-            throw new BackendException(\"Failed to query\", t);\n+        };\n+        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n+            this.node().node().readIndex(BytesUtil.EMPTY_BYTES,\n+                                         readIndexClosure);\n+            try {\n+                return closure.waitFinished();", "originalCommit": "176005976453a77f619f20cc14588fd6cb0a2750", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MDU4MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462860580", "bodyText": "other place used closure", "author": "Linary", "createdAt": "2020-07-30T09:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMDY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "87e6ab658de8ac7b93bfdc098068069ca1a692ed", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex b09b09a6..5bc3129d 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -238,24 +231,31 @@ public class RaftBackendStore implements BackendStore {\n                 }\n             }\n         };\n+        int retryInterval = raftNode.heartbeatInterval();\n+        String error = null;\n         for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n-            this.node().node().readIndex(BytesUtil.EMPTY_BYTES,\n-                                         readIndexClosure);\n+            raftNode.node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n             try {\n                 return closure.waitFinished();\n-            } catch (RaftException e) {\n-                try {\n-                    Thread.sleep(RaftSharedContext.QUERY_RETRY_INTERVAL);\n-                } catch (InterruptedException ex) {\n-                    throw new BackendException(\"Try to sleep a while for \" +\n-                                               \"querying is interrupted\");\n-                }\n             } catch (Throwable t) {\n-                throw new BackendException(\"Failed to execute query\", t);\n+                error = t.getMessage();\n+                if (closure.status().getRaftError() == RaftError.EAGAIN) {\n+                    LOG.warn(\"Failed to execute query {} because of leader \" +\n+                             \"has not committed any log entry at its term\",\n+                             query);\n+                    try {\n+                        Thread.sleep(retryInterval);\n+                    } catch (InterruptedException ex) {\n+                        throw new BackendException(\"Try to sleep a while for \" +\n+                                                   \"querying is interrupted\");\n+                    }\n+                } else {\n+                    throw new BackendException(\"Failed to execute query\", t);\n+                }\n             }\n         }\n-        throw new BackendException(\"Failed to query in the case of %s \" +\n-                                   \"retries times\");\n+        throw new BackendException(\"Retried '%s' times with error: %s\",\n+                                   RaftSharedContext.QUERY_RETRY_TIMES, error);\n     }\n \n     private static class MutationBatch {\n", "next_change": {"commit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 5bc3129d..2deb6c68 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -231,31 +236,12 @@ public class RaftBackendStore implements BackendStore {\n                 }\n             }\n         };\n-        int retryInterval = raftNode.heartbeatInterval();\n-        String error = null;\n-        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n-            raftNode.node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n-            try {\n-                return closure.waitFinished();\n-            } catch (Throwable t) {\n-                error = t.getMessage();\n-                if (closure.status().getRaftError() == RaftError.EAGAIN) {\n-                    LOG.warn(\"Failed to execute query {} because of leader \" +\n-                             \"has not committed any log entry at its term\",\n-                             query);\n-                    try {\n-                        Thread.sleep(retryInterval);\n-                    } catch (InterruptedException ex) {\n-                        throw new BackendException(\"Try to sleep a while for \" +\n-                                                   \"querying is interrupted\");\n-                    }\n-                } else {\n-                    throw new BackendException(\"Failed to execute query\", t);\n-                }\n-            }\n+        this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n+        try {\n+            return closure.waitFinished();\n+        } catch (Throwable t) {\n+            throw new BackendException(\"Failed to execute query\", t);\n         }\n-        throw new BackendException(\"Retried '%s' times with error: %s\",\n-                                   RaftSharedContext.QUERY_RETRY_TIMES, error);\n     }\n \n     private static class MutationBatch {\n", "next_change": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 2deb6c68..78c60c0e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -240,6 +238,8 @@ public class RaftBackendStore implements BackendStore {\n         try {\n             return closure.waitFinished();\n         } catch (Throwable t) {\n+            LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n+                     query, closure.status());\n             throw new BackendException(\"Failed to execute query\", t);\n         }\n     }\n", "next_change": {"commit": "338ca00aaa899173329c5d54e46ca61289374338", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 78c60c0e..4094a2bb 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -221,25 +221,25 @@ public class RaftBackendStore implements BackendStore {\n         }\n \n         StoreCommand command = new StoreCommand(StoreAction.QUERY);\n-        StoreClosure closure = new StoreClosure(command);\n+        StoreClosure future = new StoreClosure(command);\n         ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n             @Override\n             public void run(Status status, long index, byte[] reqCtx) {\n                 if (status.isOk()) {\n-                    closure.complete(status, () -> func.apply(query));\n+                    future.complete(status, () -> func.apply(query));\n                 } else {\n-                    closure.failure(status, new BackendException(\n-                            \"Failed to execute query '%s' with 'ReadIndex': %s\",\n-                            query, status));\n+                    future.failure(status, new BackendException(\n+                           \"Failed to execute query '%s' with read-index: %s\",\n+                           query, status));\n                 }\n             }\n         };\n         this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n         try {\n-            return closure.waitFinished();\n+            return future.waitFinished();\n         } catch (Throwable t) {\n-            LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n-                     query, closure.status());\n+            LOG.warn(\"Failed to execute query {} with read-index: {}\",\n+                     query, future.status());\n             throw new BackendException(\"Failed to execute query\", t);\n         }\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMTYxOA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462721618", "body": "move to \"status.getRaftError() == RaftError.EAGAIN\" block to line 247, just throw exception in else block", "bodyText": "move to \"status.getRaftError() == RaftError.EAGAIN\" block to line 247, just throw exception in else block", "bodyHTML": "<p dir=\"auto\">move to \"status.getRaftError() == RaftError.EAGAIN\" block to line 247, just throw exception in else block</p>", "author": "javeme", "createdAt": "2020-07-30T04:04:43Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -215,12 +216,19 @@ private Object queryByRaft(Query query, Function<Object, Object> func) {\n         this.node().waitLeaderElected();\n         StoreCommand command = new StoreCommand(StoreAction.QUERY);\n         StoreClosure closure = new StoreClosure(command);\n-        RaftNode raftNode = this.node();\n-        raftNode.node().readIndex(BytesUtil.EMPTY_BYTES, new ReadIndexClosure() {\n+        ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n             @Override\n             public void run(Status status, long index, byte[] reqCtx) {\n                 if (status.isOk()) {\n                     closure.complete(status, () -> func.apply(query));\n+                } else if (status.getRaftError() == RaftError.EAGAIN) {\n+                    LOG.warn(\"Failed to execute query {} because of leader \" +\n+                             \"has not committed any log entry at its term\",\n+                             query);\n+                    closure.failure(status, new RaftException(\n+                            \"Failed to execute query '%s' because of leader \" +\n+                            \"has not committed any log entry at its term\",", "originalCommit": "176005976453a77f619f20cc14588fd6cb0a2750", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87e6ab658de8ac7b93bfdc098068069ca1a692ed", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex b09b09a6..5bc3129d 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -221,14 +222,6 @@ public class RaftBackendStore implements BackendStore {\n             public void run(Status status, long index, byte[] reqCtx) {\n                 if (status.isOk()) {\n                     closure.complete(status, () -> func.apply(query));\n-                } else if (status.getRaftError() == RaftError.EAGAIN) {\n-                    LOG.warn(\"Failed to execute query {} because of leader \" +\n-                             \"has not committed any log entry at its term\",\n-                             query);\n-                    closure.failure(status, new RaftException(\n-                            \"Failed to execute query '%s' because of leader \" +\n-                            \"has not committed any log entry at its term\",\n-                            query));\n                 } else {\n                     LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n                              query, status);\n", "next_change": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 5bc3129d..78c60c0e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -223,39 +228,20 @@ public class RaftBackendStore implements BackendStore {\n                 if (status.isOk()) {\n                     closure.complete(status, () -> func.apply(query));\n                 } else {\n-                    LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n-                             query, status);\n                     closure.failure(status, new BackendException(\n                             \"Failed to execute query '%s' with 'ReadIndex': %s\",\n                             query, status));\n                 }\n             }\n         };\n-        int retryInterval = raftNode.heartbeatInterval();\n-        String error = null;\n-        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n-            raftNode.node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n-            try {\n-                return closure.waitFinished();\n-            } catch (Throwable t) {\n-                error = t.getMessage();\n-                if (closure.status().getRaftError() == RaftError.EAGAIN) {\n-                    LOG.warn(\"Failed to execute query {} because of leader \" +\n-                             \"has not committed any log entry at its term\",\n-                             query);\n-                    try {\n-                        Thread.sleep(retryInterval);\n-                    } catch (InterruptedException ex) {\n-                        throw new BackendException(\"Try to sleep a while for \" +\n-                                                   \"querying is interrupted\");\n-                    }\n-                } else {\n-                    throw new BackendException(\"Failed to execute query\", t);\n-                }\n-            }\n+        this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n+        try {\n+            return closure.waitFinished();\n+        } catch (Throwable t) {\n+            LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n+                     query, closure.status());\n+            throw new BackendException(\"Failed to execute query\", t);\n         }\n-        throw new BackendException(\"Retried '%s' times with error: %s\",\n-                                   RaftSharedContext.QUERY_RETRY_TIMES, error);\n     }\n \n     private static class MutationBatch {\n", "next_change": {"commit": "338ca00aaa899173329c5d54e46ca61289374338", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 78c60c0e..4094a2bb 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -221,25 +221,25 @@ public class RaftBackendStore implements BackendStore {\n         }\n \n         StoreCommand command = new StoreCommand(StoreAction.QUERY);\n-        StoreClosure closure = new StoreClosure(command);\n+        StoreClosure future = new StoreClosure(command);\n         ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n             @Override\n             public void run(Status status, long index, byte[] reqCtx) {\n                 if (status.isOk()) {\n-                    closure.complete(status, () -> func.apply(query));\n+                    future.complete(status, () -> func.apply(query));\n                 } else {\n-                    closure.failure(status, new BackendException(\n-                            \"Failed to execute query '%s' with 'ReadIndex': %s\",\n-                            query, status));\n+                    future.failure(status, new BackendException(\n+                           \"Failed to execute query '%s' with read-index: %s\",\n+                           query, status));\n                 }\n             }\n         };\n         this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n         try {\n-            return closure.waitFinished();\n+            return future.waitFinished();\n         } catch (Throwable t) {\n-            LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n-                     query, closure.status());\n+            LOG.warn(\"Failed to execute query {} with read-index: {}\",\n+                     query, future.status());\n             throw new BackendException(\"Failed to execute query\", t);\n         }\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMjE2MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462722160", "body": "collect last error message like \"retries times with error: %s\"", "bodyText": "collect last error message like \"retries times with error: %s\"", "bodyHTML": "<p dir=\"auto\">collect last error message like \"retries times with error: %s\"</p>", "author": "javeme", "createdAt": "2020-07-30T04:06:51Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -229,12 +237,25 @@ public void run(Status status, long index, byte[] reqCtx) {\n                             query, status));\n                 }\n             }\n-        });\n-        try {\n-            return closure.waitFinished();\n-        } catch (Throwable t) {\n-            throw new BackendException(\"Failed to query\", t);\n+        };\n+        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n+            this.node().node().readIndex(BytesUtil.EMPTY_BYTES,\n+                                         readIndexClosure);\n+            try {\n+                return closure.waitFinished();\n+            } catch (RaftException e) {\n+                try {\n+                    Thread.sleep(RaftSharedContext.QUERY_RETRY_INTERVAL);\n+                } catch (InterruptedException ex) {\n+                    throw new BackendException(\"Try to sleep a while for \" +\n+                                               \"querying is interrupted\");\n+                }\n+            } catch (Throwable t) {\n+                throw new BackendException(\"Failed to execute query\", t);\n+            }\n         }\n+        throw new BackendException(\"Failed to query in the case of %s \" +\n+                                   \"retries times\");", "originalCommit": "176005976453a77f619f20cc14588fd6cb0a2750", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87e6ab658de8ac7b93bfdc098068069ca1a692ed", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex b09b09a6..5bc3129d 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -238,24 +231,31 @@ public class RaftBackendStore implements BackendStore {\n                 }\n             }\n         };\n+        int retryInterval = raftNode.heartbeatInterval();\n+        String error = null;\n         for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n-            this.node().node().readIndex(BytesUtil.EMPTY_BYTES,\n-                                         readIndexClosure);\n+            raftNode.node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n             try {\n                 return closure.waitFinished();\n-            } catch (RaftException e) {\n-                try {\n-                    Thread.sleep(RaftSharedContext.QUERY_RETRY_INTERVAL);\n-                } catch (InterruptedException ex) {\n-                    throw new BackendException(\"Try to sleep a while for \" +\n-                                               \"querying is interrupted\");\n-                }\n             } catch (Throwable t) {\n-                throw new BackendException(\"Failed to execute query\", t);\n+                error = t.getMessage();\n+                if (closure.status().getRaftError() == RaftError.EAGAIN) {\n+                    LOG.warn(\"Failed to execute query {} because of leader \" +\n+                             \"has not committed any log entry at its term\",\n+                             query);\n+                    try {\n+                        Thread.sleep(retryInterval);\n+                    } catch (InterruptedException ex) {\n+                        throw new BackendException(\"Try to sleep a while for \" +\n+                                                   \"querying is interrupted\");\n+                    }\n+                } else {\n+                    throw new BackendException(\"Failed to execute query\", t);\n+                }\n             }\n         }\n-        throw new BackendException(\"Failed to query in the case of %s \" +\n-                                   \"retries times\");\n+        throw new BackendException(\"Retried '%s' times with error: %s\",\n+                                   RaftSharedContext.QUERY_RETRY_TIMES, error);\n     }\n \n     private static class MutationBatch {\n", "next_change": {"commit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 5bc3129d..2deb6c68 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -231,31 +236,12 @@ public class RaftBackendStore implements BackendStore {\n                 }\n             }\n         };\n-        int retryInterval = raftNode.heartbeatInterval();\n-        String error = null;\n-        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n-            raftNode.node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n-            try {\n-                return closure.waitFinished();\n-            } catch (Throwable t) {\n-                error = t.getMessage();\n-                if (closure.status().getRaftError() == RaftError.EAGAIN) {\n-                    LOG.warn(\"Failed to execute query {} because of leader \" +\n-                             \"has not committed any log entry at its term\",\n-                             query);\n-                    try {\n-                        Thread.sleep(retryInterval);\n-                    } catch (InterruptedException ex) {\n-                        throw new BackendException(\"Try to sleep a while for \" +\n-                                                   \"querying is interrupted\");\n-                    }\n-                } else {\n-                    throw new BackendException(\"Failed to execute query\", t);\n-                }\n-            }\n+        this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n+        try {\n+            return closure.waitFinished();\n+        } catch (Throwable t) {\n+            throw new BackendException(\"Failed to execute query\", t);\n         }\n-        throw new BackendException(\"Retried '%s' times with error: %s\",\n-                                   RaftSharedContext.QUERY_RETRY_TIMES, error);\n     }\n \n     private static class MutationBatch {\n", "next_change": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 2deb6c68..78c60c0e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -240,6 +238,8 @@ public class RaftBackendStore implements BackendStore {\n         try {\n             return closure.waitFinished();\n         } catch (Throwable t) {\n+            LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n+                     query, closure.status());\n             throw new BackendException(\"Failed to execute query\", t);\n         }\n     }\n", "next_change": {"commit": "338ca00aaa899173329c5d54e46ca61289374338", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 78c60c0e..4094a2bb 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -221,25 +221,25 @@ public class RaftBackendStore implements BackendStore {\n         }\n \n         StoreCommand command = new StoreCommand(StoreAction.QUERY);\n-        StoreClosure closure = new StoreClosure(command);\n+        StoreClosure future = new StoreClosure(command);\n         ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n             @Override\n             public void run(Status status, long index, byte[] reqCtx) {\n                 if (status.isOk()) {\n-                    closure.complete(status, () -> func.apply(query));\n+                    future.complete(status, () -> func.apply(query));\n                 } else {\n-                    closure.failure(status, new BackendException(\n-                            \"Failed to execute query '%s' with 'ReadIndex': %s\",\n-                            query, status));\n+                    future.failure(status, new BackendException(\n+                           \"Failed to execute query '%s' with read-index: %s\",\n+                           query, status));\n                 }\n             }\n         };\n         this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n         try {\n-            return closure.waitFinished();\n+            return future.waitFinished();\n         } catch (Throwable t) {\n-            LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n-                     query, closure.status());\n+            LOG.warn(\"Failed to execute query {} with read-index: {}\",\n+                     query, future.status());\n             throw new BackendException(\"Failed to execute query\", t);\n         }\n     }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "87e6ab658de8ac7b93bfdc098068069ca1a692ed", "url": "https://github.com/hugegraph/hugegraph/commit/87e6ab658de8ac7b93bfdc098068069ca1a692ed", "message": "use heartbeat interval as retry interval\n\nChange-Id: Ic39d81623efa89b3f35b794f7d183201348ab871", "committedDate": "2020-07-30T07:17:45Z", "type": "commit"}, {"oid": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "url": "https://github.com/hugegraph/hugegraph/commit/c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "message": "add listener on heartbeated\n\nChange-Id: Ied4194a6e20c3365dede4df922d4eade9b4f7477", "committedDate": "2020-07-30T09:05:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MDc5OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462860799", "body": "move LOG.warn at line 231 here", "bodyText": "move LOG.warn at line 231 here", "bodyHTML": "<p dir=\"auto\">move LOG.warn at line 231 here</p>", "author": "javeme", "createdAt": "2020-07-30T09:11:20Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -229,11 +235,12 @@ public void run(Status status, long index, byte[] reqCtx) {\n                             query, status));\n                 }\n             }\n-        });\n+        };\n+        this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n         try {\n             return closure.waitFinished();\n         } catch (Throwable t) {\n-            throw new BackendException(\"Failed to query\", t);\n+            throw new BackendException(\"Failed to execute query\", t);", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 2deb6c68..78c60c0e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -240,6 +238,8 @@ public class RaftBackendStore implements BackendStore {\n         try {\n             return closure.waitFinished();\n         } catch (Throwable t) {\n+            LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n+                     query, closure.status());\n             throw new BackendException(\"Failed to execute query\", t);\n         }\n     }\n", "next_change": {"commit": "338ca00aaa899173329c5d54e46ca61289374338", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 78c60c0e..4094a2bb 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -221,25 +221,25 @@ public class RaftBackendStore implements BackendStore {\n         }\n \n         StoreCommand command = new StoreCommand(StoreAction.QUERY);\n-        StoreClosure closure = new StoreClosure(command);\n+        StoreClosure future = new StoreClosure(command);\n         ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n             @Override\n             public void run(Status status, long index, byte[] reqCtx) {\n                 if (status.isOk()) {\n-                    closure.complete(status, () -> func.apply(query));\n+                    future.complete(status, () -> func.apply(query));\n                 } else {\n-                    closure.failure(status, new BackendException(\n-                            \"Failed to execute query '%s' with 'ReadIndex': %s\",\n-                            query, status));\n+                    future.failure(status, new BackendException(\n+                           \"Failed to execute query '%s' with read-index: %s\",\n+                           query, status));\n                 }\n             }\n         };\n         this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n         try {\n-            return closure.waitFinished();\n+            return future.waitFinished();\n         } catch (Throwable t) {\n-            LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n-                     query, closure.status());\n+            LOG.warn(\"Failed to execute query {} with read-index: {}\",\n+                     query, future.status());\n             throw new BackendException(\"Failed to execute query\", t);\n         }\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2Mjg2OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462862868", "body": "RaftNode.this.started", "bodyText": "RaftNode.this.started", "bodyHTML": "<p dir=\"auto\">RaftNode.this.started</p>", "author": "javeme", "createdAt": "2020-07-30T09:15:00Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -246,6 +274,12 @@ public void onCreated(PeerId peer) {\n             LOG.info(\"The node {} replicator has created\", peer);\n         }\n \n+        @Override\n+        public void onHeartbeated(PeerId peer) {\n+            LOG.info(\"The node {} replicator has heartbeated\", peer);\n+            started = true;", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 7b9a5a92..0f6b9150 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -277,7 +280,10 @@ public class RaftNode {\n         @Override\n         public void onHeartbeated(PeerId peer) {\n             LOG.info(\"The node {} replicator has heartbeated\", peer);\n-            started = true;\n+            synchronized(RaftNode.this.startedLock) {\n+                RaftNode.this.started.set(true);\n+                RaftNode.this.startedLock.notify();\n+            }\n         }\n \n         @Override\n", "next_change": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 0f6b9150..0d3f3646 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -277,15 +304,6 @@ public class RaftNode {\n             LOG.info(\"The node {} replicator has created\", peer);\n         }\n \n-        @Override\n-        public void onHeartbeated(PeerId peer) {\n-            LOG.info(\"The node {} replicator has heartbeated\", peer);\n-            synchronized(RaftNode.this.startedLock) {\n-                RaftNode.this.started.set(true);\n-                RaftNode.this.startedLock.notify();\n-            }\n-        }\n-\n         @Override\n         public void onError(PeerId peer, Status status) {\n             LOG.warn(\"Replicator meet error: {}\", status);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MjkyOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462862929", "body": "ditto", "bodyText": "ditto", "bodyHTML": "<p dir=\"auto\">ditto</p>", "author": "javeme", "createdAt": "2020-07-30T09:15:06Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -266,6 +300,7 @@ private boolean isWriteBufferOverflow(Status status) {\n         @Override\n         public void onDestroyed(PeerId peer) {\n             LOG.warn(\"The node {} prepare to offline\", peer);\n+            started = false;", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 7b9a5a92..0f6b9150 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -300,7 +306,10 @@ public class RaftNode {\n         @Override\n         public void onDestroyed(PeerId peer) {\n             LOG.warn(\"The node {} prepare to offline\", peer);\n-            started = false;\n+            synchronized(RaftNode.this.startedLock) {\n+                RaftNode.this.started.set(false);\n+                RaftNode.this.startedLock.notify();\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 0f6b9150..0d3f3646 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -306,10 +324,6 @@ public class RaftNode {\n         @Override\n         public void onDestroyed(PeerId peer) {\n             LOG.warn(\"The node {} prepare to offline\", peer);\n-            synchronized(RaftNode.this.startedLock) {\n-                RaftNode.this.started.set(false);\n-                RaftNode.this.startedLock.notify();\n-            }\n         }\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2Mzc1MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462863750", "body": "rename waitStarted", "bodyText": "rename waitStarted", "bodyHTML": "<p dir=\"auto\">rename waitStarted</p>", "author": "javeme", "createdAt": "2020-07-30T09:16:37Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -165,6 +175,24 @@ protected void waitLeaderElected() {\n                   this.group(), WAIT_LEADER_TIMEOUT);\n     }\n \n+    protected boolean waitHeartbeated() {", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 7b9a5a92..0f6b9150 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -148,49 +161,39 @@ public class RaftNode {\n         }\n     }\n \n-    protected void waitLeaderElected() {\n+    protected void waitLeaderElected(int timeout) {\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n+        this.waitFor(this.electedLock, this.elected, true, timeout, \"election\");\n+    }\n+\n+    protected void waitHeartbeated(int timeout) {\n+        this.waitFor(this.startedLock, this.started, true, timeout, \"heartbeat\");\n+    }\n \n-        int consumeTime = WAIT_LEADER_TIMEOUT;\n-        int sleepInterval = 100;\n-        while (consumeTime > 0) {\n-            PeerId leaderId = this.node.getLeaderId();\n-            if (leaderId != null) {\n-                return;\n-            } else {\n+    private void waitFor(Object lock, AtomicBoolean watchValue,\n+                         boolean expectValue, int timeout, String action) {\n+        int internalTimeout = 3000;\n+        // The lock object actually is class field, so it's safe\n+        synchronized(lock) {\n+            for (int i = 1; watchValue.get() != expectValue; i++) {\n                 try {\n-                    Thread.sleep(sleepInterval);\n+                    lock.wait(internalTimeout);\n                 } catch (InterruptedException e) {\n+                    throw new BackendException(\"Wait raft group '%s' %s error\",\n+                                               e, this.group(), action);\n+                }\n+                int consumedTime = i * internalTimeout;\n+                LOG.warn(\"Waiting raft group '{}' {} cost {}s\",\n+                         this.group(), action, consumedTime / 1000.0);\n+                if (timeout != -1 && consumedTime >= timeout) {\n                     throw new BackendException(\n-                              \"Raft group '%s' doesn't elect leader in %s ms\",\n-                              this.group(), WAIT_LEADER_TIMEOUT - consumeTime);\n+                              \"Wait raft group '{}' {} timeout({}ms)\",\n+                              this.group(), action, consumedTime);\n                 }\n-                consumeTime -= sleepInterval;\n             }\n         }\n-        throw new BackendException(\n-                  \"Raft group '%s' doesn't elect leader in %s ms\",\n-                  this.group(), WAIT_LEADER_TIMEOUT);\n-    }\n-\n-    protected boolean waitHeartbeated() {\n-        int electionTimeout = this.node.getOptions().getElectionTimeoutMs();\n-        // Raft election:heartbeat timeout factor\n-        int factor = this.node.getRaftOptions().getElectionHeartbeatFactor();\n-        int heartbeatInterval = electionTimeout / factor;\n-        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n-            if (this.started) {\n-                break;\n-            }\n-            try {\n-                Thread.sleep(heartbeatInterval);\n-            } catch (InterruptedException ex) {\n-                throw new BackendException(\"Waiting heartbeated is interrupted\");\n-            }\n-        }\n-        return this.started;\n     }\n \n     private void waitIfBusy() {\n", "next_change": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 0f6b9150..0d3f3646 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -161,38 +154,72 @@ public class RaftNode {\n         }\n     }\n \n+    public void onElected(boolean value) {\n+        synchronized(this.electedLock) {\n+            this.elected.set(value);\n+            this.electedLock.notify();\n+        }\n+    }\n+\n     protected void waitLeaderElected(int timeout) {\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n-        this.waitFor(this.electedLock, this.elected, true, timeout, \"election\");\n-    }\n-\n-    protected void waitHeartbeated(int timeout) {\n-        this.waitFor(this.startedLock, this.started, true, timeout, \"heartbeat\");\n-    }\n-\n-    private void waitFor(Object lock, AtomicBoolean watchValue,\n-                         boolean expectValue, int timeout, String action) {\n+        long beginTime = System.currentTimeMillis();\n         int internalTimeout = 3000;\n-        // The lock object actually is class field, so it's safe\n-        synchronized(lock) {\n-            for (int i = 1; watchValue.get() != expectValue; i++) {\n+        synchronized(this.electedLock) {\n+            while (!this.elected.get()) {\n                 try {\n-                    lock.wait(internalTimeout);\n+                    this.electedLock.wait(internalTimeout);\n                 } catch (InterruptedException e) {\n-                    throw new BackendException(\"Wait raft group '%s' %s error\",\n-                                               e, this.group(), action);\n+                    throw new BackendException(\n+                              \"Wait raft group '%s' election error\",\n+                              e, this.group(), \"election\");\n                 }\n-                int consumedTime = i * internalTimeout;\n-                LOG.warn(\"Waiting raft group '{}' {} cost {}s\",\n-                         this.group(), action, consumedTime / 1000.0);\n+                long consumedTime = System.currentTimeMillis() - beginTime;\n                 if (timeout != -1 && consumedTime >= timeout) {\n                     throw new BackendException(\n-                              \"Wait raft group '{}' {} timeout({}ms)\",\n-                              this.group(), action, consumedTime);\n+                              \"Wait raft group '{}' election timeout({}ms)\",\n+                              this.group(), \"\", consumedTime);\n                 }\n+                LOG.warn(\"Waiting raft group '{}' election cost {}s\",\n+                         this.group(), consumedTime / 1000.0);\n+            }\n+        }\n+    }\n+\n+    protected void waitStarted(int timeout) {\n+        ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n+            @Override\n+            public void run(Status status, long index, byte[] reqCtx) {\n+                if (status.isOk()) {\n+                    RaftNode.this.started.set(true);\n+                } else {\n+                    RaftNode.this.started.set(false);\n+                }\n+            }\n+        };\n+        long beginTime = System.currentTimeMillis();\n+        int internalTimeout = 3000;\n+        while (true) {\n+            this.node.readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n+            if (this.started.get()) {\n+                break;\n+            }\n+            try {\n+                Thread.sleep(internalTimeout);\n+            } catch (InterruptedException ex) {\n+                throw new BackendException(\"Try to sleep a while for waiting \" +\n+                                           \"heartbeat is interrupted\");\n             }\n+            long consumedTime = System.currentTimeMillis() - beginTime;\n+            if (timeout != -1 && consumedTime >= timeout) {\n+                throw new BackendException(\n+                          \"Wait raft group '{}' heartbeat timeout({}ms)\",\n+                          this.group(), consumedTime);\n+            }\n+            LOG.warn(\"Waiting raft group '{}' heartbeat cost {}s\",\n+                     this.group(), consumedTime / 1000.0);\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NDgwNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462864806", "body": "rename ex to e", "bodyText": "rename ex to e", "bodyHTML": "<p dir=\"auto\">rename ex to e</p>", "author": "javeme", "createdAt": "2020-07-30T09:18:31Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -165,6 +175,24 @@ protected void waitLeaderElected() {\n                   this.group(), WAIT_LEADER_TIMEOUT);\n     }\n \n+    protected boolean waitHeartbeated() {\n+        int electionTimeout = this.node.getOptions().getElectionTimeoutMs();\n+        // Raft election:heartbeat timeout factor\n+        int factor = this.node.getRaftOptions().getElectionHeartbeatFactor();\n+        int heartbeatInterval = electionTimeout / factor;\n+        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n+            if (this.started) {\n+                break;\n+            }\n+            try {\n+                Thread.sleep(heartbeatInterval);\n+            } catch (InterruptedException ex) {", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNTk5OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r463535998", "bodyText": "address", "author": "javeme", "createdAt": "2020-07-31T10:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NDgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 7b9a5a92..0f6b9150 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -148,49 +161,39 @@ public class RaftNode {\n         }\n     }\n \n-    protected void waitLeaderElected() {\n+    protected void waitLeaderElected(int timeout) {\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n+        this.waitFor(this.electedLock, this.elected, true, timeout, \"election\");\n+    }\n+\n+    protected void waitHeartbeated(int timeout) {\n+        this.waitFor(this.startedLock, this.started, true, timeout, \"heartbeat\");\n+    }\n \n-        int consumeTime = WAIT_LEADER_TIMEOUT;\n-        int sleepInterval = 100;\n-        while (consumeTime > 0) {\n-            PeerId leaderId = this.node.getLeaderId();\n-            if (leaderId != null) {\n-                return;\n-            } else {\n+    private void waitFor(Object lock, AtomicBoolean watchValue,\n+                         boolean expectValue, int timeout, String action) {\n+        int internalTimeout = 3000;\n+        // The lock object actually is class field, so it's safe\n+        synchronized(lock) {\n+            for (int i = 1; watchValue.get() != expectValue; i++) {\n                 try {\n-                    Thread.sleep(sleepInterval);\n+                    lock.wait(internalTimeout);\n                 } catch (InterruptedException e) {\n+                    throw new BackendException(\"Wait raft group '%s' %s error\",\n+                                               e, this.group(), action);\n+                }\n+                int consumedTime = i * internalTimeout;\n+                LOG.warn(\"Waiting raft group '{}' {} cost {}s\",\n+                         this.group(), action, consumedTime / 1000.0);\n+                if (timeout != -1 && consumedTime >= timeout) {\n                     throw new BackendException(\n-                              \"Raft group '%s' doesn't elect leader in %s ms\",\n-                              this.group(), WAIT_LEADER_TIMEOUT - consumeTime);\n+                              \"Wait raft group '{}' {} timeout({}ms)\",\n+                              this.group(), action, consumedTime);\n                 }\n-                consumeTime -= sleepInterval;\n             }\n         }\n-        throw new BackendException(\n-                  \"Raft group '%s' doesn't elect leader in %s ms\",\n-                  this.group(), WAIT_LEADER_TIMEOUT);\n-    }\n-\n-    protected boolean waitHeartbeated() {\n-        int electionTimeout = this.node.getOptions().getElectionTimeoutMs();\n-        // Raft election:heartbeat timeout factor\n-        int factor = this.node.getRaftOptions().getElectionHeartbeatFactor();\n-        int heartbeatInterval = electionTimeout / factor;\n-        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n-            if (this.started) {\n-                break;\n-            }\n-            try {\n-                Thread.sleep(heartbeatInterval);\n-            } catch (InterruptedException ex) {\n-                throw new BackendException(\"Waiting heartbeated is interrupted\");\n-            }\n-        }\n-        return this.started;\n     }\n \n     private void waitIfBusy() {\n", "next_change": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 0f6b9150..0d3f3646 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -161,38 +154,72 @@ public class RaftNode {\n         }\n     }\n \n+    public void onElected(boolean value) {\n+        synchronized(this.electedLock) {\n+            this.elected.set(value);\n+            this.electedLock.notify();\n+        }\n+    }\n+\n     protected void waitLeaderElected(int timeout) {\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n-        this.waitFor(this.electedLock, this.elected, true, timeout, \"election\");\n-    }\n-\n-    protected void waitHeartbeated(int timeout) {\n-        this.waitFor(this.startedLock, this.started, true, timeout, \"heartbeat\");\n-    }\n-\n-    private void waitFor(Object lock, AtomicBoolean watchValue,\n-                         boolean expectValue, int timeout, String action) {\n+        long beginTime = System.currentTimeMillis();\n         int internalTimeout = 3000;\n-        // The lock object actually is class field, so it's safe\n-        synchronized(lock) {\n-            for (int i = 1; watchValue.get() != expectValue; i++) {\n+        synchronized(this.electedLock) {\n+            while (!this.elected.get()) {\n                 try {\n-                    lock.wait(internalTimeout);\n+                    this.electedLock.wait(internalTimeout);\n                 } catch (InterruptedException e) {\n-                    throw new BackendException(\"Wait raft group '%s' %s error\",\n-                                               e, this.group(), action);\n+                    throw new BackendException(\n+                              \"Wait raft group '%s' election error\",\n+                              e, this.group(), \"election\");\n                 }\n-                int consumedTime = i * internalTimeout;\n-                LOG.warn(\"Waiting raft group '{}' {} cost {}s\",\n-                         this.group(), action, consumedTime / 1000.0);\n+                long consumedTime = System.currentTimeMillis() - beginTime;\n                 if (timeout != -1 && consumedTime >= timeout) {\n                     throw new BackendException(\n-                              \"Wait raft group '{}' {} timeout({}ms)\",\n-                              this.group(), action, consumedTime);\n+                              \"Wait raft group '{}' election timeout({}ms)\",\n+                              this.group(), \"\", consumedTime);\n                 }\n+                LOG.warn(\"Waiting raft group '{}' election cost {}s\",\n+                         this.group(), consumedTime / 1000.0);\n+            }\n+        }\n+    }\n+\n+    protected void waitStarted(int timeout) {\n+        ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n+            @Override\n+            public void run(Status status, long index, byte[] reqCtx) {\n+                if (status.isOk()) {\n+                    RaftNode.this.started.set(true);\n+                } else {\n+                    RaftNode.this.started.set(false);\n+                }\n+            }\n+        };\n+        long beginTime = System.currentTimeMillis();\n+        int internalTimeout = 3000;\n+        while (true) {\n+            this.node.readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n+            if (this.started.get()) {\n+                break;\n+            }\n+            try {\n+                Thread.sleep(internalTimeout);\n+            } catch (InterruptedException ex) {\n+                throw new BackendException(\"Try to sleep a while for waiting \" +\n+                                           \"heartbeat is interrupted\");\n             }\n+            long consumedTime = System.currentTimeMillis() - beginTime;\n+            if (timeout != -1 && consumedTime >= timeout) {\n+                throw new BackendException(\n+                          \"Wait raft group '{}' heartbeat timeout({}ms)\",\n+                          this.group(), consumedTime);\n+            }\n+            LOG.warn(\"Waiting raft group '{}' heartbeat cost {}s\",\n+                     this.group(), consumedTime / 1000.0);\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NDgxOA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462864818", "body": "add cause param", "bodyText": "add cause param", "bodyHTML": "<p dir=\"auto\">add cause param</p>", "author": "javeme", "createdAt": "2020-07-30T09:18:33Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -165,6 +175,24 @@ protected void waitLeaderElected() {\n                   this.group(), WAIT_LEADER_TIMEOUT);\n     }\n \n+    protected boolean waitHeartbeated() {\n+        int electionTimeout = this.node.getOptions().getElectionTimeoutMs();\n+        // Raft election:heartbeat timeout factor\n+        int factor = this.node.getRaftOptions().getElectionHeartbeatFactor();\n+        int heartbeatInterval = electionTimeout / factor;\n+        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n+            if (this.started) {\n+                break;\n+            }\n+            try {\n+                Thread.sleep(heartbeatInterval);\n+            } catch (InterruptedException ex) {\n+                throw new BackendException(\"Waiting heartbeated is interrupted\");", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 7b9a5a92..0f6b9150 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -148,49 +161,39 @@ public class RaftNode {\n         }\n     }\n \n-    protected void waitLeaderElected() {\n+    protected void waitLeaderElected(int timeout) {\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n+        this.waitFor(this.electedLock, this.elected, true, timeout, \"election\");\n+    }\n+\n+    protected void waitHeartbeated(int timeout) {\n+        this.waitFor(this.startedLock, this.started, true, timeout, \"heartbeat\");\n+    }\n \n-        int consumeTime = WAIT_LEADER_TIMEOUT;\n-        int sleepInterval = 100;\n-        while (consumeTime > 0) {\n-            PeerId leaderId = this.node.getLeaderId();\n-            if (leaderId != null) {\n-                return;\n-            } else {\n+    private void waitFor(Object lock, AtomicBoolean watchValue,\n+                         boolean expectValue, int timeout, String action) {\n+        int internalTimeout = 3000;\n+        // The lock object actually is class field, so it's safe\n+        synchronized(lock) {\n+            for (int i = 1; watchValue.get() != expectValue; i++) {\n                 try {\n-                    Thread.sleep(sleepInterval);\n+                    lock.wait(internalTimeout);\n                 } catch (InterruptedException e) {\n+                    throw new BackendException(\"Wait raft group '%s' %s error\",\n+                                               e, this.group(), action);\n+                }\n+                int consumedTime = i * internalTimeout;\n+                LOG.warn(\"Waiting raft group '{}' {} cost {}s\",\n+                         this.group(), action, consumedTime / 1000.0);\n+                if (timeout != -1 && consumedTime >= timeout) {\n                     throw new BackendException(\n-                              \"Raft group '%s' doesn't elect leader in %s ms\",\n-                              this.group(), WAIT_LEADER_TIMEOUT - consumeTime);\n+                              \"Wait raft group '{}' {} timeout({}ms)\",\n+                              this.group(), action, consumedTime);\n                 }\n-                consumeTime -= sleepInterval;\n             }\n         }\n-        throw new BackendException(\n-                  \"Raft group '%s' doesn't elect leader in %s ms\",\n-                  this.group(), WAIT_LEADER_TIMEOUT);\n-    }\n-\n-    protected boolean waitHeartbeated() {\n-        int electionTimeout = this.node.getOptions().getElectionTimeoutMs();\n-        // Raft election:heartbeat timeout factor\n-        int factor = this.node.getRaftOptions().getElectionHeartbeatFactor();\n-        int heartbeatInterval = electionTimeout / factor;\n-        for (int i = 0; i < RaftSharedContext.QUERY_RETRY_TIMES; i++) {\n-            if (this.started) {\n-                break;\n-            }\n-            try {\n-                Thread.sleep(heartbeatInterval);\n-            } catch (InterruptedException ex) {\n-                throw new BackendException(\"Waiting heartbeated is interrupted\");\n-            }\n-        }\n-        return this.started;\n     }\n \n     private void waitIfBusy() {\n", "next_change": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex 0f6b9150..0d3f3646 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -161,38 +154,72 @@ public class RaftNode {\n         }\n     }\n \n+    public void onElected(boolean value) {\n+        synchronized(this.electedLock) {\n+            this.elected.set(value);\n+            this.electedLock.notify();\n+        }\n+    }\n+\n     protected void waitLeaderElected(int timeout) {\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n-        this.waitFor(this.electedLock, this.elected, true, timeout, \"election\");\n-    }\n-\n-    protected void waitHeartbeated(int timeout) {\n-        this.waitFor(this.startedLock, this.started, true, timeout, \"heartbeat\");\n-    }\n-\n-    private void waitFor(Object lock, AtomicBoolean watchValue,\n-                         boolean expectValue, int timeout, String action) {\n+        long beginTime = System.currentTimeMillis();\n         int internalTimeout = 3000;\n-        // The lock object actually is class field, so it's safe\n-        synchronized(lock) {\n-            for (int i = 1; watchValue.get() != expectValue; i++) {\n+        synchronized(this.electedLock) {\n+            while (!this.elected.get()) {\n                 try {\n-                    lock.wait(internalTimeout);\n+                    this.electedLock.wait(internalTimeout);\n                 } catch (InterruptedException e) {\n-                    throw new BackendException(\"Wait raft group '%s' %s error\",\n-                                               e, this.group(), action);\n+                    throw new BackendException(\n+                              \"Wait raft group '%s' election error\",\n+                              e, this.group(), \"election\");\n                 }\n-                int consumedTime = i * internalTimeout;\n-                LOG.warn(\"Waiting raft group '{}' {} cost {}s\",\n-                         this.group(), action, consumedTime / 1000.0);\n+                long consumedTime = System.currentTimeMillis() - beginTime;\n                 if (timeout != -1 && consumedTime >= timeout) {\n                     throw new BackendException(\n-                              \"Wait raft group '{}' {} timeout({}ms)\",\n-                              this.group(), action, consumedTime);\n+                              \"Wait raft group '{}' election timeout({}ms)\",\n+                              this.group(), \"\", consumedTime);\n                 }\n+                LOG.warn(\"Waiting raft group '{}' election cost {}s\",\n+                         this.group(), consumedTime / 1000.0);\n+            }\n+        }\n+    }\n+\n+    protected void waitStarted(int timeout) {\n+        ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n+            @Override\n+            public void run(Status status, long index, byte[] reqCtx) {\n+                if (status.isOk()) {\n+                    RaftNode.this.started.set(true);\n+                } else {\n+                    RaftNode.this.started.set(false);\n+                }\n+            }\n+        };\n+        long beginTime = System.currentTimeMillis();\n+        int internalTimeout = 3000;\n+        while (true) {\n+            this.node.readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n+            if (this.started.get()) {\n+                break;\n+            }\n+            try {\n+                Thread.sleep(internalTimeout);\n+            } catch (InterruptedException ex) {\n+                throw new BackendException(\"Try to sleep a while for waiting \" +\n+                                           \"heartbeat is interrupted\");\n             }\n+            long consumedTime = System.currentTimeMillis() - beginTime;\n+            if (timeout != -1 && consumedTime >= timeout) {\n+                throw new BackendException(\n+                          \"Wait raft group '{}' heartbeat timeout({}ms)\",\n+                          this.group(), consumedTime);\n+            }\n+            LOG.warn(\"Waiting raft group '{}' heartbeat cost {}s\",\n+                     this.group(), consumedTime / 1000.0);\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NTUwOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462865509", "body": "rename StoreClosure closure to future", "bodyText": "rename StoreClosure closure to future", "bodyHTML": "<p dir=\"auto\">rename StoreClosure closure to future</p>", "author": "javeme", "createdAt": "2020-07-30T09:19:45Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -212,11 +220,9 @@ private Object queryByRaft(Query query, Function<Object, Object> func) {\n             return func.apply(query);\n         }\n \n-        this.node().waitLeaderElected();\n         StoreCommand command = new StoreCommand(StoreAction.QUERY);\n         StoreClosure closure = new StoreClosure(command);\n-        RaftNode raftNode = this.node();\n-        raftNode.node().readIndex(BytesUtil.EMPTY_BYTES, new ReadIndexClosure() {\n+        ReadIndexClosure readIndexClosure = new ReadIndexClosure() {", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "338ca00aaa899173329c5d54e46ca61289374338", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 2deb6c68..4094a2bb 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -221,25 +221,25 @@ public class RaftBackendStore implements BackendStore {\n         }\n \n         StoreCommand command = new StoreCommand(StoreAction.QUERY);\n-        StoreClosure closure = new StoreClosure(command);\n+        StoreClosure future = new StoreClosure(command);\n         ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n             @Override\n             public void run(Status status, long index, byte[] reqCtx) {\n                 if (status.isOk()) {\n-                    closure.complete(status, () -> func.apply(query));\n+                    future.complete(status, () -> func.apply(query));\n                 } else {\n-                    LOG.warn(\"Failed to execute query {} with 'ReadIndex': {}\",\n-                             query, status);\n-                    closure.failure(status, new BackendException(\n-                            \"Failed to execute query '%s' with 'ReadIndex': %s\",\n-                            query, status));\n+                    future.failure(status, new BackendException(\n+                           \"Failed to execute query '%s' with read-index: %s\",\n+                           query, status));\n                 }\n             }\n         };\n         this.node().node().readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n         try {\n-            return closure.waitFinished();\n+            return future.waitFinished();\n         } catch (Throwable t) {\n+            LOG.warn(\"Failed to execute query {} with read-index: {}\",\n+                     query, future.status());\n             throw new BackendException(\"Failed to execute query\", t);\n         }\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3NTMxNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462875317", "body": "add a common waitFor(future, timeout) method", "bodyText": "add a common waitFor(future, timeout) method", "bodyHTML": "<p dir=\"auto\">add a common waitFor(future, timeout) method</p>", "author": "javeme", "createdAt": "2020-07-30T09:36:54Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -86,6 +86,14 @@ public boolean isSchemaStore() {\n     public synchronized void open(HugeConfig config) {\n         this.store.open(config);\n         this.initRaftNodeIfNeeded();\n+\n+        RaftNode node = this.node();\n+        node.waitLeaderElected();\n+        if (node.node().isLeader()) {\n+            if (!node.waitHeartbeated()) {", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 2deb6c68..78c60c0e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -86,13 +86,13 @@ public class RaftBackendStore implements BackendStore {\n     public synchronized void open(HugeConfig config) {\n         this.store.open(config);\n         this.initRaftNodeIfNeeded();\n+    }\n \n+    public void waitStoreStarted() {\n         RaftNode node = this.node();\n-        node.waitLeaderElected();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            if (!node.waitHeartbeated()) {\n-                throw new BackendException(\"Wait raft node heartbeat failed\");\n-            }\n+            node.waitHeartbeated(-1);\n         }\n     }\n \n", "next_change": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 78c60c0e..c0aab40c 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -92,7 +92,7 @@ public class RaftBackendStore implements BackendStore {\n         RaftNode node = this.node();\n         node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            node.waitHeartbeated(-1);\n+            node.waitStarted(-1);\n         }\n     }\n \n", "next_change": {"commit": "fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex c0aab40c..f733c961 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -92,7 +92,7 @@ public class RaftBackendStore implements BackendStore {\n         RaftNode node = this.node();\n         node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            node.waitStarted(-1);\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n         }\n     }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NjA3Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r462866076", "body": "Failed to wait raft node heartbeat", "bodyText": "Failed to wait raft node heartbeat", "bodyHTML": "<p dir=\"auto\">Failed to wait raft node heartbeat</p>", "author": "zhoney", "createdAt": "2020-07-30T09:20:47Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -86,6 +86,14 @@ public boolean isSchemaStore() {\n     public synchronized void open(HugeConfig config) {\n         this.store.open(config);\n         this.initRaftNodeIfNeeded();\n+\n+        RaftNode node = this.node();\n+        node.waitLeaderElected();\n+        if (node.node().isLeader()) {\n+            if (!node.waitHeartbeated()) {\n+                throw new BackendException(\"Wait raft node heartbeat failed\");", "originalCommit": "c859c0a65aa5053bbec15eeb54393e2e3dfd1fee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 2deb6c68..78c60c0e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -86,13 +86,13 @@ public class RaftBackendStore implements BackendStore {\n     public synchronized void open(HugeConfig config) {\n         this.store.open(config);\n         this.initRaftNodeIfNeeded();\n+    }\n \n+    public void waitStoreStarted() {\n         RaftNode node = this.node();\n-        node.waitLeaderElected();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            if (!node.waitHeartbeated()) {\n-                throw new BackendException(\"Wait raft node heartbeat failed\");\n-            }\n+            node.waitHeartbeated(-1);\n         }\n     }\n \n", "next_change": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 78c60c0e..c0aab40c 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -92,7 +92,7 @@ public class RaftBackendStore implements BackendStore {\n         RaftNode node = this.node();\n         node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            node.waitHeartbeated(-1);\n+            node.waitStarted(-1);\n         }\n     }\n \n", "next_change": {"commit": "fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex c0aab40c..f733c961 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -92,7 +92,7 @@ public class RaftBackendStore implements BackendStore {\n         RaftNode node = this.node();\n         node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            node.waitStarted(-1);\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n         }\n     }\n \n", "next_change": null}]}}]}}]}}, {"oid": "e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "url": "https://github.com/hugegraph/hugegraph/commit/e55434bac7c5ef7ca43f70f64274fc6ad57773fd", "message": "Add wait started logic\n\nChange-Id: I689149d598ad902cc1ff5175d76557fd7b1491a0", "committedDate": "2020-07-31T02:53:11Z", "type": "forcePushed"}, {"oid": "b42e21eedc6bd4e7290912cd631b1178e6b97e0e", "url": "https://github.com/hugegraph/hugegraph/commit/b42e21eedc6bd4e7290912cd631b1178e6b97e0e", "message": "Add wait started logic\n\nChange-Id: I689149d598ad902cc1ff5175d76557fd7b1491a0", "committedDate": "2020-07-31T03:07:44Z", "type": "forcePushed"}, {"oid": "e81fadc8c492d3a5a4ce1745a1071265d92996ba", "url": "https://github.com/hugegraph/hugegraph/commit/e81fadc8c492d3a5a4ce1745a1071265d92996ba", "message": "Add wait started logic\n\nChange-Id: I689149d598ad902cc1ff5175d76557fd7b1491a0", "committedDate": "2020-07-31T03:25:33Z", "type": "commit"}, {"oid": "e81fadc8c492d3a5a4ce1745a1071265d92996ba", "url": "https://github.com/hugegraph/hugegraph/commit/e81fadc8c492d3a5a4ce1745a1071265d92996ba", "message": "Add wait started logic\n\nChange-Id: I689149d598ad902cc1ff5175d76557fd7b1491a0", "committedDate": "2020-07-31T03:25:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4NzQ0NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r463387444", "body": "abdicated from follower", "bodyText": "abdicated from follower", "bodyHTML": "<p dir=\"auto\">abdicated from follower</p>", "author": "zhoney", "createdAt": "2020-07-31T03:33:01Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java", "diffHunk": "@@ -199,30 +194,44 @@ public boolean onSnapshotLoad(SnapshotReader reader) {\n             LOG.warn(\"Leader is not supposed to load snapshot.\");\n             return false;\n         }\n-        LOG.debug(\"The node {} start snapshot load\", this.nodeId);\n+        LOG.debug(\"The node {} start snapshot load\", this.node.nodeId());\n         return this.snapshotFile.load(this.store, reader);\n     }\n \n     @Override\n     public void onLeaderStart(long term) {\n-        LOG.info(\"The node {} become to leader\", this.nodeId);\n-        this.leaderTerm.set(term);\n+        LOG.info(\"The node {} become to leader\", this.node.nodeId());\n+        this.node.onElected(true);\n         super.onLeaderStart(term);\n     }\n \n     @Override\n     public void onLeaderStop(Status status) {\n-        LOG.info(\"The node {} abdicated from leader\", this.nodeId);\n-        this.leaderTerm.set(-1);\n+        LOG.info(\"The node {} abdicated from leader\", this.node.nodeId());\n+        this.node.onElected(false);\n         super.onLeaderStop(status);\n     }\n \n+    @Override\n+    public void onStartFollowing(LeaderChangeContext ctx) {\n+        LOG.info(\"The node {} become to follower\", this.node.nodeId());\n+        this.node.onElected(true);\n+        super.onStartFollowing(ctx);\n+    }\n+\n+    @Override\n+    public void onStopFollowing(LeaderChangeContext ctx) {\n+        LOG.info(\"The node {} become to follower\", this.node.nodeId());", "originalCommit": "e81fadc8c492d3a5a4ce1745a1071265d92996ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java\nindex b5f6aa6d..e3adc2d1 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java\n", "chunk": "@@ -221,7 +221,7 @@ public class StoreStateMachine extends StateMachineAdapter {\n \n     @Override\n     public void onStopFollowing(LeaderChangeContext ctx) {\n-        LOG.info(\"The node {} become to follower\", this.node.nodeId());\n+        LOG.info(\"The node {} abdicated from follower\", this.node.nodeId());\n         this.node.onElected(false);\n         super.onStopFollowing(ctx);\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4Nzg2OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r463387868", "body": "should use this.call() if graph.initlalized() will open tx (ensure graph tx closed when graph close)", "bodyText": "should use this.call() if graph.initlalized() will open tx (ensure graph tx closed when graph close)", "bodyHTML": "<p dir=\"auto\">should use this.call() if graph.initlalized() will open tx (ensure graph tx closed when graph close)</p>", "author": "zhoney", "createdAt": "2020-07-31T03:35:08Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java", "diffHunk": "@@ -337,7 +335,7 @@ private HugeServerInfo serverInfo(Id server) {\n     }\n \n     private HugeServerInfo removeSelfServerInfo() {\n-        if (this.initialized()) {\n+        if (this.graph.initialized()) {", "originalCommit": "e81fadc8c492d3a5a4ce1745a1071265d92996ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java\nindex bf3504f5..2b01f99e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java\n", "chunk": "@@ -335,7 +339,7 @@ public class ServerInfoManager {\n     }\n \n     private HugeServerInfo removeSelfServerInfo() {\n-        if (this.graph.initialized()) {\n+        if (this.initialized()) {\n             return this.removeServerInfo(this.selfServerId);\n         }\n         return null;\n", "next_change": {"commit": "fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java\nindex 2b01f99e..cdf11bde 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java\n", "chunk": "@@ -339,7 +333,7 @@ public class ServerInfoManager {\n     }\n \n     private HugeServerInfo removeSelfServerInfo() {\n-        if (this.initialized()) {\n+        if (this.graph.initialized()) {\n             return this.removeServerInfo(this.selfServerId);\n         }\n         return null;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4NTUzMg==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r463385532", "body": "also define NO_TIMEOUT", "bodyText": "also define NO_TIMEOUT", "bodyHTML": "<p dir=\"auto\">also define NO_TIMEOUT</p>", "author": "javeme", "createdAt": "2020-07-31T03:23:43Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -86,13 +86,13 @@ public boolean isSchemaStore() {\n     public synchronized void open(HugeConfig config) {\n         this.store.open(config);\n         this.initRaftNodeIfNeeded();\n+    }\n \n+    public void waitStoreStarted() {\n         RaftNode node = this.node();\n-        node.waitLeaderElected();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            if (!node.waitHeartbeated()) {\n-                throw new BackendException(\"Wait raft node heartbeat failed\");\n-            }\n+            node.waitHeartbeated(-1);", "originalCommit": "b42e21eedc6bd4e7290912cd631b1178e6b97e0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex 78c60c0e..c0aab40c 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -92,7 +92,7 @@ public class RaftBackendStore implements BackendStore {\n         RaftNode node = this.node();\n         node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            node.waitHeartbeated(-1);\n+            node.waitStarted(-1);\n         }\n     }\n \n", "next_change": {"commit": "fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\nindex c0aab40c..f733c961 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java\n", "chunk": "@@ -92,7 +92,7 @@ public class RaftBackendStore implements BackendStore {\n         RaftNode node = this.node();\n         node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n         if (node.node().isLeader()) {\n-            node.waitStarted(-1);\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4NTU5MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r463385591", "body": "check not null", "bodyText": "check not null", "bodyHTML": "<p dir=\"auto\">check not null</p>", "author": "javeme", "createdAt": "2020-07-31T03:24:02Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java", "diffHunk": "@@ -105,6 +105,13 @@ public void open(String name) {\n         this.provider.open(name);\n     }\n \n+    @Override\n+    public void waitStoreStarted() {", "originalCommit": "b42e21eedc6bd4e7290912cd631b1178e6b97e0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java\nindex 83093bc2..db398c39 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java\n", "chunk": "@@ -107,6 +108,10 @@ public class RaftBackendStoreProvider implements BackendStoreProvider {\n \n     @Override\n     public void waitStoreStarted() {\n+        E.checkState(this.schemaStore != null &&\n+                     this.graphStore != null &&\n+                     this.systemStore != null,\n+                     \"The store has not been opened\");\n         this.schemaStore.waitStoreStarted();\n         this.graphStore.waitStoreStarted();\n         this.systemStore.waitStoreStarted();\n", "next_change": null}]}}, {"oid": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "url": "https://github.com/hugegraph/hugegraph/commit/3a3a5a51d2d1286879bf99e94fd6226417a50c51", "message": "use polling to wait heartbeat\n\nChange-Id: I1218ec628755434be909f520fe9655ff2b01af85", "committedDate": "2020-07-31T07:28:54Z", "type": "commit"}, {"oid": "3a3a5a51d2d1286879bf99e94fd6226417a50c51", "url": "https://github.com/hugegraph/hugegraph/commit/3a3a5a51d2d1286879bf99e94fd6226417a50c51", "message": "use polling to wait heartbeat\n\nChange-Id: I1218ec628755434be909f520fe9655ff2b01af85", "committedDate": "2020-07-31T07:28:54Z", "type": "forcePushed"}, {"oid": "fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "url": "https://github.com/hugegraph/hugegraph/commit/fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "message": "use closed field as serverInfoManager flag\n\nChange-Id: I2a2e0cc6f0a2e65e23a1b9b2192dd50d8b28224c", "committedDate": "2020-07-31T10:16:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNTM5OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r463535399", "body": "define const interval", "bodyText": "define const interval", "bodyHTML": "<p dir=\"auto\">define const interval</p>", "author": "javeme", "createdAt": "2020-07-31T10:33:46Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -138,31 +153,73 @@ public Object submitAndWait(StoreCommand command, StoreClosure closure) {\n         }\n     }\n \n-    protected void waitLeaderElected() {\n+    public void onElected(boolean value) {\n+        synchronized(this.electedLock) {\n+            this.elected = value;\n+            this.electedLock.notify();\n+        }\n+    }\n+\n+    protected void waitLeaderElected(int timeout) {\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n-\n-        int consumeTime = WAIT_LEADER_TIMEOUT;\n-        int sleepInterval = 100;\n-        while (consumeTime > 0) {\n-            PeerId leaderId = this.node.getLeaderId();\n-            if (leaderId != null) {\n-                return;\n-            } else {\n+        long beginTime = System.currentTimeMillis();\n+        int internalTimeout = 3000;", "originalCommit": "fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "338ca00aaa899173329c5d54e46ca61289374338", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex e2c9f0ac..bbb0e913 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -165,11 +165,10 @@ public class RaftNode {\n             return;\n         }\n         long beginTime = System.currentTimeMillis();\n-        int internalTimeout = 3000;\n         synchronized(this.electedLock) {\n             while (!this.elected) {\n                 try {\n-                    this.electedLock.wait(internalTimeout);\n+                    this.electedLock.wait(RaftSharedContext.POLL_INTERVAL);\n                 } catch (InterruptedException e) {\n                     throw new BackendException(\n                               \"Wait raft group '%s' election error\",\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNTg5Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1121#discussion_r463535896", "body": "define", "bodyText": "define", "bodyHTML": "<p dir=\"auto\">define</p>", "author": "javeme", "createdAt": "2020-07-31T10:34:56Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -138,31 +153,73 @@ public Object submitAndWait(StoreCommand command, StoreClosure closure) {\n         }\n     }\n \n-    protected void waitLeaderElected() {\n+    public void onElected(boolean value) {\n+        synchronized(this.electedLock) {\n+            this.elected = value;\n+            this.electedLock.notify();\n+        }\n+    }\n+\n+    protected void waitLeaderElected(int timeout) {\n         if (this.node.getLeaderId() != null) {\n             return;\n         }\n-\n-        int consumeTime = WAIT_LEADER_TIMEOUT;\n-        int sleepInterval = 100;\n-        while (consumeTime > 0) {\n-            PeerId leaderId = this.node.getLeaderId();\n-            if (leaderId != null) {\n-                return;\n-            } else {\n+        long beginTime = System.currentTimeMillis();\n+        int internalTimeout = 3000;\n+        synchronized(this.electedLock) {\n+            while (!this.elected) {\n                 try {\n-                    Thread.sleep(sleepInterval);\n+                    this.electedLock.wait(internalTimeout);\n                 } catch (InterruptedException e) {\n                     throw new BackendException(\n-                              \"Raft group '%s' doesn't elect leader in %s ms\",\n-                              this.group(), WAIT_LEADER_TIMEOUT - consumeTime);\n+                              \"Wait raft group '%s' election error\",\n+                              e, this.group(), \"election\");\n                 }\n-                consumeTime -= sleepInterval;\n+                long consumedTime = System.currentTimeMillis() - beginTime;\n+                if (timeout > 0 && consumedTime >= timeout) {\n+                    throw new BackendException(\n+                              \"Wait raft group '{}' election timeout({}ms)\",\n+                              this.group(), \"\", consumedTime);\n+                }\n+                LOG.warn(\"Waiting raft group '{}' election cost {}s\",\n+                         this.group(), consumedTime / 1000.0);\n+            }\n+        }\n+    }\n+\n+    protected void waitStarted(int timeout) {\n+        ReadIndexClosure readIndexClosure = new ReadIndexClosure() {\n+            @Override\n+            public void run(Status status, long index, byte[] reqCtx) {\n+                if (status.isOk()) {\n+                    RaftNode.this.started = true;\n+                } else {\n+                    RaftNode.this.started = false;\n+                }\n+            }\n+        };\n+        long beginTime = System.currentTimeMillis();\n+        int internalTimeout = 3000;", "originalCommit": "fccc553c3cdcb3ee8ecaf1548c82104ddcd04fad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "338ca00aaa899173329c5d54e46ca61289374338", "changed_code": [{"header": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex e2c9f0ac..bbb0e913 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n", "chunk": "@@ -199,17 +198,16 @@ public class RaftNode {\n             }\n         };\n         long beginTime = System.currentTimeMillis();\n-        int internalTimeout = 3000;\n         while (true) {\n             this.node.readIndex(BytesUtil.EMPTY_BYTES, readIndexClosure);\n             if (this.started) {\n                 break;\n             }\n             try {\n-                Thread.sleep(internalTimeout);\n-            } catch (InterruptedException ex) {\n+                Thread.sleep(RaftSharedContext.POLL_INTERVAL);\n+            } catch (InterruptedException e) {\n                 throw new BackendException(\"Try to sleep a while for waiting \" +\n-                                           \"heartbeat is interrupted\");\n+                                           \"heartbeat is interrupted\", e);\n             }\n             long consumedTime = System.currentTimeMillis() - beginTime;\n             if (timeout > 0 && consumedTime >= timeout) {\n", "next_change": null}]}}, {"oid": "338ca00aaa899173329c5d54e46ca61289374338", "url": "https://github.com/hugegraph/hugegraph/commit/338ca00aaa899173329c5d54e46ca61289374338", "message": "tiny improve\n\nChange-Id: I1f191a261979a9ffe232827d0c639642547ba5b7", "committedDate": "2020-07-31T10:41:40Z", "type": "commit"}]}