{"pr_number": 6968, "pr_title": "allow changes to file metadata via API #6962", "pr_author": "pdurbin", "pr_createdAt": "2020-06-05T20:20:22Z", "pr_url": "https://github.com/IQSS/dataverse/pull/6968", "merge_commit": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "timeline": [{"oid": "809643a9bb72b8faf6fecd7d6e3ad1d52e9c4058", "url": "https://github.com/IQSS/dataverse/commit/809643a9bb72b8faf6fecd7d6e3ad1d52e9c4058", "message": "allow changes to file metadata via API #6962", "committedDate": "2020-06-05T20:14:27Z", "type": "commit"}, {"oid": "508e95c6b9b7e999b40dea4f903424a1afb8da71", "url": "https://github.com/IQSS/dataverse/commit/508e95c6b9b7e999b40dea4f903424a1afb8da71", "message": "allow file metadata changes if passing existing path/name #6962", "committedDate": "2020-06-08T16:27:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MjQ1Ng==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r436962456", "body": "does this do weird things if either one is null? i.e I would expect if you only passed on in, and it was the same, then there should be no labelChange, but I think the code for the equals would be false.", "bodyText": "does this do weird things if either one is null? i.e I would expect if you only passed on in, and it was the same, then there should be no labelChange, but I think the code for the equals would be false.", "bodyHTML": "<p dir=\"auto\">does this do weird things if either one is null? i.e I would expect if you only passed on in, and it was the same, then there should be no labelChange, but I think the code for the equals would be false.</p>", "author": "scolapasta", "createdAt": "2020-06-08T19:53:03Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/Files.java", "diffHunk": "@@ -392,14 +392,26 @@ public Response updateFileMetadata(@FormDataParam(\"jsonData\") String jsonData,\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n                 String label = jsonObject.getString(\"label\", null);\n                 String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                // If the user is trying to change the label/directoryLabel or not.\n+                boolean labelChange = true;\n+                if (label == null && directoryLabel == null) {\n+                    labelChange = false;\n+                }\n+                String oldLabel = df.getFileMetadata().getLabel();\n+                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String oldPathPlusName = oldDirectoryLabel + oldLabel;\n+                String incomingPathPlusName = directoryLabel + label;", "originalCommit": "508e95c6b9b7e999b40dea4f903424a1afb8da71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3NDE1NA==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r436974154", "bodyText": "I figured what matters in terms of if there was a change or not is if the \"path + filename\" is different, so that's what I'm comparing. No, weird things do not happen if one is null, according to my testing.", "author": "pdurbin", "createdAt": "2020-06-08T20:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MjQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MjMxNQ==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r436982315", "bodyText": "Sorry, maybe what I wrote wasn't clear, so let me use an example:\noldDirectory = \"directory\" and old label = \"label\"\nIf I only path in a label as \"label\" (i.e. no directory), I would expect it to allow it, as I am not changing anything. But the label check would compare \"directorylabel\" with \"nulllabel\" and so would run the check when it shouldn't.\nAlso if (for some reason) for new values you passed directory = \"director\" and label = \"ylabel\", the check would find them equal and so not check names, even though you are changing the names.\nSo the check also needs to have a \"/\" in there.", "author": "scolapasta", "createdAt": "2020-06-08T20:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MjQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1MDU4OQ==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r437550589", "bodyText": "Good catch. I fixed both of these.", "author": "pdurbin", "createdAt": "2020-06-09T16:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MjQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9954220a37fda04f5864fae9fbdfa9c77e558314", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 181aa1687d..30210a9d4c 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -400,20 +400,24 @@ public class Files extends AbstractApiBean {\n                 String oldLabel = df.getFileMetadata().getLabel();\n                 String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n                 String oldPathPlusName = oldDirectoryLabel + oldLabel;\n-                String incomingPathPlusName = directoryLabel + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                String path = \"\";\n-                if (directoryLabel != null) {\n-                    path = directoryLabel + \"/\";\n+                if (directoryLabel == null) {\n+                    directoryLabel = oldDirectoryLabel;\n                 }\n                 if (label == null) {\n                     label = oldLabel;\n                 }\n+                String incomingPathPlusName = directoryLabel + label;\n+                if (oldPathPlusName.equals(incomingPathPlusName)) {\n+                    labelChange = false;\n+                }\n                 if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String incomingPathPlusFileName = path + label;\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n+                    String pathPlusFilename = \"\";\n+                    if (directoryLabel != null) {\n+                        pathPlusFilename = directoryLabel + \"/\" + label;\n+                    } else {\n+                        pathPlusFilename = label;\n+                    }\n+                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n                 optionalFileParams.addOptionalParams(upFmd);\n", "next_change": {"commit": "2debed2d9cc0ee0996d9b53fa4dde0b0f13dbb11", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 30210a9d4c..7759761f35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,33 +390,20 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String label = jsonObject.getString(\"label\", null);\n-                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                // If the user is trying to change the label/directoryLabel or not.\n-                boolean labelChange = true;\n-                if (label == null && directoryLabel == null) {\n-                    labelChange = false;\n-                }\n-                String oldLabel = df.getFileMetadata().getLabel();\n-                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String oldPathPlusName = oldDirectoryLabel + oldLabel;\n-                if (directoryLabel == null) {\n-                    directoryLabel = oldDirectoryLabel;\n-                }\n-                if (label == null) {\n-                    label = oldLabel;\n-                }\n-                String incomingPathPlusName = directoryLabel + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String pathPlusFilename = \"\";\n-                    if (directoryLabel != null) {\n-                        pathPlusFilename = directoryLabel + \"/\" + label;\n-                    } else {\n-                        pathPlusFilename = label;\n+                String incomingLabel = jsonObject.getString(\"label\", null);\n+                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String existingLabel = df.getFileMetadata().getLabel();\n+                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n+                // We remove the current file from the list we'll check for duplicates.\n+                // Instead, the current file is passed in as pathPlusFilename.\n+                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n+                for (FileMetadata fileMetadata : fmdList) {\n+                    if (!fileMetadata.equals(df.getFileMetadata())) {\n+                        fmdListMinusCurrentFile.add(fileMetadata);\n                     }\n+                }\n+                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n                     return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 181aa1687d..7759761f35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,30 +390,21 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String label = jsonObject.getString(\"label\", null);\n-                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                // If the user is trying to change the label/directoryLabel or not.\n-                boolean labelChange = true;\n-                if (label == null && directoryLabel == null) {\n-                    labelChange = false;\n-                }\n-                String oldLabel = df.getFileMetadata().getLabel();\n-                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String oldPathPlusName = oldDirectoryLabel + oldLabel;\n-                String incomingPathPlusName = directoryLabel + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                String path = \"\";\n-                if (directoryLabel != null) {\n-                    path = directoryLabel + \"/\";\n-                }\n-                if (label == null) {\n-                    label = oldLabel;\n+                String incomingLabel = jsonObject.getString(\"label\", null);\n+                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String existingLabel = df.getFileMetadata().getLabel();\n+                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n+                // We remove the current file from the list we'll check for duplicates.\n+                // Instead, the current file is passed in as pathPlusFilename.\n+                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n+                for (FileMetadata fileMetadata : fmdList) {\n+                    if (!fileMetadata.equals(df.getFileMetadata())) {\n+                        fmdListMinusCurrentFile.add(fileMetadata);\n+                    }\n                 }\n-                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String incomingPathPlusFileName = path + label;\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n+                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n+                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n                 optionalFileParams.addOptionalParams(upFmd);\n", "next_change": {"commit": "cfe629d686f34c26622ae5a30f520115754be1bf", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 7759761f35..11616b7656 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,21 +390,18 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String incomingLabel = jsonObject.getString(\"label\", null);\n-                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                String existingLabel = df.getFileMetadata().getLabel();\n-                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n-                // We remove the current file from the list we'll check for duplicates.\n-                // Instead, the current file is passed in as pathPlusFilename.\n-                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n-                for (FileMetadata fileMetadata : fmdList) {\n-                    if (!fileMetadata.equals(df.getFileMetadata())) {\n-                        fmdListMinusCurrentFile.add(fileMetadata);\n-                    }\n+                String label = jsonObject.getString(\"label\", null);\n+                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String path = \"\";\n+                if (directoryLabel != null) {\n+                    path = directoryLabel + \"/\";\n+                }\n+                if (label == null) {\n+                    label = df.getFileMetadata().getLabel();\n                 }\n-                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n+                if (IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n+                    String incomingPathPlusFileName = path + label;\n+                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n                 }\n \n                 optionalFileParams.addOptionalParams(upFmd);\n", "next_change": {"commit": "17869df6c3eae4f2828685c67489417f4724de2b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 11616b7656..0d25b2be6b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -410,7 +410,7 @@ public class Files extends AbstractApiBean {\n \n             } catch (Exception e) {\n                 logger.log(Level.WARNING, \"Dataset publication finalization: exception while exporting:{0}\", e);\n-                return error(Response.Status.INTERNAL_SERVER_ERROR, \"Error adding metadata to DataFile\" + e);\n+                return error(Response.Status.INTERNAL_SERVER_ERROR, \"Error adding metadata to DataFile: \" + e);\n             }\n \n         } catch (WrappedResponse wr) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "message": "Merge commit", "committedDate": null}, {"oid": "cfe629d686f34c26622ae5a30f520115754be1bf", "committedDate": "2020-05-12 17:06:31 -0400", "message": "Merge branch 'develop' into 4813-allow-duplicate-files"}, {"oid": "17869df6c3eae4f2828685c67489417f4724de2b", "committedDate": "2020-05-18 16:52:24 -0400", "message": "#4813 fix failing test"}, {"oid": "9b4152ca5d10d074ca1437545ecdf71b8104f919", "committedDate": "2020-05-20 11:53:16 -0400", "message": "#4813 fix filemetadata testing"}, {"oid": "2d79816ec7d7e544c8cf9c870c8bb9698b618fcf", "committedDate": "2020-07-08 09:06:24 -0400", "message": "Merge branch 'develop' into 4813-allow-duplicate-files"}, {"oid": "d0bfd3d12af44455ea9fac21190d176025c0de77", "committedDate": "2020-07-30 14:39:54 -0400", "message": "#4813 removing out of date comments"}, {"oid": "4339eb8ad1a87efb05b2e58c251ab29807ef0761", "committedDate": "2021-01-12 12:07:55 -0500", "message": "remove worldmap/geoconnect #7409"}, {"oid": "878ef6fff6a27510b39cffb058b26afca31301c3", "committedDate": "2021-04-14 12:09:46 +0200", "message": "Merged back develop"}, {"oid": "83b21f01362eac9b2954b3c61d02a7f4689e3f73", "committedDate": "2021-05-26 15:10:25 +0200", "message": "DD-420 multi license UI (#73)"}, {"oid": "c10530ce764d5c67267958970dd6d9196e9a37ef", "committedDate": "2022-01-10 16:52:38 -0500", "message": "refactor to add license package"}, {"oid": "b6d170ba3dddf92f3b191cf92a8d391fe802c9ab", "committedDate": "2022-01-10 16:58:56 -0500", "message": "fix/simplify refactor"}, {"oid": "0fd56cf2be9ff2e5a1331605fb038f2488cc461c", "committedDate": "2022-08-09 14:34:42 -0400", "message": "minor error meg and comment changes"}, {"oid": "b79bec251b674224106b62850cbfce8ec6158fa6", "committedDate": "2022-09-08 13:22:12 -0400", "message": "#8859 have restrict file api return conflict if out of compliance"}, {"oid": "d2ac6b6c166e9ffced16872a32b0a20ba47f78e6", "committedDate": "2022-09-09 10:51:43 -0400", "message": "#8859 don't rely on error msg for conflict status"}, {"oid": "2aeb457371061bea4346f2fef3bd2a24c6472e00", "committedDate": "2022-09-19 16:09:14 -0400", "message": "#8859 get message directly from bundle"}, {"oid": "a413a13f3a04c2dca2e2c39d80791f1cf47a939a", "committedDate": "2022-09-27 12:52:06 -0400", "message": "add tool callback methods for dataset and datafile"}, {"oid": "3ea4e92b48452c3785f3e7c60df4acdf40f8bd1e", "committedDate": "2022-09-30 09:21:16 -0400", "message": "todo is done"}, {"oid": "e06ec36b2a4a78e8c64e42858542faaccf62841b", "committedDate": "2022-09-30 10:04:55 -0400", "message": "Add /replaceFiles call"}, {"oid": "4b0d36596835333bf5c528e3659b8a5bbef5ed60", "committedDate": "2022-11-07 14:10:25 -0500", "message": "rename getEditVersion to getOrCreateEditVersion #8930"}, {"oid": "559e5c5aa7acc885064001fb6c93871bb2df3296", "committedDate": "2022-11-10 13:48:51 -0500", "message": "Merge branch 'develop' into 7715-signed-urls-for-external-tools #7715"}, {"oid": "fbf7190f193fb5d65dc6c100d7bb6c2d62dd1b0e", "committedDate": "2022-11-23 09:45:40 -0500", "message": "Improved error handling per QA"}, {"oid": "398fd4819f74241a0db3a458b74515f7688aacce", "committedDate": "2022-11-28 14:00:57 -0500", "message": "Improve error handling"}, {"oid": "233926e4cff9bd24d2af90e86391b77b147b42b9", "committedDate": "2022-12-13 12:48:18 -0500", "message": "Merge remote-tracking branch 'IQSS/develop' into GDCC/9005-replaceFiles_api_call"}, {"oid": "6b0b40abd3b1acfc4239d3cbbed41e314a6325f3", "committedDate": "2022-12-22 09:37:40 -0500", "message": "#8339 prelim checkin"}, {"oid": "e73fd93bb36182144a85a2e6ce5aeb9884af6e2b", "committedDate": "2023-01-05 15:10:56 -0500", "message": "Fix bug found in QA"}, {"oid": "e2066c854c534193b9fa9651a6a02bae82857e07", "committedDate": "2023-01-05 16:09:55 -0500", "message": "add extractNcml API endpoint #9153"}, {"oid": "268fb3ef784903350de4609e3d68f7259aecdeee", "committedDate": "2023-01-05 16:43:39 -0500", "message": "#8339 add tests/handle draft"}, {"oid": "072f0273243c58b74c0ea9e5141c0797a634cf50", "committedDate": "2023-01-06 09:33:29 -0500", "message": "#8339 clean up some code"}, {"oid": "a2676e7e0dd0dc91c354ea7c54ea1eeaf525b96a", "committedDate": "2023-01-06 14:24:20 -0500", "message": "#8339 fix response/add tests"}, {"oid": "adf2a66d65adbd8c34b35d8db881222ac55062bf", "committedDate": "2023-01-11 09:37:57 -0500", "message": "Merge branch 'develop' into 8339-file-data-api #8339"}, {"oid": "c59bacee2e9608d897e9c243b9d548b05b4327d2", "committedDate": "2023-01-11 10:01:48 -0500", "message": "remove cruft #8339"}, {"oid": "17f563be38c477efb03bb6134e0a1cd987570606", "committedDate": "2023-01-11 17:43:12 -0500", "message": "Merge branch 'develop' into 9153-extract-metadata #9153"}, {"oid": "10eb01a7ab0070a82b4a839a94dcd52ef0f6f13d", "committedDate": "2023-01-20 11:52:20 -0500", "message": "Merge branch 'develop' into 8339-file-data-api"}, {"oid": "6873ad90f9760c3de35178a761568127b16004b8", "committedDate": "2023-01-23 16:08:03 -0500", "message": "#8339 allow drafts; fix bundle"}, {"oid": "399daebddf8d4f2d09a4a00817ddfa2e976995cb", "committedDate": "2023-01-24 11:45:47 -0500", "message": "Fix for #9280"}, {"oid": "c1b7dfb3a8bd3633d62c192b4d35a9ac06f65c87", "committedDate": "2023-01-25 12:05:20 -0500", "message": "#8339 adding debug statements"}, {"oid": "2d66d7b8209eedc6d05229396ac29b4ca1463671", "committedDate": "2023-01-25 13:17:21 -0500", "message": "#8339 more debug..."}, {"oid": "f9739502efa4ce42202f3b1b56e780e94c08b3c1", "committedDate": "2023-01-25 14:11:02 -0500", "message": "#8339 get description from file metadata passed in"}, {"oid": "f1c5f4423f8ef8fec4795f626e3e46b9e1a63e96", "committedDate": "2023-01-26 13:13:42 -0500", "message": "Merge remote-tracking branch 'IQSS/develop' into sonarcube"}, {"oid": "a3f8c4ed81d05d9e5a50c6f136316837e6b2bc2d", "committedDate": "2023-01-27 11:40:49 +0000", "message": "Fixed: failing call due to relocated constant"}, {"oid": "b3921a45b0360906eff808a9f838a4aaa130a26d", "committedDate": "2023-01-31 12:43:54 +0100", "message": "Refactor: using new filter-based auth on files endpoints"}, {"oid": "36dbd9b666022d647cac9aa2f92d99def0d7a0fa", "committedDate": "2023-01-31 15:25:26 +0100", "message": "Refactor: changed to filter-based auth from direct findAuthenticatedUserOrDie calls in API endpoint methods"}, {"oid": "1304ed6ed78478a13e526f2f72ba3fd8e5cca2f8", "committedDate": "2023-02-02 10:52:51 +0000", "message": "Refactor: replaced rest of findUserOrDie calls and removed the method from AbstractApiBean in addition to its associated methods"}, {"oid": "3c5aa0ee1a8049e300af549eca5adc7b2ff1fe80", "committedDate": "2023-02-10 18:05:12 +0100", "message": "Support for deleting files using native API"}, {"oid": "4d30879709c796f84ea2d3976854abdaf8eb3537", "committedDate": "2023-02-10 19:17:01 +0100", "message": "more informative error messages"}, {"oid": "8f125ddc483251d6f8351f8272feee1818b86c0d", "committedDate": "2023-02-10 19:33:48 +0100", "message": "removed unused getUser() call"}, {"oid": "cc1dfe6043b1355794b697a810f13f5856941fdf", "committedDate": "2023-03-13 10:39:37 +0100", "message": "Merge remote-tracking branch 'dataverse/develop' into 3913_delete_file_endpoint"}, {"oid": "a4304e203238396911335a59fd9ea3d205cbf9a4", "committedDate": "2023-03-13 10:47:57 +0100", "message": "added AuthRequired annotation and replaced get user method in delete dataset"}, {"oid": "78e1ff84f2155d6cb8aca16cef545b1273d89e43", "committedDate": "2023-03-13 10:59:44 +0100", "message": "rename: dvRequest2 -> dvRequest"}, {"oid": "75c898628e32551752a70345205f9e72c73d8b20", "committedDate": "2023-03-13 11:03:48 +0100", "message": "moved DataverseRequest creation"}, {"oid": "222b05220aa7b3a5478a2b57c66270dd04fb2190", "committedDate": "2023-03-13 11:07:11 +0100", "message": "removed the http upload enable check from the delete method"}, {"oid": "8a016c90e1bdb71b71e665a28c1c2f3ac4dc181f", "committedDate": "2023-03-15 12:24:10 -0400", "message": "clean up error handling, add more tests #3913"}, {"oid": "242d62c17ffd0b0f8cdc659973eb2b8399f1e836", "committedDate": "2023-03-24 15:35:43 +0100", "message": "fix for trying to delete already deleted metadata in file delete api call"}, {"oid": "c7b632aed2e3282614654cb833ffbed0c125a3c6", "committedDate": "2023-05-08 13:44:07 -0400", "message": "create spi pom, refactor exception, move code, add jar locally/as dep"}, {"oid": "38e71ebd164cdffe89c06a57adadb2d3a6ec63c2", "committedDate": "2023-05-09 16:32:22 -0400", "message": "use io.gdcc package, use artifact name for dir"}, {"oid": "fa0e28124a15b0db8042959b9fee536591f26f8d", "committedDate": "2023-05-10 12:19:26 -0400", "message": "naming changes per review"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MzEyNg==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r436963126", "body": "if directoryLabel is not passed in, do we want path to be \"\"? or keep the old value (as you do with label)?", "bodyText": "if directoryLabel is not passed in, do we want path to be \"\"? or keep the old value (as you do with label)?", "bodyHTML": "<p dir=\"auto\">if directoryLabel is not passed in, do we want path to be \"\"? or keep the old value (as you do with label)?</p>", "author": "scolapasta", "createdAt": "2020-06-08T19:54:20Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/Files.java", "diffHunk": "@@ -392,14 +392,26 @@ public Response updateFileMetadata(@FormDataParam(\"jsonData\") String jsonData,\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n                 String label = jsonObject.getString(\"label\", null);\n                 String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                // If the user is trying to change the label/directoryLabel or not.\n+                boolean labelChange = true;\n+                if (label == null && directoryLabel == null) {\n+                    labelChange = false;\n+                }\n+                String oldLabel = df.getFileMetadata().getLabel();\n+                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String oldPathPlusName = oldDirectoryLabel + oldLabel;\n+                String incomingPathPlusName = directoryLabel + label;\n+                if (oldPathPlusName.equals(incomingPathPlusName)) {\n+                    labelChange = false;\n+                }\n                 String path = \"\";\n                 if (directoryLabel != null) {\n                     path = directoryLabel + \"/\";\n                 }\n                 if (label == null) {\n-                    label = df.getFileMetadata().getLabel();\n+                    label = oldLabel;\n                 }\n-                if (IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {", "originalCommit": "508e95c6b9b7e999b40dea4f903424a1afb8da71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3MjQzNw==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r436972437", "bodyText": "path is only used in the error message...\n\n\"Filename already exists at README.md\"\n\"Filename already exists at code/README.md\"\n\n... and I'm happy with how it works. So yes, I think leaving it as \"\" (empty string) is fine.", "author": "pdurbin", "createdAt": "2020-06-08T20:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MzEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NDgyMQ==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r436984821", "bodyText": "Sorry path confused me here, what I'm getting it is:\nWhy don't we have have a\nif (directoryLabel == null) { directoryLabel = oldDrectorylLabel; }\nlike with label, otherwise null gets passed into the directory+name check, no? (and if we did this, we could really get rid of path altogether and just use directoryLabel + /. And this way if directorLabel were null, we would get a more accurate message anyway:\n\"Filename already exists at code/README.md\", when \"Filename already exists at README.md\" isn't accurate?", "author": "scolapasta", "createdAt": "2020-06-08T20:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MzEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1MTA0Nw==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r437551047", "bodyText": "I got rid of the extra path variable and made sure the messages are accurate.", "author": "pdurbin", "createdAt": "2020-06-09T16:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MzEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "9954220a37fda04f5864fae9fbdfa9c77e558314", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 181aa1687d..30210a9d4c 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -400,20 +400,24 @@ public class Files extends AbstractApiBean {\n                 String oldLabel = df.getFileMetadata().getLabel();\n                 String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n                 String oldPathPlusName = oldDirectoryLabel + oldLabel;\n-                String incomingPathPlusName = directoryLabel + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                String path = \"\";\n-                if (directoryLabel != null) {\n-                    path = directoryLabel + \"/\";\n+                if (directoryLabel == null) {\n+                    directoryLabel = oldDirectoryLabel;\n                 }\n                 if (label == null) {\n                     label = oldLabel;\n                 }\n+                String incomingPathPlusName = directoryLabel + label;\n+                if (oldPathPlusName.equals(incomingPathPlusName)) {\n+                    labelChange = false;\n+                }\n                 if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String incomingPathPlusFileName = path + label;\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n+                    String pathPlusFilename = \"\";\n+                    if (directoryLabel != null) {\n+                        pathPlusFilename = directoryLabel + \"/\" + label;\n+                    } else {\n+                        pathPlusFilename = label;\n+                    }\n+                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n                 optionalFileParams.addOptionalParams(upFmd);\n", "next_change": {"commit": "2debed2d9cc0ee0996d9b53fa4dde0b0f13dbb11", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 30210a9d4c..7759761f35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,33 +390,20 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String label = jsonObject.getString(\"label\", null);\n-                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                // If the user is trying to change the label/directoryLabel or not.\n-                boolean labelChange = true;\n-                if (label == null && directoryLabel == null) {\n-                    labelChange = false;\n-                }\n-                String oldLabel = df.getFileMetadata().getLabel();\n-                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String oldPathPlusName = oldDirectoryLabel + oldLabel;\n-                if (directoryLabel == null) {\n-                    directoryLabel = oldDirectoryLabel;\n-                }\n-                if (label == null) {\n-                    label = oldLabel;\n-                }\n-                String incomingPathPlusName = directoryLabel + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String pathPlusFilename = \"\";\n-                    if (directoryLabel != null) {\n-                        pathPlusFilename = directoryLabel + \"/\" + label;\n-                    } else {\n-                        pathPlusFilename = label;\n+                String incomingLabel = jsonObject.getString(\"label\", null);\n+                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String existingLabel = df.getFileMetadata().getLabel();\n+                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n+                // We remove the current file from the list we'll check for duplicates.\n+                // Instead, the current file is passed in as pathPlusFilename.\n+                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n+                for (FileMetadata fileMetadata : fmdList) {\n+                    if (!fileMetadata.equals(df.getFileMetadata())) {\n+                        fmdListMinusCurrentFile.add(fileMetadata);\n                     }\n+                }\n+                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n                     return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 181aa1687d..7759761f35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,30 +390,21 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String label = jsonObject.getString(\"label\", null);\n-                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                // If the user is trying to change the label/directoryLabel or not.\n-                boolean labelChange = true;\n-                if (label == null && directoryLabel == null) {\n-                    labelChange = false;\n-                }\n-                String oldLabel = df.getFileMetadata().getLabel();\n-                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String oldPathPlusName = oldDirectoryLabel + oldLabel;\n-                String incomingPathPlusName = directoryLabel + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                String path = \"\";\n-                if (directoryLabel != null) {\n-                    path = directoryLabel + \"/\";\n-                }\n-                if (label == null) {\n-                    label = oldLabel;\n+                String incomingLabel = jsonObject.getString(\"label\", null);\n+                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String existingLabel = df.getFileMetadata().getLabel();\n+                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n+                // We remove the current file from the list we'll check for duplicates.\n+                // Instead, the current file is passed in as pathPlusFilename.\n+                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n+                for (FileMetadata fileMetadata : fmdList) {\n+                    if (!fileMetadata.equals(df.getFileMetadata())) {\n+                        fmdListMinusCurrentFile.add(fileMetadata);\n+                    }\n                 }\n-                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String incomingPathPlusFileName = path + label;\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n+                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n+                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n                 optionalFileParams.addOptionalParams(upFmd);\n", "next_change": {"commit": "cfe629d686f34c26622ae5a30f520115754be1bf", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 7759761f35..11616b7656 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,21 +390,18 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String incomingLabel = jsonObject.getString(\"label\", null);\n-                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                String existingLabel = df.getFileMetadata().getLabel();\n-                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n-                // We remove the current file from the list we'll check for duplicates.\n-                // Instead, the current file is passed in as pathPlusFilename.\n-                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n-                for (FileMetadata fileMetadata : fmdList) {\n-                    if (!fileMetadata.equals(df.getFileMetadata())) {\n-                        fmdListMinusCurrentFile.add(fileMetadata);\n-                    }\n+                String label = jsonObject.getString(\"label\", null);\n+                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String path = \"\";\n+                if (directoryLabel != null) {\n+                    path = directoryLabel + \"/\";\n+                }\n+                if (label == null) {\n+                    label = df.getFileMetadata().getLabel();\n                 }\n-                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n+                if (IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n+                    String incomingPathPlusFileName = path + label;\n+                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n                 }\n \n                 optionalFileParams.addOptionalParams(upFmd);\n", "next_change": {"commit": "17869df6c3eae4f2828685c67489417f4724de2b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 11616b7656..0d25b2be6b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -410,7 +410,7 @@ public class Files extends AbstractApiBean {\n \n             } catch (Exception e) {\n                 logger.log(Level.WARNING, \"Dataset publication finalization: exception while exporting:{0}\", e);\n-                return error(Response.Status.INTERNAL_SERVER_ERROR, \"Error adding metadata to DataFile\" + e);\n+                return error(Response.Status.INTERNAL_SERVER_ERROR, \"Error adding metadata to DataFile: \" + e);\n             }\n \n         } catch (WrappedResponse wr) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "message": "Merge commit", "committedDate": null}, {"oid": "cfe629d686f34c26622ae5a30f520115754be1bf", "committedDate": "2020-05-12 17:06:31 -0400", "message": "Merge branch 'develop' into 4813-allow-duplicate-files"}, {"oid": "17869df6c3eae4f2828685c67489417f4724de2b", "committedDate": "2020-05-18 16:52:24 -0400", "message": "#4813 fix failing test"}, {"oid": "9b4152ca5d10d074ca1437545ecdf71b8104f919", "committedDate": "2020-05-20 11:53:16 -0400", "message": "#4813 fix filemetadata testing"}, {"oid": "2d79816ec7d7e544c8cf9c870c8bb9698b618fcf", "committedDate": "2020-07-08 09:06:24 -0400", "message": "Merge branch 'develop' into 4813-allow-duplicate-files"}, {"oid": "d0bfd3d12af44455ea9fac21190d176025c0de77", "committedDate": "2020-07-30 14:39:54 -0400", "message": "#4813 removing out of date comments"}, {"oid": "4339eb8ad1a87efb05b2e58c251ab29807ef0761", "committedDate": "2021-01-12 12:07:55 -0500", "message": "remove worldmap/geoconnect #7409"}, {"oid": "878ef6fff6a27510b39cffb058b26afca31301c3", "committedDate": "2021-04-14 12:09:46 +0200", "message": "Merged back develop"}, {"oid": "83b21f01362eac9b2954b3c61d02a7f4689e3f73", "committedDate": "2021-05-26 15:10:25 +0200", "message": "DD-420 multi license UI (#73)"}, {"oid": "c10530ce764d5c67267958970dd6d9196e9a37ef", "committedDate": "2022-01-10 16:52:38 -0500", "message": "refactor to add license package"}, {"oid": "b6d170ba3dddf92f3b191cf92a8d391fe802c9ab", "committedDate": "2022-01-10 16:58:56 -0500", "message": "fix/simplify refactor"}, {"oid": "0fd56cf2be9ff2e5a1331605fb038f2488cc461c", "committedDate": "2022-08-09 14:34:42 -0400", "message": "minor error meg and comment changes"}, {"oid": "b79bec251b674224106b62850cbfce8ec6158fa6", "committedDate": "2022-09-08 13:22:12 -0400", "message": "#8859 have restrict file api return conflict if out of compliance"}, {"oid": "d2ac6b6c166e9ffced16872a32b0a20ba47f78e6", "committedDate": "2022-09-09 10:51:43 -0400", "message": "#8859 don't rely on error msg for conflict status"}, {"oid": "2aeb457371061bea4346f2fef3bd2a24c6472e00", "committedDate": "2022-09-19 16:09:14 -0400", "message": "#8859 get message directly from bundle"}, {"oid": "a413a13f3a04c2dca2e2c39d80791f1cf47a939a", "committedDate": "2022-09-27 12:52:06 -0400", "message": "add tool callback methods for dataset and datafile"}, {"oid": "3ea4e92b48452c3785f3e7c60df4acdf40f8bd1e", "committedDate": "2022-09-30 09:21:16 -0400", "message": "todo is done"}, {"oid": "e06ec36b2a4a78e8c64e42858542faaccf62841b", "committedDate": "2022-09-30 10:04:55 -0400", "message": "Add /replaceFiles call"}, {"oid": "4b0d36596835333bf5c528e3659b8a5bbef5ed60", "committedDate": "2022-11-07 14:10:25 -0500", "message": "rename getEditVersion to getOrCreateEditVersion #8930"}, {"oid": "559e5c5aa7acc885064001fb6c93871bb2df3296", "committedDate": "2022-11-10 13:48:51 -0500", "message": "Merge branch 'develop' into 7715-signed-urls-for-external-tools #7715"}, {"oid": "fbf7190f193fb5d65dc6c100d7bb6c2d62dd1b0e", "committedDate": "2022-11-23 09:45:40 -0500", "message": "Improved error handling per QA"}, {"oid": "398fd4819f74241a0db3a458b74515f7688aacce", "committedDate": "2022-11-28 14:00:57 -0500", "message": "Improve error handling"}, {"oid": "233926e4cff9bd24d2af90e86391b77b147b42b9", "committedDate": "2022-12-13 12:48:18 -0500", "message": "Merge remote-tracking branch 'IQSS/develop' into GDCC/9005-replaceFiles_api_call"}, {"oid": "6b0b40abd3b1acfc4239d3cbbed41e314a6325f3", "committedDate": "2022-12-22 09:37:40 -0500", "message": "#8339 prelim checkin"}, {"oid": "e73fd93bb36182144a85a2e6ce5aeb9884af6e2b", "committedDate": "2023-01-05 15:10:56 -0500", "message": "Fix bug found in QA"}, {"oid": "e2066c854c534193b9fa9651a6a02bae82857e07", "committedDate": "2023-01-05 16:09:55 -0500", "message": "add extractNcml API endpoint #9153"}, {"oid": "268fb3ef784903350de4609e3d68f7259aecdeee", "committedDate": "2023-01-05 16:43:39 -0500", "message": "#8339 add tests/handle draft"}, {"oid": "072f0273243c58b74c0ea9e5141c0797a634cf50", "committedDate": "2023-01-06 09:33:29 -0500", "message": "#8339 clean up some code"}, {"oid": "a2676e7e0dd0dc91c354ea7c54ea1eeaf525b96a", "committedDate": "2023-01-06 14:24:20 -0500", "message": "#8339 fix response/add tests"}, {"oid": "adf2a66d65adbd8c34b35d8db881222ac55062bf", "committedDate": "2023-01-11 09:37:57 -0500", "message": "Merge branch 'develop' into 8339-file-data-api #8339"}, {"oid": "c59bacee2e9608d897e9c243b9d548b05b4327d2", "committedDate": "2023-01-11 10:01:48 -0500", "message": "remove cruft #8339"}, {"oid": "17f563be38c477efb03bb6134e0a1cd987570606", "committedDate": "2023-01-11 17:43:12 -0500", "message": "Merge branch 'develop' into 9153-extract-metadata #9153"}, {"oid": "10eb01a7ab0070a82b4a839a94dcd52ef0f6f13d", "committedDate": "2023-01-20 11:52:20 -0500", "message": "Merge branch 'develop' into 8339-file-data-api"}, {"oid": "6873ad90f9760c3de35178a761568127b16004b8", "committedDate": "2023-01-23 16:08:03 -0500", "message": "#8339 allow drafts; fix bundle"}, {"oid": "399daebddf8d4f2d09a4a00817ddfa2e976995cb", "committedDate": "2023-01-24 11:45:47 -0500", "message": "Fix for #9280"}, {"oid": "c1b7dfb3a8bd3633d62c192b4d35a9ac06f65c87", "committedDate": "2023-01-25 12:05:20 -0500", "message": "#8339 adding debug statements"}, {"oid": "2d66d7b8209eedc6d05229396ac29b4ca1463671", "committedDate": "2023-01-25 13:17:21 -0500", "message": "#8339 more debug..."}, {"oid": "f9739502efa4ce42202f3b1b56e780e94c08b3c1", "committedDate": "2023-01-25 14:11:02 -0500", "message": "#8339 get description from file metadata passed in"}, {"oid": "f1c5f4423f8ef8fec4795f626e3e46b9e1a63e96", "committedDate": "2023-01-26 13:13:42 -0500", "message": "Merge remote-tracking branch 'IQSS/develop' into sonarcube"}, {"oid": "a3f8c4ed81d05d9e5a50c6f136316837e6b2bc2d", "committedDate": "2023-01-27 11:40:49 +0000", "message": "Fixed: failing call due to relocated constant"}, {"oid": "b3921a45b0360906eff808a9f838a4aaa130a26d", "committedDate": "2023-01-31 12:43:54 +0100", "message": "Refactor: using new filter-based auth on files endpoints"}, {"oid": "36dbd9b666022d647cac9aa2f92d99def0d7a0fa", "committedDate": "2023-01-31 15:25:26 +0100", "message": "Refactor: changed to filter-based auth from direct findAuthenticatedUserOrDie calls in API endpoint methods"}, {"oid": "1304ed6ed78478a13e526f2f72ba3fd8e5cca2f8", "committedDate": "2023-02-02 10:52:51 +0000", "message": "Refactor: replaced rest of findUserOrDie calls and removed the method from AbstractApiBean in addition to its associated methods"}, {"oid": "3c5aa0ee1a8049e300af549eca5adc7b2ff1fe80", "committedDate": "2023-02-10 18:05:12 +0100", "message": "Support for deleting files using native API"}, {"oid": "4d30879709c796f84ea2d3976854abdaf8eb3537", "committedDate": "2023-02-10 19:17:01 +0100", "message": "more informative error messages"}, {"oid": "8f125ddc483251d6f8351f8272feee1818b86c0d", "committedDate": "2023-02-10 19:33:48 +0100", "message": "removed unused getUser() call"}, {"oid": "cc1dfe6043b1355794b697a810f13f5856941fdf", "committedDate": "2023-03-13 10:39:37 +0100", "message": "Merge remote-tracking branch 'dataverse/develop' into 3913_delete_file_endpoint"}, {"oid": "a4304e203238396911335a59fd9ea3d205cbf9a4", "committedDate": "2023-03-13 10:47:57 +0100", "message": "added AuthRequired annotation and replaced get user method in delete dataset"}, {"oid": "78e1ff84f2155d6cb8aca16cef545b1273d89e43", "committedDate": "2023-03-13 10:59:44 +0100", "message": "rename: dvRequest2 -> dvRequest"}, {"oid": "75c898628e32551752a70345205f9e72c73d8b20", "committedDate": "2023-03-13 11:03:48 +0100", "message": "moved DataverseRequest creation"}, {"oid": "222b05220aa7b3a5478a2b57c66270dd04fb2190", "committedDate": "2023-03-13 11:07:11 +0100", "message": "removed the http upload enable check from the delete method"}, {"oid": "8a016c90e1bdb71b71e665a28c1c2f3ac4dc181f", "committedDate": "2023-03-15 12:24:10 -0400", "message": "clean up error handling, add more tests #3913"}, {"oid": "242d62c17ffd0b0f8cdc659973eb2b8399f1e836", "committedDate": "2023-03-24 15:35:43 +0100", "message": "fix for trying to delete already deleted metadata in file delete api call"}, {"oid": "c7b632aed2e3282614654cb833ffbed0c125a3c6", "committedDate": "2023-05-08 13:44:07 -0400", "message": "create spi pom, refactor exception, move code, add jar locally/as dep"}, {"oid": "38e71ebd164cdffe89c06a57adadb2d3a6ec63c2", "committedDate": "2023-05-09 16:32:22 -0400", "message": "use io.gdcc package, use artifact name for dir"}, {"oid": "fa0e28124a15b0db8042959b9fee536591f26f8d", "committedDate": "2023-05-10 12:19:26 -0400", "message": "naming changes per review"}]}, {"oid": "9954220a37fda04f5864fae9fbdfa9c77e558314", "url": "https://github.com/IQSS/dataverse/commit/9954220a37fda04f5864fae9fbdfa9c77e558314", "message": "allow changes if dir exists and label passed, formatting #6962", "committedDate": "2020-06-09T15:59:23Z", "type": "commit"}, {"oid": "e5ec9bc3648a6521c0cf99401ce88704fad91645", "url": "https://github.com/IQSS/dataverse/commit/e5ec9bc3648a6521c0cf99401ce88704fad91645", "message": "avoid dir1 + file1 == dir + 1file1 (add \"/\") #6962", "committedDate": "2020-06-09T16:06:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNjE2Nw==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r437636167", "body": "Last suggested change - we can remove this check since it's handled by the code below (if both are null, they get populated with their old values). Simplifies the code for minimal \"cost\".", "bodyText": "Last suggested change - we can remove this check since it's handled by the code below (if both are null, they get populated with their old values). Simplifies the code for minimal \"cost\".", "bodyHTML": "<p dir=\"auto\">Last suggested change - we can remove this check since it's handled by the code below (if both are null, they get populated with their old values). Simplifies the code for minimal \"cost\".</p>", "author": "scolapasta", "createdAt": "2020-06-09T18:32:12Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/Files.java", "diffHunk": "@@ -392,16 +392,32 @@ public Response updateFileMetadata(@FormDataParam(\"jsonData\") String jsonData,\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n                 String label = jsonObject.getString(\"label\", null);\n                 String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                String path = \"\";\n-                if (directoryLabel != null) {\n-                    path = directoryLabel + \"/\";\n+                // If the user is trying to change the label/directoryLabel or not.\n+                boolean labelChange = true;\n+                if (label == null && directoryLabel == null) {", "originalCommit": "e5ec9bc3648a6521c0cf99401ce88704fad91645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwNTk4Nw==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r437705987", "bodyText": "Good idea. Removed in 491caff.", "author": "pdurbin", "createdAt": "2020-06-09T20:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNjE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "491caff845882885c084498890d0ab0fc7336a32", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 292da7ce0c..7506b448ed 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -394,9 +394,6 @@ public class Files extends AbstractApiBean {\n                 String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n                 // If the user is trying to change the label/directoryLabel or not.\n                 boolean labelChange = true;\n-                if (label == null && directoryLabel == null) {\n-                    labelChange = false;\n-                }\n                 String oldLabel = df.getFileMetadata().getLabel();\n                 String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n                 String oldPathPlusName = oldDirectoryLabel + \"/\" + oldLabel;\n", "next_change": {"commit": "2debed2d9cc0ee0996d9b53fa4dde0b0f13dbb11", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 7506b448ed..7759761f35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,30 +390,20 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String label = jsonObject.getString(\"label\", null);\n-                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                // If the user is trying to change the label/directoryLabel or not.\n-                boolean labelChange = true;\n-                String oldLabel = df.getFileMetadata().getLabel();\n-                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String oldPathPlusName = oldDirectoryLabel + \"/\" + oldLabel;\n-                if (directoryLabel == null) {\n-                    directoryLabel = oldDirectoryLabel;\n-                }\n-                if (label == null) {\n-                    label = oldLabel;\n-                }\n-                String incomingPathPlusName = directoryLabel + \"/\" + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String pathPlusFilename = \"\";\n-                    if (directoryLabel != null) {\n-                        pathPlusFilename = directoryLabel + \"/\" + label;\n-                    } else {\n-                        pathPlusFilename = label;\n+                String incomingLabel = jsonObject.getString(\"label\", null);\n+                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String existingLabel = df.getFileMetadata().getLabel();\n+                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n+                // We remove the current file from the list we'll check for duplicates.\n+                // Instead, the current file is passed in as pathPlusFilename.\n+                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n+                for (FileMetadata fileMetadata : fmdList) {\n+                    if (!fileMetadata.equals(df.getFileMetadata())) {\n+                        fmdListMinusCurrentFile.add(fileMetadata);\n                     }\n+                }\n+                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n                     return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 292da7ce0c..7759761f35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,33 +390,20 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String label = jsonObject.getString(\"label\", null);\n-                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                // If the user is trying to change the label/directoryLabel or not.\n-                boolean labelChange = true;\n-                if (label == null && directoryLabel == null) {\n-                    labelChange = false;\n-                }\n-                String oldLabel = df.getFileMetadata().getLabel();\n-                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String oldPathPlusName = oldDirectoryLabel + \"/\" + oldLabel;\n-                if (directoryLabel == null) {\n-                    directoryLabel = oldDirectoryLabel;\n-                }\n-                if (label == null) {\n-                    label = oldLabel;\n-                }\n-                String incomingPathPlusName = directoryLabel + \"/\" + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String pathPlusFilename = \"\";\n-                    if (directoryLabel != null) {\n-                        pathPlusFilename = directoryLabel + \"/\" + label;\n-                    } else {\n-                        pathPlusFilename = label;\n+                String incomingLabel = jsonObject.getString(\"label\", null);\n+                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String existingLabel = df.getFileMetadata().getLabel();\n+                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n+                // We remove the current file from the list we'll check for duplicates.\n+                // Instead, the current file is passed in as pathPlusFilename.\n+                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n+                for (FileMetadata fileMetadata : fmdList) {\n+                    if (!fileMetadata.equals(df.getFileMetadata())) {\n+                        fmdListMinusCurrentFile.add(fileMetadata);\n                     }\n+                }\n+                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n                     return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n", "next_change": {"commit": "cfe629d686f34c26622ae5a30f520115754be1bf", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 7759761f35..11616b7656 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,21 +390,18 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String incomingLabel = jsonObject.getString(\"label\", null);\n-                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                String existingLabel = df.getFileMetadata().getLabel();\n-                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n-                // We remove the current file from the list we'll check for duplicates.\n-                // Instead, the current file is passed in as pathPlusFilename.\n-                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n-                for (FileMetadata fileMetadata : fmdList) {\n-                    if (!fileMetadata.equals(df.getFileMetadata())) {\n-                        fmdListMinusCurrentFile.add(fileMetadata);\n-                    }\n+                String label = jsonObject.getString(\"label\", null);\n+                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String path = \"\";\n+                if (directoryLabel != null) {\n+                    path = directoryLabel + \"/\";\n+                }\n+                if (label == null) {\n+                    label = df.getFileMetadata().getLabel();\n                 }\n-                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n+                if (IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n+                    String incomingPathPlusFileName = path + label;\n+                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n                 }\n \n                 optionalFileParams.addOptionalParams(upFmd);\n", "next_change": {"commit": "17869df6c3eae4f2828685c67489417f4724de2b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 11616b7656..0d25b2be6b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -410,7 +410,7 @@ public class Files extends AbstractApiBean {\n \n             } catch (Exception e) {\n                 logger.log(Level.WARNING, \"Dataset publication finalization: exception while exporting:{0}\", e);\n-                return error(Response.Status.INTERNAL_SERVER_ERROR, \"Error adding metadata to DataFile\" + e);\n+                return error(Response.Status.INTERNAL_SERVER_ERROR, \"Error adding metadata to DataFile: \" + e);\n             }\n \n         } catch (WrappedResponse wr) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "message": "Merge commit", "committedDate": null}, {"oid": "cfe629d686f34c26622ae5a30f520115754be1bf", "committedDate": "2020-05-12 17:06:31 -0400", "message": "Merge branch 'develop' into 4813-allow-duplicate-files"}, {"oid": "17869df6c3eae4f2828685c67489417f4724de2b", "committedDate": "2020-05-18 16:52:24 -0400", "message": "#4813 fix failing test"}, {"oid": "9b4152ca5d10d074ca1437545ecdf71b8104f919", "committedDate": "2020-05-20 11:53:16 -0400", "message": "#4813 fix filemetadata testing"}, {"oid": "2d79816ec7d7e544c8cf9c870c8bb9698b618fcf", "committedDate": "2020-07-08 09:06:24 -0400", "message": "Merge branch 'develop' into 4813-allow-duplicate-files"}, {"oid": "d0bfd3d12af44455ea9fac21190d176025c0de77", "committedDate": "2020-07-30 14:39:54 -0400", "message": "#4813 removing out of date comments"}, {"oid": "4339eb8ad1a87efb05b2e58c251ab29807ef0761", "committedDate": "2021-01-12 12:07:55 -0500", "message": "remove worldmap/geoconnect #7409"}, {"oid": "878ef6fff6a27510b39cffb058b26afca31301c3", "committedDate": "2021-04-14 12:09:46 +0200", "message": "Merged back develop"}, {"oid": "83b21f01362eac9b2954b3c61d02a7f4689e3f73", "committedDate": "2021-05-26 15:10:25 +0200", "message": "DD-420 multi license UI (#73)"}, {"oid": "c10530ce764d5c67267958970dd6d9196e9a37ef", "committedDate": "2022-01-10 16:52:38 -0500", "message": "refactor to add license package"}, {"oid": "b6d170ba3dddf92f3b191cf92a8d391fe802c9ab", "committedDate": "2022-01-10 16:58:56 -0500", "message": "fix/simplify refactor"}, {"oid": "0fd56cf2be9ff2e5a1331605fb038f2488cc461c", "committedDate": "2022-08-09 14:34:42 -0400", "message": "minor error meg and comment changes"}, {"oid": "b79bec251b674224106b62850cbfce8ec6158fa6", "committedDate": "2022-09-08 13:22:12 -0400", "message": "#8859 have restrict file api return conflict if out of compliance"}, {"oid": "d2ac6b6c166e9ffced16872a32b0a20ba47f78e6", "committedDate": "2022-09-09 10:51:43 -0400", "message": "#8859 don't rely on error msg for conflict status"}, {"oid": "2aeb457371061bea4346f2fef3bd2a24c6472e00", "committedDate": "2022-09-19 16:09:14 -0400", "message": "#8859 get message directly from bundle"}, {"oid": "a413a13f3a04c2dca2e2c39d80791f1cf47a939a", "committedDate": "2022-09-27 12:52:06 -0400", "message": "add tool callback methods for dataset and datafile"}, {"oid": "3ea4e92b48452c3785f3e7c60df4acdf40f8bd1e", "committedDate": "2022-09-30 09:21:16 -0400", "message": "todo is done"}, {"oid": "e06ec36b2a4a78e8c64e42858542faaccf62841b", "committedDate": "2022-09-30 10:04:55 -0400", "message": "Add /replaceFiles call"}, {"oid": "4b0d36596835333bf5c528e3659b8a5bbef5ed60", "committedDate": "2022-11-07 14:10:25 -0500", "message": "rename getEditVersion to getOrCreateEditVersion #8930"}, {"oid": "559e5c5aa7acc885064001fb6c93871bb2df3296", "committedDate": "2022-11-10 13:48:51 -0500", "message": "Merge branch 'develop' into 7715-signed-urls-for-external-tools #7715"}, {"oid": "fbf7190f193fb5d65dc6c100d7bb6c2d62dd1b0e", "committedDate": "2022-11-23 09:45:40 -0500", "message": "Improved error handling per QA"}, {"oid": "398fd4819f74241a0db3a458b74515f7688aacce", "committedDate": "2022-11-28 14:00:57 -0500", "message": "Improve error handling"}, {"oid": "233926e4cff9bd24d2af90e86391b77b147b42b9", "committedDate": "2022-12-13 12:48:18 -0500", "message": "Merge remote-tracking branch 'IQSS/develop' into GDCC/9005-replaceFiles_api_call"}, {"oid": "6b0b40abd3b1acfc4239d3cbbed41e314a6325f3", "committedDate": "2022-12-22 09:37:40 -0500", "message": "#8339 prelim checkin"}, {"oid": "e73fd93bb36182144a85a2e6ce5aeb9884af6e2b", "committedDate": "2023-01-05 15:10:56 -0500", "message": "Fix bug found in QA"}, {"oid": "e2066c854c534193b9fa9651a6a02bae82857e07", "committedDate": "2023-01-05 16:09:55 -0500", "message": "add extractNcml API endpoint #9153"}, {"oid": "268fb3ef784903350de4609e3d68f7259aecdeee", "committedDate": "2023-01-05 16:43:39 -0500", "message": "#8339 add tests/handle draft"}, {"oid": "072f0273243c58b74c0ea9e5141c0797a634cf50", "committedDate": "2023-01-06 09:33:29 -0500", "message": "#8339 clean up some code"}, {"oid": "a2676e7e0dd0dc91c354ea7c54ea1eeaf525b96a", "committedDate": "2023-01-06 14:24:20 -0500", "message": "#8339 fix response/add tests"}, {"oid": "adf2a66d65adbd8c34b35d8db881222ac55062bf", "committedDate": "2023-01-11 09:37:57 -0500", "message": "Merge branch 'develop' into 8339-file-data-api #8339"}, {"oid": "c59bacee2e9608d897e9c243b9d548b05b4327d2", "committedDate": "2023-01-11 10:01:48 -0500", "message": "remove cruft #8339"}, {"oid": "17f563be38c477efb03bb6134e0a1cd987570606", "committedDate": "2023-01-11 17:43:12 -0500", "message": "Merge branch 'develop' into 9153-extract-metadata #9153"}, {"oid": "10eb01a7ab0070a82b4a839a94dcd52ef0f6f13d", "committedDate": "2023-01-20 11:52:20 -0500", "message": "Merge branch 'develop' into 8339-file-data-api"}, {"oid": "6873ad90f9760c3de35178a761568127b16004b8", "committedDate": "2023-01-23 16:08:03 -0500", "message": "#8339 allow drafts; fix bundle"}, {"oid": "399daebddf8d4f2d09a4a00817ddfa2e976995cb", "committedDate": "2023-01-24 11:45:47 -0500", "message": "Fix for #9280"}, {"oid": "c1b7dfb3a8bd3633d62c192b4d35a9ac06f65c87", "committedDate": "2023-01-25 12:05:20 -0500", "message": "#8339 adding debug statements"}, {"oid": "2d66d7b8209eedc6d05229396ac29b4ca1463671", "committedDate": "2023-01-25 13:17:21 -0500", "message": "#8339 more debug..."}, {"oid": "f9739502efa4ce42202f3b1b56e780e94c08b3c1", "committedDate": "2023-01-25 14:11:02 -0500", "message": "#8339 get description from file metadata passed in"}, {"oid": "f1c5f4423f8ef8fec4795f626e3e46b9e1a63e96", "committedDate": "2023-01-26 13:13:42 -0500", "message": "Merge remote-tracking branch 'IQSS/develop' into sonarcube"}, {"oid": "a3f8c4ed81d05d9e5a50c6f136316837e6b2bc2d", "committedDate": "2023-01-27 11:40:49 +0000", "message": "Fixed: failing call due to relocated constant"}, {"oid": "b3921a45b0360906eff808a9f838a4aaa130a26d", "committedDate": "2023-01-31 12:43:54 +0100", "message": "Refactor: using new filter-based auth on files endpoints"}, {"oid": "36dbd9b666022d647cac9aa2f92d99def0d7a0fa", "committedDate": "2023-01-31 15:25:26 +0100", "message": "Refactor: changed to filter-based auth from direct findAuthenticatedUserOrDie calls in API endpoint methods"}, {"oid": "1304ed6ed78478a13e526f2f72ba3fd8e5cca2f8", "committedDate": "2023-02-02 10:52:51 +0000", "message": "Refactor: replaced rest of findUserOrDie calls and removed the method from AbstractApiBean in addition to its associated methods"}, {"oid": "3c5aa0ee1a8049e300af549eca5adc7b2ff1fe80", "committedDate": "2023-02-10 18:05:12 +0100", "message": "Support for deleting files using native API"}, {"oid": "4d30879709c796f84ea2d3976854abdaf8eb3537", "committedDate": "2023-02-10 19:17:01 +0100", "message": "more informative error messages"}, {"oid": "8f125ddc483251d6f8351f8272feee1818b86c0d", "committedDate": "2023-02-10 19:33:48 +0100", "message": "removed unused getUser() call"}, {"oid": "cc1dfe6043b1355794b697a810f13f5856941fdf", "committedDate": "2023-03-13 10:39:37 +0100", "message": "Merge remote-tracking branch 'dataverse/develop' into 3913_delete_file_endpoint"}, {"oid": "a4304e203238396911335a59fd9ea3d205cbf9a4", "committedDate": "2023-03-13 10:47:57 +0100", "message": "added AuthRequired annotation and replaced get user method in delete dataset"}, {"oid": "78e1ff84f2155d6cb8aca16cef545b1273d89e43", "committedDate": "2023-03-13 10:59:44 +0100", "message": "rename: dvRequest2 -> dvRequest"}, {"oid": "75c898628e32551752a70345205f9e72c73d8b20", "committedDate": "2023-03-13 11:03:48 +0100", "message": "moved DataverseRequest creation"}, {"oid": "222b05220aa7b3a5478a2b57c66270dd04fb2190", "committedDate": "2023-03-13 11:07:11 +0100", "message": "removed the http upload enable check from the delete method"}, {"oid": "8a016c90e1bdb71b71e665a28c1c2f3ac4dc181f", "committedDate": "2023-03-15 12:24:10 -0400", "message": "clean up error handling, add more tests #3913"}, {"oid": "242d62c17ffd0b0f8cdc659973eb2b8399f1e836", "committedDate": "2023-03-24 15:35:43 +0100", "message": "fix for trying to delete already deleted metadata in file delete api call"}, {"oid": "c7b632aed2e3282614654cb833ffbed0c125a3c6", "committedDate": "2023-05-08 13:44:07 -0400", "message": "create spi pom, refactor exception, move code, add jar locally/as dep"}, {"oid": "38e71ebd164cdffe89c06a57adadb2d3a6ec63c2", "committedDate": "2023-05-09 16:32:22 -0400", "message": "use io.gdcc package, use artifact name for dir"}, {"oid": "fa0e28124a15b0db8042959b9fee536591f26f8d", "committedDate": "2023-05-10 12:19:26 -0400", "message": "naming changes per review"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzOTk3NQ==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r437639975", "body": "I know this is just for the error message, but why not just use \"incomingPathPlusName\" here?", "bodyText": "I know this is just for the error message, but why not just use \"incomingPathPlusName\" here?", "bodyHTML": "<p dir=\"auto\">I know this is just for the error message, but why not just use \"incomingPathPlusName\" here?</p>", "author": "scolapasta", "createdAt": "2020-06-09T18:39:10Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/Files.java", "diffHunk": "@@ -392,16 +392,32 @@ public Response updateFileMetadata(@FormDataParam(\"jsonData\") String jsonData,\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n                 String label = jsonObject.getString(\"label\", null);\n                 String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                String path = \"\";\n-                if (directoryLabel != null) {\n-                    path = directoryLabel + \"/\";\n+                // If the user is trying to change the label/directoryLabel or not.\n+                boolean labelChange = true;\n+                if (label == null && directoryLabel == null) {\n+                    labelChange = false;\n+                }\n+                String oldLabel = df.getFileMetadata().getLabel();\n+                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String oldPathPlusName = oldDirectoryLabel + \"/\" + oldLabel;\n+                if (directoryLabel == null) {\n+                    directoryLabel = oldDirectoryLabel;\n                 }\n                 if (label == null) {\n-                    label = df.getFileMetadata().getLabel();\n+                    label = oldLabel;\n+                }\n+                String incomingPathPlusName = directoryLabel + \"/\" + label;\n+                if (oldPathPlusName.equals(incomingPathPlusName)) {\n+                    labelChange = false;\n                 }\n-                if (IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String incomingPathPlusFileName = path + label;\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n+                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n+                    String pathPlusFilename = \"\";", "originalCommit": "e5ec9bc3648a6521c0cf99401ce88704fad91645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMjA5Ng==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r437702096", "bodyText": "Because if we do (I just tried), we get \"null/\" as part of the output. Tests fail with messages like this:\nExpected: Filename already exists at README.md\n  Actual: Filename already exists at null/README.md\n\nThat is to say, that code (below) is there to make sure there's no \"null/\" in the output, like above.\nString pathPlusFilename = \"\";\nif (directoryLabel != null) {\n    pathPlusFilename = directoryLabel + \"/\" + label;\n} else {\n    pathPlusFilename = label;\n}", "author": "pdurbin", "createdAt": "2020-06-09T20:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzOTk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a34d7c1a76d283fe195bcad57215ea12b920e340", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 292da7ce0c..c73ef1e47b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -410,6 +407,7 @@ public class Files extends AbstractApiBean {\n                 if (oldPathPlusName.equals(incomingPathPlusName)) {\n                     labelChange = false;\n                 }\n+                logger.fine(\"For file id \" + df.getId() + \" user is trying to change the label: \" + labelChange);\n                 if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n                     String pathPlusFilename = \"\";\n                     if (directoryLabel != null) {\n", "next_change": {"commit": "2debed2d9cc0ee0996d9b53fa4dde0b0f13dbb11", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex c73ef1e47b..7759761f35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,31 +390,20 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String label = jsonObject.getString(\"label\", null);\n-                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                // If the user is trying to change the label/directoryLabel or not.\n-                boolean labelChange = true;\n-                String oldLabel = df.getFileMetadata().getLabel();\n-                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String oldPathPlusName = oldDirectoryLabel + \"/\" + oldLabel;\n-                if (directoryLabel == null) {\n-                    directoryLabel = oldDirectoryLabel;\n-                }\n-                if (label == null) {\n-                    label = oldLabel;\n-                }\n-                String incomingPathPlusName = directoryLabel + \"/\" + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                logger.fine(\"For file id \" + df.getId() + \" user is trying to change the label: \" + labelChange);\n-                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String pathPlusFilename = \"\";\n-                    if (directoryLabel != null) {\n-                        pathPlusFilename = directoryLabel + \"/\" + label;\n-                    } else {\n-                        pathPlusFilename = label;\n+                String incomingLabel = jsonObject.getString(\"label\", null);\n+                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String existingLabel = df.getFileMetadata().getLabel();\n+                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n+                // We remove the current file from the list we'll check for duplicates.\n+                // Instead, the current file is passed in as pathPlusFilename.\n+                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n+                for (FileMetadata fileMetadata : fmdList) {\n+                    if (!fileMetadata.equals(df.getFileMetadata())) {\n+                        fmdListMinusCurrentFile.add(fileMetadata);\n                     }\n+                }\n+                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n                     return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 292da7ce0c..7759761f35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,33 +390,20 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String label = jsonObject.getString(\"label\", null);\n-                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                // If the user is trying to change the label/directoryLabel or not.\n-                boolean labelChange = true;\n-                if (label == null && directoryLabel == null) {\n-                    labelChange = false;\n-                }\n-                String oldLabel = df.getFileMetadata().getLabel();\n-                String oldDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String oldPathPlusName = oldDirectoryLabel + \"/\" + oldLabel;\n-                if (directoryLabel == null) {\n-                    directoryLabel = oldDirectoryLabel;\n-                }\n-                if (label == null) {\n-                    label = oldLabel;\n-                }\n-                String incomingPathPlusName = directoryLabel + \"/\" + label;\n-                if (oldPathPlusName.equals(incomingPathPlusName)) {\n-                    labelChange = false;\n-                }\n-                if (labelChange && IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n-                    String pathPlusFilename = \"\";\n-                    if (directoryLabel != null) {\n-                        pathPlusFilename = directoryLabel + \"/\" + label;\n-                    } else {\n-                        pathPlusFilename = label;\n+                String incomingLabel = jsonObject.getString(\"label\", null);\n+                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String existingLabel = df.getFileMetadata().getLabel();\n+                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n+                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n+                // We remove the current file from the list we'll check for duplicates.\n+                // Instead, the current file is passed in as pathPlusFilename.\n+                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n+                for (FileMetadata fileMetadata : fmdList) {\n+                    if (!fileMetadata.equals(df.getFileMetadata())) {\n+                        fmdListMinusCurrentFile.add(fileMetadata);\n                     }\n+                }\n+                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n                     return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n                 }\n \n", "next_change": {"commit": "cfe629d686f34c26622ae5a30f520115754be1bf", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 7759761f35..11616b7656 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -390,21 +390,18 @@ public class Files extends AbstractApiBean {\n \n                 JsonReader jsonReader = Json.createReader(new StringReader(jsonData));\n                 javax.json.JsonObject jsonObject = jsonReader.readObject();\n-                String incomingLabel = jsonObject.getString(\"label\", null);\n-                String incomingDirectoryLabel = jsonObject.getString(\"directoryLabel\", null);\n-                String existingLabel = df.getFileMetadata().getLabel();\n-                String existingDirectoryLabel = df.getFileMetadata().getDirectoryLabel();\n-                String pathPlusFilename = IngestUtil.getPathAndFileNameToCheck(incomingLabel, incomingDirectoryLabel, existingLabel, existingDirectoryLabel);\n-                // We remove the current file from the list we'll check for duplicates.\n-                // Instead, the current file is passed in as pathPlusFilename.\n-                List<FileMetadata> fmdListMinusCurrentFile = new ArrayList<>();\n-                for (FileMetadata fileMetadata : fmdList) {\n-                    if (!fileMetadata.equals(df.getFileMetadata())) {\n-                        fmdListMinusCurrentFile.add(fileMetadata);\n-                    }\n+                String label = jsonObject.getString(\"label\", null);\n+                String directoryLabel = jsonObject.getString(\"directoryLabel\", null);\n+                String path = \"\";\n+                if (directoryLabel != null) {\n+                    path = directoryLabel + \"/\";\n+                }\n+                if (label == null) {\n+                    label = df.getFileMetadata().getLabel();\n                 }\n-                if (IngestUtil.conflictsWithExistingFilenames(pathPlusFilename, fmdListMinusCurrentFile)) {\n-                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(pathPlusFilename)));\n+                if (IngestUtil.conflictsWithExistingFilenames(label, directoryLabel, fmdList, df)) {\n+                    String incomingPathPlusFileName = path + label;\n+                    return error(BAD_REQUEST, BundleUtil.getStringFromBundle(\"files.api.metadata.update.duplicateFile\", Arrays.asList(incomingPathPlusFileName)));\n                 }\n \n                 optionalFileParams.addOptionalParams(upFmd);\n", "next_change": {"commit": "17869df6c3eae4f2828685c67489417f4724de2b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Files.java b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\nindex 11616b7656..0d25b2be6b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Files.java\n", "chunk": "@@ -410,7 +410,7 @@ public class Files extends AbstractApiBean {\n \n             } catch (Exception e) {\n                 logger.log(Level.WARNING, \"Dataset publication finalization: exception while exporting:{0}\", e);\n-                return error(Response.Status.INTERNAL_SERVER_ERROR, \"Error adding metadata to DataFile\" + e);\n+                return error(Response.Status.INTERNAL_SERVER_ERROR, \"Error adding metadata to DataFile: \" + e);\n             }\n \n         } catch (WrappedResponse wr) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "message": "Merge commit", "committedDate": null}, {"oid": "cfe629d686f34c26622ae5a30f520115754be1bf", "committedDate": "2020-05-12 17:06:31 -0400", "message": "Merge branch 'develop' into 4813-allow-duplicate-files"}, {"oid": "17869df6c3eae4f2828685c67489417f4724de2b", "committedDate": "2020-05-18 16:52:24 -0400", "message": "#4813 fix failing test"}, {"oid": "9b4152ca5d10d074ca1437545ecdf71b8104f919", "committedDate": "2020-05-20 11:53:16 -0400", "message": "#4813 fix filemetadata testing"}, {"oid": "2d79816ec7d7e544c8cf9c870c8bb9698b618fcf", "committedDate": "2020-07-08 09:06:24 -0400", "message": "Merge branch 'develop' into 4813-allow-duplicate-files"}, {"oid": "d0bfd3d12af44455ea9fac21190d176025c0de77", "committedDate": "2020-07-30 14:39:54 -0400", "message": "#4813 removing out of date comments"}, {"oid": "4339eb8ad1a87efb05b2e58c251ab29807ef0761", "committedDate": "2021-01-12 12:07:55 -0500", "message": "remove worldmap/geoconnect #7409"}, {"oid": "878ef6fff6a27510b39cffb058b26afca31301c3", "committedDate": "2021-04-14 12:09:46 +0200", "message": "Merged back develop"}, {"oid": "83b21f01362eac9b2954b3c61d02a7f4689e3f73", "committedDate": "2021-05-26 15:10:25 +0200", "message": "DD-420 multi license UI (#73)"}, {"oid": "c10530ce764d5c67267958970dd6d9196e9a37ef", "committedDate": "2022-01-10 16:52:38 -0500", "message": "refactor to add license package"}, {"oid": "b6d170ba3dddf92f3b191cf92a8d391fe802c9ab", "committedDate": "2022-01-10 16:58:56 -0500", "message": "fix/simplify refactor"}, {"oid": "0fd56cf2be9ff2e5a1331605fb038f2488cc461c", "committedDate": "2022-08-09 14:34:42 -0400", "message": "minor error meg and comment changes"}, {"oid": "b79bec251b674224106b62850cbfce8ec6158fa6", "committedDate": "2022-09-08 13:22:12 -0400", "message": "#8859 have restrict file api return conflict if out of compliance"}, {"oid": "d2ac6b6c166e9ffced16872a32b0a20ba47f78e6", "committedDate": "2022-09-09 10:51:43 -0400", "message": "#8859 don't rely on error msg for conflict status"}, {"oid": "2aeb457371061bea4346f2fef3bd2a24c6472e00", "committedDate": "2022-09-19 16:09:14 -0400", "message": "#8859 get message directly from bundle"}, {"oid": "a413a13f3a04c2dca2e2c39d80791f1cf47a939a", "committedDate": "2022-09-27 12:52:06 -0400", "message": "add tool callback methods for dataset and datafile"}, {"oid": "3ea4e92b48452c3785f3e7c60df4acdf40f8bd1e", "committedDate": "2022-09-30 09:21:16 -0400", "message": "todo is done"}, {"oid": "e06ec36b2a4a78e8c64e42858542faaccf62841b", "committedDate": "2022-09-30 10:04:55 -0400", "message": "Add /replaceFiles call"}, {"oid": "4b0d36596835333bf5c528e3659b8a5bbef5ed60", "committedDate": "2022-11-07 14:10:25 -0500", "message": "rename getEditVersion to getOrCreateEditVersion #8930"}, {"oid": "559e5c5aa7acc885064001fb6c93871bb2df3296", "committedDate": "2022-11-10 13:48:51 -0500", "message": "Merge branch 'develop' into 7715-signed-urls-for-external-tools #7715"}, {"oid": "fbf7190f193fb5d65dc6c100d7bb6c2d62dd1b0e", "committedDate": "2022-11-23 09:45:40 -0500", "message": "Improved error handling per QA"}, {"oid": "398fd4819f74241a0db3a458b74515f7688aacce", "committedDate": "2022-11-28 14:00:57 -0500", "message": "Improve error handling"}, {"oid": "233926e4cff9bd24d2af90e86391b77b147b42b9", "committedDate": "2022-12-13 12:48:18 -0500", "message": "Merge remote-tracking branch 'IQSS/develop' into GDCC/9005-replaceFiles_api_call"}, {"oid": "6b0b40abd3b1acfc4239d3cbbed41e314a6325f3", "committedDate": "2022-12-22 09:37:40 -0500", "message": "#8339 prelim checkin"}, {"oid": "e73fd93bb36182144a85a2e6ce5aeb9884af6e2b", "committedDate": "2023-01-05 15:10:56 -0500", "message": "Fix bug found in QA"}, {"oid": "e2066c854c534193b9fa9651a6a02bae82857e07", "committedDate": "2023-01-05 16:09:55 -0500", "message": "add extractNcml API endpoint #9153"}, {"oid": "268fb3ef784903350de4609e3d68f7259aecdeee", "committedDate": "2023-01-05 16:43:39 -0500", "message": "#8339 add tests/handle draft"}, {"oid": "072f0273243c58b74c0ea9e5141c0797a634cf50", "committedDate": "2023-01-06 09:33:29 -0500", "message": "#8339 clean up some code"}, {"oid": "a2676e7e0dd0dc91c354ea7c54ea1eeaf525b96a", "committedDate": "2023-01-06 14:24:20 -0500", "message": "#8339 fix response/add tests"}, {"oid": "adf2a66d65adbd8c34b35d8db881222ac55062bf", "committedDate": "2023-01-11 09:37:57 -0500", "message": "Merge branch 'develop' into 8339-file-data-api #8339"}, {"oid": "c59bacee2e9608d897e9c243b9d548b05b4327d2", "committedDate": "2023-01-11 10:01:48 -0500", "message": "remove cruft #8339"}, {"oid": "17f563be38c477efb03bb6134e0a1cd987570606", "committedDate": "2023-01-11 17:43:12 -0500", "message": "Merge branch 'develop' into 9153-extract-metadata #9153"}, {"oid": "10eb01a7ab0070a82b4a839a94dcd52ef0f6f13d", "committedDate": "2023-01-20 11:52:20 -0500", "message": "Merge branch 'develop' into 8339-file-data-api"}, {"oid": "6873ad90f9760c3de35178a761568127b16004b8", "committedDate": "2023-01-23 16:08:03 -0500", "message": "#8339 allow drafts; fix bundle"}, {"oid": "399daebddf8d4f2d09a4a00817ddfa2e976995cb", "committedDate": "2023-01-24 11:45:47 -0500", "message": "Fix for #9280"}, {"oid": "c1b7dfb3a8bd3633d62c192b4d35a9ac06f65c87", "committedDate": "2023-01-25 12:05:20 -0500", "message": "#8339 adding debug statements"}, {"oid": "2d66d7b8209eedc6d05229396ac29b4ca1463671", "committedDate": "2023-01-25 13:17:21 -0500", "message": "#8339 more debug..."}, {"oid": "f9739502efa4ce42202f3b1b56e780e94c08b3c1", "committedDate": "2023-01-25 14:11:02 -0500", "message": "#8339 get description from file metadata passed in"}, {"oid": "f1c5f4423f8ef8fec4795f626e3e46b9e1a63e96", "committedDate": "2023-01-26 13:13:42 -0500", "message": "Merge remote-tracking branch 'IQSS/develop' into sonarcube"}, {"oid": "a3f8c4ed81d05d9e5a50c6f136316837e6b2bc2d", "committedDate": "2023-01-27 11:40:49 +0000", "message": "Fixed: failing call due to relocated constant"}, {"oid": "b3921a45b0360906eff808a9f838a4aaa130a26d", "committedDate": "2023-01-31 12:43:54 +0100", "message": "Refactor: using new filter-based auth on files endpoints"}, {"oid": "36dbd9b666022d647cac9aa2f92d99def0d7a0fa", "committedDate": "2023-01-31 15:25:26 +0100", "message": "Refactor: changed to filter-based auth from direct findAuthenticatedUserOrDie calls in API endpoint methods"}, {"oid": "1304ed6ed78478a13e526f2f72ba3fd8e5cca2f8", "committedDate": "2023-02-02 10:52:51 +0000", "message": "Refactor: replaced rest of findUserOrDie calls and removed the method from AbstractApiBean in addition to its associated methods"}, {"oid": "3c5aa0ee1a8049e300af549eca5adc7b2ff1fe80", "committedDate": "2023-02-10 18:05:12 +0100", "message": "Support for deleting files using native API"}, {"oid": "4d30879709c796f84ea2d3976854abdaf8eb3537", "committedDate": "2023-02-10 19:17:01 +0100", "message": "more informative error messages"}, {"oid": "8f125ddc483251d6f8351f8272feee1818b86c0d", "committedDate": "2023-02-10 19:33:48 +0100", "message": "removed unused getUser() call"}, {"oid": "cc1dfe6043b1355794b697a810f13f5856941fdf", "committedDate": "2023-03-13 10:39:37 +0100", "message": "Merge remote-tracking branch 'dataverse/develop' into 3913_delete_file_endpoint"}, {"oid": "a4304e203238396911335a59fd9ea3d205cbf9a4", "committedDate": "2023-03-13 10:47:57 +0100", "message": "added AuthRequired annotation and replaced get user method in delete dataset"}, {"oid": "78e1ff84f2155d6cb8aca16cef545b1273d89e43", "committedDate": "2023-03-13 10:59:44 +0100", "message": "rename: dvRequest2 -> dvRequest"}, {"oid": "75c898628e32551752a70345205f9e72c73d8b20", "committedDate": "2023-03-13 11:03:48 +0100", "message": "moved DataverseRequest creation"}, {"oid": "222b05220aa7b3a5478a2b57c66270dd04fb2190", "committedDate": "2023-03-13 11:07:11 +0100", "message": "removed the http upload enable check from the delete method"}, {"oid": "8a016c90e1bdb71b71e665a28c1c2f3ac4dc181f", "committedDate": "2023-03-15 12:24:10 -0400", "message": "clean up error handling, add more tests #3913"}, {"oid": "242d62c17ffd0b0f8cdc659973eb2b8399f1e836", "committedDate": "2023-03-24 15:35:43 +0100", "message": "fix for trying to delete already deleted metadata in file delete api call"}, {"oid": "c7b632aed2e3282614654cb833ffbed0c125a3c6", "committedDate": "2023-05-08 13:44:07 -0400", "message": "create spi pom, refactor exception, move code, add jar locally/as dep"}, {"oid": "38e71ebd164cdffe89c06a57adadb2d3a6ec63c2", "committedDate": "2023-05-09 16:32:22 -0400", "message": "use io.gdcc package, use artifact name for dir"}, {"oid": "fa0e28124a15b0db8042959b9fee536591f26f8d", "committedDate": "2023-05-10 12:19:26 -0400", "message": "naming changes per review"}]}, {"oid": "491caff845882885c084498890d0ab0fc7336a32", "url": "https://github.com/IQSS/dataverse/commit/491caff845882885c084498890d0ab0fc7336a32", "message": "eliminate code we don't need, handled elsewhere #6962\n\nIf null, populated by old values anyway.", "committedDate": "2020-06-09T20:41:04Z", "type": "commit"}, {"oid": "a34d7c1a76d283fe195bcad57215ea12b920e340", "url": "https://github.com/IQSS/dataverse/commit/a34d7c1a76d283fe195bcad57215ea12b920e340", "message": "ensure passing \"\" as directoryLabel doesn't cause problems #6962", "committedDate": "2020-06-10T15:16:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1NTM1Ng==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r438855356", "body": "The issue here is that if it gets to the conflictswithexisting stage and that returns false, I think we have a problem:\r\n\r\nif conflictswithexisting filenames returns false, it\u2019s because it\u2019s treating \u2018\u2019 and null differently, since the name is the same). So if you did the same thing, but actually changed the name of the file to a different file name that does exist? Wouldn\u2019t conflictswithexisting still return false then and allow you to rename to an already existing file.\r\n\r\nThe use case is you have two files:\r\n\u2022 the existing values are null for directory for both, names are file1 and file2\r\n\u2022 call the api to edit file1 with \u201c\u201d as directoryLabel and label as \u201cfile2\"\r\n\u2022 I\u2019m concerned that labelChange would be true and conflictswithexisting would be false and that would allow you to have the same null/file2 for both.", "bodyText": "The issue here is that if it gets to the conflictswithexisting stage and that returns false, I think we have a problem:\nif conflictswithexisting filenames returns false, it\u2019s because it\u2019s treating \u2018\u2019 and null differently, since the name is the same). So if you did the same thing, but actually changed the name of the file to a different file name that does exist? Wouldn\u2019t conflictswithexisting still return false then and allow you to rename to an already existing file.\nThe use case is you have two files:\n\u2022 the existing values are null for directory for both, names are file1 and file2\n\u2022 call the api to edit file1 with \u201c\u201d as directoryLabel and label as \u201cfile2\"\n\u2022 I\u2019m concerned that labelChange would be true and conflictswithexisting would be false and that would allow you to have the same null/file2 for both.", "bodyHTML": "<p dir=\"auto\">The issue here is that if it gets to the conflictswithexisting stage and that returns false, I think we have a problem:</p>\n<p dir=\"auto\">if conflictswithexisting filenames returns false, it\u2019s because it\u2019s treating \u2018\u2019 and null differently, since the name is the same). So if you did the same thing, but actually changed the name of the file to a different file name that does exist? Wouldn\u2019t conflictswithexisting still return false then and allow you to rename to an already existing file.</p>\n<p dir=\"auto\">The use case is you have two files:<br>\n\u2022 the existing values are null for directory for both, names are file1 and file2<br>\n\u2022 call the api to edit file1 with \u201c\u201d as directoryLabel and label as \u201cfile2\"<br>\n\u2022 I\u2019m concerned that labelChange would be true and conflictswithexisting would be false and that would allow you to have the same null/file2 for both.</p>", "author": "scolapasta", "createdAt": "2020-06-11T15:06:50Z", "path": "src/test/java/edu/harvard/iq/dataverse/api/DuplicateFilesIT.java", "diffHunk": "@@ -419,4 +420,77 @@ public void existingDirectoryPassLabelChangeDescription() throws IOException {\n \n     }\n \n+    /**\n+     * This test is for the following scenario.\n+     *\n+     * What if the database has null for the directoryLabel? What if you pass in\n+     * directory as \u201c\u201d (because you don\u2019t realize you can just not pass it).\n+     * when it check and compares, the old directory is null. so will that mean\n+     * labelChange = true and it will fail even though you didn\u2019t really change\n+     * the directory?\n+     *\n+     * While \"labelChange\" does end up being true,\n+     * IngestUtil.conflictsWithExistingFilenames returns false, so the change is\n+     * allowed to go through. The description is allowed to be changed and the\n+     * directoryLabel remains null even though the user passed in an empty\n+     * string, which is what we want.", "originalCommit": "a34d7c1a76d283fe195bcad57215ea12b920e340", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjMyMQ==", "url": "https://github.com/IQSS/dataverse/pull/6968#discussion_r438906321", "bodyText": "I'll add, one solution could be to not store null for directoryLabel ever. We could either store \"\" or even \"/\". This would also help in adding a unique constraint, since unique constraints are problematic with nulls.", "author": "scolapasta", "createdAt": "2020-06-11T16:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1NTM1Ng=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "bc06fe6e49816be0e31378434d3cdc6226336bc7", "message": "Merge commit", "committedDate": null}]}, {"oid": "2debed2d9cc0ee0996d9b53fa4dde0b0f13dbb11", "url": "https://github.com/IQSS/dataverse/commit/2debed2d9cc0ee0996d9b53fa4dde0b0f13dbb11", "message": "simply conflict-checking code #6962", "committedDate": "2020-06-15T16:08:31Z", "type": "commit"}]}