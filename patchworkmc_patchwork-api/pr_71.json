{"pr_number": 71, "pr_title": "DataGatherEvent + ExistingFileHelper", "pr_author": "Rongmario", "pr_createdAt": "2020-05-20T15:18:29Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/71", "timeline": [{"oid": "26ad79a6b998315acab109f4933121619f8cae47", "url": "https://github.com/PatchworkMC/patchwork-api/commit/26ad79a6b998315acab109f4933121619f8cae47", "message": "DataGatherEvent + ExistingFileHelper\n\n- DataGatherEvent in existing module `patchwork-events-lifecycle`\n- ExistingFileHelper in a new module `patchwork-model`\n- DataGatherEvent#DataGeneratorConfig#runAll is no-op for now.\n- Further decisions can be made, such as injecting into `net.minecraft.data.Main` for generating data with patchwork too?\n- Cleaned up comments", "committedDate": "2020-05-20T15:16:07Z", "type": "commit"}, {"oid": "c690287442a36c5a64d16f29304c43f475686057", "url": "https://github.com/PatchworkMC/patchwork-api/commit/c690287442a36c5a64d16f29304c43f475686057", "message": "Cleanup\n\n- In you go - `patchwork-data-generators`\n- Include run calls in runAll", "committedDate": "2020-05-20T16:41:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2OTIwNQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#discussion_r428169205", "body": "This field can be final too\r\n```suggestion\r\n\t\tprivate final List<DataGenerator> generators = new ArrayList<>();\r\n```", "bodyText": "This field can be final too\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tprivate List<DataGenerator> generators = new ArrayList<>();\n          \n          \n            \n            \t\tprivate final List<DataGenerator> generators = new ArrayList<>();", "bodyHTML": "<p dir=\"auto\">This field can be final too</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">DataGenerator</span>&gt;</span> generators <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-k\">List&lt;<span class=\"pl-smi\">DataGenerator</span>&gt;</span> generators <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "coderbot16", "createdAt": "2020-05-20T17:01:08Z", "path": "patchwork-data-generators/src/main/java/net/minecraftforge/fml/event/lifecycle/GatherDataEvent.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml.event.lifecycle;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.fml.ModContainer;\n+\n+import net.minecraft.data.DataGenerator;\n+\n+public class GatherDataEvent extends ModLifecycleEvent {\n+\tprivate final DataGenerator dataGenerator;\n+\tprivate final DataGeneratorConfig config;\n+\tprivate final ExistingFileHelper existingFileHelper;\n+\n+\tpublic GatherDataEvent(final ModContainer modContainer, final DataGenerator dataGenerator, final DataGeneratorConfig dataGeneratorConfig, ExistingFileHelper existingFileHelper) {\n+\t\tsuper(modContainer);\n+\t\tthis.dataGenerator = dataGenerator;\n+\t\tthis.config = dataGeneratorConfig;\n+\t\tthis.existingFileHelper = existingFileHelper;\n+\t}\n+\n+\tpublic DataGenerator getGenerator() {\n+\t\treturn this.dataGenerator;\n+\t}\n+\n+\tpublic ExistingFileHelper getExistingFileHelper() {\n+\t\treturn existingFileHelper;\n+\t}\n+\n+\tpublic boolean includeServer() {\n+\t\treturn this.config.server;\n+\t}\n+\n+\tpublic boolean includeClient() {\n+\t\treturn this.config.client;\n+\t}\n+\n+\tpublic boolean includeDev() {\n+\t\treturn this.config.dev;\n+\t}\n+\n+\tpublic boolean includeReports() {\n+\t\treturn this.config.reports;\n+\t}\n+\n+\tpublic boolean validate() {\n+\t\treturn this.config.validate;\n+\t}\n+\n+\tpublic static class DataGeneratorConfig {\n+\t\tprivate final Set<String> mods;\n+\t\tprivate final Path path;\n+\t\tprivate final Collection<Path> inputs;\n+\t\tprivate final boolean server;\n+\t\tprivate final boolean client;\n+\t\tprivate final boolean dev;\n+\t\tprivate final boolean reports;\n+\t\tprivate final boolean validate;\n+\t\tprivate List<DataGenerator> generators = new ArrayList<>();", "originalCommit": "c690287442a36c5a64d16f29304c43f475686057", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3MDE3Mw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#discussion_r428170173", "body": "It appears that the Forge implementation uses a [weird trick](https://stackoverflow.com/questions/27644361/how-can-i-throw-checked-exceptions-from-inside-java-8-streams/27644392#27644392) to throw this IOException in an unchecked manner. The way that it's done is kind of ugly though, I wonder if there's a way around it:\r\n\r\n```java\r\n@SuppressWarnings (\"unchecked\")\r\nprivate static <E extends Throwable> void throwAsUnchecked(Exception exception) throws E { throw (E)exception; }\r\n```\r\n\r\nTechnically we can just add a `throws IOException` on here since mods shouldn't be calling this method directly.", "bodyText": "It appears that the Forge implementation uses a weird trick to throw this IOException in an unchecked manner. The way that it's done is kind of ugly though, I wonder if there's a way around it:\n@SuppressWarnings (\"unchecked\")\nprivate static <E extends Throwable> void throwAsUnchecked(Exception exception) throws E { throw (E)exception; }\nTechnically we can just add a throws IOException on here since mods shouldn't be calling this method directly.", "bodyHTML": "<p dir=\"auto\">It appears that the Forge implementation uses a <a href=\"https://stackoverflow.com/questions/27644361/how-can-i-throw-checked-exceptions-from-inside-java-8-streams/27644392#27644392\" rel=\"nofollow\">weird trick</a> to throw this IOException in an unchecked manner. The way that it's done is kind of ugly though, I wonder if there's a way around it:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@SuppressWarnings (&quot;unchecked&quot;)\nprivate static &lt;E extends Throwable&gt; void throwAsUnchecked(Exception exception) throws E { throw (E)exception; }\"><pre><span class=\"pl-k\">@SuppressWarnings</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>unchecked<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">E</span> extends <span class=\"pl-smi\">Throwable</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">void</span> throwAsUnchecked(<span class=\"pl-smi\">Exception</span> exception) throws <span class=\"pl-smi\">E</span> { <span class=\"pl-k\">throw</span> (<span class=\"pl-smi\">E</span>)exception; }</pre></div>\n<p dir=\"auto\">Technically we can just add a <code>throws IOException</code> on here since mods shouldn't be calling this method directly.</p>", "author": "coderbot16", "createdAt": "2020-05-20T17:02:43Z", "path": "patchwork-data-generators/src/main/java/net/minecraftforge/fml/event/lifecycle/GatherDataEvent.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml.event.lifecycle;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.fml.ModContainer;\n+\n+import net.minecraft.data.DataGenerator;\n+\n+public class GatherDataEvent extends ModLifecycleEvent {\n+\tprivate final DataGenerator dataGenerator;\n+\tprivate final DataGeneratorConfig config;\n+\tprivate final ExistingFileHelper existingFileHelper;\n+\n+\tpublic GatherDataEvent(final ModContainer modContainer, final DataGenerator dataGenerator, final DataGeneratorConfig dataGeneratorConfig, ExistingFileHelper existingFileHelper) {\n+\t\tsuper(modContainer);\n+\t\tthis.dataGenerator = dataGenerator;\n+\t\tthis.config = dataGeneratorConfig;\n+\t\tthis.existingFileHelper = existingFileHelper;\n+\t}\n+\n+\tpublic DataGenerator getGenerator() {\n+\t\treturn this.dataGenerator;\n+\t}\n+\n+\tpublic ExistingFileHelper getExistingFileHelper() {\n+\t\treturn existingFileHelper;\n+\t}\n+\n+\tpublic boolean includeServer() {\n+\t\treturn this.config.server;\n+\t}\n+\n+\tpublic boolean includeClient() {\n+\t\treturn this.config.client;\n+\t}\n+\n+\tpublic boolean includeDev() {\n+\t\treturn this.config.dev;\n+\t}\n+\n+\tpublic boolean includeReports() {\n+\t\treturn this.config.reports;\n+\t}\n+\n+\tpublic boolean validate() {\n+\t\treturn this.config.validate;\n+\t}\n+\n+\tpublic static class DataGeneratorConfig {\n+\t\tprivate final Set<String> mods;\n+\t\tprivate final Path path;\n+\t\tprivate final Collection<Path> inputs;\n+\t\tprivate final boolean server;\n+\t\tprivate final boolean client;\n+\t\tprivate final boolean dev;\n+\t\tprivate final boolean reports;\n+\t\tprivate final boolean validate;\n+\t\tprivate List<DataGenerator> generators = new ArrayList<>();\n+\n+\t\tpublic DataGeneratorConfig(final Set<String> mods, final Path path, final Collection<Path> inputs, final boolean server, final boolean client, final boolean dev, final boolean reports, final boolean validate) {\n+\t\t\tthis.mods = mods;\n+\t\t\tthis.path = path;\n+\t\t\tthis.inputs = inputs;\n+\t\t\tthis.server = server;\n+\t\t\tthis.client = client;\n+\t\t\tthis.dev = dev;\n+\t\t\tthis.reports = reports;\n+\t\t\tthis.validate = validate;\n+\t\t}\n+\n+\t\tpublic Set<String> getMods() {\n+\t\t\treturn mods;\n+\t\t}\n+\n+\t\tpublic DataGenerator makeGenerator(final Function<Path, Path> pathEnhancer, final boolean shouldExecute) {\n+\t\t\tfinal DataGenerator generator = new DataGenerator(pathEnhancer.apply(path), inputs);\n+\t\t\tif (shouldExecute) generators.add(generator);\n+\t\t\treturn generator;\n+\t\t}\n+\n+\t\tpublic void runAll() {\n+\t\t\tfor (DataGenerator generator : generators) {\n+\t\t\t\ttry {\n+\t\t\t\t\tgenerator.run();\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\te.printStackTrace();", "originalCommit": "c690287442a36c5a64d16f29304c43f475686057", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Mzc5MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#discussion_r428173790", "body": "\r\n```suggestion\r\n\r\n\t\t\tif (shouldExecute) {\r\n\t\t\t\tgenerators.add(generator);\r\n\t\t\t}\r\n\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (shouldExecute) generators.add(generator);\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tif (shouldExecute) {\n          \n          \n            \n            \t\t\t\tgenerators.add(generator);\n          \n          \n            \n            \t\t\t}", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">\t\t\t</span><span class=\"pl-k x\">if</span><span class=\"x\"> (shouldExecute) generators</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">add(generator);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-k\">if</span> (shouldExecute) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\tgenerators<span class=\"pl-k\">.</span>add(generator);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "coderbot16", "createdAt": "2020-05-20T17:08:55Z", "path": "patchwork-data-generators/src/main/java/net/minecraftforge/fml/event/lifecycle/GatherDataEvent.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml.event.lifecycle;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.fml.ModContainer;\n+\n+import net.minecraft.data.DataGenerator;\n+\n+public class GatherDataEvent extends ModLifecycleEvent {\n+\tprivate final DataGenerator dataGenerator;\n+\tprivate final DataGeneratorConfig config;\n+\tprivate final ExistingFileHelper existingFileHelper;\n+\n+\tpublic GatherDataEvent(final ModContainer modContainer, final DataGenerator dataGenerator, final DataGeneratorConfig dataGeneratorConfig, ExistingFileHelper existingFileHelper) {\n+\t\tsuper(modContainer);\n+\t\tthis.dataGenerator = dataGenerator;\n+\t\tthis.config = dataGeneratorConfig;\n+\t\tthis.existingFileHelper = existingFileHelper;\n+\t}\n+\n+\tpublic DataGenerator getGenerator() {\n+\t\treturn this.dataGenerator;\n+\t}\n+\n+\tpublic ExistingFileHelper getExistingFileHelper() {\n+\t\treturn existingFileHelper;\n+\t}\n+\n+\tpublic boolean includeServer() {\n+\t\treturn this.config.server;\n+\t}\n+\n+\tpublic boolean includeClient() {\n+\t\treturn this.config.client;\n+\t}\n+\n+\tpublic boolean includeDev() {\n+\t\treturn this.config.dev;\n+\t}\n+\n+\tpublic boolean includeReports() {\n+\t\treturn this.config.reports;\n+\t}\n+\n+\tpublic boolean validate() {\n+\t\treturn this.config.validate;\n+\t}\n+\n+\tpublic static class DataGeneratorConfig {\n+\t\tprivate final Set<String> mods;\n+\t\tprivate final Path path;\n+\t\tprivate final Collection<Path> inputs;\n+\t\tprivate final boolean server;\n+\t\tprivate final boolean client;\n+\t\tprivate final boolean dev;\n+\t\tprivate final boolean reports;\n+\t\tprivate final boolean validate;\n+\t\tprivate List<DataGenerator> generators = new ArrayList<>();\n+\n+\t\tpublic DataGeneratorConfig(final Set<String> mods, final Path path, final Collection<Path> inputs, final boolean server, final boolean client, final boolean dev, final boolean reports, final boolean validate) {\n+\t\t\tthis.mods = mods;\n+\t\t\tthis.path = path;\n+\t\t\tthis.inputs = inputs;\n+\t\t\tthis.server = server;\n+\t\t\tthis.client = client;\n+\t\t\tthis.dev = dev;\n+\t\t\tthis.reports = reports;\n+\t\t\tthis.validate = validate;\n+\t\t}\n+\n+\t\tpublic Set<String> getMods() {\n+\t\t\treturn mods;\n+\t\t}\n+\n+\t\tpublic DataGenerator makeGenerator(final Function<Path, Path> pathEnhancer, final boolean shouldExecute) {\n+\t\t\tfinal DataGenerator generator = new DataGenerator(pathEnhancer.apply(path), inputs);\n+\t\t\tif (shouldExecute) generators.add(generator);", "originalCommit": "c690287442a36c5a64d16f29304c43f475686057", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be50efd351896e7679d29634f90848199ed10d98", "url": "https://github.com/PatchworkMC/patchwork-api/commit/be50efd351896e7679d29634f90848199ed10d98", "message": "Review Changes\n\n- Made it just 'Forge' to fit with other fabric.mod.json descriptions", "committedDate": "2020-05-20T17:33:43Z", "type": "commit"}]}