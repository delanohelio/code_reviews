{"pr_number": 368, "pr_title": "Interval stats: distance, speed and pace by selected interval.", "pr_author": "rgmf", "pr_createdAt": "2020-08-12T09:20:03Z", "pr_url": "https://github.com/OpenTracksApp/OpenTracks/pull/368", "timeline": [{"oid": "6e2ca343396a1fedc735075ff669d3bfed6768dc", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/6e2ca343396a1fedc735075ff669d3bfed6768dc", "message": "Interval statistics: show accumulate in distance column.", "committedDate": "2020-08-12T10:23:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyNzkzOA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469427938", "body": "Constructor can be removed; just initialize it in line 11.", "bodyText": "Constructor can be removed; just initialize it in line 11.", "bodyHTML": "<p dir=\"auto\">Constructor can be removed; just initialize it in line 11.</p>", "author": "dennisguse", "createdAt": "2020-08-12T17:35:59Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();", "originalCommit": "60057263a4a6014f2c48e982dd04b3d97d2238c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab5d038fc1cb7abad6de30370dedade2beb6eebb", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 57cfb56d5..6ba4f0f83 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -10,10 +10,6 @@ import de.dennisguse.opentracks.util.UnitConversions;\n public class IntervalStatistics {\n     List<Interval> intervalList;\n \n-    public IntervalStatistics() {\n-        intervalList = new ArrayList<>();\n-    }\n-\n     public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n         intervalList = new ArrayList<>();\n \n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -8,10 +8,10 @@ import de.dennisguse.opentracks.util.LocationUtils;\n import de.dennisguse.opentracks.util.UnitConversions;\n \n public class IntervalStatistics {\n-    List<Interval> intervalList;\n+    List<Interval> intervalList = new ArrayList<>();\n \n     public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList = new ArrayList<>();\n+        intervalList.clear();\n \n         if (trackPointList == null || trackPointList.size() == 0) {\n             return;\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODEyOQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428129", "body": "make private", "bodyText": "make private", "bodyHTML": "<p dir=\"auto\">make private</p>", "author": "dennisguse", "createdAt": "2020-08-12T17:36:19Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;", "originalCommit": "60057263a4a6014f2c48e982dd04b3d97d2238c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab5d038fc1cb7abad6de30370dedade2beb6eebb", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 57cfb56d5..6ba4f0f83 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -57,8 +53,8 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance = 0f;\n+        private float time = 0f;\n \n         public float getDistance() {\n             return distance;\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -53,28 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        private float distance = 0f;\n-        private float time = 0f;\n-\n-        public float getDistance() {\n-            return distance;\n-        }\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n \n         public Interval() {}\n \n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n         public Interval(Interval i) {\n-            distance = i.distance;\n-            time = i.time;\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n+\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODI3Nw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428277", "body": "make private", "bodyText": "make private", "bodyHTML": "<p dir=\"auto\">make private</p>", "author": "dennisguse", "createdAt": "2020-08-12T17:36:33Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;", "originalCommit": "60057263a4a6014f2c48e982dd04b3d97d2238c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab5d038fc1cb7abad6de30370dedade2beb6eebb", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 57cfb56d5..6ba4f0f83 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -57,8 +53,8 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance = 0f;\n+        private float time = 0f;\n \n         public float getDistance() {\n             return distance;\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -53,28 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        private float distance = 0f;\n-        private float time = 0f;\n-\n-        public float getDistance() {\n-            return distance;\n-        }\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n \n         public Interval() {}\n \n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n         public Interval(Interval i) {\n-            distance = i.distance;\n-            time = i.time;\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n+\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODkzNg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428936", "body": "i guess this will be either 1mile / 1km, right?\r\nSo, we are independent of the actual unit", "bodyText": "i guess this will be either 1mile / 1km, right?\nSo, we are independent of the actual unit", "bodyHTML": "<p dir=\"auto\">i guess this will be either 1mile / 1km, right?<br>\nSo, we are independent of the actual unit</p>", "author": "dennisguse", "createdAt": "2020-08-12T17:37:43Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),", "originalCommit": "60057263a4a6014f2c48e982dd04b3d97d2238c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzOTc4NA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469439784", "bodyText": "Yes, it is. It works with mi and km. In the case the user changes the unit from km to mi the intervals are reload and the other way around.", "author": "rgmf", "createdAt": "2020-08-12T17:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "ab5d038fc1cb7abad6de30370dedade2beb6eebb", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex ee37ac7d5..9170c09de 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -56,6 +63,9 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n         }).start();\n     }\n \n+    /**\n+     * Intervals length this view model support.\n+     */\n     public enum IntervalOption {\n         OPTION_1(1),\n         OPTION_2(2),\n", "next_change": {"commit": "c38c7cf5640f591cfe6e439a181682372bf4f111", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex 9170c09de..0dcece702 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -72,7 +72,9 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n         OPTION_3(3),\n         OPTION_4(4),\n         OPTION_5(5),\n-        OPTION_10(10);\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n \n         private int value;\n \n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex 0dcece702..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -82,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\ndeleted file mode 100644\nindex 9021ac0a3..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ /dev/null\n", "chunk": "@@ -1,90 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import android.app.Application;\n-import android.content.Context;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.AndroidViewModel;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.MutableLiveData;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-/**\n- * This view model is used to load intervals for a track.\n- * It uses a default interval but it can be set from outside to manage the interval length.\n- */\n-public class IntervalStatisticsModel extends AndroidViewModel {\n-\n-    private MutableLiveData<IntervalStatistics> intervalStats;\n-    private IntervalOption interval;\n-\n-    public IntervalStatisticsModel(@NonNull Application application) {\n-        super(application);\n-        interval = IntervalOption.OPTION_1;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n-        if (intervalStats == null || this.interval != interval) {\n-            intervalStats = new MutableLiveData<>();\n-            this.interval = interval;\n-            loadIntervalStats(trackId);\n-        }\n-        return intervalStats;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n-        return getIntervalStats(trackId, interval);\n-    }\n-\n-    /**\n-     * Call this method when you want to force the view model to re-load intervals.\n-     */\n-    public void invalidate() {\n-        intervalStats = null;\n-    }\n-\n-    private void loadIntervalStats(Track.Id trackId) {\n-        new Thread(() -> {\n-            Context context = getApplication().getApplicationContext();\n-            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n-            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n-\n-            IntervalStatistics intervalStatistics = new IntervalStatistics();\n-            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n-            intervalStatistics.build(trackPointList, distanceInterval);\n-\n-            intervalStats.postValue(intervalStatistics);\n-        }).start();\n-    }\n-\n-    /**\n-     * Intervals length this view model support.\n-     */\n-    public enum IntervalOption {\n-        OPTION_1(1),\n-        OPTION_2(2),\n-        OPTION_3(3),\n-        OPTION_4(4),\n-        OPTION_5(5),\n-        OPTION_10(10),\n-        OPTION_20(20),\n-        OPTION_50(50);\n-\n-        private int value;\n-\n-        IntervalOption(int value) {\n-            this.value = value;\n-        }\n-\n-        public int getValue() {\n-            return value;\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nnew file mode 100644\nindex 000000000..89c5626e7\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -0,0 +1,98 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, IntervalOption.OPTION_1);\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {\n+            IntervalOption[] options = values();\n+            String[] values = new String[options.length];\n+\n+            for (int i = 0; i < options.length; i++) {\n+                values[i] = String.valueOf(options[i].getValue());\n+            }\n+\n+            return values;\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex 89c5626e7..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -65,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "ab5d038fc1cb7abad6de30370dedade2beb6eebb", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/ab5d038fc1cb7abad6de30370dedade2beb6eebb", "message": "Interval stats: added a new tab in TrackRecordingActivity that shows the intervals on live.", "committedDate": "2020-08-17T17:25:38Z", "type": "forcePushed"}, {"oid": "cde34ea8a94434ae1393d18c93c485fd7ef75221", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/cde34ea8a94434ae1393d18c93c485fd7ef75221", "message": "Interval stats: added IntervalStatisticsTest.", "committedDate": "2020-08-19T13:10:17Z", "type": "forcePushed"}, {"oid": "2af8ea9c91e58bb8d916ba5a10f4669234cc94a2", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/2af8ea9c91e58bb8d916ba5a10f4669234cc94a2", "message": "Interval stats: added IntervalStatisticsTest.", "committedDate": "2020-08-19T13:12:46Z", "type": "forcePushed"}, {"oid": "c38c7cf5640f591cfe6e439a181682372bf4f111", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/c38c7cf5640f591cfe6e439a181682372bf4f111", "message": "Interval stats: while user is recording a track intervals are refreshed every 5 seconds.\nInterval stats: completed the list of split intervals: 1, 2, 3, 4, 5, 10, 20 or 50 km or mi.\nFixes #87.", "committedDate": "2020-08-21T09:15:05Z", "type": "forcePushed"}, {"oid": "a471f16fede8f3d0aaf33162b2d0f75f4eb166ac", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/a471f16fede8f3d0aaf33162b2d0f75f4eb166ac", "message": "Interval stats: while user is recording a track intervals are refreshed every 5 seconds.\nInterval stats: completed the list of split intervals: 1, 2, 3, 4, 5, 10, 20 or 50 km or mi.\nFixes #87.", "committedDate": "2020-08-23T16:00:19Z", "type": "forcePushed"}, {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/7a865c3f0407b09f4be060eca1f487f4256243f3", "message": "Interval Stats: track's id it's not long anymore.", "committedDate": "2020-08-23T16:28:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NjY2OA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246668", "body": "return Arrays.asList(pair.second);", "bodyText": "return Arrays.asList(pair.second);", "bodyHTML": "<p dir=\"auto\">return Arrays.asList(pair.second);</p>", "author": "dennisguse", "createdAt": "2020-08-23T17:50:42Z", "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\nindex 3fd020b15..44edae733 100644\n--- a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n+++ b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n", "chunk": "@@ -23,9 +23,7 @@ public class IntervalStatisticsTest {\n \n     private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n \t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n-\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);\n-\n-\t\treturn trackPoints;\n+\t\treturn Arrays.asList(pair.second);\n \t}\n \n \tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\ndeleted file mode 100644\nindex 44edae733..000000000\n--- a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,142 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import android.util.Pair;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.JUnit4;\n-import org.junit.Assert;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TestDataUtil;\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.stats.TrackStatistics;\n-import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-@RunWith(JUnit4.class)\n-public class IntervalStatisticsTest {\n-\n-    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n-\n-    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n-\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n-\t\treturn Arrays.asList(pair.second);\n-\t}\n-\n-\tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n-\t\tTrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater(trackPoints.get(0).getTime());\n-\t\tfor (TrackPoint tp : trackPoints) {\n-\t\t\ttrackStatisticsUpdater.addTrackPoint(tp, 0);\n-\t\t}\n-\t\treturn trackStatisticsUpdater.getTrackStatistics();\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_1() {\n-\t\t// With 50 points and interval distance of 1000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(50);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 1000f;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_2() {\n-\t\t// With 200 points and interval distance of 1000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(200);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 1000f;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_3() {\n-\t\t// With 200 points and interval distance of 3000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(200);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 3000;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_4() {\n-\t\t// With 1000 points and interval distance of 3000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(1000);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 3000;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_5() {\n-\t\t// With 10000 points and interval distance of 1000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(10000);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 1000;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\tprivate void whenAndThen(List<TrackPoint> trackPoints, TrackStatistics trackStatistics, float distanceInterval, IntervalStatistics intervalStatistics) {\n-\t\tintervalStatistics.build(trackPoints, distanceInterval);\n-\t\tList<IntervalStatistics.Interval> intervalList = intervalStatistics.getIntervalList();\n-\t\tdouble totalDistance = 0d;\n-\t\tlong totalTime = 0L;\n-\t\tfor (IntervalStatistics.Interval i : intervalList) {\n-\t\t\ttotalDistance += i.getDistance_m();\n-\t\t\ttotalTime += ((i.getDistance_m() / i.getSpeed_ms()) * UnitConversions.S_TO_MS);\n-\t\t}\n-\n-\t\t// then\n-\t\tAssert.assertEquals(trackStatistics.getTotalDistance(), totalDistance, 0.01);\n-\t\tAssert.assertEquals(trackStatistics.getTotalTime() * UnitConversions.MS_TO_S, totalTime * UnitConversions.MS_TO_S, 0.1);\n-\t\tAssert.assertEquals(intervalList.size(), (int) Math.ceil(trackStatistics.getTotalDistance() / distanceInterval));\n-\t\tfor (int i = 0; i < intervalList.size() - 1; i++) {\n-\t\t\tAssert.assertEquals(intervalList.get(i).getDistance_m(), distanceInterval, 0.001);\n-\t\t\ttotalDistance -= intervalList.get(i).getDistance_m();\n-\t\t}\n-\t\tAssert.assertEquals(intervalList.get(intervalList.size() - 1).getDistance_m(), totalDistance, 0.01);\n-\t}\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "6b27fd0377a960c7c1225dbda47b5ab3700b3283", "changed_code": [{"header": "diff --git a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\nnew file mode 100644\nindex 000000000..54505c825\n--- /dev/null\n+++ b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n", "chunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(System.currentTimeMillis(), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);\n+\n+\t\treturn trackPoints;\n+\t}\n+\n+\tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n+\t\tTrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater(trackPoints.get(0).getTime());\n+\t\tfor (TrackPoint tp : trackPoints) {\n+\t\t\ttrackStatisticsUpdater.addTrackPoint(tp, 0);\n+\t\t}\n+\t\treturn trackStatisticsUpdater.getTrackStatistics();\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+    public void testBuild_1() {\n+\t\t// With 50 points and interval distance of 1000m.\n+\n+    \t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(50);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 1000f;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+\tpublic void testBuild_2() {\n+\t\t// With 200 points and interval distance of 1000m.\n+\n+\t\t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(200);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 1000f;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+\tpublic void testBuild_3() {\n+\t\t// With 200 points and interval distance of 3000m.\n+\n+\t\t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(200);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 3000;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+\tpublic void testBuild_4() {\n+\t\t// With 1000 points and interval distance of 3000m.\n+\n+\t\t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(1000);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 3000;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+\tpublic void testBuild_5() {\n+\t\t// With 10000 points and interval distance of 1000m.\n+\n+\t\t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(10000);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 1000;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\tprivate void whenAndThen(List<TrackPoint> trackPoints, TrackStatistics trackStatistics, float distanceInterval, IntervalStatistics intervalStatistics) {\n+\t\tintervalStatistics.build(trackPoints, distanceInterval);\n+\t\tList<IntervalStatistics.Interval> intervalList = intervalStatistics.getIntervalList();\n+\t\tdouble totalDistance = 0d;\n+\t\tlong totalTime = 0L;\n+\t\tfor (IntervalStatistics.Interval i : intervalList) {\n+\t\t\ttotalDistance += i.getDistance();\n+\t\t\ttotalTime += ((i.getDistance() / i.getSpeed()) * UnitConversions.S_TO_MS);\n+\t\t}\n+\n+\t\t// then\n+\t\tAssert.assertEquals(trackStatistics.getTotalDistance(), totalDistance, 0.01);\n+\t\tAssert.assertEquals(trackStatistics.getTotalTime() * UnitConversions.MS_TO_S, totalTime * UnitConversions.MS_TO_S, 0.1);\n+\t\tAssert.assertEquals(intervalList.size(), (int) Math.ceil(trackStatistics.getTotalDistance() / distanceInterval));\n+\t\tfor (int i = 0; i < intervalList.size() - 1; i++) {\n+\t\t\tAssert.assertEquals(intervalList.get(i).getDistance(), distanceInterval, 0.001);\n+\t\t\ttotalDistance -= intervalList.get(i).getDistance();\n+\t\t}\n+\t\tAssert.assertEquals(intervalList.get(intervalList.size() - 1).getDistance(), totalDistance, 0.01);\n+\t}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\nindex 54505c825..44edae733 100644\n--- a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n+++ b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n", "chunk": "@@ -136,9 +134,9 @@ public class IntervalStatisticsTest {\n \t\tAssert.assertEquals(trackStatistics.getTotalTime() * UnitConversions.MS_TO_S, totalTime * UnitConversions.MS_TO_S, 0.1);\n \t\tAssert.assertEquals(intervalList.size(), (int) Math.ceil(trackStatistics.getTotalDistance() / distanceInterval));\n \t\tfor (int i = 0; i < intervalList.size() - 1; i++) {\n-\t\t\tAssert.assertEquals(intervalList.get(i).getDistance(), distanceInterval, 0.001);\n-\t\t\ttotalDistance -= intervalList.get(i).getDistance();\n+\t\t\tAssert.assertEquals(intervalList.get(i).getDistance_m(), distanceInterval, 0.001);\n+\t\t\ttotalDistance -= intervalList.get(i).getDistance_m();\n \t\t}\n-\t\tAssert.assertEquals(intervalList.get(intervalList.size() - 1).getDistance(), totalDistance, 0.01);\n+\t\tAssert.assertEquals(intervalList.get(intervalList.size() - 1).getDistance_m(), totalDistance, 0.01);\n \t}\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NjcyOQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246729", "body": "formatting", "bodyText": "formatting", "bodyHTML": "<p dir=\"auto\">formatting</p>", "author": "dennisguse", "createdAt": "2020-08-23T17:51:14Z", "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);\n+\n+\t\treturn trackPoints;\n+\t}\n+\n+\tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n+\t\tTrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater(trackPoints.get(0).getTime());\n+\t\tfor (TrackPoint tp : trackPoints) {\n+\t\t\ttrackStatisticsUpdater.addTrackPoint(tp, 0);\n+\t\t}\n+\t\treturn trackStatisticsUpdater.getTrackStatistics();\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+    public void testBuild_1() {\n+\t\t// With 50 points and interval distance of 1000m.\n+", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4ODc5Mg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475488792", "bodyText": "Strange... I see it well formatted. Anyway I've reformatted.", "author": "rgmf", "createdAt": "2020-08-24T10:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NjcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\nindex 3fd020b15..44edae733 100644\n--- a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n+++ b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n", "chunk": "@@ -40,10 +38,10 @@ public class IntervalStatisticsTest {\n \t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n \t */\n \t@Test\n-    public void testBuild_1() {\n+\tpublic void testBuild_1() {\n \t\t// With 50 points and interval distance of 1000m.\n \n-    \t// given\n+\t\t// given\n \t\tList<TrackPoint> trackPoints = buildTrackPoints(50);\n \t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n \t\tfloat distanceInterval = 1000f;\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\ndeleted file mode 100644\nindex 44edae733..000000000\n--- a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n+++ /dev/null\n", "chunk": "@@ -1,142 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import android.util.Pair;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.JUnit4;\n-import org.junit.Assert;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TestDataUtil;\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.stats.TrackStatistics;\n-import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-@RunWith(JUnit4.class)\n-public class IntervalStatisticsTest {\n-\n-    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n-\n-    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n-\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n-\t\treturn Arrays.asList(pair.second);\n-\t}\n-\n-\tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n-\t\tTrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater(trackPoints.get(0).getTime());\n-\t\tfor (TrackPoint tp : trackPoints) {\n-\t\t\ttrackStatisticsUpdater.addTrackPoint(tp, 0);\n-\t\t}\n-\t\treturn trackStatisticsUpdater.getTrackStatistics();\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_1() {\n-\t\t// With 50 points and interval distance of 1000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(50);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 1000f;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_2() {\n-\t\t// With 200 points and interval distance of 1000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(200);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 1000f;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_3() {\n-\t\t// With 200 points and interval distance of 3000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(200);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 3000;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_4() {\n-\t\t// With 1000 points and interval distance of 3000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(1000);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 3000;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\t/**\n-\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n-\t */\n-\t@Test\n-\tpublic void testBuild_5() {\n-\t\t// With 10000 points and interval distance of 1000m.\n-\n-\t\t// given\n-\t\tList<TrackPoint> trackPoints = buildTrackPoints(10000);\n-\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n-\t\tfloat distanceInterval = 1000;\n-\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n-\n-\t\t// when and then\n-\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n-\t}\n-\n-\tprivate void whenAndThen(List<TrackPoint> trackPoints, TrackStatistics trackStatistics, float distanceInterval, IntervalStatistics intervalStatistics) {\n-\t\tintervalStatistics.build(trackPoints, distanceInterval);\n-\t\tList<IntervalStatistics.Interval> intervalList = intervalStatistics.getIntervalList();\n-\t\tdouble totalDistance = 0d;\n-\t\tlong totalTime = 0L;\n-\t\tfor (IntervalStatistics.Interval i : intervalList) {\n-\t\t\ttotalDistance += i.getDistance_m();\n-\t\t\ttotalTime += ((i.getDistance_m() / i.getSpeed_ms()) * UnitConversions.S_TO_MS);\n-\t\t}\n-\n-\t\t// then\n-\t\tAssert.assertEquals(trackStatistics.getTotalDistance(), totalDistance, 0.01);\n-\t\tAssert.assertEquals(trackStatistics.getTotalTime() * UnitConversions.MS_TO_S, totalTime * UnitConversions.MS_TO_S, 0.1);\n-\t\tAssert.assertEquals(intervalList.size(), (int) Math.ceil(trackStatistics.getTotalDistance() / distanceInterval));\n-\t\tfor (int i = 0; i < intervalList.size() - 1; i++) {\n-\t\t\tAssert.assertEquals(intervalList.get(i).getDistance_m(), distanceInterval, 0.001);\n-\t\t\ttotalDistance -= intervalList.get(i).getDistance_m();\n-\t\t}\n-\t\tAssert.assertEquals(intervalList.get(intervalList.size() - 1).getDistance_m(), totalDistance, 0.01);\n-\t}\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "6b27fd0377a960c7c1225dbda47b5ab3700b3283", "changed_code": [{"header": "diff --git a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\nnew file mode 100644\nindex 000000000..54505c825\n--- /dev/null\n+++ b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n", "chunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(System.currentTimeMillis(), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);\n+\n+\t\treturn trackPoints;\n+\t}\n+\n+\tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n+\t\tTrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater(trackPoints.get(0).getTime());\n+\t\tfor (TrackPoint tp : trackPoints) {\n+\t\t\ttrackStatisticsUpdater.addTrackPoint(tp, 0);\n+\t\t}\n+\t\treturn trackStatisticsUpdater.getTrackStatistics();\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+    public void testBuild_1() {\n+\t\t// With 50 points and interval distance of 1000m.\n+\n+    \t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(50);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 1000f;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+\tpublic void testBuild_2() {\n+\t\t// With 200 points and interval distance of 1000m.\n+\n+\t\t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(200);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 1000f;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+\tpublic void testBuild_3() {\n+\t\t// With 200 points and interval distance of 3000m.\n+\n+\t\t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(200);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 3000;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+\tpublic void testBuild_4() {\n+\t\t// With 1000 points and interval distance of 3000m.\n+\n+\t\t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(1000);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 3000;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+\tpublic void testBuild_5() {\n+\t\t// With 10000 points and interval distance of 1000m.\n+\n+\t\t// given\n+\t\tList<TrackPoint> trackPoints = buildTrackPoints(10000);\n+\t\tTrackStatistics trackStatistics = buildTrackStatistics(trackPoints);\n+\t\tfloat distanceInterval = 1000;\n+\t\tIntervalStatistics intervalStatistics = new IntervalStatistics();\n+\n+\t\t// when and then\n+\t\twhenAndThen(trackPoints, trackStatistics, distanceInterval, intervalStatistics);\n+\t}\n+\n+\tprivate void whenAndThen(List<TrackPoint> trackPoints, TrackStatistics trackStatistics, float distanceInterval, IntervalStatistics intervalStatistics) {\n+\t\tintervalStatistics.build(trackPoints, distanceInterval);\n+\t\tList<IntervalStatistics.Interval> intervalList = intervalStatistics.getIntervalList();\n+\t\tdouble totalDistance = 0d;\n+\t\tlong totalTime = 0L;\n+\t\tfor (IntervalStatistics.Interval i : intervalList) {\n+\t\t\ttotalDistance += i.getDistance();\n+\t\t\ttotalTime += ((i.getDistance() / i.getSpeed()) * UnitConversions.S_TO_MS);\n+\t\t}\n+\n+\t\t// then\n+\t\tAssert.assertEquals(trackStatistics.getTotalDistance(), totalDistance, 0.01);\n+\t\tAssert.assertEquals(trackStatistics.getTotalTime() * UnitConversions.MS_TO_S, totalTime * UnitConversions.MS_TO_S, 0.1);\n+\t\tAssert.assertEquals(intervalList.size(), (int) Math.ceil(trackStatistics.getTotalDistance() / distanceInterval));\n+\t\tfor (int i = 0; i < intervalList.size() - 1; i++) {\n+\t\t\tAssert.assertEquals(intervalList.get(i).getDistance(), distanceInterval, 0.001);\n+\t\t\ttotalDistance -= intervalList.get(i).getDistance();\n+\t\t}\n+\t\tAssert.assertEquals(intervalList.get(intervalList.size() - 1).getDistance(), totalDistance, 0.01);\n+\t}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\nindex 54505c825..44edae733 100644\n--- a/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n+++ b/src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java\n", "chunk": "@@ -136,9 +134,9 @@ public class IntervalStatisticsTest {\n \t\tAssert.assertEquals(trackStatistics.getTotalTime() * UnitConversions.MS_TO_S, totalTime * UnitConversions.MS_TO_S, 0.1);\n \t\tAssert.assertEquals(intervalList.size(), (int) Math.ceil(trackStatistics.getTotalDistance() / distanceInterval));\n \t\tfor (int i = 0; i < intervalList.size() - 1; i++) {\n-\t\t\tAssert.assertEquals(intervalList.get(i).getDistance(), distanceInterval, 0.001);\n-\t\t\ttotalDistance -= intervalList.get(i).getDistance();\n+\t\t\tAssert.assertEquals(intervalList.get(i).getDistance_m(), distanceInterval, 0.001);\n+\t\t\ttotalDistance -= intervalList.get(i).getDistance_m();\n \t\t}\n-\t\tAssert.assertEquals(intervalList.get(intervalList.size() - 1).getDistance(), totalDistance, 0.01);\n+\t\tAssert.assertEquals(intervalList.get(intervalList.size() - 1).getDistance_m(), totalDistance, 0.01);\n \t}\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0Njk0Ng==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246946", "body": "Why not use a newInstance-method (like the other fragements?)", "bodyText": "Why not use a newInstance-method (like the other fragements?)", "bodyHTML": "<p dir=\"auto\">Why not use a newInstance-method (like the other fragements?)</p>", "author": "dennisguse", "createdAt": "2020-08-23T17:53:43Z", "path": "src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java", "diffHunk": "@@ -382,8 +383,10 @@ public Fragment getItem(int position) {\n                 case 0:\n                     return new StatisticsRecordingFragment();\n                 case 1:\n-                    return ChartFragment.newInstance(false);\n+                    return new IntervalsRecordingFragment();", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5MjM5MQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475492391", "bodyText": "I thought that this was the best option because it not receive any arguments. Changed ;)", "author": "rgmf", "createdAt": "2020-08-24T10:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0Njk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\nindex 30f718653..cd5dbf28b 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n", "chunk": "@@ -381,9 +381,9 @@ public class TrackRecordingActivity extends AbstractActivity implements ChooseAc\n         public Fragment getItem(int position) {\n             switch (position) {\n                 case 0:\n-                    return new StatisticsRecordingFragment();\n+                    return StatisticsRecordingFragment.newInstance();\n                 case 1:\n-                    return new IntervalsRecordingFragment();\n+                    return IntervalsRecordingFragment.newInstance();\n                 case 2:\n                     return ChartFragment.newInstance(false);\n                 case 3:\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\nindex cd5dbf28b..fda11f21f 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n", "chunk": "@@ -381,12 +380,10 @@ public class TrackRecordingActivity extends AbstractActivity implements ChooseAc\n         public Fragment getItem(int position) {\n             switch (position) {\n                 case 0:\n-                    return StatisticsRecordingFragment.newInstance();\n+                    return new StatisticsRecordingFragment();\n                 case 1:\n-                    return IntervalsRecordingFragment.newInstance();\n-                case 2:\n                     return ChartFragment.newInstance(false);\n-                case 3:\n+                case 2:\n                     return ChartFragment.newInstance(true);\n                 default:\n                     throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\n", "next_change": {"commit": "d625702c6894f3b63a746ceb22a1a52b98f06e81", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\nindex fda11f21f..30f718653 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n", "chunk": "@@ -382,8 +383,10 @@ public class TrackRecordingActivity extends AbstractActivity implements ChooseAc\n                 case 0:\n                     return new StatisticsRecordingFragment();\n                 case 1:\n-                    return ChartFragment.newInstance(false);\n+                    return new IntervalsRecordingFragment();\n                 case 2:\n+                    return ChartFragment.newInstance(false);\n+                case 3:\n                     return ChartFragment.newInstance(true);\n                 default:\n                     throw new RuntimeException(\"There isn't Fragment associated with the position: \" + position);\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\nindex 30f718653..cd5dbf28b 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n", "chunk": "@@ -381,9 +381,9 @@ public class TrackRecordingActivity extends AbstractActivity implements ChooseAc\n         public Fragment getItem(int position) {\n             switch (position) {\n                 case 0:\n-                    return new StatisticsRecordingFragment();\n+                    return StatisticsRecordingFragment.newInstance();\n                 case 1:\n-                    return new IntervalsRecordingFragment();\n+                    return IntervalsRecordingFragment.newInstance();\n                 case 2:\n                     return ChartFragment.newInstance(false);\n                 case 3:\n", "next_change": {"commit": "fb13fe402de897034f8ddf25b71b5e710cf1c99c", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\nindex cd5dbf28b..eb8f90008 100644\n--- a/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n+++ b/src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java\n", "chunk": "@@ -383,7 +383,7 @@ public class TrackRecordingActivity extends AbstractActivity implements ChooseAc\n                 case 0:\n                     return StatisticsRecordingFragment.newInstance();\n                 case 1:\n-                    return IntervalsRecordingFragment.newInstance();\n+                    return IntervalsRecordingFragment.newInstance(trackId);\n                 case 2:\n                     return ChartFragment.newInstance(false);\n                 case 3:\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzA2OA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247068", "body": "Does it handle changes of metricUnits via settings?", "bodyText": "Does it handle changes of metricUnits via settings?", "bodyHTML": "<p dir=\"auto\">Does it handle changes of metricUnits via settings?</p>", "author": "dennisguse", "createdAt": "2020-08-23T17:54:46Z", "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NDk5MQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475494991", "bodyText": "Yes, every time view's display method is called it recreates the adapter. The fragments that use this view are responsible of re-displaying the view and they're who listen preferences changes to update UI (including the view).", "author": "rgmf", "createdAt": "2020-08-24T10:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\nindex 16c91483f..834a9a02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n+++ b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n", "chunk": "@@ -21,7 +21,7 @@ import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n \n     private boolean metricUnits;\n-    private float accDistance = 0f;\n+    private float sumDistance_m = 0f;\n \n     public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n         super(context, R.layout.interval_stats_list_item, intervalList);\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\ndeleted file mode 100644\nindex 834a9a02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n+++ /dev/null\n", "chunk": "@@ -1,68 +0,0 @@\n-package de.dennisguse.opentracks.adapters;\n-\n-import android.content.Context;\n-import android.util.Pair;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.ArrayAdapter;\n-import android.widget.TextView;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.R;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.StringUtils;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-\n-public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n-\n-    private boolean metricUnits;\n-    private float sumDistance_m = 0f;\n-\n-    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n-        super(context, R.layout.interval_stats_list_item, intervalList);\n-        metricUnits = PreferencesUtils.isMetricUnits(context);\n-    }\n-\n-    @NonNull\n-    @Override\n-    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n-        IntervalStatistics.Interval interval = getItem(position);\n-        ViewHolder viewHolder;\n-\n-        if (intervalView == null) {\n-            viewHolder = new ViewHolder();\n-\n-            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n-\n-            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n-            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n-            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n-\n-            intervalView.setTag(viewHolder);\n-        } else {\n-            viewHolder = (ViewHolder) intervalView.getTag();\n-        }\n-\n-        sumDistance_m += interval.getDistance_m();\n-        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), sumDistance_m, metricUnits));\n-\n-        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, true);\n-        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n-\n-        Pair<String, String> paceParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, false);\n-        viewHolder.pace.setText(paceParts.first + \" \" + paceParts.second);\n-\n-        return intervalView;\n-    }\n-\n-    private static class ViewHolder {\n-        private TextView distance;\n-        private TextView speed;\n-        private TextView pace;\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\nnew file mode 100644\nindex 000000000..88983cf5a\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n", "chunk": "@@ -0,0 +1,63 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), interval.getDistance(), metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);\n+\n+        return intervalView;\n+    }\n+\n+    private static class ViewHolder {\n+        private TextView distance;\n+        private TextView speed;\n+        private TextView pace;\n+    }\n+}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzE4MQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247181", "body": "sumDistance?\r\nAnd adding units to the name would be great aka sumDistance_m\r\n", "bodyText": "sumDistance?\nAnd adding units to the name would be great aka sumDistance_m", "bodyHTML": "<p dir=\"auto\">sumDistance?<br>\nAnd adding units to the name would be great aka sumDistance_m</p>", "author": "dennisguse", "createdAt": "2020-08-23T17:55:36Z", "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NjE4MA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475496180", "bodyText": "Ooohhhh yes, I've seen a lot of times the unit added to the name of variables... sorry \ud83d\udc4d", "author": "rgmf", "createdAt": "2020-08-24T10:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\nindex 16c91483f..834a9a02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n+++ b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n", "chunk": "@@ -21,7 +21,7 @@ import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n \n     private boolean metricUnits;\n-    private float accDistance = 0f;\n+    private float sumDistance_m = 0f;\n \n     public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n         super(context, R.layout.interval_stats_list_item, intervalList);\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\ndeleted file mode 100644\nindex 834a9a02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n+++ /dev/null\n", "chunk": "@@ -1,68 +0,0 @@\n-package de.dennisguse.opentracks.adapters;\n-\n-import android.content.Context;\n-import android.util.Pair;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.ArrayAdapter;\n-import android.widget.TextView;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.R;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.StringUtils;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-\n-public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n-\n-    private boolean metricUnits;\n-    private float sumDistance_m = 0f;\n-\n-    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n-        super(context, R.layout.interval_stats_list_item, intervalList);\n-        metricUnits = PreferencesUtils.isMetricUnits(context);\n-    }\n-\n-    @NonNull\n-    @Override\n-    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n-        IntervalStatistics.Interval interval = getItem(position);\n-        ViewHolder viewHolder;\n-\n-        if (intervalView == null) {\n-            viewHolder = new ViewHolder();\n-\n-            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n-\n-            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n-            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n-            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n-\n-            intervalView.setTag(viewHolder);\n-        } else {\n-            viewHolder = (ViewHolder) intervalView.getTag();\n-        }\n-\n-        sumDistance_m += interval.getDistance_m();\n-        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), sumDistance_m, metricUnits));\n-\n-        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, true);\n-        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n-\n-        Pair<String, String> paceParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, false);\n-        viewHolder.pace.setText(paceParts.first + \" \" + paceParts.second);\n-\n-        return intervalView;\n-    }\n-\n-    private static class ViewHolder {\n-        private TextView distance;\n-        private TextView speed;\n-        private TextView pace;\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\nnew file mode 100644\nindex 000000000..88983cf5a\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n", "chunk": "@@ -0,0 +1,63 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), interval.getDistance(), metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);\n+\n+        return intervalView;\n+    }\n+\n+    private static class ViewHolder {\n+        private TextView distance;\n+        private TextView speed;\n+        private TextView pace;\n+    }\n+}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247312", "body": "why not show the units for pace as well?", "bodyText": "why not show the units for pace as well?", "bodyHTML": "<p dir=\"auto\">why not show the units for pace as well?</p>", "author": "dennisguse", "createdAt": "2020-08-23T17:56:50Z", "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        accDistance += interval.getDistance();\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), accDistance, metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMDY3Mg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475500672", "bodyText": "Because pace is time. When you see stats in a table, the column with pace doesn't show unit. I've never seen the unit but It's only my experience and I don't know what standard says about this (if any standard about it).", "author": "rgmf", "createdAt": "2020-08-24T10:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNjcxOA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475506718", "bodyText": "One the statistics fragment pace is shown with unit.\ni don't know if it is meaningful to the user.", "author": "dennisguse", "createdAt": "2020-08-24T10:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMDI0NQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475510245", "bodyText": "You are right... So I have to add here the unit too for maintain the coherence.\nAnyway, I'm going to look into about this matter... For the moment I'll add the unit\n;)", "author": "rgmf", "createdAt": "2020-08-24T10:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\nindex 16c91483f..834a9a02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n+++ b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n", "chunk": "@@ -48,11 +48,14 @@ public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.I\n             viewHolder = (ViewHolder) intervalView.getTag();\n         }\n \n-        accDistance += interval.getDistance();\n-        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), accDistance, metricUnits));\n-        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        sumDistance_m += interval.getDistance_m();\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), sumDistance_m, metricUnits));\n+\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, true);\n         viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n-        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);\n+\n+        Pair<String, String> paceParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, false);\n+        viewHolder.pace.setText(paceParts.first + \" \" + paceParts.second);\n \n         return intervalView;\n     }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\ndeleted file mode 100644\nindex 834a9a02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n+++ /dev/null\n", "chunk": "@@ -1,68 +0,0 @@\n-package de.dennisguse.opentracks.adapters;\n-\n-import android.content.Context;\n-import android.util.Pair;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.ArrayAdapter;\n-import android.widget.TextView;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.R;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.StringUtils;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-\n-public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n-\n-    private boolean metricUnits;\n-    private float sumDistance_m = 0f;\n-\n-    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n-        super(context, R.layout.interval_stats_list_item, intervalList);\n-        metricUnits = PreferencesUtils.isMetricUnits(context);\n-    }\n-\n-    @NonNull\n-    @Override\n-    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n-        IntervalStatistics.Interval interval = getItem(position);\n-        ViewHolder viewHolder;\n-\n-        if (intervalView == null) {\n-            viewHolder = new ViewHolder();\n-\n-            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n-\n-            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n-            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n-            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n-\n-            intervalView.setTag(viewHolder);\n-        } else {\n-            viewHolder = (ViewHolder) intervalView.getTag();\n-        }\n-\n-        sumDistance_m += interval.getDistance_m();\n-        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), sumDistance_m, metricUnits));\n-\n-        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, true);\n-        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n-\n-        Pair<String, String> paceParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed_ms(), metricUnits, false);\n-        viewHolder.pace.setText(paceParts.first + \" \" + paceParts.second);\n-\n-        return intervalView;\n-    }\n-\n-    private static class ViewHolder {\n-        private TextView distance;\n-        private TextView speed;\n-        private TextView pace;\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\nnew file mode 100644\nindex 000000000..88983cf5a\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java\n", "chunk": "@@ -0,0 +1,63 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), interval.getDistance(), metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);\n+\n+        return intervalView;\n+    }\n+\n+    private static class ViewHolder {\n+        private TextView distance;\n+        private TextView speed;\n+        private TextView pace;\n+    }\n+}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzU4NA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247584", "body": "Can you add the comment here: why 5s?", "bodyText": "Can you add the comment here: why 5s?", "bodyHTML": "<p dir=\"auto\">Can you add the comment here: why 5s?</p>", "author": "dennisguse", "createdAt": "2020-08-23T17:59:58Z", "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNTAyMw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475505023", "bodyText": "Of course ;)", "author": "rgmf", "createdAt": "2020-08-24T10:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\nindex a6342e919..a52806630 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n", "chunk": "@@ -29,29 +28,27 @@ public class IntervalsRecordingFragment extends Fragment implements IntervalList\n \n     private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n \n+    // Refreshing intervals stats it's not so demanding so 5 seconds is enough to balance performance and user experience.\n     private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n \n     private IntervalStatisticsModel viewModel;\n-    private IntervalReverseListView intervalListView;\n+    private IntervalListView.IntervalReverseListView intervalListView;\n \n-    private class IntervalRunner implements Runnable {\n-        private boolean stopped = false;\n+    public static Fragment newInstance() {\n+        return new IntervalsRecordingFragment();\n+    }\n \n+    private final Runnable intervalRunner = new Runnable() {\n         @Override\n         public void run() {\n-            if (!stopped) {\n+            if (isResumed()) {\n                 updateIntervals();\n                 intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n             }\n         }\n+    };\n \n-        public void stop() {\n-            stopped = true;\n-        }\n-    }\n-\n-    private Handler intervalHandler = null;\n-    private IntervalRunner intervalRunner = null;\n+    private Handler intervalHandler;\n \n     @Override\n     public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\ndeleted file mode 100644\nindex a52806630..000000000\n--- a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n+++ /dev/null\n", "chunk": "@@ -1,128 +0,0 @@\n-package de.dennisguse.opentracks.fragments;\n-\n-import android.os.Bundle;\n-import android.os.Handler;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.LinearLayout;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import androidx.fragment.app.Fragment;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.ViewModelProvider;\n-\n-import de.dennisguse.opentracks.R;\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n-import de.dennisguse.opentracks.views.IntervalListView;\n-\n-/**\n- * A fragment to display the intervals from recording track.\n- */\n-public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n-\n-    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n-\n-    // Refreshing intervals stats it's not so demanding so 5 seconds is enough to balance performance and user experience.\n-    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n-\n-    private IntervalStatisticsModel viewModel;\n-    private IntervalListView.IntervalReverseListView intervalListView;\n-\n-    public static Fragment newInstance() {\n-        return new IntervalsRecordingFragment();\n-    }\n-\n-    private final Runnable intervalRunner = new Runnable() {\n-        @Override\n-        public void run() {\n-            if (isResumed()) {\n-                updateIntervals();\n-                intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n-            }\n-        }\n-    };\n-\n-    private Handler intervalHandler;\n-\n-    @Override\n-    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n-        return inflater.inflate(R.layout.intervals_recording, container, false);\n-    }\n-\n-    @Override\n-    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-\n-        intervalHandler = new Handler();\n-\n-        intervalListView = new IntervalListView.IntervalReverseListView(getActivity(), this);\n-        intervalListView.setId(View.generateViewId());\n-        intervalListView.findViewById(R.id.interval_title_label).setVisibility(View.GONE);\n-        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n-        linearLayout.removeAllViews();\n-        linearLayout.addView(intervalListView);\n-\n-        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n-    }\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        intervalHandler.post(intervalRunner);\n-    }\n-\n-    @Override\n-    public void onPause() {\n-        super.onPause();\n-        intervalHandler.removeCallbacks(intervalRunner);\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-\n-        intervalListView.destroy();\n-        intervalListView = null;\n-        viewModel = null;\n-    }\n-\n-    /**\n-     * Update intervals through {@link IntervalStatisticsModel} view model.\n-     *\n-     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n-     */\n-    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n-        if (viewModel == null || intervalListView == null) {\n-            return;\n-        }\n-\n-        Track.Id trackId = PreferencesUtils.getRecordingTrackId(getContext());\n-        viewModel.invalidate();\n-        LiveData<IntervalStatistics> liveData;\n-        if (interval == null) {\n-            liveData = viewModel.getIntervalStats(trackId);\n-        } else {\n-            liveData = viewModel.getIntervalStats(trackId, interval);\n-        }\n-        liveData.observe(getActivity(), intervalStatistics -> {\n-            if (intervalStatistics != null) {\n-                intervalListView.display(intervalStatistics.getIntervalList());\n-            }\n-        });\n-    }\n-\n-    private void updateIntervals() {\n-        updateIntervals(null);\n-    }\n-\n-    @Override\n-    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n-        updateIntervals(interval);\n-    }\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "d625702c6894f3b63a746ceb22a1a52b98f06e81", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\nnew file mode 100644\nindex 000000000..199862a87\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n", "chunk": "@@ -0,0 +1,132 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {\n+                updateIntervals();\n+                intervalHandler.postDelayed(intervalRunner, 5000);\n+            }\n+        }\n+\n+        public void stop() {\n+            stopped = true;\n+        }\n+    }\n+\n+    private Handler intervalHandler = null;\n+    private IntervalRunner intervalRunner = null;\n+\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.intervals_recording, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+\n+        intervalHandler = new Handler();\n+\n+        intervalListView = new IntervalReverseListView(getActivity(), this);\n+        intervalListView.setId(View.generateViewId());\n+        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n+        linearLayout.removeAllViews();\n+        linearLayout.addView(intervalListView);\n+\n+        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n+    }\n+\n+    @Override\n+    public void onResume() {\n+        super.onResume();\n+        if (intervalRunner == null) {\n+            intervalRunner = new IntervalRunner();\n+            intervalRunner.run();\n+        }\n+    }\n+\n+    @Override\n+    public void onPause() {\n+        super.onPause();\n+        if (intervalRunner != null) {\n+            intervalRunner.stop();\n+            intervalRunner = null;\n+        }\n+    }\n+\n+    @Override\n+    public void onDestroy() {\n+        super.onDestroy();\n+\n+        intervalListView.destroy();\n+        intervalListView = null;\n+        viewModel = null;\n+    }\n+\n+    /**\n+     * Update intervals through {@link IntervalStatisticsModel} view model.\n+     *\n+     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n+     */\n+    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n+        if (viewModel == null | intervalListView == null) {\n+            return;\n+        }\n+\n+        long trackId = PreferencesUtils.getRecordingTrackId(getContext());\n+        viewModel.invalidate();\n+        LiveData<IntervalStatistics> liveData;\n+        if (interval == null) {\n+            liveData = viewModel.getIntervalStats(trackId);\n+        } else {\n+            liveData = viewModel.getIntervalStats(trackId, interval);\n+        }\n+        liveData.observe(getActivity(), intervalStatistics -> {\n+            if (intervalStatistics != null) {\n+                intervalListView.display(intervalStatistics.getIntervalList());\n+            }\n+        });\n+    }\n+\n+    private void updateIntervals() {\n+        updateIntervals(null);\n+    }\n+\n+    @Override\n+    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n+        updateIntervals(interval);\n+    }\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzkwNA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247904", "body": "Why not check isResume() of parent class?\r\nThen we don't need stop.\r\nSee StatisticsRecordingFragment:107.", "bodyText": "Why not check isResume() of parent class?\nThen we don't need stop.\nSee StatisticsRecordingFragment:107.", "bodyHTML": "<p dir=\"auto\">Why not check isResume() of parent class?<br>\nThen we don't need stop.<br>\nSee StatisticsRecordingFragment:107.</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:03:51Z", "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\nindex a6342e919..a52806630 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n", "chunk": "@@ -29,29 +28,27 @@ public class IntervalsRecordingFragment extends Fragment implements IntervalList\n \n     private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n \n+    // Refreshing intervals stats it's not so demanding so 5 seconds is enough to balance performance and user experience.\n     private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n \n     private IntervalStatisticsModel viewModel;\n-    private IntervalReverseListView intervalListView;\n+    private IntervalListView.IntervalReverseListView intervalListView;\n \n-    private class IntervalRunner implements Runnable {\n-        private boolean stopped = false;\n+    public static Fragment newInstance() {\n+        return new IntervalsRecordingFragment();\n+    }\n \n+    private final Runnable intervalRunner = new Runnable() {\n         @Override\n         public void run() {\n-            if (!stopped) {\n+            if (isResumed()) {\n                 updateIntervals();\n                 intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n             }\n         }\n+    };\n \n-        public void stop() {\n-            stopped = true;\n-        }\n-    }\n-\n-    private Handler intervalHandler = null;\n-    private IntervalRunner intervalRunner = null;\n+    private Handler intervalHandler;\n \n     @Override\n     public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\ndeleted file mode 100644\nindex a52806630..000000000\n--- a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n+++ /dev/null\n", "chunk": "@@ -1,128 +0,0 @@\n-package de.dennisguse.opentracks.fragments;\n-\n-import android.os.Bundle;\n-import android.os.Handler;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.LinearLayout;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import androidx.fragment.app.Fragment;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.ViewModelProvider;\n-\n-import de.dennisguse.opentracks.R;\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n-import de.dennisguse.opentracks.views.IntervalListView;\n-\n-/**\n- * A fragment to display the intervals from recording track.\n- */\n-public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n-\n-    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n-\n-    // Refreshing intervals stats it's not so demanding so 5 seconds is enough to balance performance and user experience.\n-    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n-\n-    private IntervalStatisticsModel viewModel;\n-    private IntervalListView.IntervalReverseListView intervalListView;\n-\n-    public static Fragment newInstance() {\n-        return new IntervalsRecordingFragment();\n-    }\n-\n-    private final Runnable intervalRunner = new Runnable() {\n-        @Override\n-        public void run() {\n-            if (isResumed()) {\n-                updateIntervals();\n-                intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n-            }\n-        }\n-    };\n-\n-    private Handler intervalHandler;\n-\n-    @Override\n-    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n-        return inflater.inflate(R.layout.intervals_recording, container, false);\n-    }\n-\n-    @Override\n-    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-\n-        intervalHandler = new Handler();\n-\n-        intervalListView = new IntervalListView.IntervalReverseListView(getActivity(), this);\n-        intervalListView.setId(View.generateViewId());\n-        intervalListView.findViewById(R.id.interval_title_label).setVisibility(View.GONE);\n-        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n-        linearLayout.removeAllViews();\n-        linearLayout.addView(intervalListView);\n-\n-        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n-    }\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        intervalHandler.post(intervalRunner);\n-    }\n-\n-    @Override\n-    public void onPause() {\n-        super.onPause();\n-        intervalHandler.removeCallbacks(intervalRunner);\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-\n-        intervalListView.destroy();\n-        intervalListView = null;\n-        viewModel = null;\n-    }\n-\n-    /**\n-     * Update intervals through {@link IntervalStatisticsModel} view model.\n-     *\n-     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n-     */\n-    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n-        if (viewModel == null || intervalListView == null) {\n-            return;\n-        }\n-\n-        Track.Id trackId = PreferencesUtils.getRecordingTrackId(getContext());\n-        viewModel.invalidate();\n-        LiveData<IntervalStatistics> liveData;\n-        if (interval == null) {\n-            liveData = viewModel.getIntervalStats(trackId);\n-        } else {\n-            liveData = viewModel.getIntervalStats(trackId, interval);\n-        }\n-        liveData.observe(getActivity(), intervalStatistics -> {\n-            if (intervalStatistics != null) {\n-                intervalListView.display(intervalStatistics.getIntervalList());\n-            }\n-        });\n-    }\n-\n-    private void updateIntervals() {\n-        updateIntervals(null);\n-    }\n-\n-    @Override\n-    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n-        updateIntervals(interval);\n-    }\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "d625702c6894f3b63a746ceb22a1a52b98f06e81", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\nnew file mode 100644\nindex 000000000..199862a87\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n", "chunk": "@@ -0,0 +1,132 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {\n+                updateIntervals();\n+                intervalHandler.postDelayed(intervalRunner, 5000);\n+            }\n+        }\n+\n+        public void stop() {\n+            stopped = true;\n+        }\n+    }\n+\n+    private Handler intervalHandler = null;\n+    private IntervalRunner intervalRunner = null;\n+\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.intervals_recording, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+\n+        intervalHandler = new Handler();\n+\n+        intervalListView = new IntervalReverseListView(getActivity(), this);\n+        intervalListView.setId(View.generateViewId());\n+        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n+        linearLayout.removeAllViews();\n+        linearLayout.addView(intervalListView);\n+\n+        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n+    }\n+\n+    @Override\n+    public void onResume() {\n+        super.onResume();\n+        if (intervalRunner == null) {\n+            intervalRunner = new IntervalRunner();\n+            intervalRunner.run();\n+        }\n+    }\n+\n+    @Override\n+    public void onPause() {\n+        super.onPause();\n+        if (intervalRunner != null) {\n+            intervalRunner.stop();\n+            intervalRunner = null;\n+        }\n+    }\n+\n+    @Override\n+    public void onDestroy() {\n+        super.onDestroy();\n+\n+        intervalListView.destroy();\n+        intervalListView = null;\n+        viewModel = null;\n+    }\n+\n+    /**\n+     * Update intervals through {@link IntervalStatisticsModel} view model.\n+     *\n+     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n+     */\n+    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n+        if (viewModel == null | intervalListView == null) {\n+            return;\n+        }\n+\n+        long trackId = PreferencesUtils.getRecordingTrackId(getContext());\n+        viewModel.invalidate();\n+        LiveData<IntervalStatistics> liveData;\n+        if (interval == null) {\n+            liveData = viewModel.getIntervalStats(trackId);\n+        } else {\n+            liveData = viewModel.getIntervalStats(trackId, interval);\n+        }\n+        liveData.observe(getActivity(), intervalStatistics -> {\n+            if (intervalStatistics != null) {\n+                intervalListView.display(intervalStatistics.getIntervalList());\n+            }\n+        });\n+    }\n+\n+    private void updateIntervals() {\n+        updateIntervals(null);\n+    }\n+\n+    @Override\n+    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n+        updateIntervals(interval);\n+    }\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzkzMw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247933", "body": "||", "bodyText": "||", "bodyHTML": "<p dir=\"auto\">||</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:04:14Z", "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {\n+                updateIntervals();\n+                intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n+            }\n+        }\n+\n+        public void stop() {\n+            stopped = true;\n+        }\n+    }\n+\n+    private Handler intervalHandler = null;\n+    private IntervalRunner intervalRunner = null;\n+\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.intervals_recording, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+\n+        intervalHandler = new Handler();\n+\n+        intervalListView = new IntervalReverseListView(getActivity(), this);\n+        intervalListView.setId(View.generateViewId());\n+        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n+        linearLayout.removeAllViews();\n+        linearLayout.addView(intervalListView);\n+\n+        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n+    }\n+\n+    @Override\n+    public void onResume() {\n+        super.onResume();\n+        if (intervalRunner == null) {\n+            intervalRunner = new IntervalRunner();\n+            intervalRunner.run();\n+        }\n+    }\n+\n+    @Override\n+    public void onPause() {\n+        super.onPause();\n+        if (intervalRunner != null) {\n+            intervalRunner.stop();\n+            intervalRunner = null;\n+        }\n+    }\n+\n+    @Override\n+    public void onDestroy() {\n+        super.onDestroy();\n+\n+        intervalListView.destroy();\n+        intervalListView = null;\n+        viewModel = null;\n+    }\n+\n+    /**\n+     * Update intervals through {@link IntervalStatisticsModel} view model.\n+     *\n+     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n+     */\n+    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n+        if (viewModel == null | intervalListView == null) {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDAxNg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475514016", "bodyText": "Oopps :(", "author": "rgmf", "createdAt": "2020-08-24T10:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\nindex a6342e919..a52806630 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n", "chunk": "@@ -106,7 +98,7 @@ public class IntervalsRecordingFragment extends Fragment implements IntervalList\n      * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n      */\n     private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n-        if (viewModel == null | intervalListView == null) {\n+        if (viewModel == null || intervalListView == null) {\n             return;\n         }\n \n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\ndeleted file mode 100644\nindex a52806630..000000000\n--- a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n+++ /dev/null\n", "chunk": "@@ -1,128 +0,0 @@\n-package de.dennisguse.opentracks.fragments;\n-\n-import android.os.Bundle;\n-import android.os.Handler;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.LinearLayout;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import androidx.fragment.app.Fragment;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.ViewModelProvider;\n-\n-import de.dennisguse.opentracks.R;\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n-import de.dennisguse.opentracks.views.IntervalListView;\n-\n-/**\n- * A fragment to display the intervals from recording track.\n- */\n-public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n-\n-    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n-\n-    // Refreshing intervals stats it's not so demanding so 5 seconds is enough to balance performance and user experience.\n-    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n-\n-    private IntervalStatisticsModel viewModel;\n-    private IntervalListView.IntervalReverseListView intervalListView;\n-\n-    public static Fragment newInstance() {\n-        return new IntervalsRecordingFragment();\n-    }\n-\n-    private final Runnable intervalRunner = new Runnable() {\n-        @Override\n-        public void run() {\n-            if (isResumed()) {\n-                updateIntervals();\n-                intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n-            }\n-        }\n-    };\n-\n-    private Handler intervalHandler;\n-\n-    @Override\n-    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n-        return inflater.inflate(R.layout.intervals_recording, container, false);\n-    }\n-\n-    @Override\n-    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-\n-        intervalHandler = new Handler();\n-\n-        intervalListView = new IntervalListView.IntervalReverseListView(getActivity(), this);\n-        intervalListView.setId(View.generateViewId());\n-        intervalListView.findViewById(R.id.interval_title_label).setVisibility(View.GONE);\n-        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n-        linearLayout.removeAllViews();\n-        linearLayout.addView(intervalListView);\n-\n-        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n-    }\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        intervalHandler.post(intervalRunner);\n-    }\n-\n-    @Override\n-    public void onPause() {\n-        super.onPause();\n-        intervalHandler.removeCallbacks(intervalRunner);\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-\n-        intervalListView.destroy();\n-        intervalListView = null;\n-        viewModel = null;\n-    }\n-\n-    /**\n-     * Update intervals through {@link IntervalStatisticsModel} view model.\n-     *\n-     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n-     */\n-    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n-        if (viewModel == null || intervalListView == null) {\n-            return;\n-        }\n-\n-        Track.Id trackId = PreferencesUtils.getRecordingTrackId(getContext());\n-        viewModel.invalidate();\n-        LiveData<IntervalStatistics> liveData;\n-        if (interval == null) {\n-            liveData = viewModel.getIntervalStats(trackId);\n-        } else {\n-            liveData = viewModel.getIntervalStats(trackId, interval);\n-        }\n-        liveData.observe(getActivity(), intervalStatistics -> {\n-            if (intervalStatistics != null) {\n-                intervalListView.display(intervalStatistics.getIntervalList());\n-            }\n-        });\n-    }\n-\n-    private void updateIntervals() {\n-        updateIntervals(null);\n-    }\n-\n-    @Override\n-    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n-        updateIntervals(interval);\n-    }\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "d625702c6894f3b63a746ceb22a1a52b98f06e81", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\nnew file mode 100644\nindex 000000000..199862a87\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java\n", "chunk": "@@ -0,0 +1,132 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {\n+                updateIntervals();\n+                intervalHandler.postDelayed(intervalRunner, 5000);\n+            }\n+        }\n+\n+        public void stop() {\n+            stopped = true;\n+        }\n+    }\n+\n+    private Handler intervalHandler = null;\n+    private IntervalRunner intervalRunner = null;\n+\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.intervals_recording, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+\n+        intervalHandler = new Handler();\n+\n+        intervalListView = new IntervalReverseListView(getActivity(), this);\n+        intervalListView.setId(View.generateViewId());\n+        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n+        linearLayout.removeAllViews();\n+        linearLayout.addView(intervalListView);\n+\n+        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n+    }\n+\n+    @Override\n+    public void onResume() {\n+        super.onResume();\n+        if (intervalRunner == null) {\n+            intervalRunner = new IntervalRunner();\n+            intervalRunner.run();\n+        }\n+    }\n+\n+    @Override\n+    public void onPause() {\n+        super.onPause();\n+        if (intervalRunner != null) {\n+            intervalRunner.stop();\n+            intervalRunner = null;\n+        }\n+    }\n+\n+    @Override\n+    public void onDestroy() {\n+        super.onDestroy();\n+\n+        intervalListView.destroy();\n+        intervalListView = null;\n+        viewModel = null;\n+    }\n+\n+    /**\n+     * Update intervals through {@link IntervalStatisticsModel} view model.\n+     *\n+     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n+     */\n+    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n+        if (viewModel == null | intervalListView == null) {\n+            return;\n+        }\n+\n+        long trackId = PreferencesUtils.getRecordingTrackId(getContext());\n+        viewModel.invalidate();\n+        LiveData<IntervalStatistics> liveData;\n+        if (interval == null) {\n+            liveData = viewModel.getIntervalStats(trackId);\n+        } else {\n+            liveData = viewModel.getIntervalStats(trackId, interval);\n+        }\n+        liveData.observe(getActivity(), intervalStatistics -> {\n+            if (intervalStatistics != null) {\n+                intervalListView.display(intervalStatistics.getIntervalList());\n+            }\n+        });\n+    }\n+\n+    private void updateIntervals() {\n+        updateIntervals(null);\n+    }\n+\n+    @Override\n+    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n+        updateIntervals(interval);\n+    }\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODA3OQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248079", "body": "Why initialize some vars with `= null` directly?\r\nIsn't implicit?", "bodyText": "Why initialize some vars with = null directly?\nIsn't implicit?", "bodyHTML": "<p dir=\"auto\">Why initialize some vars with <code>= null</code> directly?<br>\nIsn't implicit?</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:05:22Z", "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -24,38 +24,48 @@\n import android.view.MotionEvent;\n import android.view.View;\n import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n import android.widget.Spinner;\n import android.widget.TextView;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.ViewModelProvider;\n \n import de.dennisguse.opentracks.R;\n import de.dennisguse.opentracks.TrackRecordedActivity;\n-import de.dennisguse.opentracks.content.TrackDataHub;\n-import de.dennisguse.opentracks.content.TrackDataListener;\n import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.data.Waypoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n import de.dennisguse.opentracks.stats.TrackStatistics;\n import de.dennisguse.opentracks.util.PreferencesUtils;\n import de.dennisguse.opentracks.util.StringUtils;\n import de.dennisguse.opentracks.util.TrackIconUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n \n /**\n  * A fragment to display track statistics to the user.\n  *\n  * @author Sandor Dornbush\n  * @author Rodrigo Damazio\n  */\n-public class StatisticsRecordedFragment extends Fragment implements TrackDataListener {\n+public class StatisticsRecordedFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TRACK_ID_KEY = \"trackId\";\n \n     private TrackStatistics trackStatistics = null;\n     private String category = \"\";\n+    private Track track;\n+\n+    private IntervalStatisticsModel viewModel = null;", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNTA2MA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475515060", "bodyText": "Lack of Java experience... I won't forget anymore \ud83d\ude04", "author": "rgmf", "createdAt": "2020-08-24T10:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex 5a1d58374..bdc3a8077 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -54,12 +54,12 @@ public class StatisticsRecordedFragment extends Fragment implements IntervalList\n \n     private static final String TRACK_ID_KEY = \"trackId\";\n \n-    private TrackStatistics trackStatistics = null;\n+    private TrackStatistics trackStatistics;\n     private String category = \"\";\n     private Track track;\n \n-    private IntervalStatisticsModel viewModel = null;\n-    private IntervalListView intervalListView = null;\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalListView intervalListView;\n \n     private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n         if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex bdc3a8077..bfa9412f3 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -50,22 +46,16 @@ import de.dennisguse.opentracks.views.IntervalListView;\n  * @author Sandor Dornbush\n  * @author Rodrigo Damazio\n  */\n-public class StatisticsRecordedFragment extends Fragment implements IntervalListView.IntervalListListener {\n+public class StatisticsRecordedFragment extends Fragment {\n \n     private static final String TRACK_ID_KEY = \"trackId\";\n \n-    private TrackStatistics trackStatistics;\n+    private TrackStatistics trackStatistics = null;\n     private String category = \"\";\n     private Track track;\n \n-    private IntervalStatisticsModel viewModel;\n-    private IntervalListView intervalListView;\n-\n     private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n         if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n-            if (viewModel != null) {\n-                viewModel.invalidate();\n-            }\n             if (isResumed()) {\n                 getActivity().runOnUiThread(() -> {\n                     if (isResumed()) {\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex bfa9412f3..395e4d0ce 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -54,6 +58,9 @@ public class StatisticsRecordedFragment extends Fragment {\n     private String category = \"\";\n     private Track track;\n \n+    private IntervalStatisticsModel viewModel = null;\n+    private IntervalListView intervalListView = null;\n+\n     private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n         if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n             if (isResumed()) {\n", "next_change": {"commit": "2b9d860d2d9b4184e643cdb96557915a0eb7caad", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex 395e4d0ce..5a1d58374 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -63,6 +63,9 @@ public class StatisticsRecordedFragment extends Fragment implements IntervalList\n \n     private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n         if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n+            if (viewModel != null) {\n+                viewModel.invalidate();\n+            }\n             if (isResumed()) {\n                 getActivity().runOnUiThread(() -> {\n                     if (isResumed()) {\n", "next_change": {"commit": "fb13fe402de897034f8ddf25b71b5e710cf1c99c", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex 5a1d58374..619b78352 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -50,22 +46,16 @@ import de.dennisguse.opentracks.views.IntervalListView;\n  * @author Sandor Dornbush\n  * @author Rodrigo Damazio\n  */\n-public class StatisticsRecordedFragment extends Fragment implements IntervalListView.IntervalListListener {\n+public class StatisticsRecordedFragment extends Fragment {\n \n     private static final String TRACK_ID_KEY = \"trackId\";\n \n-    private TrackStatistics trackStatistics = null;\n+    private TrackStatistics trackStatistics;\n     private String category = \"\";\n     private Track track;\n \n-    private IntervalStatisticsModel viewModel = null;\n-    private IntervalListView intervalListView = null;\n-\n     private final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n         if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n-            if (viewModel != null) {\n-                viewModel.invalidate();\n-            }\n             if (isResumed()) {\n                 getActivity().runOnUiThread(() -> {\n                     if (isResumed()) {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODIzOA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248238", "body": "+1", "bodyText": "+1", "bodyHTML": "<p dir=\"auto\">+1</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:06:31Z", "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -135,28 +174,28 @@ public void onActivityCreated(Bundle savedInstanceState) {\n         });\n     }\n \n+    private void addIntervals() {\n+        viewModel.getIntervalStats(track.getId()).observe(getActivity(), intervalStatistics -> {\n+            if (intervalStatistics != null) {\n+                intervalListView.display(intervalStatistics.getIntervalList());\n+            }\n+        });\n+    }\n+\n     @Override\n     public void onResume() {\n         super.onResume();\n         PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n \n-        TrackDataHub trackDataHub = ((TrackRecordedActivity) getActivity()).getTrackDataHub();\n-        trackDataHub.registerTrackDataListener(this, true, false, true, true);\n-    }\n-\n-    @Override\n-    public void onPause() {\n-        super.onPause();\n-        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n-\n-        TrackDataHub trackDataHub = ((TrackRecordedActivity) getActivity()).getTrackDataHub();\n-        trackDataHub.unregisterTrackDataListener(this);\n+        loadStatistics();\n     }\n \n     @Override\n     public void onDestroyView() {\n         super.onDestroyView();\n \n+        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex 5a1d58374..bfa9412f3 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -190,12 +161,16 @@ public class StatisticsRecordedFragment extends Fragment implements IntervalList\n         loadStatistics();\n     }\n \n+    @Override\n+    public void onPause() {\n+        super.onPause();\n+        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n+    }\n+\n     @Override\n     public void onDestroyView() {\n         super.onDestroyView();\n \n-        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n-\n         totalTimeValueView = null;\n \n         distanceValue = null;\n", "next_change": {"commit": "2b9d860d2d9b4184e643cdb96557915a0eb7caad", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex bfa9412f3..5a1d58374 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -161,16 +190,12 @@ public class StatisticsRecordedFragment extends Fragment {\n         loadStatistics();\n     }\n \n-    @Override\n-    public void onPause() {\n-        super.onPause();\n-        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n-    }\n-\n     @Override\n     public void onDestroyView() {\n         super.onDestroyView();\n \n+        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n+\n         totalTimeValueView = null;\n \n         distanceValue = null;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODI4Nw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248287", "body": "Commt is helpful?", "bodyText": "Commt is helpful?", "bodyHTML": "<p dir=\"auto\">Commt is helpful?</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:07:06Z", "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -291,5 +298,19 @@ private void updateUI() {\n             speedMovingValue.setText(parts.first);\n             speedMovingUnit.setText(parts.second);\n         }\n+\n+        // Set intervals.", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex 5a1d58374..bdc3a8077 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -299,7 +299,6 @@ public class StatisticsRecordedFragment extends Fragment implements IntervalList\n             speedMovingUnit.setText(parts.second);\n         }\n \n-        // Set intervals.\n         addIntervals();\n     }\n \n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex bdc3a8077..bfa9412f3 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -298,18 +269,5 @@ public class StatisticsRecordedFragment extends Fragment implements IntervalList\n             speedMovingValue.setText(parts.first);\n             speedMovingUnit.setText(parts.second);\n         }\n-\n-        addIntervals();\n-    }\n-\n-    @Override\n-    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n-        if (viewModel != null && intervalListView != null) {\n-            viewModel.getIntervalStats(track.getId(), interval).observe(getActivity(), intervalStatistics -> {\n-                if (intervalStatistics != null) {\n-                    intervalListView.display(intervalStatistics.getIntervalList());\n-                }\n-            });\n-        }\n     }\n }\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex bfa9412f3..395e4d0ce 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -269,5 +294,20 @@ public class StatisticsRecordedFragment extends Fragment {\n             speedMovingValue.setText(parts.first);\n             speedMovingUnit.setText(parts.second);\n         }\n+\n+        // Set intervals.\n+        addIntervals();\n+    }\n+\n+    @Override\n+    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n+        if (viewModel != null && intervalListView != null) {\n+            viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n+            viewModel.getIntervalStats(track.getId(), interval).observe(getActivity(), intervalStatistics -> {\n+                if (intervalStatistics != null) {\n+                    intervalListView.display(intervalStatistics.getIntervalList());\n+                }\n+            });\n+        }\n     }\n }\n", "next_change": {"commit": "fb13fe402de897034f8ddf25b71b5e710cf1c99c", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\nindex 395e4d0ce..619b78352 100644\n--- a/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n+++ b/src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java\n", "chunk": "@@ -294,20 +266,5 @@ public class StatisticsRecordedFragment extends Fragment implements IntervalList\n             speedMovingValue.setText(parts.first);\n             speedMovingUnit.setText(parts.second);\n         }\n-\n-        // Set intervals.\n-        addIntervals();\n-    }\n-\n-    @Override\n-    public void intervalChanged(IntervalStatisticsModel.IntervalOption interval) {\n-        if (viewModel != null && intervalListView != null) {\n-            viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n-            viewModel.getIntervalStats(track.getId(), interval).observe(getActivity(), intervalStatistics -> {\n-                if (intervalStatistics != null) {\n-                    intervalListView.display(intervalStatistics.getIntervalList());\n-                }\n-            });\n-        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODU3Mg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248572", "body": "Isn't this: \r\nCan you introduce \r\n`\r\npublic static final double MI_TO_KM = 1 / KM_TO_MI;\r\npublic static final double MI_TO_M = MI_TO_KM * KM_TO_M;\r\n`\r\n\r\nPS: Did not test this.....", "bodyText": "Isn't this:\nCan you introduce\npublic static final double MI_TO_KM = 1 / KM_TO_MI; public static final double MI_TO_M = MI_TO_KM * KM_TO_M;\nPS: Did not test this.....", "bodyHTML": "<p dir=\"auto\">Isn't this:<br>\nCan you introduce<br>\n<code>public static final double MI_TO_KM = 1 / KM_TO_MI; public static final double MI_TO_M = MI_TO_KM * KM_TO_M;</code></p>\n<p dir=\"auto\">PS: Did not test this.....</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:10:09Z", "path": "src/main/java/de/dennisguse/opentracks/util/UnitConversions.java", "diffHunk": "@@ -51,6 +51,8 @@\n     public static final double MM_TO_M = 0.001;\n \n     // Distance\n+    // multiplication factor to convert miles to meters\n+    public static final double MI_TO_M = 1609.344;", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxODU3Mw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475518573", "bodyText": "Can you introduce\npublic static final double MI_TO_KM = 1 / KM_TO_MI; public static final double MI_TO_M = MI_TO_KM * KM_TO_M;\n\n\ud83d\udc4d\n\nPS: Did not test this.....\n\nI check it out and I'll add tests if not any.", "author": "rgmf", "createdAt": "2020-08-24T10:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java b/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\nindex aefdf51ea..9b53bfde3 100644\n--- a/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\n+++ b/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\n", "chunk": "@@ -51,8 +51,6 @@ public class UnitConversions {\n     public static final double MM_TO_M = 0.001;\n \n     // Distance\n-    // multiplication factor to convert miles to meters\n-    public static final double MI_TO_M = 1609.344;\n     // multiplication factor to convert miles to feet\n     public static final double MI_TO_FT = 5280.0;\n     // multiplication factor to convert feet to miles\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java b/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\nindex 9b53bfde3..aefdf51ea 100644\n--- a/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\n+++ b/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\n", "chunk": "@@ -51,6 +51,8 @@ public class UnitConversions {\n     public static final double MM_TO_M = 0.001;\n \n     // Distance\n+    // multiplication factor to convert miles to meters\n+    public static final double MI_TO_M = 1609.344;\n     // multiplication factor to convert miles to feet\n     public static final double MI_TO_FT = 5280.0;\n     // multiplication factor to convert feet to miles\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java b/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\nindex aefdf51ea..9b53bfde3 100644\n--- a/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\n+++ b/src/main/java/de/dennisguse/opentracks/util/UnitConversions.java\n", "chunk": "@@ -51,8 +51,6 @@ public class UnitConversions {\n     public static final double MM_TO_M = 0.001;\n \n     // Distance\n-    // multiplication factor to convert miles to meters\n-    public static final double MI_TO_M = 1609.344;\n     // multiplication factor to convert miles to feet\n     public static final double MI_TO_FT = 5280.0;\n     // multiplication factor to convert feet to miles\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODY1Nw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248657", "body": "Default initialize in l:11 and then use intervalList.clear();\r\n\r\nThis may save some memory allocation (or the runtime is really good).", "bodyText": "Default initialize in l:11 and then use intervalList.clear();\nThis may save some memory allocation (or the runtime is really good).", "bodyHTML": "<p dir=\"auto\">Default initialize in l:11 and then use intervalList.clear();</p>\n<p dir=\"auto\">This may save some memory allocation (or the runtime is really good).</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:11:19Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -8,10 +8,10 @@ import de.dennisguse.opentracks.util.LocationUtils;\n import de.dennisguse.opentracks.util.UnitConversions;\n \n public class IntervalStatistics {\n-    List<Interval> intervalList;\n+    List<Interval> intervalList = new ArrayList<>();\n \n     public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList = new ArrayList<>();\n+        intervalList.clear();\n \n         if (trackPointList == null || trackPointList.size() == 0) {\n             return;\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODcxMw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248713", "body": "distance_m?", "bodyText": "distance_m?", "bodyHTML": "<p dir=\"auto\">distance_m?</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:11:47Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -53,28 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        private float distance = 0f;\n-        private float time = 0f;\n-\n-        public float getDistance() {\n-            return distance;\n-        }\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n \n         public Interval() {}\n \n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n         public Interval(Interval i) {\n-            distance = i.distance;\n-            time = i.time;\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n+\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODczMw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248733", "body": "time_ms?", "bodyText": "time_ms?", "bodyHTML": "<p dir=\"auto\">time_ms?</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:11:55Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -53,28 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        private float distance = 0f;\n-        private float time = 0f;\n-\n-        public float getDistance() {\n-            return distance;\n-        }\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n \n         public Interval() {}\n \n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n         public Interval(Interval i) {\n-            distance = i.distance;\n-            time = i.time;\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n+\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODkyMQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248921", "body": "What about:\r\n\r\n```\r\ninterval = new Interval(interval.distance - adjustedInterval.distance, interval.time - adjustedInterval.time);\r\n```", "bodyText": "What about:\ninterval = new Interval(interval.distance - adjustedInterval.distance, interval.time - adjustedInterval.time);", "bodyHTML": "<p dir=\"auto\">What about:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"interval = new Interval(interval.distance - adjustedInterval.distance, interval.time - adjustedInterval.time);\"><pre><code>interval = new Interval(interval.distance - adjustedInterval.distance, interval.time - adjustedInterval.time);\n</code></pre></div>", "author": "dennisguse", "createdAt": "2020-08-23T18:14:14Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -23,27 +23,22 @@ public class IntervalStatistics {\n             TrackPoint trackPoint = trackPointList.get(i);\n \n             if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n \n-                if (interval.distance >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance;\n+                if (interval.distance_m >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance_m;\n                     Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.distance *= adjustFactor;\n-                    adjustedInterval.time *= adjustFactor;\n+                    adjustedInterval.adjust(adjustFactor);\n \n                     intervalList.add(adjustedInterval);\n \n-                    Interval newInterval = new Interval();\n-                    newInterval.distance = interval.distance - adjustedInterval.distance;\n-                    newInterval.time = interval.time - adjustedInterval.time;\n-\n-                    interval = newInterval;\n+                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n                 }\n             }\n         }\n \n-        if (interval.distance > 1f) {\n+        if (interval.distance_m > 1f) {\n             intervalList.add(interval);\n         }\n     }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA1Mg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249052", "body": "For Interval:\r\npublic void adjust(float adjustFactor) {\r\n  distance *= adjustFactor;\r\n  time *= adjustFactor;\r\n}", "bodyText": "For Interval:\npublic void adjust(float adjustFactor) {\ndistance *= adjustFactor;\ntime *= adjustFactor;\n}", "bodyHTML": "<p dir=\"auto\">For Interval:<br>\npublic void adjust(float adjustFactor) {<br>\ndistance *= adjustFactor;<br>\ntime *= adjustFactor;<br>\n}</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:15:19Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -23,27 +23,22 @@ public class IntervalStatistics {\n             TrackPoint trackPoint = trackPointList.get(i);\n \n             if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n \n-                if (interval.distance >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance;\n+                if (interval.distance_m >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance_m;\n                     Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.distance *= adjustFactor;\n-                    adjustedInterval.time *= adjustFactor;\n+                    adjustedInterval.adjust(adjustFactor);\n \n                     intervalList.add(adjustedInterval);\n \n-                    Interval newInterval = new Interval();\n-                    newInterval.distance = interval.distance - adjustedInterval.distance;\n-                    newInterval.time = interval.time - adjustedInterval.time;\n-\n-                    interval = newInterval;\n+                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n                 }\n             }\n         }\n \n-        if (interval.distance > 1f) {\n+        if (interval.distance_m > 1f) {\n             intervalList.add(interval);\n         }\n     }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA3Ng==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249076", "body": "Put constructor(s) first", "bodyText": "Put constructor(s) first", "bodyHTML": "<p dir=\"auto\">Put constructor(s) first</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:15:48Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;\n+\n+        public float getDistance() {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -53,28 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        private float distance = 0f;\n-        private float time = 0f;\n-\n-        public float getDistance() {\n-            return distance;\n-        }\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n \n         public Interval() {}\n \n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n         public Interval(Interval i) {\n-            distance = i.distance;\n-            time = i.time;\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n+\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA4OQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249089", "body": "getSpeed_ms()", "bodyText": "getSpeed_ms()", "bodyHTML": "<p dir=\"auto\">getSpeed_ms()</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:15:57Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        public Interval() {}\n+\n+        public Interval(Interval i) {\n+            distance = i.distance;\n+            time = i.time;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 6ba4f0f83..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -53,28 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        private float distance = 0f;\n-        private float time = 0f;\n-\n-        public float getDistance() {\n-            return distance;\n-        }\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n \n         public Interval() {}\n \n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n         public Interval(Interval i) {\n-            distance = i.distance;\n-            time = i.time;\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n+\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\ndeleted file mode 100644\nindex 8ce33e02e..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.util.LocationUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-public class IntervalStatistics {\n-    List<Interval> intervalList = new ArrayList<>();\n-\n-    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n-        intervalList.clear();\n-\n-        if (trackPointList == null || trackPointList.size() == 0) {\n-            return;\n-        }\n-\n-        Interval interval = new Interval();\n-        for (int i = 1; i < trackPointList.size(); i++) {\n-            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n-            TrackPoint trackPoint = trackPointList.get(i);\n-\n-            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n-                interval.distance_m += prevTrackPoint.distanceTo(trackPoint);\n-                interval.time_ms += trackPoint.getTime() - prevTrackPoint.getTime();\n-\n-                if (interval.distance_m >= distanceInterval) {\n-                    float adjustFactor = distanceInterval / interval.distance_m;\n-                    Interval adjustedInterval = new Interval(interval);\n-                    adjustedInterval.adjust(adjustFactor);\n-\n-                    intervalList.add(adjustedInterval);\n-\n-                    interval = new Interval(interval.distance_m - adjustedInterval.distance_m, interval.time_ms - adjustedInterval.time_ms);\n-                }\n-            }\n-        }\n-\n-        if (interval.distance_m > 1f) {\n-            intervalList.add(interval);\n-        }\n-    }\n-\n-    public List<Interval> getIntervalList() {\n-        return intervalList;\n-    }\n-\n-    public static class Interval {\n-        private float distance_m = 0f;\n-        private float time_ms = 0f;\n-\n-        public Interval() {}\n-\n-        public Interval(float distance_m, float time_ms) {\n-            this.distance_m = distance_m;\n-            this.time_ms = time_ms;\n-        }\n-\n-        public Interval(Interval i) {\n-            distance_m = i.distance_m;\n-            time_ms = i.time_ms;\n-        }\n-\n-        public float getDistance_m() {\n-            return distance_m;\n-        }\n-\n-        public void adjust(float adjustFactor) {\n-            distance_m *= adjustFactor;\n-            time_ms *= adjustFactor;\n-        }\n-\n-        /**\n-         * @return speed of the interval in m/s.\n-         */\n-        public float getSpeed_ms() {\n-            if (distance_m == 0f) {\n-                return 0f;\n-            }\n-            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nnew file mode 100644\nindex 000000000..34e3c34c2\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -0,0 +1,67 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    intervalList.add(interval);\n+                    interval = new Interval();\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {\n+            if (distance == 0f) {\n+                return 0f;\n+            }\n+            return distance / (float) (time * UnitConversions.MS_TO_S);\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\nindex 34e3c34c2..8ce33e02e 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java\n", "chunk": "@@ -47,21 +48,38 @@ public class IntervalStatistics {\n     }\n \n     public static class Interval {\n-        float distance = 0f;\n-        float time = 0f;\n+        private float distance_m = 0f;\n+        private float time_ms = 0f;\n+\n+        public Interval() {}\n+\n+        public Interval(float distance_m, float time_ms) {\n+            this.distance_m = distance_m;\n+            this.time_ms = time_ms;\n+        }\n+\n+        public Interval(Interval i) {\n+            distance_m = i.distance_m;\n+            time_ms = i.time_ms;\n+        }\n+\n+        public float getDistance_m() {\n+            return distance_m;\n+        }\n \n-        public float getDistance() {\n-            return distance;\n+        public void adjust(float adjustFactor) {\n+            distance_m *= adjustFactor;\n+            time_ms *= adjustFactor;\n         }\n \n         /**\n          * @return speed of the interval in m/s.\n          */\n-        public float getSpeed() {\n-            if (distance == 0f) {\n+        public float getSpeed_ms() {\n+            if (distance_m == 0f) {\n                 return 0f;\n             }\n-            return distance / (float) (time * UnitConversions.MS_TO_S);\n+            return distance_m / (float) (time_ms * UnitConversions.MS_TO_S);\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTE2NA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249164", "body": "Why application?\r\nI guess, we pass it nowwhere else, right?\r\n\r\nIs this just a context?", "bodyText": "Why application?\nI guess, we pass it nowwhere else, right?\nIs this just a context?", "bodyHTML": "<p dir=\"auto\">Why application?<br>\nI guess, we pass it nowwhere else, right?</p>\n<p dir=\"auto\">Is this just a context?</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:16:47Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyNTU2Ng==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475625566", "bodyText": "AndroidViewModel needs Application (when I call super(application)).", "author": "rgmf", "createdAt": "2020-08-24T13:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\ndeleted file mode 100644\nindex a4d66e550..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ /dev/null\n", "chunk": "@@ -1,116 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import android.app.Application;\n-import android.content.Context;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.AndroidViewModel;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.MutableLiveData;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-/**\n- * This view model is used to load intervals for a track.\n- * It uses a default interval but it can be set from outside to manage the interval length.\n- */\n-public class IntervalStatisticsModel extends AndroidViewModel {\n-\n-    private MutableLiveData<IntervalStatistics> intervalStats;\n-    private IntervalOption interval;\n-\n-    public IntervalStatisticsModel(@NonNull Application application) {\n-        super(application);\n-        interval = IntervalOption.OPTION_1;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n-        if (intervalStats == null || this.interval != interval) {\n-            intervalStats = new MutableLiveData<>();\n-            this.interval = interval;\n-            loadIntervalStats(trackId);\n-        }\n-        return intervalStats;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n-        return getIntervalStats(trackId, interval);\n-    }\n-\n-    /**\n-     * Call this method when you want to force the view model to re-load intervals.\n-     */\n-    public void invalidate() {\n-        intervalStats = null;\n-    }\n-\n-    private void loadIntervalStats(Track.Id trackId) {\n-        new Thread(() -> {\n-            Context context = getApplication().getApplicationContext();\n-            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n-            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n-\n-            IntervalStatistics intervalStatistics = new IntervalStatistics();\n-            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n-            intervalStatistics.build(trackPointList, distanceInterval);\n-\n-            intervalStats.postValue(intervalStatistics);\n-        }).start();\n-    }\n-\n-    /**\n-     * Intervals length this view model support.\n-     */\n-    public enum IntervalOption {\n-        OPTION_1(1),\n-        OPTION_2(2),\n-        OPTION_3(3),\n-        OPTION_4(4),\n-        OPTION_5(5),\n-        OPTION_10(10),\n-        OPTION_20(20),\n-        OPTION_50(50);\n-\n-        private int value;\n-\n-        IntervalOption(int value) {\n-            this.value = value;\n-        }\n-\n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n-        public int getValue() {\n-            return value;\n-        }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nnew file mode 100644\nindex 000000000..89c5626e7\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -0,0 +1,98 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, IntervalOption.OPTION_1);\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {\n+            IntervalOption[] options = values();\n+            String[] values = new String[options.length];\n+\n+            for (int i = 0; i < options.length; i++) {\n+                values[i] = String.valueOf(options[i].getValue());\n+            }\n+\n+            return values;\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex 89c5626e7..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -65,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTU4OQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249589", "body": "What is the benefit of using a method?\r\nI would also argue that we should fail immediately rather than returning a default option.\r\n\r\n```\r\n   IntervalOption.values();\r\n````", "bodyText": "What is the benefit of using a method?\nI would also argue that we should fail immediately rather than returning a default option.\n   IntervalOption.values();", "bodyHTML": "<p dir=\"auto\">What is the benefit of using a method?<br>\nI would also argue that we should fail immediately rather than returning a default option.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"   IntervalOption.values();\"><pre><code>   IntervalOption.values();\n</code></pre></div>", "author": "dennisguse", "createdAt": "2020-08-23T18:21:16Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMDQ3OA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475630478", "bodyText": "The benefit of using the method was not to fail immediately. I've removed it then ;)", "author": "rgmf", "createdAt": "2020-08-24T13:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex a4d66e550..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -83,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\ndeleted file mode 100644\nindex 9021ac0a3..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ /dev/null\n", "chunk": "@@ -1,90 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import android.app.Application;\n-import android.content.Context;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.AndroidViewModel;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.MutableLiveData;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-/**\n- * This view model is used to load intervals for a track.\n- * It uses a default interval but it can be set from outside to manage the interval length.\n- */\n-public class IntervalStatisticsModel extends AndroidViewModel {\n-\n-    private MutableLiveData<IntervalStatistics> intervalStats;\n-    private IntervalOption interval;\n-\n-    public IntervalStatisticsModel(@NonNull Application application) {\n-        super(application);\n-        interval = IntervalOption.OPTION_1;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n-        if (intervalStats == null || this.interval != interval) {\n-            intervalStats = new MutableLiveData<>();\n-            this.interval = interval;\n-            loadIntervalStats(trackId);\n-        }\n-        return intervalStats;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n-        return getIntervalStats(trackId, interval);\n-    }\n-\n-    /**\n-     * Call this method when you want to force the view model to re-load intervals.\n-     */\n-    public void invalidate() {\n-        intervalStats = null;\n-    }\n-\n-    private void loadIntervalStats(Track.Id trackId) {\n-        new Thread(() -> {\n-            Context context = getApplication().getApplicationContext();\n-            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n-            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n-\n-            IntervalStatistics intervalStatistics = new IntervalStatistics();\n-            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n-            intervalStatistics.build(trackPointList, distanceInterval);\n-\n-            intervalStats.postValue(intervalStatistics);\n-        }).start();\n-    }\n-\n-    /**\n-     * Intervals length this view model support.\n-     */\n-    public enum IntervalOption {\n-        OPTION_1(1),\n-        OPTION_2(2),\n-        OPTION_3(3),\n-        OPTION_4(4),\n-        OPTION_5(5),\n-        OPTION_10(10),\n-        OPTION_20(20),\n-        OPTION_50(50);\n-\n-        private int value;\n-\n-        IntervalOption(int value) {\n-            this.value = value;\n-        }\n-\n-        public int getValue() {\n-            return value;\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nnew file mode 100644\nindex 000000000..89c5626e7\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -0,0 +1,98 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, IntervalOption.OPTION_1);\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {\n+            IntervalOption[] options = values();\n+            String[] values = new String[options.length];\n+\n+            for (int i = 0; i < options.length; i++) {\n+                values[i] = String.valueOf(options[i].getValue());\n+            }\n+\n+            return values;\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex 89c5626e7..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -65,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc0OQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249749", "body": "either static methods first or at the end.", "bodyText": "either static methods first or at the end.", "bodyHTML": "<p dir=\"auto\">either static methods first or at the end.</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:23:02Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex a4d66e550..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -83,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\ndeleted file mode 100644\nindex 9021ac0a3..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ /dev/null\n", "chunk": "@@ -1,90 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import android.app.Application;\n-import android.content.Context;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.AndroidViewModel;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.MutableLiveData;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-/**\n- * This view model is used to load intervals for a track.\n- * It uses a default interval but it can be set from outside to manage the interval length.\n- */\n-public class IntervalStatisticsModel extends AndroidViewModel {\n-\n-    private MutableLiveData<IntervalStatistics> intervalStats;\n-    private IntervalOption interval;\n-\n-    public IntervalStatisticsModel(@NonNull Application application) {\n-        super(application);\n-        interval = IntervalOption.OPTION_1;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n-        if (intervalStats == null || this.interval != interval) {\n-            intervalStats = new MutableLiveData<>();\n-            this.interval = interval;\n-            loadIntervalStats(trackId);\n-        }\n-        return intervalStats;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n-        return getIntervalStats(trackId, interval);\n-    }\n-\n-    /**\n-     * Call this method when you want to force the view model to re-load intervals.\n-     */\n-    public void invalidate() {\n-        intervalStats = null;\n-    }\n-\n-    private void loadIntervalStats(Track.Id trackId) {\n-        new Thread(() -> {\n-            Context context = getApplication().getApplicationContext();\n-            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n-            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n-\n-            IntervalStatistics intervalStatistics = new IntervalStatistics();\n-            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n-            intervalStatistics.build(trackPointList, distanceInterval);\n-\n-            intervalStats.postValue(intervalStatistics);\n-        }).start();\n-    }\n-\n-    /**\n-     * Intervals length this view model support.\n-     */\n-    public enum IntervalOption {\n-        OPTION_1(1),\n-        OPTION_2(2),\n-        OPTION_3(3),\n-        OPTION_4(4),\n-        OPTION_5(5),\n-        OPTION_10(10),\n-        OPTION_20(20),\n-        OPTION_50(50);\n-\n-        private int value;\n-\n-        IntervalOption(int value) {\n-            this.value = value;\n-        }\n-\n-        public int getValue() {\n-            return value;\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nnew file mode 100644\nindex 000000000..89c5626e7\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -0,0 +1,98 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, IntervalOption.OPTION_1);\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {\n+            IntervalOption[] options = values();\n+            String[] values = new String[options.length];\n+\n+            for (int i = 0; i < options.length; i++) {\n+                values[i] = String.valueOf(options[i].getValue());\n+            }\n+\n+            return values;\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex 89c5626e7..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -65,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250208", "body": "This is just for to string conversion, right?\r\nIf yes, then I would move this functionality to the actual user of this function.\r\n\r\n```\r\n        int[] a = {1};\r\n        Arrays.stream(a).mapToObj(String::valueOf).toArray(String[]::new);\r\n```", "bodyText": "This is just for to string conversion, right?\nIf yes, then I would move this functionality to the actual user of this function.\n        int[] a = {1};\n        Arrays.stream(a).mapToObj(String::valueOf).toArray(String[]::new);", "bodyHTML": "<p dir=\"auto\">This is just for to string conversion, right?<br>\nIf yes, then I would move this functionality to the actual user of this function.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        int[] a = {1};\n        Arrays.stream(a).mapToObj(String::valueOf).toArray(String[]::new);\n\"><pre><code>        int[] a = {1};\n        Arrays.stream(a).mapToObj(String::valueOf).toArray(String[]::new);\n</code></pre></div>", "author": "dennisguse", "createdAt": "2020-08-23T18:27:52Z", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NjExMg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475656112", "bodyText": "Is this okay?\nReview this please:\nint[] intValues = Arrays.stream(IntervalStatisticsModel.IntervalOption.values()).mapToInt(i -> i.getValue()).toArray();\nspinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, Arrays.stream(intValues).mapToObj(String::valueOf).toArray(String[]::new)));", "author": "rgmf", "createdAt": "2020-08-24T14:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY5NDc5OQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475694799", "bodyText": "Why not?\nString[] values = Arrays.stream(IntervalStatisticsModel.IntervalOption.values()).mapToObj(String::valueOf).toArray(String[]::new))\nspinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, values);", "author": "dennisguse", "createdAt": "2020-08-24T15:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNjAzOA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475706038", "bodyText": "I didn't sure what you want was it.\nOkay, then \ud83d\udc4d", "author": "rgmf", "createdAt": "2020-08-24T15:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMTcyMg==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475711722", "bodyText": "PS: Not tested ;)", "author": "dennisguse", "createdAt": "2020-08-24T15:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex a4d66e550..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -83,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\ndeleted file mode 100644\nindex 9021ac0a3..000000000\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ /dev/null\n", "chunk": "@@ -1,90 +0,0 @@\n-package de.dennisguse.opentracks.viewmodels;\n-\n-import android.app.Application;\n-import android.content.Context;\n-\n-import androidx.annotation.NonNull;\n-import androidx.lifecycle.AndroidViewModel;\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.MutableLiveData;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.util.UnitConversions;\n-\n-/**\n- * This view model is used to load intervals for a track.\n- * It uses a default interval but it can be set from outside to manage the interval length.\n- */\n-public class IntervalStatisticsModel extends AndroidViewModel {\n-\n-    private MutableLiveData<IntervalStatistics> intervalStats;\n-    private IntervalOption interval;\n-\n-    public IntervalStatisticsModel(@NonNull Application application) {\n-        super(application);\n-        interval = IntervalOption.OPTION_1;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n-        if (intervalStats == null || this.interval != interval) {\n-            intervalStats = new MutableLiveData<>();\n-            this.interval = interval;\n-            loadIntervalStats(trackId);\n-        }\n-        return intervalStats;\n-    }\n-\n-    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n-        return getIntervalStats(trackId, interval);\n-    }\n-\n-    /**\n-     * Call this method when you want to force the view model to re-load intervals.\n-     */\n-    public void invalidate() {\n-        intervalStats = null;\n-    }\n-\n-    private void loadIntervalStats(Track.Id trackId) {\n-        new Thread(() -> {\n-            Context context = getApplication().getApplicationContext();\n-            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n-            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n-\n-            IntervalStatistics intervalStatistics = new IntervalStatistics();\n-            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n-            intervalStatistics.build(trackPointList, distanceInterval);\n-\n-            intervalStats.postValue(intervalStatistics);\n-        }).start();\n-    }\n-\n-    /**\n-     * Intervals length this view model support.\n-     */\n-    public enum IntervalOption {\n-        OPTION_1(1),\n-        OPTION_2(2),\n-        OPTION_3(3),\n-        OPTION_4(4),\n-        OPTION_5(5),\n-        OPTION_10(10),\n-        OPTION_20(20),\n-        OPTION_50(50);\n-\n-        private int value;\n-\n-        IntervalOption(int value) {\n-            this.value = value;\n-        }\n-\n-        public int getValue() {\n-            return value;\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nnew file mode 100644\nindex 000000000..89c5626e7\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -0,0 +1,98 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, IntervalOption.OPTION_1);\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {\n+            IntervalOption[] options = values();\n+            String[] values = new String[options.length];\n+\n+            for (int i = 0; i < options.length; i++) {\n+                values[i] = String.valueOf(options[i].getValue());\n+            }\n+\n+            return values;\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\nindex 89c5626e7..9021ac0a3 100644\n--- a/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n+++ b/src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java\n", "chunk": "@@ -65,34 +83,8 @@ public class IntervalStatisticsModel extends AndroidViewModel {\n             this.value = value;\n         }\n \n-        /**\n-         * @param pos position of the interval option.\n-         * @return    the interval option that is in the position pos.\n-         */\n-        public static IntervalOption getIntervalOption(int pos) {\n-            if (values().length > pos) {\n-                return values()[pos];\n-            } else {\n-                return OPTION_1;\n-            }\n-        }\n-\n         public int getValue() {\n             return value;\n         }\n-\n-        /**\n-         * @return a string array with all options.\n-         */\n-        public static String[] getAllValues() {\n-            IntervalOption[] options = values();\n-            String[] values = new String[options.length];\n-\n-            for (int i = 0; i < options.length; i++) {\n-                values[i] = String.valueOf(options[i].getValue());\n-            }\n-\n-            return values;\n-        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDMyOQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250329", "body": "Can we not use the content of the parent?\r\n(PS: don't know)", "bodyText": "Can we not use the content of the parent?\n(PS: don't know)", "bodyHTML": "<p dir=\"auto\">Can we not use the content of the parent?<br>\n(PS: don't know)</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:29:18Z", "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals.\n+ * See {@link IntervalStatisticsAdapter}.\n+ */\n+public class IntervalListView extends LinearLayout {\n+\n+    protected IntervalStatisticsAdapter adapter;\n+    protected LinearLayout linearLayoutIntervals;\n+    protected Spinner spinnerIntervals;\n+    protected TextView spinnerIntervalsUnit;\n+\n+    protected Context context;\n+    protected IntervalListListener listener;\n+\n+    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n+        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n+            if (spinnerIntervalsUnit != null) {\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+            }\n+        }\n+    };\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MzgxNw==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475663817", "bodyText": "Yes, we can use getContext(). Done.", "author": "rgmf", "createdAt": "2020-08-24T14:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\nindex 8073eb1bf..dbff2c7bf 100644\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n+++ b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n", "chunk": "@@ -28,37 +29,35 @@ public class IntervalListView extends LinearLayout {\n     protected Spinner spinnerIntervals;\n     protected TextView spinnerIntervalsUnit;\n \n-    protected Context context;\n     protected IntervalListListener listener;\n \n     protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n         if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n             if (spinnerIntervalsUnit != null) {\n-                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(getContext()) ? getContext().getString(R.string.unit_kilometer) : getContext().getString(R.string.unit_mile));\n             }\n         }\n     };\n \n     public IntervalListView(Context context, IntervalListListener listener) {\n         super(context);\n-        this.context = context;\n         this.listener = listener;\n         PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n-        init();\n-    }\n \n-    protected void init() {\n         inflate(getContext(), R.layout.interval_list_view, this);\n         linearLayoutIntervals = findViewById(R.id.interval_list);\n         spinnerIntervals = findViewById(R.id.spinner_intervals);\n-        spinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, IntervalStatisticsModel.IntervalOption.getAllValues()));\n+\n+        int[] intValues = Arrays.stream(IntervalStatisticsModel.IntervalOption.values()).mapToInt(i -> i.getValue()).toArray();\n+\n+        spinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, Arrays.stream(intValues).mapToObj(String::valueOf).toArray(String[]::new)));\n         spinnerIntervalsUnit = findViewById(R.id.spinner_intervals_unit);\n-        spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+        spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(getContext()) ? getContext().getString(R.string.unit_kilometer) : getContext().getString(R.string.unit_mile));\n \n         spinnerIntervals.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n             @Override\n             public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n-                IntervalStatisticsModel.IntervalOption interval = IntervalStatisticsModel.IntervalOption.getIntervalOption(i);\n+                IntervalStatisticsModel.IntervalOption interval = IntervalStatisticsModel.IntervalOption.values()[i];\n                 listener.intervalChanged(interval);\n             }\n \n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\ndeleted file mode 100644\nindex dbff2c7bf..000000000\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n+++ /dev/null\n", "chunk": "@@ -1,120 +0,0 @@\n-package de.dennisguse.opentracks.views;\n-\n-import android.content.Context;\n-import android.content.SharedPreferences;\n-import android.view.View;\n-import android.widget.AdapterView;\n-import android.widget.ArrayAdapter;\n-import android.widget.LinearLayout;\n-import android.widget.Spinner;\n-import android.widget.TextView;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.R;\n-import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n-\n-/**\n- * LinearLayout view used to build a list of intervals.\n- * See {@link IntervalStatisticsAdapter}.\n- */\n-public class IntervalListView extends LinearLayout {\n-\n-    protected IntervalStatisticsAdapter adapter;\n-    protected LinearLayout linearLayoutIntervals;\n-    protected Spinner spinnerIntervals;\n-    protected TextView spinnerIntervalsUnit;\n-\n-    protected IntervalListListener listener;\n-\n-    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n-        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n-            if (spinnerIntervalsUnit != null) {\n-                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(getContext()) ? getContext().getString(R.string.unit_kilometer) : getContext().getString(R.string.unit_mile));\n-            }\n-        }\n-    };\n-\n-    public IntervalListView(Context context, IntervalListListener listener) {\n-        super(context);\n-        this.listener = listener;\n-        PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n-\n-        inflate(getContext(), R.layout.interval_list_view, this);\n-        linearLayoutIntervals = findViewById(R.id.interval_list);\n-        spinnerIntervals = findViewById(R.id.spinner_intervals);\n-\n-        int[] intValues = Arrays.stream(IntervalStatisticsModel.IntervalOption.values()).mapToInt(i -> i.getValue()).toArray();\n-\n-        spinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, Arrays.stream(intValues).mapToObj(String::valueOf).toArray(String[]::new)));\n-        spinnerIntervalsUnit = findViewById(R.id.spinner_intervals_unit);\n-        spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(getContext()) ? getContext().getString(R.string.unit_kilometer) : getContext().getString(R.string.unit_mile));\n-\n-        spinnerIntervals.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n-            @Override\n-            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n-                IntervalStatisticsModel.IntervalOption interval = IntervalStatisticsModel.IntervalOption.values()[i];\n-                listener.intervalChanged(interval);\n-            }\n-\n-            @Override\n-            public void onNothingSelected(AdapterView<?> adapterView) {\n-\n-            }\n-        });\n-    }\n-\n-    public void destroy() {\n-        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n-        adapter = null;\n-        linearLayoutIntervals = null;\n-        spinnerIntervals = null;\n-        spinnerIntervalsUnit = null;\n-        listener = null;\n-    }\n-\n-    public void display(List<IntervalStatistics.Interval> intervalList) {\n-        if (intervalList == null) {\n-            return;\n-        }\n-\n-        adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n-        linearLayoutIntervals.removeAllViews();\n-        for (int i = 0; i < adapter.getCount(); i++) {\n-            View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-            linearLayoutIntervals.addView(intervalView);\n-        }\n-    }\n-\n-    public interface IntervalListListener {\n-        void intervalChanged(IntervalStatisticsModel.IntervalOption interval);\n-    }\n-\n-    /**\n-     * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n-     * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n-     */\n-    public static class IntervalReverseListView extends IntervalListView {\n-\n-        public IntervalReverseListView(Context context, IntervalListListener listener) {\n-            super(context, listener);\n-        }\n-\n-        public void display(List<IntervalStatistics.Interval> intervalList) {\n-            if (intervalList == null) {\n-                return;\n-            }\n-\n-            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n-            linearLayoutIntervals.removeAllViews();\n-            for (int i = 0; i < adapter.getCount(); i++) {\n-                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-                linearLayoutIntervals.addView(intervalView, 0);\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\nnew file mode 100644\nindex 000000000..4d0aed501\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n", "chunk": "@@ -0,0 +1,72 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+public class IntervalListView extends LinearLayout {\n+\n+    private IntervalStatisticsAdapter adapter;\n+    private LinearLayout linearLayoutIntervals;\n+    private Spinner spinnerIntervals;\n+    private TextView spinnerIntervalsUnit;\n+\n+    private Context context;\n+    private IntervalListListener listener;\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;\n+        this.listener = listener;\n+        init();\n+    }\n+\n+    private void init() {\n+        inflate(getContext(), R.layout.interval_list_view, this);\n+        linearLayoutIntervals = findViewById(R.id.interval_list);\n+        spinnerIntervals = findViewById(R.id.spinner_intervals);\n+        spinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, IntervalStatisticsModel.IntervalOption.getAllValues()));\n+        spinnerIntervalsUnit = findViewById(R.id.spinner_intervals_unit);\n+        spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+\n+        spinnerIntervals.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n+            @Override\n+            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n+                IntervalStatisticsModel.IntervalOption interval = IntervalStatisticsModel.IntervalOption.getIntervalOption(i);\n+                listener.intervalChanged(interval);\n+            }\n+\n+            @Override\n+            public void onNothingSelected(AdapterView<?> adapterView) {\n+\n+            }\n+        });\n+    }\n+\n+    public void display(List<IntervalStatistics.Interval> intervalList) {\n+        if (intervalList != null) {\n+            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n+            linearLayoutIntervals.removeAllViews();\n+            for (int i = 0; i < adapter.getCount(); i++) {\n+                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n+                linearLayoutIntervals.addView(intervalView);\n+            }\n+        }\n+    }\n+\n+    public interface IntervalListListener {\n+        void intervalChanged(IntervalStatisticsModel.IntervalOption interval);\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\nindex 4d0aed501..dbff2c7bf 100644\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n+++ b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n", "chunk": "@@ -55,18 +68,53 @@ public class IntervalListView extends LinearLayout {\n         });\n     }\n \n+    public void destroy() {\n+        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n+        adapter = null;\n+        linearLayoutIntervals = null;\n+        spinnerIntervals = null;\n+        spinnerIntervalsUnit = null;\n+        listener = null;\n+    }\n+\n     public void display(List<IntervalStatistics.Interval> intervalList) {\n-        if (intervalList != null) {\n+        if (intervalList == null) {\n+            return;\n+        }\n+\n+        adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n+        linearLayoutIntervals.removeAllViews();\n+        for (int i = 0; i < adapter.getCount(); i++) {\n+            View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n+            linearLayoutIntervals.addView(intervalView);\n+        }\n+    }\n+\n+    public interface IntervalListListener {\n+        void intervalChanged(IntervalStatisticsModel.IntervalOption interval);\n+    }\n+\n+    /**\n+     * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+     * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+     */\n+    public static class IntervalReverseListView extends IntervalListView {\n+\n+        public IntervalReverseListView(Context context, IntervalListListener listener) {\n+            super(context, listener);\n+        }\n+\n+        public void display(List<IntervalStatistics.Interval> intervalList) {\n+            if (intervalList == null) {\n+                return;\n+            }\n+\n             adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n             linearLayoutIntervals.removeAllViews();\n             for (int i = 0; i < adapter.getCount(); i++) {\n                 View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-                linearLayoutIntervals.addView(intervalView);\n+                linearLayoutIntervals.addView(intervalView, 0);\n             }\n         }\n     }\n-\n-    public interface IntervalListListener {\n-        void intervalChanged(IntervalStatisticsModel.IntervalOption interval);\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDMzNA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250334", "body": "Why not put this into the constructor?", "bodyText": "Why not put this into the constructor?", "bodyHTML": "<p dir=\"auto\">Why not put this into the constructor?</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:29:20Z", "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals.\n+ * See {@link IntervalStatisticsAdapter}.\n+ */\n+public class IntervalListView extends LinearLayout {\n+\n+    protected IntervalStatisticsAdapter adapter;\n+    protected LinearLayout linearLayoutIntervals;\n+    protected Spinner spinnerIntervals;\n+    protected TextView spinnerIntervalsUnit;\n+\n+    protected Context context;\n+    protected IntervalListListener listener;\n+\n+    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n+        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n+            if (spinnerIntervalsUnit != null) {\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+            }\n+        }\n+    };\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;\n+        this.listener = listener;\n+        PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n+        init();\n+    }\n+\n+    protected void init() {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\nindex 8073eb1bf..dbff2c7bf 100644\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n+++ b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n", "chunk": "@@ -28,37 +29,35 @@ public class IntervalListView extends LinearLayout {\n     protected Spinner spinnerIntervals;\n     protected TextView spinnerIntervalsUnit;\n \n-    protected Context context;\n     protected IntervalListListener listener;\n \n     protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n         if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n             if (spinnerIntervalsUnit != null) {\n-                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(getContext()) ? getContext().getString(R.string.unit_kilometer) : getContext().getString(R.string.unit_mile));\n             }\n         }\n     };\n \n     public IntervalListView(Context context, IntervalListListener listener) {\n         super(context);\n-        this.context = context;\n         this.listener = listener;\n         PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n-        init();\n-    }\n \n-    protected void init() {\n         inflate(getContext(), R.layout.interval_list_view, this);\n         linearLayoutIntervals = findViewById(R.id.interval_list);\n         spinnerIntervals = findViewById(R.id.spinner_intervals);\n-        spinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, IntervalStatisticsModel.IntervalOption.getAllValues()));\n+\n+        int[] intValues = Arrays.stream(IntervalStatisticsModel.IntervalOption.values()).mapToInt(i -> i.getValue()).toArray();\n+\n+        spinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, Arrays.stream(intValues).mapToObj(String::valueOf).toArray(String[]::new)));\n         spinnerIntervalsUnit = findViewById(R.id.spinner_intervals_unit);\n-        spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+        spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(getContext()) ? getContext().getString(R.string.unit_kilometer) : getContext().getString(R.string.unit_mile));\n \n         spinnerIntervals.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n             @Override\n             public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n-                IntervalStatisticsModel.IntervalOption interval = IntervalStatisticsModel.IntervalOption.getIntervalOption(i);\n+                IntervalStatisticsModel.IntervalOption interval = IntervalStatisticsModel.IntervalOption.values()[i];\n                 listener.intervalChanged(interval);\n             }\n \n", "next_change": {"commit": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\ndeleted file mode 100644\nindex dbff2c7bf..000000000\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n+++ /dev/null\n", "chunk": "@@ -1,120 +0,0 @@\n-package de.dennisguse.opentracks.views;\n-\n-import android.content.Context;\n-import android.content.SharedPreferences;\n-import android.view.View;\n-import android.widget.AdapterView;\n-import android.widget.ArrayAdapter;\n-import android.widget.LinearLayout;\n-import android.widget.Spinner;\n-import android.widget.TextView;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.R;\n-import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n-import de.dennisguse.opentracks.util.PreferencesUtils;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n-\n-/**\n- * LinearLayout view used to build a list of intervals.\n- * See {@link IntervalStatisticsAdapter}.\n- */\n-public class IntervalListView extends LinearLayout {\n-\n-    protected IntervalStatisticsAdapter adapter;\n-    protected LinearLayout linearLayoutIntervals;\n-    protected Spinner spinnerIntervals;\n-    protected TextView spinnerIntervalsUnit;\n-\n-    protected IntervalListListener listener;\n-\n-    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n-        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n-            if (spinnerIntervalsUnit != null) {\n-                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(getContext()) ? getContext().getString(R.string.unit_kilometer) : getContext().getString(R.string.unit_mile));\n-            }\n-        }\n-    };\n-\n-    public IntervalListView(Context context, IntervalListListener listener) {\n-        super(context);\n-        this.listener = listener;\n-        PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n-\n-        inflate(getContext(), R.layout.interval_list_view, this);\n-        linearLayoutIntervals = findViewById(R.id.interval_list);\n-        spinnerIntervals = findViewById(R.id.spinner_intervals);\n-\n-        int[] intValues = Arrays.stream(IntervalStatisticsModel.IntervalOption.values()).mapToInt(i -> i.getValue()).toArray();\n-\n-        spinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, Arrays.stream(intValues).mapToObj(String::valueOf).toArray(String[]::new)));\n-        spinnerIntervalsUnit = findViewById(R.id.spinner_intervals_unit);\n-        spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(getContext()) ? getContext().getString(R.string.unit_kilometer) : getContext().getString(R.string.unit_mile));\n-\n-        spinnerIntervals.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n-            @Override\n-            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n-                IntervalStatisticsModel.IntervalOption interval = IntervalStatisticsModel.IntervalOption.values()[i];\n-                listener.intervalChanged(interval);\n-            }\n-\n-            @Override\n-            public void onNothingSelected(AdapterView<?> adapterView) {\n-\n-            }\n-        });\n-    }\n-\n-    public void destroy() {\n-        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n-        adapter = null;\n-        linearLayoutIntervals = null;\n-        spinnerIntervals = null;\n-        spinnerIntervalsUnit = null;\n-        listener = null;\n-    }\n-\n-    public void display(List<IntervalStatistics.Interval> intervalList) {\n-        if (intervalList == null) {\n-            return;\n-        }\n-\n-        adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n-        linearLayoutIntervals.removeAllViews();\n-        for (int i = 0; i < adapter.getCount(); i++) {\n-            View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-            linearLayoutIntervals.addView(intervalView);\n-        }\n-    }\n-\n-    public interface IntervalListListener {\n-        void intervalChanged(IntervalStatisticsModel.IntervalOption interval);\n-    }\n-\n-    /**\n-     * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n-     * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n-     */\n-    public static class IntervalReverseListView extends IntervalListView {\n-\n-        public IntervalReverseListView(Context context, IntervalListListener listener) {\n-            super(context, listener);\n-        }\n-\n-        public void display(List<IntervalStatistics.Interval> intervalList) {\n-            if (intervalList == null) {\n-                return;\n-            }\n-\n-            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n-            linearLayoutIntervals.removeAllViews();\n-            for (int i = 0; i < adapter.getCount(); i++) {\n-                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-                linearLayoutIntervals.addView(intervalView, 0);\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "818733cdc71fbccaa99eeefa1fe86138998b1990", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\nnew file mode 100644\nindex 000000000..4d0aed501\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n", "chunk": "@@ -0,0 +1,72 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+public class IntervalListView extends LinearLayout {\n+\n+    private IntervalStatisticsAdapter adapter;\n+    private LinearLayout linearLayoutIntervals;\n+    private Spinner spinnerIntervals;\n+    private TextView spinnerIntervalsUnit;\n+\n+    private Context context;\n+    private IntervalListListener listener;\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;\n+        this.listener = listener;\n+        init();\n+    }\n+\n+    private void init() {\n+        inflate(getContext(), R.layout.interval_list_view, this);\n+        linearLayoutIntervals = findViewById(R.id.interval_list);\n+        spinnerIntervals = findViewById(R.id.spinner_intervals);\n+        spinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, IntervalStatisticsModel.IntervalOption.getAllValues()));\n+        spinnerIntervalsUnit = findViewById(R.id.spinner_intervals_unit);\n+        spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+\n+        spinnerIntervals.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n+            @Override\n+            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n+                IntervalStatisticsModel.IntervalOption interval = IntervalStatisticsModel.IntervalOption.getIntervalOption(i);\n+                listener.intervalChanged(interval);\n+            }\n+\n+            @Override\n+            public void onNothingSelected(AdapterView<?> adapterView) {\n+\n+            }\n+        });\n+    }\n+\n+    public void display(List<IntervalStatistics.Interval> intervalList) {\n+        if (intervalList != null) {\n+            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n+            linearLayoutIntervals.removeAllViews();\n+            for (int i = 0; i < adapter.getCount(); i++) {\n+                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n+                linearLayoutIntervals.addView(intervalView);\n+            }\n+        }\n+    }\n+\n+    public interface IntervalListListener {\n+        void intervalChanged(IntervalStatisticsModel.IntervalOption interval);\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\nindex 4d0aed501..dbff2c7bf 100644\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n+++ b/src/main/java/de/dennisguse/opentracks/views/IntervalListView.java\n", "chunk": "@@ -55,18 +68,53 @@ public class IntervalListView extends LinearLayout {\n         });\n     }\n \n+    public void destroy() {\n+        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n+        adapter = null;\n+        linearLayoutIntervals = null;\n+        spinnerIntervals = null;\n+        spinnerIntervalsUnit = null;\n+        listener = null;\n+    }\n+\n     public void display(List<IntervalStatistics.Interval> intervalList) {\n-        if (intervalList != null) {\n+        if (intervalList == null) {\n+            return;\n+        }\n+\n+        adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n+        linearLayoutIntervals.removeAllViews();\n+        for (int i = 0; i < adapter.getCount(); i++) {\n+            View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n+            linearLayoutIntervals.addView(intervalView);\n+        }\n+    }\n+\n+    public interface IntervalListListener {\n+        void intervalChanged(IntervalStatisticsModel.IntervalOption interval);\n+    }\n+\n+    /**\n+     * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+     * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+     */\n+    public static class IntervalReverseListView extends IntervalListView {\n+\n+        public IntervalReverseListView(Context context, IntervalListListener listener) {\n+            super(context, listener);\n+        }\n+\n+        public void display(List<IntervalStatistics.Interval> intervalList) {\n+            if (intervalList == null) {\n+                return;\n+            }\n+\n             adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n             linearLayoutIntervals.removeAllViews();\n             for (int i = 0; i < adapter.getCount(); i++) {\n                 View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-                linearLayoutIntervals.addView(intervalView);\n+                linearLayoutIntervals.addView(intervalView, 0);\n             }\n         }\n     }\n-\n-    public interface IntervalListListener {\n-        void intervalChanged(IntervalStatisticsModel.IntervalOption interval);\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDQxNQ==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250415", "body": "Can move this into IntervalListView as a public static class?", "bodyText": "Can move this into IntervalListView as a public static class?", "bodyHTML": "<p dir=\"auto\">Can move this into IntervalListView as a public static class?</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:30:02Z", "path": "src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+ * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+ */\n+public class IntervalReverseListView extends IntervalListView {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\ndeleted file mode 100644\nindex 7c22966cb..000000000\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\n+++ /dev/null\n", "chunk": "@@ -1,31 +0,0 @@\n-package de.dennisguse.opentracks.views;\n-\n-import android.content.Context;\n-import android.view.View;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-\n-/**\n- * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n- * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n- */\n-public class IntervalReverseListView extends IntervalListView {\n-\n-    public IntervalReverseListView(Context context, IntervalListListener listener) {\n-        super(context, listener);\n-    }\n-\n-    public void display(List<IntervalStatistics.Interval> intervalList) {\n-        if (intervalList != null) {\n-            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n-            linearLayoutIntervals.removeAllViews();\n-            for (int i = 0; i < adapter.getCount(); i++) {\n-                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-                linearLayoutIntervals.addView(intervalView, 0);\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "d625702c6894f3b63a746ceb22a1a52b98f06e81", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\nnew file mode 100644\nindex 000000000..7c22966cb\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\n", "chunk": "@@ -0,0 +1,31 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+ * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+ */\n+public class IntervalReverseListView extends IntervalListView {\n+\n+    public IntervalReverseListView(Context context, IntervalListListener listener) {\n+        super(context, listener);\n+    }\n+\n+    public void display(List<IntervalStatistics.Interval> intervalList) {\n+        if (intervalList != null) {\n+            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n+            linearLayoutIntervals.removeAllViews();\n+            for (int i = 0; i < adapter.getCount(); i++) {\n+                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n+                linearLayoutIntervals.addView(intervalView, 0);\n+            }\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\ndeleted file mode 100644\nindex 7c22966cb..000000000\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\n+++ /dev/null\n", "chunk": "@@ -1,31 +0,0 @@\n-package de.dennisguse.opentracks.views;\n-\n-import android.content.Context;\n-import android.view.View;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-\n-/**\n- * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n- * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n- */\n-public class IntervalReverseListView extends IntervalListView {\n-\n-    public IntervalReverseListView(Context context, IntervalListListener listener) {\n-        super(context, listener);\n-    }\n-\n-    public void display(List<IntervalStatistics.Interval> intervalList) {\n-        if (intervalList != null) {\n-            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n-            linearLayoutIntervals.removeAllViews();\n-            for (int i = 0; i < adapter.getCount(); i++) {\n-                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-                linearLayoutIntervals.addView(intervalView, 0);\n-            }\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDQ1OA==", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250458", "body": "if (intervalList == null) {\r\n  return;\r\n}\r\n", "bodyText": "if (intervalList == null) {\nreturn;\n}", "bodyHTML": "<p dir=\"auto\">if (intervalList == null) {<br>\nreturn;<br>\n}</p>", "author": "dennisguse", "createdAt": "2020-08-23T18:30:31Z", "path": "src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+ * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+ */\n+public class IntervalReverseListView extends IntervalListView {\n+\n+    public IntervalReverseListView(Context context, IntervalListListener listener) {\n+        super(context, listener);\n+    }\n+\n+    public void display(List<IntervalStatistics.Interval> intervalList) {\n+        if (intervalList != null) {", "originalCommit": "7a865c3f0407b09f4be060eca1f487f4256243f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\ndeleted file mode 100644\nindex 7c22966cb..000000000\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\n+++ /dev/null\n", "chunk": "@@ -1,31 +0,0 @@\n-package de.dennisguse.opentracks.views;\n-\n-import android.content.Context;\n-import android.view.View;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-\n-/**\n- * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n- * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n- */\n-public class IntervalReverseListView extends IntervalListView {\n-\n-    public IntervalReverseListView(Context context, IntervalListListener listener) {\n-        super(context, listener);\n-    }\n-\n-    public void display(List<IntervalStatistics.Interval> intervalList) {\n-        if (intervalList != null) {\n-            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n-            linearLayoutIntervals.removeAllViews();\n-            for (int i = 0; i < adapter.getCount(); i++) {\n-                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-                linearLayoutIntervals.addView(intervalView, 0);\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "d625702c6894f3b63a746ceb22a1a52b98f06e81", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\nnew file mode 100644\nindex 000000000..7c22966cb\n--- /dev/null\n+++ b/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\n", "chunk": "@@ -0,0 +1,31 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+ * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+ */\n+public class IntervalReverseListView extends IntervalListView {\n+\n+    public IntervalReverseListView(Context context, IntervalListListener listener) {\n+        super(context, listener);\n+    }\n+\n+    public void display(List<IntervalStatistics.Interval> intervalList) {\n+        if (intervalList != null) {\n+            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n+            linearLayoutIntervals.removeAllViews();\n+            for (int i = 0; i < adapter.getCount(); i++) {\n+                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n+                linearLayoutIntervals.addView(intervalView, 0);\n+            }\n+        }\n+    }\n+}\n", "next_change": {"commit": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "changed_code": [{"header": "diff --git a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java b/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\ndeleted file mode 100644\nindex 7c22966cb..000000000\n--- a/src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java\n+++ /dev/null\n", "chunk": "@@ -1,31 +0,0 @@\n-package de.dennisguse.opentracks.views;\n-\n-import android.content.Context;\n-import android.view.View;\n-\n-import java.util.List;\n-\n-import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n-import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n-\n-/**\n- * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n- * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n- */\n-public class IntervalReverseListView extends IntervalListView {\n-\n-    public IntervalReverseListView(Context context, IntervalListListener listener) {\n-        super(context, listener);\n-    }\n-\n-    public void display(List<IntervalStatistics.Interval> intervalList) {\n-        if (intervalList != null) {\n-            adapter = new IntervalStatisticsAdapter(getContext(), intervalList);\n-            linearLayoutIntervals.removeAllViews();\n-            for (int i = 0; i < adapter.getCount(); i++) {\n-                View intervalView = adapter.getView(i, null, linearLayoutIntervals);\n-                linearLayoutIntervals.addView(intervalView, 0);\n-            }\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"oid": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "message": "Interval Stats: improve code and fixed some UI issues.", "committedDate": "2020-08-27T15:17:24Z", "type": "forcePushed"}, {"oid": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/35e0f095b96c049ba42b7f1bd7749adda3977b36", "message": "StatisticsRecordedFragment doesn't need TrackDataHub.\nTrackRecordedActivity saves Track object instead of track's id.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "818733cdc71fbccaa99eeefa1fe86138998b1990", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/818733cdc71fbccaa99eeefa1fe86138998b1990", "message": "Added intervals in StatisticsRecordedFragment with distance, speed and pace for all activity types.\nUsers can select the length of the interval (in a spinner with several options).\nThe intervals will be in km or mi depending on settings.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "15b04e05b9206a535e4d78096ad258fb1e17c8e9", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/15b04e05b9206a535e4d78096ad258fb1e17c8e9", "message": "Adjusted intervals.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "a74e38d0b09e114542b2722476c4a62209064a9f", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/a74e38d0b09e114542b2722476c4a62209064a9f", "message": "Interval statistics: show accumulate in distance column.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "35cedd3ee4a76d7b7d7c64796587253e414a0f25", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/35cedd3ee4a76d7b7d7c64796587253e414a0f25", "message": "Interval statistics: retain interval value after change orientation and recreation.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "2b9d860d2d9b4184e643cdb96557915a0eb7caad", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/2b9d860d2d9b4184e643cdb96557915a0eb7caad", "message": "Interval statistics: listen preferred units change (metric/imperial) and recreate intervals.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "6235ce75b4013877db2990fca8f9ba5e8e8bff9c", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/6235ce75b4013877db2990fca8f9ba5e8e8bff9c", "message": "Interval stats: improve code.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "d625702c6894f3b63a746ceb22a1a52b98f06e81", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/d625702c6894f3b63a746ceb22a1a52b98f06e81", "message": "Interval stats: added a new tab in TrackRecordingActivity that shows the intervals on live.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "6b27fd0377a960c7c1225dbda47b5ab3700b3283", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/6b27fd0377a960c7c1225dbda47b5ab3700b3283", "message": "Interval stats: added IntervalStatisticsTest.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "fc405c050d72319210152db87d00206059547f5e", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/fc405c050d72319210152db87d00206059547f5e", "message": "Interval stats: while user is recording a track intervals are refreshed every 5 seconds.\nInterval stats: completed the list of split intervals: 1, 2, 3, 4, 5, 10, 20 or 50 km or mi.\nFixes #87.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "099e390af69ca077f0ac9d56c2092a65e7d52d5f", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/099e390af69ca077f0ac9d56c2092a65e7d52d5f", "message": "Interval Stats: track's id it's not long anymore.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "message": "Interval Stats: improve code and fixed some UI issues.", "committedDate": "2020-08-27T15:17:24Z", "type": "commit"}, {"oid": "a6d55664745744e56706e654d793ffd0837114dc", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/a6d55664745744e56706e654d793ffd0837114dc", "message": "Announcement: while recording report current interval pace or speed.\nFixes #134.", "committedDate": "2020-08-28T07:42:07Z", "type": "commit"}, {"oid": "c70996e6df0cceeb712db0137913cc89ff064760", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/c70996e6df0cceeb712db0137913cc89ff064760", "message": "New style for spinner with text.", "committedDate": "2020-08-28T14:06:59Z", "type": "commit"}, {"oid": "fb13fe402de897034f8ddf25b71b5e710cf1c99c", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/fb13fe402de897034f8ddf25b71b5e710cf1c99c", "message": "Interval Stats: use a tab for recorded tracks as well.", "committedDate": "2020-09-01T21:58:31Z", "type": "commit"}, {"oid": "fb13fe402de897034f8ddf25b71b5e710cf1c99c", "url": "https://github.com/OpenTracksApp/OpenTracks/commit/fb13fe402de897034f8ddf25b71b5e710cf1c99c", "message": "Interval Stats: use a tab for recorded tracks as well.", "committedDate": "2020-09-01T21:58:31Z", "type": "forcePushed"}]}