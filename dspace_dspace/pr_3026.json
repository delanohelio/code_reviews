{"pr_number": 3026, "pr_title": "Submission from external source rejected with 403", "pr_author": "alemarte", "pr_createdAt": "2020-10-22T16:23:09Z", "pr_url": "https://github.com/DSpace/DSpace/pull/3026", "timeline": [{"oid": "57417884acd97c36f4485e7d83ab8fe22be04451", "url": "https://github.com/DSpace/DSpace/commit/57417884acd97c36f4485e7d83ab8fe22be04451", "message": "[CSTPER-212] Submission from external source rejected with 403", "committedDate": "2020-10-22T13:42:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTY4OQ==", "url": "https://github.com/DSpace/DSpace/pull/3026#discussion_r517609689", "body": "@alemarte : This entire section of code can be simplified if you'd just use `andDo()`, similar to other `post` calls in this same IT class, e.g. https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java#L837-L842\r\n\r\nThe code you have here will \"work\", but it's much slower as you are loading the entire result into a Map in order to just get the `id` returned.  Instead, you should be able to do something like\r\n```\r\nAtomicReference<Integer> idRef = new AtomicReference<>();\r\ngetClient(token).perform(post(\"/api/submission/workspaceitems\")\r\n                    .param(\"owningCollection\", col1.getID().toString())\r\n                    .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\r\n                    .content(\"https://localhost:8080/server/api/integration/externalsources/\" +\r\n                                                  \"mock/entryValues/one\"))\r\n                    .andExpect(status().isCreated())\r\n                    .andExcept(jsonPath(\"$._embedded.collection.id\", is(col1.getID().toString())))\r\n                    .andDo(result -> idRef.set(read(result.getResponse().getContentAsString(), \"$.id\")));\r\nworkspaceItemId = idRef.get();\r\n```\r\n\r\nWe also should be *cleaning up* in this method, by having a `try()` / `finally`, with `WorkspaceItemBuilder.deleteWorkspaceItem(idRef.get());` in the `finally` block.\r\n\r\nThis change in code does mean that you won't be able to get the `itemUuidString`, but I don't think that's necessary for this test.  All you need to ensure is that the WorkspaceItem is created in the correct collection, having *metadata* which matches the mock external source.\r\n", "bodyText": "@alemarte : This entire section of code can be simplified if you'd just use andDo(), similar to other post calls in this same IT class, e.g. https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java#L837-L842\nThe code you have here will \"work\", but it's much slower as you are loading the entire result into a Map in order to just get the id returned.  Instead, you should be able to do something like\nAtomicReference<Integer> idRef = new AtomicReference<>();\ngetClient(token).perform(post(\"/api/submission/workspaceitems\")\n                    .param(\"owningCollection\", col1.getID().toString())\n                    .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n                    .content(\"https://localhost:8080/server/api/integration/externalsources/\" +\n                                                  \"mock/entryValues/one\"))\n                    .andExpect(status().isCreated())\n                    .andExcept(jsonPath(\"$._embedded.collection.id\", is(col1.getID().toString())))\n                    .andDo(result -> idRef.set(read(result.getResponse().getContentAsString(), \"$.id\")));\nworkspaceItemId = idRef.get();\n\nWe also should be cleaning up in this method, by having a try() / finally, with WorkspaceItemBuilder.deleteWorkspaceItem(idRef.get()); in the finally block.\nThis change in code does mean that you won't be able to get the itemUuidString, but I don't think that's necessary for this test.  All you need to ensure is that the WorkspaceItem is created in the correct collection, having metadata which matches the mock external source.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/alemarte/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alemarte\">@alemarte</a> : This entire section of code can be simplified if you'd just use <code>andDo()</code>, similar to other <code>post</code> calls in this same IT class, e.g. <a href=\"https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java#L837-L842\">https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java#L837-L842</a></p>\n<p dir=\"auto\">The code you have here will \"work\", but it's much slower as you are loading the entire result into a Map in order to just get the <code>id</code> returned.  Instead, you should be able to do something like</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"AtomicReference&lt;Integer&gt; idRef = new AtomicReference&lt;&gt;();\ngetClient(token).perform(post(&quot;/api/submission/workspaceitems&quot;)\n                    .param(&quot;owningCollection&quot;, col1.getID().toString())\n                    .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n                    .content(&quot;https://localhost:8080/server/api/integration/externalsources/&quot; +\n                                                  &quot;mock/entryValues/one&quot;))\n                    .andExpect(status().isCreated())\n                    .andExcept(jsonPath(&quot;$._embedded.collection.id&quot;, is(col1.getID().toString())))\n                    .andDo(result -&gt; idRef.set(read(result.getResponse().getContentAsString(), &quot;$.id&quot;)));\nworkspaceItemId = idRef.get();\"><pre><code>AtomicReference&lt;Integer&gt; idRef = new AtomicReference&lt;&gt;();\ngetClient(token).perform(post(\"/api/submission/workspaceitems\")\n                    .param(\"owningCollection\", col1.getID().toString())\n                    .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n                    .content(\"https://localhost:8080/server/api/integration/externalsources/\" +\n                                                  \"mock/entryValues/one\"))\n                    .andExpect(status().isCreated())\n                    .andExcept(jsonPath(\"$._embedded.collection.id\", is(col1.getID().toString())))\n                    .andDo(result -&gt; idRef.set(read(result.getResponse().getContentAsString(), \"$.id\")));\nworkspaceItemId = idRef.get();\n</code></pre></div>\n<p dir=\"auto\">We also should be <em>cleaning up</em> in this method, by having a <code>try()</code> / <code>finally</code>, with <code>WorkspaceItemBuilder.deleteWorkspaceItem(idRef.get());</code> in the <code>finally</code> block.</p>\n<p dir=\"auto\">This change in code does mean that you won't be able to get the <code>itemUuidString</code>, but I don't think that's necessary for this test.  All you need to ensure is that the WorkspaceItem is created in the correct collection, having <em>metadata</em> which matches the mock external source.</p>", "author": "tdonohue", "createdAt": "2020-11-04T20:23:44Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -3829,6 +3829,55 @@ public void createWorkspaceItemFromExternalSourcesUnauthorized() throws Exceptio\n                    .andExpect(status().isUnauthorized());\n     }\n \n+    @Test\n+    public void createWorkspaceItemFromExternalSourcesNonAdminWithPermission() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\")\n+                .withSubmitterGroup(eperson).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        Integer workspaceItemId = null;\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(post(\"/api/submission/workspaceitems?owningCollection=\"\n+                                          + col1.getID().toString())\n+                                     .contentType(parseMediaType(\n+                                         TEXT_URI_LIST_VALUE))\n+                                     .content(\"https://localhost:8080/server/api/integration/externalsources/\" +\n+                                                  \"mock/entryValues/one\"))\n+                                    .andExpect(status().isCreated()).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String,Object> map = mapper.readValue(content, Map.class);\n+        workspaceItemId = (Integer) map.get(\"id\");\n+        String itemUuidString = String.valueOf(((Map) ((Map) map.get(\"_embedded\")).get(\"item\")).get(\"uuid\"));", "originalCommit": "57417884acd97c36f4485e7d83ab8fe22be04451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MzM1NA==", "url": "https://github.com/DSpace/DSpace/pull/3026#discussion_r518683354", "bodyText": "Thanks for your review @tdonohue. All the suggested improvements have been committed.", "author": "alemarte", "createdAt": "2020-11-06T11:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTY4OQ=="}], "type": "inlineReview"}, {"oid": "544828ae954cf6143a5c0938ed7659cb3a26c3bd", "url": "https://github.com/DSpace/DSpace/commit/544828ae954cf6143a5c0938ed7659cb3a26c3bd", "message": "[CSTPER-212] Submission from external source rejected with 403\n\nTest efficiency improvements.", "committedDate": "2020-11-06T11:02:58Z", "type": "commit"}]}