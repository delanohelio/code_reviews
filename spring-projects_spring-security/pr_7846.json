{"pr_number": 7846, "pr_title": "Set credentials charset of authentication converter", "pr_author": "peterkeller", "pr_createdAt": "2020-01-18T19:26:06Z", "pr_url": "https://github.com/spring-projects/spring-security/pull/7846", "timeline": [{"oid": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "url": "https://github.com/spring-projects/spring-security/commit/7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "message": "Set credentials charset of authentication converter", "committedDate": "2020-01-18T19:23:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MDg5Mw==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369540893", "body": "You can use `StandardCharsets.UTF_8` here instead of the String \"UTF-8\"", "bodyText": "You can use StandardCharsets.UTF_8 here instead of the String \"UTF-8\"", "bodyHTML": "<p dir=\"auto\">You can use <code>StandardCharsets.UTF_8</code> here instead of the String \"UTF-8\"</p>", "author": "eleftherias", "createdAt": "2020-01-22T12:51:31Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));", "originalCommit": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjA5NA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752094", "bodyText": "Thanks for your feedback. I adjusted the code.", "author": "peterkeller", "createdAt": "2020-01-22T19:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MDg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "changed_code": [{"header": "diff --git a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\nindex 63fe9c7129..c03b132807 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n", "chunk": "@@ -337,7 +340,7 @@ public class BasicAuthenticationFilterTests {\n \n \t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n \t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(StandardCharsets.UTF_8))));\n \t\trequest.setServletPath(\"/some_file.html\");\n \n \t\tMockHttpServletResponse response = new MockHttpServletResponse();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MTE5OA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369541198", "body": "You can use `StandardCharsets.ISO_8859_1` here instead of the String \"ISO-8859-1\"", "bodyText": "You can use StandardCharsets.ISO_8859_1 here instead of the String \"ISO-8859-1\"", "bodyHTML": "<p dir=\"auto\">You can use <code>StandardCharsets.ISO_8859_1</code> here instead of the String \"ISO-8859-1\"</p>", "author": "eleftherias", "createdAt": "2020-01-22T12:52:03Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"UTF-8\"))));\n+\t\trequest.setServletPath(\"/some_file.html\");\n+\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\n+\t\t// Test\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();\n+\t\tFilterChain chain = mock(FilterChain.class);\n+\n+\t\tfilter.doFilter(request, response, chain);\n+\n+\t\tassertThat(response.getStatus()).isEqualTo(200);\n+\t\tverify(chain).doFilter(any(ServletRequest.class), any(ServletResponse.class));\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(\"rod\");\n+\t\tassertThat(SecurityContextHolder.getContext().getAuthentication().getCredentials()).isEqualTo(\"\u00e4\u00f6\u00fc\");\n+\t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Iso_8859_1() throws Exception {\n+\t\tSecurityContextHolder.clearContext();\n+\n+\t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n+\t\trodRequest.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));\n+\t\tAuthentication rod = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\", AuthorityUtils.createAuthorityList(\"ROLE_1\"));\n+\n+\t\tmanager = mock(AuthenticationManager.class);\n+\t\twhen(manager.authenticate(rodRequest)).thenReturn(rod);\n+\t\twhen(manager.authenticate(not(eq(rodRequest)))).thenThrow(new BadCredentialsException(\"\"));\n+\n+\t\tfilter = new BasicAuthenticationFilter(manager, new BasicAuthenticationEntryPoint());\n+\t\tfilter.setCredentialsCharset(\"ISO-8859-1\");\n+\n+\t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"ISO-8859-1\"))));", "originalCommit": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjE3OA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752178", "bodyText": "I adjusted the code.", "author": "peterkeller", "createdAt": "2020-01-22T19:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MTE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "changed_code": [{"header": "diff --git a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\nindex 63fe9c7129..c03b132807 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n", "chunk": "@@ -371,7 +374,7 @@ public class BasicAuthenticationFilterTests {\n \n \t\tString token = \"rod:\u00e4\u00f6\u00fc\";\n \t\tMockHttpServletRequest request = new MockHttpServletRequest();\n-\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(\"ISO-8859-1\"))));\n+\t\trequest.addHeader(\"Authorization\", \"Basic \" + new String(Base64.encodeBase64(token.getBytes(StandardCharsets.ISO_8859_1))));\n \t\trequest.setServletPath(\"/some_file.html\");\n \n \t\tMockHttpServletResponse response = new MockHttpServletResponse();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NTUwOA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369545508", "body": "Although this test name follows the same pattern as other tests in this class, we would like any new tests to follow the convention *methodWhenConditionThenResult*.\r\nA possible name could be:\r\n```suggestion\r\n\tpublic void doFilterWhenTokenAndFilterCharsetMatchThenAuthenticated() throws Exception {\r\n```", "bodyText": "Although this test name follows the same pattern as other tests in this class, we would like any new tests to follow the convention methodWhenConditionThenResult.\nA possible name could be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n          \n          \n            \n            \tpublic void doFilterWhenTokenAndFilterCharsetMatchThenAuthenticated() throws Exception {", "bodyHTML": "<p dir=\"auto\">Although this test name follows the same pattern as other tests in this class, we would like any new tests to follow the convention <em>methodWhenConditionThenResult</em>.<br>\nA possible name could be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">testCredentialsWithUmlautUsingCharset_Utf_8</span>() throws <span class=\"pl-smi\">Exception</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">doFilterWhenTokenAndFilterCharsetMatchThenAuthenticated</span>() throws <span class=\"pl-smi\">Exception</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "eleftherias", "createdAt": "2020-01-22T13:02:03Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -320,4 +320,105 @@ public void skippedOnErrorDispatch() throws Exception {\n \n \t\tassertThat(response.getStatus()).isEqualTo(200);\n \t}\n+\n+\t@Test\n+\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {", "originalCommit": "7f9a50e54105a5292dc5e16950406cdfbb2b6d43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1MjM0OA==", "url": "https://github.com/spring-projects/spring-security/pull/7846#discussion_r369752348", "bodyText": "I adjusted the code.", "author": "peterkeller", "createdAt": "2020-01-22T19:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "changed_code": [{"header": "diff --git a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\nindex 63fe9c7129..c03b132807 100644\n--- a/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n+++ b/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java\n", "chunk": "@@ -322,7 +325,7 @@ public class BasicAuthenticationFilterTests {\n \t}\n \n \t@Test\n-\tpublic void testCredentialsWithUmlautUsingCharset_Utf_8() throws Exception {\n+\tpublic void doFilterWhenTokenAndFilterCharsetMatchDefaultThenAuthenticated() throws Exception {\n \t\tSecurityContextHolder.clearContext();\n \n \t\tUsernamePasswordAuthenticationToken rodRequest = new UsernamePasswordAuthenticationToken(\"rod\", \"\u00e4\u00f6\u00fc\");\n", "next_change": null}]}}, {"oid": "f53f4e0668b9034bf38741bda7b7c9bfa899709e", "url": "https://github.com/spring-projects/spring-security/commit/f53f4e0668b9034bf38741bda7b7c9bfa899709e", "message": "Polish unit tests", "committedDate": "2020-01-22T18:46:38Z", "type": "commit"}]}