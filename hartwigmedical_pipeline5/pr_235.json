{"pr_number": 235, "pr_title": "Dev 1723 - Sage Germline Calling", "pr_author": "jonbaber", "pr_createdAt": "2020-12-16T22:41:14Z", "pr_url": "https://github.com/hartwigmedical/pipeline5/pull/235", "merge_commit": "bf8c737aa07e79bbd1fbc134c637d1e1b422bbb4", "timeline": [{"oid": "fdfde2f785af2bf6879abb36fd5caca1403a0200", "url": "https://github.com/hartwigmedical/pipeline5/commit/fdfde2f785af2bf6879abb36fd5caca1403a0200", "message": "DEV-1723: Sage Germline Calling", "committedDate": "2020-12-16T22:10:58Z", "type": "commit"}, {"oid": "fcf832f86d7c01ba10c5370f131480c2a30634f1", "url": "https://github.com/hartwigmedical/pipeline5/commit/fcf832f86d7c01ba10c5370f131480c2a30634f1", "message": "DEV-1723: Sage Germline Calling", "committedDate": "2020-12-16T22:32:06Z", "type": "commit"}, {"oid": "f65a4d6526f88650dd418d6ecd727145b46d0d4f", "url": "https://github.com/hartwigmedical/pipeline5/commit/f65a4d6526f88650dd418d6ecd727145b46d0d4f", "message": "Merge branch 'DEV-1723' of github.com:hartwigmedical/pipeline5 into DEV-1723", "committedDate": "2020-12-16T22:40:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NDU4OA==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545164588", "body": "Can we add a new toggle here so we can turn it off without disabling the GATK germline calling?", "bodyText": "Can we add a new toggle here so we can turn it off without disabling the GATK germline calling?", "bodyHTML": "<p dir=\"auto\">Can we add a new toggle here so we can turn it off without disabling the GATK germline calling?</p>", "author": "pauldwolfe", "createdAt": "2020-12-17T15:11:10Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.hartwig.pipeline.calling.sage;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.datatypes.DataType;\n+import com.hartwig.pipeline.datatypes.FileTypes;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.execution.vm.unix.UnzipToDirectoryCommand;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.reruns.PersistedDataset;\n+import com.hartwig.pipeline.resource.ResourceFiles;\n+import com.hartwig.pipeline.stages.SubStageInputOutput;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+public class SageGermlineCaller extends SageCaller {\n+\n+    public static final String NAMESPACE = \"sage_germline\";\n+\n+    private final ResourceFiles resourceFiles;\n+\n+    public SageGermlineCaller(final AlignmentPair alignmentPair, final ResourceFiles resourceFiles,\n+            final PersistedDataset persistedDataset) {\n+        super(alignmentPair, persistedDataset, DataType.SOMATIC_VARIANTS_SAGE);\n+        this.resourceFiles = resourceFiles;\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return NAMESPACE;\n+    }\n+\n+    @Override\n+    public List<BashCommand> commands(final SomaticRunMetadata metadata) {\n+\n+        List<BashCommand> commands = Lists.newArrayList();\n+        commands.add(new UnzipToDirectoryCommand(VmDirectories.RESOURCES, resourceFiles.snpEffDb()));\n+\n+        String tumorBamPath = getTumorBamDownload().getLocalTargetPath();\n+        String referenceBamPath = getReferenceBamDownload().getLocalTargetPath();\n+        String tumorSampleName = metadata.tumor().sampleName();\n+        String referenceSampleName = metadata.reference().sampleName();\n+\n+        final SageCommandBuilder sageCommandBuilder =\n+                new SageCommandBuilder(resourceFiles).germlineMode(referenceSampleName, referenceBamPath, tumorSampleName, tumorBamPath);\n+        SageApplication sageApplication = new SageApplication(sageCommandBuilder);\n+        SageGermlinePostProcess sagePostProcess = new SageGermlinePostProcess(referenceSampleName, tumorSampleName, resourceFiles);\n+\n+        SubStageInputOutput sageOutput = sageApplication.andThen(sagePostProcess).apply(SubStageInputOutput.empty(tumorSampleName));\n+        commands.addAll(sageOutput.bash());\n+\n+        return commands;\n+    }\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(final BashStartupScript bash, final ResultsDirectory resultsDirectory) {\n+        return VirtualMachineJobDefinition.sageGermlineCalling(bash, resultsDirectory);\n+    }\n+\n+    @Override\n+    public boolean shouldRun(final Arguments arguments) {\n+        return arguments.runGermlineCaller();", "originalCommit": "f65a4d6526f88650dd418d6ecd727145b46d0d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1NTQwMQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545555401", "bodyText": "Done. Added run_sage_germline_caller argument.", "author": "jonbaber", "createdAt": "2020-12-18T03:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NDU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "9103d6a5de825bd4c9361ea4e76735dbc7d45a45", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\nindex 8a40226b..ce11be7c 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n", "chunk": "@@ -66,7 +66,7 @@ public class SageGermlineCaller extends SageCaller {\n \n     @Override\n     public boolean shouldRun(final Arguments arguments) {\n-        return arguments.runGermlineCaller();\n+        return arguments.runSageGermlineCaller();\n     }\n \n     @Override\n", "next_change": null}]}, "revised_code_in_main": {"commit": "bf8c737aa07e79bbd1fbc134c637d1e1b422bbb4", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\nindex 8a40226b..ce11be7c 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n", "chunk": "@@ -66,7 +66,7 @@ public class SageGermlineCaller extends SageCaller {\n \n     @Override\n     public boolean shouldRun(final Arguments arguments) {\n-        return arguments.runGermlineCaller();\n+        return arguments.runSageGermlineCaller();\n     }\n \n     @Override\n", "next_change": {"commit": "556c287e9e1d69ebb38127ed4300b71094b91d11", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\ndeleted file mode 100644\nindex ce11be7c..00000000\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n+++ /dev/null\n", "chunk": "@@ -1,92 +0,0 @@\n-package com.hartwig.pipeline.calling.sage;\n-\n-import java.util.List;\n-\n-import com.google.common.collect.Lists;\n-import com.hartwig.pipeline.Arguments;\n-import com.hartwig.pipeline.ResultsDirectory;\n-import com.hartwig.pipeline.alignment.AlignmentPair;\n-import com.hartwig.pipeline.datatypes.DataType;\n-import com.hartwig.pipeline.datatypes.FileTypes;\n-import com.hartwig.pipeline.execution.PipelineStatus;\n-import com.hartwig.pipeline.execution.vm.BashCommand;\n-import com.hartwig.pipeline.execution.vm.BashStartupScript;\n-import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n-import com.hartwig.pipeline.execution.vm.VmDirectories;\n-import com.hartwig.pipeline.execution.vm.unix.UnzipToDirectoryCommand;\n-import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n-import com.hartwig.pipeline.reruns.PersistedDataset;\n-import com.hartwig.pipeline.resource.ResourceFiles;\n-import com.hartwig.pipeline.stages.SubStageInputOutput;\n-import com.hartwig.pipeline.storage.RuntimeBucket;\n-\n-public class SageGermlineCaller extends SageCaller {\n-\n-    public static final String NAMESPACE = \"sage_germline\";\n-\n-    private final ResourceFiles resourceFiles;\n-\n-    public SageGermlineCaller(final AlignmentPair alignmentPair, final ResourceFiles resourceFiles,\n-            final PersistedDataset persistedDataset) {\n-        super(alignmentPair, persistedDataset, DataType.SOMATIC_VARIANTS_SAGE);\n-        this.resourceFiles = resourceFiles;\n-    }\n-\n-    @Override\n-    public String namespace() {\n-        return NAMESPACE;\n-    }\n-\n-    @Override\n-    public List<BashCommand> commands(final SomaticRunMetadata metadata) {\n-\n-        List<BashCommand> commands = Lists.newArrayList();\n-        commands.add(new UnzipToDirectoryCommand(VmDirectories.RESOURCES, resourceFiles.snpEffDb()));\n-\n-        String tumorBamPath = getTumorBamDownload().getLocalTargetPath();\n-        String referenceBamPath = getReferenceBamDownload().getLocalTargetPath();\n-        String tumorSampleName = metadata.tumor().sampleName();\n-        String referenceSampleName = metadata.reference().sampleName();\n-\n-        final SageCommandBuilder sageCommandBuilder =\n-                new SageCommandBuilder(resourceFiles).germlineMode(referenceSampleName, referenceBamPath, tumorSampleName, tumorBamPath);\n-        SageApplication sageApplication = new SageApplication(sageCommandBuilder);\n-        SageGermlinePostProcess sagePostProcess = new SageGermlinePostProcess(referenceSampleName, tumorSampleName, resourceFiles);\n-\n-        SubStageInputOutput sageOutput = sageApplication.andThen(sagePostProcess).apply(SubStageInputOutput.empty(tumorSampleName));\n-        commands.addAll(sageOutput.bash());\n-\n-        return commands;\n-    }\n-\n-    @Override\n-    public VirtualMachineJobDefinition vmDefinition(final BashStartupScript bash, final ResultsDirectory resultsDirectory) {\n-        return VirtualMachineJobDefinition.sageGermlineCalling(bash, resultsDirectory);\n-    }\n-\n-    @Override\n-    public boolean shouldRun(final Arguments arguments) {\n-        return arguments.runSageGermlineCaller();\n-    }\n-\n-    @Override\n-    protected String filteredOutput(final SomaticRunMetadata metadata) {\n-        return String.format(\"%s.%s.%s\",\n-                metadata.tumor().sampleName(),\n-                SageGermlinePostProcess.SAGE_GERMLINE_FILTERED,\n-                FileTypes.GZIPPED_VCF);\n-    }\n-\n-    @Override\n-    protected String unfilteredOutput(final SomaticRunMetadata metadata) {\n-        return String.format(\"%s.%s.%s\", metadata.tumor().sampleName(), \"sage.germline\", FileTypes.GZIPPED_VCF);\n-    }\n-\n-    @Override\n-    protected ImmutableSageOutput.Builder outputBuilder(final SomaticRunMetadata metadata, final PipelineStatus jobStatus,\n-            final RuntimeBucket bucket, final ResultsDirectory resultsDirectory) {\n-        final String geneCoverageFile = String.format(\"%s.sage.gene.coverage.tsv\", metadata.reference().sampleName());\n-        return super.outputBuilder(metadata, jobStatus, bucket, resultsDirectory)\n-                .addReportComponents(singleFileComponent(geneCoverageFile, bucket, resultsDirectory));\n-    }\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "3854fad6a37b54ddd18f09102d12212b574c43b8", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\nnew file mode 100644\nindex 00000000..2053d4fd\n--- /dev/null\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n", "chunk": "@@ -0,0 +1,23 @@\n+package com.hartwig.pipeline.calling.sage;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.reruns.PersistedDataset;\n+import com.hartwig.pipeline.resource.ResourceFiles;\n+\n+public class SageGermlineCaller extends SageCaller {\n+\n+    public SageGermlineCaller(final AlignmentPair alignmentPair, final PersistedDataset persistedDataset,\n+            final ResourceFiles resourceFiles) {\n+        super(alignmentPair, persistedDataset, SageConfiguration.germline(resourceFiles));\n+    }\n+\n+    @Override\n+    public List<BashCommand> tumorOnlyCommands(final SomaticRunMetadata metadata) {\n+        return Collections.emptyList();\n+    }\n+}\n", "next_change": {"commit": "b2582ad349f84fc281b585b28ecebc4609355df0", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\nindex 2053d4fd..a869599c 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n", "chunk": "@@ -18,6 +19,6 @@ public class SageGermlineCaller extends SageCaller {\n \n     @Override\n     public List<BashCommand> tumorOnlyCommands(final SomaticRunMetadata metadata) {\n-        return Collections.emptyList();\n+        return Stage.disabled();\n     }\n }\n", "next_change": {"commit": "4ed3597cc3f75c3eeaab5683812dec24e1cd6758", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\nindex a869599c..78739c7f 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageGermlineCaller.java\n", "chunk": "@@ -17,6 +17,15 @@ public class SageGermlineCaller extends SageCaller {\n         super(alignmentPair, persistedDataset, SageConfiguration.germline(resourceFiles));\n     }\n \n+    @Override\n+    public List<BashCommand> referenceOnlyCommands(final SomaticRunMetadata metadata) {\n+        return new SageApplication(sageConfiguration.commandBuilder()\n+                .addReference(metadata.reference().sampleName(),\n+                        getReferenceBamDownload().getLocalTargetPath())).andThen(sageConfiguration.postProcess().apply(metadata))\n+                .apply(SubStageInputOutput.empty(metadata.reference().sampleName()))\n+                .bash();\n+    }\n+\n     @Override\n     public List<BashCommand> tumorOnlyCommands(final SomaticRunMetadata metadata) {\n         return Stage.disabled();\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "bf8c737aa07e79bbd1fbc134c637d1e1b422bbb4", "message": "Merge commit", "committedDate": null}, {"oid": "4d685322eddc2d69613732fcebac570ea9f5ca1e", "committedDate": "2021-01-14 10:41:30 +1000", "message": "DEV-1755: Bump SAGE to 2.6"}, {"oid": "3f378e63aa0cd311d7b6784a1fe89ec25e4dbcc7", "committedDate": "2021-02-04 14:17:47 -0500", "message": "Fix issue with biopsy path for reruns and incorrect datatype for sage germline."}, {"oid": "f8ea0ca5777da1c331e4c5728789781b49acf570", "committedDate": "2021-02-10 11:00:52 -0500", "message": "Reduce germline calling heap settings to match new VM size."}, {"oid": "a16da11a3320ab73d3d9e3c3b4b4dd965aa4b10e", "committedDate": "2021-02-10 11:14:17 -0500", "message": "Revert \"Reduce germline calling heap settings to match new VM size.\""}, {"oid": "613442d5004026b9bb349fe41054fabbaa7ae6f3", "committedDate": "2021-02-23 18:03:07 -0500", "message": "Merge 5.19 hotfix"}, {"oid": "8ba1bce0c0209178bbbd18714dc38dc8f7937c43", "committedDate": "2021-02-25 11:16:02 +1000", "message": "DEV-1831: Improved support for file locations api"}, {"oid": "a7dbf9fb65e9f5c3cdd8236f3fcf53b2ec3f08cc", "committedDate": "2021-03-05 14:21:34 +1000", "message": "DEV-1831: Fixed regression bug"}, {"oid": "18e6255024dc1a9340e63bd41c09a15de57882c2", "committedDate": "2021-03-25 15:01:28 -0400", "message": "5.21-hotfix germline slicing"}, {"oid": "dbf11eb0f9eb056dfdafd543c89e60e1aad259e8", "committedDate": "2021-10-04 13:41:53 -0400", "message": "DEV-2203 Add Orange to pipeline (#325)"}, {"oid": "c5e2775021b1d0ccc3292d46eb192959e5b0a31d", "committedDate": "2021-10-28 15:19:49 -0400", "message": "DEV-2329 Support rerunning orange from persisted data"}, {"oid": "bf8f0aaeafbef47c7d61a9b0b031994ff8b481f7", "committedDate": "2021-12-07 09:00:58 +1100", "message": "DEV-2402: removed all references to and uses of SnpEff"}, {"oid": "556c287e9e1d69ebb38127ed4300b71094b91d11", "committedDate": "2022-03-02 17:39:23 -0500", "message": "DEV-2546 Spike refactoring of SAGE"}, {"oid": "3854fad6a37b54ddd18f09102d12212b574c43b8", "committedDate": "2022-03-07 09:13:23 -0500", "message": "DEV-2546 Improve smoke test for new modes"}, {"oid": "b2582ad349f84fc281b585b28ecebc4609355df0", "committedDate": "2022-03-08 15:40:19 -0500", "message": "DEV-2596 Refactor gripss somatic/germline to consolidate shared logic"}, {"oid": "4ed3597cc3f75c3eeaab5683812dec24e1cd6758", "committedDate": "2022-04-11 11:15:15 -0400", "message": "DEV-2593 Support tumor-only, germline-only and target-region modes"}, {"oid": "1d336f21fe2765371c5db4b919b90986953fca09", "committedDate": "2022-05-03 21:04:07 -0400", "message": "DEV-2705 Add starting point for Protect-only runs"}, {"oid": "b6c20b02d458a97251f3e55dd881f961f2c2de6e", "committedDate": "2023-01-24 10:33:13 -0500", "message": "DEV-3036 Remove the dependency HMF API (#465)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NjkzNQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545166935", "body": "What impact will this have downstream on reporting, etc? Will we need to do another rerun to make data homogenous again? \r\n\r\nWe could limit this impact of this change by not changing this namespace yet and making that a separate ticket.", "bodyText": "What impact will this have downstream on reporting, etc? Will we need to do another rerun to make data homogenous again?\nWe could limit this impact of this change by not changing this namespace yet and making that a separate ticket.", "bodyHTML": "<p dir=\"auto\">What impact will this have downstream on reporting, etc? Will we need to do another rerun to make data homogenous again?</p>\n<p dir=\"auto\">We could limit this impact of this change by not changing this namespace yet and making that a separate ticket.</p>", "author": "pauldwolfe", "createdAt": "2020-12-17T15:14:12Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.hartwig.pipeline.calling.sage;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+import com.hartwig.pipeline.Arguments;\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.datatypes.DataType;\n+import com.hartwig.pipeline.datatypes.FileTypes;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.execution.vm.VmDirectories;\n+import com.hartwig.pipeline.execution.vm.unix.UnzipToDirectoryCommand;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.reruns.PersistedDataset;\n+import com.hartwig.pipeline.resource.ResourceFiles;\n+import com.hartwig.pipeline.stages.SubStageInputOutput;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+\n+public class SageSomaticCaller extends SageCaller {\n+\n+    public static final String NAMESPACE = \"sage_somatic\";", "originalCommit": "f65a4d6526f88650dd418d6ecd727145b46d0d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1NTQ5Ng==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545555496", "bodyText": "Done. Reverted to sage.", "author": "jonbaber", "createdAt": "2020-12-18T03:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NjkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9103d6a5de825bd4c9361ea4e76735dbc7d45a45", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nindex ce435da5..92d13554 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -22,7 +22,7 @@ import com.hartwig.pipeline.storage.RuntimeBucket;\n \n public class SageSomaticCaller extends SageCaller {\n \n-    public static final String NAMESPACE = \"sage_somatic\";\n+    public static final String NAMESPACE = \"sage\";\n \n     private final ResourceFiles resourceFiles;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "bf8c737aa07e79bbd1fbc134c637d1e1b422bbb4", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nindex ce435da5..92d13554 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -22,7 +22,7 @@ import com.hartwig.pipeline.storage.RuntimeBucket;\n \n public class SageSomaticCaller extends SageCaller {\n \n-    public static final String NAMESPACE = \"sage_somatic\";\n+    public static final String NAMESPACE = \"sage\";\n \n     private final ResourceFiles resourceFiles;\n \n", "next_change": {"commit": "8ba50186e2cabbda24b0c10b18b175ec44bc1ab3", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nindex 92d13554..ce435da5 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -22,7 +22,7 @@ import com.hartwig.pipeline.storage.RuntimeBucket;\n \n public class SageSomaticCaller extends SageCaller {\n \n-    public static final String NAMESPACE = \"sage\";\n+    public static final String NAMESPACE = \"sage_somatic\";\n \n     private final ResourceFiles resourceFiles;\n \n", "next_change": {"commit": "94c9264bd3a86f378538e9922b11a56dfb61424c", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nindex ce435da5..a6f5e957 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -25,10 +25,13 @@ public class SageSomaticCaller extends SageCaller {\n     public static final String NAMESPACE = \"sage_somatic\";\n \n     private final ResourceFiles resourceFiles;\n+    private final boolean shallow;\n \n-    public SageSomaticCaller(final AlignmentPair alignmentPair, final ResourceFiles resourceFiles, final PersistedDataset persistedDataset) {\n+    public SageSomaticCaller(final AlignmentPair alignmentPair, final ResourceFiles resourceFiles, final PersistedDataset persistedDataset,\n+            boolean shallow) {\n         super(alignmentPair, persistedDataset, DataType.SOMATIC_VARIANTS_SAGE);\n         this.resourceFiles = resourceFiles;\n+        this.shallow = shallow;\n     }\n \n     @Override\n", "next_change": {"commit": "c5e2775021b1d0ccc3292d46eb192959e5b0a31d", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nindex a6f5e957..290c1bb2 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -29,7 +29,12 @@ public class SageSomaticCaller extends SageCaller {\n \n     public SageSomaticCaller(final AlignmentPair alignmentPair, final ResourceFiles resourceFiles, final PersistedDataset persistedDataset,\n             boolean shallow) {\n-        super(alignmentPair, persistedDataset, DataType.SOMATIC_VARIANTS_SAGE);\n+        super(alignmentPair,\n+                persistedDataset,\n+                DataType.SOMATIC_VARIANTS_SAGE,\n+                DataType.SOMATIC_GENE_COVERAGE,\n+                DataType.SOMATIC_TUMOR_SAMPLE_BQR_PLOT,\n+                DataType.SOMATIC_REF_SAMPLE_BQR_PLOT);\n         this.resourceFiles = resourceFiles;\n         this.shallow = shallow;\n     }\n", "next_change": {"commit": "556c287e9e1d69ebb38127ed4300b71094b91d11", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\ndeleted file mode 100644\nindex 290c1bb2..00000000\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ /dev/null\n", "chunk": "@@ -1,104 +0,0 @@\n-package com.hartwig.pipeline.calling.sage;\n-\n-import java.util.List;\n-\n-import com.google.common.collect.Lists;\n-import com.hartwig.pipeline.Arguments;\n-import com.hartwig.pipeline.ResultsDirectory;\n-import com.hartwig.pipeline.alignment.AlignmentPair;\n-import com.hartwig.pipeline.datatypes.DataType;\n-import com.hartwig.pipeline.datatypes.FileTypes;\n-import com.hartwig.pipeline.execution.PipelineStatus;\n-import com.hartwig.pipeline.execution.vm.BashCommand;\n-import com.hartwig.pipeline.execution.vm.BashStartupScript;\n-import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n-import com.hartwig.pipeline.execution.vm.VmDirectories;\n-import com.hartwig.pipeline.execution.vm.unix.UnzipToDirectoryCommand;\n-import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n-import com.hartwig.pipeline.reruns.PersistedDataset;\n-import com.hartwig.pipeline.resource.ResourceFiles;\n-import com.hartwig.pipeline.stages.SubStageInputOutput;\n-import com.hartwig.pipeline.storage.RuntimeBucket;\n-\n-public class SageSomaticCaller extends SageCaller {\n-\n-    public static final String NAMESPACE = \"sage_somatic\";\n-\n-    private final ResourceFiles resourceFiles;\n-    private final boolean shallow;\n-\n-    public SageSomaticCaller(final AlignmentPair alignmentPair, final ResourceFiles resourceFiles, final PersistedDataset persistedDataset,\n-            boolean shallow) {\n-        super(alignmentPair,\n-                persistedDataset,\n-                DataType.SOMATIC_VARIANTS_SAGE,\n-                DataType.SOMATIC_GENE_COVERAGE,\n-                DataType.SOMATIC_TUMOR_SAMPLE_BQR_PLOT,\n-                DataType.SOMATIC_REF_SAMPLE_BQR_PLOT);\n-        this.resourceFiles = resourceFiles;\n-        this.shallow = shallow;\n-    }\n-\n-    @Override\n-    public String namespace() {\n-        return NAMESPACE;\n-    }\n-\n-    @Override\n-    public List<BashCommand> commands(final SomaticRunMetadata metadata) {\n-        List<BashCommand> commands = Lists.newArrayList();\n-        commands.add(new UnzipToDirectoryCommand(VmDirectories.RESOURCES, resourceFiles.snpEffDb()));\n-\n-        String tumorBamPath = getTumorBamDownload().getLocalTargetPath();\n-        String referenceBamPath = getReferenceBamDownload().getLocalTargetPath();\n-        String tumorSampleName = metadata.tumor().sampleName();\n-        String referenceSampleName = metadata.reference().sampleName();\n-\n-        SageCommandBuilder sageCommandBuilder = new SageCommandBuilder(resourceFiles).addReference(referenceSampleName, referenceBamPath)\n-                .addTumor(tumorSampleName, tumorBamPath)\n-                .addCoverage();\n-        if (shallow) {\n-            sageCommandBuilder = sageCommandBuilder.addShallowSomaticMode();\n-        }\n-\n-        SageApplication sageApplication = new SageApplication(sageCommandBuilder);\n-        SageSomaticPostProcess sagePostProcess = new SageSomaticPostProcess(tumorSampleName, resourceFiles);\n-\n-        SubStageInputOutput sageOutput = sageApplication.andThen(sagePostProcess).apply(SubStageInputOutput.empty(tumorSampleName));\n-        commands.addAll(sageOutput.bash());\n-\n-        return commands;\n-    }\n-\n-    @Override\n-    public VirtualMachineJobDefinition vmDefinition(final BashStartupScript bash, final ResultsDirectory resultsDirectory) {\n-        return VirtualMachineJobDefinition.sageSomaticCalling(bash, resultsDirectory);\n-    }\n-\n-    @Override\n-    public boolean shouldRun(final Arguments arguments) {\n-        return arguments.runSomaticCaller();\n-    }\n-\n-    @Override\n-    protected String filteredOutput(final SomaticRunMetadata metadata) {\n-        return String.format(\"%s.%s.%s\",\n-                metadata.tumor().sampleName(),\n-                SageSomaticPostProcess.SAGE_SOMATIC_FILTERED,\n-                FileTypes.GZIPPED_VCF);\n-    }\n-\n-    @Override\n-    protected String unfilteredOutput(final SomaticRunMetadata metadata) {\n-        return String.format(\"%s.%s.%s\", metadata.tumor().sampleName(), \"sage.somatic\", FileTypes.GZIPPED_VCF);\n-    }\n-\n-    @Override\n-    protected ImmutableSageOutput.Builder outputBuilder(final SomaticRunMetadata metadata, final PipelineStatus jobStatus,\n-            final RuntimeBucket bucket, final ResultsDirectory resultsDirectory) {\n-        final String geneCoverageFile = String.format(\"%s.%s\", metadata.tumor().sampleName(), SAGE_GENE_COVERAGE_TSV);\n-        return super.outputBuilder(metadata, jobStatus, bucket, resultsDirectory)\n-                .addReportComponents(singleFileComponent(geneCoverageFile, bucket, resultsDirectory));\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": {"commit": "3854fad6a37b54ddd18f09102d12212b574c43b8", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nnew file mode 100644\nindex 00000000..5e59f15b\n--- /dev/null\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -0,0 +1,23 @@\n+package com.hartwig.pipeline.calling.sage;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.execution.vm.BashCommand;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.reruns.PersistedDataset;\n+import com.hartwig.pipeline.resource.ResourceFiles;\n+\n+public class SageSomaticCaller extends SageCaller {\n+\n+    public SageSomaticCaller(final AlignmentPair alignmentPair, final PersistedDataset persistedDataset, final ResourceFiles resourceFiles,\n+            final boolean isShallow) {\n+        super(alignmentPair, persistedDataset, SageConfiguration.somatic(resourceFiles, isShallow));\n+    }\n+\n+    @Override\n+    public List<BashCommand> normalOnlyCommands(final SomaticRunMetadata metadata) {\n+        return Collections.emptyList();\n+    }\n+}\n", "next_change": {"commit": "a8d5147b0a03fe862c5aaa74d606dfc337f0698e", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nindex 5e59f15b..938dda1e 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -17,7 +17,7 @@ public class SageSomaticCaller extends SageCaller {\n     }\n \n     @Override\n-    public List<BashCommand> normalOnlyCommands(final SomaticRunMetadata metadata) {\n+    public List<BashCommand> referenceOnlyCommands(final SomaticRunMetadata metadata) {\n         return Collections.emptyList();\n     }\n }\n", "next_change": {"commit": "b2582ad349f84fc281b585b28ecebc4609355df0", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nindex 938dda1e..95c93eec 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -18,6 +19,6 @@ public class SageSomaticCaller extends SageCaller {\n \n     @Override\n     public List<BashCommand> referenceOnlyCommands(final SomaticRunMetadata metadata) {\n-        return Collections.emptyList();\n+        return Stage.disabled();\n     }\n }\n", "next_change": {"commit": "4ed3597cc3f75c3eeaab5683812dec24e1cd6758", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\nindex 95c93eec..01e75c66 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageSomaticCaller.java\n", "chunk": "@@ -17,6 +17,15 @@ public class SageSomaticCaller extends SageCaller {\n         super(alignmentPair, persistedDataset, SageConfiguration.somatic(resourceFiles, isShallow));\n     }\n \n+    @Override\n+    public List<BashCommand> tumorOnlyCommands(final SomaticRunMetadata metadata) {\n+        return new SageApplication(sageConfiguration.commandBuilder()\n+                .addTumor(metadata.tumor().sampleName(), getTumorBamDownload().getLocalTargetPath()))\n+                .andThen(sageConfiguration.postProcess().apply(metadata))\n+                .apply(SubStageInputOutput.empty(metadata.tumor().sampleName()))\n+                .bash();\n+    }\n+\n     @Override\n     public List<BashCommand> referenceOnlyCommands(final SomaticRunMetadata metadata) {\n         return Stage.disabled();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "bf8c737aa07e79bbd1fbc134c637d1e1b422bbb4", "message": "Merge commit", "committedDate": null}, {"oid": "8ba50186e2cabbda24b0c10b18b175ec44bc1ab3", "committedDate": "2020-12-21 10:36:00 -0500", "message": "DEV-1723 Change somatic caller namespace to somatic_caller"}, {"oid": "4d685322eddc2d69613732fcebac570ea9f5ca1e", "committedDate": "2021-01-14 10:41:30 +1000", "message": "DEV-1755: Bump SAGE to 2.6"}, {"oid": "18e6255024dc1a9340e63bd41c09a15de57882c2", "committedDate": "2021-03-25 15:01:28 -0400", "message": "5.21-hotfix germline slicing"}, {"oid": "94c9264bd3a86f378538e9922b11a56dfb61424c", "committedDate": "2021-05-18 16:24:06 +0200", "message": "DEV-2017: Override hotspot qual cutoff to 40 in Sage somatic caller when running in shallow mode. This to retain equal sensitivity in lower coverage during shallow."}, {"oid": "dbf11eb0f9eb056dfdafd543c89e60e1aad259e8", "committedDate": "2021-10-04 13:41:53 -0400", "message": "DEV-2203 Add Orange to pipeline (#325)"}, {"oid": "c5e2775021b1d0ccc3292d46eb192959e5b0a31d", "committedDate": "2021-10-28 15:19:49 -0400", "message": "DEV-2329 Support rerunning orange from persisted data"}, {"oid": "bf8f0aaeafbef47c7d61a9b0b031994ff8b481f7", "committedDate": "2021-12-07 09:00:58 +1100", "message": "DEV-2402: removed all references to and uses of SnpEff"}, {"oid": "072024b79494357672fcde8a2e9253b977945daf", "committedDate": "2022-02-23 16:42:28 -0500", "message": "DEV-2546 Add support for germline and tumor only mode"}, {"oid": "556c287e9e1d69ebb38127ed4300b71094b91d11", "committedDate": "2022-03-02 17:39:23 -0500", "message": "DEV-2546 Spike refactoring of SAGE"}, {"oid": "3854fad6a37b54ddd18f09102d12212b574c43b8", "committedDate": "2022-03-07 09:13:23 -0500", "message": "DEV-2546 Improve smoke test for new modes"}, {"oid": "a8d5147b0a03fe862c5aaa74d606dfc337f0698e", "committedDate": "2022-03-07 13:40:19 -0500", "message": "DEV-2546 Add smoke tests for each input mode"}, {"oid": "b2582ad349f84fc281b585b28ecebc4609355df0", "committedDate": "2022-03-08 15:40:19 -0500", "message": "DEV-2596 Refactor gripss somatic/germline to consolidate shared logic"}, {"oid": "4ed3597cc3f75c3eeaab5683812dec24e1cd6758", "committedDate": "2022-04-11 11:15:15 -0400", "message": "DEV-2593 Support tumor-only, germline-only and target-region modes"}, {"oid": "53940193f1eb64812edcfcba3cc1d3c6fcc916bf", "committedDate": "2022-04-11 17:51:31 -0400", "message": "DEV-2687 Remove option to override or specify target regions (#399)"}, {"oid": "1d336f21fe2765371c5db4b919b90986953fca09", "committedDate": "2022-05-03 21:04:07 -0400", "message": "DEV-2705 Add starting point for Protect-only runs"}, {"oid": "b6c20b02d458a97251f3e55dd881f961f2c2de6e", "committedDate": "2023-01-24 10:33:13 -0500", "message": "DEV-3036 Remove the dependency HMF API (#465)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2OTUyMw==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545169523", "body": "Maybe this guy is better only to implement in the somatic caller. Generally \"persisted output\" is only required for stages with other stages which depend on them, so you could leave this out of sage germline.", "bodyText": "Maybe this guy is better only to implement in the somatic caller. Generally \"persisted output\" is only required for stages with other stages which depend on them, so you could leave this out of sage germline.", "bodyHTML": "<p dir=\"auto\">Maybe this guy is better only to implement in the somatic caller. Generally \"persisted output\" is only required for stages with other stages which depend on them, so you could leave this out of sage germline.</p>", "author": "pauldwolfe", "createdAt": "2020-12-17T15:17:18Z", "path": "cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.hartwig.pipeline.calling.sage;\n+\n+import com.hartwig.pipeline.ResultsDirectory;\n+import com.hartwig.pipeline.alignment.AlignmentPair;\n+import com.hartwig.pipeline.datatypes.DataType;\n+import com.hartwig.pipeline.execution.PipelineStatus;\n+import com.hartwig.pipeline.execution.vm.BashStartupScript;\n+import com.hartwig.pipeline.execution.vm.VirtualMachineJobDefinition;\n+import com.hartwig.pipeline.metadata.AddDatatypeToFile;\n+import com.hartwig.pipeline.metadata.SingleSampleRunMetadata;\n+import com.hartwig.pipeline.metadata.SomaticRunMetadata;\n+import com.hartwig.pipeline.report.Folder;\n+import com.hartwig.pipeline.report.ReportComponent;\n+import com.hartwig.pipeline.report.RunLogComponent;\n+import com.hartwig.pipeline.report.SingleFileComponent;\n+import com.hartwig.pipeline.report.StartupScriptComponent;\n+import com.hartwig.pipeline.report.ZippedVcfAndIndexComponent;\n+import com.hartwig.pipeline.reruns.PersistedDataset;\n+import com.hartwig.pipeline.reruns.PersistedLocations;\n+import com.hartwig.pipeline.storage.GoogleStorageLocation;\n+import com.hartwig.pipeline.storage.RuntimeBucket;\n+import com.hartwig.pipeline.tertiary.TertiaryStage;\n+\n+public abstract class SageCaller extends TertiaryStage<SageOutput> {\n+\n+    private final PersistedDataset persistedDataset;\n+    private final DataType dataType;\n+\n+    public SageCaller(final AlignmentPair alignmentPair, final PersistedDataset persistedDataset, final DataType dataType) {\n+        super(alignmentPair);\n+        this.persistedDataset = persistedDataset;\n+        this.dataType = dataType;\n+    }\n+\n+    protected abstract String filteredOutput(final SomaticRunMetadata metadata);\n+\n+    protected abstract String unfilteredOutput(final SomaticRunMetadata metadata);\n+\n+    @Override\n+    public VirtualMachineJobDefinition vmDefinition(final BashStartupScript bash, final ResultsDirectory resultsDirectory) {\n+        return VirtualMachineJobDefinition.sageSomaticCalling(bash, resultsDirectory);\n+    }\n+\n+    @Override\n+    public SageOutput output(final SomaticRunMetadata metadata, final PipelineStatus jobStatus, final RuntimeBucket bucket,\n+            final ResultsDirectory resultsDirectory) {\n+        return outputBuilder(metadata, jobStatus, bucket, resultsDirectory).build();\n+    }\n+\n+    protected ImmutableSageOutput.Builder outputBuilder(final SomaticRunMetadata metadata, final PipelineStatus jobStatus,\n+            final RuntimeBucket bucket, final ResultsDirectory resultsDirectory) {\n+\n+        final String filteredOutputFile = filteredOutput(metadata);\n+        final String unfilteredOutputFile = unfilteredOutput(metadata);\n+\n+        return SageOutput.builder(namespace())\n+                .status(jobStatus)\n+                .addFailedLogLocations(GoogleStorageLocation.of(bucket.name(), RunLogComponent.LOG_FILE))\n+                .maybeFinalVcf(GoogleStorageLocation.of(bucket.name(), resultsDirectory.path(filteredOutputFile)))\n+                .addReportComponents(bqrComponent(metadata.tumor(), \"png\", bucket, resultsDirectory))\n+                .addReportComponents(bqrComponent(metadata.tumor(), \"tsv\", bucket, resultsDirectory))\n+                .addReportComponents(bqrComponent(metadata.reference(), \"png\", bucket, resultsDirectory))\n+                .addReportComponents(bqrComponent(metadata.reference(), \"tsv\", bucket, resultsDirectory))\n+                .addReportComponents(vcfComponent(unfilteredOutputFile, bucket, resultsDirectory))\n+                .addReportComponents(vcfComponent(filteredOutputFile, bucket, resultsDirectory))\n+                .addReportComponents(new RunLogComponent(bucket, namespace(), Folder.root(), resultsDirectory))\n+                .addReportComponents(new StartupScriptComponent(bucket, namespace(), Folder.root()))\n+                .addFurtherOperations(new AddDatatypeToFile(dataType, Folder.root(), namespace(), filteredOutputFile, metadata.barcode()));\n+    }\n+\n+    @Override\n+    public SageOutput skippedOutput(final SomaticRunMetadata metadata) {\n+        return SageOutput.builder(namespace()).status(PipelineStatus.SKIPPED).build();\n+    }\n+\n+    @Override\n+    public final SageOutput persistedOutput(final SomaticRunMetadata metadata) {", "originalCommit": "f65a4d6526f88650dd418d6ecd727145b46d0d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1NTY1OQ==", "url": "https://github.com/hartwigmedical/pipeline5/pull/235#discussion_r545555659", "bodyText": "Left as discussed in email thread as we will be running GATK and sage germline in parallel for a while.", "author": "jonbaber", "createdAt": "2020-12-18T03:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2OTUyMw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c5e2775021b1d0ccc3292d46eb192959e5b0a31d", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\nindex 12062f78..edbc73c4 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n", "chunk": "@@ -76,12 +109,24 @@ public abstract class SageCaller extends TertiaryStage<SageOutput> {\n     @Override\n     public final SageOutput persistedOutput(final SomaticRunMetadata metadata) {\n         final String filteredOutputFile = filteredOutput(metadata);\n+        final String geneCoverageFile = geneCoverageFile(metadata);\n+        final String somaticRefSampleBqrPlot = somaticRefSampleBqrPlot(metadata);\n+        final String somaticTumorSampleBqrPlot = somaticTumorSampleBqrPlot(metadata);\n \n         return SageOutput.builder(namespace())\n                 .status(PipelineStatus.PERSISTED)\n-                .maybeFinalVcf(persistedDataset.path(metadata.tumor().sampleName(), dataType)\n+                .maybeFinalVcf(persistedDataset.path(metadata.tumor().sampleName(), vcfDatatype)\n                         .orElse(GoogleStorageLocation.of(metadata.bucket(),\n                                 PersistedLocations.blobForSet(metadata.set(), namespace(), filteredOutputFile))))\n+                .maybeGermlineGeneCoverageTsv(persistedDataset.path(metadata.tumor().sampleName(), geneCoverageDatatype)\n+                        .orElse(GoogleStorageLocation.of(metadata.bucket(),\n+                                PersistedLocations.blobForSet(metadata.set(), namespace(), geneCoverageFile))))\n+                .maybeSomaticRefSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(), refSampleBqrPlot)\n+                        .orElse(GoogleStorageLocation.of(metadata.bucket(),\n+                                PersistedLocations.blobForSet(metadata.set(), namespace(), somaticRefSampleBqrPlot))))\n+                .maybeSomaticTumorSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(), tumorSampleBqrPlot)\n+                        .orElse(GoogleStorageLocation.of(metadata.bucket(),\n+                                PersistedLocations.blobForSet(metadata.set(), namespace(), somaticTumorSampleBqrPlot))))\n                 .build();\n     }\n \n", "next_change": {"commit": "556c287e9e1d69ebb38127ed4300b71094b91d11", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\nindex edbc73c4..c503ed47 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n", "chunk": "@@ -108,23 +141,23 @@ public abstract class SageCaller extends TertiaryStage<SageOutput> {\n \n     @Override\n     public final SageOutput persistedOutput(final SomaticRunMetadata metadata) {\n-        final String filteredOutputFile = filteredOutput(metadata);\n+        final String filteredOutputFile = sageConfiguration.filteredTemplate().apply(metadata);\n         final String geneCoverageFile = geneCoverageFile(metadata);\n         final String somaticRefSampleBqrPlot = somaticRefSampleBqrPlot(metadata);\n         final String somaticTumorSampleBqrPlot = somaticTumorSampleBqrPlot(metadata);\n \n         return SageOutput.builder(namespace())\n                 .status(PipelineStatus.PERSISTED)\n-                .maybeFinalVcf(persistedDataset.path(metadata.tumor().sampleName(), vcfDatatype)\n+                .maybeVariants(persistedDataset.path(metadata.tumor().sampleName(), sageConfiguration.vcfDatatype())\n                         .orElse(GoogleStorageLocation.of(metadata.bucket(),\n                                 PersistedLocations.blobForSet(metadata.set(), namespace(), filteredOutputFile))))\n-                .maybeGermlineGeneCoverageTsv(persistedDataset.path(metadata.tumor().sampleName(), geneCoverageDatatype)\n+                .maybeGermlineGeneCoverage(persistedDataset.path(metadata.tumor().sampleName(), sageConfiguration.geneCoverageDatatype())\n                         .orElse(GoogleStorageLocation.of(metadata.bucket(),\n                                 PersistedLocations.blobForSet(metadata.set(), namespace(), geneCoverageFile))))\n-                .maybeSomaticRefSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(), refSampleBqrPlot)\n+                .maybeSomaticRefSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(), sageConfiguration.refSampleBqrPlot())\n                         .orElse(GoogleStorageLocation.of(metadata.bucket(),\n                                 PersistedLocations.blobForSet(metadata.set(), namespace(), somaticRefSampleBqrPlot))))\n-                .maybeSomaticTumorSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(), tumorSampleBqrPlot)\n+                .maybeSomaticTumorSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(), sageConfiguration.tumorSampleBqrPlot())\n                         .orElse(GoogleStorageLocation.of(metadata.bucket(),\n                                 PersistedLocations.blobForSet(metadata.set(), namespace(), somaticTumorSampleBqrPlot))))\n                 .build();\n", "next_change": {"commit": "3854fad6a37b54ddd18f09102d12212b574c43b8", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\nindex c503ed47..649eb5f7 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n", "chunk": "@@ -143,24 +148,23 @@ public class SageCaller extends TertiaryStage<SageOutput> {\n     public final SageOutput persistedOutput(final SomaticRunMetadata metadata) {\n         final String filteredOutputFile = sageConfiguration.filteredTemplate().apply(metadata);\n         final String geneCoverageFile = geneCoverageFile(metadata);\n-        final String somaticRefSampleBqrPlot = somaticRefSampleBqrPlot(metadata);\n-        final String somaticTumorSampleBqrPlot = somaticTumorSampleBqrPlot(metadata);\n-\n-        return SageOutput.builder(namespace())\n+        final Optional<String> somaticRefSampleBqrPlot = somaticRefSampleBqrPlot(metadata);\n+        final Optional<String> somaticTumorSampleBqrPlot = somaticTumorSampleBqrPlot(metadata);\n+        final ImmutableSageOutput.Builder builder = SageOutput.builder(namespace())\n                 .status(PipelineStatus.PERSISTED)\n                 .maybeVariants(persistedDataset.path(metadata.tumor().sampleName(), sageConfiguration.vcfDatatype())\n                         .orElse(GoogleStorageLocation.of(metadata.bucket(),\n                                 PersistedLocations.blobForSet(metadata.set(), namespace(), filteredOutputFile))))\n                 .maybeGermlineGeneCoverage(persistedDataset.path(metadata.tumor().sampleName(), sageConfiguration.geneCoverageDatatype())\n                         .orElse(GoogleStorageLocation.of(metadata.bucket(),\n-                                PersistedLocations.blobForSet(metadata.set(), namespace(), geneCoverageFile))))\n-                .maybeSomaticRefSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(), sageConfiguration.refSampleBqrPlot())\n-                        .orElse(GoogleStorageLocation.of(metadata.bucket(),\n-                                PersistedLocations.blobForSet(metadata.set(), namespace(), somaticRefSampleBqrPlot))))\n-                .maybeSomaticTumorSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(), sageConfiguration.tumorSampleBqrPlot())\n-                        .orElse(GoogleStorageLocation.of(metadata.bucket(),\n-                                PersistedLocations.blobForSet(metadata.set(), namespace(), somaticTumorSampleBqrPlot))))\n-                .build();\n+                                PersistedLocations.blobForSet(metadata.set(), namespace(), geneCoverageFile))));\n+        somaticRefSampleBqrPlot.ifPresent(r -> builder.maybeSomaticRefSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(),\n+                        sageConfiguration.refSampleBqrPlot())\n+                .orElse(GoogleStorageLocation.of(metadata.bucket(), PersistedLocations.blobForSet(metadata.set(), namespace(), r)))));\n+        somaticTumorSampleBqrPlot.ifPresent(r -> builder.maybeSomaticTumorSampleBqrPlot(persistedDataset.path(metadata.tumor().sampleName(),\n+                        sageConfiguration.tumorSampleBqrPlot())\n+                .orElse(GoogleStorageLocation.of(metadata.bucket(), PersistedLocations.blobForSet(metadata.set(), namespace(), r)))));\n+        return builder.build();\n     }\n \n     protected ReportComponent singleFileComponent(String filename, final RuntimeBucket bucket, final ResultsDirectory resultsDirectory) {\n", "next_change": {"commit": "4ed3597cc3f75c3eeaab5683812dec24e1cd6758", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\nindex 649eb5f7..15df4df7 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n", "chunk": "@@ -171,9 +148,17 @@ public class SageCaller extends TertiaryStage<SageOutput> {\n         return new SingleFileComponent(bucket, namespace(), Folder.root(), filename, filename, resultsDirectory);\n     }\n \n-    private ReportComponent bqrComponent(final SingleSampleRunMetadata metadata, final String extension, final RuntimeBucket bucket,\n-            final ResultsDirectory resultsDirectory) {\n-        String filename = format(\"%s.sage.bqr.%s\", metadata.sampleName(), extension);\n+    private Optional<String> tumorSampleBqrPlot(final SomaticRunMetadata metadata) {\n+        return metadata.maybeTumor().map(t -> String.format(\"%s.%s\", t.sampleName(), SAGE_BQR_PNG));\n+    }\n+\n+    private Optional<String> referenceSampleBqrPlot(final SomaticRunMetadata metadata) {\n+        return metadata.maybeReference().map(r -> String.format(\"%s.%s\", r.sampleName(), SAGE_BQR_PNG));\n+    }\n+\n+    private ReportComponent bqrComponent(final String extension, final RuntimeBucket bucket, final ResultsDirectory resultsDirectory,\n+            final String sampleName) {\n+        String filename = format(\"%s.sage.bqr.%s\", sampleName, extension);\n         return singleFileComponent(filename, bucket, resultsDirectory);\n     }\n \n", "next_change": {"commit": "3d9b4af19758e76efb348ed28d6feb4b58b72f7b", "changed_code": [{"header": "diff --git a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\nindex 15df4df7..d0381eeb 100644\n--- a/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n+++ b/cluster/src/main/java/com/hartwig/pipeline/calling/sage/SageCaller.java\n", "chunk": "@@ -156,13 +165,13 @@ public class SageCaller extends TertiaryStage<SageOutput> {\n         return metadata.maybeReference().map(r -> String.format(\"%s.%s\", r.sampleName(), SAGE_BQR_PNG));\n     }\n \n-    private ReportComponent bqrComponent(final String extension, final RuntimeBucket bucket, final ResultsDirectory resultsDirectory,\n+    private OutputComponent bqrComponent(final String extension, final RuntimeBucket bucket, final ResultsDirectory resultsDirectory,\n             final String sampleName) {\n         String filename = format(\"%s.sage.bqr.%s\", sampleName, extension);\n         return singleFileComponent(filename, bucket, resultsDirectory);\n     }\n \n-    private ReportComponent vcfComponent(final String filename, final RuntimeBucket bucket, final ResultsDirectory resultsDirectory) {\n+    private OutputComponent vcfComponent(final String filename, final RuntimeBucket bucket, final ResultsDirectory resultsDirectory) {\n         return new ZippedVcfAndIndexComponent(bucket, namespace(), Folder.root(), filename, resultsDirectory);\n     }\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "bf8c737aa07e79bbd1fbc134c637d1e1b422bbb4", "message": "Merge commit", "committedDate": null}, {"oid": "9a4b656c3e1fc2c72a0da4d6e6c03f7a1c7dfc05", "committedDate": "2021-01-25 14:08:59 -0500", "message": "DEV-1775 Distinguish between file/dir datatypes"}, {"oid": "d8144072b8342171ec4a526038fd56d65791ff86", "committedDate": "2021-01-25 15:41:29 -0500", "message": "DEV-1775 Back to constructor for ApiDatatypes"}, {"oid": "9cd7be2b42ea841757f9078a01c0411bf85ed351", "committedDate": "2021-01-26 14:25:12 -0500", "message": "DEV-1786 All add datatypes use a path to an actual file"}, {"oid": "d52c5d67f70e44a85736b13d8520532dd44961f4", "committedDate": "2021-03-01 13:39:43 -0500", "message": "DEV-1833 Publish staging events when pipeline complete in rerun mode"}, {"oid": "dbf11eb0f9eb056dfdafd543c89e60e1aad259e8", "committedDate": "2021-10-04 13:41:53 -0400", "message": "DEV-2203 Add Orange to pipeline (#325)"}, {"oid": "c5e2775021b1d0ccc3292d46eb192959e5b0a31d", "committedDate": "2021-10-28 15:19:49 -0400", "message": "DEV-2329 Support rerunning orange from persisted data"}, {"oid": "91b3c1dfcba094a5ffdf41104731c16b99911d20", "committedDate": "2021-10-28 15:49:43 -0400", "message": "DEV-2329 Add datatypes for the sage output data"}, {"oid": "39694795e63bf773fb7a1feccf917d905abfe726", "committedDate": "2022-02-25 14:45:28 -0500", "message": "DEV-2573 Move defaulting of empty output locations (#367)"}, {"oid": "556c287e9e1d69ebb38127ed4300b71094b91d11", "committedDate": "2022-03-02 17:39:23 -0500", "message": "DEV-2546 Spike refactoring of SAGE"}, {"oid": "21de336f0822a466154887781e83c66750202dcc", "committedDate": "2022-03-03 14:14:27 -0500", "message": "DEV-2546 Complete refactoring of SAGE"}, {"oid": "af772e04a9a3c25a50280f16be945de8df8fc267", "committedDate": "2022-03-03 17:42:46 -0500", "message": "DEV-2546 Add missing gene coverage to report"}, {"oid": "3854fad6a37b54ddd18f09102d12212b574c43b8", "committedDate": "2022-03-07 09:13:23 -0500", "message": "DEV-2546 Improve smoke test for new modes"}, {"oid": "a8d5147b0a03fe862c5aaa74d606dfc337f0698e", "committedDate": "2022-03-07 13:40:19 -0500", "message": "DEV-2546 Add smoke tests for each input mode"}, {"oid": "21754a3c65a4a806e0298c752149bdaffdd0357b", "committedDate": "2022-03-07 15:51:34 -0500", "message": "DEV-2546 Add smoke tests for each input mode"}, {"oid": "4ed3597cc3f75c3eeaab5683812dec24e1cd6758", "committedDate": "2022-04-11 11:15:15 -0400", "message": "DEV-2593 Support tumor-only, germline-only and target-region modes"}, {"oid": "88b2ca78c96d577df8dd3d883b2e6bc91d97cc1c", "committedDate": "2022-04-26 12:47:11 -0400", "message": "DEV-2601 Run automated code cleanup"}, {"oid": "1d336f21fe2765371c5db4b919b90986953fca09", "committedDate": "2022-05-03 21:04:07 -0400", "message": "DEV-2705 Add starting point for Protect-only runs"}, {"oid": "270d1016e892f04a20786fcdaa79770509711b9a", "committedDate": "2022-08-17 18:55:44 -0400", "message": "DEV-2836 Ensure tertiary datatypes are consistent"}, {"oid": "34675230214d4ed9d2fc8ebb3f9acde1764c3641", "committedDate": "2022-11-02 14:03:52 -0400", "message": "DEV-2970 Use entire output directory in final results for SAGE (#452)"}, {"oid": "b6c20b02d458a97251f3e55dd881f961f2c2de6e", "committedDate": "2023-01-24 10:33:13 -0500", "message": "DEV-3036 Remove the dependency HMF API (#465)"}, {"oid": "3d9b4af19758e76efb348ed28d6feb4b58b72f7b", "committedDate": "2023-05-09 15:11:03 -0400", "message": "DEV-3240 Pass folder at composition and some refactoring (#493)"}]}, {"oid": "9103d6a5de825bd4c9361ea4e76735dbc7d45a45", "url": "https://github.com/hartwigmedical/pipeline5/commit/9103d6a5de825bd4c9361ea4e76735dbc7d45a45", "message": "DEV-1723: Review Feedback\n- Keep existing sage namespace\n- Seperate flag to disable sage germline", "committedDate": "2020-12-18T03:43:39Z", "type": "commit"}]}