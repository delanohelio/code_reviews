{"pr_number": 6163, "pr_title": "Support authentication polling", "pr_author": "psiinon", "pr_createdAt": "2020-09-08T10:55:33Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6163", "merge_commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "timeline": [{"oid": "f7972b7bf11568276139790830e61a0ae459a830", "url": "https://github.com/zaproxy/zaproxy/commit/f7972b7bf11568276139790830e61a0ae459a830", "message": "Support authentication polling WIP\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-08T11:01:39Z", "type": "forcePushed"}, {"oid": "979429b8e16c4e13ff99c26d45a8620438011279", "url": "https://github.com/zaproxy/zaproxy/commit/979429b8e16c4e13ff99c26d45a8620438011279", "message": "Support authentication polling WIP\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-08T12:22:30Z", "type": "forcePushed"}, {"oid": "80d28826e15ff48d000c401870329669949566eb", "url": "https://github.com/zaproxy/zaproxy/commit/80d28826e15ff48d000c401870329669949566eb", "message": "Support authentication polling\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-08T13:31:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzNDQwMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r484934403", "body": "```suggestion\r\n     * Returns a context data string of the given type and using the given default value if the\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a context data string of the given type and using the given default value is the\n          \n          \n            \n                 * Returns a context data string of the given type and using the given default value if the", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> a context data string of the given type and using the given <span class=\"pl-k\">default</span> value <span class=\"x x-first x-last\">is</span> the</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> a context data string of the given type and using the given <span class=\"pl-k\">default</span> value <span class=\"pl-k x x-first x-last\">if</span> the</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kingthorin", "createdAt": "2020-09-08T13:48:05Z", "path": "zap/src/main/java/org/parosproxy/paros/model/Session.java", "diffHunk": "@@ -1174,6 +1175,52 @@ public void setSessionUrl(int type, String url) throws DatabaseException {\n         return list;\n     }\n \n+    /**\n+     * Returns a context data string of the given type and using the given default value is the", "originalCommit": "80d28826e15ff48d000c401870329669949566eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a23e89c281311cda0b48f31f9abbcc7b0385481", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/parosproxy/paros/model/Session.java b/zap/src/main/java/org/parosproxy/paros/model/Session.java\nindex f7b2b4e92..719745786 100644\n--- a/zap/src/main/java/org/parosproxy/paros/model/Session.java\n+++ b/zap/src/main/java/org/parosproxy/paros/model/Session.java\n", "chunk": "@@ -1176,7 +1176,7 @@ public class Session {\n     }\n \n     /**\n-     * Returns a context data string of the given type and using the given default value is the\n+     * Returns a context data string of the given type and using the given default value if the\n      * value is not present\n      *\n      * @param contextId the context Id\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/parosproxy/paros/model/Session.java b/zap/src/main/java/org/parosproxy/paros/model/Session.java\nindex f7b2b4e92..721432db2 100644\n--- a/zap/src/main/java/org/parosproxy/paros/model/Session.java\n+++ b/zap/src/main/java/org/parosproxy/paros/model/Session.java\n", "chunk": "@@ -1176,7 +1186,7 @@ public class Session {\n     }\n \n     /**\n-     * Returns a context data string of the given type and using the given default value is the\n+     * Returns a context data string of the given type and using the given default value if the\n      * value is not present\n      *\n      * @param contextId the context Id\n", "next_change": {"commit": "c76ea462de449abedf5385ac4b43612f10a192d6", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/parosproxy/paros/model/Session.java b/zap/src/main/java/org/parosproxy/paros/model/Session.java\nindex 721432db2..81525aad4 100644\n--- a/zap/src/main/java/org/parosproxy/paros/model/Session.java\n+++ b/zap/src/main/java/org/parosproxy/paros/model/Session.java\n", "chunk": "@@ -1194,7 +1191,7 @@ public class Session {\n      * @param defaultValue the default value to use if the type is not present\n      * @return the context data string\n      * @throws DatabaseException\n-     * @since TODO add version\n+     * @since 2.10.0\n      */\n     public String getContextDataString(int contextId, int type, String defaultValue)\n             throws DatabaseException {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "6d6d17e5175592162ae0821ccdc3f95c3f266fbf", "committedDate": "2020-12-04 14:48:35 +0000", "message": "Refactor SiteStructure and Session"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "37d606c6e1519610ee02a6125c13f4a0a768c4e8", "committedDate": "2020-12-16 16:24:47 +0000", "message": "Add missing common lib and spotlessApply"}, {"oid": "29f3a51c828507419ccdc792541aa0f897000685", "committedDate": "2022-02-09 17:39:56 +0000", "message": "Deprecate and disable proxy related code"}, {"oid": "f3aed2c026a2bb32f61e8f7133922345ee548ff6", "committedDate": "2022-03-08 18:39:31 +0100", "message": "Remove code deprecated in 2.6.0"}, {"oid": "52ad5c48999ffd5de71bbc7526c51f9d51d687c6", "committedDate": "2022-08-23 13:56:47 +0530", "message": "sites tree: Invalidate href cache on session open"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "a7c3eac1204d8113cd2ddb4785599d621193300b", "committedDate": "2022-10-19 13:56:38 +0100", "message": "Address JavaDoc errors"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}, {"oid": "cb74d0ae55b3596640d84ea4e986f49c44e5e87e", "committedDate": "2023-05-23 20:25:36 -0400", "message": "import context: Handle duplicates more gracefully"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzNDY2MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r484934660", "body": "```suggestion\r\n     * Returns a context data integer of the given type and using the given default value if the\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a context data integer of the given type and using the given default value is the\n          \n          \n            \n                 * Returns a context data integer of the given type and using the given default value if the", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> a context data integer of the given type and using the given <span class=\"pl-k\">default</span> value <span class=\"x x-first x-last\">is</span> the</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> a context data integer of the given type and using the given <span class=\"pl-k\">default</span> value <span class=\"pl-k x x-first x-last\">if</span> the</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kingthorin", "createdAt": "2020-09-08T13:48:26Z", "path": "zap/src/main/java/org/parosproxy/paros/model/Session.java", "diffHunk": "@@ -1174,6 +1175,52 @@ public void setSessionUrl(int type, String url) throws DatabaseException {\n         return list;\n     }\n \n+    /**\n+     * Returns a context data string of the given type and using the given default value is the\n+     * value is not present\n+     *\n+     * @param contextId the context Id\n+     * @param type the data type required\n+     * @param defaultValue the default value to use if the type is not present\n+     * @return the context data string\n+     * @throws DatabaseException\n+     * @since TODO add version\n+     */\n+    public String getContextDataString(int contextId, int type, String defaultValue)\n+            throws DatabaseException {\n+        List<RecordContext> dataList =\n+                model.getDb().getTableContext().getDataForContextAndType(contextId, type);\n+        if (dataList.size() > 0) {\n+            return dataList.get(0).getData();\n+        }\n+        return defaultValue;\n+    }\n+\n+    /**\n+     * Returns a context data integer of the given type and using the given default value is the", "originalCommit": "80d28826e15ff48d000c401870329669949566eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a23e89c281311cda0b48f31f9abbcc7b0385481", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/parosproxy/paros/model/Session.java b/zap/src/main/java/org/parosproxy/paros/model/Session.java\nindex f7b2b4e92..719745786 100644\n--- a/zap/src/main/java/org/parosproxy/paros/model/Session.java\n+++ b/zap/src/main/java/org/parosproxy/paros/model/Session.java\n", "chunk": "@@ -1197,7 +1197,7 @@ public class Session {\n     }\n \n     /**\n-     * Returns a context data integer of the given type and using the given default value is the\n+     * Returns a context data integer of the given type and using the given default value if the\n      * value is not present\n      *\n      * @param contextId the context Id\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/parosproxy/paros/model/Session.java b/zap/src/main/java/org/parosproxy/paros/model/Session.java\nindex f7b2b4e92..721432db2 100644\n--- a/zap/src/main/java/org/parosproxy/paros/model/Session.java\n+++ b/zap/src/main/java/org/parosproxy/paros/model/Session.java\n", "chunk": "@@ -1197,7 +1207,7 @@ public class Session {\n     }\n \n     /**\n-     * Returns a context data integer of the given type and using the given default value is the\n+     * Returns a context data integer of the given type and using the given default value if the\n      * value is not present\n      *\n      * @param contextId the context Id\n", "next_change": {"commit": "c76ea462de449abedf5385ac4b43612f10a192d6", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/parosproxy/paros/model/Session.java b/zap/src/main/java/org/parosproxy/paros/model/Session.java\nindex 721432db2..81525aad4 100644\n--- a/zap/src/main/java/org/parosproxy/paros/model/Session.java\n+++ b/zap/src/main/java/org/parosproxy/paros/model/Session.java\n", "chunk": "@@ -1215,7 +1212,7 @@ public class Session {\n      * @param defaultValue the default value to use if the type is not present\n      * @return the context data integer\n      * @throws DatabaseException\n-     * @since TODO add version\n+     * @since 2.10.0\n      */\n     public int getContextDataInteger(int contextId, int type, int defaultValue)\n             throws DatabaseException {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "6d6d17e5175592162ae0821ccdc3f95c3f266fbf", "committedDate": "2020-12-04 14:48:35 +0000", "message": "Refactor SiteStructure and Session"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "37d606c6e1519610ee02a6125c13f4a0a768c4e8", "committedDate": "2020-12-16 16:24:47 +0000", "message": "Add missing common lib and spotlessApply"}, {"oid": "29f3a51c828507419ccdc792541aa0f897000685", "committedDate": "2022-02-09 17:39:56 +0000", "message": "Deprecate and disable proxy related code"}, {"oid": "f3aed2c026a2bb32f61e8f7133922345ee548ff6", "committedDate": "2022-03-08 18:39:31 +0100", "message": "Remove code deprecated in 2.6.0"}, {"oid": "52ad5c48999ffd5de71bbc7526c51f9d51d687c6", "committedDate": "2022-08-23 13:56:47 +0530", "message": "sites tree: Invalidate href cache on session open"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "a7c3eac1204d8113cd2ddb4785599d621193300b", "committedDate": "2022-10-19 13:56:38 +0100", "message": "Address JavaDoc errors"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}, {"oid": "cb74d0ae55b3596640d84ea4e986f49c44e5e87e", "committedDate": "2023-05-23 20:25:36 -0400", "message": "import context: Handle duplicates more gracefully"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3ODEzOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r484978139", "body": "Is there more?", "bodyText": "Is there more?", "bodyHTML": "<p dir=\"auto\">Is there more?</p>", "author": "kingthorin", "createdAt": "2020-09-08T14:45:54Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java", "diffHunk": "@@ -243,31 +245,75 @@ public URI getLoginRequestURIForContext(Context ctx) {\n     @Override\n     public void loadContextData(Session session, Context context) {\n         try {\n-            List<String> typeL =\n-                    session.getContextDataStrings(\n-                            context.getId(), RecordContext.TYPE_AUTH_METHOD_TYPE);\n-            if (typeL != null && typeL.size() > 0) {\n+            String type =\n+                    session.getContextDataString(\n+                            context.getId(), RecordContext.TYPE_AUTH_METHOD_TYPE, null);\n+            if (type != null) {\n                 AuthenticationMethodType t =\n-                        getAuthenticationMethodTypeForIdentifier(Integer.parseInt(typeL.get(0)));\n+                        getAuthenticationMethodTypeForIdentifier(Integer.parseInt(type));\n                 if (t != null) {\n                     context.setAuthenticationMethod(\n                             t.loadMethodFromSession(session, context.getId()));\n \n-                    List<String> loginIndicatorL =\n-                            session.getContextDataStrings(\n-                                    context.getId(),\n-                                    RecordContext.TYPE_AUTH_METHOD_LOGGEDIN_INDICATOR);\n-                    if (loginIndicatorL != null && loginIndicatorL.size() > 0)\n-                        context.getAuthenticationMethod()\n-                                .setLoggedInIndicatorPattern(loginIndicatorL.get(0));\n-\n-                    List<String> logoutIndicatorL =\n-                            session.getContextDataStrings(\n-                                    context.getId(),\n-                                    RecordContext.TYPE_AUTH_METHOD_LOGGEDOUT_INDICATOR);\n-                    if (logoutIndicatorL != null && logoutIndicatorL.size() > 0)\n-                        context.getAuthenticationMethod()\n-                                .setLoggedOutIndicatorPattern(logoutIndicatorL.get(0));\n+                    String strategy =\n+                            session.getContextDataString(\n+                                    context.getId(), RecordContext.TYPE_AUTH_VERIF_STRATEGY, null);\n+                    if (strategy != null) {\n+                        try {\n+                            context.getAuthenticationMethod()\n+                                    .setAuthCheckingStrategy(\n+                                            AuthCheckingStrategy.valueOf(strategy));\n+                        } catch (Exception e) {\n+                            log.error(\"Failed to parse auth checking strategy \" + strategy, e);\n+                        }\n+                    }\n+\n+                    context.getAuthenticationMethod()\n+                            .setPollUrl(\n+                                    session.getContextDataString(\n+                                            context.getId(),\n+                                            RecordContext.TYPE_AUTH_POLL_URL,\n+                                            null));\n+\n+                    context.getAuthenticationMethod()\n+                            .setPollData(\n+                                    session.getContextDataString(\n+                                            context.getId(),\n+                                            RecordContext.TYPE_AUTH_POLL_DATA,\n+                                            null));\n+\n+                    context.getAuthenticationMethod()\n+                            .setPollFrequency(\n+                                    session.getContextDataInteger(\n+                                            context.getId(), RecordContext.TYPE_AUTH_POLL_FREQ, 0));\n+\n+                    String freqUnits =\n+                            session.getContextDataString(\n+                                    context.getId(), RecordContext.TYPE_AUTH_POLL_FREQ_UNITS, null);\n+                    if (freqUnits != null) {\n+                        try {\n+                            context.getAuthenticationMethod()\n+                                    .setPollFrequencyUnits(\n+                                            AuthPollFrequencyUnits.valueOf(freqUnits));\n+                        } catch (Exception e) {\n+                            log.error(\"Failed to parse auth frequency units \" + freqUnits, e);\n+                        }\n+                    }\n+                    // TODO add more here?", "originalCommit": "80d28826e15ff48d000c401870329669949566eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a23e89c281311cda0b48f31f9abbcc7b0385481", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\nindex 7e3e7c3af..7eec589a0 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n", "chunk": "@@ -299,7 +299,6 @@ public class ExtensionAuthentication extends ExtensionAdaptor\n                             log.error(\"Failed to parse auth frequency units \" + freqUnits, e);\n                         }\n                     }\n-                    // TODO add more here?\n \n                     context.getAuthenticationMethod()\n                             .setLoggedInIndicatorPattern(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\nindex 7e3e7c3af..08abb96db 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n", "chunk": "@@ -299,7 +308,6 @@ public class ExtensionAuthentication extends ExtensionAdaptor\n                             log.error(\"Failed to parse auth frequency units \" + freqUnits, e);\n                         }\n                     }\n-                    // TODO add more here?\n \n                     context.getAuthenticationMethod()\n                             .setLoggedInIndicatorPattern(\n", "next_change": {"commit": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\nindex 08abb96db..aace22d3b 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n", "chunk": "@@ -305,7 +308,7 @@ public class ExtensionAuthentication extends ExtensionAdaptor\n                                     .setPollFrequencyUnits(\n                                             AuthPollFrequencyUnits.valueOf(freqUnits));\n                         } catch (Exception e) {\n-                            log.error(\"Failed to parse auth frequency units \" + freqUnits, e);\n+                            log.error(\"Failed to parse auth frequency units {}\", freqUnits, e);\n                         }\n                     }\n \n", "next_change": {"commit": "8cd994cfee0c363b5c97a53222194e178bac8e51", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\nindex aace22d3b..c6d11d458 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n", "chunk": "@@ -308,7 +308,7 @@ public class ExtensionAuthentication extends ExtensionAdaptor\n                                     .setPollFrequencyUnits(\n                                             AuthPollFrequencyUnits.valueOf(freqUnits));\n                         } catch (Exception e) {\n-                            log.error(\"Failed to parse auth frequency units {}\", freqUnits, e);\n+                            LOGGER.error(\"Failed to parse auth frequency units {}\", freqUnits, e);\n                         }\n                     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "2556e722a3d9146519ab3fde0282f1ff40ffa96e", "committedDate": "2020-11-16 12:48:50 +0000", "message": "Add auth header define in envvars"}, {"oid": "4ecba5bb4e7656ba2ca794e187ff4dcf9607f108", "committedDate": "2020-11-18 10:07:16 +0000", "message": "Fix NPE importing context with no poll data"}, {"oid": "419d45dc23386e0ed9761ec9ed5ab7a260c6cf0d", "committedDate": "2020-11-18 06:21:38 -0500", "message": "Merge pull request #6307 from psiinon/fix/import-context-npe"}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3ODU2Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r484978566", "body": "?", "bodyText": "?", "bodyHTML": "<p dir=\"auto\">?</p>", "author": "kingthorin", "createdAt": "2020-09-08T14:46:29Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java", "diffHunk": "@@ -286,6 +332,46 @@ public void persistContextData(Session session, Context context) {\n                     RecordContext.TYPE_AUTH_METHOD_TYPE,\n                     Integer.toString(t.getUniqueIdentifier()));\n \n+            if (context.getAuthenticationMethod().getAuthCheckingStrategy() != null) {\n+                session.setContextData(\n+                        contextIdx,\n+                        RecordContext.TYPE_AUTH_VERIF_STRATEGY,\n+                        context.getAuthenticationMethod().getAuthCheckingStrategy().name());\n+            } else {\n+                session.clearContextDataForType(contextIdx, RecordContext.TYPE_AUTH_VERIF_STRATEGY);\n+            }\n+\n+            if (context.getAuthenticationMethod().getPollUrl() != null) {\n+                session.setContextData(\n+                        contextIdx,\n+                        RecordContext.TYPE_AUTH_POLL_URL,\n+                        context.getAuthenticationMethod().getPollUrl());\n+            } else {\n+                session.clearContextDataForType(contextIdx, RecordContext.TYPE_AUTH_POLL_URL);\n+            }\n+            if (context.getAuthenticationMethod().getPollData() != null) {\n+                session.setContextData(\n+                        contextIdx,\n+                        RecordContext.TYPE_AUTH_POLL_DATA,\n+                        context.getAuthenticationMethod().getPollData());\n+            } else {\n+                session.clearContextDataForType(contextIdx, RecordContext.TYPE_AUTH_POLL_DATA);\n+            }\n+            session.setContextData(\n+                    contextIdx,\n+                    RecordContext.TYPE_AUTH_POLL_FREQ,\n+                    Integer.toString(context.getAuthenticationMethod().getPollFrequency()));\n+\n+            if (context.getAuthenticationMethod().getPollFrequencyUnits() != null) {\n+                session.setContextData(\n+                        contextIdx,\n+                        RecordContext.TYPE_AUTH_POLL_FREQ_UNITS,\n+                        context.getAuthenticationMethod().getPollFrequencyUnits().name());\n+            } else {\n+                session.clearContextDataForType(contextIdx, RecordContext.TYPE_AUTH_VERIF_STRATEGY);\n+            }\n+            // TODO add more", "originalCommit": "80d28826e15ff48d000c401870329669949566eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a23e89c281311cda0b48f31f9abbcc7b0385481", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\nindex 7e3e7c3af..7eec589a0 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n", "chunk": "@@ -370,7 +369,6 @@ public class ExtensionAuthentication extends ExtensionAdaptor\n             } else {\n                 session.clearContextDataForType(contextIdx, RecordContext.TYPE_AUTH_VERIF_STRATEGY);\n             }\n-            // TODO add more\n \n             persistLoggedIndicator(\n                     session,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\nindex 7e3e7c3af..08abb96db 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n", "chunk": "@@ -370,7 +386,6 @@ public class ExtensionAuthentication extends ExtensionAdaptor\n             } else {\n                 session.clearContextDataForType(contextIdx, RecordContext.TYPE_AUTH_VERIF_STRATEGY);\n             }\n-            // TODO add more\n \n             persistLoggedIndicator(\n                     session,\n", "next_change": null}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "2556e722a3d9146519ab3fde0282f1ff40ffa96e", "committedDate": "2020-11-16 12:48:50 +0000", "message": "Add auth header define in envvars"}, {"oid": "4ecba5bb4e7656ba2ca794e187ff4dcf9607f108", "committedDate": "2020-11-18 10:07:16 +0000", "message": "Fix NPE importing context with no poll data"}, {"oid": "419d45dc23386e0ed9761ec9ed5ab7a260c6cf0d", "committedDate": "2020-11-18 06:21:38 -0500", "message": "Merge pull request #6307 from psiinon/fix/import-context-npe"}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}]}, {"oid": "4a23e89c281311cda0b48f31f9abbcc7b0385481", "url": "https://github.com/zaproxy/zaproxy/commit/4a23e89c281311cda0b48f31f9abbcc7b0385481", "message": "Support authentication polling\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-08T15:48:21Z", "type": "forcePushed"}, {"oid": "4ecb2ae2e7ff3462d11bf069b110296132bd197c", "url": "https://github.com/zaproxy/zaproxy/commit/4ecb2ae2e7ff3462d11bf069b110296132bd197c", "message": "Support authentication polling\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-16T16:00:40Z", "type": "forcePushed"}, {"oid": "7324513667a295e2c9f4cb83fa423bdf2a98c5eb", "url": "https://github.com/zaproxy/zaproxy/commit/7324513667a295e2c9f4cb83fa423bdf2a98c5eb", "message": "Support authentication polling\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-17T08:18:05Z", "type": "commit"}, {"oid": "5e23b64b4037a5923a349d29045b06712bf7cc73", "url": "https://github.com/zaproxy/zaproxy/commit/5e23b64b4037a5923a349d29045b06712bf7cc73", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/parosproxy/paros/model/Session.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-17T08:20:38Z", "type": "forcePushed"}, {"oid": "9ca79c6828d29b4dd09cbba820b0609a9c705abf", "url": "https://github.com/zaproxy/zaproxy/commit/9ca79c6828d29b4dd09cbba820b0609a9c705abf", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/parosproxy/paros/model/Session.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-17T12:01:34Z", "type": "commit"}, {"oid": "9ca79c6828d29b4dd09cbba820b0609a9c705abf", "url": "https://github.com/zaproxy/zaproxy/commit/9ca79c6828d29b4dd09cbba820b0609a9c705abf", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/parosproxy/paros/model/Session.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-09-17T12:01:34Z", "type": "forcePushed"}, {"oid": "c5aaf57d43b8381d6156dcbe47491c059abc0066", "url": "https://github.com/zaproxy/zaproxy/commit/c5aaf57d43b8381d6156dcbe47491c059abc0066", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/parosproxy/paros/model/Session.java\n\tzap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\n\tzap/zap.gradle.kts\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-13T08:25:24Z", "type": "commit"}, {"oid": "c5aaf57d43b8381d6156dcbe47491c059abc0066", "url": "https://github.com/zaproxy/zaproxy/commit/c5aaf57d43b8381d6156dcbe47491c059abc0066", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/parosproxy/paros/model/Session.java\n\tzap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\n\tzap/zap.gradle.kts\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-10-13T08:25:24Z", "type": "forcePushed"}, {"oid": "03fbb6be6e838c08df8a991e9dcc3124cbafcd6c", "url": "https://github.com/zaproxy/zaproxy/commit/03fbb6be6e838c08df8a991e9dcc3124cbafcd6c", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-06T12:42:18Z", "type": "forcePushed"}, {"oid": "e6bba4a1aebae819deaa9697e3730b7f0c3800a4", "url": "https://github.com/zaproxy/zaproxy/commit/e6bba4a1aebae819deaa9697e3730b7f0c3800a4", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-06T15:54:48Z", "type": "forcePushed"}, {"oid": "6800bc739a36d04f97606c7f32b8ceb96d7496c9", "url": "https://github.com/zaproxy/zaproxy/commit/6800bc739a36d04f97606c7f32b8ceb96d7496c9", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-06T16:20:47Z", "type": "forcePushed"}, {"oid": "ce12eba9c0385ba616a2143930f221e4e6b95652", "url": "https://github.com/zaproxy/zaproxy/commit/ce12eba9c0385ba616a2143930f221e4e6b95652", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-09T13:04:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5ODc1OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520398758", "body": "Worth adding a message saying what failed to be done.", "bodyText": "Worth adding a message saying what failed to be done.", "bodyHTML": "<p dir=\"auto\">Worth adding a message saying what failed to be done.</p>", "author": "thc202", "createdAt": "2020-11-10T09:07:00Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java", "diffHunk": "@@ -151,6 +158,40 @@ public static HttpMessage prepareMessage(\n         return msg;\n     }\n \n+    public static String replaceUserData(\n+            String data, Map<String, String> keyValuePairs, UnaryOperator<String> encoder) {\n+        for (Entry<String, String> kvp : keyValuePairs.entrySet()) {\n+            data = data.replace(kvp.getKey(), encoder.apply(kvp.getValue()));\n+        }\n+        return data;\n+    }\n+\n+    public static void replaceUserDataInRequest(\n+            HttpMessage msg, Map<String, String> userDataMap, UnaryOperator<String> bodyEncoder) {\n+        try {\n+            Map<String, String> kvMap = new HashMap<>(userDataMap.size());\n+            for (Entry<String, String> userdata : userDataMap.entrySet()) {\n+                kvMap.put(\n+                        URLEncoder.encode(userdata.getKey(), StandardCharsets.UTF_8.name()),\n+                        userdata.getValue());\n+            }\n+            String uri =\n+                    AuthenticationHelper.replaceUserData(\n+                            msg.getRequestHeader().getURI().toString(),\n+                            kvMap,\n+                            PostBasedAuthenticationMethodType::encodeParameter);\n+            msg.getRequestHeader().setURI(new URI(uri, true));\n+        } catch (Exception e) {\n+            log.error(e.getMessage(), e);", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\nindex eaadb3a19..f4ac5e4f9 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\n", "chunk": "@@ -182,7 +182,8 @@ public class AuthenticationHelper {\n                             PostBasedAuthenticationMethodType::encodeParameter);\n             msg.getRequestHeader().setURI(new URI(uri, true));\n         } catch (Exception e) {\n-            log.error(e.getMessage(), e);\n+            log.error(\n+                    \"Failed to replace user data in request \" + msg.getRequestHeader().getURI(), e);\n         }\n         if (msg.getRequestBody().length() > 0) {\n             msg.setRequestBody(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\nindex eaadb3a19..f4ac5e4f9 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\n", "chunk": "@@ -182,7 +182,8 @@ public class AuthenticationHelper {\n                             PostBasedAuthenticationMethodType::encodeParameter);\n             msg.getRequestHeader().setURI(new URI(uri, true));\n         } catch (Exception e) {\n-            log.error(e.getMessage(), e);\n+            log.error(\n+                    \"Failed to replace user data in request \" + msg.getRequestHeader().getURI(), e);\n         }\n         if (msg.getRequestBody().length() > 0) {\n             msg.setRequestBody(\n", "next_change": {"commit": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\nindex f4ac5e4f9..119d8cbdb 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\n", "chunk": "@@ -183,7 +184,9 @@ public class AuthenticationHelper {\n             msg.getRequestHeader().setURI(new URI(uri, true));\n         } catch (Exception e) {\n             log.error(\n-                    \"Failed to replace user data in request \" + msg.getRequestHeader().getURI(), e);\n+                    \"Failed to replace user data in request {}\",\n+                    msg.getRequestHeader().getURI(),\n+                    e);\n         }\n         if (msg.getRequestBody().length() > 0) {\n             msg.setRequestBody(\n", "next_change": {"commit": "8cd994cfee0c363b5c97a53222194e178bac8e51", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\nindex 119d8cbdb..6734c2520 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationHelper.java\n", "chunk": "@@ -183,7 +183,7 @@ public class AuthenticationHelper {\n                             PostBasedAuthenticationMethodType::encodeParameter);\n             msg.getRequestHeader().setURI(new URI(uri, true));\n         } catch (Exception e) {\n-            log.error(\n+            LOGGER.error(\n                     \"Failed to replace user data in request {}\",\n                     msg.getRequestHeader().getURI(),\n                     e);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "committedDate": "2022-09-20 06:58:01 -0400", "message": "Logging. Classes starting A and B. Format specifiers vs concatenation"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5ODg0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520398842", "body": "Could be a `long` and use `System.currentTimeMillis()`, the `Date` is not actually being used just its time.", "bodyText": "Could be a long and use System.currentTimeMillis(), the Date is not actually being used just its time.", "bodyHTML": "<p dir=\"auto\">Could be a <code>long</code> and use <code>System.currentTimeMillis()</code>, the <code>Date</code> is not actually being used just its time.</p>", "author": "thc202", "createdAt": "2020-11-10T09:07:09Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -42,16 +51,61 @@\n  */\n public abstract class AuthenticationMethod {\n \n+    private static final Logger LOGGER = Logger.getLogger(AuthenticationMethod.class);\n+\n     public static final String CONTEXT_CONFIG_AUTH = Context.CONTEXT_CONFIG + \".authentication\";\n     public static final String CONTEXT_CONFIG_AUTH_TYPE = CONTEXT_CONFIG_AUTH + \".type\";\n+    public static final String CONTEXT_CONFIG_AUTH_STRATEGY = CONTEXT_CONFIG_AUTH + \".strategy\";\n+    public static final String CONTEXT_CONFIG_AUTH_POLL_URL = CONTEXT_CONFIG_AUTH + \".pollurl\";\n+    public static final String CONTEXT_CONFIG_AUTH_POLL_DATA = CONTEXT_CONFIG_AUTH + \".polldata\";\n+    public static final String CONTEXT_CONFIG_AUTH_POLL_HEADERS =\n+            CONTEXT_CONFIG_AUTH + \".pollheaders\";\n+    public static final String CONTEXT_CONFIG_AUTH_POLL_FREQ = CONTEXT_CONFIG_AUTH + \".pollfreq\";\n+    public static final String CONTEXT_CONFIG_AUTH_POLL_UNITS = CONTEXT_CONFIG_AUTH + \".pollunits\";\n     public static final String CONTEXT_CONFIG_AUTH_LOGGEDIN = CONTEXT_CONFIG_AUTH + \".loggedin\";\n     public static final String CONTEXT_CONFIG_AUTH_LOGGEDOUT = CONTEXT_CONFIG_AUTH + \".loggedout\";\n \n+    public static final String AUTH_STATE_ASSUMED_IN_STATS = \"stats.auth.state.assumedin\";\n     public static final String AUTH_STATE_LOGGED_IN_STATS = \"stats.auth.state.loggedin\";\n     public static final String AUTH_STATE_LOGGED_OUT_STATS = \"stats.auth.state.loggedout\";\n     public static final String AUTH_STATE_NO_INDICATOR_STATS = \"stats.auth.state.noindicator\";\n     public static final String AUTH_STATE_UNKNOWN_STATS = \"stats.auth.state.unknown\";\n \n+    public static final String TOKEN_PREFIX = \"{%\";\n+    public static final String TOKEN_POSTFIX = \"%}\";\n+\n+    public static final int DEFAULT_POLL_FREQUENCY = 60;\n+\n+    public static enum AuthCheckingStrategy {\n+        EACH_RESP,\n+        EACH_REQ,\n+        EACH_REQ_RESP,\n+        POLL_URL\n+    };\n+\n+    public static enum AuthPollFrequencyUnits {\n+        REQUESTS,\n+        SECONDS\n+    };\n+\n+    private AuthCheckingStrategy authCheckingStrategy = AuthCheckingStrategy.EACH_RESP;\n+\n+    private String pollUrl;\n+\n+    private String pollData;\n+\n+    private String pollHeaders;\n+\n+    private int pollFrequency = DEFAULT_POLL_FREQUENCY;\n+\n+    private AuthPollFrequencyUnits pollFrequencyUnits = AuthPollFrequencyUnits.REQUESTS;\n+\n+    private Date lastPollTime;", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..1206412b7 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -100,7 +99,7 @@ public abstract class AuthenticationMethod {\n \n     private AuthPollFrequencyUnits pollFrequencyUnits = AuthPollFrequencyUnits.REQUESTS;\n \n-    private Date lastPollTime;\n+    private long lastPollTime;\n \n     private Boolean lastPollResult;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..e9eb2d523 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -100,7 +99,7 @@ public abstract class AuthenticationMethod {\n \n     private AuthPollFrequencyUnits pollFrequencyUnits = AuthPollFrequencyUnits.REQUESTS;\n \n-    private Date lastPollTime;\n+    private long lastPollTime;\n \n     private Boolean lastPollResult;\n \n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -99,12 +102,6 @@ public abstract class AuthenticationMethod {\n \n     private AuthPollFrequencyUnits pollFrequencyUnits = AuthPollFrequencyUnits.REQUESTS;\n \n-    private long lastPollTime;\n-\n-    private Boolean lastPollResult;\n-\n-    private int requestsSincePoll = 0;\n-\n     /**\n      * Checks if the authentication method is fully configured.\n      *\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "36bad2d45a2d7d4184ceef0f72dc81ea339de3e7", "committedDate": "2021-05-14 18:26:54 +0100", "message": "Remove empty statements"}, {"oid": "029e9b5f4bd612fa749e387e25109f5b0fe1e139", "committedDate": "2022-04-23 17:05:23 +0100", "message": "Use main connection options directly"}, {"oid": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "committedDate": "2022-09-20 06:58:01 -0400", "message": "Logging. Classes starting A and B. Format specifiers vs concatenation"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5ODkxNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520398917", "body": "`getType()` might return a new type each time it's called.", "bodyText": "getType() might return a new type each time it's called.", "bodyHTML": "<p dir=\"auto\"><code>getType()</code> might return a new type each time it's called.</p>", "author": "thc202", "createdAt": "2020-11-10T09:07:17Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -193,31 +289,126 @@ public boolean isAuthenticated(HttpMessage msg) {\n             return true;\n         }\n \n-        String body = msg.getResponseBody().toString();\n-        String header = msg.getResponseHeader().toString();\n+        List<String> contentToTest = new ArrayList<>();\n+\n+        switch (this.authCheckingStrategy) {\n+            case EACH_REQ:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                break;\n+            case EACH_REQ_RESP:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case EACH_RESP:\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case POLL_URL:\n+                if (!force && lastPollResult != null && lastPollResult) {\n+                    // Check if we really need to poll the relevant URL again\n+                    switch (pollFrequencyUnits) {\n+                        case SECONDS:\n+                            if ((new Date().getTime() - lastPollTime.getTime()) / 1000\n+                                    < pollFrequency) {\n+                                try {\n+                                    Stats.incCounter(\n+                                            SessionStructure.getHostName(msg),\n+                                            AUTH_STATE_ASSUMED_IN_STATS);\n+                                } catch (URIException e) {\n+                                    // Ignore\n+                                }\n+                                return true;\n+                            }\n+                            break;\n+                        case REQUESTS:\n+                        default:\n+                            if (requestsSincePoll < pollFrequency) {\n+                                requestsSincePoll++;\n+                                try {\n+                                    Stats.incCounter(\n+                                            SessionStructure.getHostName(msg),\n+                                            AUTH_STATE_ASSUMED_IN_STATS);\n+                                } catch (URIException e) {\n+                                    // Ignore\n+                                }\n+                                return true;\n+                            }\n+                            break;\n+                    }\n+                }\n+                // Make the poll request\n+                try {\n+                    HttpMessage pollMsg = new HttpMessage(new URI(this.getPollUrl(), true));\n+                    if (this.getPollData() != null && this.getPollData().length() > 0) {\n+                        pollMsg.getRequestHeader().setMethod(HttpRequestHeader.POST);\n+                        pollMsg.getRequestBody().setBody(this.getPollData());\n+                        pollMsg.getRequestHeader()\n+                                .setContentLength(pollMsg.getRequestBody().length());\n+                    }\n+                    if (this.getPollHeaders() != null && this.getPollHeaders().length() > 0) {\n+                        for (String header : this.getPollHeaders().split(\"\\n\")) {\n+                            String[] headerValue = header.split(\":\");\n+                            if (headerValue.length == 2) {\n+                                pollMsg.getRequestHeader()\n+                                        .addHeader(headerValue[0].trim(), headerValue[1].trim());\n+                            } else {\n+                                LOGGER.error(\n+                                        \"Invalid header '\"\n+                                                + header\n+                                                + \"' for poll request to \"\n+                                                + this.getPollUrl());\n+                            }\n+                        }\n+                    }\n+                    pollMsg.setRequestingUser(user);\n+                    if (this.getType() != null && user != null) {\n+                        this.getType().replaceUserDataInPollRequest(pollMsg, user);", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..1206412b7 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -364,19 +363,20 @@ public abstract class AuthenticationMethod {\n                         }\n                     }\n                     pollMsg.setRequestingUser(user);\n-                    if (this.getType() != null && user != null) {\n-                        this.getType().replaceUserDataInPollRequest(pollMsg, user);\n+                    AuthenticationMethodType type = this.getType();\n+                    if (type != null && user != null) {\n+                        type.replaceUserDataInPollRequest(pollMsg, user);\n                     }\n \n                     getHttpSender().sendAndReceive(pollMsg);\n                     AuthenticationHelper.addAuthMessageToHistory(pollMsg);\n                     contentToTest.add(pollMsg.getResponseHeader().toString());\n                     contentToTest.add(pollMsg.getResponseBody().toString());\n-                    lastPollTime = new Date();\n+                    lastPollTime = System.currentTimeMillis();\n                     requestsSincePoll = 0;\n \n                 } catch (Exception e1) {\n-                    LOGGER.error(e1.getMessage(), e1);\n+                    LOGGER.warn(\"Failed sending poll request to \" + this.getPollUrl(), e1);\n                     return false;\n                 }\n                 break;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..e9eb2d523 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -364,19 +365,19 @@ public abstract class AuthenticationMethod {\n                         }\n                     }\n                     pollMsg.setRequestingUser(user);\n-                    if (this.getType() != null && user != null) {\n-                        this.getType().replaceUserDataInPollRequest(pollMsg, user);\n+                    if (user != null) {\n+                        replaceUserDataInPollRequest(pollMsg, user);\n                     }\n \n                     getHttpSender().sendAndReceive(pollMsg);\n                     AuthenticationHelper.addAuthMessageToHistory(pollMsg);\n                     contentToTest.add(pollMsg.getResponseHeader().toString());\n                     contentToTest.add(pollMsg.getResponseBody().toString());\n-                    lastPollTime = new Date();\n+                    lastPollTime = System.currentTimeMillis();\n                     requestsSincePoll = 0;\n \n                 } catch (Exception e1) {\n-                    LOGGER.error(e1.getMessage(), e1);\n+                    LOGGER.warn(\"Failed sending poll request to \" + this.getPollUrl(), e1);\n                     return false;\n                 }\n                 break;\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -342,40 +333,8 @@ public abstract class AuthenticationMethod {\n                 }\n                 // Make the poll request\n                 try {\n-                    HttpMessage pollMsg = new HttpMessage(new URI(this.getPollUrl(), true));\n-                    if (this.getPollData() != null && this.getPollData().length() > 0) {\n-                        pollMsg.getRequestHeader().setMethod(HttpRequestHeader.POST);\n-                        pollMsg.getRequestBody().setBody(this.getPollData());\n-                        pollMsg.getRequestHeader()\n-                                .setContentLength(pollMsg.getRequestBody().length());\n-                    }\n-                    if (this.getPollHeaders() != null && this.getPollHeaders().length() > 0) {\n-                        for (String header : this.getPollHeaders().split(\"\\n\")) {\n-                            String[] headerValue = header.split(\":\");\n-                            if (headerValue.length == 2) {\n-                                pollMsg.getRequestHeader()\n-                                        .addHeader(headerValue[0].trim(), headerValue[1].trim());\n-                            } else {\n-                                LOGGER.error(\n-                                        \"Invalid header '\"\n-                                                + header\n-                                                + \"' for poll request to \"\n-                                                + this.getPollUrl());\n-                            }\n-                        }\n-                    }\n-                    pollMsg.setRequestingUser(user);\n-                    if (user != null) {\n-                        replaceUserDataInPollRequest(pollMsg, user);\n-                    }\n-\n-                    getHttpSender().sendAndReceive(pollMsg);\n-                    AuthenticationHelper.addAuthMessageToHistory(pollMsg);\n-                    contentToTest.add(pollMsg.getResponseHeader().toString());\n-                    contentToTest.add(pollMsg.getResponseBody().toString());\n-                    lastPollTime = System.currentTimeMillis();\n-                    requestsSincePoll = 0;\n-\n+                    HttpMessage pollMsg = pollAsUser(user);\n+                    msgToTest = pollMsg;\n                 } catch (Exception e1) {\n                     LOGGER.warn(\"Failed sending poll request to \" + this.getPollUrl(), e1);\n                     return false;\n", "next_change": {"commit": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex c98766db2..160c540fa 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -336,7 +331,7 @@ public abstract class AuthenticationMethod {\n                     HttpMessage pollMsg = pollAsUser(user);\n                     msgToTest = pollMsg;\n                 } catch (Exception e1) {\n-                    LOGGER.warn(\"Failed sending poll request to \" + this.getPollUrl(), e1);\n+                    LOGGER.warn(\"Failed sending poll request to {}\", this.getPollUrl(), e1);\n                     return false;\n                 }\n                 break;\n", "next_change": null}]}}, {"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -385,6 +344,27 @@ public abstract class AuthenticationMethod {\n                 return false;\n         }\n \n+        return evaluateAuthRequest(msgToTest, authState);\n+    }\n+\n+    public boolean evaluateAuthRequest(HttpMessage msg, AuthenticationState authState) {\n+        List<String> contentToTest = new ArrayList<>();\n+        switch (authCheckingStrategy) {\n+            case EACH_REQ:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                break;\n+            case EACH_REQ_RESP:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case EACH_RESP:\n+            case POLL_URL:\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+        }\n         if (patternMatchesAny(loggedInIndicatorPattern, contentToTest)) {\n             // Looks like we're authenticated\n             try {\n", "next_change": {"commit": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex c98766db2..18a922188 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -364,6 +362,9 @@ public abstract class AuthenticationMethod {\n             case POLL_URL:\n                 contentToTest.add(msg.getResponseHeader().toString());\n                 contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case AUTO_DETECT:\n+                return false;\n         }\n         if (patternMatchesAny(loggedInIndicatorPattern, contentToTest)) {\n             // Looks like we're authenticated\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "36bad2d45a2d7d4184ceef0f72dc81ea339de3e7", "committedDate": "2021-05-14 18:26:54 +0100", "message": "Remove empty statements"}, {"oid": "029e9b5f4bd612fa749e387e25109f5b0fe1e139", "committedDate": "2022-04-23 17:05:23 +0100", "message": "Use main connection options directly"}, {"oid": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "committedDate": "2022-09-20 06:58:01 -0400", "message": "Logging. Classes starting A and B. Format specifiers vs concatenation"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5ODk2Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520398967", "body": "Warn, this is expected to happen in case of connection problems, also, worth adding a message saying that it failed to send the auth poll request.", "bodyText": "Warn, this is expected to happen in case of connection problems, also, worth adding a message saying that it failed to send the auth poll request.", "bodyHTML": "<p dir=\"auto\">Warn, this is expected to happen in case of connection problems, also, worth adding a message saying that it failed to send the auth poll request.</p>", "author": "thc202", "createdAt": "2020-11-10T09:07:23Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -193,31 +289,126 @@ public boolean isAuthenticated(HttpMessage msg) {\n             return true;\n         }\n \n-        String body = msg.getResponseBody().toString();\n-        String header = msg.getResponseHeader().toString();\n+        List<String> contentToTest = new ArrayList<>();\n+\n+        switch (this.authCheckingStrategy) {\n+            case EACH_REQ:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                break;\n+            case EACH_REQ_RESP:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case EACH_RESP:\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case POLL_URL:\n+                if (!force && lastPollResult != null && lastPollResult) {\n+                    // Check if we really need to poll the relevant URL again\n+                    switch (pollFrequencyUnits) {\n+                        case SECONDS:\n+                            if ((new Date().getTime() - lastPollTime.getTime()) / 1000\n+                                    < pollFrequency) {\n+                                try {\n+                                    Stats.incCounter(\n+                                            SessionStructure.getHostName(msg),\n+                                            AUTH_STATE_ASSUMED_IN_STATS);\n+                                } catch (URIException e) {\n+                                    // Ignore\n+                                }\n+                                return true;\n+                            }\n+                            break;\n+                        case REQUESTS:\n+                        default:\n+                            if (requestsSincePoll < pollFrequency) {\n+                                requestsSincePoll++;\n+                                try {\n+                                    Stats.incCounter(\n+                                            SessionStructure.getHostName(msg),\n+                                            AUTH_STATE_ASSUMED_IN_STATS);\n+                                } catch (URIException e) {\n+                                    // Ignore\n+                                }\n+                                return true;\n+                            }\n+                            break;\n+                    }\n+                }\n+                // Make the poll request\n+                try {\n+                    HttpMessage pollMsg = new HttpMessage(new URI(this.getPollUrl(), true));\n+                    if (this.getPollData() != null && this.getPollData().length() > 0) {\n+                        pollMsg.getRequestHeader().setMethod(HttpRequestHeader.POST);\n+                        pollMsg.getRequestBody().setBody(this.getPollData());\n+                        pollMsg.getRequestHeader()\n+                                .setContentLength(pollMsg.getRequestBody().length());\n+                    }\n+                    if (this.getPollHeaders() != null && this.getPollHeaders().length() > 0) {\n+                        for (String header : this.getPollHeaders().split(\"\\n\")) {\n+                            String[] headerValue = header.split(\":\");\n+                            if (headerValue.length == 2) {\n+                                pollMsg.getRequestHeader()\n+                                        .addHeader(headerValue[0].trim(), headerValue[1].trim());\n+                            } else {\n+                                LOGGER.error(\n+                                        \"Invalid header '\"\n+                                                + header\n+                                                + \"' for poll request to \"\n+                                                + this.getPollUrl());\n+                            }\n+                        }\n+                    }\n+                    pollMsg.setRequestingUser(user);\n+                    if (this.getType() != null && user != null) {\n+                        this.getType().replaceUserDataInPollRequest(pollMsg, user);\n+                    }\n+\n+                    getHttpSender().sendAndReceive(pollMsg);\n+                    AuthenticationHelper.addAuthMessageToHistory(pollMsg);\n+                    contentToTest.add(pollMsg.getResponseHeader().toString());\n+                    contentToTest.add(pollMsg.getResponseBody().toString());\n+                    lastPollTime = new Date();\n+                    requestsSincePoll = 0;\n+\n+                } catch (Exception e1) {\n+                    LOGGER.error(e1.getMessage(), e1);", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..1206412b7 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -364,19 +363,20 @@ public abstract class AuthenticationMethod {\n                         }\n                     }\n                     pollMsg.setRequestingUser(user);\n-                    if (this.getType() != null && user != null) {\n-                        this.getType().replaceUserDataInPollRequest(pollMsg, user);\n+                    AuthenticationMethodType type = this.getType();\n+                    if (type != null && user != null) {\n+                        type.replaceUserDataInPollRequest(pollMsg, user);\n                     }\n \n                     getHttpSender().sendAndReceive(pollMsg);\n                     AuthenticationHelper.addAuthMessageToHistory(pollMsg);\n                     contentToTest.add(pollMsg.getResponseHeader().toString());\n                     contentToTest.add(pollMsg.getResponseBody().toString());\n-                    lastPollTime = new Date();\n+                    lastPollTime = System.currentTimeMillis();\n                     requestsSincePoll = 0;\n \n                 } catch (Exception e1) {\n-                    LOGGER.error(e1.getMessage(), e1);\n+                    LOGGER.warn(\"Failed sending poll request to \" + this.getPollUrl(), e1);\n                     return false;\n                 }\n                 break;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..e9eb2d523 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -364,19 +365,19 @@ public abstract class AuthenticationMethod {\n                         }\n                     }\n                     pollMsg.setRequestingUser(user);\n-                    if (this.getType() != null && user != null) {\n-                        this.getType().replaceUserDataInPollRequest(pollMsg, user);\n+                    if (user != null) {\n+                        replaceUserDataInPollRequest(pollMsg, user);\n                     }\n \n                     getHttpSender().sendAndReceive(pollMsg);\n                     AuthenticationHelper.addAuthMessageToHistory(pollMsg);\n                     contentToTest.add(pollMsg.getResponseHeader().toString());\n                     contentToTest.add(pollMsg.getResponseBody().toString());\n-                    lastPollTime = new Date();\n+                    lastPollTime = System.currentTimeMillis();\n                     requestsSincePoll = 0;\n \n                 } catch (Exception e1) {\n-                    LOGGER.error(e1.getMessage(), e1);\n+                    LOGGER.warn(\"Failed sending poll request to \" + this.getPollUrl(), e1);\n                     return false;\n                 }\n                 break;\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -342,40 +333,8 @@ public abstract class AuthenticationMethod {\n                 }\n                 // Make the poll request\n                 try {\n-                    HttpMessage pollMsg = new HttpMessage(new URI(this.getPollUrl(), true));\n-                    if (this.getPollData() != null && this.getPollData().length() > 0) {\n-                        pollMsg.getRequestHeader().setMethod(HttpRequestHeader.POST);\n-                        pollMsg.getRequestBody().setBody(this.getPollData());\n-                        pollMsg.getRequestHeader()\n-                                .setContentLength(pollMsg.getRequestBody().length());\n-                    }\n-                    if (this.getPollHeaders() != null && this.getPollHeaders().length() > 0) {\n-                        for (String header : this.getPollHeaders().split(\"\\n\")) {\n-                            String[] headerValue = header.split(\":\");\n-                            if (headerValue.length == 2) {\n-                                pollMsg.getRequestHeader()\n-                                        .addHeader(headerValue[0].trim(), headerValue[1].trim());\n-                            } else {\n-                                LOGGER.error(\n-                                        \"Invalid header '\"\n-                                                + header\n-                                                + \"' for poll request to \"\n-                                                + this.getPollUrl());\n-                            }\n-                        }\n-                    }\n-                    pollMsg.setRequestingUser(user);\n-                    if (user != null) {\n-                        replaceUserDataInPollRequest(pollMsg, user);\n-                    }\n-\n-                    getHttpSender().sendAndReceive(pollMsg);\n-                    AuthenticationHelper.addAuthMessageToHistory(pollMsg);\n-                    contentToTest.add(pollMsg.getResponseHeader().toString());\n-                    contentToTest.add(pollMsg.getResponseBody().toString());\n-                    lastPollTime = System.currentTimeMillis();\n-                    requestsSincePoll = 0;\n-\n+                    HttpMessage pollMsg = pollAsUser(user);\n+                    msgToTest = pollMsg;\n                 } catch (Exception e1) {\n                     LOGGER.warn(\"Failed sending poll request to \" + this.getPollUrl(), e1);\n                     return false;\n", "next_change": {"commit": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex c98766db2..160c540fa 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -336,7 +331,7 @@ public abstract class AuthenticationMethod {\n                     HttpMessage pollMsg = pollAsUser(user);\n                     msgToTest = pollMsg;\n                 } catch (Exception e1) {\n-                    LOGGER.warn(\"Failed sending poll request to \" + this.getPollUrl(), e1);\n+                    LOGGER.warn(\"Failed sending poll request to {}\", this.getPollUrl(), e1);\n                     return false;\n                 }\n                 break;\n", "next_change": null}]}}, {"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -385,6 +344,27 @@ public abstract class AuthenticationMethod {\n                 return false;\n         }\n \n+        return evaluateAuthRequest(msgToTest, authState);\n+    }\n+\n+    public boolean evaluateAuthRequest(HttpMessage msg, AuthenticationState authState) {\n+        List<String> contentToTest = new ArrayList<>();\n+        switch (authCheckingStrategy) {\n+            case EACH_REQ:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                break;\n+            case EACH_REQ_RESP:\n+                contentToTest.add(msg.getRequestHeader().toString());\n+                contentToTest.add(msg.getRequestBody().toString());\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case EACH_RESP:\n+            case POLL_URL:\n+                contentToTest.add(msg.getResponseHeader().toString());\n+                contentToTest.add(msg.getResponseBody().toString());\n+        }\n         if (patternMatchesAny(loggedInIndicatorPattern, contentToTest)) {\n             // Looks like we're authenticated\n             try {\n", "next_change": {"commit": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex c98766db2..18a922188 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -364,6 +362,9 @@ public abstract class AuthenticationMethod {\n             case POLL_URL:\n                 contentToTest.add(msg.getResponseHeader().toString());\n                 contentToTest.add(msg.getResponseBody().toString());\n+                break;\n+            case AUTO_DETECT:\n+                return false;\n         }\n         if (patternMatchesAny(loggedInIndicatorPattern, contentToTest)) {\n             // Looks like we're authenticated\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "36bad2d45a2d7d4184ceef0f72dc81ea339de3e7", "committedDate": "2021-05-14 18:26:54 +0100", "message": "Remove empty statements"}, {"oid": "029e9b5f4bd612fa749e387e25109f5b0fe1e139", "committedDate": "2022-04-23 17:05:23 +0100", "message": "Use main connection options directly"}, {"oid": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "committedDate": "2022-09-20 06:58:01 -0400", "message": "Logging. Classes starting A and B. Format specifiers vs concatenation"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5OTAwOA==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520399008", "body": "`static`", "bodyText": "static", "bodyHTML": "<p dir=\"auto\"><code>static</code></p>", "author": "thc202", "createdAt": "2020-11-10T09:07:27Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -226,6 +417,20 @@ public boolean isAuthenticated(HttpMessage msg) {\n         } catch (URIException e) {\n             // Ignore\n         }\n+        if (this.authCheckingStrategy.equals(AuthCheckingStrategy.POLL_URL)) {\n+            this.lastPollResult = false;\n+        }\n+        return false;\n+    }\n+\n+    private boolean patternMatchesAny(Pattern pattern, List<String> content) {", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..1206412b7 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -423,7 +423,7 @@ public abstract class AuthenticationMethod {\n         return false;\n     }\n \n-    private boolean patternMatchesAny(Pattern pattern, List<String> content) {\n+    private static boolean patternMatchesAny(Pattern pattern, List<String> content) {\n         if (pattern != null) {\n             for (String str : content) {\n                 if (pattern.matcher(str).find()) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..e9eb2d523 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -423,7 +424,7 @@ public abstract class AuthenticationMethod {\n         return false;\n     }\n \n-    private boolean patternMatchesAny(Pattern pattern, List<String> content) {\n+    private static boolean patternMatchesAny(Pattern pattern, List<String> content) {\n         if (pattern != null) {\n             for (String str : content) {\n                 if (pattern.matcher(str).find()) {\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -419,11 +399,49 @@ public abstract class AuthenticationMethod {\n             // Ignore\n         }\n         if (this.authCheckingStrategy.equals(AuthCheckingStrategy.POLL_URL)) {\n-            this.lastPollResult = false;\n+            authState.setLastPollResult(false);\n         }\n         return false;\n     }\n \n+    public HttpMessage pollAsUser(User user) throws IOException {\n+        if (!this.authCheckingStrategy.equals(AuthCheckingStrategy.POLL_URL)) {\n+            throw new IllegalArgumentException(\"Authentication checking strategy is not POLL_URL\");\n+        }\n+        HttpMessage pollMsg = new HttpMessage(new URI(this.getPollUrl(), true));\n+        if (this.getPollData() != null && this.getPollData().length() > 0) {\n+            pollMsg.getRequestHeader().setMethod(HttpRequestHeader.POST);\n+            pollMsg.getRequestBody().setBody(this.getPollData());\n+            pollMsg.getRequestHeader().setContentLength(pollMsg.getRequestBody().length());\n+        }\n+        if (this.getPollHeaders() != null && this.getPollHeaders().length() > 0) {\n+            for (String header : this.getPollHeaders().split(\"\\n\")) {\n+                String[] headerValue = header.split(\":\");\n+                if (headerValue.length == 2) {\n+                    pollMsg.getRequestHeader()\n+                            .addHeader(headerValue[0].trim(), headerValue[1].trim());\n+                } else {\n+                    LOGGER.error(\n+                            \"Invalid header '\"\n+                                    + header\n+                                    + \"' for poll request to \"\n+                                    + this.getPollUrl());\n+                }\n+            }\n+        }\n+        pollMsg.setRequestingUser(user);\n+        replaceUserDataInPollRequest(pollMsg, user);\n+\n+        getHttpSender().sendAndReceive(pollMsg);\n+        AuthenticationHelper.addAuthMessageToHistory(pollMsg);\n+\n+        AuthenticationState authState = user.getAuthenticationState();\n+        authState.setLastPollTime(System.currentTimeMillis());\n+        authState.setRequestsSincePoll(0);\n+\n+        return pollMsg;\n+    }\n+\n     private static boolean patternMatchesAny(Pattern pattern, List<String> content) {\n         if (pattern != null) {\n             for (String str : content) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "36bad2d45a2d7d4184ceef0f72dc81ea339de3e7", "committedDate": "2021-05-14 18:26:54 +0100", "message": "Remove empty statements"}, {"oid": "029e9b5f4bd612fa749e387e25109f5b0fe1e139", "committedDate": "2022-04-23 17:05:23 +0100", "message": "Use main connection options directly"}, {"oid": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "committedDate": "2022-09-20 06:58:01 -0400", "message": "Logging. Classes starting A and B. Format specifiers vs concatenation"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5OTA1MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520399050", "body": "- Typo in authenticated.\r\n- Does it worth saying what null means?", "bodyText": "Typo in authenticated.\nDoes it worth saying what null means?", "bodyHTML": "<ul dir=\"auto\">\n<li>Typo in authenticated.</li>\n<li>Does it worth saying what null means?</li>\n</ul>", "author": "thc202", "createdAt": "2020-11-10T09:07:32Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -273,6 +478,81 @@ public void setLoggedOutIndicatorPattern(String loggedOutIndicatorPattern) {\n         }\n     }\n \n+    public AuthCheckingStrategy getAuthCheckingStrategy() {\n+        return authCheckingStrategy;\n+    }\n+\n+    public void setAuthCheckingStrategy(AuthCheckingStrategy authCheckingStrategy) {\n+        this.authCheckingStrategy = authCheckingStrategy;\n+    }\n+\n+    public String getPollUrl() {\n+        return pollUrl;\n+    }\n+\n+    public void setPollUrl(String pollUrl) {\n+        this.pollUrl = pollUrl;\n+    }\n+\n+    public String getPollData() {\n+        return pollData;\n+    }\n+\n+    public void setPollData(String pollData) {\n+        this.pollData = pollData;\n+    }\n+\n+    public String getPollHeaders() {\n+        return pollHeaders;\n+    }\n+\n+    public void setPollHeaders(String pollHeaders) {\n+        this.pollHeaders = pollHeaders;\n+    }\n+\n+    public int getPollFrequency() {\n+        return pollFrequency;\n+    }\n+\n+    public void setPollFrequency(int pollFrequency) {\n+        this.pollFrequency = pollFrequency;\n+    }\n+\n+    public AuthPollFrequencyUnits getPollFrequencyUnits() {\n+        return pollFrequencyUnits;\n+    }\n+\n+    public void setPollFrequencyUnits(AuthPollFrequencyUnits pollFrequencyUnits) {\n+        this.pollFrequencyUnits = pollFrequencyUnits;\n+    }\n+\n+    /**\n+     * Gets the last poll result - true means that the user is authnaticated, otherwise false", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c02b5a85f381d29d670ebb78e83862b533acf031", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..ce05084ee 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -527,7 +527,8 @@ public abstract class AuthenticationMethod {\n     }\n \n     /**\n-     * Gets the last poll result - true means that the user is authnaticated, otherwise false\n+     * Gets the last poll result - true means that the user is authenticated, false is\n+     * unauthenticated and null if no poll request has been made.\n      *\n      * @return the last poll result\n      */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..e9eb2d523 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -527,7 +529,8 @@ public abstract class AuthenticationMethod {\n     }\n \n     /**\n-     * Gets the last poll result - true means that the user is authnaticated, otherwise false\n+     * Gets the last poll result - true means that the user is authenticated, false is\n+     * unauthenticated and null if no poll request has been made.\n      *\n      * @return the last poll result\n      */\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -528,34 +546,6 @@ public abstract class AuthenticationMethod {\n         this.pollFrequencyUnits = pollFrequencyUnits;\n     }\n \n-    /**\n-     * Gets the last poll result - true means that the user is authenticated, false is\n-     * unauthenticated and null if no poll request has been made.\n-     *\n-     * @return the last poll result\n-     */\n-    public Boolean getLastPollResult() {\n-        return lastPollResult;\n-    }\n-\n-    /**\n-     * Sets the last poll result - this can be used by script or add-ons to change the known logged\n-     * in state e.g. if they have more accurate information\n-     *\n-     * @param lastPollResult\n-     */\n-    public void setLastPollResult(Boolean lastPollResult) {\n-        this.lastPollResult = lastPollResult;\n-    }\n-\n-    public long getLastPollTime() {\n-        return lastPollTime;\n-    }\n-\n-    public int getRequestsSincePoll() {\n-        return requestsSincePoll;\n-    }\n-\n     /**\n      * Checks if another method is of the same type.\n      *\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "36bad2d45a2d7d4184ceef0f72dc81ea339de3e7", "committedDate": "2021-05-14 18:26:54 +0100", "message": "Remove empty statements"}, {"oid": "029e9b5f4bd612fa749e387e25109f5b0fe1e139", "committedDate": "2022-04-23 17:05:23 +0100", "message": "Use main connection options directly"}, {"oid": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "committedDate": "2022-09-20 06:58:01 -0400", "message": "Logging. Classes starting A and B. Format specifiers vs concatenation"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5OTA4Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520399083", "body": "Does not seem to be used, really needed?", "bodyText": "Does not seem to be used, really needed?", "bodyHTML": "<p dir=\"auto\">Does not seem to be used, really needed?</p>", "author": "thc202", "createdAt": "2020-11-10T09:07:35Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -273,6 +478,81 @@ public void setLoggedOutIndicatorPattern(String loggedOutIndicatorPattern) {\n         }\n     }\n \n+    public AuthCheckingStrategy getAuthCheckingStrategy() {\n+        return authCheckingStrategy;\n+    }\n+\n+    public void setAuthCheckingStrategy(AuthCheckingStrategy authCheckingStrategy) {\n+        this.authCheckingStrategy = authCheckingStrategy;\n+    }\n+\n+    public String getPollUrl() {\n+        return pollUrl;\n+    }\n+\n+    public void setPollUrl(String pollUrl) {\n+        this.pollUrl = pollUrl;\n+    }\n+\n+    public String getPollData() {\n+        return pollData;\n+    }\n+\n+    public void setPollData(String pollData) {\n+        this.pollData = pollData;\n+    }\n+\n+    public String getPollHeaders() {\n+        return pollHeaders;\n+    }\n+\n+    public void setPollHeaders(String pollHeaders) {\n+        this.pollHeaders = pollHeaders;\n+    }\n+\n+    public int getPollFrequency() {\n+        return pollFrequency;\n+    }\n+\n+    public void setPollFrequency(int pollFrequency) {\n+        this.pollFrequency = pollFrequency;\n+    }\n+\n+    public AuthPollFrequencyUnits getPollFrequencyUnits() {\n+        return pollFrequencyUnits;\n+    }\n+\n+    public void setPollFrequencyUnits(AuthPollFrequencyUnits pollFrequencyUnits) {\n+        this.pollFrequencyUnits = pollFrequencyUnits;\n+    }\n+\n+    /**\n+     * Gets the last poll result - true means that the user is authnaticated, otherwise false\n+     *\n+     * @return the last poll result\n+     */\n+    public Boolean getLastPollResult() {\n+        return lastPollResult;\n+    }\n+\n+    /**\n+     * Sets the last poll result - this can be used by script or add-ons to change the known logged\n+     * in state eg if they have more accurate information\n+     *\n+     * @param lastPollResult\n+     */\n+    public void setLastPollResult(Boolean lastPollResult) {\n+        this.lastPollResult = lastPollResult;\n+    }\n+\n+    public Date getLastPollTime() {", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU1MzMyNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520553326", "bodyText": "Deliberately exposed in case scripts (or other add-ons) want to know what it is.", "author": "psiinon", "createdAt": "2020-11-10T13:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5OTA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..1206412b7 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -545,7 +545,7 @@ public abstract class AuthenticationMethod {\n         this.lastPollResult = lastPollResult;\n     }\n \n-    public Date getLastPollTime() {\n+    public long getLastPollTime() {\n         return lastPollTime;\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..e9eb2d523 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -537,7 +540,7 @@ public abstract class AuthenticationMethod {\n \n     /**\n      * Sets the last poll result - this can be used by script or add-ons to change the known logged\n-     * in state eg if they have more accurate information\n+     * in state e.g. if they have more accurate information\n      *\n      * @param lastPollResult\n      */\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -528,34 +546,6 @@ public abstract class AuthenticationMethod {\n         this.pollFrequencyUnits = pollFrequencyUnits;\n     }\n \n-    /**\n-     * Gets the last poll result - true means that the user is authenticated, false is\n-     * unauthenticated and null if no poll request has been made.\n-     *\n-     * @return the last poll result\n-     */\n-    public Boolean getLastPollResult() {\n-        return lastPollResult;\n-    }\n-\n-    /**\n-     * Sets the last poll result - this can be used by script or add-ons to change the known logged\n-     * in state e.g. if they have more accurate information\n-     *\n-     * @param lastPollResult\n-     */\n-    public void setLastPollResult(Boolean lastPollResult) {\n-        this.lastPollResult = lastPollResult;\n-    }\n-\n-    public long getLastPollTime() {\n-        return lastPollTime;\n-    }\n-\n-    public int getRequestsSincePoll() {\n-        return requestsSincePoll;\n-    }\n-\n     /**\n      * Checks if another method is of the same type.\n      *\n", "next_change": null}]}}, {"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..e9eb2d523 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -545,7 +548,7 @@ public abstract class AuthenticationMethod {\n         this.lastPollResult = lastPollResult;\n     }\n \n-    public Date getLastPollTime() {\n+    public long getLastPollTime() {\n         return lastPollTime;\n     }\n \n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -528,34 +546,6 @@ public abstract class AuthenticationMethod {\n         this.pollFrequencyUnits = pollFrequencyUnits;\n     }\n \n-    /**\n-     * Gets the last poll result - true means that the user is authenticated, false is\n-     * unauthenticated and null if no poll request has been made.\n-     *\n-     * @return the last poll result\n-     */\n-    public Boolean getLastPollResult() {\n-        return lastPollResult;\n-    }\n-\n-    /**\n-     * Sets the last poll result - this can be used by script or add-ons to change the known logged\n-     * in state e.g. if they have more accurate information\n-     *\n-     * @param lastPollResult\n-     */\n-    public void setLastPollResult(Boolean lastPollResult) {\n-        this.lastPollResult = lastPollResult;\n-    }\n-\n-    public long getLastPollTime() {\n-        return lastPollTime;\n-    }\n-\n-    public int getRequestsSincePoll() {\n-        return requestsSincePoll;\n-    }\n-\n     /**\n      * Checks if another method is of the same type.\n      *\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "36bad2d45a2d7d4184ceef0f72dc81ea339de3e7", "committedDate": "2021-05-14 18:26:54 +0100", "message": "Remove empty statements"}, {"oid": "029e9b5f4bd612fa749e387e25109f5b0fe1e139", "committedDate": "2022-04-23 17:05:23 +0100", "message": "Use main connection options directly"}, {"oid": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "committedDate": "2022-09-20 06:58:01 -0400", "message": "Logging. Classes starting A and B. Format specifiers vs concatenation"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5OTQyNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520399426", "body": "e.g.", "bodyText": "e.g.", "bodyHTML": "<p dir=\"auto\">e.g.</p>", "author": "thc202", "createdAt": "2020-11-10T09:08:07Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java", "diffHunk": "@@ -273,6 +478,81 @@ public void setLoggedOutIndicatorPattern(String loggedOutIndicatorPattern) {\n         }\n     }\n \n+    public AuthCheckingStrategy getAuthCheckingStrategy() {\n+        return authCheckingStrategy;\n+    }\n+\n+    public void setAuthCheckingStrategy(AuthCheckingStrategy authCheckingStrategy) {\n+        this.authCheckingStrategy = authCheckingStrategy;\n+    }\n+\n+    public String getPollUrl() {\n+        return pollUrl;\n+    }\n+\n+    public void setPollUrl(String pollUrl) {\n+        this.pollUrl = pollUrl;\n+    }\n+\n+    public String getPollData() {\n+        return pollData;\n+    }\n+\n+    public void setPollData(String pollData) {\n+        this.pollData = pollData;\n+    }\n+\n+    public String getPollHeaders() {\n+        return pollHeaders;\n+    }\n+\n+    public void setPollHeaders(String pollHeaders) {\n+        this.pollHeaders = pollHeaders;\n+    }\n+\n+    public int getPollFrequency() {\n+        return pollFrequency;\n+    }\n+\n+    public void setPollFrequency(int pollFrequency) {\n+        this.pollFrequency = pollFrequency;\n+    }\n+\n+    public AuthPollFrequencyUnits getPollFrequencyUnits() {\n+        return pollFrequencyUnits;\n+    }\n+\n+    public void setPollFrequencyUnits(AuthPollFrequencyUnits pollFrequencyUnits) {\n+        this.pollFrequencyUnits = pollFrequencyUnits;\n+    }\n+\n+    /**\n+     * Gets the last poll result - true means that the user is authnaticated, otherwise false\n+     *\n+     * @return the last poll result\n+     */\n+    public Boolean getLastPollResult() {\n+        return lastPollResult;\n+    }\n+\n+    /**\n+     * Sets the last poll result - this can be used by script or add-ons to change the known logged\n+     * in state eg if they have more accurate information", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c02b5a85f381d29d670ebb78e83862b533acf031", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..ce05084ee 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -537,7 +538,7 @@ public abstract class AuthenticationMethod {\n \n     /**\n      * Sets the last poll result - this can be used by script or add-ons to change the known logged\n-     * in state eg if they have more accurate information\n+     * in state e.g. if they have more accurate information\n      *\n      * @param lastPollResult\n      */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex 47453ec55..e9eb2d523 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -537,7 +540,7 @@ public abstract class AuthenticationMethod {\n \n     /**\n      * Sets the last poll result - this can be used by script or add-ons to change the known logged\n-     * in state eg if they have more accurate information\n+     * in state e.g. if they have more accurate information\n      *\n      * @param lastPollResult\n      */\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\nindex e9eb2d523..c98766db2 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethod.java\n", "chunk": "@@ -528,34 +546,6 @@ public abstract class AuthenticationMethod {\n         this.pollFrequencyUnits = pollFrequencyUnits;\n     }\n \n-    /**\n-     * Gets the last poll result - true means that the user is authenticated, false is\n-     * unauthenticated and null if no poll request has been made.\n-     *\n-     * @return the last poll result\n-     */\n-    public Boolean getLastPollResult() {\n-        return lastPollResult;\n-    }\n-\n-    /**\n-     * Sets the last poll result - this can be used by script or add-ons to change the known logged\n-     * in state e.g. if they have more accurate information\n-     *\n-     * @param lastPollResult\n-     */\n-    public void setLastPollResult(Boolean lastPollResult) {\n-        this.lastPollResult = lastPollResult;\n-    }\n-\n-    public long getLastPollTime() {\n-        return lastPollTime;\n-    }\n-\n-    public int getRequestsSincePoll() {\n-        return requestsSincePoll;\n-    }\n-\n     /**\n      * Checks if another method is of the same type.\n      *\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "c76ea462de449abedf5385ac4b43612f10a192d6", "committedDate": "2020-12-16 15:21:23 +0000", "message": "Updated 'TODO add version's"}, {"oid": "36bad2d45a2d7d4184ceef0f72dc81ea339de3e7", "committedDate": "2021-05-14 18:26:54 +0100", "message": "Remove empty statements"}, {"oid": "029e9b5f4bd612fa749e387e25109f5b0fe1e139", "committedDate": "2022-04-23 17:05:23 +0100", "message": "Use main connection options directly"}, {"oid": "b4e671ae9e22262017dc2dfd6f17d180445b34a2", "committedDate": "2022-09-20 06:58:01 -0400", "message": "Logging. Classes starting A and B. Format specifiers vs concatenation"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTQ5NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520401495", "body": "Should this be in the method not the type? It would avoid creating a new type each time the data needs to be replaced.", "bodyText": "Should this be in the method not the type? It would avoid creating a new type each time the data needs to be replaced.", "bodyHTML": "<p dir=\"auto\">Should this be in the method not the type? It would avoid creating a new type each time the data needs to be replaced.</p>", "author": "thc202", "createdAt": "2020-11-10T09:11:08Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java", "diffHunk": "@@ -214,6 +218,8 @@ public String toString() {\n      */\n     public abstract ApiDynamicActionImplementor getSetCredentialsForUserApiAction();\n \n+    public abstract void replaceUserDataInPollRequest(HttpMessage msg, User user);", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1835d5ff86027e3a584c13b69e7b9ec0920f038c", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java\nindex 1aed76720..b0862b3a4 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java\n", "chunk": "@@ -218,8 +217,6 @@ public abstract class AuthenticationMethodType {\n      */\n     public abstract ApiDynamicActionImplementor getSetCredentialsForUserApiAction();\n \n-    public abstract void replaceUserDataInPollRequest(HttpMessage msg, User user);\n-\n     @Override\n     public int hashCode() {\n         return getUniqueIdentifier();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java\nindex 1aed76720..b0862b3a4 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/AuthenticationMethodType.java\n", "chunk": "@@ -218,8 +217,6 @@ public abstract class AuthenticationMethodType {\n      */\n     public abstract ApiDynamicActionImplementor getSetCredentialsForUserApiAction();\n \n-    public abstract void replaceUserDataInPollRequest(HttpMessage msg, User user);\n-\n     @Override\n     public int hashCode() {\n         return getUniqueIdentifier();\n", "next_change": null}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMzA5MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520403091", "body": "`static`", "bodyText": "static", "bodyHTML": "<p dir=\"auto\"><code>static</code></p>", "author": "thc202", "createdAt": "2020-11-10T09:13:47Z", "path": "zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java", "diffHunk": "@@ -1417,4 +1414,19 @@ public void importData(Configuration config, AuthenticationMethod authMethod)\n             throw new ConfigurationException(e);\n         }\n     }\n+\n+    public void replaceUserCredentialsDataInPollRequest(", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c02b5a85f381d29d670ebb78e83862b533acf031", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java b/zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java\nindex b2a565d1c..bb116e500 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java\n", "chunk": "@@ -1415,7 +1415,7 @@ public abstract class PostBasedAuthenticationMethodType extends AuthenticationMe\n         }\n     }\n \n-    public void replaceUserCredentialsDataInPollRequest(\n+    public static void replaceUserCredentialsDataInPollRequest(\n             HttpMessage msg, User user, UnaryOperator<String> bodyEncoder) {\n         if (user != null) {\n             AuthenticationCredentials creds = user.getAuthenticationCredentials();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java b/zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java\nindex b2a565d1c..bb116e500 100644\n--- a/zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java\n+++ b/zap/src/main/java/org/zaproxy/zap/authentication/PostBasedAuthenticationMethodType.java\n", "chunk": "@@ -1415,7 +1415,7 @@ public abstract class PostBasedAuthenticationMethodType extends AuthenticationMe\n         }\n     }\n \n-    public void replaceUserCredentialsDataInPollRequest(\n+    public static void replaceUserCredentialsDataInPollRequest(\n             HttpMessage msg, User user, UnaryOperator<String> bodyEncoder) {\n         if (user != null) {\n             AuthenticationCredentials creds = user.getAuthenticationCredentials();\n", "next_change": null}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "4d5df6d4235b9cdfb768861b2ee22f95a76c6980", "committedDate": "2022-02-09 11:32:34 -0500", "message": "chore: Leverage isEmpty vs size equality zero checks"}, {"oid": "029e9b5f4bd612fa749e387e25109f5b0fe1e139", "committedDate": "2022-04-23 17:05:23 +0100", "message": "Use main connection options directly"}, {"oid": "6e80ed3204f5e66c48850bf8df5dae5631386703", "committedDate": "2022-06-06 16:43:25 +0100", "message": "Set Content-Length in POST based auth"}, {"oid": "81ee5d010a62d17380a269d306bcd111b36035cf", "committedDate": "2022-07-05 09:25:49 -0600", "message": "PostBasedAuthenticationMethodType updates   calculate request content-length right before sending   set protocol to http/1.1 for auth request   handle null history ref"}, {"oid": "76ff8d2fb5bb6819843084ac06ae6ff21bd70be8", "committedDate": "2022-08-05 14:51:10 +0100", "message": "Address warns with Java 18"}, {"oid": "25c29602f5729d6dfbfb03d3c95f7349db9dfc4f", "committedDate": "2022-09-28 10:19:03 +0200", "message": "L&F which disables HTML JLabels by default"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMzY4NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520403685", "body": "`isEmpty()`", "bodyText": "isEmpty()", "bodyHTML": "<p dir=\"auto\"><code>isEmpty()</code></p>", "author": "thc202", "createdAt": "2020-11-10T09:14:45Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java", "diffHunk": "@@ -172,6 +193,58 @@ public ApiResponse handleApiAction(String name, JSONObject params) throws ApiExc\n                 }\n                 Model.getSingleton().getSession().saveContext(context);\n                 break;\n+            case ACTION_SET_CONTEXT_CHECKING_STRATEGY:\n+                context = getContext(params);\n+                AuthCheckingStrategy checkingStrategy;\n+                try {\n+                    checkingStrategy =\n+                            AuthCheckingStrategy.valueOf(\n+                                    params.getString(PARAM_CHECKING_STRATEGRY));\n+                } catch (Exception e1) {\n+                    throw new ApiException(\n+                            ApiException.Type.ILLEGAL_PARAMETER, PARAM_CHECKING_STRATEGRY);\n+                }\n+                if (AuthCheckingStrategy.POLL_URL.equals(checkingStrategy)) {\n+                    AuthPollFrequencyUnits units;\n+                    try {\n+                        units =\n+                                AuthPollFrequencyUnits.valueOf(\n+                                        params.getString(PARAM_POLL_FREQ_UNITS));\n+                    } catch (Exception e) {\n+                        throw new ApiException(\n+                                ApiException.Type.ILLEGAL_PARAMETER, PARAM_POLL_FREQ_UNITS);\n+                    }\n+                    int freq;\n+                    String pollUrl = params.getString(PARAM_POLL_URL);\n+                    String pollData = params.getString(PARAM_POLL_DATA);\n+                    String pollHeaders = params.getString(PARAM_POLL_HEADERS);\n+                    if (pollUrl == null || pollUrl.length() <= 0) {", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c02b5a85f381d29d670ebb78e83862b533acf031", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java b/zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java\nindex 7d3ac42a9..f7056ff1e 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java\n", "chunk": "@@ -218,7 +218,7 @@ public class ContextAPI extends ApiImplementor {\n                     String pollUrl = params.getString(PARAM_POLL_URL);\n                     String pollData = params.getString(PARAM_POLL_DATA);\n                     String pollHeaders = params.getString(PARAM_POLL_HEADERS);\n-                    if (pollUrl == null || pollUrl.length() <= 0) {\n+                    if (pollUrl == null || pollUrl.isEmpty()) {\n                         throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_POLL_URL);\n                     }\n                     try {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java b/zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java\nindex 7d3ac42a9..f7056ff1e 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/api/ContextAPI.java\n", "chunk": "@@ -218,7 +218,7 @@ public class ContextAPI extends ApiImplementor {\n                     String pollUrl = params.getString(PARAM_POLL_URL);\n                     String pollData = params.getString(PARAM_POLL_DATA);\n                     String pollHeaders = params.getString(PARAM_POLL_HEADERS);\n-                    if (pollUrl == null || pollUrl.length() <= 0) {\n+                    if (pollUrl == null || pollUrl.isEmpty()) {\n                         throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_POLL_URL);\n                     }\n                     try {\n", "next_change": null}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "3d8f9d05d1bb759214d03cdf9cc8cf61cdab16be", "committedDate": "2020-12-15 10:37:43 +0000", "message": "Added support for dynamic technologies"}, {"oid": "cebaedcc35f6f2effb3252a16cd9bfaec5673437", "committedDate": "2021-05-14 18:26:42 +0100", "message": "Remove redundant type arguments"}, {"oid": "fd9b27c46f6fe7dda4d011564b2058a52b989e06", "committedDate": "2022-04-17 19:16:03 +0530", "message": "Add includedTechnologies and excludedTechnologies to  Context View API #6001"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNDk4Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520404982", "body": "Remove?", "bodyText": "Remove?", "bodyHTML": "<p dir=\"auto\">Remove?</p>", "author": "thc202", "createdAt": "2020-11-10T09:16:41Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java", "diffHunk": "@@ -314,6 +473,116 @@ private JPanel getConfigContainerPanel() {\n         return configContainerPanel;\n     }\n \n+    private JPanel getVerifContainerPanel() {\n+        if (verifContainerPanel == null) {\n+            verifContainerPanel = new JPanel(new GridBagLayout());\n+            verifContainerPanel.setBorder(\n+                    javax.swing.BorderFactory.createTitledBorder(\n+                            null,\n+                            PANEL_TITLE_VERIF,\n+                            javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,\n+                            javax.swing.border.TitledBorder.DEFAULT_POSITION,\n+                            FontUtils.getFont(FontUtils.Size.standard)));\n+        }\n+        return verifContainerPanel;\n+    }\n+\n+    private JButton getPollUrlSelectButton() {\n+        if (pollUrlSelectButton == null) {\n+            pollUrlSelectButton = new JButton(Constant.messages.getString(\"all.button.select\"));\n+            pollUrlSelectButton.setIcon(\n+                    new ImageIcon(\n+                            View.class.getResource(\"/resource/icon/16/094.png\"))); // Globe Icon\n+            // Add behaviour for Node Select dialog\n+            pollUrlSelectButton.addActionListener(\n+                    new java.awt.event.ActionListener() {\n+                        @Override\n+                        public void actionPerformed(java.awt.event.ActionEvent e) {\n+                            NodeSelectDialog nsd =\n+                                    new NodeSelectDialog(View.getSingleton().getMainFrame());\n+                            // Try to pre-select the node according to what has been inserted in the\n+                            // fields\n+                            SiteNode node = null;\n+                            if (getPollUrlField().getText().trim().length() > 0)\n+                                try {\n+                                    // If it's a POST query\n+                                    if (getPollDataField().getText().trim().length() > 0)\n+                                        node =\n+                                                Model.getSingleton()\n+                                                        .getSession()\n+                                                        .getSiteTree()\n+                                                        .findNode(\n+                                                                new URI(\n+                                                                        getPollUrlField().getText(),\n+                                                                        false),\n+                                                                HttpRequestHeader.POST,\n+                                                                getPollDataField().getText());\n+                                    else\n+                                        node =\n+                                                Model.getSingleton()\n+                                                        .getSession()\n+                                                        .getSiteTree()\n+                                                        .findNode(\n+                                                                new URI(\n+                                                                        getPollUrlField().getText(),\n+                                                                        false));\n+                                } catch (Exception e2) {\n+                                    // Ignore. It means we could not properly get a node for the\n+                                    // existing\n+                                    // value and does not have any harmful effects\n+                                }\n+\n+                            // Show the dialog and wait for input\n+                            node = nsd.showDialog(node);\n+                            if (node != null && node.getHistoryReference() != null) {\n+                                try {\n+\n+                                    getPollUrlField()\n+                                            .setText(\n+                                                    node.getHistoryReference().getURI().toString());\n+                                    getPollDataField()\n+                                            .setText(\n+                                                    node.getHistoryReference()\n+                                                            .getHttpMessage()\n+                                                            .getRequestBody()\n+                                                            .toString());\n+                                    /*\n+                                    updateParameters();\n+                                    if (StringUtils.isBlank(loginPageUrlField.getText())) {\n+                                        loginPageUrlField.setText(loginUrlField.getText());\n+                                    }\n+                                    */", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c02b5a85f381d29d670ebb78e83862b533acf031", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\nindex c5246433e..be525e4a5 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n", "chunk": "@@ -546,12 +546,6 @@ public class ContextAuthenticationPanel extends AbstractContextPropertiesPanel {\n                                                             .getHttpMessage()\n                                                             .getRequestBody()\n                                                             .toString());\n-                                    /*\n-                                    updateParameters();\n-                                    if (StringUtils.isBlank(loginPageUrlField.getText())) {\n-                                        loginPageUrlField.setText(loginUrlField.getText());\n-                                    }\n-                                    */\n                                 } catch (Exception e1) {\n                                     log.error(e1.getMessage(), e1);\n                                 }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\nindex c5246433e..be525e4a5 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n", "chunk": "@@ -546,12 +546,6 @@ public class ContextAuthenticationPanel extends AbstractContextPropertiesPanel {\n                                                             .getHttpMessage()\n                                                             .getRequestBody()\n                                                             .toString());\n-                                    /*\n-                                    updateParameters();\n-                                    if (StringUtils.isBlank(loginPageUrlField.getText())) {\n-                                        loginPageUrlField.setText(loginUrlField.getText());\n-                                    }\n-                                    */\n                                 } catch (Exception e1) {\n                                     log.error(e1.getMessage(), e1);\n                                 }\n", "next_change": {"commit": "8cd994cfee0c363b5c97a53222194e178bac8e51", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\nindex be525e4a5..dccb84cb7 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n", "chunk": "@@ -547,7 +550,7 @@ public class ContextAuthenticationPanel extends AbstractContextPropertiesPanel {\n                                                             .getRequestBody()\n                                                             .toString());\n                                 } catch (Exception e1) {\n-                                    log.error(e1.getMessage(), e1);\n+                                    LOGGER.error(e1.getMessage(), e1);\n                                 }\n                             }\n                         }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "cebaedcc35f6f2effb3252a16cd9bfaec5673437", "committedDate": "2021-05-14 18:26:42 +0100", "message": "Remove redundant type arguments"}, {"oid": "76ff8d2fb5bb6819843084ac06ae6ff21bd70be8", "committedDate": "2022-08-05 14:51:10 +0100", "message": "Address warns with Java 18"}, {"oid": "25c29602f5729d6dfbfb03d3c95f7349db9dfc4f", "committedDate": "2022-09-28 10:19:03 +0200", "message": "L&F which disables HTML JLabels by default"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNTUxOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520405519", "body": "Add braces?", "bodyText": "Add braces?", "bodyHTML": "<p dir=\"auto\">Add braces?</p>", "author": "thc202", "createdAt": "2020-11-10T09:17:25Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java", "diffHunk": "@@ -343,7 +612,25 @@ public void initContextData(Session session, Context uiSharedContext) {\n \n         // If something was already configured, find the type and set the UI accordingly\n         if (selectedAuthenticationMethod != null) {\n-            // Set logged in/out indicators\n+            // Set verification\n+            if (selectedAuthenticationMethod.getAuthCheckingStrategy() != null)", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c02b5a85f381d29d670ebb78e83862b533acf031", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\nindex c5246433e..be525e4a5 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n", "chunk": "@@ -613,12 +607,13 @@ public class ContextAuthenticationPanel extends AbstractContextPropertiesPanel {\n         // If something was already configured, find the type and set the UI accordingly\n         if (selectedAuthenticationMethod != null) {\n             // Set verification\n-            if (selectedAuthenticationMethod.getAuthCheckingStrategy() != null)\n+            if (selectedAuthenticationMethod.getAuthCheckingStrategy() != null) {\n                 getAuthenticationVerifComboBox()\n                         .getModel()\n                         .setSelectedItem(\n                                 new AuthCheckingStrategyType(\n                                         selectedAuthenticationMethod.getAuthCheckingStrategy()));\n+            }\n             setPollFieldStatuses(\n                     (AuthCheckingStrategyType) getAuthenticationVerifComboBox().getSelectedItem());\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\nindex c5246433e..be525e4a5 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/authentication/ContextAuthenticationPanel.java\n", "chunk": "@@ -613,12 +607,13 @@ public class ContextAuthenticationPanel extends AbstractContextPropertiesPanel {\n         // If something was already configured, find the type and set the UI accordingly\n         if (selectedAuthenticationMethod != null) {\n             // Set verification\n-            if (selectedAuthenticationMethod.getAuthCheckingStrategy() != null)\n+            if (selectedAuthenticationMethod.getAuthCheckingStrategy() != null) {\n                 getAuthenticationVerifComboBox()\n                         .getModel()\n                         .setSelectedItem(\n                                 new AuthCheckingStrategyType(\n                                         selectedAuthenticationMethod.getAuthCheckingStrategy()));\n+            }\n             setPollFieldStatuses(\n                     (AuthCheckingStrategyType) getAuthenticationVerifComboBox().getSelectedItem());\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "cebaedcc35f6f2effb3252a16cd9bfaec5673437", "committedDate": "2021-05-14 18:26:42 +0100", "message": "Remove redundant type arguments"}, {"oid": "76ff8d2fb5bb6819843084ac06ae6ff21bd70be8", "committedDate": "2022-08-05 14:51:10 +0100", "message": "Address warns with Java 18"}, {"oid": "25c29602f5729d6dfbfb03d3c95f7349db9dfc4f", "committedDate": "2022-09-28 10:19:03 +0200", "message": "L&F which disables HTML JLabels by default"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}, {"oid": "af9267990c41d0305e3b5e2cc8f1bcb1e88142f1", "committedDate": "2023-05-02 17:10:57 +0200", "message": "Add auto-detect checking strategy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwODYzNQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520408635", "body": "It would be better to add a new method, e.g. `processMessageToMatchUserWithoutAuthenticate(HttpMessage)`, instead of deprecate this one, it would be more clear what the purpose of the new method is, also, others can call it if needed without passing an initiator.", "bodyText": "It would be better to add a new method, e.g. processMessageToMatchUserWithoutAuthenticate(HttpMessage), instead of deprecate this one, it would be more clear what the purpose of the new method is, also, others can call it if needed without passing an initiator.", "bodyHTML": "<p dir=\"auto\">It would be better to add a new method, e.g. <code>processMessageToMatchUserWithoutAuthenticate(HttpMessage)</code>, instead of deprecate this one, it would be more clear what the purpose of the new method is, also, others can call it if needed without passing an initiator.</p>", "author": "thc202", "createdAt": "2020-11-10T09:21:48Z", "path": "zap/src/main/java/org/zaproxy/zap/users/User.java", "diffHunk": "@@ -166,16 +167,31 @@ public int getId() {\n      * user.\n      *\n      * @param message the message\n+     * @deprecated since 2.10.0\n      */\n+    @Deprecated\n     public void processMessageToMatchUser(HttpMessage message) {", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1835d5ff86027e3a584c13b69e7b9ec0920f038c", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/users/User.java b/zap/src/main/java/org/zaproxy/zap/users/User.java\nindex 554550724..259aaba8f 100644\n--- a/zap/src/main/java/org/zaproxy/zap/users/User.java\n+++ b/zap/src/main/java/org/zaproxy/zap/users/User.java\n", "chunk": "@@ -167,11 +167,19 @@ public class User extends Enableable {\n      * user.\n      *\n      * @param message the message\n-     * @deprecated since 2.10.0\n      */\n-    @Deprecated\n     public void processMessageToMatchUser(HttpMessage message) {\n-        this.processMessageToMatchUser(message, -1);\n+        // If the user is not yet authenticated, authenticate now\n+        // Make sure there are no simultaneous authentications for the same user\n+        synchronized (this) {\n+            if (this.requiresAuthentication()) {\n+                this.authenticate();\n+                if (this.requiresAuthentication()) {\n+                    log.info(\"Authentication failed for user: \" + name);\n+                    return;\n+                }\n+            }\n+        }\n     }\n \n     /**\n", "next_change": {"commit": "9c18aaaf26f62285bf8255871c8e47bf87b95677", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/users/User.java b/zap/src/main/java/org/zaproxy/zap/users/User.java\nindex 259aaba8f..e3c80a0e9 100644\n--- a/zap/src/main/java/org/zaproxy/zap/users/User.java\n+++ b/zap/src/main/java/org/zaproxy/zap/users/User.java\n", "chunk": "@@ -180,6 +179,7 @@ public class User extends Enableable {\n                 }\n             }\n         }\n+        processMessageToMatchAuthenticatedSession(message);\n     }\n \n     /**\n", "next_change": {"commit": "ea03ad12de790046307bf269d60952b63ee86c53", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/users/User.java b/zap/src/main/java/org/zaproxy/zap/users/User.java\nindex e3c80a0e9..17b9810ec 100644\n--- a/zap/src/main/java/org/zaproxy/zap/users/User.java\n+++ b/zap/src/main/java/org/zaproxy/zap/users/User.java\n", "chunk": "@@ -187,7 +187,6 @@ public class User extends Enableable {\n      * user.\n      *\n      * @param message the message\n-     * @param initiator the initiator\n      */\n     public void processMessageToMatchAuthenticatedSession(HttpMessage message) {\n         getContext()\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/main/java/org/zaproxy/zap/users/User.java b/zap/src/main/java/org/zaproxy/zap/users/User.java\nindex 554550724..17b9810ec 100644\n--- a/zap/src/main/java/org/zaproxy/zap/users/User.java\n+++ b/zap/src/main/java/org/zaproxy/zap/users/User.java\n", "chunk": "@@ -167,11 +166,20 @@ public class User extends Enableable {\n      * user.\n      *\n      * @param message the message\n-     * @deprecated since 2.10.0\n      */\n-    @Deprecated\n     public void processMessageToMatchUser(HttpMessage message) {\n-        this.processMessageToMatchUser(message, -1);\n+        // If the user is not yet authenticated, authenticate now\n+        // Make sure there are no simultaneous authentications for the same user\n+        synchronized (this) {\n+            if (this.requiresAuthentication()) {\n+                this.authenticate();\n+                if (this.requiresAuthentication()) {\n+                    log.info(\"Authentication failed for user: \" + name);\n+                    return;\n+                }\n+            }\n+        }\n+        processMessageToMatchAuthenticatedSession(message);\n     }\n \n     /**\n", "next_change": null}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "cc46adcffdeb8d39e058e04327dbb65e272f4a7c", "committedDate": "2020-11-26 19:19:37 +0000", "message": "Stop using Log4j 1.x where possible"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "6a707a590525721cee25fd6b6e071e676e4caff3", "committedDate": "2021-08-24 14:58:04 +0100", "message": "Remove unnecessary code comments"}, {"oid": "e8b7ad859ec8f1fcf71d2875f6f3dc1e84b227a2", "committedDate": "2022-02-12 13:11:02 +0000", "message": "Guard against exceptions during authentication"}, {"oid": "e70c1d88eee564e1593d21ed3d6bcc47657fa1ad", "committedDate": "2022-09-30 10:10:57 -0400", "message": "Logging. Remainder of classes Format specifiers vs concatenation"}, {"oid": "8cd994cfee0c363b5c97a53222194e178bac8e51", "committedDate": "2023-01-10 13:50:53 +0000", "message": "Tidy up loggers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMjc0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520412742", "body": "Technically the `AuthenticationMethod` should properly handle a null strategy as it allows to set it to null.", "bodyText": "Technically the AuthenticationMethod should properly handle a null strategy as it allows to set it to null.", "bodyHTML": "<p dir=\"auto\">Technically the <code>AuthenticationMethod</code> should properly handle a null strategy as it allows to set it to null.</p>", "author": "thc202", "createdAt": "2020-11-10T09:27:44Z", "path": "zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java", "diffHunk": "@@ -64,6 +65,7 @@ public void setUp() throws Exception {\n         header.setURI(new URI(\"http://www.example.com\", true));\n         loginMessage.setRequestHeader(header);\n         method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n+        method.setAuthCheckingStrategy(AuthCheckingStrategy.EACH_RESP);", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java\nindex fd376a4d5..6925e137d 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java\n", "chunk": "@@ -59,7 +63,7 @@ public class AuthenticationMethodIndicatorsUnitTest {\n     private AuthenticationMethod method;\n \n     @BeforeEach\n-    public void setUp() throws Exception {\n+    void setUp() throws Exception {\n         loginMessage = new HttpMessage();\n         HttpRequestHeader header = new HttpRequestHeader();\n         header.setURI(new URI(\"http://www.example.com\", true));\n", "next_change": null}, {"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java\nindex fd376a4d5..6925e137d 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodIndicatorsUnitTest.java\n", "chunk": "@@ -69,7 +73,7 @@ public class AuthenticationMethodIndicatorsUnitTest {\n     }\n \n     @Test\n-    public void shouldStoreSetLoggedInIndicator() {\n+    void shouldStoreSetLoggedInIndicator() {\n         // Given\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "committedDate": "2021-05-14 18:27:23 +0100", "message": "Reduce accessibility in tests"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxNzA3Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520417072", "body": "`EveryFive` \u2192 `OnSpecifiedNumberOf` (or something), that's using five for the tests is not the important.", "bodyText": "EveryFive \u2192 OnSpecifiedNumberOf (or something), that's using five for the tests is not the important.", "bodyHTML": "<p dir=\"auto\"><code>EveryFive</code> \u2192 <code>OnSpecifiedNumberOf</code> (or something), that's using five for the tests is not the important.</p>", "author": "thc202", "createdAt": "2020-11-10T09:34:02Z", "path": "zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2013 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.authentication;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.httpclient.URI;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n+\n+    private static final String LOGGED_IN_INDICATOR = \"logged in\";\n+    private static final String LOGGED_IN_BODY =\n+            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \"\n+                    + \"Pellentesque auctor nulla id turpis placerat vulputate.\"\n+                    + LOGGED_IN_INDICATOR\n+                    + \" Proin tempor bibendum eros rutrum. \";\n+\n+    private HttpMessage loginMessage;\n+    private AuthenticationMethod method;\n+\n+    @BeforeEach\n+    public void setUp() throws Exception {\n+        loginMessage = new HttpMessage();\n+        HttpRequestHeader header = new HttpRequestHeader();\n+        header.setURI(new URI(\"http://www.example.com\", true));\n+        loginMessage.setRequestHeader(header);\n+        method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n+        method.setAuthCheckingStrategy(AuthCheckingStrategy.EACH_RESP);\n+\n+        this.startServer();\n+    }\n+\n+    @AfterEach\n+    public void shutDownServer() throws Exception {\n+        stopServer();\n+    }\n+\n+    @Test\n+    public void shouldPollOnFirstRequest() throws NullPointerException, IOException {\n+        // Given\n+        String test = \"/shouldPollOnFirstRequest/test\";\n+        String pollUrl = \"/shouldPollOnFirstRequest/pollUrl\";\n+        final List<String> orderedReqs = new ArrayList<>();\n+\n+        this.nano.addHandler(\n+                new NanoServerHandler(pollUrl) {\n+                    @Override\n+                    protected Response serve(IHTTPSession session) {\n+                        orderedReqs.add(session.getUri());\n+                        return newFixedLengthResponse(LOGGED_IN_BODY);\n+                    }\n+                });\n+        HttpMessage testMsg = this.getHttpMessage(test);\n+        HttpMessage pollMsg = this.getHttpMessage(pollUrl);\n+\n+        method.setAuthCheckingStrategy(AuthCheckingStrategy.POLL_URL);\n+        method.setPollUrl(pollMsg.getRequestHeader().getURI().toString());\n+        method.setPollFrequencyUnits(AuthPollFrequencyUnits.REQUESTS);\n+        method.setPollFrequency(5);\n+        method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n+\n+        // When/Then\n+        assertThat(method.isAuthenticated(testMsg, null), is(true));\n+        assertThat(orderedReqs.size(), is(1));\n+        assertThat(orderedReqs.get(0), is(pollUrl));\n+    }\n+\n+    @Test\n+    public void shouldPollEveryFiveRequests() throws NullPointerException, IOException {", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c02b5a85f381d29d670ebb78e83862b533acf031", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 6f1e78f06..4e3b11938 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -103,7 +100,7 @@ public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n     }\n \n     @Test\n-    public void shouldPollEveryFiveRequests() throws NullPointerException, IOException {\n+    public void shouldPollOnSpecifiedNumberOfRequests() throws NullPointerException, IOException {\n         // Given\n         String test = \"/shouldPollOnFirstRequest/test\";\n         String pollUrl = \"/shouldPollOnFirstRequest/pollUrl\";\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 6f1e78f06..4e3b11938 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -103,7 +100,7 @@ public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n     }\n \n     @Test\n-    public void shouldPollEveryFiveRequests() throws NullPointerException, IOException {\n+    public void shouldPollOnSpecifiedNumberOfRequests() throws NullPointerException, IOException {\n         // Given\n         String test = \"/shouldPollOnFirstRequest/test\";\n         String pollUrl = \"/shouldPollOnFirstRequest/pollUrl\";\n", "next_change": {"commit": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 4e3b11938..d63f7b92c 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -93,14 +97,17 @@ public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n \n+        User user = mock(User.class);\n+        given(user.getAuthenticationState()).willReturn(new AuthenticationState());\n+\n         // When/Then\n-        assertThat(method.isAuthenticated(testMsg, null), is(true));\n+        assertThat(method.isAuthenticated(testMsg, user), is(true));\n         assertThat(orderedReqs.size(), is(1));\n         assertThat(orderedReqs.get(0), is(pollUrl));\n     }\n \n     @Test\n-    public void shouldPollOnSpecifiedNumberOfRequests() throws NullPointerException, IOException {\n+    void shouldPollOnSpecifiedNumberOfRequests() throws NullPointerException, IOException {\n         // Given\n         String test = \"/shouldPollOnFirstRequest/test\";\n         String pollUrl = \"/shouldPollOnFirstRequest/pollUrl\";\n", "next_change": {"commit": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex d63f7b92c..c6bcc45d7 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -113,12 +101,12 @@ class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n         String pollUrl = \"/shouldPollOnFirstRequest/pollUrl\";\n         final List<String> orderedReqs = new ArrayList<>();\n \n-        this.nano.addHandler(\n-                new NanoServerHandler(pollUrl) {\n-                    @Override\n-                    protected Response serve(IHTTPSession session) {\n-                        orderedReqs.add(session.getUri());\n-                        return newFixedLengthResponse(LOGGED_IN_BODY);\n+        setMessageHandler(\n+                msg -> {\n+                    String path = msg.getRequestHeader().getURI().getPath();\n+                    if (pollUrl.equals(path)) {\n+                        orderedReqs.add(path);\n+                        msg.setResponseBody(LOGGED_IN_BODY);\n                     }\n                 });\n         HttpMessage testMsg = this.getHttpMessage(test);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "committedDate": "2021-05-14 18:27:23 +0100", "message": "Reduce accessibility in tests"}, {"oid": "14a8037b159e6e2433946a27d847796a74dee673", "committedDate": "2022-10-14 23:11:42 +0100", "message": "Remove test class of legacy HttpSender"}, {"oid": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "committedDate": "2022-10-17 17:35:27 +0100", "message": "Do not rely on HttpSender implementation in tests"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyMDI3OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520420278", "body": "Should not be needed.", "bodyText": "Should not be needed.", "bodyHTML": "<p dir=\"auto\">Should not be needed.</p>", "author": "thc202", "createdAt": "2020-11-10T09:38:50Z", "path": "zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2013 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.authentication;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.httpclient.URI;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+@ExtendWith(MockitoExtension.class)", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c02b5a85f381d29d670ebb78e83862b533acf031", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 6f1e78f06..4e3b11938 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -32,9 +32,7 @@ import org.apache.commons.httpclient.URI;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mockito;\n-import org.mockito.junit.jupiter.MockitoExtension;\n import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpRequestHeader;\n import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n", "next_change": null}, {"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 6f1e78f06..4e3b11938 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -42,7 +40,6 @@ import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnit\n import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.testutils.TestUtils;\n \n-@ExtendWith(MockitoExtension.class)\n public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n \n     private static final String LOGGED_IN_INDICATOR = \"logged in\";\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 6f1e78f06..4e3b11938 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -32,9 +32,7 @@ import org.apache.commons.httpclient.URI;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mockito;\n-import org.mockito.junit.jupiter.MockitoExtension;\n import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpRequestHeader;\n import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 4e3b11938..d6b1f76e8 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -39,6 +41,8 @@ import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.testutils.TestUtils;\n+import org.zaproxy.zap.users.AuthenticationState;\n+import org.zaproxy.zap.users.User;\n \n public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n \n", "next_change": {"commit": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex d6b1f76e8..d63f7b92c 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -44,7 +44,7 @@ import org.zaproxy.zap.testutils.TestUtils;\n import org.zaproxy.zap.users.AuthenticationState;\n import org.zaproxy.zap.users.User;\n \n-public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n+class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n \n     private static final String LOGGED_IN_INDICATOR = \"logged in\";\n     private static final String LOGGED_IN_BODY =\n", "next_change": null}]}}]}}, {"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 6f1e78f06..4e3b11938 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -42,7 +40,6 @@ import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnit\n import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.testutils.TestUtils;\n \n-@ExtendWith(MockitoExtension.class)\n public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n \n     private static final String LOGGED_IN_INDICATOR = \"logged in\";\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex 4e3b11938..d6b1f76e8 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -39,6 +41,8 @@ import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.testutils.TestUtils;\n+import org.zaproxy.zap.users.AuthenticationState;\n+import org.zaproxy.zap.users.User;\n \n public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n \n", "next_change": {"commit": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\nindex d6b1f76e8..d63f7b92c 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/AuthenticationMethodPollUrlUnitTest.java\n", "chunk": "@@ -44,7 +44,7 @@ import org.zaproxy.zap.testutils.TestUtils;\n import org.zaproxy.zap.users.AuthenticationState;\n import org.zaproxy.zap.users.User;\n \n-public class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n+class AuthenticationMethodPollUrlUnitTest extends TestUtils {\n \n     private static final String LOGGED_IN_INDICATOR = \"logged in\";\n     private static final String LOGGED_IN_BODY =\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "committedDate": "2021-05-14 18:27:23 +0100", "message": "Reduce accessibility in tests"}, {"oid": "14a8037b159e6e2433946a27d847796a74dee673", "committedDate": "2022-10-14 23:11:42 +0100", "message": "Remove test class of legacy HttpSender"}, {"oid": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "committedDate": "2022-10-17 17:35:27 +0100", "message": "Do not rely on HttpSender implementation in tests"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyMDUyNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520420524", "body": "Should not be needed.", "bodyText": "Should not be needed.", "bodyHTML": "<p dir=\"auto\">Should not be needed.</p>", "author": "thc202", "createdAt": "2020-11-10T09:39:10Z", "path": "zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.authentication;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n+import org.zaproxy.zap.authentication.PostBasedAuthenticationMethodType.PostBasedAuthenticationMethod;\n+import org.zaproxy.zap.model.Context;\n+import org.zaproxy.zap.session.SessionManagementMethod;\n+import org.zaproxy.zap.session.WebSession;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.testutils.TestUtils;\n+import org.zaproxy.zap.users.User;\n+import org.zaproxy.zap.utils.I18N;\n+\n+@ExtendWith(MockitoExtension.class)", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d2e668899..4271736f3 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -59,7 +58,6 @@ import org.zaproxy.zap.testutils.TestUtils;\n import org.zaproxy.zap.users.User;\n import org.zaproxy.zap.utils.I18N;\n \n-@ExtendWith(MockitoExtension.class)\n public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n \n     private static final String LOGGED_IN_INDICATOR = \"logged in\";\n", "next_change": {"commit": "32d8683d30ec4103c316713ac23d70f0d68ffdd3", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex 4271736f3..f697df636 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -56,7 +53,6 @@ import org.zaproxy.zap.session.WebSession;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.testutils.TestUtils;\n import org.zaproxy.zap.users.User;\n-import org.zaproxy.zap.utils.I18N;\n \n public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d2e668899..d16c97462 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -57,9 +51,7 @@ import org.zaproxy.zap.session.WebSession;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.testutils.TestUtils;\n import org.zaproxy.zap.users.User;\n-import org.zaproxy.zap.utils.I18N;\n \n-@ExtendWith(MockitoExtension.class)\n public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n \n     private static final String LOGGED_IN_INDICATOR = \"logged in\";\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d16c97462..2552602cb 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -50,6 +51,7 @@ import org.zaproxy.zap.session.SessionManagementMethod;\n import org.zaproxy.zap.session.WebSession;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.testutils.TestUtils;\n+import org.zaproxy.zap.users.AuthenticationState;\n import org.zaproxy.zap.users.User;\n \n public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n", "next_change": {"commit": "62dd54fa53a4a20aba69ac1ab13c5612524a9adf", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex 2552602cb..d32cbe7bb 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -39,22 +36,16 @@ import java.util.List;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n-import org.parosproxy.paros.Constant;\n import org.parosproxy.paros.network.HttpMessage;\n import org.zaproxy.zap.WithConfigsTest;\n import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n import org.zaproxy.zap.authentication.PostBasedAuthenticationMethodType.PostBasedAuthenticationMethod;\n-import org.zaproxy.zap.model.Context;\n-import org.zaproxy.zap.session.SessionManagementMethod;\n-import org.zaproxy.zap.session.WebSession;\n import org.zaproxy.zap.testutils.NanoServerHandler;\n-import org.zaproxy.zap.testutils.TestUtils;\n import org.zaproxy.zap.users.AuthenticationState;\n import org.zaproxy.zap.users.User;\n \n-public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n+public class FormBasedAuthenticationMethodTypeUnitTest extends WithConfigsTest {\n \n     private static final String LOGGED_IN_INDICATOR = \"logged in\";\n     private static final String LOGGED_IN_BODY =\n", "next_change": {"commit": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d32cbe7bb..9f32d046d 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -45,7 +45,7 @@ import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.users.AuthenticationState;\n import org.zaproxy.zap.users.User;\n \n-public class FormBasedAuthenticationMethodTypeUnitTest extends WithConfigsTest {\n+class FormBasedAuthenticationMethodTypeUnitTest extends WithConfigsTest {\n \n     private static final String LOGGED_IN_INDICATOR = \"logged in\";\n     private static final String LOGGED_IN_BODY =\n", "next_change": {"commit": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex 9f32d046d..b900e05c1 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -41,7 +37,6 @@ import org.zaproxy.zap.WithConfigsTest;\n import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n import org.zaproxy.zap.authentication.PostBasedAuthenticationMethodType.PostBasedAuthenticationMethod;\n-import org.zaproxy.zap.testutils.NanoServerHandler;\n import org.zaproxy.zap.users.AuthenticationState;\n import org.zaproxy.zap.users.User;\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "a5b45117f0c03e25189a6d775eed2a56d4981ffb", "committedDate": "2020-11-24 10:13:07 +0000", "message": "Do not recompile the scripts if not changed"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "62dd54fa53a4a20aba69ac1ab13c5612524a9adf", "committedDate": "2021-01-28 16:10:16 +0000", "message": "Tidy up tests' setup"}, {"oid": "cebaedcc35f6f2effb3252a16cd9bfaec5673437", "committedDate": "2021-05-14 18:26:42 +0100", "message": "Remove redundant type arguments"}, {"oid": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "committedDate": "2021-05-14 18:27:23 +0100", "message": "Reduce accessibility in tests"}, {"oid": "14a8037b159e6e2433946a27d847796a74dee673", "committedDate": "2022-10-14 23:11:42 +0100", "message": "Remove test class of legacy HttpSender"}, {"oid": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "committedDate": "2022-10-17 17:35:27 +0100", "message": "Do not rely on HttpSender implementation in tests"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyMDU0Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520420543", "body": "Better as instance variables.", "bodyText": "Better as instance variables.", "bodyHTML": "<p dir=\"auto\">Better as instance variables.</p>", "author": "thc202", "createdAt": "2020-11-10T09:39:12Z", "path": "zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.authentication;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n+import org.zaproxy.zap.authentication.PostBasedAuthenticationMethodType.PostBasedAuthenticationMethod;\n+import org.zaproxy.zap.model.Context;\n+import org.zaproxy.zap.session.SessionManagementMethod;\n+import org.zaproxy.zap.session.WebSession;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.testutils.TestUtils;\n+import org.zaproxy.zap.users.User;\n+import org.zaproxy.zap.utils.I18N;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n+\n+    private static final String LOGGED_IN_INDICATOR = \"logged in\";\n+    private static final String LOGGED_IN_BODY =\n+            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \"\n+                    + \"Pellentesque auctor nulla id turpis placerat vulputate.\"\n+                    + LOGGED_IN_INDICATOR\n+                    + \" Proin tempor bibendum eros rutrum. \";\n+\n+    private AuthenticationMethod method;\n+    private FormBasedAuthenticationMethodType type;\n+    private static Context mockedContext;\n+    private static SessionManagementMethod mockedSessionManagementMethod;", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d2e668899..4271736f3 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -71,8 +69,8 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n \n     private AuthenticationMethod method;\n     private FormBasedAuthenticationMethodType type;\n-    private static Context mockedContext;\n-    private static SessionManagementMethod mockedSessionManagementMethod;\n+    private Context mockedContext;\n+    private SessionManagementMethod mockedSessionManagementMethod;\n \n     @BeforeEach\n     public void setUp() throws Exception {\n", "next_change": {"commit": "32d8683d30ec4103c316713ac23d70f0d68ffdd3", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex 4271736f3..f697df636 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -75,12 +71,7 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n     @BeforeEach\n     public void setUp() throws Exception {\n \n-        Constant.getInstance();\n-        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n-        given(i18n.getString(anyString())).willReturn(\"\");\n-        given(i18n.getString(anyString(), any())).willReturn(\"\");\n-        given(i18n.getLocal()).willReturn(Locale.getDefault());\n-        Constant.messages = i18n;\n+        WithConfigsTest.setUpConstant();\n \n         type = new FormBasedAuthenticationMethodType();\n         method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n", "next_change": {"commit": "876fae02b941ca68246d9d5796b7fcdbcd726d62", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex f697df636..d16c97462 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -74,15 +72,12 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n         WithConfigsTest.setUpConstant();\n \n         type = new FormBasedAuthenticationMethodType();\n-        method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n+        method = type.createAuthenticationMethod(1);\n         method.setAuthCheckingStrategy(AuthCheckingStrategy.POLL_URL);\n         method.setPollFrequencyUnits(AuthPollFrequencyUnits.REQUESTS);\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n \n-        type = new FormBasedAuthenticationMethodType();\n-        Mockito.when(method.getType()).thenReturn(type);\n-\n         // Make sure no actual message processing is done\n         mockedSessionManagementMethod = Mockito.mock(SessionManagementMethod.class);\n         doNothing()\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d2e668899..d16c97462 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -71,29 +63,21 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n \n     private AuthenticationMethod method;\n     private FormBasedAuthenticationMethodType type;\n-    private static Context mockedContext;\n-    private static SessionManagementMethod mockedSessionManagementMethod;\n+    private Context mockedContext;\n+    private SessionManagementMethod mockedSessionManagementMethod;\n \n     @BeforeEach\n     public void setUp() throws Exception {\n \n-        Constant.getInstance();\n-        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n-        given(i18n.getString(anyString())).willReturn(\"\");\n-        given(i18n.getString(anyString(), any())).willReturn(\"\");\n-        given(i18n.getLocal()).willReturn(Locale.getDefault());\n-        Constant.messages = i18n;\n+        WithConfigsTest.setUpConstant();\n \n         type = new FormBasedAuthenticationMethodType();\n-        method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n+        method = type.createAuthenticationMethod(1);\n         method.setAuthCheckingStrategy(AuthCheckingStrategy.POLL_URL);\n         method.setPollFrequencyUnits(AuthPollFrequencyUnits.REQUESTS);\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n \n-        type = new FormBasedAuthenticationMethodType();\n-        Mockito.when(method.getType()).thenReturn(type);\n-\n         // Make sure no actual message processing is done\n         mockedSessionManagementMethod = Mockito.mock(SessionManagementMethod.class);\n         doNothing()\n", "next_change": {"commit": "62dd54fa53a4a20aba69ac1ab13c5612524a9adf", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d16c97462..d32cbe7bb 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -78,20 +67,11 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n \n-        // Make sure no actual message processing is done\n-        mockedSessionManagementMethod = Mockito.mock(SessionManagementMethod.class);\n-        doNothing()\n-                .when(mockedSessionManagementMethod)\n-                .processMessageToMatchSession((HttpMessage) any(), (WebSession) any());\n-\n-        mockedContext = Mockito.mock(Context.class);\n-        when(mockedContext.getSessionManagementMethod()).thenReturn(mockedSessionManagementMethod);\n-\n         this.startServer();\n     }\n \n     @AfterEach\n-    public void shutDownServer() throws Exception {\n+    void cleanUpServer() {\n         stopServer();\n     }\n \n", "next_change": {"commit": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d32cbe7bb..9f32d046d 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -76,7 +76,7 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends WithConfigsTest {\n     }\n \n     @Test\n-    public void shouldReplaceUsernameInPollRequest() throws NullPointerException, IOException {\n+    void shouldReplaceUsernameInPollRequest() throws NullPointerException, IOException {\n         // Given\n         String test = \"/shouldReplaceUsernameInPollRequest/test\";\n         String encodedPattern =\n", "next_change": {"commit": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex 9f32d046d..b900e05c1 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -66,13 +61,6 @@ class FormBasedAuthenticationMethodTypeUnitTest extends WithConfigsTest {\n         method.setPollFrequencyUnits(AuthPollFrequencyUnits.REQUESTS);\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n-\n-        this.startServer();\n-    }\n-\n-    @AfterEach\n-    void cleanUpServer() {\n-        stopServer();\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "a5b45117f0c03e25189a6d775eed2a56d4981ffb", "committedDate": "2020-11-24 10:13:07 +0000", "message": "Do not recompile the scripts if not changed"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "62dd54fa53a4a20aba69ac1ab13c5612524a9adf", "committedDate": "2021-01-28 16:10:16 +0000", "message": "Tidy up tests' setup"}, {"oid": "cebaedcc35f6f2effb3252a16cd9bfaec5673437", "committedDate": "2021-05-14 18:26:42 +0100", "message": "Remove redundant type arguments"}, {"oid": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "committedDate": "2021-05-14 18:27:23 +0100", "message": "Reduce accessibility in tests"}, {"oid": "14a8037b159e6e2433946a27d847796a74dee673", "committedDate": "2022-10-14 23:11:42 +0100", "message": "Remove test class of legacy HttpSender"}, {"oid": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "committedDate": "2022-10-17 17:35:27 +0100", "message": "Do not rely on HttpSender implementation in tests"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyMTI4Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520421286", "body": "Worth exposing a method, e.g. `WithConfigsTest#setupConstant()` instead of duplicating here.", "bodyText": "Worth exposing a method, e.g. WithConfigsTest#setupConstant() instead of duplicating here.", "bodyHTML": "<p dir=\"auto\">Worth exposing a method, e.g. <code>WithConfigsTest#setupConstant()</code> instead of duplicating here.</p>", "author": "thc202", "createdAt": "2020-11-10T09:40:14Z", "path": "zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.authentication;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n+import org.zaproxy.zap.authentication.PostBasedAuthenticationMethodType.PostBasedAuthenticationMethod;\n+import org.zaproxy.zap.model.Context;\n+import org.zaproxy.zap.session.SessionManagementMethod;\n+import org.zaproxy.zap.session.WebSession;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.testutils.TestUtils;\n+import org.zaproxy.zap.users.User;\n+import org.zaproxy.zap.utils.I18N;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n+\n+    private static final String LOGGED_IN_INDICATOR = \"logged in\";\n+    private static final String LOGGED_IN_BODY =\n+            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \"\n+                    + \"Pellentesque auctor nulla id turpis placerat vulputate.\"\n+                    + LOGGED_IN_INDICATOR\n+                    + \" Proin tempor bibendum eros rutrum. \";\n+\n+    private AuthenticationMethod method;\n+    private FormBasedAuthenticationMethodType type;\n+    private static Context mockedContext;\n+    private static SessionManagementMethod mockedSessionManagementMethod;\n+\n+    @BeforeEach\n+    public void setUp() throws Exception {\n+\n+        Constant.getInstance();\n+        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n+        given(i18n.getString(anyString())).willReturn(\"\");\n+        given(i18n.getString(anyString(), any())).willReturn(\"\");\n+        given(i18n.getLocal()).willReturn(Locale.getDefault());\n+        Constant.messages = i18n;", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32d8683d30ec4103c316713ac23d70f0d68ffdd3", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d2e668899..f697df636 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -71,18 +65,13 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n \n     private AuthenticationMethod method;\n     private FormBasedAuthenticationMethodType type;\n-    private static Context mockedContext;\n-    private static SessionManagementMethod mockedSessionManagementMethod;\n+    private Context mockedContext;\n+    private SessionManagementMethod mockedSessionManagementMethod;\n \n     @BeforeEach\n     public void setUp() throws Exception {\n \n-        Constant.getInstance();\n-        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n-        given(i18n.getString(anyString())).willReturn(\"\");\n-        given(i18n.getString(anyString(), any())).willReturn(\"\");\n-        given(i18n.getLocal()).willReturn(Locale.getDefault());\n-        Constant.messages = i18n;\n+        WithConfigsTest.setUpConstant();\n \n         type = new FormBasedAuthenticationMethodType();\n         method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n", "next_change": {"commit": "876fae02b941ca68246d9d5796b7fcdbcd726d62", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex f697df636..d16c97462 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -74,15 +72,12 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n         WithConfigsTest.setUpConstant();\n \n         type = new FormBasedAuthenticationMethodType();\n-        method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n+        method = type.createAuthenticationMethod(1);\n         method.setAuthCheckingStrategy(AuthCheckingStrategy.POLL_URL);\n         method.setPollFrequencyUnits(AuthPollFrequencyUnits.REQUESTS);\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n \n-        type = new FormBasedAuthenticationMethodType();\n-        Mockito.when(method.getType()).thenReturn(type);\n-\n         // Make sure no actual message processing is done\n         mockedSessionManagementMethod = Mockito.mock(SessionManagementMethod.class);\n         doNothing()\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d2e668899..d16c97462 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -71,29 +63,21 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n \n     private AuthenticationMethod method;\n     private FormBasedAuthenticationMethodType type;\n-    private static Context mockedContext;\n-    private static SessionManagementMethod mockedSessionManagementMethod;\n+    private Context mockedContext;\n+    private SessionManagementMethod mockedSessionManagementMethod;\n \n     @BeforeEach\n     public void setUp() throws Exception {\n \n-        Constant.getInstance();\n-        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n-        given(i18n.getString(anyString())).willReturn(\"\");\n-        given(i18n.getString(anyString(), any())).willReturn(\"\");\n-        given(i18n.getLocal()).willReturn(Locale.getDefault());\n-        Constant.messages = i18n;\n+        WithConfigsTest.setUpConstant();\n \n         type = new FormBasedAuthenticationMethodType();\n-        method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n+        method = type.createAuthenticationMethod(1);\n         method.setAuthCheckingStrategy(AuthCheckingStrategy.POLL_URL);\n         method.setPollFrequencyUnits(AuthPollFrequencyUnits.REQUESTS);\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n \n-        type = new FormBasedAuthenticationMethodType();\n-        Mockito.when(method.getType()).thenReturn(type);\n-\n         // Make sure no actual message processing is done\n         mockedSessionManagementMethod = Mockito.mock(SessionManagementMethod.class);\n         doNothing()\n", "next_change": {"commit": "62dd54fa53a4a20aba69ac1ab13c5612524a9adf", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d16c97462..d32cbe7bb 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -78,20 +67,11 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n \n-        // Make sure no actual message processing is done\n-        mockedSessionManagementMethod = Mockito.mock(SessionManagementMethod.class);\n-        doNothing()\n-                .when(mockedSessionManagementMethod)\n-                .processMessageToMatchSession((HttpMessage) any(), (WebSession) any());\n-\n-        mockedContext = Mockito.mock(Context.class);\n-        when(mockedContext.getSessionManagementMethod()).thenReturn(mockedSessionManagementMethod);\n-\n         this.startServer();\n     }\n \n     @AfterEach\n-    public void shutDownServer() throws Exception {\n+    void cleanUpServer() {\n         stopServer();\n     }\n \n", "next_change": {"commit": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d32cbe7bb..9f32d046d 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -76,7 +76,7 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends WithConfigsTest {\n     }\n \n     @Test\n-    public void shouldReplaceUsernameInPollRequest() throws NullPointerException, IOException {\n+    void shouldReplaceUsernameInPollRequest() throws NullPointerException, IOException {\n         // Given\n         String test = \"/shouldReplaceUsernameInPollRequest/test\";\n         String encodedPattern =\n", "next_change": {"commit": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex 9f32d046d..b900e05c1 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -66,13 +61,6 @@ class FormBasedAuthenticationMethodTypeUnitTest extends WithConfigsTest {\n         method.setPollFrequencyUnits(AuthPollFrequencyUnits.REQUESTS);\n         method.setPollFrequency(5);\n         method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n-\n-        this.startServer();\n-    }\n-\n-    @AfterEach\n-    void cleanUpServer() {\n-        stopServer();\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "a5b45117f0c03e25189a6d775eed2a56d4981ffb", "committedDate": "2020-11-24 10:13:07 +0000", "message": "Do not recompile the scripts if not changed"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "62dd54fa53a4a20aba69ac1ab13c5612524a9adf", "committedDate": "2021-01-28 16:10:16 +0000", "message": "Tidy up tests' setup"}, {"oid": "cebaedcc35f6f2effb3252a16cd9bfaec5673437", "committedDate": "2021-05-14 18:26:42 +0100", "message": "Remove redundant type arguments"}, {"oid": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "committedDate": "2021-05-14 18:27:23 +0100", "message": "Reduce accessibility in tests"}, {"oid": "14a8037b159e6e2433946a27d847796a74dee673", "committedDate": "2022-10-14 23:11:42 +0100", "message": "Remove test class of legacy HttpSender"}, {"oid": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "committedDate": "2022-10-17 17:35:27 +0100", "message": "Do not rely on HttpSender implementation in tests"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyNTI1MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520425251", "body": "It could just mock it (instead of instantiate and spy), e.g.:\r\n```Java\r\n    User user = mock(User.class);\r\n    given(user.getAuthenticationCredentials()).willReturn(new UsernamePasswordAuthenticationCredentials(...));\r\n    given(user.getContext()).willReturn(mockedContext);\r\n```", "bodyText": "It could just mock it (instead of instantiate and spy), e.g.:\n    User user = mock(User.class);\n    given(user.getAuthenticationCredentials()).willReturn(new UsernamePasswordAuthenticationCredentials(...));\n    given(user.getContext()).willReturn(mockedContext);", "bodyHTML": "<p dir=\"auto\">It could just mock it (instead of instantiate and spy), e.g.:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    User user = mock(User.class);\n    given(user.getAuthenticationCredentials()).willReturn(new UsernamePasswordAuthenticationCredentials(...));\n    given(user.getContext()).willReturn(mockedContext);\"><pre>    <span class=\"pl-smi\">User</span> user <span class=\"pl-k\">=</span> mock(<span class=\"pl-smi\">User</span><span class=\"pl-k\">.</span>class);\n    given(user<span class=\"pl-k\">.</span>getAuthenticationCredentials())<span class=\"pl-k\">.</span>willReturn(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">UsernamePasswordAuthenticationCredentials</span>(<span class=\"pl-c1\">...</span>));\n    given(user<span class=\"pl-k\">.</span>getContext())<span class=\"pl-k\">.</span>willReturn(mockedContext);</pre></div>", "author": "thc202", "createdAt": "2020-11-10T09:45:57Z", "path": "zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.authentication;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n+import org.zaproxy.zap.authentication.PostBasedAuthenticationMethodType.PostBasedAuthenticationMethod;\n+import org.zaproxy.zap.model.Context;\n+import org.zaproxy.zap.session.SessionManagementMethod;\n+import org.zaproxy.zap.session.WebSession;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.testutils.TestUtils;\n+import org.zaproxy.zap.users.User;\n+import org.zaproxy.zap.utils.I18N;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n+\n+    private static final String LOGGED_IN_INDICATOR = \"logged in\";\n+    private static final String LOGGED_IN_BODY =\n+            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \"\n+                    + \"Pellentesque auctor nulla id turpis placerat vulputate.\"\n+                    + LOGGED_IN_INDICATOR\n+                    + \" Proin tempor bibendum eros rutrum. \";\n+\n+    private AuthenticationMethod method;\n+    private FormBasedAuthenticationMethodType type;\n+    private static Context mockedContext;\n+    private static SessionManagementMethod mockedSessionManagementMethod;\n+\n+    @BeforeEach\n+    public void setUp() throws Exception {\n+\n+        Constant.getInstance();\n+        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n+        given(i18n.getString(anyString())).willReturn(\"\");\n+        given(i18n.getString(anyString(), any())).willReturn(\"\");\n+        given(i18n.getLocal()).willReturn(Locale.getDefault());\n+        Constant.messages = i18n;\n+\n+        type = new FormBasedAuthenticationMethodType();\n+        method = Mockito.mock(AuthenticationMethod.class, Mockito.CALLS_REAL_METHODS);\n+        method.setAuthCheckingStrategy(AuthCheckingStrategy.POLL_URL);\n+        method.setPollFrequencyUnits(AuthPollFrequencyUnits.REQUESTS);\n+        method.setPollFrequency(5);\n+        method.setLoggedInIndicatorPattern(LOGGED_IN_INDICATOR);\n+\n+        type = new FormBasedAuthenticationMethodType();\n+        Mockito.when(method.getType()).thenReturn(type);\n+\n+        // Make sure no actual message processing is done\n+        mockedSessionManagementMethod = Mockito.mock(SessionManagementMethod.class);\n+        doNothing()\n+                .when(mockedSessionManagementMethod)\n+                .processMessageToMatchSession((HttpMessage) any(), (WebSession) any());\n+\n+        mockedContext = Mockito.mock(Context.class);\n+        when(mockedContext.getSessionManagementMethod()).thenReturn(mockedSessionManagementMethod);\n+\n+        this.startServer();\n+    }\n+\n+    @AfterEach\n+    public void shutDownServer() throws Exception {\n+        stopServer();\n+    }\n+\n+    @Test\n+    public void shouldReplaceUsernameInPollRequest() throws NullPointerException, IOException {\n+        // Given\n+        String test = \"/shouldReplaceUsernameInPollRequest/test\";\n+        String encodedPattern =\n+                URLEncoder.encode(\n+                        PostBasedAuthenticationMethod.MSG_USER_PATTERN,\n+                        StandardCharsets.UTF_8.name());\n+        String pollUrl = \"/shouldReplaceUsernameInPollRequest/pollUrl\";\n+        String pollData = \"user=\" + PostBasedAuthenticationMethod.MSG_USER_PATTERN;\n+        String username = \"user\";\n+        final List<String> orderedReqUrls = new ArrayList<>();\n+        final List<String> orderedReqData = new ArrayList<>();\n+\n+        this.nano.addHandler(\n+                new NanoServerHandler(pollUrl.replace(encodedPattern, username)) {\n+                    @Override\n+                    protected Response serve(IHTTPSession session) {\n+                        orderedReqUrls.add(\n+                                session.getUri() + \"?\" + session.getQueryParameterString());\n+\n+                        HashMap<String, String> map = new HashMap<String, String>();\n+                        try {\n+                            session.parseBody(map);\n+                            orderedReqData.add(map.get(\"postData\"));\n+                        } catch (Exception e) {\n+                        }\n+                        return newFixedLengthResponse(LOGGED_IN_BODY);\n+                    }\n+                });\n+        HttpMessage testMsg = this.getHttpMessage(test);\n+        HttpMessage pollMsg = this.getHttpMessage(pollUrl + \"?\" + encodedPattern);\n+\n+        method.setPollUrl(pollMsg.getRequestHeader().getURI().toString());\n+        method.setPollData(pollData);\n+\n+        User user = spy(new User(0, \"user\"));\n+        user.setAuthenticationCredentials(\n+                new UsernamePasswordAuthenticationCredentials(username, \"\"));\n+        doReturn(mockedContext).when(user).getContext();", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d2e668899..4271736f3 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -147,10 +145,10 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n         method.setPollUrl(pollMsg.getRequestHeader().getURI().toString());\n         method.setPollData(pollData);\n \n-        User user = spy(new User(0, \"user\"));\n-        user.setAuthenticationCredentials(\n-                new UsernamePasswordAuthenticationCredentials(username, \"\"));\n-        doReturn(mockedContext).when(user).getContext();\n+        User user = mock(User.class);\n+        given(user.getAuthenticationCredentials())\n+                .willReturn(new UsernamePasswordAuthenticationCredentials(username, \"\"));\n+        given(user.getContext()).willReturn(mockedContext);\n \n         // When/Then\n         assertThat(method.isAuthenticated(testMsg, user), is(true));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d2e668899..d16c97462 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -147,10 +131,10 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n         method.setPollUrl(pollMsg.getRequestHeader().getURI().toString());\n         method.setPollData(pollData);\n \n-        User user = spy(new User(0, \"user\"));\n-        user.setAuthenticationCredentials(\n-                new UsernamePasswordAuthenticationCredentials(username, \"\"));\n-        doReturn(mockedContext).when(user).getContext();\n+        User user = mock(User.class);\n+        given(user.getAuthenticationCredentials())\n+                .willReturn(new UsernamePasswordAuthenticationCredentials(username, \"\"));\n+        given(user.getContext()).willReturn(mockedContext);\n \n         // When/Then\n         assertThat(method.isAuthenticated(testMsg, user), is(true));\n", "next_change": {"commit": "849c0876fa68ecf0012871dc7599a78556a12991", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex d16c97462..2552602cb 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -132,6 +135,7 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n         method.setPollData(pollData);\n \n         User user = mock(User.class);\n+        given(user.getAuthenticationState()).willReturn(new AuthenticationState());\n         given(user.getAuthenticationCredentials())\n                 .willReturn(new UsernamePasswordAuthenticationCredentials(username, \"\"));\n         given(user.getContext()).willReturn(mockedContext);\n", "next_change": {"commit": "62dd54fa53a4a20aba69ac1ab13c5612524a9adf", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\nindex 2552602cb..d32cbe7bb 100644\n--- a/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/authentication/FormBasedAuthenticationMethodTypeUnitTest.java\n", "chunk": "@@ -138,7 +115,6 @@ public class FormBasedAuthenticationMethodTypeUnitTest extends TestUtils {\n         given(user.getAuthenticationState()).willReturn(new AuthenticationState());\n         given(user.getAuthenticationCredentials())\n                 .willReturn(new UsernamePasswordAuthenticationCredentials(username, \"\"));\n-        given(user.getContext()).willReturn(mockedContext);\n \n         // When/Then\n         assertThat(method.isAuthenticated(testMsg, user), is(true));\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "a5b45117f0c03e25189a6d775eed2a56d4981ffb", "committedDate": "2020-11-24 10:13:07 +0000", "message": "Do not recompile the scripts if not changed"}, {"oid": "849c0876fa68ecf0012871dc7599a78556a12991", "committedDate": "2020-12-01 11:24:33 +0000", "message": "Auth multi-user fix and new API endpoints"}, {"oid": "62dd54fa53a4a20aba69ac1ab13c5612524a9adf", "committedDate": "2021-01-28 16:10:16 +0000", "message": "Tidy up tests' setup"}, {"oid": "cebaedcc35f6f2effb3252a16cd9bfaec5673437", "committedDate": "2021-05-14 18:26:42 +0100", "message": "Remove redundant type arguments"}, {"oid": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "committedDate": "2021-05-14 18:27:23 +0100", "message": "Reduce accessibility in tests"}, {"oid": "14a8037b159e6e2433946a27d847796a74dee673", "committedDate": "2022-10-14 23:11:42 +0100", "message": "Remove test class of legacy HttpSender"}, {"oid": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "committedDate": "2022-10-17 17:35:27 +0100", "message": "Do not rely on HttpSender implementation in tests"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyNjA4NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520426085", "body": "Should not be needed.", "bodyText": "Should not be needed.", "bodyHTML": "<p dir=\"auto\">Should not be needed.</p>", "author": "thc202", "createdAt": "2020-11-10T09:47:13Z", "path": "zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java", "diffHunk": "@@ -19,25 +19,49 @@\n  */\n package org.zaproxy.zap.extension.authentication;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.withSettings;\n \n+import java.util.Locale;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.extension.ExtensionHook;\n+import org.parosproxy.paros.model.Model;\n+import org.zaproxy.zap.WithConfigsTest;\n+import org.zaproxy.zap.authentication.AuthenticationMethod;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthCheckingStrategy;\n+import org.zaproxy.zap.authentication.AuthenticationMethod.AuthPollFrequencyUnits;\n+import org.zaproxy.zap.authentication.FormBasedAuthenticationMethodType;\n+import org.zaproxy.zap.authentication.FormBasedAuthenticationMethodType.FormBasedAuthenticationMethod;\n import org.zaproxy.zap.model.Context;\n+import org.zaproxy.zap.utils.I18N;\n import org.zaproxy.zap.utils.ZapXmlConfiguration;\n \n /** Unit test for {@link ExtensionAuthentication}. */\n-class ExtensionAuthenticationUnitTest {\n+class ExtensionAuthenticationUnitTest extends WithConfigsTest {\n \n     private ExtensionAuthentication extensionAuthentication;\n \n     @BeforeEach\n     void setup() {\n+        Constant.getInstance();\n+        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n+        given(i18n.getString(anyString())).willReturn(\"\");\n+        given(i18n.getString(anyString(), any())).willReturn(\"\");\n+        given(i18n.getLocal()).willReturn(Locale.getDefault());\n+        Constant.messages = i18n;", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java b/zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java\nindex 6f65a2180..65ddf00ec 100644\n--- a/zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java\n", "chunk": "@@ -55,13 +48,6 @@ class ExtensionAuthenticationUnitTest extends WithConfigsTest {\n \n     @BeforeEach\n     void setup() {\n-        Constant.getInstance();\n-        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n-        given(i18n.getString(anyString())).willReturn(\"\");\n-        given(i18n.getString(anyString(), any())).willReturn(\"\");\n-        given(i18n.getLocal()).willReturn(Locale.getDefault());\n-        Constant.messages = i18n;\n-\n         extensionAuthentication = new ExtensionAuthentication();\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java b/zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java\nindex 6f65a2180..65ddf00ec 100644\n--- a/zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/extension/authentication/ExtensionAuthenticationUnitTest.java\n", "chunk": "@@ -55,13 +48,6 @@ class ExtensionAuthenticationUnitTest extends WithConfigsTest {\n \n     @BeforeEach\n     void setup() {\n-        Constant.getInstance();\n-        I18N i18n = Mockito.mock(I18N.class, withSettings().lenient());\n-        given(i18n.getString(anyString())).willReturn(\"\");\n-        given(i18n.getString(anyString(), any())).willReturn(\"\");\n-        given(i18n.getLocal()).willReturn(Locale.getDefault());\n-        Constant.messages = i18n;\n-\n         extensionAuthentication = new ExtensionAuthentication();\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "4ecba5bb4e7656ba2ca794e187ff4dcf9607f108", "committedDate": "2020-11-18 10:07:16 +0000", "message": "Fix NPE importing context with no poll data"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyNzI4NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6163#discussion_r520427284", "body": "Worth renaming these to `getContent`, not just for HTML.", "bodyText": "Worth renaming these to getContent, not just for HTML.", "bodyHTML": "<p dir=\"auto\">Worth renaming these to <code>getContent</code>, not just for HTML.</p>", "author": "thc202", "createdAt": "2020-11-10T09:49:05Z", "path": "zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java", "diffHunk": "@@ -61,4 +81,196 @@ protected Path getResourcePath(String resourcePath) {\n             throw new RuntimeException(e);\n         }\n     }\n+    /**\n+     * Starts the HTTP test server with a random port.\n+     *\n+     * <p>The port can be obtained with the method {@link HTTPDTestServer#getListeningPort()} from\n+     * the {@link #nano test server}.\n+     *\n+     * @throws IOException if an error occurred while starting the server.\n+     * @see #stopServer()\n+     */\n+    protected void startServer() throws IOException {\n+        startServer(getRandomPort());\n+    }\n+\n+    /**\n+     * Starts the HTTP test server with the specified port.\n+     *\n+     * <p>It's recommended to use {@link #startServer()} instead, using a fixed port might lead to\n+     * random failures when the port is already in use.\n+     *\n+     * @param port the port to listen to.\n+     * @throws IOException if an error occurred while starting the server.\n+     * @see #stopServer()\n+     */\n+    protected void startServer(int port) throws IOException {\n+        stopServer();\n+\n+        nano = new HTTPDTestServer(port);\n+        nano.start();\n+    }\n+\n+    private static int getRandomPort() throws IOException {\n+        try (ServerSocket server = new ServerSocket(0)) {\n+            return server.getLocalPort();\n+        }\n+    }\n+\n+    /**\n+     * Stops the HTTP test server.\n+     *\n+     * @see #startServer()\n+     */\n+    protected void stopServer() {\n+        if (nano == null) {\n+            return;\n+        }\n+        nano.stop();\n+    }\n+\n+    /**\n+     * Creates a (GET) HTTP message with the given path, for the {@link #nano test server}.\n+     *\n+     * <p>The response contains empty HTML tags, {@code <html></html>}.\n+     *\n+     * @param path the path component of the request-target, for example, {@code /dir/file.txt}.\n+     * @return the HTTP message, never {@code null}.\n+     * @throws IllegalStateException if the server was not {@link #startServer() started} prior\n+     *     calling this method.\n+     * @throws HttpMalformedHeaderException if an error occurred while creating the HTTP message.\n+     */\n+    protected HttpMessage getHttpMessage(String path) throws HttpMalformedHeaderException {\n+        return this.getHttpMessage(\"GET\", DEFAULT_CONTENT_TYPE, path, \"<html></html>\");\n+    }\n+\n+    /**\n+     * Creates a (GET) HTTP message with the given path, for the {@link #nano test server}.\n+     *\n+     * <p>The response contains empty HTML tags, {@code <html></html>}.\n+     *\n+     * @param path the path component of the request-target, for example, {@code /dir/file.txt}.\n+     * @return the HTTP message, never {@code null}.\n+     * @throws IllegalStateException if the server was not {@link #startServer() started} prior\n+     *     calling this method.\n+     * @throws HttpMalformedHeaderException if an error occurred while creating the HTTP message.\n+     */\n+    protected HttpMessage getHttpMessage(String path, String contentType)\n+            throws HttpMalformedHeaderException {\n+        return this.getHttpMessage(\"GET\", contentType, path, \"<html></html>\");\n+    }\n+\n+    /**\n+     * Creates a HTTP message with the given data, for the {@link #nano test server}.\n+     *\n+     * @param method the HTTP method.\n+     * @param path the path component of the request-target, for example, {@code /dir/file.txt}.\n+     * @param responseBody the body of the response.\n+     * @return the HTTP message, never {@code null}.\n+     * @throws IllegalStateException if the server was not {@link #startServer() started} prior\n+     *     calling this method.\n+     * @throws HttpMalformedHeaderException if an error occurred while creating the HTTP message.\n+     */\n+    protected HttpMessage getHttpMessage(String method, String path, String responseBody)\n+            throws HttpMalformedHeaderException {\n+        return getHttpMessage(method, DEFAULT_CONTENT_TYPE, path, responseBody);\n+    }\n+    /**\n+     * Creates a HTTP message with the given data, for the {@link #nano test server}.\n+     *\n+     * @param method the HTTP method.\n+     * @param contentType the Content-Type header\n+     * @param path the path component of the request-target, for example, {@code /dir/file.txt}.\n+     * @param responseBody the body of the response.\n+     * @return the HTTP message, never {@code null}.\n+     * @throws IllegalStateException if the server was not {@link #startServer() started} prior\n+     *     calling this method.\n+     * @throws HttpMalformedHeaderException if an error occurred while creating the HTTP message.\n+     */\n+    protected HttpMessage getHttpMessage(\n+            String method, String contentType, String path, String responseBody)\n+            throws HttpMalformedHeaderException {\n+        if (nano == null) {\n+            throw new IllegalStateException(\"The HTTP test server was not started.\");\n+        }\n+\n+        HttpMessage msg = new HttpMessage();\n+        StringBuilder reqHeaderSB = new StringBuilder();\n+        reqHeaderSB.append(method);\n+        reqHeaderSB.append(\" http://localhost:\");\n+        reqHeaderSB.append(nano.getListeningPort());\n+        reqHeaderSB.append(path);\n+        reqHeaderSB.append(\" HTTP/1.1\\r\\n\");\n+        reqHeaderSB.append(\"Host: localhost:\").append(nano.getListeningPort()).append(\"\\r\\n\");\n+        reqHeaderSB.append(\"User-Agent: ZAP\\r\\n\");\n+        reqHeaderSB.append(\"Pragma: no-cache\\r\\n\");\n+        msg.setRequestHeader(reqHeaderSB.toString());\n+\n+        msg.setResponseBody(responseBody);\n+\n+        StringBuilder respHeaderSB = new StringBuilder();\n+        respHeaderSB.append(\"HTTP/1.1 200 OK\\r\\n\");\n+        respHeaderSB.append(\"Server: Apache-Coyote/1.1\\r\\n\");\n+        respHeaderSB.append(\"Content-Type: \");\n+        respHeaderSB.append(contentType);\n+        respHeaderSB.append(\"\\r\\n\");\n+        respHeaderSB.append(\"Content-Length: \");\n+        respHeaderSB.append(msg.getResponseBody().length());\n+        respHeaderSB.append(\"\\r\\n\");\n+        msg.setResponseHeader(respHeaderSB.toString());\n+\n+        return msg;\n+    }\n+\n+    /**\n+     * Gets the contents of the file with the given path.\n+     *\n+     * @param resourcePath the path to the resource.\n+     * @return the contents of the file.\n+     * @see #getResourcePath(String)\n+     */\n+    public String getHtml(String resourcePath) {", "originalCommit": "ce12eba9c0385ba616a2143930f221e4e6b95652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java b/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\nindex 259776680..c56d12376 100644\n--- a/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\n+++ b/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\n", "chunk": "@@ -229,8 +229,8 @@ public class TestUtils {\n      * @return the contents of the file.\n      * @see #getResourcePath(String)\n      */\n-    public String getHtml(String resourcePath) {\n-        return this.getHtml(resourcePath, (Map<String, String>) null);\n+    public String getContent(String resourcePath) {\n+        return this.getContent(resourcePath, (Map<String, String>) null);\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java b/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\nindex 259776680..c56d12376 100644\n--- a/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\n+++ b/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\n", "chunk": "@@ -229,8 +229,8 @@ public class TestUtils {\n      * @return the contents of the file.\n      * @see #getResourcePath(String)\n      */\n-    public String getHtml(String resourcePath) {\n-        return this.getHtml(resourcePath, (Map<String, String>) null);\n+    public String getContent(String resourcePath) {\n+        return this.getContent(resourcePath, (Map<String, String>) null);\n     }\n \n     /**\n", "next_change": {"commit": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "changed_code": [{"header": "diff --git a/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java b/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\nindex c56d12376..f57e28535 100644\n--- a/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\n+++ b/zap/src/test/java/org/zaproxy/zap/testutils/TestUtils.java\n", "chunk": "@@ -229,7 +229,7 @@ public class TestUtils {\n      * @return the contents of the file.\n      * @see #getResourcePath(String)\n      */\n-    public String getContent(String resourcePath) {\n+    protected String getContent(String resourcePath) {\n         return this.getContent(resourcePath, (Map<String, String>) null);\n     }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "36d2b17e760967fd3cf5cf5e104be876d2bc4942", "message": "Merge commit", "committedDate": null}, {"oid": "ec3b940b055bb993d0c248a3c7c7d29c01894ab8", "committedDate": "2021-05-14 18:27:23 +0100", "message": "Reduce accessibility in tests"}, {"oid": "35e64c3e3bebb2773e8c84e42304e99d8a9aaea8", "committedDate": "2022-10-17 17:35:27 +0100", "message": "Do not rely on HttpSender implementation in tests"}]}, {"oid": "8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "url": "https://github.com/zaproxy/zaproxy/commit/8c58b305e00b4f22cfae2f1f5a09e1cb96f1f655", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T10:30:32Z", "type": "forcePushed"}, {"oid": "32d8683d30ec4103c316713ac23d70f0d68ffdd3", "url": "https://github.com/zaproxy/zaproxy/commit/32d8683d30ec4103c316713ac23d70f0d68ffdd3", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T10:39:09Z", "type": "forcePushed"}, {"oid": "1bfd177417fbefa2ed153b4d79748a0520a7d96b", "url": "https://github.com/zaproxy/zaproxy/commit/1bfd177417fbefa2ed153b4d79748a0520a7d96b", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T10:41:52Z", "type": "forcePushed"}, {"oid": "c02b5a85f381d29d670ebb78e83862b533acf031", "url": "https://github.com/zaproxy/zaproxy/commit/c02b5a85f381d29d670ebb78e83862b533acf031", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T13:24:35Z", "type": "forcePushed"}, {"oid": "1835d5ff86027e3a584c13b69e7b9ec0920f038c", "url": "https://github.com/zaproxy/zaproxy/commit/1835d5ff86027e3a584c13b69e7b9ec0920f038c", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T14:07:18Z", "type": "forcePushed"}, {"oid": "9c18aaaf26f62285bf8255871c8e47bf87b95677", "url": "https://github.com/zaproxy/zaproxy/commit/9c18aaaf26f62285bf8255871c8e47bf87b95677", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T14:50:50Z", "type": "forcePushed"}, {"oid": "876fae02b941ca68246d9d5796b7fcdbcd726d62", "url": "https://github.com/zaproxy/zaproxy/commit/876fae02b941ca68246d9d5796b7fcdbcd726d62", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T15:04:04Z", "type": "forcePushed"}, {"oid": "ea03ad12de790046307bf269d60952b63ee86c53", "url": "https://github.com/zaproxy/zaproxy/commit/ea03ad12de790046307bf269d60952b63ee86c53", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T15:11:34Z", "type": "forcePushed"}, {"oid": "33e6abd7a633b980b7bb0a8904db890fb7753895", "url": "https://github.com/zaproxy/zaproxy/commit/33e6abd7a633b980b7bb0a8904db890fb7753895", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T15:16:18Z", "type": "commit"}, {"oid": "33e6abd7a633b980b7bb0a8904db890fb7753895", "url": "https://github.com/zaproxy/zaproxy/commit/33e6abd7a633b980b7bb0a8904db890fb7753895", "message": "Merge remote-tracking branch 'upstream/develop' into feature/authpoll\n\nConflicts:\n\tzap/src/main/java/org/zaproxy/zap/extension/authentication/ExtensionAuthentication.java\n\n\nSigned-off-by: Simon Bennetts <psiinon@gmail.com>", "committedDate": "2020-11-10T15:16:18Z", "type": "forcePushed"}]}